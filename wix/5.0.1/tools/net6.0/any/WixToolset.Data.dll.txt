[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal interface SimpleJson.IJsonSerializerStrategy {
    public abstract virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public abstract virtual object DeserializeObject(object value, Type type);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class SimpleJson.JsonArray : List`1<object> {
    public JsonArray(int capacity);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class SimpleJson.JsonObject : object {
    private Dictionary`2<string, object> _members;
    public object Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonObject(IEqualityComparer`1<string> comparer);
    public object get_Item(int index);
    internal static object GetAtIndex(IDictionary`2<string, object> obj, int index);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal class SimpleJson.PocoJsonSerializerStrategy : object {
    internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache;
    internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache;
    internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache;
    internal static Type[] EmptyTypes;
    internal static Type[] ArrayConstructorParameterTypes;
    private static String[] Iso8601Format;
    private static PocoJsonSerializerStrategy();
    protected virtual string MapClrMemberNameToJsonFieldName(string clrPropertyName);
    internal virtual ConstructorDelegate ContructorDelegateFactory(Type key);
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    public virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public virtual object DeserializeObject(object value, Type type);
    protected virtual object SerializeEnum(Enum p);
    protected virtual bool TrySerializeKnownTypes(object input, Object& output);
    protected virtual bool TrySerializeUnknownTypes(object input, Object& output);
}
[GeneratedCodeAttribute("reflection-utils", "1.0.0")]
internal class SimpleJson.Reflection.ReflectionUtils : object {
    private static Object[] EmptyObjects;
    private static ReflectionUtils();
    public static Type GetTypeInfo(Type type);
    public static Attribute GetAttribute(MemberInfo info, Type type);
    public static Type GetGenericListElementType(Type type);
    public static Attribute GetAttribute(Type objectType, Type attributeType);
    public static Type[] GetGenericTypeArguments(Type type);
    public static bool IsTypeGeneric(Type type);
    public static bool IsTypeGenericeCollectionInterface(Type type);
    public static bool IsAssignableFrom(Type type1, Type type2);
    public static bool IsTypeDictionary(Type type);
    public static bool IsNullableType(Type type);
    public static object ToNullableType(object obj, Type nullableType);
    public static bool IsValueType(Type type);
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static ConstructorInfo GetConstructorInfo(Type type, Type[] argsType);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static IEnumerable`1<FieldInfo> GetFields(Type type);
    public static MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo);
    public static MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo);
    public static ConstructorDelegate GetContructor(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetContructor(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByExpression(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByExpression(Type type, Type[] argsType);
    public static GetDelegate GetGetMethod(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethod(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByExpression(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByExpression(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethod(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethod(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByExpression(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByExpression(FieldInfo fieldInfo);
    public static BinaryExpression Assign(Expression left, Expression right);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal static class SimpleJson.SimpleJson : object {
    private static int TOKEN_NONE;
    private static int TOKEN_CURLY_OPEN;
    private static int TOKEN_CURLY_CLOSE;
    private static int TOKEN_SQUARED_OPEN;
    private static int TOKEN_SQUARED_CLOSE;
    private static int TOKEN_COLON;
    private static int TOKEN_COMMA;
    private static int TOKEN_STRING;
    private static int TOKEN_NUMBER;
    private static int TOKEN_TRUE;
    private static int TOKEN_FALSE;
    private static int TOKEN_NULL;
    private static int BUILDER_CAPACITY;
    private static Char[] EscapeTable;
    private static Char[] EscapeCharacters;
    private static string EscapeCharactersString;
    private static IJsonSerializerStrategy _currentJsonSerializerStrategy;
    private static PocoJsonSerializerStrategy _pocoJsonSerializerStrategy;
    public static IJsonSerializerStrategy CurrentJsonSerializerStrategy { get; public set; }
    [EditorBrowsableAttribute("2")]
public static PocoJsonSerializerStrategy PocoJsonSerializerStrategy { get; }
    private static SimpleJson();
    public static object DeserializeObject(string json);
    public static bool TryDeserializeObject(string json, Object& obj);
    public static object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(string json, Type type);
    public static T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static T DeserializeObject(string json);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static string SerializeObject(object json);
    public static string EscapeToJavascriptString(string jsonString);
    private static IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success);
    private static JsonArray ParseArray(Char[] json, Int32& index, Boolean& success);
    private static object ParseValue(Char[] json, Int32& index, Boolean& success);
    private static string ParseString(Char[] json, Int32& index, Boolean& success);
    private static string ConvertFromUtf32(int utf32);
    private static object ParseNumber(Char[] json, Int32& index, Boolean& success);
    private static int GetLastIndexOfNumber(Char[] json, int index);
    private static void EatWhitespace(Char[] json, Int32& index);
    private static int LookAhead(Char[] json, int index);
    private static int NextToken(Char[] json, Int32& index);
    private static bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder);
    private static bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder);
    private static bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder);
    private static bool SerializeString(string aString, StringBuilder builder);
    private static bool SerializeNumber(object number, StringBuilder builder);
    private static bool IsNumeric(object value);
    public static IJsonSerializerStrategy get_CurrentJsonSerializerStrategy();
    public static void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value);
    public static PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy();
}
public enum WixToolset.Data.AccessModifier : Enum {
    public int value__;
    public static AccessModifier Global;
    [ObsoleteAttribute]
public static AccessModifier Public;
    public static AccessModifier Library;
    [ObsoleteAttribute]
public static AccessModifier Internal;
    public static AccessModifier File;
    [ObsoleteAttribute]
public static AccessModifier Protected;
    public static AccessModifier Section;
    [ObsoleteAttribute]
public static AccessModifier Private;
    public static AccessModifier Virtual;
    public static AccessModifier Override;
}
[ExtensionAttribute]
public static class WixToolset.Data.AccessModifierExtensions : object {
    [ExtensionAttribute]
public static AccessModifier AsAccessModifier(string access);
    [ExtensionAttribute]
public static string AsString(AccessModifier access);
}
public class WixToolset.Data.Bind.BindVariable : object {
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overridable>k__BackingField;
    public SourceLineNumber SourceLineNumbers { get; public set; }
    public string Id { get; public set; }
    public string Value { get; public set; }
    public bool Overridable { get; public set; }
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public void set_SourceLineNumbers(SourceLineNumber value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_Overridable();
    [CompilerGeneratedAttribute]
public void set_Overridable(bool value);
    internal JsonObject Serialize();
    internal static BindVariable Deserialize(JsonObject jsonObject);
}
public enum WixToolset.Data.BundleCacheType : Enum {
    public int value__;
    public static BundleCacheType Keep;
    public static BundleCacheType Remove;
    public static BundleCacheType Force;
}
public static class WixToolset.Data.Burn.BurnConstants : object {
    public static string BurnUXContainerName;
    public static string BurnDefaultAttachedContainerName;
    public static string BundleChainPackageGroupId;
    public static string BundleDefaultBoundaryId;
    public static string BundleLayoutOnlyPayloadsName;
    public static string BurnManifestWixOutputStreamName;
    public static string BootstrapperExtensionDataWixOutputStreamName;
    public static string BootstrapperApplicationDataWixOutputStreamName;
    public static string BootstrapperApplicationDataNamespace;
    public static string BootstrapperExtensionDataNamespace;
    public static string BootstrapperApplicationDataSymbolDefinitionTag;
    public static string BootstrapperExtensionSearchSymbolDefinitionTag;
}
public enum WixToolset.Data.ComplexReferenceChildType : Enum {
    public int value__;
    public static ComplexReferenceChildType Unknown;
    public static ComplexReferenceChildType Component;
    public static ComplexReferenceChildType Feature;
    public static ComplexReferenceChildType ComponentGroup;
    public static ComplexReferenceChildType FeatureGroup;
    public static ComplexReferenceChildType Module;
    public static ComplexReferenceChildType Payload;
    public static ComplexReferenceChildType PayloadGroup;
    public static ComplexReferenceChildType Package;
    public static ComplexReferenceChildType PackageGroup;
    public static ComplexReferenceChildType PackagePayload;
    public static ComplexReferenceChildType PatchFamily;
    public static ComplexReferenceChildType PatchFamilyGroup;
    public static ComplexReferenceChildType ContainerPackage;
}
public enum WixToolset.Data.ComplexReferenceParentType : Enum {
    public int value__;
    public static ComplexReferenceParentType Unknown;
    public static ComplexReferenceParentType Feature;
    public static ComplexReferenceParentType ComponentGroup;
    public static ComplexReferenceParentType FeatureGroup;
    public static ComplexReferenceParentType Module;
    public static ComplexReferenceParentType Product;
    public static ComplexReferenceParentType PayloadGroup;
    public static ComplexReferenceParentType Package;
    public static ComplexReferenceParentType PackageGroup;
    public static ComplexReferenceParentType Container;
    public static ComplexReferenceParentType Layout;
    public static ComplexReferenceParentType Patch;
    public static ComplexReferenceParentType PatchFamilyGroup;
}
public enum WixToolset.Data.ComponentKeyPathType : Enum {
    public int value__;
    public static ComponentKeyPathType Directory;
    public static ComponentKeyPathType File;
    public static ComponentKeyPathType OdbcDataSource;
    public static ComponentKeyPathType Registry;
}
public enum WixToolset.Data.CompressionLevel : Enum {
    public int value__;
    public static CompressionLevel None;
    public static CompressionLevel Low;
    public static CompressionLevel Medium;
    public static CompressionLevel High;
    public static CompressionLevel Mszip;
}
[ExtensionAttribute]
internal static class WixToolset.Data.DictionaryExtensions : object {
    [ExtensionAttribute]
public static V GetValueOrDefault(IDictionary`2<K, V> dictionary, K key, V defaultValue);
}
public class WixToolset.Data.DisplayEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MessageLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public MessageLevel Level { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public MessageLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(MessageLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class WixToolset.Data.DisplayEventHandler : MulticastDelegate {
    public DisplayEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DisplayEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DisplayEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum WixToolset.Data.EmptyRule : Enum {
    public int value__;
    public static EmptyRule MustHaveNonWhitespaceCharacters;
    public static EmptyRule CanBeWhitespaceOnly;
    public static EmptyRule CanBeEmpty;
}
public static class WixToolset.Data.ErrorMessages : object {
    public static Message ActionCircularDependency(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName1, string actionName2);
    public static Message ActionCollision(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message ActionCollision2(SourceLineNumber sourceLineNumbers);
    public static Message ActionScheduledRelativeToItself(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue);
    public static Message ActionScheduledRelativeToTerminationAction(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName1, string actionName2);
    public static Message ActionScheduledRelativeToTerminationAction2(SourceLineNumber sourceLineNumbers);
    public static Message AdditionalArgumentUnexpected(string argument);
    public static Message AdminImageRequired(string productCode);
    public static Message AdvertiseStateMustMatch(SourceLineNumber sourceLineNumbers, string advertiseState, string parentAdvertiseState);
    public static Message AppIdIncompatibleAdvertiseState(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string parentValue);
    public static Message BaselineRequired();
    public static Message BinderFileManagerMissingFile(SourceLineNumber sourceLineNumbers, string exceptionMessage);
    public static Message BothUpgradeCodesRequired();
    public static Message BundleTooNew(string bundleExecutable, long bundleVersion);
    public static Message CabExtractionFailed(string cabName, string directoryName);
    public static Message CabExtractionFailed(string cabName, string mergeModulePath, string directoryName);
    public static Message CabFileDoesNotExist(string cabName, string mergeModulePath, string directoryName);
    public static Message CannotAuthorSpecialProperties(SourceLineNumber sourceLineNumbers, string propertyName);
    public static Message CannotDefaultComponentId(SourceLineNumber sourceLineNumbers);
    public static Message CannotDefaultMismatchedAdvertiseStates(SourceLineNumber sourceLineNumbers);
    public static Message CannotFindFile(SourceLineNumber sourceLineNumbers, string fileId, string fileName, string filePath);
    public static Message CanNotHaveTwoParents(SourceLineNumber sourceLineNumbers, string directorySearch, string parentAttribute, string parentElement);
    public static Message CannotOpenMergeModule(SourceLineNumber sourceLineNumbers, string mergeModuleIdentifier, string mergeModuleFile);
    public static Message CannotReundefineVariable(SourceLineNumber sourceLineNumbers, string variableName);
    public static Message CheckBoxValueOnlyValidWithCheckBox(SourceLineNumber sourceLineNumbers, string elementName, string controlType);
    public static Message CircularSearchReference(string chain);
    public static Message CommandLineCommandRequired();
    public static Message CommandLineCommandRequired(string command);
    public static Message ComponentExpectedFeature(SourceLineNumber sourceLineNumbers, string component, string type, string target);
    public static Message ComponentMultipleKeyPaths(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string fileElementName, string registryElementName, string odbcDataSourceElementName);
    public static Message ComponentReferencedTwice(SourceLineNumber sourceLineNumbers, string crefChildId);
    public static Message ConditionExpected(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message CorruptFileFormat(string path, string format);
    public static Message CouldNotDetermineProductCodeFromTransformSummaryInfo();
    public static Message CreateCabAddFileFailed();
    public static Message CreateCabInsufficientDiskSpace();
    public static Message CubeFileNotFound(string cubeFile);
    public static Message CustomActionMultipleSources(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeName1, string attributeName2, string attributeName3, string attributeName4, string attributeName5);
    public static Message CustomActionMultipleTargets(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeName1, string attributeName2, string attributeName3, string attributeName4, string attributeName5, string attributeName6, string attributeName7);
    public static Message CustomActionSequencedInModule(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message CustomTableIllegalColumnWidth(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, int value);
    public static Message CustomTableMissingPrimaryKey(SourceLineNumber sourceLineNumbers);
    public static Message CustomTableNameTooLong(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message DatabaseSchemaMismatch(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message DirectoryPathRequired(string parameter);
    public static Message DisallowedMsiProperty(SourceLineNumber sourceLineNumbers, string property, string illegalValueList);
    public static Message DuplicateCabinetName(SourceLineNumber sourceLineNumbers, string cabinetName);
    public static Message DuplicateCabinetName2(SourceLineNumber sourceLineNumbers, string cabinetName);
    public static Message DuplicateCommandLineOptionInExtension(string arg);
    public static Message DuplicateComponentGuids(SourceLineNumber sourceLineNumbers, string componentId, string guid, string type, string keyPath);
    public static Message DuplicateContextValue(SourceLineNumber sourceLineNumbers, string contextValue);
    public static Message DuplicatedUiLocalization(SourceLineNumber sourceLineNumbers, string controlName, string dialogName);
    public static Message DuplicatedUiLocalization(SourceLineNumber sourceLineNumbers, string dialogName);
    public static Message DuplicateExtensionPreprocessorType(string extension, string variablePrefix, string collidingExtension);
    public static Message DuplicateExtensionTable(string extension, string tableName);
    public static Message DuplicateExtensionXmlSchemaNamespace(string extension, string extensionXmlSchemaNamespace, string collidingExtension);
    public static Message DuplicateFileId(string fileId);
    public static Message DuplicateLocalizationIdentifier(SourceLineNumber sourceLineNumbers, string localizationId);
    public static Message DuplicateModuleCaseInsensitiveFileIdentifier(SourceLineNumber sourceLineNumbers, string moduleId, string fileId1, string fileId2);
    public static Message DuplicateModuleFileIdentifier(SourceLineNumber sourceLineNumbers, string moduleId, string fileId);
    public static Message DuplicatePrimaryKey(SourceLineNumber sourceLineNumbers, string primaryKey, string tableName);
    public static Message DuplicateProviderDependencyKey(string providerKey, string packageId);
    public static Message DuplicateSourcesForOutput(string sourceList, string outputFile);
    public static Message DuplicateTransform(string transform);
    public static Message DuplicateVariableDefinition(string variableName, string variableValue, string variableCollidingValue);
    public static Message ExampleGuid(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message ExpectedArgument(string argument);
    public static Message ExpectedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message ExpectedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attribute1Name, string attribute2Name, bool eitherOr);
    public static Message ExpectedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName);
    public static Message ExpectedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName, string otherAttributeValue);
    public static Message ExpectedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName, string otherAttributeValue, bool otherAttributeValueUnless);
    public static Message ExpectedAttributeInElementOrParent(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message ExpectedAttributeInElementOrParent(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string parentElementName);
    public static Message ExpectedAttributeInElementOrParent(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string parentElementName, string parentAttributeName);
    public static Message ExpectedAttributeWithValueWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeName2);
    public static Message ExpectedAttributeOrElement(SourceLineNumber sourceLineNumbers, string parentElement, string attribute, string childElement);
    public static Message ExpectedAttributeOrElementWithOtherAttribute(SourceLineNumber sourceLineNumbers, string parentElement, string attribute, string childElement, string otherAttribute);
    public static Message ExpectedAttributeOrElementWithOtherAttribute(SourceLineNumber sourceLineNumbers, string parentElement, string attribute, string childElement, string otherAttribute, string otherAttributeValue);
    public static Message ExpectedAttributeOrElementWithoutOtherAttribute(SourceLineNumber sourceLineNumbers, string parentElement, string attribute, string childElement, string otherAttribute);
    public static Message ExpectedAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2);
    public static Message ExpectedAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string attributeName3);
    public static Message ExpectedAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string attributeName3, string attributeName4);
    public static Message ExpectedAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string attributeName3, string attributeName4, string attributeName5);
    public static Message ExpectedAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string attributeName3, string attributeName4, string attributeName5, string attributeName6);
    public static Message ExpectedAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string attributeName3, string attributeName4, string attributeName5, string attributeName6, string attributeName7);
    public static Message ExpectedAttributesWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2);
    public static Message ExpectedAttributesWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string otherAttributeName);
    public static Message ExpectedAttributesWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string otherAttributeName, string otherAttributeValue);
    public static Message ExpectedAttributesWithoutOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2, string otherAttributeName);
    public static Message ExpectedAttributeWhenElementNotUnderElement(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string parentElementName);
    public static Message ExpectedAttributeWithElement(SourceLineNumber sourceLineNumbers, string elementName, string attribute, string childElementName);
    public static Message ExpectedAttributeWithoutOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName);
    public static Message ExpectedAttributeWithoutOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2);
    public static Message ExpectedBinaryCategory(SourceLineNumber sourceLineNumbers);
    public static Message ExpectedClientPatchIdInWixMsp();
    public static Message ExpectedDecompiler(string identifier);
    public static Message ExpectedDirectory(string directory);
    public static Message ExpectedDirectoryGotFile(string option, string path);
    public static Message ExpectedElement(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message ExpectedElement(SourceLineNumber sourceLineNumbers, string elementName, string childName);
    public static Message ExpectedElement(SourceLineNumber sourceLineNumbers, string elementName, string childName1, string childName2);
    public static Message ExpectedElement(SourceLineNumber sourceLineNumbers, string elementName, string childName1, string childName2, string childName3);
    public static Message ExpectedElement(SourceLineNumber sourceLineNumbers, string elementName, string childName1, string childName2, string childName3, string childName4);
    public static Message ExpectedEndElement(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message ExpectedEndforeach(SourceLineNumber sourceLineNumbers);
    public static Message ExpectedExpressionAfterNot(SourceLineNumber sourceLineNumbers, string expression);
    public static Message ExpectedFileGotDirectory(string option, string path);
    public static Message ExpectedMediaCabinet(SourceLineNumber sourceLineNumbers, string fileId, int diskId);
    public static Message ExpectedMediaRowsInWixMsp();
    public static Message ExpectedParentWithAttribute(SourceLineNumber sourceLineNumbers, string parentElement, string attribute, string grandparentElement);
    public static Message ExpectedPatchIdInWixMsp();
    public static Message ExpectedRowInPatchCreationPackage(string tableName);
    public static Message ExpectedSignedCabinetName(SourceLineNumber sourceLineNumbers);
    public static Message ExpectedTableInMergeModule(string identifier);
    public static Message ExpectedVariable(SourceLineNumber sourceLineNumbers, string expression);
    public static Message ExpectedBindVariableValue(string variableId);
    public static Message FamilyNameTooLong(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, int length);
    public static Message FeatureCannotFavorAndDisallowAdvertise(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string otherAttributeName, string otherValue);
    public static Message FeatureCannotFollowParentAndFavorLocalOrSource(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName, string otherValue);
    public static Message FeatureConfigurableDirectoryNotUppercase(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message FeatureNameTooLong(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue);
    public static Message FileIdentifierNotFound(SourceLineNumber sourceLineNumbers, string fileIdentifier);
    public static Message FileInUse(SourceLineNumber sourceLineNumbers, string file);
    public static Message FileNotFound(SourceLineNumber sourceLineNumbers, string file);
    public static Message FileNotFound(SourceLineNumber sourceLineNumbers, string file, string fileType);
    public static Message FileNotFound(SourceLineNumber sourceLineNumbers, string file, string fileType, IEnumerable`1<string> checkedPaths);
    public static Message FileOrDirectoryPathRequired(string parameter);
    public static Message FilePathRequired(string filePurpose);
    public static Message FilePathRequired(string parameter, string filePurpose);
    public static Message FileTooLarge(SourceLineNumber sourceLineNumbers, string fileName);
    public static Message FileWriteError(string path, string error);
    public static Message FinishCabFailed();
    public static Message FullTempDirectory(string prefix, string directory);
    public static Message GACAssemblyIdentityWarning(SourceLineNumber sourceLineNumbers, string fileName, string assemblyName);
    public static Message GacAssemblyNoStrongName(SourceLineNumber sourceLineNumbers, string assemblyName, string componentName);
    public static Message GenericReadNotAllowed(SourceLineNumber sourceLineNumbers);
    public static Message GuidContainsLowercaseLetters(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message HarvestSourceNotSpecified();
    public static Message HarvestTypeNotFound();
    public static Message HarvestTypeNotFound(string harvestType);
    public static Message IdentifierNotFound(string type, string identifier);
    public static Message IdentifierTooLongError(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, int maxLength);
    public static Message IllegalAttributeExceptOnElement(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string expectedElementName);
    public static Message IllegalAttributeInMergeModule(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message IllegalAttributeValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, String[] legalValues);
    public static Message IllegalAttributeValueWhenNested(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attrivuteValue, string parentElementName);
    public static Message IllegalAttributeValueWithIllegalList(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string illegalValueList);
    public static Message IllegalAttributeValueWithLegalList(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string legalValueList);
    public static Message IllegalAttributeValueWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue, string otherAttributeName);
    public static Message IllegalAttributeValueWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue, string otherAttributeName, string otherAttributeValue);
    public static Message IllegalAttributeValueWithoutOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue, string otherAttributeName, string otherAttributeValue);
    public static Message IllegalAttributeValueWithoutOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue, string otherAttributeName);
    public static Message IllegalAttributeWhenAdvertised(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message IllegalAttributeWhenNested(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string parentElement);
    public static Message IllegalAttributeWithInnerText(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message IllegalAttributeWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName);
    public static Message IllegalAttributeWithOtherAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName, string otherAttributeValue);
    public static Message IllegalAttributeWithOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2);
    public static Message IllegalAttributeWithOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2, string otherAttributeName3);
    public static Message IllegalAttributeWithOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2, string otherAttributeName3, string otherAttributeName4);
    public static Message IllegalAttributeWithoutOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName);
    public static Message IllegalAttributeWithoutOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2);
    public static Message IllegalAttributeWithoutOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2, string otherAttributeValue, bool uniquifier);
    public static Message IllegalAttributeWithoutOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2, string otherAttributeName3);
    public static Message IllegalAttributeWithoutOtherAttributes(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string otherAttributeName1, string otherAttributeName2, string otherAttributeName3, string otherAttributeName4);
    public static Message IllegalBinderClassName();
    public static Message IllegalCabbingThreadCount(string numThreads);
    public static Message IllegalCharactersInPath(string pathName);
    public static Message IllegalCodepage(int codepage);
    public static Message IllegalCodepage(SourceLineNumber sourceLineNumbers, int codepage);
    public static Message IllegalCodepageAttribute(SourceLineNumber sourceLineNumbers, string codepage, string elementName, string attributeName);
    public static Message IllegalColumnName(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalCommandLineArgumentValue(string arg, string value, IEnumerable`1<string> validValues);
    public static Message IllegalComponentWithAutoGeneratedGuid(SourceLineNumber sourceLineNumbers);
    public static Message IllegalComponentWithAutoGeneratedGuid(SourceLineNumber sourceLineNumbers, bool registryKeyPath);
    public static Message IllegalCompressionLevel(SourceLineNumber sourceLineNumbers, string compressionLevel);
    public static Message IllegalDefineStatement(SourceLineNumber sourceLineNumbers, string defineStatement);
    public static Message IllegalEmptyAttributeValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message IllegalEmptyAttributeValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string defaultValue);
    public static Message IllegalEnvironmentVariable(string environmentVariable, string value);
    public static Message IllegalFamilyName(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalFileCompressionAttributes(SourceLineNumber sourceLineNumbers);
    public static Message IllegalForeach(SourceLineNumber sourceLineNumbers, string foreachStatement);
    public static Message IllegalGeneratedGuidComponentUnversionedKeypath(SourceLineNumber sourceLineNumbers);
    public static Message IllegalGeneratedGuidComponentVersionedNonkeypath(SourceLineNumber sourceLineNumbers);
    public static Message IllegalGuidValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalIdentifier(SourceLineNumber sourceLineNumbers, string elementName, string value);
    public static Message IllegalIdentifier(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, int disambiguator);
    public static Message IllegalIdentifier(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalIdentifier(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string identifier);
    public static Message IllegalIdentifierLooksLikeFormatted(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalInlineLocVariable(SourceLineNumber sourceLineNumbers, string variableName, string variableValue);
    public static Message IllegalIntegerInExpression(SourceLineNumber sourceLineNumbers, string expression);
    public static Message IllegalIntegerValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalLongFilename(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalLongFilename(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string filename);
    public static Message IllegalLongValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalModuleExclusionLanguageAttributes(SourceLineNumber sourceLineNumbers);
    public static Message IllegalParentAttributeWhenNested(SourceLineNumber sourceLineNumbers, string parentElementName, string parentAttributeName, string childElement);
    public static Message IllegalPathForGeneratedComponentGuid(SourceLineNumber sourceLineNumbers, string componentName, string keyFilePath);
    public static Message IllegalPropertyCustomActionAttributes(SourceLineNumber sourceLineNumbers);
    public static Message IllegalRelativeLongFilename(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalRootDirectory(SourceLineNumber sourceLineNumbers, string directoryId);
    public static Message IllegalSearchIdForParentDepth(SourceLineNumber sourceLineNumbers, string id, string parentId);
    public static Message IllegalShortFilename(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalSuppressWarningId(string suppressedId);
    public static Message IllegalTargetDirDefaultDir(SourceLineNumber sourceLineNumbers, string defaultDir);
    public static Message IllegalTerminalServerCustomActionAttributes(SourceLineNumber sourceLineNumbers);
    public static Message IllegalValidationArguments();
    public static Message IllegalVersionValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalWarningIdAsError(string warningId);
    public static Message IllegalBindVariablePrefix(SourceLineNumber sourceLineNumbers, string variableId);
    public static Message IllegalYesNoAlwaysValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalYesNoDefaultValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalYesNoValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message ImplicitComponentKeyPath(SourceLineNumber sourceLineNumbers, string componentId);
    public static Message InlineDirectorySyntaxRequiresPath(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, string identifier);
    public static Message InsecureBundleFilename(string filename);
    public static Message InsertInvalidSequenceActionOrder(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionNameBefore, string actionNameAfter, string actionNameNew);
    public static Message InsertSequenceNoSpace(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionNameBefore, string actionNameAfter, string actionNameNew);
    public static Message InsufficientVersion(SourceLineNumber sourceLineNumbers, Version currentVersion, Version requiredVersion);
    public static Message InsufficientVersion(SourceLineNumber sourceLineNumbers, Version currentVersion, Version requiredVersion, string extension);
    public static Message IntegralValueOutOfRange(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, int value, int minimum, int maximum);
    public static Message IntegralValueOutOfRange(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, long value, long minimum, long maximum);
    public static Message IntegralValueSentinelCollision(SourceLineNumber sourceLineNumbers, int value);
    public static Message IntegralValueSentinelCollision(SourceLineNumber sourceLineNumbers, long value);
    public static Message InvalidAddedFileRowWithoutSequence(SourceLineNumber sourceLineNumbers, string fileRowId);
    public static Message InvalidAssemblyFile(SourceLineNumber sourceLineNumbers, string assemblyFile, string moreInformation);
    public static Message InvalidBundle(string bundleExecutable);
    public static Message InvalidCabinetTemplate(SourceLineNumber sourceLineNumbers, string cabinetTemplate);
    public static Message InvalidCommandLineFileName(string fileName, string error);
    public static Message InvalidBundleCondition(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string condition);
    public static Message InvalidDateTimeFormat(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message InvalidDocumentElement(SourceLineNumber sourceLineNumbers, string elementName, string fileType, string expectedElementName);
    public static Message InvalidEmbeddedUIFileName(SourceLineNumber sourceLineNumbers, string codepage);
    public static Message CouldNotFindExtensionInPaths(string extensionPath, IEnumerable`1<string> checkedPaths);
    public static Message InvalidExtension(string extension);
    public static Message InvalidExtension(string extension, string invalidReason);
    public static Message InvalidExtension(string extension, string extensionType, string expectedType);
    public static Message InvalidExtension(string extension, string extensionType, string expectedType1, string expectedType2);
    public static Message InvalidExtensionType(string extension, string attributeType);
    public static Message InvalidExtensionType(string extension, string className, string expectedType);
    public static Message InvalidExtensionType(string extension, string className, string exceptionType, string exceptionMessage);
    public static Message InvalidFileName(SourceLineNumber sourceLineNumbers, string fileName);
    public static Message InvalidIdt(SourceLineNumber sourceLineNumbers, string idtFile);
    public static Message InvalidIdt(SourceLineNumber sourceLineNumbers, string idtFile, string tableName);
    public static Message InvalidKeyColumn(string tableName, string columnName, string foreignTableName, int foreignColumnNumber);
    public static Message InvalidKeypathChange(SourceLineNumber sourceLineNumbers, string component, string transformPath);
    public static Message InvalidManifestContent(SourceLineNumber sourceLineNumbers, string fileName);
    public static Message InvalidMergeLanguage(SourceLineNumber sourceLineNumbers, string mergeId, string mergeLanguage);
    public static Message InvalidFourPartVersion(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string version);
    public static Message InvalidPlatformValue(SourceLineNumber sourceLineNumbers, string value);
    public static Message InvalidPreprocessorFunction(SourceLineNumber sourceLineNumbers, string variable);
    public static Message InvalidPreprocessorFunctionAutoVersion(SourceLineNumber sourceLineNumbers);
    public static Message InvalidPreprocessorPragma(SourceLineNumber sourceLineNumbers, string variable);
    public static Message InvalidPreprocessorVariable(SourceLineNumber sourceLineNumbers, string variable);
    public static Message InvalidRemoveComponent(SourceLineNumber sourceLineNumbers, string component, string feature, string transformPath);
    public static Message InvalidSequenceTable(string sequenceTableName);
    public static Message InvalidStringForCodepage(SourceLineNumber sourceLineNumbers, string codepage);
    public static Message InvalidStubExe(string filename);
    public static Message InvalidSubExpression(SourceLineNumber sourceLineNumbers, string subExpression, string expression);
    public static Message InvalidSummaryInfoCodePage(SourceLineNumber sourceLineNumbers, int codePage);
    public static Message InvalidValidatorMessageType(string type);
    public static Message InvalidVariableDefinition(string variableDefinition);
    public static Message InvalidWixTransform(string fileName);
    public static Message InvalidWixXmlNamespace(SourceLineNumber sourceLineNumbers, string wixElementName, string wixNamespace);
    public static Message InvalidWixXmlNamespace(SourceLineNumber sourceLineNumbers, string wixElementName, string elementNamespace, string wixNamespace);
    public static Message InvalidXml(SourceLineNumber sourceLineNumbers, string fileType, string detail);
    public static Message LocalizationVariableUnknown(SourceLineNumber sourceLineNumbers, string variableId);
    public static Message MaximumCabinetSizeForLargeFileSplittingTooLarge(SourceLineNumber sourceLineNumbers, int maximumCabinetSizeForLargeFileSplitting, int maxValueOfMaxCabSizeForLargeFileSplitting);
    public static Message MaximumUncompressedMediaSizeTooLarge(SourceLineNumber sourceLineNumbers, int maximumUncompressedMediaSize);
    public static Message MediaEmbeddedCabinetNameTooLong(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, int length);
    public static Message MediaTableCollision(SourceLineNumber sourceLineNumbers);
    public static Message MergeExcludedModule(SourceLineNumber sourceLineNumbers, string mergeId, string otherMergeId);
    public static Message MergeFeatureRequired(SourceLineNumber sourceLineNumbers, string tableName, string primaryKeys, string mergeModuleFile, string mergeId);
    public static Message MergeLanguageFailed(SourceLineNumber sourceLineNumbers, short language, string mergeModuleFile);
    public static Message MergeLanguageUnsupported(SourceLineNumber sourceLineNumbers, short language, string mergeModuleFile);
    public static Message MergeModuleExpectedFeature(SourceLineNumber sourceLineNumbers, string mergeId);
    public static Message MergePlatformMismatch(SourceLineNumber sourceLineNumbers, string mergeModuleFile);
    public static Message MissingBundleInformation(string friendlyName);
    public static Message MissingBundleSearch(SourceLineNumber sourceLineNumbers, string searchId);
    public static Message MissingDependencyVersion(string packageId);
    public static Message MissingEntrySection();
    public static Message MissingEntrySection(string sectionType);
    public static Message MissingManifestForWin32Assembly(SourceLineNumber sourceLineNumbers, string file, string manifest);
    public static Message MissingMedia(SourceLineNumber sourceLineNumbers, int diskId);
    public static Message MissingOrInvalidModuleInstallerVersion(SourceLineNumber sourceLineNumbers, string moduleId, string mergeModuleFile, string productInstallerVersion);
    public static Message MissingPackagePayload(SourceLineNumber sourceLineNumbers, string packageId, string packageType);
    public static Message MissingTableDefinition(string tableName);
    public static Message MissingTypeLibFile(SourceLineNumber sourceLineNumbers, string elementName, string fileElementName);
    public static Message MissingValidatorExtension();
    public static Message MsiTransactionInvalidPackage(SourceLineNumber sourceLineNumbers, string packageId, string packageType);
    public static Message MsiTransactionInvalidPackage2(SourceLineNumber sourceLineNumbers);
    public static Message MsiTransactionX86BeforeX64Package(SourceLineNumber sourceLineNumbers, string x64PackageId, string x86PackageId);
    public static Message MsiTransactionX86BeforeX64Package2(SourceLineNumber sourceLineNumbers);
    public static Message MultipleEntrySections(SourceLineNumber sourceLineNumbers, string sectionName1, string sectionName2);
    public static Message MultipleEntrySections2(SourceLineNumber sourceLineNumbers);
    public static Message MultipleFilesMatchedWithOutputSpecification(string sourceSpecification, string sourceList);
    public static Message MultipleIdentifiersFound(SourceLineNumber sourceLineNumbers, string elementName, string identifier, string mismatchIdentifier);
    public static Message MultiplePackagePayloads(SourceLineNumber sourceLineNumbers, string packageId, string packagePayloadId1, string packagePayloadId2);
    public static Message MultiplePackagePayloads2(SourceLineNumber sourceLineNumbers);
    public static Message MultiplePackagePayloads3(SourceLineNumber sourceLineNumbers);
    public static Message MultiplePrimaryReferences(SourceLineNumber sourceLineNumbers, string crefChildType, string crefChildId, string crefParentType, string crefParentId, string conflictParentType, string conflictParentId);
    public static Message MustSpecifyOutputWithMoreThanOneInput();
    public static Message NeedSequenceBeforeOrAfter(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message NewRowAddedInTable(SourceLineNumber sourceLineNumbers, string productCode, string tableName, string rowId);
    public static Message NoDataForColumn(SourceLineNumber sourceLineNumbers, string columnName, string tableName);
    public static Message NoDifferencesInTransform(SourceLineNumber sourceLineNumbers);
    public static Message NoFirstControlSpecified(SourceLineNumber sourceLineNumbers, string dialogName);
    public static Message NonterminatedPreprocessorInstruction(SourceLineNumber sourceLineNumbers, string beginInstruction, string endInstruction);
    public static Message NoUniqueActionSequenceNumber(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName1, string actionName2);
    public static Message NoUniqueActionSequenceNumber2(SourceLineNumber sourceLineNumbers);
    public static Message OpenDatabaseFailed(string databaseFile);
    public static Message OrderingReferenceLoopDetected(SourceLineNumber sourceLineNumbers, string loopList);
    public static Message OrphanedComponent(SourceLineNumber sourceLineNumbers, string componentName);
    public static Message OutputCodepageMismatch(SourceLineNumber sourceLineNumbers, int beforeCodepage, int afterCodepage);
    public static Message OutputCodepageMismatch2(SourceLineNumber sourceLineNumbers);
    public static Message OutputTargetNotSpecified();
    public static Message OutputTypeMismatch(SourceLineNumber sourceLineNumbers, string beforeOutputType, string afterOutputType);
    public static Message OverridableActionCollision(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message OverridableActionCollision2(SourceLineNumber sourceLineNumbers);
    public static Message PackagePayloadUnsupported(SourceLineNumber sourceLineNumbers, string packageType);
    public static Message PackagePayloadUnsupported2(SourceLineNumber sourceLineNumbers);
    public static Message ParentElementAttributeRequired(SourceLineNumber sourceLineNumbers, string parentElement, string parentAttribute, string childElement);
    public static Message PatchNotRemovable();
    public static Message PatchWithoutTransforms();
    public static Message PatchWithoutValidTransforms();
    public static Message PathCannotContainQuote(string fileName);
    public static Message PathTooLong(SourceLineNumber sourceLineNumbers, string fileName);
    public static Message PayloadMustBeRelativeToCache(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue);
    public static Message PerUserButAllUsersEquals1(SourceLineNumber sourceLineNumbers, string path);
    public static Message PreprocessorError(SourceLineNumber sourceLineNumbers, string message);
    public static Message PreprocessorExtensionEvaluateFunctionFailed(SourceLineNumber sourceLineNumbers, string prefix, string function, string args, string message);
    public static Message PreprocessorExtensionForParameterMissing(SourceLineNumber sourceLineNumbers, string parameterName, string parameterPrefix);
    public static Message PreprocessorExtensionGetVariableValueFailed(SourceLineNumber sourceLineNumbers, string prefix, string variable, string message);
    public static Message PreprocessorExtensionPragmaFailed(SourceLineNumber sourceLineNumbers, string pragma, string message);
    public static Message PreprocessorIllegalForeachVariable(SourceLineNumber sourceLineNumbers, string variableName);
    public static Message PreprocessorMissingParameterPrefix(SourceLineNumber sourceLineNumbers, string parameterName);
    public static Message ProductCodeInvalidForTransform(SourceLineNumber sourceLineNumbers);
    public static Message ProgIdNestedTooDeep(SourceLineNumber sourceLineNumbers);
    public static Message RadioButtonBitmapAndIconDisallowed(SourceLineNumber sourceLineNumbers);
    public static Message RadioButtonTypeInconsistent(SourceLineNumber sourceLineNumbers);
    public static Message ReadOnlyOutputFile(string filePath);
    public static Message RealTableMissingPrimaryKeyColumn(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message RecursiveAction(string action, string tableName);
    public static Message ReferenceLoopDetected(SourceLineNumber sourceLineNumbers, string loopList);
    public static Message RegistryMultipleValuesWithoutMultiString(SourceLineNumber sourceLineNumbers, string registryElementName, string valueAttributeName, string registryValueElementName, string typeAttributeName);
    public static Message RegistryNameValueIncorrect(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message RegistryRootInvalid(SourceLineNumber sourceLineNumbers);
    public static Message RegistrySubElementCannotBeRemoved(SourceLineNumber sourceLineNumbers, string registryElementName, string registryValueElementName, string actionAttributeName, string removeValue, string removeKeyOnInstallValue);
    public static Message RelativePathForRegistryElement(SourceLineNumber sourceLineNumbers);
    public static Message ReservedBurnNamespaceViolation(SourceLineNumber sourceLineNumbers, string element, string attribute, string prefix);
    public static Message ReservedNamespaceViolation(SourceLineNumber sourceLineNumbers, string element, string attribute, string prefix);
    public static Message RootFeatureCannotFollowParent(SourceLineNumber sourceLineNumbers);
    public static Message SameFileIdDifferentSource(SourceLineNumber sourceLineNumbers, string fileId, string sourcePath1, string sourcePath2);
    public static Message SamePatchBaselineId(SourceLineNumber sourceLineNumbers, string id);
    public static Message SchemaValidationFailed(SourceLineNumber sourceLineNumbers, string validationError, int lineNumber, int linePosition);
    public static Message SearchElementRequired(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message SearchElementRequiredWithAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue);
    public static Message SearchPropertyNotUppercase(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message SecurePropertyNotUppercase(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string propertyId);
    public static Message SignedEmbeddedCabinet(SourceLineNumber sourceLineNumbers);
    public static Message SingleExtensionSupported();
    public static Message SpecifiedBinderNotFound(string binderClass);
    public static Message SplitCabinetCopyRegistrationFailed(string newCabName, string firstCabName);
    public static Message SplitCabinetNameCollision(string newCabName, string firstCabName);
    public static Message StandardActionRelativelyScheduledInModule(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message StreamNameTooLong(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value, int length, int maximumLength);
    public static Message StreamNameTooLong(SourceLineNumber sourceLineNumbers, string tableName, string streamName, int streamLength);
    public static Message StubMissingWixburnSection(string filename);
    public static Message StubWixburnSectionTooSmall(string filename);
    public static Message SuppressNonoverridableAction(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message SuppressNonoverridableAction2(SourceLineNumber sourceLineNumbers);
    public static Message TabbableControlNotAllowedInBillboard(SourceLineNumber sourceLineNumbers, string elementName, string controlType);
    public static Message TableDecompilationUnimplemented(string tableName);
    public static Message TableNameTooLong(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message TooDeeplyIncluded(SourceLineNumber sourceLineNumbers, int depth);
    public static Message TooManyChildren(SourceLineNumber sourceLineNumbers, string elementName, string childElementName);
    public static Message TooManyColumnsInRealTable(string tableName, int columnCount, int supportedColumnCount);
    public static Message TooManyElements(SourceLineNumber sourceLineNumbers, string elementName, string childElementName, int expectedInstances);
    public static Message TooManySearchElements(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message TransformSchemaMismatch();
    public static Message TypeSpecificationForExtensionRequired(string parameter);
    public static Message UnableToGetAuthenticodeCertOfFile(string filePath, string moreInformation);
    public static Message UnableToGetAuthenticodeCertOfFileDownlevelOS(string filePath, string moreInformation);
    public static Message UnableToConvertFieldToNumber(string value);
    public static Message UnableToOpenModule(SourceLineNumber sourceLineNumbers, string modulePath, string message);
    public static Message UnableToReadPackageInformation(SourceLineNumber sourceLineNumbers, string packagePath, string detailedErrorMessage);
    public static Message UnauthorizedAccess(string filePath);
    public static Message UndefinedPreprocessorFunction(SourceLineNumber sourceLineNumbers, string variableName);
    public static Message UndefinedPreprocessorVariable(SourceLineNumber sourceLineNumbers, string variableName);
    public static Message UnexpectedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message UnexpectedColumnCount(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message UnexpectedContentNode(SourceLineNumber sourceLineNumbers, string elementName, string unexpectedNodeType);
    public static Message UnexpectedCustomTableColumn(SourceLineNumber sourceLineNumbers, string column);
    public static Message UnexpectedElement(SourceLineNumber sourceLineNumbers, string elementName, string childElementName);
    public static Message UnexpectedElementWithAttribute(SourceLineNumber sourceLineNumbers, string elementName, string childElementName, string attribute);
    public static Message UnexpectedElementWithAttribute(SourceLineNumber sourceLineNumbers, string elementName, string childElementName, string attribute1, string attribute2, string attribute3, string attribute4);
    public static Message UnexpectedElementWithAttributeValue(SourceLineNumber sourceLineNumbers, string elementName, string childElementName, string attribute, string attributeValue);
    public static Message UnexpectedElementWithAttributeValue(SourceLineNumber sourceLineNumbers, string elementName, string childElementName, string attribute, string attributeValue1, string attributeValue2);
    public static Message UnexpectedEmptySubexpression(SourceLineNumber sourceLineNumbers, string expression);
    public static Message UnexpectedException(Exception exception);
    public static Message UnexpectedException(string message, string type, string stackTrace);
    public static Message UnexpectedExternalUIMessage(string message);
    public static Message UnexpectedExternalUIMessage(string message, string action);
    public static Message UnexpectedFileExtension(string fileName, string expectedExtensions);
    public static Message UnexpectedFileFormat(string path, string expectedFormat, string actualFormat);
    public static Message UnexpectedGroupChild(string parentType, string parentId, string childType, string childId);
    public static Message UnexpectedLiteral(SourceLineNumber sourceLineNumbers, string expression);
    public static Message UnexpectedPreprocessorOperator(SourceLineNumber sourceLineNumbers, string op);
    public static Message UnexpectedTableInMergeModule(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message UnexpectedTableInPatch(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message UnexpectedTableInPatchCreationPackage(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message UnhandledExtensionAttribute(SourceLineNumber sourceLineNumbers, string elementName, string extensionAttributeName, string extensionNamespace);
    public static Message UnhandledExtensionElement(SourceLineNumber sourceLineNumbers, string elementName, string extensionElementName, string extensionNamespace);
    public static Message UniqueFileSearchIdRequired(SourceLineNumber sourceLineNumbers, string id, string elementName);
    public static Message UnknownCustomTableColumnType(SourceLineNumber sourceLineNumbers, string columnType);
    public static Message UnmatchedParenthesisInExpression(SourceLineNumber sourceLineNumbers, string expression);
    public static Message UnmatchedPreprocessorInstruction(SourceLineNumber sourceLineNumbers, string beginInstruction, string endInstruction);
    public static Message UnmatchedQuotesInExpression(SourceLineNumber sourceLineNumbers, string expression);
    public static Message UnresolvedBindReference(SourceLineNumber sourceLineNumbers, string BindRef);
    public static Message UnresolvedReference(SourceLineNumber sourceLineNumbers, string symbolName);
    public static Message UnresolvedReference(SourceLineNumber sourceLineNumbers, string symbolName, AccessModifier accessModifier);
    public static Message UnsupportedAllUsersValue(SourceLineNumber sourceLineNumbers, string path, string value);
    public static Message UnsupportedExtensionAttribute(SourceLineNumber sourceLineNumbers, string elementName, string extensionElementName);
    public static Message UnsupportedExtensionElement(SourceLineNumber sourceLineNumbers, string elementName, string extensionElementName);
    public static Message UnsupportedPlatformForElement(SourceLineNumber sourceLineNumbers, string platform, string elementName);
    public static Message ValidationError(SourceLineNumber sourceLineNumbers, string ice, string message);
    public static Message ValidationFailedDueToInvalidPackage();
    public static Message ValidationFailedDueToLowMsiEngine();
    public static Message ValidationFailedDueToMultilanguageMergeModule();
    public static Message ValidationFailedToOpenDatabase();
    public static Message ValueAndMaskMustBeSameLength(SourceLineNumber sourceLineNumbers);
    public static Message ValueNotSupported(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue);
    public static Message VariableDeclarationCollision(SourceLineNumber sourceLineNumbers, string variableName, string variableValue, string variableCollidingValue);
    public static Message VersionIndependentProgIdsCannotHaveIcons(SourceLineNumber sourceLineNumbers);
    public static Message VersionMismatch(SourceLineNumber sourceLineNumbers, string fileType, string version, string expectedVersion);
    public static Message Win32Exception(int nativeErrorCode, string message);
    public static Message Win32Exception(int nativeErrorCode, string file, string message);
    public static Message WixFileNotFound(string file);
    public static Message BindVariableCollision(SourceLineNumber sourceLineNumbers, string variableId);
    public static Message BindVariableUnknown(SourceLineNumber sourceLineNumbers, string variableId);
    public static Message NoSourceFiles();
    public static Message WixiplSourceFileIsExclusive();
    public static Message IntermediatesMustBeCompiled(string invalidIntermediates);
    public static Message IntermediatesMustBeResolved(string invalidIntermediate);
    public static Message UnknownSymbolType(string symbolName);
    public static Message IllegalInnerText(SourceLineNumber sourceLineNumbers, string elementName, string innerText);
    public static Message IllegalInnerText(SourceLineNumber sourceLineNumbers, string elementName, string innerText, string attributeName);
    public static Message IllegalAttributeWhenNested(SourceLineNumber sourceLineNumbers, string attributeName);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, ResourceManager resourceManager, string resourceName, Object[] args);
}
[DebuggerDisplayAttribute("{Access} {Id,nq}")]
public class WixToolset.Data.Identifier : object {
    public static Identifier Invalid;
    [CompilerGeneratedAttribute]
private AccessModifier <Access>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public AccessModifier Access { get; }
    public string Id { get; }
    [ObsoleteAttribute]
public Identifier(string id, AccessModifier access);
    public Identifier(AccessModifier access, string id);
    public Identifier(AccessModifier access, String[] ids);
    public Identifier(AccessModifier access, Object[] ids);
    public Identifier(AccessModifier access, int id);
    private static Identifier();
    [CompilerGeneratedAttribute]
public AccessModifier get_Access();
    [CompilerGeneratedAttribute]
public string get_Id();
    internal static Identifier Deserialize(JsonObject jsonObject);
    internal JsonObject Serialize();
}
public class WixToolset.Data.Intermediate : object {
    private static Version CurrentVersion;
    private static string WixOutputStreamName;
    private Dictionary`2<string, Localization> localizationsByCulture;
    private List`1<IntermediateSection> sections;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Level>k__BackingField;
    public string Id { get; }
    public string Level { get; private set; }
    public IReadOnlyCollection`1<Localization> Localizations { get; }
    public IReadOnlyCollection`1<IntermediateSection> Sections { get; }
    public Intermediate(string id, IEnumerable`1<IntermediateSection> sections, IDictionary`2<string, Localization> localizationsByCulture);
    public Intermediate(string id, string level, IEnumerable`1<IntermediateSection> sections, IDictionary`2<string, Localization> localizationsByCulture);
    private static Intermediate();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(string value);
    public IReadOnlyCollection`1<Localization> get_Localizations();
    public IReadOnlyCollection`1<IntermediateSection> get_Sections();
    public static Intermediate Load(string path, bool suppressVersionCheck);
    public static Intermediate Load(Assembly assembly, string resourceName, bool suppressVersionCheck);
    public static Intermediate Load(Assembly assembly, string resourceName, ISymbolDefinitionCreator creator, bool suppressVersionCheck);
    public static Intermediate Load(string path, ISymbolDefinitionCreator creator, bool suppressVersionCheck);
    public static Intermediate Load(WixOutput wixOutput, bool suppressVersionCheck);
    public static Intermediate Load(WixOutput wixOutput, ISymbolDefinitionCreator creator, bool suppressVersionCheck);
    public static IReadOnlyList`1<Intermediate> Load(IEnumerable`1<string> intermediateFiles);
    public static IReadOnlyList`1<Intermediate> Load(IEnumerable`1<string> intermediateFiles, ISymbolDefinitionCreator creator, bool suppressVersionCheck);
    public IntermediateSection AddSection(IntermediateSection section);
    public bool RemoveSection(IntermediateSection section);
    public Intermediate UpdateLevel(string level);
    public bool HasLevel(string level);
    public void Save(string path);
    public void Save(WixOutput wixout);
    private static Intermediate LoadIntermediate(WixOutput wixout, ISymbolDefinitionCreator creator, bool suppressVersionCheck);
    private static JsonObject LoadJson(string json, Uri baseUri, bool suppressVersionCheck);
    private static void LoadDefinitions(JsonObject json, ISymbolDefinitionCreator creator);
    private static Intermediate FinalizeLoad(JsonObject json, Uri baseUri, ISymbolDefinitionCreator creator);
    private void SaveEmbedFiles(WixOutput wixout);
    private void SaveIR(WixOutput wixout);
    private static string CalculateUniqueEntryName(ISet`1<string> entryNames, string path);
    private Dictionary`2<string, IntermediateSymbolDefinition> GetCustomDefinitionsInSections();
}
[DebuggerDisplayAttribute("Name={Name,nq} Type={Type} Value={Value?.AsString()}")]
public class WixToolset.Data.IntermediateField : object {
    [CompilerGeneratedAttribute]
private IntermediateFieldDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateFieldValue <Value>k__BackingField;
    public IntermediateFieldDefinition Definition { get; }
    public string Name { get; }
    public IntermediateFieldType Type { get; }
    public string Context { get; }
    public IntermediateFieldValue PreviousValue { get; }
    internal IntermediateFieldValue Value { get; internal set; }
    public IntermediateField(IntermediateFieldDefinition definition);
    [CompilerGeneratedAttribute]
public IntermediateFieldDefinition get_Definition();
    public string get_Name();
    public IntermediateFieldType get_Type();
    public string get_Context();
    public IntermediateFieldValue get_PreviousValue();
    [CompilerGeneratedAttribute]
internal IntermediateFieldValue get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(IntermediateFieldValue value);
    public static bool op_Explicit(IntermediateField field);
    public static Nullable`1<bool> op_Explicit(IntermediateField field);
    public static long op_Explicit(IntermediateField field);
    public static Nullable`1<long> op_Explicit(IntermediateField field);
    public static int op_Explicit(IntermediateField field);
    public static Nullable`1<int> op_Explicit(IntermediateField field);
    public static string op_Explicit(IntermediateField field);
    internal static IntermediateField Deserialize(IntermediateFieldDefinition definition, Uri baseUri, JsonObject jsonObject);
    internal JsonObject Serialize();
}
public class WixToolset.Data.IntermediateFieldContext : object {
    private string previous;
    private bool disposed;
    public IntermediateFieldContext(string context);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class WixToolset.Data.IntermediateFieldDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateFieldType <Type>k__BackingField;
    public string Name { get; }
    public IntermediateFieldType Type { get; }
    public IntermediateFieldDefinition(string name, IntermediateFieldType type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IntermediateFieldType get_Type();
}
[ExtensionAttribute]
public static class WixToolset.Data.IntermediateFieldExtensions : object {
    [ThreadStaticAttribute]
internal static string valueContext;
    [ExtensionAttribute]
public static bool IsNull(IntermediateField field);
    [ExtensionAttribute]
public static bool AsBool(IntermediateField field);
    [ExtensionAttribute]
public static Nullable`1<bool> AsNullableBool(IntermediateField field);
    [ExtensionAttribute]
public static long AsLargeNumber(IntermediateField field);
    [ExtensionAttribute]
public static Nullable`1<long> AsNullableLargeNumber(IntermediateField field);
    [ExtensionAttribute]
public static int AsNumber(IntermediateField field);
    [ExtensionAttribute]
public static Nullable`1<int> AsNullableNumber(IntermediateField field);
    [ExtensionAttribute]
public static IntermediateFieldPathValue AsPath(IntermediateField field);
    [ExtensionAttribute]
public static string AsString(IntermediateField field);
    [ExtensionAttribute]
public static object AsObject(IntermediateField field);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, bool value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, Nullable`1<bool> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, long value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, Nullable`1<long> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, int value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, Nullable`1<int> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldPathValue value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, string value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, bool value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, Nullable`1<bool> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, long value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, Nullable`1<long> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, int value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, Nullable`1<int> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, IntermediateFieldPathValue value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateField field, IntermediateFieldDefinition definition, string value);
    [ExtensionAttribute]
public static void Overwrite(IntermediateField field, string value);
    private static IntermediateField AssignFieldValue(IntermediateField field, object data);
    private static IntermediateField EnsureField(IntermediateField field, IntermediateFieldDefinition definition);
}
public class WixToolset.Data.IntermediateFieldPathValue : object {
    [CompilerGeneratedAttribute]
private bool <Embed>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public bool Embed { get; public set; }
    public Uri BaseUri { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Embed();
    [CompilerGeneratedAttribute]
public void set_Embed(bool value);
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public enum WixToolset.Data.IntermediateFieldType : Enum {
    public int value__;
    public static IntermediateFieldType String;
    public static IntermediateFieldType Bool;
    public static IntermediateFieldType Number;
    public static IntermediateFieldType LargeNumber;
    public static IntermediateFieldType Path;
}
[DebuggerDisplayAttribute("{Data}")]
public class WixToolset.Data.IntermediateFieldValue : object {
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateFieldValue <PreviousValue>k__BackingField;
    public string Context { get; internal set; }
    internal object Data { get; internal set; }
    public IntermediateFieldValue PreviousValue { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(string value);
    [CompilerGeneratedAttribute]
internal object get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(object value);
    [CompilerGeneratedAttribute]
public IntermediateFieldValue get_PreviousValue();
    [CompilerGeneratedAttribute]
internal void set_PreviousValue(IntermediateFieldValue value);
    public static bool op_Explicit(IntermediateFieldValue value);
    public static Nullable`1<bool> op_Explicit(IntermediateFieldValue value);
    public static int op_Explicit(IntermediateFieldValue value);
    public static Nullable`1<int> op_Explicit(IntermediateFieldValue value);
    public static IntermediateFieldPathValue op_Explicit(IntermediateFieldValue value);
    public static string op_Explicit(IntermediateFieldValue value);
    internal static IntermediateFieldValue Deserialize(JsonObject jsonObject, Uri baseUri, IntermediateFieldType type);
    internal JsonObject Serialize();
}
[ExtensionAttribute]
public static class WixToolset.Data.IntermediateFieldValueExtensions : object {
    [ExtensionAttribute]
public static bool AsBool(IntermediateFieldValue value);
    [ExtensionAttribute]
public static Nullable`1<bool> AsNullableBool(IntermediateFieldValue value);
    [ExtensionAttribute]
public static long AsLargeNumber(IntermediateFieldValue value);
    [ExtensionAttribute]
public static Nullable`1<long> AsNullableLargeNumber(IntermediateFieldValue value);
    [ExtensionAttribute]
public static int AsNumber(IntermediateFieldValue value);
    [ExtensionAttribute]
public static Nullable`1<int> AsNullableNumber(IntermediateFieldValue value);
    [ExtensionAttribute]
public static IntermediateFieldPathValue AsPath(IntermediateFieldValue value);
    [ExtensionAttribute]
public static string AsString(IntermediateFieldValue value);
}
public static class WixToolset.Data.IntermediateLevels : object {
    public static string Compiled;
    public static string Combined;
    public static string Linked;
    public static string Resolved;
}
public class WixToolset.Data.IntermediateSection : object {
    private List`1<IntermediateSymbol> symbols;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompilationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibraryId>k__BackingField;
    public string Id { get; }
    public SectionType Type { get; }
    public string CompilationId { get; }
    public string LibraryId { get; private set; }
    public IReadOnlyCollection`1<IntermediateSymbol> Symbols { get; }
    public IntermediateSection(string id, SectionType type, string compilationId);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public SectionType get_Type();
    [CompilerGeneratedAttribute]
public string get_CompilationId();
    [CompilerGeneratedAttribute]
public string get_LibraryId();
    [CompilerGeneratedAttribute]
private void set_LibraryId(string value);
    public IReadOnlyCollection`1<IntermediateSymbol> get_Symbols();
    public T AddSymbol(T symbol);
    public IntermediateSection AssignToLibrary(string libraryId);
    public bool RemoveSymbol(IntermediateSymbol symbol);
    internal static IntermediateSection Deserialize(ISymbolDefinitionCreator creator, Uri baseUri, JsonObject jsonObject);
    internal JsonObject Serialize();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class WixToolset.Data.IntermediateSymbol : object {
    private object tags;
    [CompilerGeneratedAttribute]
private IntermediateSymbolDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateField[] <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private Identifier <Id>k__BackingField;
    public IntermediateSymbolDefinition Definition { get; }
    public IntermediateField[] Fields { get; }
    public SourceLineNumber SourceLineNumbers { get; internal set; }
    public Identifier Id { get; internal set; }
    public IntermediateField Item { get; }
    private string DebuggerDisplay { get; }
    public IntermediateSymbol(IntermediateSymbolDefinition definition);
    public IntermediateSymbol(IntermediateSymbolDefinition definition, SourceLineNumber sourceLineNumber, Identifier id);
    [CompilerGeneratedAttribute]
public IntermediateSymbolDefinition get_Definition();
    [CompilerGeneratedAttribute]
public IntermediateField[] get_Fields();
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
internal void set_SourceLineNumbers(SourceLineNumber value);
    [CompilerGeneratedAttribute]
public Identifier get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(Identifier value);
    public IntermediateField get_Item(int index);
    private string get_DebuggerDisplay();
    public bool AddTag(string add);
    public bool HasTag(string has);
    public bool RemoveTag(string remove);
    internal static IntermediateSymbol Deserialize(ISymbolDefinitionCreator creator, Uri baseUri, JsonObject jsonObject);
    internal JsonObject Serialize();
}
public class WixToolset.Data.IntermediateSymbolDefinition : object {
    private object tags;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private SymbolDefinitionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateFieldDefinition[] <FieldDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StrongSymbolType>k__BackingField;
    public int Revision { get; }
    public SymbolDefinitionType Type { get; }
    public string Name { get; }
    public IntermediateFieldDefinition[] FieldDefinitions { get; }
    private Type StrongSymbolType { get; }
    public IntermediateSymbolDefinition(string name, IntermediateFieldDefinition[] fieldDefinitions, Type strongSymbolType);
    public IntermediateSymbolDefinition(string name, int revision, IntermediateFieldDefinition[] fieldDefinitions, Type strongSymbolType);
    internal IntermediateSymbolDefinition(SymbolDefinitionType type, IntermediateFieldDefinition[] fieldDefinitions, Type strongSymbolType);
    private IntermediateSymbolDefinition(SymbolDefinitionType type, string name, int revision, IntermediateFieldDefinition[] fieldDefinitions, Type strongSymbolType);
    [CompilerGeneratedAttribute]
public int get_Revision();
    [CompilerGeneratedAttribute]
public SymbolDefinitionType get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IntermediateFieldDefinition[] get_FieldDefinitions();
    [CompilerGeneratedAttribute]
private Type get_StrongSymbolType();
    public IntermediateSymbol CreateSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public bool AddTag(string add);
    public bool HasTag(string has);
    public bool RemoveTag(string remove);
    internal static IntermediateSymbolDefinition Deserialize(JsonObject jsonObject);
    internal JsonObject Serialize();
}
[ExtensionAttribute]
public static class WixToolset.Data.IntermediateSymbolExtensions : object {
    [ExtensionAttribute]
public static bool AsBool(IntermediateSymbol symbol, int index);
    [ExtensionAttribute]
public static Nullable`1<bool> AsNullableBool(IntermediateSymbol symbol, int index);
    [ExtensionAttribute]
public static int AsNumber(IntermediateSymbol symbol, int index);
    [ExtensionAttribute]
public static Nullable`1<int> AsNullableNumber(IntermediateSymbol symbol, int index);
    [ExtensionAttribute]
public static string AsString(IntermediateSymbol symbol, int index);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, bool value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, Nullable`1<bool> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, long value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, Nullable`1<long> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, int value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, Nullable`1<int> value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, IntermediateFieldPathValue value);
    [ExtensionAttribute]
public static IntermediateField Set(IntermediateSymbol symbol, int index, string value);
    private static bool NoFieldMetadata(IntermediateSymbol symbol, int index);
}
public interface WixToolset.Data.ISymbolDefinitionCreator {
    public abstract virtual void AddCustomSymbolDefinition(IntermediateSymbolDefinition definition);
    public abstract virtual bool TryGetSymbolDefinitionByName(string name, IntermediateSymbolDefinition& symbolDefinition);
}
[ExtensionAttribute]
internal static class WixToolset.Data.JsonObjectExtensions : object {
    [ExtensionAttribute]
public static JsonObject AddNonDefaultValue(JsonObject jsonObject, string key, bool value, bool defaultValue);
    [ExtensionAttribute]
public static JsonObject AddNonDefaultValue(JsonObject jsonObject, string key, int value, int defaultValue);
    [ExtensionAttribute]
public static JsonObject AddNonDefaultValue(JsonObject jsonObject, string key, object value, object defaultValue);
    [ExtensionAttribute]
public static JsonObject AddIsNotNullOrEmpty(JsonObject jsonObject, string key, string value);
    [ExtensionAttribute]
public static bool GetValueOrDefault(JsonObject jsonObject, string key, bool defaultValue);
    [ExtensionAttribute]
public static int GetValueOrDefault(JsonObject jsonObject, string key, int defaultValue);
    [ExtensionAttribute]
public static Nullable`1<int> GetValueOrDefault(JsonObject jsonObject, string key, Nullable`1<int> defaultValue);
    [ExtensionAttribute]
public static T GetValueOrDefault(JsonObject jsonObject, string key, T defaultValue);
    [ExtensionAttribute]
public static T GetEnumOrDefault(JsonObject jsonObject, string key, T defaultValue);
}
public class WixToolset.Data.Localization : object {
    private Dictionary`2<string, BindVariable> variables;
    private Dictionary`2<string, LocalizedControl> localizedControls;
    [CompilerGeneratedAttribute]
private LocalizationLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Codepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SummaryInformationCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    public LocalizationLocation Location { get; private set; }
    public Nullable`1<int> Codepage { get; private set; }
    public Nullable`1<int> SummaryInformationCodepage { get; private set; }
    public string Culture { get; private set; }
    public ICollection`1<BindVariable> Variables { get; }
    public ICollection`1<KeyValuePair`2<string, LocalizedControl>> LocalizedControls { get; }
    public Localization(Nullable`1<int> codepage, Nullable`1<int> summaryInformationCodepage, string culture, IDictionary`2<string, BindVariable> variables, IDictionary`2<string, LocalizedControl> localizedControls);
    public Localization(LocalizationLocation location, Nullable`1<int> codepage, Nullable`1<int> summaryInformationCodepage, string culture, IDictionary`2<string, BindVariable> variables, IDictionary`2<string, LocalizedControl> localizedControls);
    [CompilerGeneratedAttribute]
public LocalizationLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(LocalizationLocation value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Codepage();
    [CompilerGeneratedAttribute]
private void set_Codepage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SummaryInformationCodepage();
    [CompilerGeneratedAttribute]
private void set_SummaryInformationCodepage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
private void set_Culture(string value);
    public ICollection`1<BindVariable> get_Variables();
    public ICollection`1<KeyValuePair`2<string, LocalizedControl>> get_LocalizedControls();
    public Localization UpdateLocation(LocalizationLocation location);
    internal JsonObject Serialize();
    internal static Localization Deserialize(JsonObject jsonObject);
}
public enum WixToolset.Data.LocalizationLocation : Enum {
    public int value__;
    public static LocalizationLocation Source;
    public static LocalizationLocation Library;
    public static LocalizationLocation Extension;
    public static LocalizationLocation ExtensionDefaultCulture;
}
public class WixToolset.Data.LocalizedControl : object {
    [CompilerGeneratedAttribute]
private string <Dialog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightAligned>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LeftScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Dialog { get; }
    public string Control { get; }
    public int X { get; }
    public int Y { get; }
    public int Width { get; }
    public int Height { get; }
    public bool RightToLeft { get; }
    public bool RightAligned { get; }
    public bool LeftScroll { get; }
    public string Text { get; }
    public LocalizedControl(string dialog, string control, int x, int y, int width, int height, bool rightToLeft, bool rightAligned, bool leftScroll, string text);
    [CompilerGeneratedAttribute]
public string get_Dialog();
    [CompilerGeneratedAttribute]
public string get_Control();
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public bool get_RightAligned();
    [CompilerGeneratedAttribute]
public bool get_LeftScroll();
    [CompilerGeneratedAttribute]
public string get_Text();
    public string GetKey();
    public static string GetKey(string dialog, string control);
    internal JsonObject Serialize();
    internal static LocalizedControl Deserialize(JsonObject jsonObject);
}
public class WixToolset.Data.Message : object {
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceManager <ResourceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceNameOrFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <MessageArgs>k__BackingField;
    public SourceLineNumber SourceLineNumbers { get; }
    public int Id { get; }
    public ResourceManager ResourceManager { get; }
    public string ResourceNameOrFormat { get; }
    public MessageLevel Level { get; private set; }
    public Object[] MessageArgs { get; }
    public Message(SourceLineNumber sourceLineNumbers, MessageLevel level, int id, string format, Object[] messageArgs);
    public Message(SourceLineNumber sourceLineNumbers, MessageLevel level, int id, ResourceManager resourceManager, string resourceName, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
public string get_ResourceNameOrFormat();
    [CompilerGeneratedAttribute]
public MessageLevel get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(MessageLevel value);
    [CompilerGeneratedAttribute]
public Object[] get_MessageArgs();
    public void ElevateToError();
    public virtual string ToString();
}
public enum WixToolset.Data.MessageLevel : Enum {
    public int value__;
    public static MessageLevel Nothing;
    public static MessageLevel Verbose;
    public static MessageLevel Information;
    public static MessageLevel Warning;
    public static MessageLevel Error;
}
public enum WixToolset.Data.OutputType : Enum {
    public int value__;
    public static OutputType Unknown;
    public static OutputType Bundle;
    public static OutputType Library;
    public static OutputType Module;
    public static OutputType Patch;
    public static OutputType PatchCreation;
    public static OutputType Package;
    public static OutputType Transform;
    public static OutputType IntermediatePostLink;
}
public enum WixToolset.Data.PackagingType : Enum {
    public int value__;
    public static PackagingType Unknown;
    public static PackagingType Embedded;
    public static PackagingType External;
}
public enum WixToolset.Data.PdbType : Enum {
    public int value__;
    public static PdbType Full;
    public static PdbType None;
}
public enum WixToolset.Data.Platform : Enum {
    public int value__;
    public static Platform X86;
    public static Platform X64;
    public static Platform ARM64;
}
public enum WixToolset.Data.SectionType : Enum {
    public int value__;
    public static SectionType Unknown;
    public static SectionType Bundle;
    public static SectionType Fragment;
    public static SectionType Module;
    public static SectionType Package;
    [ObsoleteAttribute]
public static SectionType Product;
    public static SectionType PatchCreation;
    public static SectionType Patch;
}
internal class WixToolset.Data.SimpleSymbolDefinitionCreator : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IntermediateSymbolDefinition> <CustomDefinitionByName>k__BackingField;
    private Dictionary`2<string, IntermediateSymbolDefinition> CustomDefinitionByName { get; }
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IntermediateSymbolDefinition> get_CustomDefinitionByName();
    public sealed virtual void AddCustomSymbolDefinition(IntermediateSymbolDefinition definition);
    public sealed virtual bool TryGetSymbolDefinitionByName(string name, IntermediateSymbolDefinition& symbolDefinition);
}
public class WixToolset.Data.SourceLineNumber : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <Parent>k__BackingField;
    public string FileName { get; }
    public Nullable`1<int> LineNumber { get; public set; }
    public SourceLineNumber Parent { get; private set; }
    public string QualifiedFileName { get; }
    public SourceLineNumber(string fileName);
    public SourceLineNumber(string fileName, int lineNumber);
    public SourceLineNumber(string fileName, SourceLineNumber parent);
    public SourceLineNumber(string fileName, SourceLineNumber parent, int lineNumber);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public SourceLineNumber get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(SourceLineNumber value);
    public string get_QualifiedFileName();
    internal static SourceLineNumber Deserialize(JsonObject jsonObject);
    internal JsonObject Serialize();
    public static SourceLineNumber CreateFromEncoded(string encodedSourceLineNumbers);
    public static SourceLineNumber CreateFromUri(string uri);
    public static SourceLineNumber CreateFromXObject(XObject node, int offset);
    public static SourceLineNumber GetFromXAnnotation(XObject node);
    public string GetEncoded();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static SourceLineNumber DecodeSourceLineNumber(string encoded, int startIndex, int endIndex);
}
public static class WixToolset.Data.SymbolDefinitions : object {
    public static IntermediateSymbolDefinition ActionText;
    public static IntermediateSymbolDefinition AppId;
    public static IntermediateSymbolDefinition AppSearch;
    public static IntermediateSymbolDefinition Assembly;
    public static IntermediateSymbolDefinition BBControl;
    public static IntermediateSymbolDefinition Billboard;
    public static IntermediateSymbolDefinition Binary;
    public static IntermediateSymbolDefinition CCPSearch;
    public static IntermediateSymbolDefinition CheckBox;
    public static IntermediateSymbolDefinition Class;
    public static IntermediateSymbolDefinition ComboBox;
    public static IntermediateSymbolDefinition CompLocator;
    public static IntermediateSymbolDefinition Complus;
    public static IntermediateSymbolDefinition Component;
    public static IntermediateSymbolDefinition Condition;
    public static IntermediateSymbolDefinition ControlCondition;
    public static IntermediateSymbolDefinition ControlEvent;
    public static IntermediateSymbolDefinition Control;
    public static IntermediateSymbolDefinition CreateFolder;
    public static IntermediateSymbolDefinition CustomAction;
    public static IntermediateSymbolDefinition Dialog;
    public static IntermediateSymbolDefinition Directory;
    public static IntermediateSymbolDefinition DrLocator;
    public static IntermediateSymbolDefinition DuplicateFile;
    public static IntermediateSymbolDefinition Environment;
    public static IntermediateSymbolDefinition Error;
    public static IntermediateSymbolDefinition EventMapping;
    public static IntermediateSymbolDefinition Extension;
    public static IntermediateSymbolDefinition ExternalFiles;
    public static IntermediateSymbolDefinition FamilyFileRanges;
    public static IntermediateSymbolDefinition FeatureComponents;
    public static IntermediateSymbolDefinition Feature;
    public static IntermediateSymbolDefinition FileSFPCatalog;
    public static IntermediateSymbolDefinition File;
    public static IntermediateSymbolDefinition HarvestFiles;
    public static IntermediateSymbolDefinition Icon;
    public static IntermediateSymbolDefinition ImageFamilies;
    public static IntermediateSymbolDefinition IniFile;
    public static IntermediateSymbolDefinition IniLocator;
    public static IntermediateSymbolDefinition IsolatedComponent;
    public static IntermediateSymbolDefinition LaunchCondition;
    public static IntermediateSymbolDefinition ListBox;
    public static IntermediateSymbolDefinition ListView;
    public static IntermediateSymbolDefinition LockPermissions;
    public static IntermediateSymbolDefinition Media;
    public static IntermediateSymbolDefinition MIME;
    public static IntermediateSymbolDefinition ModuleComponents;
    public static IntermediateSymbolDefinition ModuleConfiguration;
    public static IntermediateSymbolDefinition ModuleDependency;
    public static IntermediateSymbolDefinition ModuleExclusion;
    public static IntermediateSymbolDefinition ModuleIgnoreTable;
    public static IntermediateSymbolDefinition ModuleSubstitution;
    public static IntermediateSymbolDefinition MoveFile;
    public static IntermediateSymbolDefinition MsiAssemblyName;
    public static IntermediateSymbolDefinition MsiDigitalCertificate;
    public static IntermediateSymbolDefinition MsiDigitalSignature;
    public static IntermediateSymbolDefinition MsiEmbeddedChainer;
    public static IntermediateSymbolDefinition MsiEmbeddedUI;
    public static IntermediateSymbolDefinition MsiFileHash;
    public static IntermediateSymbolDefinition MsiLockPermissionsEx;
    public static IntermediateSymbolDefinition MsiPackageCertificate;
    public static IntermediateSymbolDefinition MsiPatchCertificate;
    public static IntermediateSymbolDefinition MsiPatchFamily;
    public static IntermediateSymbolDefinition MsiPatchHeaders;
    public static IntermediateSymbolDefinition MsiPatchMetadata;
    public static IntermediateSymbolDefinition MsiPatchOldAssemblyFile;
    public static IntermediateSymbolDefinition MsiPatchOldAssemblyName;
    public static IntermediateSymbolDefinition MsiServiceConfigFailureActions;
    public static IntermediateSymbolDefinition MsiServiceConfig;
    public static IntermediateSymbolDefinition MsiShortcutProperty;
    public static IntermediateSymbolDefinition ODBCAttribute;
    public static IntermediateSymbolDefinition ODBCDataSource;
    public static IntermediateSymbolDefinition ODBCDriver;
    public static IntermediateSymbolDefinition ODBCSourceAttribute;
    public static IntermediateSymbolDefinition ODBCTranslator;
    public static IntermediateSymbolDefinition PatchMetadata;
    public static IntermediateSymbolDefinition PatchPackage;
    public static IntermediateSymbolDefinition PatchSequence;
    public static IntermediateSymbolDefinition Patch;
    public static IntermediateSymbolDefinition ProgId;
    public static IntermediateSymbolDefinition Properties;
    public static IntermediateSymbolDefinition Property;
    public static IntermediateSymbolDefinition PublishComponent;
    public static IntermediateSymbolDefinition RadioButton;
    public static IntermediateSymbolDefinition Registry;
    public static IntermediateSymbolDefinition RegLocator;
    public static IntermediateSymbolDefinition RemoveFile;
    public static IntermediateSymbolDefinition RemoveRegistry;
    public static IntermediateSymbolDefinition ReserveCost;
    public static IntermediateSymbolDefinition ServiceControl;
    public static IntermediateSymbolDefinition ServiceInstall;
    public static IntermediateSymbolDefinition SFPCatalog;
    public static IntermediateSymbolDefinition Shortcut;
    public static IntermediateSymbolDefinition Signature;
    public static IntermediateSymbolDefinition SoftwareIdentificationTag;
    public static IntermediateSymbolDefinition SummaryInformation;
    public static IntermediateSymbolDefinition TargetFilesOptionalData;
    public static IntermediateSymbolDefinition TargetImages;
    public static IntermediateSymbolDefinition TextStyle;
    public static IntermediateSymbolDefinition TypeLib;
    public static IntermediateSymbolDefinition UIText;
    public static IntermediateSymbolDefinition UpgradedFilesOptionalData;
    public static IntermediateSymbolDefinition UpgradedFilesToIgnore;
    public static IntermediateSymbolDefinition UpgradedImages;
    public static IntermediateSymbolDefinition Upgrade;
    public static IntermediateSymbolDefinition Verb;
    public static IntermediateSymbolDefinition WixAction;
    public static IntermediateSymbolDefinition WixApprovedExeForElevation;
    public static IntermediateSymbolDefinition WixBindUpdatedFiles;
    [ObsoleteAttribute]
public static IntermediateSymbolDefinition WixBootstrapperApplicationDll;
    public static IntermediateSymbolDefinition WixBootstrapperApplication;
    public static IntermediateSymbolDefinition WixBootstrapperExtension;
    public static IntermediateSymbolDefinition WixBuildInfo;
    public static IntermediateSymbolDefinition WixBundleBundlePackagePayload;
    public static IntermediateSymbolDefinition WixBundleBundlePackage;
    public static IntermediateSymbolDefinition WixBundleContainer;
    public static IntermediateSymbolDefinition WixBundleCustomDataAttribute;
    public static IntermediateSymbolDefinition WixBundleCustomDataCell;
    public static IntermediateSymbolDefinition WixBundleCustomData;
    public static IntermediateSymbolDefinition WixBundleExePackagePayload;
    public static IntermediateSymbolDefinition WixBundleExePackage;
    public static IntermediateSymbolDefinition WixBundleHarvestedBundlePackage;
    public static IntermediateSymbolDefinition WixBundleHarvestedDependencyProvider;
    public static IntermediateSymbolDefinition WixBundleHarvestedMsiPackage;
    public static IntermediateSymbolDefinition WixBundleHarvestedMspPackage;
    public static IntermediateSymbolDefinition WixBundleMsiFeature;
    public static IntermediateSymbolDefinition WixBundleMsiPackagePayload;
    public static IntermediateSymbolDefinition WixBundleMsiPackage;
    public static IntermediateSymbolDefinition WixBundleMsiProperty;
    public static IntermediateSymbolDefinition WixBundleMspPackagePayload;
    public static IntermediateSymbolDefinition WixBundleMspPackage;
    public static IntermediateSymbolDefinition WixBundleMsuPackagePayload;
    public static IntermediateSymbolDefinition WixBundleMsuPackage;
    public static IntermediateSymbolDefinition WixBundlePackageCommandLine;
    public static IntermediateSymbolDefinition WixBundlePackageExitCode;
    public static IntermediateSymbolDefinition WixBundlePackageGroup;
    public static IntermediateSymbolDefinition WixBundlePackageRelatedBundle;
    public static IntermediateSymbolDefinition WixBundlePackage;
    public static IntermediateSymbolDefinition WixBundlePatchTargetCode;
    public static IntermediateSymbolDefinition WixBundlePayloadGroup;
    public static IntermediateSymbolDefinition WixBundlePayload;
    public static IntermediateSymbolDefinition WixBundleRelatedPackage;
    public static IntermediateSymbolDefinition WixBundleRollbackBoundary;
    public static IntermediateSymbolDefinition WixBundleSlipstreamMsp;
    public static IntermediateSymbolDefinition WixBundle;
    public static IntermediateSymbolDefinition WixBundleTag;
    public static IntermediateSymbolDefinition WixBundleUpdate;
    public static IntermediateSymbolDefinition WixBundleVariable;
    public static IntermediateSymbolDefinition WixChainItem;
    public static IntermediateSymbolDefinition WixChain;
    public static IntermediateSymbolDefinition WixComplexReference;
    public static IntermediateSymbolDefinition WixComponentGroup;
    public static IntermediateSymbolDefinition WixComponentSearch;
    public static IntermediateSymbolDefinition WixCustomTableCell;
    public static IntermediateSymbolDefinition WixCustomTableColumn;
    public static IntermediateSymbolDefinition WixCustomTable;
    public static IntermediateSymbolDefinition WixDeltaPatchFile;
    public static IntermediateSymbolDefinition WixDeltaPatchSymbolPaths;
    public static IntermediateSymbolDefinition WixDependencyProvider;
    public static IntermediateSymbolDefinition WixDependencyRef;
    public static IntermediateSymbolDefinition WixDependency;
    public static IntermediateSymbolDefinition WixEnsureTable;
    public static IntermediateSymbolDefinition WixFeatureGroup;
    public static IntermediateSymbolDefinition WixFeatureModules;
    public static IntermediateSymbolDefinition WixFileSearch;
    public static IntermediateSymbolDefinition WixFragment;
    public static IntermediateSymbolDefinition WixGroup;
    public static IntermediateSymbolDefinition WixInstanceComponent;
    public static IntermediateSymbolDefinition WixInstanceTransforms;
    public static IntermediateSymbolDefinition WixMediaTemplate;
    public static IntermediateSymbolDefinition WixMerge;
    public static IntermediateSymbolDefinition WixModule;
    public static IntermediateSymbolDefinition WixOrdering;
    public static IntermediateSymbolDefinition WixPackage;
    public static IntermediateSymbolDefinition WixPackageTag;
    public static IntermediateSymbolDefinition WixPatchBaseline;
    public static IntermediateSymbolDefinition WixPatchFamilyGroup;
    public static IntermediateSymbolDefinition WixPatchRef;
    public static IntermediateSymbolDefinition WixPatchId;
    public static IntermediateSymbolDefinition WixPatchTarget;
    public static IntermediateSymbolDefinition WixProductSearch;
    public static IntermediateSymbolDefinition WixProperty;
    public static IntermediateSymbolDefinition WixRegistrySearch;
    public static IntermediateSymbolDefinition WixRelatedBundle;
    public static IntermediateSymbolDefinition WixSearchRelation;
    public static IntermediateSymbolDefinition WixSearch;
    public static IntermediateSymbolDefinition WixSetVariable;
    public static IntermediateSymbolDefinition WixSimpleReference;
    public static IntermediateSymbolDefinition WixSuppressAction;
    public static IntermediateSymbolDefinition WixSuppressModularization;
    public static IntermediateSymbolDefinition WixUI;
    public static IntermediateSymbolDefinition WixUpdateRegistration;
    public static IntermediateSymbolDefinition WixVariable;
    private static SymbolDefinitions();
    public static IntermediateSymbolDefinition ByName(string name);
    public static IntermediateSymbolDefinition ByType(SymbolDefinitionType type);
}
public enum WixToolset.Data.SymbolDefinitionType : Enum {
    public int value__;
    public static SymbolDefinitionType SummaryInformation;
    public static SymbolDefinitionType ActionText;
    public static SymbolDefinitionType AppId;
    public static SymbolDefinitionType AppSearch;
    public static SymbolDefinitionType BBControl;
    public static SymbolDefinitionType Billboard;
    public static SymbolDefinitionType Binary;
    public static SymbolDefinitionType CCPSearch;
    public static SymbolDefinitionType CheckBox;
    public static SymbolDefinitionType Class;
    public static SymbolDefinitionType ComboBox;
    public static SymbolDefinitionType CompLocator;
    public static SymbolDefinitionType Complus;
    public static SymbolDefinitionType Component;
    public static SymbolDefinitionType Condition;
    public static SymbolDefinitionType Control;
    public static SymbolDefinitionType ControlCondition;
    public static SymbolDefinitionType ControlEvent;
    public static SymbolDefinitionType CreateFolder;
    public static SymbolDefinitionType CustomAction;
    public static SymbolDefinitionType Dialog;
    public static SymbolDefinitionType Directory;
    public static SymbolDefinitionType DrLocator;
    public static SymbolDefinitionType DuplicateFile;
    public static SymbolDefinitionType Environment;
    public static SymbolDefinitionType Error;
    public static SymbolDefinitionType EventMapping;
    public static SymbolDefinitionType Extension;
    public static SymbolDefinitionType ExternalFiles;
    public static SymbolDefinitionType FamilyFileRanges;
    public static SymbolDefinitionType Feature;
    public static SymbolDefinitionType FeatureComponents;
    public static SymbolDefinitionType File;
    public static SymbolDefinitionType FileSFPCatalog;
    public static SymbolDefinitionType HarvestFiles;
    public static SymbolDefinitionType Icon;
    public static SymbolDefinitionType ImageFamilies;
    public static SymbolDefinitionType IniFile;
    public static SymbolDefinitionType IniLocator;
    public static SymbolDefinitionType IsolatedComponent;
    public static SymbolDefinitionType LaunchCondition;
    public static SymbolDefinitionType ListBox;
    public static SymbolDefinitionType ListView;
    public static SymbolDefinitionType LockPermissions;
    public static SymbolDefinitionType Media;
    public static SymbolDefinitionType MIME;
    public static SymbolDefinitionType ModuleComponents;
    public static SymbolDefinitionType ModuleConfiguration;
    public static SymbolDefinitionType ModuleDependency;
    public static SymbolDefinitionType ModuleExclusion;
    public static SymbolDefinitionType ModuleIgnoreTable;
    public static SymbolDefinitionType WixModule;
    public static SymbolDefinitionType ModuleSignature;
    public static SymbolDefinitionType ModuleSubstitution;
    public static SymbolDefinitionType MoveFile;
    public static SymbolDefinitionType Assembly;
    public static SymbolDefinitionType MsiAssemblyName;
    public static SymbolDefinitionType MsiDigitalCertificate;
    public static SymbolDefinitionType MsiDigitalSignature;
    public static SymbolDefinitionType MsiEmbeddedChainer;
    public static SymbolDefinitionType MsiEmbeddedUI;
    public static SymbolDefinitionType MsiFileHash;
    public static SymbolDefinitionType MsiLockPermissionsEx;
    public static SymbolDefinitionType MsiPackageCertificate;
    public static SymbolDefinitionType MsiPatchCertificate;
    public static SymbolDefinitionType MsiPatchHeaders;
    public static SymbolDefinitionType MsiPatchMetadata;
    public static SymbolDefinitionType MsiPatchOldAssemblyFile;
    public static SymbolDefinitionType MsiPatchOldAssemblyName;
    public static SymbolDefinitionType MsiPatchFamily;
    public static SymbolDefinitionType MsiServiceConfig;
    public static SymbolDefinitionType MsiServiceConfigFailureActions;
    public static SymbolDefinitionType MsiShortcutProperty;
    public static SymbolDefinitionType ODBCAttribute;
    public static SymbolDefinitionType ODBCDataSource;
    public static SymbolDefinitionType ODBCDriver;
    public static SymbolDefinitionType ODBCSourceAttribute;
    public static SymbolDefinitionType ODBCTranslator;
    public static SymbolDefinitionType Patch;
    public static SymbolDefinitionType PatchMetadata;
    public static SymbolDefinitionType PatchPackage;
    public static SymbolDefinitionType PatchSequence;
    public static SymbolDefinitionType ProgId;
    public static SymbolDefinitionType Properties;
    public static SymbolDefinitionType Property;
    public static SymbolDefinitionType ProvidesDependency;
    public static SymbolDefinitionType PublishComponent;
    public static SymbolDefinitionType RadioButton;
    public static SymbolDefinitionType Registry;
    public static SymbolDefinitionType RegLocator;
    public static SymbolDefinitionType RemoveFile;
    public static SymbolDefinitionType RemoveRegistry;
    public static SymbolDefinitionType ReserveCost;
    public static SymbolDefinitionType ServiceControl;
    public static SymbolDefinitionType ServiceInstall;
    public static SymbolDefinitionType SFPCatalog;
    public static SymbolDefinitionType Shortcut;
    public static SymbolDefinitionType Signature;
    public static SymbolDefinitionType SoftwareIdentificationTag;
    public static SymbolDefinitionType TargetFilesOptionalData;
    public static SymbolDefinitionType TargetImages;
    public static SymbolDefinitionType TextStyle;
    public static SymbolDefinitionType TypeLib;
    public static SymbolDefinitionType UIText;
    public static SymbolDefinitionType Upgrade;
    public static SymbolDefinitionType UpgradedFilesOptionalData;
    public static SymbolDefinitionType UpgradedFilesToIgnore;
    public static SymbolDefinitionType UpgradedImages;
    public static SymbolDefinitionType Verb;
    public static SymbolDefinitionType WixAction;
    public static SymbolDefinitionType WixApprovedExeForElevation;
    public static SymbolDefinitionType WixBindUpdatedFiles;
    public static SymbolDefinitionType WixBootstrapperApplication;
    public static SymbolDefinitionType WixBootstrapperApplicationDll;
    public static SymbolDefinitionType WixBuildInfo;
    public static SymbolDefinitionType WixBundle;
    public static SymbolDefinitionType WixBundleContainer;
    public static SymbolDefinitionType WixBundleCustomData;
    public static SymbolDefinitionType WixBundleCustomDataAttribute;
    public static SymbolDefinitionType WixBundleCustomDataCell;
    public static SymbolDefinitionType WixBundleBundlePackage;
    public static SymbolDefinitionType WixBundleBundlePackagePayload;
    public static SymbolDefinitionType WixBundleExePackage;
    public static SymbolDefinitionType WixBundleExePackagePayload;
    public static SymbolDefinitionType WixBootstrapperExtension;
    public static SymbolDefinitionType WixBundleHarvestedBundlePackage;
    public static SymbolDefinitionType WixBundleHarvestedDependencyProvider;
    public static SymbolDefinitionType WixBundleHarvestedMsiPackage;
    public static SymbolDefinitionType WixBundleHarvestedMspPackage;
    public static SymbolDefinitionType WixBundleMsiFeature;
    public static SymbolDefinitionType WixBundleMsiPackage;
    public static SymbolDefinitionType WixBundleMsiPackagePayload;
    public static SymbolDefinitionType WixBundleMsiProperty;
    public static SymbolDefinitionType WixBundleMspPackage;
    public static SymbolDefinitionType WixBundleMspPackagePayload;
    public static SymbolDefinitionType WixBundleMsuPackage;
    public static SymbolDefinitionType WixBundleMsuPackagePayload;
    public static SymbolDefinitionType WixBundlePackage;
    public static SymbolDefinitionType WixBundlePackageCommandLine;
    public static SymbolDefinitionType WixBundlePackageExitCode;
    public static SymbolDefinitionType WixBundlePackageGroup;
    public static SymbolDefinitionType WixBundlePackageRelatedBundle;
    public static SymbolDefinitionType WixBundlePatchTargetCode;
    public static SymbolDefinitionType WixBundlePayload;
    public static SymbolDefinitionType WixBundlePayloadGroup;
    public static SymbolDefinitionType WixBundleRelatedPackage;
    public static SymbolDefinitionType WixBundleRollbackBoundary;
    public static SymbolDefinitionType WixBundleSlipstreamMsp;
    public static SymbolDefinitionType WixBundleTag;
    public static SymbolDefinitionType WixBundleUpdate;
    public static SymbolDefinitionType WixBundleVariable;
    public static SymbolDefinitionType WixChain;
    public static SymbolDefinitionType WixChainItem;
    public static SymbolDefinitionType WixComplexReference;
    public static SymbolDefinitionType WixComponentGroup;
    public static SymbolDefinitionType WixComponentSearch;
    public static SymbolDefinitionType WixCustomTable;
    public static SymbolDefinitionType WixCustomTableCell;
    public static SymbolDefinitionType WixCustomTableColumn;
    public static SymbolDefinitionType WixDeltaPatchFile;
    public static SymbolDefinitionType WixDeltaPatchSymbolPaths;
    public static SymbolDefinitionType WixDependency;
    public static SymbolDefinitionType WixDependencyRef;
    public static SymbolDefinitionType WixDependencyProvider;
    public static SymbolDefinitionType WixEnsureTable;
    public static SymbolDefinitionType WixFeatureGroup;
    public static SymbolDefinitionType WixFeatureModules;
    public static SymbolDefinitionType WixFileSearch;
    public static SymbolDefinitionType WixFragment;
    public static SymbolDefinitionType WixGroup;
    public static SymbolDefinitionType WixInstanceComponent;
    public static SymbolDefinitionType WixInstanceTransforms;
    public static SymbolDefinitionType WixMediaTemplate;
    public static SymbolDefinitionType WixMerge;
    public static SymbolDefinitionType WixOrdering;
    public static SymbolDefinitionType WixPackage;
    public static SymbolDefinitionType WixPatchBaseline;
    public static SymbolDefinitionType WixPatchFamilyGroup;
    public static SymbolDefinitionType WixPatch;
    public static SymbolDefinitionType WixPatchRef;
    public static SymbolDefinitionType WixPatchTarget;
    public static SymbolDefinitionType WixProductSearch;
    public static SymbolDefinitionType WixPackageTag;
    public static SymbolDefinitionType WixProperty;
    public static SymbolDefinitionType WixRegistrySearch;
    public static SymbolDefinitionType WixRelatedBundle;
    public static SymbolDefinitionType WixSearch;
    public static SymbolDefinitionType WixSearchRelation;
    public static SymbolDefinitionType WixSetVariable;
    public static SymbolDefinitionType WixSimpleReference;
    public static SymbolDefinitionType WixSuppressAction;
    public static SymbolDefinitionType WixSuppressModularization;
    public static SymbolDefinitionType WixUI;
    public static SymbolDefinitionType WixUpdateRegistration;
    public static SymbolDefinitionType WixVariable;
    public static SymbolDefinitionType MustBeFromAnExtension;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ActionTextSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Action { get; public set; }
    public string Description { get; public set; }
    public string Template { get; public set; }
    public ActionTextSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ActionTextSymbolFields index);
    public string get_Action();
    public void set_Action(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Template();
    public void set_Template(string value);
}
public enum WixToolset.Data.Symbols.ActionTextSymbolFields : Enum {
    public int value__;
    public static ActionTextSymbolFields Action;
    public static ActionTextSymbolFields Description;
    public static ActionTextSymbolFields Template;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.AppIdSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string AppId { get; public set; }
    public string RemoteServerName { get; public set; }
    public string LocalService { get; public set; }
    public string ServiceParameters { get; public set; }
    public string DllSurrogate { get; public set; }
    public Nullable`1<bool> ActivateAtStorage { get; public set; }
    public Nullable`1<bool> RunAsInteractiveUser { get; public set; }
    public AppIdSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(AppIdSymbolFields index);
    public string get_AppId();
    public void set_AppId(string value);
    public string get_RemoteServerName();
    public void set_RemoteServerName(string value);
    public string get_LocalService();
    public void set_LocalService(string value);
    public string get_ServiceParameters();
    public void set_ServiceParameters(string value);
    public string get_DllSurrogate();
    public void set_DllSurrogate(string value);
    public Nullable`1<bool> get_ActivateAtStorage();
    public void set_ActivateAtStorage(Nullable`1<bool> value);
    public Nullable`1<bool> get_RunAsInteractiveUser();
    public void set_RunAsInteractiveUser(Nullable`1<bool> value);
}
public enum WixToolset.Data.Symbols.AppIdSymbolFields : Enum {
    public int value__;
    public static AppIdSymbolFields AppId;
    public static AppIdSymbolFields RemoteServerName;
    public static AppIdSymbolFields LocalService;
    public static AppIdSymbolFields ServiceParameters;
    public static AppIdSymbolFields DllSurrogate;
    public static AppIdSymbolFields ActivateAtStorage;
    public static AppIdSymbolFields RunAsInteractiveUser;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.AppSearchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PropertyRef { get; public set; }
    public string SignatureRef { get; public set; }
    public AppSearchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(AppSearchSymbolFields index);
    public string get_PropertyRef();
    public void set_PropertyRef(string value);
    public string get_SignatureRef();
    public void set_SignatureRef(string value);
}
public enum WixToolset.Data.Symbols.AppSearchSymbolFields : Enum {
    public int value__;
    public static AppSearchSymbolFields PropertyRef;
    public static AppSearchSymbolFields SignatureRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.AssemblySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string FeatureRef { get; public set; }
    public string ManifestFileRef { get; public set; }
    public string ApplicationFileRef { get; public set; }
    public AssemblyType Type { get; public set; }
    public string ProcessorArchitecture { get; public set; }
    public AssemblySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(AssemblySymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
    public string get_ManifestFileRef();
    public void set_ManifestFileRef(string value);
    public string get_ApplicationFileRef();
    public void set_ApplicationFileRef(string value);
    public AssemblyType get_Type();
    public void set_Type(AssemblyType value);
    public string get_ProcessorArchitecture();
    public void set_ProcessorArchitecture(string value);
}
public enum WixToolset.Data.Symbols.AssemblySymbolFields : Enum {
    public int value__;
    public static AssemblySymbolFields ComponentRef;
    public static AssemblySymbolFields FeatureRef;
    public static AssemblySymbolFields ManifestFileRef;
    public static AssemblySymbolFields ApplicationFileRef;
    public static AssemblySymbolFields Type;
    public static AssemblySymbolFields ProcessorArchitecture;
}
public enum WixToolset.Data.Symbols.AssemblyType : Enum {
    public int value__;
    public static AssemblyType NotAnAssembly;
    public static AssemblyType DotNetAssembly;
    public static AssemblyType Win32Assembly;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.BBControlSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string BillboardRef { get; public set; }
    public string BBControl { get; public set; }
    public string Type { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int Attributes { get; public set; }
    public bool Enabled { get; public set; }
    public bool Indirect { get; public set; }
    public bool Integer { get; public set; }
    public bool LeftScroll { get; public set; }
    public bool RightAligned { get; public set; }
    public bool RightToLeft { get; public set; }
    public bool Sunken { get; public set; }
    public bool Visible { get; public set; }
    public string Text { get; public set; }
    public IntermediateFieldPathValue SourceFile { get; public set; }
    public BBControlSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(BBControlSymbolFields index);
    public string get_BillboardRef();
    public void set_BillboardRef(string value);
    public string get_BBControl();
    public void set_BBControl(string value);
    public string get_Type();
    public void set_Type(string value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public int get_Attributes();
    public void set_Attributes(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_Indirect();
    public void set_Indirect(bool value);
    public bool get_Integer();
    public void set_Integer(bool value);
    public bool get_LeftScroll();
    public void set_LeftScroll(bool value);
    public bool get_RightAligned();
    public void set_RightAligned(bool value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    public bool get_Sunken();
    public void set_Sunken(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public string get_Text();
    public void set_Text(string value);
    public IntermediateFieldPathValue get_SourceFile();
    public void set_SourceFile(IntermediateFieldPathValue value);
}
public enum WixToolset.Data.Symbols.BBControlSymbolFields : Enum {
    public int value__;
    public static BBControlSymbolFields BillboardRef;
    public static BBControlSymbolFields BBControl;
    public static BBControlSymbolFields Type;
    public static BBControlSymbolFields X;
    public static BBControlSymbolFields Y;
    public static BBControlSymbolFields Width;
    public static BBControlSymbolFields Height;
    public static BBControlSymbolFields Attributes;
    public static BBControlSymbolFields Enabled;
    public static BBControlSymbolFields Indirect;
    public static BBControlSymbolFields Integer;
    public static BBControlSymbolFields LeftScroll;
    public static BBControlSymbolFields RightAligned;
    public static BBControlSymbolFields RightToLeft;
    public static BBControlSymbolFields Sunken;
    public static BBControlSymbolFields Visible;
    public static BBControlSymbolFields Text;
    public static BBControlSymbolFields SourceFile;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.BillboardSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FeatureRef { get; public set; }
    public string Action { get; public set; }
    public Nullable`1<int> Ordering { get; public set; }
    public BillboardSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(BillboardSymbolFields index);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
    public string get_Action();
    public void set_Action(string value);
    public Nullable`1<int> get_Ordering();
    public void set_Ordering(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.BillboardSymbolFields : Enum {
    public int value__;
    public static BillboardSymbolFields FeatureRef;
    public static BillboardSymbolFields Action;
    public static BillboardSymbolFields Ordering;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.BinarySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public IntermediateFieldPathValue Data { get; public set; }
    public BinarySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(BinarySymbolFields index);
    public IntermediateFieldPathValue get_Data();
    public void set_Data(IntermediateFieldPathValue value);
}
public enum WixToolset.Data.Symbols.BinarySymbolFields : Enum {
    public int value__;
    public static BinarySymbolFields Data;
}
public enum WixToolset.Data.Symbols.BundlePackagePayloadGenerationType : Enum {
    public int value__;
    public static BundlePackagePayloadGenerationType None;
    public static BundlePackagePayloadGenerationType ExternalWithoutDownloadUrl;
    public static BundlePackagePayloadGenerationType External;
    public static BundlePackagePayloadGenerationType All;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.CCPSearchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public CCPSearchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(CCPSearchSymbolFields index);
}
public enum WixToolset.Data.Symbols.CCPSearchSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.CheckBoxSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Property { get; public set; }
    public string Value { get; public set; }
    public CheckBoxSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(CheckBoxSymbolFields index);
    public string get_Property();
    public void set_Property(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.CheckBoxSymbolFields : Enum {
    public int value__;
    public static CheckBoxSymbolFields Property;
    public static CheckBoxSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ClassSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string CLSID { get; public set; }
    public string Context { get; public set; }
    public string ComponentRef { get; public set; }
    public string DefaultProgIdRef { get; public set; }
    public string Description { get; public set; }
    public string AppIdRef { get; public set; }
    public string FileTypeMask { get; public set; }
    public string IconRef { get; public set; }
    public Nullable`1<int> IconIndex { get; public set; }
    public string DefInprocHandler { get; public set; }
    public string Argument { get; public set; }
    public string FeatureRef { get; public set; }
    public bool RelativePath { get; public set; }
    public ClassSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ClassSymbolFields index);
    public string get_CLSID();
    public void set_CLSID(string value);
    public string get_Context();
    public void set_Context(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_DefaultProgIdRef();
    public void set_DefaultProgIdRef(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_AppIdRef();
    public void set_AppIdRef(string value);
    public string get_FileTypeMask();
    public void set_FileTypeMask(string value);
    public string get_IconRef();
    public void set_IconRef(string value);
    public Nullable`1<int> get_IconIndex();
    public void set_IconIndex(Nullable`1<int> value);
    public string get_DefInprocHandler();
    public void set_DefInprocHandler(string value);
    public string get_Argument();
    public void set_Argument(string value);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
    public bool get_RelativePath();
    public void set_RelativePath(bool value);
}
public enum WixToolset.Data.Symbols.ClassSymbolFields : Enum {
    public int value__;
    public static ClassSymbolFields CLSID;
    public static ClassSymbolFields Context;
    public static ClassSymbolFields ComponentRef;
    public static ClassSymbolFields DefaultProgIdRef;
    public static ClassSymbolFields Description;
    public static ClassSymbolFields AppIdRef;
    public static ClassSymbolFields FileTypeMask;
    public static ClassSymbolFields IconRef;
    public static ClassSymbolFields IconIndex;
    public static ClassSymbolFields DefInprocHandler;
    public static ClassSymbolFields Argument;
    public static ClassSymbolFields FeatureRef;
    public static ClassSymbolFields RelativePath;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ComboBoxSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Property { get; public set; }
    public int Order { get; public set; }
    public string Value { get; public set; }
    public string Text { get; public set; }
    public ComboBoxSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ComboBoxSymbolFields index);
    public string get_Property();
    public void set_Property(string value);
    public int get_Order();
    public void set_Order(int value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Text();
    public void set_Text(string value);
}
public enum WixToolset.Data.Symbols.ComboBoxSymbolFields : Enum {
    public int value__;
    public static ComboBoxSymbolFields Property;
    public static ComboBoxSymbolFields Order;
    public static ComboBoxSymbolFields Value;
    public static ComboBoxSymbolFields Text;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.CompLocatorSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string SignatureRef { get; public set; }
    public string ComponentId { get; public set; }
    public LocatorType Type { get; public set; }
    public CompLocatorSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(CompLocatorSymbolFields index);
    public string get_SignatureRef();
    public void set_SignatureRef(string value);
    public string get_ComponentId();
    public void set_ComponentId(string value);
    public LocatorType get_Type();
    public void set_Type(LocatorType value);
}
public enum WixToolset.Data.Symbols.CompLocatorSymbolFields : Enum {
    public int value__;
    public static CompLocatorSymbolFields SignatureRef;
    public static CompLocatorSymbolFields ComponentId;
    public static CompLocatorSymbolFields Type;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ComplusSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public Nullable`1<int> ExpType { get; public set; }
    public ComplusSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ComplusSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public Nullable`1<int> get_ExpType();
    public void set_ExpType(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.ComplusSymbolFields : Enum {
    public int value__;
    public static ComplusSymbolFields ComponentRef;
    public static ComplusSymbolFields ExpType;
}
public enum WixToolset.Data.Symbols.ComponentLocation : Enum {
    public int value__;
    public static ComponentLocation LocalOnly;
    public static ComponentLocation SourceOnly;
    public static ComponentLocation Either;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ComponentSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentId { get; public set; }
    public string DirectoryRef { get; public set; }
    public ComponentLocation Location { get; public set; }
    public bool DisableRegistryReflection { get; public set; }
    public bool NeverOverwrite { get; public set; }
    public bool Permanent { get; public set; }
    public bool SharedDllRefCount { get; public set; }
    public bool Shared { get; public set; }
    public bool Transitive { get; public set; }
    public bool UninstallWhenSuperseded { get; public set; }
    public bool Win64 { get; public set; }
    public string Condition { get; public set; }
    public string KeyPath { get; public set; }
    public ComponentKeyPathType KeyPathType { get; public set; }
    public ComponentSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ComponentSymbolFields index);
    public string get_ComponentId();
    public void set_ComponentId(string value);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public ComponentLocation get_Location();
    public void set_Location(ComponentLocation value);
    public bool get_DisableRegistryReflection();
    public void set_DisableRegistryReflection(bool value);
    public bool get_NeverOverwrite();
    public void set_NeverOverwrite(bool value);
    public bool get_Permanent();
    public void set_Permanent(bool value);
    public bool get_SharedDllRefCount();
    public void set_SharedDllRefCount(bool value);
    public bool get_Shared();
    public void set_Shared(bool value);
    public bool get_Transitive();
    public void set_Transitive(bool value);
    public bool get_UninstallWhenSuperseded();
    public void set_UninstallWhenSuperseded(bool value);
    public bool get_Win64();
    public void set_Win64(bool value);
    public string get_Condition();
    public void set_Condition(string value);
    public string get_KeyPath();
    public void set_KeyPath(string value);
    public ComponentKeyPathType get_KeyPathType();
    public void set_KeyPathType(ComponentKeyPathType value);
}
public enum WixToolset.Data.Symbols.ComponentSymbolFields : Enum {
    public int value__;
    public static ComponentSymbolFields ComponentId;
    public static ComponentSymbolFields DirectoryRef;
    public static ComponentSymbolFields Location;
    public static ComponentSymbolFields DisableRegistryReflection;
    public static ComponentSymbolFields NeverOverwrite;
    public static ComponentSymbolFields Permanent;
    public static ComponentSymbolFields SharedDllRefCount;
    public static ComponentSymbolFields Shared;
    public static ComponentSymbolFields Transitive;
    public static ComponentSymbolFields UninstallWhenSuperseded;
    public static ComponentSymbolFields Win64;
    public static ComponentSymbolFields Condition;
    public static ComponentSymbolFields KeyPath;
    public static ComponentSymbolFields KeyPathType;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ConditionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FeatureRef { get; public set; }
    public int Level { get; public set; }
    public string Condition { get; public set; }
    public ConditionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ConditionSymbolFields index);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
    public int get_Level();
    public void set_Level(int value);
    public string get_Condition();
    public void set_Condition(string value);
}
public enum WixToolset.Data.Symbols.ConditionSymbolFields : Enum {
    public int value__;
    public static ConditionSymbolFields FeatureRef;
    public static ConditionSymbolFields Level;
    public static ConditionSymbolFields Condition;
}
public enum WixToolset.Data.Symbols.ContainerType : Enum {
    public int value__;
    public static ContainerType Attached;
    public static ContainerType Detached;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ControlConditionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DialogRef { get; public set; }
    public string ControlRef { get; public set; }
    public string Action { get; public set; }
    public string Condition { get; public set; }
    public ControlConditionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ControlConditionSymbolFields index);
    public string get_DialogRef();
    public void set_DialogRef(string value);
    public string get_ControlRef();
    public void set_ControlRef(string value);
    public string get_Action();
    public void set_Action(string value);
    public string get_Condition();
    public void set_Condition(string value);
}
public enum WixToolset.Data.Symbols.ControlConditionSymbolFields : Enum {
    public int value__;
    public static ControlConditionSymbolFields DialogRef;
    public static ControlConditionSymbolFields ControlRef;
    public static ControlConditionSymbolFields Action;
    public static ControlConditionSymbolFields Condition;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ControlEventSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DialogRef { get; public set; }
    public string ControlRef { get; public set; }
    public string Event { get; public set; }
    public string Argument { get; public set; }
    public string Condition { get; public set; }
    public Nullable`1<int> Ordering { get; public set; }
    public ControlEventSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ControlEventSymbolFields index);
    public string get_DialogRef();
    public void set_DialogRef(string value);
    public string get_ControlRef();
    public void set_ControlRef(string value);
    public string get_Event();
    public void set_Event(string value);
    public string get_Argument();
    public void set_Argument(string value);
    public string get_Condition();
    public void set_Condition(string value);
    public Nullable`1<int> get_Ordering();
    public void set_Ordering(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.ControlEventSymbolFields : Enum {
    public int value__;
    public static ControlEventSymbolFields DialogRef;
    public static ControlEventSymbolFields ControlRef;
    public static ControlEventSymbolFields Event;
    public static ControlEventSymbolFields Argument;
    public static ControlEventSymbolFields Condition;
    public static ControlEventSymbolFields Ordering;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ControlSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DialogRef { get; public set; }
    public string Control { get; public set; }
    public string Type { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public Nullable`1<int> Attributes { get; public set; }
    public bool Enabled { get; public set; }
    public bool Indirect { get; public set; }
    public bool Integer { get; public set; }
    public bool LeftScroll { get; public set; }
    public bool RightAligned { get; public set; }
    public bool RightToLeft { get; public set; }
    public bool Sunken { get; public set; }
    public bool Visible { get; public set; }
    public string Property { get; public set; }
    public string Text { get; public set; }
    public string NextControlRef { get; public set; }
    public string Help { get; public set; }
    public bool TrackDiskSpace { get; public set; }
    public IntermediateFieldPathValue SourceFile { get; public set; }
    public ControlSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ControlSymbolFields index);
    public string get_DialogRef();
    public void set_DialogRef(string value);
    public string get_Control();
    public void set_Control(string value);
    public string get_Type();
    public void set_Type(string value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public Nullable`1<int> get_Attributes();
    public void set_Attributes(Nullable`1<int> value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_Indirect();
    public void set_Indirect(bool value);
    public bool get_Integer();
    public void set_Integer(bool value);
    public bool get_LeftScroll();
    public void set_LeftScroll(bool value);
    public bool get_RightAligned();
    public void set_RightAligned(bool value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    public bool get_Sunken();
    public void set_Sunken(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public string get_Property();
    public void set_Property(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_NextControlRef();
    public void set_NextControlRef(string value);
    public string get_Help();
    public void set_Help(string value);
    public bool get_TrackDiskSpace();
    public void set_TrackDiskSpace(bool value);
    public IntermediateFieldPathValue get_SourceFile();
    public void set_SourceFile(IntermediateFieldPathValue value);
}
public enum WixToolset.Data.Symbols.ControlSymbolFields : Enum {
    public int value__;
    public static ControlSymbolFields DialogRef;
    public static ControlSymbolFields Control;
    public static ControlSymbolFields Type;
    public static ControlSymbolFields X;
    public static ControlSymbolFields Y;
    public static ControlSymbolFields Width;
    public static ControlSymbolFields Height;
    public static ControlSymbolFields Attributes;
    public static ControlSymbolFields Enabled;
    public static ControlSymbolFields Indirect;
    public static ControlSymbolFields Integer;
    public static ControlSymbolFields LeftScroll;
    public static ControlSymbolFields RightAligned;
    public static ControlSymbolFields RightToLeft;
    public static ControlSymbolFields Sunken;
    public static ControlSymbolFields Visible;
    public static ControlSymbolFields Property;
    public static ControlSymbolFields Text;
    public static ControlSymbolFields NextControlRef;
    public static ControlSymbolFields Help;
    public static ControlSymbolFields TrackDiskSpace;
    public static ControlSymbolFields SourceFile;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.CreateFolderSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DirectoryRef { get; public set; }
    public string ComponentRef { get; public set; }
    public CreateFolderSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(CreateFolderSymbolFields index);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.CreateFolderSymbolFields : Enum {
    public int value__;
    public static CreateFolderSymbolFields DirectoryRef;
    public static CreateFolderSymbolFields ComponentRef;
}
public enum WixToolset.Data.Symbols.CustomActionExecutionType : Enum {
    public int value__;
    public static CustomActionExecutionType Immediate;
    public static CustomActionExecutionType FirstSequence;
    public static CustomActionExecutionType OncePerProcess;
    public static CustomActionExecutionType ClientRepeat;
    public static CustomActionExecutionType Deferred;
    public static CustomActionExecutionType Rollback;
    public static CustomActionExecutionType Commit;
}
public enum WixToolset.Data.Symbols.CustomActionSourceType : Enum {
    public int value__;
    public static CustomActionSourceType Binary;
    public static CustomActionSourceType File;
    public static CustomActionSourceType Directory;
    public static CustomActionSourceType Property;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.CustomActionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public CustomActionExecutionType ExecutionType { get; public set; }
    public string Source { get; public set; }
    public CustomActionSourceType SourceType { get; public set; }
    public string Target { get; public set; }
    public CustomActionTargetType TargetType { get; public set; }
    public bool Async { get; public set; }
    public bool Hidden { get; public set; }
    public bool IgnoreResult { get; public set; }
    public bool Impersonate { get; public set; }
    public bool PatchUninstall { get; public set; }
    public bool TSAware { get; public set; }
    public bool Win64 { get; public set; }
    public IntermediateFieldPathValue ScriptFile { get; public set; }
    public CustomActionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(CustomActionSymbolFields index);
    public CustomActionExecutionType get_ExecutionType();
    public void set_ExecutionType(CustomActionExecutionType value);
    public string get_Source();
    public void set_Source(string value);
    public CustomActionSourceType get_SourceType();
    public void set_SourceType(CustomActionSourceType value);
    public string get_Target();
    public void set_Target(string value);
    public CustomActionTargetType get_TargetType();
    public void set_TargetType(CustomActionTargetType value);
    public bool get_Async();
    public void set_Async(bool value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_IgnoreResult();
    public void set_IgnoreResult(bool value);
    public bool get_Impersonate();
    public void set_Impersonate(bool value);
    public bool get_PatchUninstall();
    public void set_PatchUninstall(bool value);
    public bool get_TSAware();
    public void set_TSAware(bool value);
    public bool get_Win64();
    public void set_Win64(bool value);
    public IntermediateFieldPathValue get_ScriptFile();
    public void set_ScriptFile(IntermediateFieldPathValue value);
}
public enum WixToolset.Data.Symbols.CustomActionSymbolFields : Enum {
    public int value__;
    public static CustomActionSymbolFields ExecutionType;
    public static CustomActionSymbolFields Source;
    public static CustomActionSymbolFields SourceType;
    public static CustomActionSymbolFields Target;
    public static CustomActionSymbolFields TargetType;
    public static CustomActionSymbolFields Async;
    public static CustomActionSymbolFields Hidden;
    public static CustomActionSymbolFields IgnoreResult;
    public static CustomActionSymbolFields Impersonate;
    public static CustomActionSymbolFields PatchUninstall;
    public static CustomActionSymbolFields TSAware;
    public static CustomActionSymbolFields Win64;
    public static CustomActionSymbolFields ScriptFile;
}
public enum WixToolset.Data.Symbols.CustomActionTargetType : Enum {
    public int value__;
    public static CustomActionTargetType Dll;
    public static CustomActionTargetType Exe;
    public static CustomActionTargetType TextData;
    public static CustomActionTargetType JScript;
    public static CustomActionTargetType VBScript;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.DialogSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public int HCentering { get; public set; }
    public int VCentering { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public bool CustomPalette { get; public set; }
    public bool ErrorDialog { get; public set; }
    public bool Visible { get; public set; }
    public bool Modal { get; public set; }
    public bool KeepModeless { get; public set; }
    public bool LeftScroll { get; public set; }
    public bool Minimize { get; public set; }
    public bool RightAligned { get; public set; }
    public bool RightToLeft { get; public set; }
    public bool TrackDiskSpace { get; public set; }
    public bool SystemModal { get; public set; }
    public string Title { get; public set; }
    public string FirstControlRef { get; public set; }
    public string DefaultControlRef { get; public set; }
    public string CancelControlRef { get; public set; }
    public DialogSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(DialogSymbolFields index);
    public int get_HCentering();
    public void set_HCentering(int value);
    public int get_VCentering();
    public void set_VCentering(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public bool get_CustomPalette();
    public void set_CustomPalette(bool value);
    public bool get_ErrorDialog();
    public void set_ErrorDialog(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool get_Modal();
    public void set_Modal(bool value);
    public bool get_KeepModeless();
    public void set_KeepModeless(bool value);
    public bool get_LeftScroll();
    public void set_LeftScroll(bool value);
    public bool get_Minimize();
    public void set_Minimize(bool value);
    public bool get_RightAligned();
    public void set_RightAligned(bool value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    public bool get_TrackDiskSpace();
    public void set_TrackDiskSpace(bool value);
    public bool get_SystemModal();
    public void set_SystemModal(bool value);
    public string get_Title();
    public void set_Title(string value);
    public string get_FirstControlRef();
    public void set_FirstControlRef(string value);
    public string get_DefaultControlRef();
    public void set_DefaultControlRef(string value);
    public string get_CancelControlRef();
    public void set_CancelControlRef(string value);
}
public enum WixToolset.Data.Symbols.DialogSymbolFields : Enum {
    public int value__;
    public static DialogSymbolFields HCentering;
    public static DialogSymbolFields VCentering;
    public static DialogSymbolFields Width;
    public static DialogSymbolFields Height;
    public static DialogSymbolFields CustomPalette;
    public static DialogSymbolFields ErrorDialog;
    public static DialogSymbolFields Visible;
    public static DialogSymbolFields Modal;
    public static DialogSymbolFields KeepModeless;
    public static DialogSymbolFields LeftScroll;
    public static DialogSymbolFields Minimize;
    public static DialogSymbolFields RightAligned;
    public static DialogSymbolFields RightToLeft;
    public static DialogSymbolFields SystemModal;
    public static DialogSymbolFields TrackDiskSpace;
    public static DialogSymbolFields Title;
    public static DialogSymbolFields FirstControlRef;
    public static DialogSymbolFields DefaultControlRef;
    public static DialogSymbolFields CancelControlRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.DirectorySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ParentDirectoryRef { get; public set; }
    public string Name { get; public set; }
    public string ShortName { get; public set; }
    public string SourceName { get; public set; }
    public string SourceShortName { get; public set; }
    public string ComponentGuidGenerationSeed { get; public set; }
    public DirectorySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(DirectorySymbolFields index);
    public string get_ParentDirectoryRef();
    public void set_ParentDirectoryRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ShortName();
    public void set_ShortName(string value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public string get_SourceShortName();
    public void set_SourceShortName(string value);
    public string get_ComponentGuidGenerationSeed();
    public void set_ComponentGuidGenerationSeed(string value);
}
public enum WixToolset.Data.Symbols.DirectorySymbolFields : Enum {
    public int value__;
    public static DirectorySymbolFields ParentDirectoryRef;
    public static DirectorySymbolFields Name;
    public static DirectorySymbolFields ShortName;
    public static DirectorySymbolFields SourceName;
    public static DirectorySymbolFields SourceShortName;
    public static DirectorySymbolFields ComponentGuidGenerationSeed;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.DrLocatorSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string SignatureRef { get; public set; }
    public string Parent { get; public set; }
    public string Path { get; public set; }
    public Nullable`1<int> Depth { get; public set; }
    public DrLocatorSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(DrLocatorSymbolFields index);
    public string get_SignatureRef();
    public void set_SignatureRef(string value);
    public string get_Parent();
    public void set_Parent(string value);
    public string get_Path();
    public void set_Path(string value);
    public Nullable`1<int> get_Depth();
    public void set_Depth(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.DrLocatorSymbolFields : Enum {
    public int value__;
    public static DrLocatorSymbolFields SignatureRef;
    public static DrLocatorSymbolFields Parent;
    public static DrLocatorSymbolFields Path;
    public static DrLocatorSymbolFields Depth;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.DuplicateFileSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string FileRef { get; public set; }
    public string DestinationName { get; public set; }
    public string DestinationShortName { get; public set; }
    public string DestinationFolder { get; public set; }
    public DuplicateFileSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(DuplicateFileSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public string get_DestinationShortName();
    public void set_DestinationShortName(string value);
    public string get_DestinationFolder();
    public void set_DestinationFolder(string value);
}
public enum WixToolset.Data.Symbols.DuplicateFileSymbolFields : Enum {
    public int value__;
    public static DuplicateFileSymbolFields ComponentRef;
    public static DuplicateFileSymbolFields FileRef;
    public static DuplicateFileSymbolFields DestinationName;
    public static DuplicateFileSymbolFields DestinationShortName;
    public static DuplicateFileSymbolFields DestinationFolder;
}
public enum WixToolset.Data.Symbols.EnvironmentActionType : Enum {
    public int value__;
    public static EnvironmentActionType Set;
    public static EnvironmentActionType Create;
    public static EnvironmentActionType Remove;
}
public enum WixToolset.Data.Symbols.EnvironmentPartType : Enum {
    public int value__;
    public static EnvironmentPartType All;
    public static EnvironmentPartType First;
    public static EnvironmentPartType Last;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.EnvironmentSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Separator { get; public set; }
    public Nullable`1<EnvironmentActionType> Action { get; public set; }
    public Nullable`1<EnvironmentPartType> Part { get; public set; }
    public bool Permanent { get; public set; }
    public bool System { get; public set; }
    public string ComponentRef { get; public set; }
    public EnvironmentSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(EnvironmentSymbolFields index);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Separator();
    public void set_Separator(string value);
    public Nullable`1<EnvironmentActionType> get_Action();
    public void set_Action(Nullable`1<EnvironmentActionType> value);
    public Nullable`1<EnvironmentPartType> get_Part();
    public void set_Part(Nullable`1<EnvironmentPartType> value);
    public bool get_Permanent();
    public void set_Permanent(bool value);
    public bool get_System();
    public void set_System(bool value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.EnvironmentSymbolFields : Enum {
    public int value__;
    public static EnvironmentSymbolFields Name;
    public static EnvironmentSymbolFields Value;
    public static EnvironmentSymbolFields Separator;
    public static EnvironmentSymbolFields Action;
    public static EnvironmentSymbolFields Part;
    public static EnvironmentSymbolFields Permanent;
    public static EnvironmentSymbolFields System;
    public static EnvironmentSymbolFields ComponentRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ErrorSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Message { get; public set; }
    public ErrorSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ErrorSymbolFields index);
    public string get_Message();
    public void set_Message(string value);
}
public enum WixToolset.Data.Symbols.ErrorSymbolFields : Enum {
    public int value__;
    public static ErrorSymbolFields Message;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.EventMappingSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DialogRef { get; public set; }
    public string ControlRef { get; public set; }
    public string Event { get; public set; }
    public string Attribute { get; public set; }
    public EventMappingSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(EventMappingSymbolFields index);
    public string get_DialogRef();
    public void set_DialogRef(string value);
    public string get_ControlRef();
    public void set_ControlRef(string value);
    public string get_Event();
    public void set_Event(string value);
    public string get_Attribute();
    public void set_Attribute(string value);
}
public enum WixToolset.Data.Symbols.EventMappingSymbolFields : Enum {
    public int value__;
    public static EventMappingSymbolFields DialogRef;
    public static EventMappingSymbolFields ControlRef;
    public static EventMappingSymbolFields Event;
    public static EventMappingSymbolFields Attribute;
}
public enum WixToolset.Data.Symbols.ExitCodeBehaviorType : Enum {
    public int value__;
    public static ExitCodeBehaviorType NotSet;
    public static ExitCodeBehaviorType Success;
    public static ExitCodeBehaviorType Error;
    public static ExitCodeBehaviorType ScheduleReboot;
    public static ExitCodeBehaviorType ForceReboot;
    public static ExitCodeBehaviorType ErrorScheduleReboot;
    public static ExitCodeBehaviorType ErrorForceReboot;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ExtensionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Extension { get; public set; }
    public string ComponentRef { get; public set; }
    public string ProgIdRef { get; public set; }
    public string MimeRef { get; public set; }
    public string FeatureRef { get; public set; }
    public ExtensionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ExtensionSymbolFields index);
    public string get_Extension();
    public void set_Extension(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_ProgIdRef();
    public void set_ProgIdRef(string value);
    public string get_MimeRef();
    public void set_MimeRef(string value);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
}
public enum WixToolset.Data.Symbols.ExtensionSymbolFields : Enum {
    public int value__;
    public static ExtensionSymbolFields Extension;
    public static ExtensionSymbolFields ComponentRef;
    public static ExtensionSymbolFields ProgIdRef;
    public static ExtensionSymbolFields MimeRef;
    public static ExtensionSymbolFields FeatureRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ExternalFilesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Family { get; public set; }
    public string FTK { get; public set; }
    public string FilePath { get; public set; }
    public string SymbolPaths { get; public set; }
    public string IgnoreOffsets { get; public set; }
    public string IgnoreLengths { get; public set; }
    public string RetainOffsets { get; public set; }
    public int Order { get; public set; }
    public ExternalFilesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ExternalFilesSymbolFields index);
    public string get_Family();
    public void set_Family(string value);
    public string get_FTK();
    public void set_FTK(string value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
    public string get_IgnoreOffsets();
    public void set_IgnoreOffsets(string value);
    public string get_IgnoreLengths();
    public void set_IgnoreLengths(string value);
    public string get_RetainOffsets();
    public void set_RetainOffsets(string value);
    public int get_Order();
    public void set_Order(int value);
}
public enum WixToolset.Data.Symbols.ExternalFilesSymbolFields : Enum {
    public int value__;
    public static ExternalFilesSymbolFields Family;
    public static ExternalFilesSymbolFields FTK;
    public static ExternalFilesSymbolFields FilePath;
    public static ExternalFilesSymbolFields SymbolPaths;
    public static ExternalFilesSymbolFields IgnoreOffsets;
    public static ExternalFilesSymbolFields IgnoreLengths;
    public static ExternalFilesSymbolFields RetainOffsets;
    public static ExternalFilesSymbolFields Order;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.FamilyFileRangesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Family { get; public set; }
    public string FTK { get; public set; }
    public string RetainOffsets { get; public set; }
    public string RetainLengths { get; public set; }
    public FamilyFileRangesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(FamilyFileRangesSymbolFields index);
    public string get_Family();
    public void set_Family(string value);
    public string get_FTK();
    public void set_FTK(string value);
    public string get_RetainOffsets();
    public void set_RetainOffsets(string value);
    public string get_RetainLengths();
    public void set_RetainLengths(string value);
}
public enum WixToolset.Data.Symbols.FamilyFileRangesSymbolFields : Enum {
    public int value__;
    public static FamilyFileRangesSymbolFields Family;
    public static FamilyFileRangesSymbolFields FTK;
    public static FamilyFileRangesSymbolFields RetainOffsets;
    public static FamilyFileRangesSymbolFields RetainLengths;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.FeatureComponentsSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FeatureRef { get; public set; }
    public string ComponentRef { get; public set; }
    public FeatureComponentsSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(FeatureComponentsSymbolFields index);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.FeatureComponentsSymbolFields : Enum {
    public int value__;
    public static FeatureComponentsSymbolFields FeatureRef;
    public static FeatureComponentsSymbolFields ComponentRef;
}
public enum WixToolset.Data.Symbols.FeatureInstallDefault : Enum {
    public int value__;
    public static FeatureInstallDefault Local;
    public static FeatureInstallDefault Source;
    public static FeatureInstallDefault FollowParent;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.FeatureSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ParentFeatureRef { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public int Display { get; public set; }
    public int Level { get; public set; }
    public string DirectoryRef { get; public set; }
    public bool DisallowAbsent { get; public set; }
    public bool DisallowAdvertise { get; public set; }
    public FeatureInstallDefault InstallDefault { get; public set; }
    public FeatureTypicalDefault TypicalDefault { get; public set; }
    public FeatureSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(FeatureSymbolFields index);
    public string get_ParentFeatureRef();
    public void set_ParentFeatureRef(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Description();
    public void set_Description(string value);
    public int get_Display();
    public void set_Display(int value);
    public int get_Level();
    public void set_Level(int value);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public bool get_DisallowAbsent();
    public void set_DisallowAbsent(bool value);
    public bool get_DisallowAdvertise();
    public void set_DisallowAdvertise(bool value);
    public FeatureInstallDefault get_InstallDefault();
    public void set_InstallDefault(FeatureInstallDefault value);
    public FeatureTypicalDefault get_TypicalDefault();
    public void set_TypicalDefault(FeatureTypicalDefault value);
}
public enum WixToolset.Data.Symbols.FeatureSymbolFields : Enum {
    public int value__;
    public static FeatureSymbolFields ParentFeatureRef;
    public static FeatureSymbolFields Title;
    public static FeatureSymbolFields Description;
    public static FeatureSymbolFields Display;
    public static FeatureSymbolFields Level;
    public static FeatureSymbolFields DirectoryRef;
    public static FeatureSymbolFields DisallowAbsent;
    public static FeatureSymbolFields DisallowAdvertise;
    public static FeatureSymbolFields InstallDefault;
    public static FeatureSymbolFields TypicalDefault;
}
public enum WixToolset.Data.Symbols.FeatureTypicalDefault : Enum {
    public int value__;
    public static FeatureTypicalDefault Install;
    public static FeatureTypicalDefault Advertise;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.FileSFPCatalogSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileRef { get; public set; }
    public string SFPCatalogRef { get; public set; }
    public FileSFPCatalogSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(FileSFPCatalogSymbolFields index);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_SFPCatalogRef();
    public void set_SFPCatalogRef(string value);
}
public enum WixToolset.Data.Symbols.FileSFPCatalogSymbolFields : Enum {
    public int value__;
    public static FileSFPCatalogSymbolFields FileRef;
    public static FileSFPCatalogSymbolFields SFPCatalogRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.FileSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string Name { get; public set; }
    public string ShortName { get; public set; }
    public int FileSize { get; public set; }
    public string Version { get; public set; }
    public string Language { get; public set; }
    public FileSymbolAttributes Attributes { get; public set; }
    public string DirectoryRef { get; public set; }
    public Nullable`1<int> DiskId { get; public set; }
    public IntermediateFieldPathValue Source { get; public set; }
    public string FontTitle { get; public set; }
    public Nullable`1<int> SelfRegCost { get; public set; }
    public string BindPath { get; public set; }
    public int Sequence { get; public set; }
    public Nullable`1<int> PatchGroup { get; public set; }
    public Nullable`1<PatchAttributeType> PatchAttributes { get; public set; }
    public string DeltaPatchHeaderSource { get; public set; }
    public string RetainLengths { get; public set; }
    public string IgnoreOffsets { get; public set; }
    public string IgnoreLengths { get; public set; }
    public string RetainOffsets { get; public set; }
    public string SymbolPaths { get; public set; }
    public FileSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(FileSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ShortName();
    public void set_ShortName(string value);
    public int get_FileSize();
    public void set_FileSize(int value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Language();
    public void set_Language(string value);
    public FileSymbolAttributes get_Attributes();
    public void set_Attributes(FileSymbolAttributes value);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public Nullable`1<int> get_DiskId();
    public void set_DiskId(Nullable`1<int> value);
    public IntermediateFieldPathValue get_Source();
    public void set_Source(IntermediateFieldPathValue value);
    public string get_FontTitle();
    public void set_FontTitle(string value);
    public Nullable`1<int> get_SelfRegCost();
    public void set_SelfRegCost(Nullable`1<int> value);
    public string get_BindPath();
    public void set_BindPath(string value);
    public int get_Sequence();
    public void set_Sequence(int value);
    public Nullable`1<int> get_PatchGroup();
    public void set_PatchGroup(Nullable`1<int> value);
    public Nullable`1<PatchAttributeType> get_PatchAttributes();
    public void set_PatchAttributes(Nullable`1<PatchAttributeType> value);
    public string get_DeltaPatchHeaderSource();
    public void set_DeltaPatchHeaderSource(string value);
    public string get_RetainLengths();
    public void set_RetainLengths(string value);
    public string get_IgnoreOffsets();
    public void set_IgnoreOffsets(string value);
    public string get_IgnoreLengths();
    public void set_IgnoreLengths(string value);
    public string get_RetainOffsets();
    public void set_RetainOffsets(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.FileSymbolAttributes : Enum {
    public int value__;
    public static FileSymbolAttributes None;
    public static FileSymbolAttributes ReadOnly;
    public static FileSymbolAttributes Hidden;
    public static FileSymbolAttributes System;
    public static FileSymbolAttributes Vital;
    public static FileSymbolAttributes Compressed;
    public static FileSymbolAttributes Uncompressed;
    public static FileSymbolAttributes Checksum;
}
public enum WixToolset.Data.Symbols.FileSymbolFields : Enum {
    public int value__;
    public static FileSymbolFields ComponentRef;
    public static FileSymbolFields Name;
    public static FileSymbolFields ShortName;
    public static FileSymbolFields FileSize;
    public static FileSymbolFields Version;
    public static FileSymbolFields Language;
    public static FileSymbolFields Attributes;
    public static FileSymbolFields DirectoryRef;
    public static FileSymbolFields DiskId;
    public static FileSymbolFields Source;
    public static FileSymbolFields FontTitle;
    public static FileSymbolFields SelfRegCost;
    public static FileSymbolFields BindPath;
    public static FileSymbolFields Sequence;
    public static FileSymbolFields PatchGroup;
    public static FileSymbolFields PatchAttributes;
    public static FileSymbolFields DeltaPatchHeaderSource;
    public static FileSymbolFields RetainLengths;
    public static FileSymbolFields IgnoreOffsets;
    public static FileSymbolFields IgnoreLengths;
    public static FileSymbolFields RetainOffsets;
    public static FileSymbolFields SymbolPaths;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.HarvestFilesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DirectoryRef { get; public set; }
    public string Inclusions { get; public set; }
    public string Exclusions { get; public set; }
    public string ComplexReferenceParentType { get; public set; }
    public string ParentId { get; public set; }
    public string SourcePath { get; public set; }
    public HarvestFilesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(HarvestFilesSymbolFields index);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public string get_Inclusions();
    public void set_Inclusions(string value);
    public string get_Exclusions();
    public void set_Exclusions(string value);
    public string get_ComplexReferenceParentType();
    public void set_ComplexReferenceParentType(string value);
    public string get_ParentId();
    public void set_ParentId(string value);
    public string get_SourcePath();
    public void set_SourcePath(string value);
}
public enum WixToolset.Data.Symbols.HarvestFilesSymbolFields : Enum {
    public int value__;
    public static HarvestFilesSymbolFields DirectoryRef;
    public static HarvestFilesSymbolFields Inclusions;
    public static HarvestFilesSymbolFields Exclusions;
    public static HarvestFilesSymbolFields ComplexReferenceParentType;
    public static HarvestFilesSymbolFields ParentId;
    public static HarvestFilesSymbolFields SourcePath;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.IconSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public IntermediateFieldPathValue Data { get; public set; }
    public IconSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(IconSymbolFields index);
    public IntermediateFieldPathValue get_Data();
    public void set_Data(IntermediateFieldPathValue value);
}
public enum WixToolset.Data.Symbols.IconSymbolFields : Enum {
    public int value__;
    public static IconSymbolFields Data;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ImageFamiliesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Family { get; public set; }
    public string MediaSrcPropName { get; public set; }
    public Nullable`1<int> MediaDiskId { get; public set; }
    public Nullable`1<int> FileSequenceStart { get; public set; }
    public string DiskPrompt { get; public set; }
    public string VolumeLabel { get; public set; }
    public ImageFamiliesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ImageFamiliesSymbolFields index);
    public string get_Family();
    public void set_Family(string value);
    public string get_MediaSrcPropName();
    public void set_MediaSrcPropName(string value);
    public Nullable`1<int> get_MediaDiskId();
    public void set_MediaDiskId(Nullable`1<int> value);
    public Nullable`1<int> get_FileSequenceStart();
    public void set_FileSequenceStart(Nullable`1<int> value);
    public string get_DiskPrompt();
    public void set_DiskPrompt(string value);
    public string get_VolumeLabel();
    public void set_VolumeLabel(string value);
}
public enum WixToolset.Data.Symbols.ImageFamiliesSymbolFields : Enum {
    public int value__;
    public static ImageFamiliesSymbolFields Family;
    public static ImageFamiliesSymbolFields MediaSrcPropName;
    public static ImageFamiliesSymbolFields MediaDiskId;
    public static ImageFamiliesSymbolFields FileSequenceStart;
    public static ImageFamiliesSymbolFields DiskPrompt;
    public static ImageFamiliesSymbolFields VolumeLabel;
}
public enum WixToolset.Data.Symbols.IniFileActionType : Enum {
    public int value__;
    public static IniFileActionType AddLine;
    public static IniFileActionType CreateLine;
    public static IniFileActionType RemoveLine;
    public static IniFileActionType AddTag;
    public static IniFileActionType RemoveTag;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.IniFileSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileName { get; public set; }
    public string ShortFileName { get; public set; }
    public string DirProperty { get; public set; }
    public string Section { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public IniFileActionType Action { get; public set; }
    public string ComponentRef { get; public set; }
    public IniFileSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(IniFileSymbolFields index);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_ShortFileName();
    public void set_ShortFileName(string value);
    public string get_DirProperty();
    public void set_DirProperty(string value);
    public string get_Section();
    public void set_Section(string value);
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
    public IniFileActionType get_Action();
    public void set_Action(IniFileActionType value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.IniFileSymbolFields : Enum {
    public int value__;
    public static IniFileSymbolFields FileName;
    public static IniFileSymbolFields ShortFileName;
    public static IniFileSymbolFields DirProperty;
    public static IniFileSymbolFields Section;
    public static IniFileSymbolFields Key;
    public static IniFileSymbolFields Value;
    public static IniFileSymbolFields Action;
    public static IniFileSymbolFields ComponentRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.IniLocatorSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileName { get; public set; }
    public string ShortFileName { get; public set; }
    public string Section { get; public set; }
    public string Key { get; public set; }
    public Nullable`1<int> Field { get; public set; }
    public Nullable`1<int> Type { get; public set; }
    public IniLocatorSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(IniLocatorSymbolFields index);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_ShortFileName();
    public void set_ShortFileName(string value);
    public string get_Section();
    public void set_Section(string value);
    public string get_Key();
    public void set_Key(string value);
    public Nullable`1<int> get_Field();
    public void set_Field(Nullable`1<int> value);
    public Nullable`1<int> get_Type();
    public void set_Type(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.IniLocatorSymbolFields : Enum {
    public int value__;
    public static IniLocatorSymbolFields FileName;
    public static IniLocatorSymbolFields ShortFileName;
    public static IniLocatorSymbolFields Section;
    public static IniLocatorSymbolFields Key;
    public static IniLocatorSymbolFields Field;
    public static IniLocatorSymbolFields Type;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.IsolatedComponentSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string SharedComponentRef { get; public set; }
    public string ApplicationComponentRef { get; public set; }
    public IsolatedComponentSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(IsolatedComponentSymbolFields index);
    public string get_SharedComponentRef();
    public void set_SharedComponentRef(string value);
    public string get_ApplicationComponentRef();
    public void set_ApplicationComponentRef(string value);
}
public enum WixToolset.Data.Symbols.IsolatedComponentSymbolFields : Enum {
    public int value__;
    public static IsolatedComponentSymbolFields SharedComponentRef;
    public static IsolatedComponentSymbolFields ApplicationComponentRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.LaunchConditionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Condition { get; public set; }
    public string Description { get; public set; }
    public LaunchConditionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(LaunchConditionSymbolFields index);
    public string get_Condition();
    public void set_Condition(string value);
    public string get_Description();
    public void set_Description(string value);
}
public enum WixToolset.Data.Symbols.LaunchConditionSymbolFields : Enum {
    public int value__;
    public static LaunchConditionSymbolFields Condition;
    public static LaunchConditionSymbolFields Description;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ListBoxSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Property { get; public set; }
    public int Order { get; public set; }
    public string Value { get; public set; }
    public string Text { get; public set; }
    public ListBoxSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ListBoxSymbolFields index);
    public string get_Property();
    public void set_Property(string value);
    public int get_Order();
    public void set_Order(int value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Text();
    public void set_Text(string value);
}
public enum WixToolset.Data.Symbols.ListBoxSymbolFields : Enum {
    public int value__;
    public static ListBoxSymbolFields Property;
    public static ListBoxSymbolFields Order;
    public static ListBoxSymbolFields Value;
    public static ListBoxSymbolFields Text;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ListViewSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Property { get; public set; }
    public int Order { get; public set; }
    public string Value { get; public set; }
    public string Text { get; public set; }
    public string BinaryRef { get; public set; }
    public ListViewSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ListViewSymbolFields index);
    public string get_Property();
    public void set_Property(string value);
    public int get_Order();
    public void set_Order(int value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_BinaryRef();
    public void set_BinaryRef(string value);
}
public enum WixToolset.Data.Symbols.ListViewSymbolFields : Enum {
    public int value__;
    public static ListViewSymbolFields Property;
    public static ListViewSymbolFields Order;
    public static ListViewSymbolFields Value;
    public static ListViewSymbolFields Text;
    public static ListViewSymbolFields BinaryRef;
}
public enum WixToolset.Data.Symbols.LocatorType : Enum {
    public int value__;
    public static LocatorType Directory;
    public static LocatorType Filename;
    public static LocatorType RawValue;
    public static LocatorType x64;
}
public static class WixToolset.Data.Symbols.LockPermissionConstants : object {
    public static String[] GenericPermissions;
    public static String[] StandardPermissions;
    public static String[] FolderPermissions;
    public static String[] RegistryPermissions;
    public static String[] FilePermissions;
    private static LockPermissionConstants();
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.LockPermissionsSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string LockObject { get; public set; }
    public string Table { get; public set; }
    public string Domain { get; public set; }
    public string User { get; public set; }
    public Nullable`1<int> Permission { get; public set; }
    public LockPermissionsSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(LockPermissionsSymbolFields index);
    public string get_LockObject();
    public void set_LockObject(string value);
    public string get_Table();
    public void set_Table(string value);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_User();
    public void set_User(string value);
    public Nullable`1<int> get_Permission();
    public void set_Permission(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.LockPermissionsSymbolFields : Enum {
    public int value__;
    public static LockPermissionsSymbolFields LockObject;
    public static LockPermissionsSymbolFields Table;
    public static LockPermissionsSymbolFields Domain;
    public static LockPermissionsSymbolFields User;
    public static LockPermissionsSymbolFields Permission;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MediaSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public int DiskId { get; public set; }
    public Nullable`1<int> LastSequence { get; public set; }
    public string DiskPrompt { get; public set; }
    public string Cabinet { get; public set; }
    public string VolumeLabel { get; public set; }
    public string Source { get; public set; }
    public Nullable`1<CompressionLevel> CompressionLevel { get; public set; }
    public string Layout { get; public set; }
    public MediaSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MediaSymbolFields index);
    public int get_DiskId();
    public void set_DiskId(int value);
    public Nullable`1<int> get_LastSequence();
    public void set_LastSequence(Nullable`1<int> value);
    public string get_DiskPrompt();
    public void set_DiskPrompt(string value);
    public string get_Cabinet();
    public void set_Cabinet(string value);
    public string get_VolumeLabel();
    public void set_VolumeLabel(string value);
    public string get_Source();
    public void set_Source(string value);
    public Nullable`1<CompressionLevel> get_CompressionLevel();
    public void set_CompressionLevel(Nullable`1<CompressionLevel> value);
    public string get_Layout();
    public void set_Layout(string value);
}
public enum WixToolset.Data.Symbols.MediaSymbolFields : Enum {
    public int value__;
    public static MediaSymbolFields DiskId;
    public static MediaSymbolFields LastSequence;
    public static MediaSymbolFields DiskPrompt;
    public static MediaSymbolFields Cabinet;
    public static MediaSymbolFields VolumeLabel;
    public static MediaSymbolFields Source;
    public static MediaSymbolFields CompressionLevel;
    public static MediaSymbolFields Layout;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MIMESymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ContentType { get; public set; }
    public string ExtensionRef { get; public set; }
    public string CLSID { get; public set; }
    public MIMESymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MIMESymbolFields index);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ExtensionRef();
    public void set_ExtensionRef(string value);
    public string get_CLSID();
    public void set_CLSID(string value);
}
public enum WixToolset.Data.Symbols.MIMESymbolFields : Enum {
    public int value__;
    public static MIMESymbolFields ContentType;
    public static MIMESymbolFields ExtensionRef;
    public static MIMESymbolFields CLSID;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ModuleComponentsSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Component { get; public set; }
    public string ModuleID { get; public set; }
    public int Language { get; public set; }
    public ModuleComponentsSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ModuleComponentsSymbolFields index);
    public string get_Component();
    public void set_Component(string value);
    public string get_ModuleID();
    public void set_ModuleID(string value);
    public int get_Language();
    public void set_Language(int value);
}
public enum WixToolset.Data.Symbols.ModuleComponentsSymbolFields : Enum {
    public int value__;
    public static ModuleComponentsSymbolFields Component;
    public static ModuleComponentsSymbolFields ModuleID;
    public static ModuleComponentsSymbolFields Language;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ModuleConfigurationSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public int Format { get; public set; }
    public string Type { get; public set; }
    public string ContextData { get; public set; }
    public string DefaultValue { get; public set; }
    public bool KeyNoOrphan { get; public set; }
    public bool NonNullable { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string HelpLocation { get; public set; }
    public string HelpKeyword { get; public set; }
    public ModuleConfigurationSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ModuleConfigurationSymbolFields index);
    public int get_Format();
    public void set_Format(int value);
    public string get_Type();
    public void set_Type(string value);
    public string get_ContextData();
    public void set_ContextData(string value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public bool get_KeyNoOrphan();
    public void set_KeyNoOrphan(bool value);
    public bool get_NonNullable();
    public void set_NonNullable(bool value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_HelpLocation();
    public void set_HelpLocation(string value);
    public string get_HelpKeyword();
    public void set_HelpKeyword(string value);
}
public enum WixToolset.Data.Symbols.ModuleConfigurationSymbolFields : Enum {
    public int value__;
    public static ModuleConfigurationSymbolFields Format;
    public static ModuleConfigurationSymbolFields Type;
    public static ModuleConfigurationSymbolFields ContextData;
    public static ModuleConfigurationSymbolFields DefaultValue;
    public static ModuleConfigurationSymbolFields KeyNoOrphan;
    public static ModuleConfigurationSymbolFields NonNullable;
    public static ModuleConfigurationSymbolFields DisplayName;
    public static ModuleConfigurationSymbolFields Description;
    public static ModuleConfigurationSymbolFields HelpLocation;
    public static ModuleConfigurationSymbolFields HelpKeyword;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ModuleDependencySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ModuleID { get; public set; }
    public int ModuleLanguage { get; public set; }
    public string RequiredID { get; public set; }
    public int RequiredLanguage { get; public set; }
    public string RequiredVersion { get; public set; }
    public ModuleDependencySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ModuleDependencySymbolFields index);
    public string get_ModuleID();
    public void set_ModuleID(string value);
    public int get_ModuleLanguage();
    public void set_ModuleLanguage(int value);
    public string get_RequiredID();
    public void set_RequiredID(string value);
    public int get_RequiredLanguage();
    public void set_RequiredLanguage(int value);
    public string get_RequiredVersion();
    public void set_RequiredVersion(string value);
}
public enum WixToolset.Data.Symbols.ModuleDependencySymbolFields : Enum {
    public int value__;
    public static ModuleDependencySymbolFields ModuleID;
    public static ModuleDependencySymbolFields ModuleLanguage;
    public static ModuleDependencySymbolFields RequiredID;
    public static ModuleDependencySymbolFields RequiredLanguage;
    public static ModuleDependencySymbolFields RequiredVersion;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ModuleExclusionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ModuleID { get; public set; }
    public int ModuleLanguage { get; public set; }
    public string ExcludedID { get; public set; }
    public int ExcludedLanguage { get; public set; }
    public string ExcludedMinVersion { get; public set; }
    public string ExcludedMaxVersion { get; public set; }
    public ModuleExclusionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ModuleExclusionSymbolFields index);
    public string get_ModuleID();
    public void set_ModuleID(string value);
    public int get_ModuleLanguage();
    public void set_ModuleLanguage(int value);
    public string get_ExcludedID();
    public void set_ExcludedID(string value);
    public int get_ExcludedLanguage();
    public void set_ExcludedLanguage(int value);
    public string get_ExcludedMinVersion();
    public void set_ExcludedMinVersion(string value);
    public string get_ExcludedMaxVersion();
    public void set_ExcludedMaxVersion(string value);
}
public enum WixToolset.Data.Symbols.ModuleExclusionSymbolFields : Enum {
    public int value__;
    public static ModuleExclusionSymbolFields ModuleID;
    public static ModuleExclusionSymbolFields ModuleLanguage;
    public static ModuleExclusionSymbolFields ExcludedID;
    public static ModuleExclusionSymbolFields ExcludedLanguage;
    public static ModuleExclusionSymbolFields ExcludedMinVersion;
    public static ModuleExclusionSymbolFields ExcludedMaxVersion;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ModuleIgnoreTableSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public ModuleIgnoreTableSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ModuleIgnoreTableSymbolFields index);
}
public enum WixToolset.Data.Symbols.ModuleIgnoreTableSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ModuleSubstitutionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Table { get; public set; }
    public string Row { get; public set; }
    public string Column { get; public set; }
    public string Value { get; public set; }
    public ModuleSubstitutionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ModuleSubstitutionSymbolFields index);
    public string get_Table();
    public void set_Table(string value);
    public string get_Row();
    public void set_Row(string value);
    public string get_Column();
    public void set_Column(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.ModuleSubstitutionSymbolFields : Enum {
    public int value__;
    public static ModuleSubstitutionSymbolFields Table;
    public static ModuleSubstitutionSymbolFields Row;
    public static ModuleSubstitutionSymbolFields Column;
    public static ModuleSubstitutionSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MoveFileSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string SourceName { get; public set; }
    public string DestinationName { get; public set; }
    public string DestinationShortName { get; public set; }
    public string SourceFolder { get; public set; }
    public string DestFolder { get; public set; }
    public bool Delete { get; public set; }
    public MoveFileSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MoveFileSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public string get_DestinationShortName();
    public void set_DestinationShortName(string value);
    public string get_SourceFolder();
    public void set_SourceFolder(string value);
    public string get_DestFolder();
    public void set_DestFolder(string value);
    public bool get_Delete();
    public void set_Delete(bool value);
}
public enum WixToolset.Data.Symbols.MoveFileSymbolFields : Enum {
    public int value__;
    public static MoveFileSymbolFields ComponentRef;
    public static MoveFileSymbolFields SourceName;
    public static MoveFileSymbolFields DestinationName;
    public static MoveFileSymbolFields DestinationShortName;
    public static MoveFileSymbolFields SourceFolder;
    public static MoveFileSymbolFields DestFolder;
    public static MoveFileSymbolFields Delete;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiAssemblyNameSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public MsiAssemblyNameSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiAssemblyNameSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.MsiAssemblyNameSymbolFields : Enum {
    public int value__;
    public static MsiAssemblyNameSymbolFields ComponentRef;
    public static MsiAssemblyNameSymbolFields Name;
    public static MsiAssemblyNameSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiDigitalCertificateSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string CertData { get; public set; }
    public MsiDigitalCertificateSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiDigitalCertificateSymbolFields index);
    public string get_CertData();
    public void set_CertData(string value);
}
public enum WixToolset.Data.Symbols.MsiDigitalCertificateSymbolFields : Enum {
    public int value__;
    public static MsiDigitalCertificateSymbolFields CertData;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiDigitalSignatureSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Table { get; public set; }
    public string SignObject { get; public set; }
    public string DigitalCertificateRef { get; public set; }
    public string Hash { get; public set; }
    public MsiDigitalSignatureSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiDigitalSignatureSymbolFields index);
    public string get_Table();
    public void set_Table(string value);
    public string get_SignObject();
    public void set_SignObject(string value);
    public string get_DigitalCertificateRef();
    public void set_DigitalCertificateRef(string value);
    public string get_Hash();
    public void set_Hash(string value);
}
public enum WixToolset.Data.Symbols.MsiDigitalSignatureSymbolFields : Enum {
    public int value__;
    public static MsiDigitalSignatureSymbolFields Table;
    public static MsiDigitalSignatureSymbolFields SignObject;
    public static MsiDigitalSignatureSymbolFields DigitalCertificateRef;
    public static MsiDigitalSignatureSymbolFields Hash;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiEmbeddedChainerSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Condition { get; public set; }
    public string CommandLine { get; public set; }
    public string Source { get; public set; }
    public int Type { get; public set; }
    public MsiEmbeddedChainerSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiEmbeddedChainerSymbolFields index);
    public string get_Condition();
    public void set_Condition(string value);
    public string get_CommandLine();
    public void set_CommandLine(string value);
    public string get_Source();
    public void set_Source(string value);
    public int get_Type();
    public void set_Type(int value);
}
public enum WixToolset.Data.Symbols.MsiEmbeddedChainerSymbolFields : Enum {
    public int value__;
    public static MsiEmbeddedChainerSymbolFields Condition;
    public static MsiEmbeddedChainerSymbolFields CommandLine;
    public static MsiEmbeddedChainerSymbolFields Source;
    public static MsiEmbeddedChainerSymbolFields Type;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiEmbeddedUISymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileName { get; public set; }
    public bool EntryPoint { get; public set; }
    public bool SupportsBasicUI { get; public set; }
    public Nullable`1<int> MessageFilter { get; public set; }
    public string Source { get; public set; }
    public MsiEmbeddedUISymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiEmbeddedUISymbolFields index);
    public string get_FileName();
    public void set_FileName(string value);
    public bool get_EntryPoint();
    public void set_EntryPoint(bool value);
    public bool get_SupportsBasicUI();
    public void set_SupportsBasicUI(bool value);
    public Nullable`1<int> get_MessageFilter();
    public void set_MessageFilter(Nullable`1<int> value);
    public string get_Source();
    public void set_Source(string value);
}
public enum WixToolset.Data.Symbols.MsiEmbeddedUISymbolFields : Enum {
    public int value__;
    public static MsiEmbeddedUISymbolFields FileName;
    public static MsiEmbeddedUISymbolFields EntryPoint;
    public static MsiEmbeddedUISymbolFields SupportsBasicUI;
    public static MsiEmbeddedUISymbolFields MessageFilter;
    public static MsiEmbeddedUISymbolFields Source;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiFileHashSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public int Options { get; public set; }
    public int HashPart1 { get; public set; }
    public int HashPart2 { get; public set; }
    public int HashPart3 { get; public set; }
    public int HashPart4 { get; public set; }
    public MsiFileHashSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiFileHashSymbolFields index);
    public int get_Options();
    public void set_Options(int value);
    public int get_HashPart1();
    public void set_HashPart1(int value);
    public int get_HashPart2();
    public void set_HashPart2(int value);
    public int get_HashPart3();
    public void set_HashPart3(int value);
    public int get_HashPart4();
    public void set_HashPart4(int value);
}
public enum WixToolset.Data.Symbols.MsiFileHashSymbolFields : Enum {
    public int value__;
    public static MsiFileHashSymbolFields Options;
    public static MsiFileHashSymbolFields HashPart1;
    public static MsiFileHashSymbolFields HashPart2;
    public static MsiFileHashSymbolFields HashPart3;
    public static MsiFileHashSymbolFields HashPart4;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiLockPermissionsExSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string LockObject { get; public set; }
    public string Table { get; public set; }
    public string SDDLText { get; public set; }
    public string Condition { get; public set; }
    public MsiLockPermissionsExSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiLockPermissionsExSymbolFields index);
    public string get_LockObject();
    public void set_LockObject(string value);
    public string get_Table();
    public void set_Table(string value);
    public string get_SDDLText();
    public void set_SDDLText(string value);
    public string get_Condition();
    public void set_Condition(string value);
}
public enum WixToolset.Data.Symbols.MsiLockPermissionsExSymbolFields : Enum {
    public int value__;
    public static MsiLockPermissionsExSymbolFields LockObject;
    public static MsiLockPermissionsExSymbolFields Table;
    public static MsiLockPermissionsExSymbolFields SDDLText;
    public static MsiLockPermissionsExSymbolFields Condition;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiPackageCertificateSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackageCertificate { get; public set; }
    public string DigitalCertificateRef { get; public set; }
    public MsiPackageCertificateSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiPackageCertificateSymbolFields index);
    public string get_PackageCertificate();
    public void set_PackageCertificate(string value);
    public string get_DigitalCertificateRef();
    public void set_DigitalCertificateRef(string value);
}
public enum WixToolset.Data.Symbols.MsiPackageCertificateSymbolFields : Enum {
    public int value__;
    public static MsiPackageCertificateSymbolFields PackageCertificate;
    public static MsiPackageCertificateSymbolFields DigitalCertificateRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiPatchCertificateSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PatchCertificate { get; public set; }
    public string DigitalCertificateRef { get; public set; }
    public MsiPatchCertificateSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiPatchCertificateSymbolFields index);
    public string get_PatchCertificate();
    public void set_PatchCertificate(string value);
    public string get_DigitalCertificateRef();
    public void set_DigitalCertificateRef(string value);
}
public enum WixToolset.Data.Symbols.MsiPatchCertificateSymbolFields : Enum {
    public int value__;
    public static MsiPatchCertificateSymbolFields PatchCertificate;
    public static MsiPatchCertificateSymbolFields DigitalCertificateRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiPatchFamilySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PatchFamily { get; public set; }
    public string ProductCode { get; public set; }
    public string Sequence { get; public set; }
    public Nullable`1<int> Attributes { get; public set; }
    public MsiPatchFamilySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiPatchFamilySymbolFields index);
    public string get_PatchFamily();
    public void set_PatchFamily(string value);
    public string get_ProductCode();
    public void set_ProductCode(string value);
    public string get_Sequence();
    public void set_Sequence(string value);
    public Nullable`1<int> get_Attributes();
    public void set_Attributes(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.MsiPatchFamilySymbolFields : Enum {
    public int value__;
    public static MsiPatchFamilySymbolFields PatchFamily;
    public static MsiPatchFamilySymbolFields ProductCode;
    public static MsiPatchFamilySymbolFields Sequence;
    public static MsiPatchFamilySymbolFields Attributes;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiPatchHeadersSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string StreamRef { get; public set; }
    public string Header { get; public set; }
    public MsiPatchHeadersSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiPatchHeadersSymbolFields index);
    public string get_StreamRef();
    public void set_StreamRef(string value);
    public string get_Header();
    public void set_Header(string value);
}
public enum WixToolset.Data.Symbols.MsiPatchHeadersSymbolFields : Enum {
    public int value__;
    public static MsiPatchHeadersSymbolFields StreamRef;
    public static MsiPatchHeadersSymbolFields Header;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiPatchMetadataSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Company { get; public set; }
    public string Property { get; public set; }
    public string Value { get; public set; }
    public MsiPatchMetadataSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiPatchMetadataSymbolFields index);
    public string get_Company();
    public void set_Company(string value);
    public string get_Property();
    public void set_Property(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.MsiPatchMetadataSymbolFields : Enum {
    public int value__;
    public static MsiPatchMetadataSymbolFields Company;
    public static MsiPatchMetadataSymbolFields Property;
    public static MsiPatchMetadataSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiPatchOldAssemblyFileSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileRef { get; public set; }
    public string AssemblyRef { get; public set; }
    public MsiPatchOldAssemblyFileSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiPatchOldAssemblyFileSymbolFields index);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_AssemblyRef();
    public void set_AssemblyRef(string value);
}
public enum WixToolset.Data.Symbols.MsiPatchOldAssemblyFileSymbolFields : Enum {
    public int value__;
    public static MsiPatchOldAssemblyFileSymbolFields FileRef;
    public static MsiPatchOldAssemblyFileSymbolFields AssemblyRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiPatchOldAssemblyNameSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Assembly { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public MsiPatchOldAssemblyNameSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiPatchOldAssemblyNameSymbolFields index);
    public string get_Assembly();
    public void set_Assembly(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.MsiPatchOldAssemblyNameSymbolFields : Enum {
    public int value__;
    public static MsiPatchOldAssemblyNameSymbolFields Assembly;
    public static MsiPatchOldAssemblyNameSymbolFields Name;
    public static MsiPatchOldAssemblyNameSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiServiceConfigFailureActionsSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Name { get; public set; }
    public bool OnInstall { get; public set; }
    public bool OnReinstall { get; public set; }
    public bool OnUninstall { get; public set; }
    public Nullable`1<int> ResetPeriod { get; public set; }
    public string RebootMessage { get; public set; }
    public string Command { get; public set; }
    public string Actions { get; public set; }
    public string DelayActions { get; public set; }
    public string ComponentRef { get; public set; }
    public MsiServiceConfigFailureActionsSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiServiceConfigFailureActionsSymbolFields index);
    public string get_Name();
    public void set_Name(string value);
    public bool get_OnInstall();
    public void set_OnInstall(bool value);
    public bool get_OnReinstall();
    public void set_OnReinstall(bool value);
    public bool get_OnUninstall();
    public void set_OnUninstall(bool value);
    public Nullable`1<int> get_ResetPeriod();
    public void set_ResetPeriod(Nullable`1<int> value);
    public string get_RebootMessage();
    public void set_RebootMessage(string value);
    public string get_Command();
    public void set_Command(string value);
    public string get_Actions();
    public void set_Actions(string value);
    public string get_DelayActions();
    public void set_DelayActions(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.MsiServiceConfigFailureActionsSymbolFields : Enum {
    public int value__;
    public static MsiServiceConfigFailureActionsSymbolFields Name;
    public static MsiServiceConfigFailureActionsSymbolFields OnInstall;
    public static MsiServiceConfigFailureActionsSymbolFields OnReinstall;
    public static MsiServiceConfigFailureActionsSymbolFields OnUninstall;
    public static MsiServiceConfigFailureActionsSymbolFields ResetPeriod;
    public static MsiServiceConfigFailureActionsSymbolFields RebootMessage;
    public static MsiServiceConfigFailureActionsSymbolFields Command;
    public static MsiServiceConfigFailureActionsSymbolFields Actions;
    public static MsiServiceConfigFailureActionsSymbolFields DelayActions;
    public static MsiServiceConfigFailureActionsSymbolFields ComponentRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiServiceConfigSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Name { get; public set; }
    public bool OnInstall { get; public set; }
    public bool OnReinstall { get; public set; }
    public bool OnUninstall { get; public set; }
    public MsiServiceConfigType ConfigType { get; public set; }
    public string Argument { get; public set; }
    public string ComponentRef { get; public set; }
    public MsiServiceConfigSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiServiceConfigSymbolFields index);
    public string get_Name();
    public void set_Name(string value);
    public bool get_OnInstall();
    public void set_OnInstall(bool value);
    public bool get_OnReinstall();
    public void set_OnReinstall(bool value);
    public bool get_OnUninstall();
    public void set_OnUninstall(bool value);
    public MsiServiceConfigType get_ConfigType();
    public void set_ConfigType(MsiServiceConfigType value);
    public string get_Argument();
    public void set_Argument(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.MsiServiceConfigSymbolFields : Enum {
    public int value__;
    public static MsiServiceConfigSymbolFields Name;
    public static MsiServiceConfigSymbolFields OnInstall;
    public static MsiServiceConfigSymbolFields OnReinstall;
    public static MsiServiceConfigSymbolFields OnUninstall;
    public static MsiServiceConfigSymbolFields ConfigType;
    public static MsiServiceConfigSymbolFields Argument;
    public static MsiServiceConfigSymbolFields ComponentRef;
}
public enum WixToolset.Data.Symbols.MsiServiceConfigType : Enum {
    public int value__;
    public static MsiServiceConfigType DelayedAutoStart;
    public static MsiServiceConfigType FailureActionsFlag;
    public static MsiServiceConfigType ServiceSidInfo;
    public static MsiServiceConfigType RequiredPrivilegesInfo;
    public static MsiServiceConfigType PreshutdownInfo;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.MsiShortcutPropertySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ShortcutRef { get; public set; }
    public string PropertyKey { get; public set; }
    public string PropVariantValue { get; public set; }
    public MsiShortcutPropertySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(MsiShortcutPropertySymbolFields index);
    public string get_ShortcutRef();
    public void set_ShortcutRef(string value);
    public string get_PropertyKey();
    public void set_PropertyKey(string value);
    public string get_PropVariantValue();
    public void set_PropVariantValue(string value);
}
public enum WixToolset.Data.Symbols.MsiShortcutPropertySymbolFields : Enum {
    public int value__;
    public static MsiShortcutPropertySymbolFields ShortcutRef;
    public static MsiShortcutPropertySymbolFields PropertyKey;
    public static MsiShortcutPropertySymbolFields PropVariantValue;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ODBCAttributeSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DriverRef { get; public set; }
    public string Attribute { get; public set; }
    public string Value { get; public set; }
    public ODBCAttributeSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ODBCAttributeSymbolFields index);
    public string get_DriverRef();
    public void set_DriverRef(string value);
    public string get_Attribute();
    public void set_Attribute(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.ODBCAttributeSymbolFields : Enum {
    public int value__;
    public static ODBCAttributeSymbolFields DriverRef;
    public static ODBCAttributeSymbolFields Attribute;
    public static ODBCAttributeSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ODBCDataSourceSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string Description { get; public set; }
    public string DriverDescription { get; public set; }
    public int Registration { get; public set; }
    public ODBCDataSourceSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ODBCDataSourceSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_DriverDescription();
    public void set_DriverDescription(string value);
    public int get_Registration();
    public void set_Registration(int value);
}
public enum WixToolset.Data.Symbols.ODBCDataSourceSymbolFields : Enum {
    public int value__;
    public static ODBCDataSourceSymbolFields ComponentRef;
    public static ODBCDataSourceSymbolFields Description;
    public static ODBCDataSourceSymbolFields DriverDescription;
    public static ODBCDataSourceSymbolFields Registration;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ODBCDriverSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string Description { get; public set; }
    public string FileRef { get; public set; }
    public string SetupFileRef { get; public set; }
    public ODBCDriverSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ODBCDriverSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_SetupFileRef();
    public void set_SetupFileRef(string value);
}
public enum WixToolset.Data.Symbols.ODBCDriverSymbolFields : Enum {
    public int value__;
    public static ODBCDriverSymbolFields ComponentRef;
    public static ODBCDriverSymbolFields Description;
    public static ODBCDriverSymbolFields FileRef;
    public static ODBCDriverSymbolFields SetupFileRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ODBCSourceAttributeSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DataSourceRef { get; public set; }
    public string Attribute { get; public set; }
    public string Value { get; public set; }
    public ODBCSourceAttributeSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ODBCSourceAttributeSymbolFields index);
    public string get_DataSourceRef();
    public void set_DataSourceRef(string value);
    public string get_Attribute();
    public void set_Attribute(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.ODBCSourceAttributeSymbolFields : Enum {
    public int value__;
    public static ODBCSourceAttributeSymbolFields DataSourceRef;
    public static ODBCSourceAttributeSymbolFields Attribute;
    public static ODBCSourceAttributeSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ODBCTranslatorSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string Description { get; public set; }
    public string FileRef { get; public set; }
    public string SetupFileRef { get; public set; }
    public ODBCTranslatorSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ODBCTranslatorSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_SetupFileRef();
    public void set_SetupFileRef(string value);
}
public enum WixToolset.Data.Symbols.ODBCTranslatorSymbolFields : Enum {
    public int value__;
    public static ODBCTranslatorSymbolFields ComponentRef;
    public static ODBCTranslatorSymbolFields Description;
    public static ODBCTranslatorSymbolFields FileRef;
    public static ODBCTranslatorSymbolFields SetupFileRef;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.OptimizeCAFlags : Enum {
    public int value__;
    public static OptimizeCAFlags None;
    public static OptimizeCAFlags SkipAssignment;
    public static OptimizeCAFlags SkipImmediate;
    public static OptimizeCAFlags SkipDeferred;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.PatchAttributeType : Enum {
    public int value__;
    public static PatchAttributeType None;
    public static PatchAttributeType Ignore;
    public static PatchAttributeType IncludeWholeFile;
    public static PatchAttributeType AllowIgnoreOnError;
    public static PatchAttributeType Defined;
}
public enum WixToolset.Data.Symbols.PatchInstallerRequirement : Enum {
    public int value__;
    public static PatchInstallerRequirement Version10;
    public static PatchInstallerRequirement Version12;
    public static PatchInstallerRequirement Version20;
    public static PatchInstallerRequirement Version30;
    public static PatchInstallerRequirement Version31;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.PatchMetadataSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Company { get; public set; }
    public string Property { get; public set; }
    public string Value { get; public set; }
    public PatchMetadataSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(PatchMetadataSymbolFields index);
    public string get_Company();
    public void set_Company(string value);
    public string get_Property();
    public void set_Property(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.PatchMetadataSymbolFields : Enum {
    public int value__;
    public static PatchMetadataSymbolFields Company;
    public static PatchMetadataSymbolFields Property;
    public static PatchMetadataSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.PatchPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PatchId { get; public set; }
    public int MediaDiskIdRef { get; public set; }
    public PatchPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(PatchPackageSymbolFields index);
    public string get_PatchId();
    public void set_PatchId(string value);
    public int get_MediaDiskIdRef();
    public void set_MediaDiskIdRef(int value);
}
public enum WixToolset.Data.Symbols.PatchPackageSymbolFields : Enum {
    public int value__;
    public static PatchPackageSymbolFields PatchId;
    public static PatchPackageSymbolFields MediaDiskIdRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.PatchSequenceSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PatchFamily { get; public set; }
    public string Target { get; public set; }
    public string Sequence { get; public set; }
    public Nullable`1<int> Supersede { get; public set; }
    public PatchSequenceSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(PatchSequenceSymbolFields index);
    public string get_PatchFamily();
    public void set_PatchFamily(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Sequence();
    public void set_Sequence(string value);
    public Nullable`1<int> get_Supersede();
    public void set_Supersede(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.PatchSequenceSymbolFields : Enum {
    public int value__;
    public static PatchSequenceSymbolFields PatchFamily;
    public static PatchSequenceSymbolFields Target;
    public static PatchSequenceSymbolFields Sequence;
    public static PatchSequenceSymbolFields Supersede;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.PatchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileRef { get; public set; }
    public int Sequence { get; public set; }
    public int PatchSize { get; public set; }
    public int Attributes { get; public set; }
    public string Header { get; public set; }
    public string StreamRef { get; public set; }
    public PatchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(PatchSymbolFields index);
    public string get_FileRef();
    public void set_FileRef(string value);
    public int get_Sequence();
    public void set_Sequence(int value);
    public int get_PatchSize();
    public void set_PatchSize(int value);
    public int get_Attributes();
    public void set_Attributes(int value);
    public string get_Header();
    public void set_Header(string value);
    public string get_StreamRef();
    public void set_StreamRef(string value);
}
public enum WixToolset.Data.Symbols.PatchSymbolFields : Enum {
    public int value__;
    public static PatchSymbolFields FileRef;
    public static PatchSymbolFields Sequence;
    public static PatchSymbolFields PatchSize;
    public static PatchSymbolFields Attributes;
    public static PatchSymbolFields Header;
    public static PatchSymbolFields StreamRef;
}
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum WixToolset.Data.Symbols.PatchSymbolFlags : Enum {
    public UInt32 value__;
    public static PatchSymbolFlags PatchSymbolNoImagehlp;
    public static PatchSymbolFlags PatchSymbolNoFailures;
    public static PatchSymbolFlags PatchSymbolUndecoratedToo;
    public static PatchSymbolFlags PatchSymbolReserved;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ProgIdSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ProgId { get; public set; }
    public string ParentProgIdRef { get; public set; }
    public string ClassRef { get; public set; }
    public string Description { get; public set; }
    public string IconRef { get; public set; }
    public Nullable`1<int> IconIndex { get; public set; }
    public ProgIdSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ProgIdSymbolFields index);
    public string get_ProgId();
    public void set_ProgId(string value);
    public string get_ParentProgIdRef();
    public void set_ParentProgIdRef(string value);
    public string get_ClassRef();
    public void set_ClassRef(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_IconRef();
    public void set_IconRef(string value);
    public Nullable`1<int> get_IconIndex();
    public void set_IconIndex(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.ProgIdSymbolFields : Enum {
    public int value__;
    public static ProgIdSymbolFields ProgId;
    public static ProgIdSymbolFields ParentProgIdRef;
    public static ProgIdSymbolFields ClassRef;
    public static ProgIdSymbolFields Description;
    public static ProgIdSymbolFields IconRef;
    public static ProgIdSymbolFields IconIndex;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.PropertiesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public PropertiesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(PropertiesSymbolFields index);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.PropertiesSymbolFields : Enum {
    public int value__;
    public static PropertiesSymbolFields Name;
    public static PropertiesSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.PropertySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Value { get; public set; }
    public PropertySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(PropertySymbolFields index);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.PropertySymbolFields : Enum {
    public int value__;
    public static PropertySymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.PublishComponentSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentId { get; public set; }
    public string Qualifier { get; public set; }
    public string ComponentRef { get; public set; }
    public string AppData { get; public set; }
    public string FeatureRef { get; public set; }
    public PublishComponentSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(PublishComponentSymbolFields index);
    public string get_ComponentId();
    public void set_ComponentId(string value);
    public string get_Qualifier();
    public void set_Qualifier(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_AppData();
    public void set_AppData(string value);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
}
public enum WixToolset.Data.Symbols.PublishComponentSymbolFields : Enum {
    public int value__;
    public static PublishComponentSymbolFields ComponentId;
    public static PublishComponentSymbolFields Qualifier;
    public static PublishComponentSymbolFields ComponentRef;
    public static PublishComponentSymbolFields AppData;
    public static PublishComponentSymbolFields FeatureRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.RadioButtonSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Property { get; public set; }
    public int Order { get; public set; }
    public string Value { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public string Text { get; public set; }
    public string Help { get; public set; }
    public RadioButtonSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(RadioButtonSymbolFields index);
    public string get_Property();
    public void set_Property(string value);
    public int get_Order();
    public void set_Order(int value);
    public string get_Value();
    public void set_Value(string value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Help();
    public void set_Help(string value);
}
public enum WixToolset.Data.Symbols.RadioButtonSymbolFields : Enum {
    public int value__;
    public static RadioButtonSymbolFields Property;
    public static RadioButtonSymbolFields Order;
    public static RadioButtonSymbolFields Value;
    public static RadioButtonSymbolFields X;
    public static RadioButtonSymbolFields Y;
    public static RadioButtonSymbolFields Width;
    public static RadioButtonSymbolFields Height;
    public static RadioButtonSymbolFields Text;
    public static RadioButtonSymbolFields Help;
}
public enum WixToolset.Data.Symbols.RegistryRootType : Enum {
    public int value__;
    public static RegistryRootType Unknown;
    public static RegistryRootType MachineUser;
    public static RegistryRootType ClassesRoot;
    public static RegistryRootType CurrentUser;
    public static RegistryRootType LocalMachine;
    public static RegistryRootType Users;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.RegistrySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public RegistryRootType Root { get; public set; }
    public string Key { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public RegistryValueType ValueType { get; public set; }
    public RegistryValueActionType ValueAction { get; public set; }
    public string ComponentRef { get; public set; }
    public RegistrySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(RegistrySymbolFields index);
    public RegistryRootType get_Root();
    public void set_Root(RegistryRootType value);
    public string get_Key();
    public void set_Key(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public RegistryValueType get_ValueType();
    public void set_ValueType(RegistryValueType value);
    public RegistryValueActionType get_ValueAction();
    public void set_ValueAction(RegistryValueActionType value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.RegistrySymbolFields : Enum {
    public int value__;
    public static RegistrySymbolFields Root;
    public static RegistrySymbolFields Key;
    public static RegistrySymbolFields Name;
    public static RegistrySymbolFields Value;
    public static RegistrySymbolFields ValueType;
    public static RegistrySymbolFields ValueAction;
    public static RegistrySymbolFields ComponentRef;
}
public enum WixToolset.Data.Symbols.RegistryValueActionType : Enum {
    public int value__;
    public static RegistryValueActionType Write;
    public static RegistryValueActionType Append;
    public static RegistryValueActionType Prepend;
}
public enum WixToolset.Data.Symbols.RegistryValueType : Enum {
    public int value__;
    public static RegistryValueType String;
    public static RegistryValueType Binary;
    public static RegistryValueType Expandable;
    public static RegistryValueType Integer;
    public static RegistryValueType MultiString;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.RegLocatorSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public RegistryRootType Root { get; public set; }
    public string Key { get; public set; }
    public string Name { get; public set; }
    public RegLocatorType Type { get; public set; }
    public bool Win64 { get; public set; }
    public RegLocatorSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(RegLocatorSymbolFields index);
    public RegistryRootType get_Root();
    public void set_Root(RegistryRootType value);
    public string get_Key();
    public void set_Key(string value);
    public string get_Name();
    public void set_Name(string value);
    public RegLocatorType get_Type();
    public void set_Type(RegLocatorType value);
    public bool get_Win64();
    public void set_Win64(bool value);
}
public enum WixToolset.Data.Symbols.RegLocatorSymbolFields : Enum {
    public int value__;
    public static RegLocatorSymbolFields Root;
    public static RegLocatorSymbolFields Key;
    public static RegLocatorSymbolFields Name;
    public static RegLocatorSymbolFields Type;
    public static RegLocatorSymbolFields Win64;
}
public enum WixToolset.Data.Symbols.RegLocatorType : Enum {
    public int value__;
    public static RegLocatorType Directory;
    public static RegLocatorType FileName;
    public static RegLocatorType Raw;
}
public enum WixToolset.Data.Symbols.RelatedBundleActionType : Enum {
    public int value__;
    public static RelatedBundleActionType Detect;
    public static RelatedBundleActionType Upgrade;
    public static RelatedBundleActionType Addon;
    public static RelatedBundleActionType Patch;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.RemoveFileSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string FileName { get; public set; }
    public string ShortFileName { get; public set; }
    public string DirPropertyRef { get; public set; }
    public Nullable`1<bool> OnInstall { get; public set; }
    public Nullable`1<bool> OnUninstall { get; public set; }
    public RemoveFileSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(RemoveFileSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_ShortFileName();
    public void set_ShortFileName(string value);
    public string get_DirPropertyRef();
    public void set_DirPropertyRef(string value);
    public Nullable`1<bool> get_OnInstall();
    public void set_OnInstall(Nullable`1<bool> value);
    public Nullable`1<bool> get_OnUninstall();
    public void set_OnUninstall(Nullable`1<bool> value);
}
public enum WixToolset.Data.Symbols.RemoveFileSymbolFields : Enum {
    public int value__;
    public static RemoveFileSymbolFields ComponentRef;
    public static RemoveFileSymbolFields FileName;
    public static RemoveFileSymbolFields ShortFileName;
    public static RemoveFileSymbolFields DirPropertyRef;
    public static RemoveFileSymbolFields OnInstall;
    public static RemoveFileSymbolFields OnUninstall;
}
public enum WixToolset.Data.Symbols.RemoveRegistryActionType : Enum {
    public int value__;
    public static RemoveRegistryActionType RemoveOnInstall;
    public static RemoveRegistryActionType RemoveOnUninstall;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.RemoveRegistrySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public RegistryRootType Root { get; public set; }
    public string Key { get; public set; }
    public string Name { get; public set; }
    public RemoveRegistryActionType Action { get; public set; }
    public string ComponentRef { get; public set; }
    public RemoveRegistrySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(RemoveRegistrySymbolFields index);
    public RegistryRootType get_Root();
    public void set_Root(RegistryRootType value);
    public string get_Key();
    public void set_Key(string value);
    public string get_Name();
    public void set_Name(string value);
    public RemoveRegistryActionType get_Action();
    public void set_Action(RemoveRegistryActionType value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.RemoveRegistrySymbolFields : Enum {
    public int value__;
    public static RemoveRegistrySymbolFields Root;
    public static RemoveRegistrySymbolFields Key;
    public static RemoveRegistrySymbolFields Name;
    public static RemoveRegistrySymbolFields Action;
    public static RemoveRegistrySymbolFields ComponentRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ReserveCostSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public string ReserveFolder { get; public set; }
    public int ReserveLocal { get; public set; }
    public int ReserveSource { get; public set; }
    public ReserveCostSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ReserveCostSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_ReserveFolder();
    public void set_ReserveFolder(string value);
    public int get_ReserveLocal();
    public void set_ReserveLocal(int value);
    public int get_ReserveSource();
    public void set_ReserveSource(int value);
}
public enum WixToolset.Data.Symbols.ReserveCostSymbolFields : Enum {
    public int value__;
    public static ReserveCostSymbolFields ComponentRef;
    public static ReserveCostSymbolFields ReserveFolder;
    public static ReserveCostSymbolFields ReserveLocal;
    public static ReserveCostSymbolFields ReserveSource;
}
public enum WixToolset.Data.Symbols.SequenceTable : Enum {
    public int value__;
    public static SequenceTable AdminUISequence;
    public static SequenceTable AdminExecuteSequence;
    public static SequenceTable AdvertiseExecuteSequence;
    public static SequenceTable InstallUISequence;
    public static SequenceTable InstallExecuteSequence;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ServiceControlSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Name { get; public set; }
    public bool InstallRemove { get; public set; }
    public bool UninstallRemove { get; public set; }
    public bool InstallStart { get; public set; }
    public bool UninstallStart { get; public set; }
    public bool InstallStop { get; public set; }
    public bool UninstallStop { get; public set; }
    public string Arguments { get; public set; }
    public Nullable`1<bool> Wait { get; public set; }
    public string ComponentRef { get; public set; }
    public ServiceControlSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ServiceControlSymbolFields index);
    public string get_Name();
    public void set_Name(string value);
    public bool get_InstallRemove();
    public void set_InstallRemove(bool value);
    public bool get_UninstallRemove();
    public void set_UninstallRemove(bool value);
    public bool get_InstallStart();
    public void set_InstallStart(bool value);
    public bool get_UninstallStart();
    public void set_UninstallStart(bool value);
    public bool get_InstallStop();
    public void set_InstallStop(bool value);
    public bool get_UninstallStop();
    public void set_UninstallStop(bool value);
    public string get_Arguments();
    public void set_Arguments(string value);
    public Nullable`1<bool> get_Wait();
    public void set_Wait(Nullable`1<bool> value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.ServiceControlSymbolFields : Enum {
    public int value__;
    public static ServiceControlSymbolFields Name;
    public static ServiceControlSymbolFields InstallRemove;
    public static ServiceControlSymbolFields UninstallRemove;
    public static ServiceControlSymbolFields InstallStart;
    public static ServiceControlSymbolFields UninstallStart;
    public static ServiceControlSymbolFields InstallStop;
    public static ServiceControlSymbolFields UninstallStop;
    public static ServiceControlSymbolFields Arguments;
    public static ServiceControlSymbolFields Wait;
    public static ServiceControlSymbolFields ComponentRef;
}
public enum WixToolset.Data.Symbols.ServiceErrorControl : Enum {
    public int value__;
    public static ServiceErrorControl Ignore;
    public static ServiceErrorControl Normal;
    public static ServiceErrorControl Critical;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ServiceInstallSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public ServiceType ServiceType { get; public set; }
    public ServiceStartType StartType { get; public set; }
    public ServiceErrorControl ErrorControl { get; public set; }
    public string LoadOrderGroup { get; public set; }
    public string Dependencies { get; public set; }
    public string StartName { get; public set; }
    public string Password { get; public set; }
    public string Arguments { get; public set; }
    public string ComponentRef { get; public set; }
    public string Description { get; public set; }
    public bool Interactive { get; public set; }
    public bool Vital { get; public set; }
    public ServiceInstallSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ServiceInstallSymbolFields index);
    public string get_Name();
    public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public ServiceType get_ServiceType();
    public void set_ServiceType(ServiceType value);
    public ServiceStartType get_StartType();
    public void set_StartType(ServiceStartType value);
    public ServiceErrorControl get_ErrorControl();
    public void set_ErrorControl(ServiceErrorControl value);
    public string get_LoadOrderGroup();
    public void set_LoadOrderGroup(string value);
    public string get_Dependencies();
    public void set_Dependencies(string value);
    public string get_StartName();
    public void set_StartName(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Arguments();
    public void set_Arguments(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Interactive();
    public void set_Interactive(bool value);
    public bool get_Vital();
    public void set_Vital(bool value);
}
public enum WixToolset.Data.Symbols.ServiceInstallSymbolFields : Enum {
    public int value__;
    public static ServiceInstallSymbolFields Name;
    public static ServiceInstallSymbolFields DisplayName;
    public static ServiceInstallSymbolFields ServiceType;
    public static ServiceInstallSymbolFields StartType;
    public static ServiceInstallSymbolFields ErrorControl;
    public static ServiceInstallSymbolFields LoadOrderGroup;
    public static ServiceInstallSymbolFields Dependencies;
    public static ServiceInstallSymbolFields StartName;
    public static ServiceInstallSymbolFields Password;
    public static ServiceInstallSymbolFields Arguments;
    public static ServiceInstallSymbolFields ComponentRef;
    public static ServiceInstallSymbolFields Description;
    public static ServiceInstallSymbolFields Interactive;
    public static ServiceInstallSymbolFields Vital;
}
public enum WixToolset.Data.Symbols.ServiceStartType : Enum {
    public int value__;
    public static ServiceStartType Boot;
    public static ServiceStartType System;
    public static ServiceStartType Auto;
    public static ServiceStartType Demand;
    public static ServiceStartType Disabled;
}
public enum WixToolset.Data.Symbols.ServiceType : Enum {
    public int value__;
    public static ServiceType KernelDriver;
    public static ServiceType SystemDriver;
    public static ServiceType OwnProcess;
    public static ServiceType ShareProcess;
    public static ServiceType InteractiveProcess;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.SFPCatalogSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string SFPCatalog { get; public set; }
    public string Catalog { get; public set; }
    public string Dependency { get; public set; }
    public SFPCatalogSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(SFPCatalogSymbolFields index);
    public string get_SFPCatalog();
    public void set_SFPCatalog(string value);
    public string get_Catalog();
    public void set_Catalog(string value);
    public string get_Dependency();
    public void set_Dependency(string value);
}
public enum WixToolset.Data.Symbols.SFPCatalogSymbolFields : Enum {
    public int value__;
    public static SFPCatalogSymbolFields SFPCatalog;
    public static SFPCatalogSymbolFields Catalog;
    public static SFPCatalogSymbolFields Dependency;
}
public enum WixToolset.Data.Symbols.ShortcutShowType : Enum {
    public int value__;
    public static ShortcutShowType Normal;
    public static ShortcutShowType Maximized;
    public static ShortcutShowType Minimized;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.ShortcutSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DirectoryRef { get; public set; }
    public string Name { get; public set; }
    public string ShortName { get; public set; }
    public string ComponentRef { get; public set; }
    public string Target { get; public set; }
    public string Arguments { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<int> Hotkey { get; public set; }
    public string IconRef { get; public set; }
    public Nullable`1<int> IconIndex { get; public set; }
    public Nullable`1<ShortcutShowType> Show { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string DisplayResourceDll { get; public set; }
    public Nullable`1<int> DisplayResourceId { get; public set; }
    public string DescriptionResourceDll { get; public set; }
    public Nullable`1<int> DescriptionResourceId { get; public set; }
    public ShortcutSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(ShortcutSymbolFields index);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ShortName();
    public void set_ShortName(string value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Arguments();
    public void set_Arguments(string value);
    public string get_Description();
    public void set_Description(string value);
    public Nullable`1<int> get_Hotkey();
    public void set_Hotkey(Nullable`1<int> value);
    public string get_IconRef();
    public void set_IconRef(string value);
    public Nullable`1<int> get_IconIndex();
    public void set_IconIndex(Nullable`1<int> value);
    public Nullable`1<ShortcutShowType> get_Show();
    public void set_Show(Nullable`1<ShortcutShowType> value);
    public string get_WorkingDirectory();
    public void set_WorkingDirectory(string value);
    public string get_DisplayResourceDll();
    public void set_DisplayResourceDll(string value);
    public Nullable`1<int> get_DisplayResourceId();
    public void set_DisplayResourceId(Nullable`1<int> value);
    public string get_DescriptionResourceDll();
    public void set_DescriptionResourceDll(string value);
    public Nullable`1<int> get_DescriptionResourceId();
    public void set_DescriptionResourceId(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.ShortcutSymbolFields : Enum {
    public int value__;
    public static ShortcutSymbolFields DirectoryRef;
    public static ShortcutSymbolFields Name;
    public static ShortcutSymbolFields ShortName;
    public static ShortcutSymbolFields ComponentRef;
    public static ShortcutSymbolFields Target;
    public static ShortcutSymbolFields Arguments;
    public static ShortcutSymbolFields Description;
    public static ShortcutSymbolFields Hotkey;
    public static ShortcutSymbolFields IconRef;
    public static ShortcutSymbolFields IconIndex;
    public static ShortcutSymbolFields Show;
    public static ShortcutSymbolFields WkDir;
    public static ShortcutSymbolFields DisplayResourceDLL;
    public static ShortcutSymbolFields DisplayResourceId;
    public static ShortcutSymbolFields DescriptionResourceDLL;
    public static ShortcutSymbolFields DescriptionResourceId;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.SignatureSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileName { get; public set; }
    public string MinVersion { get; public set; }
    public string MaxVersion { get; public set; }
    public Nullable`1<int> MinSize { get; public set; }
    public Nullable`1<int> MaxSize { get; public set; }
    public Nullable`1<int> MinDate { get; public set; }
    public Nullable`1<int> MaxDate { get; public set; }
    public string Languages { get; public set; }
    public SignatureSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(SignatureSymbolFields index);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_MinVersion();
    public void set_MinVersion(string value);
    public string get_MaxVersion();
    public void set_MaxVersion(string value);
    public Nullable`1<int> get_MinSize();
    public void set_MinSize(Nullable`1<int> value);
    public Nullable`1<int> get_MaxSize();
    public void set_MaxSize(Nullable`1<int> value);
    public Nullable`1<int> get_MinDate();
    public void set_MinDate(Nullable`1<int> value);
    public Nullable`1<int> get_MaxDate();
    public void set_MaxDate(Nullable`1<int> value);
    public string get_Languages();
    public void set_Languages(string value);
}
public enum WixToolset.Data.Symbols.SignatureSymbolFields : Enum {
    public int value__;
    public static SignatureSymbolFields FileName;
    public static SignatureSymbolFields MinVersion;
    public static SignatureSymbolFields MaxVersion;
    public static SignatureSymbolFields MinSize;
    public static SignatureSymbolFields MaxSize;
    public static SignatureSymbolFields MinDate;
    public static SignatureSymbolFields MaxDate;
    public static SignatureSymbolFields Languages;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.SoftwareIdentificationTagSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileRef { get; public set; }
    public string Regid { get; public set; }
    public string TagId { get; public set; }
    public string PersistentId { get; public set; }
    public string Alias { get; public set; }
    public SoftwareIdentificationTagSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(SoftwareIdentificationTagSymbolFields index);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_Regid();
    public void set_Regid(string value);
    public string get_TagId();
    public void set_TagId(string value);
    public string get_PersistentId();
    public void set_PersistentId(string value);
    public string get_Alias();
    public void set_Alias(string value);
}
public enum WixToolset.Data.Symbols.SoftwareIdentificationTagSymbolFields : Enum {
    public int value__;
    public static SoftwareIdentificationTagSymbolFields FileRef;
    public static SoftwareIdentificationTagSymbolFields Regid;
    public static SoftwareIdentificationTagSymbolFields UniqueId;
    public static SoftwareIdentificationTagSymbolFields PersistentId;
    public static SoftwareIdentificationTagSymbolFields Alias;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.SummaryInformationSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public SummaryInformationType PropertyId { get; public set; }
    public string Value { get; public set; }
    public SummaryInformationSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(SummaryInformationSymbolFields index);
    public SummaryInformationType get_PropertyId();
    public void set_PropertyId(SummaryInformationType value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.SummaryInformationSymbolFields : Enum {
    public int value__;
    public static SummaryInformationSymbolFields PropertyId;
    public static SummaryInformationSymbolFields Value;
}
public enum WixToolset.Data.Symbols.SummaryInformationType : Enum {
    public int value__;
    public static SummaryInformationType Codepage;
    public static SummaryInformationType Title;
    public static SummaryInformationType Subject;
    public static SummaryInformationType PatchPackageName;
    public static SummaryInformationType Author;
    public static SummaryInformationType Keywords;
    public static SummaryInformationType Comments;
    public static SummaryInformationType PlatformAndLanguage;
    public static SummaryInformationType PatchProductCodes;
    public static SummaryInformationType TransformPlatformAndLanguageOrStorageNames;
    public static SummaryInformationType TransformNames;
    public static SummaryInformationType PackageCode;
    public static SummaryInformationType PatchCode;
    public static SummaryInformationType TransformProductCodes;
    public static SummaryInformationType Reserved11;
    public static SummaryInformationType Created;
    public static SummaryInformationType LastSaved;
    public static SummaryInformationType WindowsInstallerVersion;
    public static SummaryInformationType Reserved14;
    public static SummaryInformationType WordCount;
    public static SummaryInformationType PatchInstallerRequirement;
    public static SummaryInformationType Reserved16;
    public static SummaryInformationType TransformValidationFlags;
    public static SummaryInformationType CreatingApplication;
    public static SummaryInformationType Security;
}
public enum WixToolset.Data.Symbols.SymbolPathType : Enum {
    public int value__;
    public static SymbolPathType File;
    public static SymbolPathType Component;
    public static SymbolPathType Directory;
    public static SymbolPathType Media;
    public static SymbolPathType Product;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.TargetFilesOptionalDataSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Target { get; public set; }
    public string FTK { get; public set; }
    public string SymbolPaths { get; public set; }
    public string IgnoreOffsets { get; public set; }
    public string IgnoreLengths { get; public set; }
    public string RetainOffsets { get; public set; }
    public TargetFilesOptionalDataSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(TargetFilesOptionalDataSymbolFields index);
    public string get_Target();
    public void set_Target(string value);
    public string get_FTK();
    public void set_FTK(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
    public string get_IgnoreOffsets();
    public void set_IgnoreOffsets(string value);
    public string get_IgnoreLengths();
    public void set_IgnoreLengths(string value);
    public string get_RetainOffsets();
    public void set_RetainOffsets(string value);
}
public enum WixToolset.Data.Symbols.TargetFilesOptionalDataSymbolFields : Enum {
    public int value__;
    public static TargetFilesOptionalDataSymbolFields Target;
    public static TargetFilesOptionalDataSymbolFields FTK;
    public static TargetFilesOptionalDataSymbolFields SymbolPaths;
    public static TargetFilesOptionalDataSymbolFields IgnoreOffsets;
    public static TargetFilesOptionalDataSymbolFields IgnoreLengths;
    public static TargetFilesOptionalDataSymbolFields RetainOffsets;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.TargetImagesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Target { get; public set; }
    public string MsiPath { get; public set; }
    public string SymbolPaths { get; public set; }
    public string Upgraded { get; public set; }
    public int Order { get; public set; }
    public string ProductValidateFlags { get; public set; }
    public bool IgnoreMissingSrcFiles { get; public set; }
    public TargetImagesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(TargetImagesSymbolFields index);
    public string get_Target();
    public void set_Target(string value);
    public string get_MsiPath();
    public void set_MsiPath(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
    public string get_Upgraded();
    public void set_Upgraded(string value);
    public int get_Order();
    public void set_Order(int value);
    public string get_ProductValidateFlags();
    public void set_ProductValidateFlags(string value);
    public bool get_IgnoreMissingSrcFiles();
    public void set_IgnoreMissingSrcFiles(bool value);
}
public enum WixToolset.Data.Symbols.TargetImagesSymbolFields : Enum {
    public int value__;
    public static TargetImagesSymbolFields Target;
    public static TargetImagesSymbolFields MsiPath;
    public static TargetImagesSymbolFields SymbolPaths;
    public static TargetImagesSymbolFields Upgraded;
    public static TargetImagesSymbolFields Order;
    public static TargetImagesSymbolFields ProductValidateFlags;
    public static TargetImagesSymbolFields IgnoreMissingSrcFiles;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.TextStyleSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FaceName { get; public set; }
    public string LocalizedSize { get; public set; }
    public int Size { get; public set; }
    public Nullable`1<int> Red { get; public set; }
    public Nullable`1<int> Green { get; public set; }
    public Nullable`1<int> Blue { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Strike { get; public set; }
    public bool Underline { get; public set; }
    public TextStyleSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(TextStyleSymbolFields index);
    public string get_FaceName();
    public void set_FaceName(string value);
    public string get_LocalizedSize();
    public void set_LocalizedSize(string value);
    public int get_Size();
    public void set_Size(int value);
    public Nullable`1<int> get_Red();
    public void set_Red(Nullable`1<int> value);
    public Nullable`1<int> get_Green();
    public void set_Green(Nullable`1<int> value);
    public Nullable`1<int> get_Blue();
    public void set_Blue(Nullable`1<int> value);
    public bool get_Bold();
    public void set_Bold(bool value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public bool get_Strike();
    public void set_Strike(bool value);
    public bool get_Underline();
    public void set_Underline(bool value);
}
public enum WixToolset.Data.Symbols.TextStyleSymbolFields : Enum {
    public int value__;
    public static TextStyleSymbolFields FaceName;
    public static TextStyleSymbolFields Size;
    public static TextStyleSymbolFields Red;
    public static TextStyleSymbolFields Green;
    public static TextStyleSymbolFields Blue;
    public static TextStyleSymbolFields Bold;
    public static TextStyleSymbolFields Italic;
    public static TextStyleSymbolFields Strike;
    public static TextStyleSymbolFields Underline;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.TransformFlags : Enum {
    public int value__;
    public static TransformFlags ErrorAddExistingRow;
    public static TransformFlags ErrorDeleteMissingRow;
    public static TransformFlags ErrorAddExistingTable;
    public static TransformFlags ErrorDeleteMissingTable;
    public static TransformFlags ErrorUpdateMissingRow;
    public static TransformFlags ErrorChangeCodePage;
    public static TransformFlags ValidateLanguage;
    public static TransformFlags ValidateProduct;
    public static TransformFlags ValidateMajorVersion;
    public static TransformFlags ValidateMinorVersion;
    public static TransformFlags ValidateUpdateVersion;
    public static TransformFlags ValidateNewLessBaseVersion;
    public static TransformFlags ValidateNewLessEqualBaseVersion;
    public static TransformFlags ValidateNewEqualBaseVersion;
    public static TransformFlags ValidateNewGreaterEqualBaseVersion;
    public static TransformFlags ValidateNewGreaterBaseVersion;
    public static TransformFlags ValidateUpgradeCode;
    public static TransformFlags ProductVersionMask;
    public static TransformFlags ProductVersionOperatorMask;
    public static TransformFlags InstanceTransformDefault;
    public static TransformFlags LanguageTransformDefault;
    public static TransformFlags PatchTransformDefault;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.TypeLibSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string LibId { get; public set; }
    public int Language { get; public set; }
    public string ComponentRef { get; public set; }
    public Nullable`1<int> Version { get; public set; }
    public string Description { get; public set; }
    public string DirectoryRef { get; public set; }
    public string FeatureRef { get; public set; }
    public Nullable`1<int> Cost { get; public set; }
    public TypeLibSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(TypeLibSymbolFields index);
    public string get_LibId();
    public void set_LibId(string value);
    public int get_Language();
    public void set_Language(int value);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
    public Nullable`1<int> get_Version();
    public void set_Version(Nullable`1<int> value);
    public string get_Description();
    public void set_Description(string value);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
    public Nullable`1<int> get_Cost();
    public void set_Cost(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.TypeLibSymbolFields : Enum {
    public int value__;
    public static TypeLibSymbolFields LibId;
    public static TypeLibSymbolFields Language;
    public static TypeLibSymbolFields ComponentRef;
    public static TypeLibSymbolFields Version;
    public static TypeLibSymbolFields Description;
    public static TypeLibSymbolFields DirectoryRef;
    public static TypeLibSymbolFields FeatureRef;
    public static TypeLibSymbolFields Cost;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.UITextSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Text { get; public set; }
    public UITextSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(UITextSymbolFields index);
    public string get_Text();
    public void set_Text(string value);
}
public enum WixToolset.Data.Symbols.UITextSymbolFields : Enum {
    public int value__;
    public static UITextSymbolFields Text;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.UpgradedFilesOptionalDataSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Upgraded { get; public set; }
    public string FTK { get; public set; }
    public string SymbolPaths { get; public set; }
    public Nullable`1<bool> AllowIgnoreOnPatchError { get; public set; }
    public Nullable`1<bool> IncludeWholeFile { get; public set; }
    public UpgradedFilesOptionalDataSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(UpgradedFilesOptionalDataSymbolFields index);
    public string get_Upgraded();
    public void set_Upgraded(string value);
    public string get_FTK();
    public void set_FTK(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
    public Nullable`1<bool> get_AllowIgnoreOnPatchError();
    public void set_AllowIgnoreOnPatchError(Nullable`1<bool> value);
    public Nullable`1<bool> get_IncludeWholeFile();
    public void set_IncludeWholeFile(Nullable`1<bool> value);
}
public enum WixToolset.Data.Symbols.UpgradedFilesOptionalDataSymbolFields : Enum {
    public int value__;
    public static UpgradedFilesOptionalDataSymbolFields Upgraded;
    public static UpgradedFilesOptionalDataSymbolFields FTK;
    public static UpgradedFilesOptionalDataSymbolFields SymbolPaths;
    public static UpgradedFilesOptionalDataSymbolFields AllowIgnoreOnPatchError;
    public static UpgradedFilesOptionalDataSymbolFields IncludeWholeFile;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.UpgradedFilesToIgnoreSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Upgraded { get; public set; }
    public string FTK { get; public set; }
    public UpgradedFilesToIgnoreSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(UpgradedFilesToIgnoreSymbolFields index);
    public string get_Upgraded();
    public void set_Upgraded(string value);
    public string get_FTK();
    public void set_FTK(string value);
}
public enum WixToolset.Data.Symbols.UpgradedFilesToIgnoreSymbolFields : Enum {
    public int value__;
    public static UpgradedFilesToIgnoreSymbolFields Upgraded;
    public static UpgradedFilesToIgnoreSymbolFields FTK;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.UpgradedImagesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Upgraded { get; public set; }
    public string MsiPath { get; public set; }
    public string PatchMsiPath { get; public set; }
    public string SymbolPaths { get; public set; }
    public string Family { get; public set; }
    public UpgradedImagesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(UpgradedImagesSymbolFields index);
    public string get_Upgraded();
    public void set_Upgraded(string value);
    public string get_MsiPath();
    public void set_MsiPath(string value);
    public string get_PatchMsiPath();
    public void set_PatchMsiPath(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
    public string get_Family();
    public void set_Family(string value);
}
public enum WixToolset.Data.Symbols.UpgradedImagesSymbolFields : Enum {
    public int value__;
    public static UpgradedImagesSymbolFields Upgraded;
    public static UpgradedImagesSymbolFields MsiPath;
    public static UpgradedImagesSymbolFields PatchMsiPath;
    public static UpgradedImagesSymbolFields SymbolPaths;
    public static UpgradedImagesSymbolFields Family;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.UpgradeSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string UpgradeCode { get; public set; }
    public string VersionMin { get; public set; }
    public string VersionMax { get; public set; }
    public string Language { get; public set; }
    public bool ExcludeLanguages { get; public set; }
    public bool IgnoreRemoveFailures { get; public set; }
    public bool MigrateFeatures { get; public set; }
    public bool OnlyDetect { get; public set; }
    public bool VersionMaxInclusive { get; public set; }
    public bool VersionMinInclusive { get; public set; }
    public string Remove { get; public set; }
    public string ActionProperty { get; public set; }
    public UpgradeSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(UpgradeSymbolFields index);
    public string get_UpgradeCode();
    public void set_UpgradeCode(string value);
    public string get_VersionMin();
    public void set_VersionMin(string value);
    public string get_VersionMax();
    public void set_VersionMax(string value);
    public string get_Language();
    public void set_Language(string value);
    public bool get_ExcludeLanguages();
    public void set_ExcludeLanguages(bool value);
    public bool get_IgnoreRemoveFailures();
    public void set_IgnoreRemoveFailures(bool value);
    public bool get_MigrateFeatures();
    public void set_MigrateFeatures(bool value);
    public bool get_OnlyDetect();
    public void set_OnlyDetect(bool value);
    public bool get_VersionMaxInclusive();
    public void set_VersionMaxInclusive(bool value);
    public bool get_VersionMinInclusive();
    public void set_VersionMinInclusive(bool value);
    public string get_Remove();
    public void set_Remove(string value);
    public string get_ActionProperty();
    public void set_ActionProperty(string value);
}
public enum WixToolset.Data.Symbols.UpgradeSymbolFields : Enum {
    public int value__;
    public static UpgradeSymbolFields UpgradeCode;
    public static UpgradeSymbolFields VersionMin;
    public static UpgradeSymbolFields VersionMax;
    public static UpgradeSymbolFields Language;
    public static UpgradeSymbolFields ExcludeLanguages;
    public static UpgradeSymbolFields IgnoreRemoveFailures;
    public static UpgradeSymbolFields MigrateFeatures;
    public static UpgradeSymbolFields OnlyDetect;
    public static UpgradeSymbolFields VersionMaxInclusive;
    public static UpgradeSymbolFields VersionMinInclusive;
    public static UpgradeSymbolFields Remove;
    public static UpgradeSymbolFields ActionProperty;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.VerbSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ExtensionRef { get; public set; }
    public string Verb { get; public set; }
    public Nullable`1<int> Sequence { get; public set; }
    public string Command { get; public set; }
    public string Argument { get; public set; }
    public VerbSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(VerbSymbolFields index);
    public string get_ExtensionRef();
    public void set_ExtensionRef(string value);
    public string get_Verb();
    public void set_Verb(string value);
    public Nullable`1<int> get_Sequence();
    public void set_Sequence(Nullable`1<int> value);
    public string get_Command();
    public void set_Command(string value);
    public string get_Argument();
    public void set_Argument(string value);
}
public enum WixToolset.Data.Symbols.VerbSymbolFields : Enum {
    public int value__;
    public static VerbSymbolFields ExtensionRef;
    public static VerbSymbolFields Verb;
    public static VerbSymbolFields Sequence;
    public static VerbSymbolFields Command;
    public static VerbSymbolFields Argument;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixActionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public SequenceTable SequenceTable { get; public set; }
    public string Action { get; public set; }
    public string Condition { get; public set; }
    public Nullable`1<int> Sequence { get; public set; }
    public string Before { get; public set; }
    public string After { get; public set; }
    public bool Overridable { get; public set; }
    public WixActionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixActionSymbolFields index);
    public SequenceTable get_SequenceTable();
    public void set_SequenceTable(SequenceTable value);
    public string get_Action();
    public void set_Action(string value);
    public string get_Condition();
    public void set_Condition(string value);
    public Nullable`1<int> get_Sequence();
    public void set_Sequence(Nullable`1<int> value);
    public string get_Before();
    public void set_Before(string value);
    public string get_After();
    public void set_After(string value);
    public bool get_Overridable();
    public void set_Overridable(bool value);
}
public enum WixToolset.Data.Symbols.WixActionSymbolFields : Enum {
    public int value__;
    public static WixActionSymbolFields SequenceTable;
    public static WixActionSymbolFields Action;
    public static WixActionSymbolFields Condition;
    public static WixActionSymbolFields Sequence;
    public static WixActionSymbolFields Before;
    public static WixActionSymbolFields After;
    public static WixActionSymbolFields Overridable;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixApprovedExeForElevationAttributes : Enum {
    public int value__;
    public static WixApprovedExeForElevationAttributes None;
    public static WixApprovedExeForElevationAttributes Win64;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixApprovedExeForElevationSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Key { get; public set; }
    public string ValueName { get; public set; }
    public WixApprovedExeForElevationAttributes Attributes { get; public set; }
    public bool Win64 { get; public set; }
    public WixApprovedExeForElevationSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixApprovedExeForElevationSymbolFields index);
    public string get_Key();
    public void set_Key(string value);
    public string get_ValueName();
    public void set_ValueName(string value);
    public WixApprovedExeForElevationAttributes get_Attributes();
    public void set_Attributes(WixApprovedExeForElevationAttributes value);
    public bool get_Win64();
    public void set_Win64(bool value);
}
public enum WixToolset.Data.Symbols.WixApprovedExeForElevationSymbolFields : Enum {
    public int value__;
    public static WixApprovedExeForElevationSymbolFields Key;
    public static WixApprovedExeForElevationSymbolFields ValueName;
    public static WixApprovedExeForElevationSymbolFields Attributes;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBindUpdatedFilesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileRef { get; public set; }
    public WixBindUpdatedFilesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBindUpdatedFilesSymbolFields index);
    public string get_FileRef();
    public void set_FileRef(string value);
}
public enum WixToolset.Data.Symbols.WixBindUpdatedFilesSymbolFields : Enum {
    public int value__;
    public static WixBindUpdatedFilesSymbolFields FileRef;
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute]
public class WixToolset.Data.Symbols.WixBootstrapperApplicationDllSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBootstrapperApplicationDpiAwarenessType DpiAwareness { get; public set; }
    public WixBootstrapperApplicationDllSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBootstrapperApplicationDllSymbolFields index);
    public WixBootstrapperApplicationDpiAwarenessType get_DpiAwareness();
    public void set_DpiAwareness(WixBootstrapperApplicationDpiAwarenessType value);
}
public enum WixToolset.Data.Symbols.WixBootstrapperApplicationDllSymbolFields : Enum {
    public int value__;
    public static WixBootstrapperApplicationDllSymbolFields DpiAwareness;
}
[ObsoleteAttribute]
public enum WixToolset.Data.Symbols.WixBootstrapperApplicationDpiAwarenessType : Enum {
    public int value__;
    public static WixBootstrapperApplicationDpiAwarenessType Unaware;
    public static WixBootstrapperApplicationDpiAwarenessType System;
    public static WixBootstrapperApplicationDpiAwarenessType PerMonitor;
    public static WixBootstrapperApplicationDpiAwarenessType PerMonitorV2;
    public static WixBootstrapperApplicationDpiAwarenessType GdiScaled;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBootstrapperApplicationSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ExePayloadRef { get; public set; }
    public Nullable`1<bool> Secondary { get; public set; }
    public WixBootstrapperApplicationSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBootstrapperApplicationSymbolFields index);
    public string get_ExePayloadRef();
    public void set_ExePayloadRef(string value);
    public Nullable`1<bool> get_Secondary();
    public void set_Secondary(Nullable`1<bool> value);
}
public enum WixToolset.Data.Symbols.WixBootstrapperApplicationSymbolFields : Enum {
    public int value__;
    public static WixBootstrapperApplicationSymbolFields ExePayloadRef;
    public static WixBootstrapperApplicationSymbolFields Secondary;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBootstrapperExtensionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PayloadRef { get; public set; }
    public WixBootstrapperExtensionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBootstrapperExtensionSymbolFields index);
    public string get_PayloadRef();
    public void set_PayloadRef(string value);
}
public enum WixToolset.Data.Symbols.WixBootstrapperExtensionSymbolFields : Enum {
    public int value__;
    public static WixBootstrapperExtensionSymbolFields PayloadRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBuildInfoSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string WixVersion { get; public set; }
    public string WixOutputFile { get; public set; }
    public string WixProjectFile { get; public set; }
    public string WixPdbFile { get; public set; }
    public WixBuildInfoSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBuildInfoSymbolFields index);
    public string get_WixVersion();
    public void set_WixVersion(string value);
    public string get_WixOutputFile();
    public void set_WixOutputFile(string value);
    public string get_WixProjectFile();
    public void set_WixProjectFile(string value);
    public string get_WixPdbFile();
    public void set_WixPdbFile(string value);
}
public enum WixToolset.Data.Symbols.WixBuildInfoSymbolFields : Enum {
    public int value__;
    public static WixBuildInfoSymbolFields WixVersion;
    public static WixBuildInfoSymbolFields WixOutputFile;
    public static WixBuildInfoSymbolFields WixProjectFile;
    public static WixBuildInfoSymbolFields WixPdbFile;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleAttributes : Enum {
    public int value__;
    public static WixBundleAttributes None;
    public static WixBundleAttributes DisableRemove;
    public static WixBundleAttributes PerMachine;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleBundlePackageAttributes : Enum {
    public int value__;
    public static WixBundleBundlePackageAttributes None;
    public static WixBundleBundlePackageAttributes SupportsBurnProtocol;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleBundlePackagePayloadSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public BundlePackagePayloadGenerationType PayloadGeneration { get; public set; }
    public WixBundleBundlePackagePayloadSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleBundlePackagePayloadSymbolFields index);
    public BundlePackagePayloadGenerationType get_PayloadGeneration();
    public void set_PayloadGeneration(BundlePackagePayloadGenerationType value);
}
public enum WixToolset.Data.Symbols.WixBundleBundlePackagePayloadSymbolFields : Enum {
    public int value__;
    public static WixBundleBundlePackagePayloadSymbolFields PayloadGeneration;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleBundlePackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleBundlePackageAttributes Attributes { get; public set; }
    public string BundleId { get; public set; }
    public string EngineVersion { get; public set; }
    public string Version { get; public set; }
    public string InstallCommand { get; public set; }
    public string RepairCommand { get; public set; }
    public string UninstallCommand { get; public set; }
    public bool SupportsBurnProtocol { get; public set; }
    public WixBundleBundlePackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleBundlePackageSymbolFields index);
    public WixBundleBundlePackageAttributes get_Attributes();
    public void set_Attributes(WixBundleBundlePackageAttributes value);
    public string get_BundleId();
    public void set_BundleId(string value);
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_InstallCommand();
    public void set_InstallCommand(string value);
    public string get_RepairCommand();
    public void set_RepairCommand(string value);
    public string get_UninstallCommand();
    public void set_UninstallCommand(string value);
    public bool get_SupportsBurnProtocol();
    public void set_SupportsBurnProtocol(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleBundlePackageSymbolFields : Enum {
    public int value__;
    public static WixBundleBundlePackageSymbolFields Attributes;
    public static WixBundleBundlePackageSymbolFields BundleId;
    public static WixBundleBundlePackageSymbolFields EngineVersion;
    public static WixBundleBundlePackageSymbolFields Version;
    public static WixBundleBundlePackageSymbolFields InstallCommand;
    public static WixBundleBundlePackageSymbolFields RepairCommand;
    public static WixBundleBundlePackageSymbolFields UninstallCommand;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleContainerSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Name { get; public set; }
    public ContainerType Type { get; public set; }
    public string DownloadUrl { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public string Hash { get; public set; }
    public Nullable`1<int> AttachedContainerIndex { get; public set; }
    public string WorkingPath { get; public set; }
    public WixBundleContainerSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleContainerSymbolFields index);
    public string get_Name();
    public void set_Name(string value);
    public ContainerType get_Type();
    public void set_Type(ContainerType value);
    public string get_DownloadUrl();
    public void set_DownloadUrl(string value);
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    public string get_Hash();
    public void set_Hash(string value);
    public Nullable`1<int> get_AttachedContainerIndex();
    public void set_AttachedContainerIndex(Nullable`1<int> value);
    public string get_WorkingPath();
    public void set_WorkingPath(string value);
}
public enum WixToolset.Data.Symbols.WixBundleContainerSymbolFields : Enum {
    public int value__;
    public static WixBundleContainerSymbolFields Name;
    public static WixBundleContainerSymbolFields Type;
    public static WixBundleContainerSymbolFields DownloadUrl;
    public static WixBundleContainerSymbolFields Size;
    public static WixBundleContainerSymbolFields Hash;
    public static WixBundleContainerSymbolFields AttachedContainerIndex;
    public static WixBundleContainerSymbolFields WorkingPath;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleCustomDataAttributeSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string CustomDataRef { get; public set; }
    public string Name { get; public set; }
    public WixBundleCustomDataAttributeSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleCustomDataAttributeSymbolFields index);
    public string get_CustomDataRef();
    public void set_CustomDataRef(string value);
    public string get_Name();
    public void set_Name(string value);
}
public enum WixToolset.Data.Symbols.WixBundleCustomDataAttributeSymbolFields : Enum {
    public int value__;
    public static WixBundleCustomDataAttributeSymbolFields CustomDataRef;
    public static WixBundleCustomDataAttributeSymbolFields Name;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleCustomDataCellSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string CustomDataRef { get; public set; }
    public string AttributeRef { get; public set; }
    public string ElementId { get; public set; }
    public string Value { get; public set; }
    public WixBundleCustomDataCellSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleCustomDataCellSymbolFields index);
    public string get_CustomDataRef();
    public void set_CustomDataRef(string value);
    public string get_AttributeRef();
    public void set_AttributeRef(string value);
    public string get_ElementId();
    public void set_ElementId(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum WixToolset.Data.Symbols.WixBundleCustomDataCellSymbolFields : Enum {
    public int value__;
    public static WixBundleCustomDataCellSymbolFields CustomDataRef;
    public static WixBundleCustomDataCellSymbolFields AttributeRef;
    public static WixBundleCustomDataCellSymbolFields ElementId;
    public static WixBundleCustomDataCellSymbolFields Value;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleCustomDataSymbol : IntermediateSymbol {
    public static char AttributeNamesSeparator;
    public IntermediateField Item { get; }
    public string AttributeNames { get; public set; }
    public WixBundleCustomDataType Type { get; public set; }
    public string BootstrapperExtensionRef { get; public set; }
    public String[] AttributeNamesSeparated { get; }
    public WixBundleCustomDataSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleCustomDataSymbolFields index);
    public string get_AttributeNames();
    public void set_AttributeNames(string value);
    public WixBundleCustomDataType get_Type();
    public void set_Type(WixBundleCustomDataType value);
    public string get_BootstrapperExtensionRef();
    public void set_BootstrapperExtensionRef(string value);
    public String[] get_AttributeNamesSeparated();
}
public enum WixToolset.Data.Symbols.WixBundleCustomDataSymbolFields : Enum {
    public int value__;
    public static WixBundleCustomDataSymbolFields AttributeNames;
    public static WixBundleCustomDataSymbolFields Type;
    public static WixBundleCustomDataSymbolFields BootstrapperExtensionRef;
}
public enum WixToolset.Data.Symbols.WixBundleCustomDataType : Enum {
    public int value__;
    public static WixBundleCustomDataType Unknown;
    public static WixBundleCustomDataType BootstrapperApplication;
    public static WixBundleCustomDataType BootstrapperExtension;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleExePackageAttributes : Enum {
    public int value__;
    public static WixBundleExePackageAttributes None;
    public static WixBundleExePackageAttributes Bundle;
    public static WixBundleExePackageAttributes ArpWin64;
    public static WixBundleExePackageAttributes ArpUseUninstallString;
}
public enum WixToolset.Data.Symbols.WixBundleExePackageDetectionType : Enum {
    public int value__;
    public static WixBundleExePackageDetectionType None;
    public static WixBundleExePackageDetectionType Condition;
    public static WixBundleExePackageDetectionType Arp;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleExePackagePayloadSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleExePackagePayloadSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleExePackagePayloadSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixBundleExePackagePayloadSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleExePackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleExePackageAttributes Attributes { get; public set; }
    public string DetectCondition { get; public set; }
    public string InstallCommand { get; public set; }
    public string RepairCommand { get; public set; }
    public string UninstallCommand { get; public set; }
    public string ExeProtocol { get; public set; }
    public WixBundleExePackageDetectionType DetectionType { get; public set; }
    public string ArpId { get; public set; }
    public string ArpDisplayVersion { get; public set; }
    public bool IsBundle { get; public set; }
    public bool ArpWin64 { get; public set; }
    public bool ArpUseUninstallString { get; public set; }
    public bool Repairable { get; }
    public bool Uninstallable { get; }
    public WixBundleExePackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleExePackageSymbolFields index);
    public WixBundleExePackageAttributes get_Attributes();
    public void set_Attributes(WixBundleExePackageAttributes value);
    public string get_DetectCondition();
    public void set_DetectCondition(string value);
    public string get_InstallCommand();
    public void set_InstallCommand(string value);
    public string get_RepairCommand();
    public void set_RepairCommand(string value);
    public string get_UninstallCommand();
    public void set_UninstallCommand(string value);
    public string get_ExeProtocol();
    public void set_ExeProtocol(string value);
    public WixBundleExePackageDetectionType get_DetectionType();
    public void set_DetectionType(WixBundleExePackageDetectionType value);
    public string get_ArpId();
    public void set_ArpId(string value);
    public string get_ArpDisplayVersion();
    public void set_ArpDisplayVersion(string value);
    public bool get_IsBundle();
    public void set_IsBundle(bool value);
    public bool get_ArpWin64();
    public void set_ArpWin64(bool value);
    public bool get_ArpUseUninstallString();
    public void set_ArpUseUninstallString(bool value);
    public bool get_Repairable();
    public bool get_Uninstallable();
}
public enum WixToolset.Data.Symbols.WixBundleExePackageSymbolFields : Enum {
    public int value__;
    public static WixBundleExePackageSymbolFields Attributes;
    public static WixBundleExePackageSymbolFields DetectCondition;
    public static WixBundleExePackageSymbolFields InstallCommand;
    public static WixBundleExePackageSymbolFields RepairCommand;
    public static WixBundleExePackageSymbolFields UninstallCommand;
    public static WixBundleExePackageSymbolFields ExeProtocol;
    public static WixBundleExePackageSymbolFields DetectionType;
    public static WixBundleExePackageSymbolFields ArpId;
    public static WixBundleExePackageSymbolFields ArpDisplayVersion;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleHarvestedBundlePackageAttributes : Enum {
    public int value__;
    public static WixBundleHarvestedBundlePackageAttributes None;
    public static WixBundleHarvestedBundlePackageAttributes PerMachine;
    public static WixBundleHarvestedBundlePackageAttributes Win64;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleHarvestedBundlePackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleHarvestedBundlePackageAttributes Attributes { get; public set; }
    public string BundleId { get; public set; }
    public string EngineVersion { get; public set; }
    public string ManifestNamespace { get; public set; }
    public int ProtocolVersion { get; public set; }
    public string Version { get; public set; }
    public string DisplayName { get; public set; }
    public long InstallSize { get; public set; }
    public bool PerMachine { get; public set; }
    public bool Win64 { get; public set; }
    public WixBundleHarvestedBundlePackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleHarvestedBundlePackageSymbolFields index);
    public WixBundleHarvestedBundlePackageAttributes get_Attributes();
    public void set_Attributes(WixBundleHarvestedBundlePackageAttributes value);
    public string get_BundleId();
    public void set_BundleId(string value);
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    public string get_ManifestNamespace();
    public void set_ManifestNamespace(string value);
    public int get_ProtocolVersion();
    public void set_ProtocolVersion(int value);
    public string get_Version();
    public void set_Version(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public long get_InstallSize();
    public void set_InstallSize(long value);
    public bool get_PerMachine();
    public void set_PerMachine(bool value);
    public bool get_Win64();
    public void set_Win64(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleHarvestedBundlePackageSymbolFields : Enum {
    public int value__;
    public static WixBundleHarvestedBundlePackageSymbolFields Attributes;
    public static WixBundleHarvestedBundlePackageSymbolFields BundleId;
    public static WixBundleHarvestedBundlePackageSymbolFields EngineVersion;
    public static WixBundleHarvestedBundlePackageSymbolFields ManifestNamespace;
    public static WixBundleHarvestedBundlePackageSymbolFields ProtocolVersion;
    public static WixBundleHarvestedBundlePackageSymbolFields Version;
    public static WixBundleHarvestedBundlePackageSymbolFields DisplayName;
    public static WixBundleHarvestedBundlePackageSymbolFields InstallSize;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleHarvestedDependencyProviderAttributes : Enum {
    public int value__;
    public static WixBundleHarvestedDependencyProviderAttributes None;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleHarvestedDependencyProviderSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackagePayloadRef { get; public set; }
    public WixBundleHarvestedDependencyProviderAttributes Attributes { get; public set; }
    public string ProviderKey { get; public set; }
    public string Version { get; public set; }
    public string DisplayName { get; public set; }
    public int ProviderAttributes { get; public set; }
    public WixBundleHarvestedDependencyProviderSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleHarvestedDependencyProviderSymbolFields index);
    public string get_PackagePayloadRef();
    public void set_PackagePayloadRef(string value);
    public WixBundleHarvestedDependencyProviderAttributes get_Attributes();
    public void set_Attributes(WixBundleHarvestedDependencyProviderAttributes value);
    public string get_ProviderKey();
    public void set_ProviderKey(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public int get_ProviderAttributes();
    public void set_ProviderAttributes(int value);
}
public enum WixToolset.Data.Symbols.WixBundleHarvestedDependencyProviderSymbolFields : Enum {
    public int value__;
    public static WixBundleHarvestedDependencyProviderSymbolFields PackagePayloadRef;
    public static WixBundleHarvestedDependencyProviderSymbolFields Attributes;
    public static WixBundleHarvestedDependencyProviderSymbolFields ProviderKey;
    public static WixBundleHarvestedDependencyProviderSymbolFields Version;
    public static WixBundleHarvestedDependencyProviderSymbolFields DisplayName;
    public static WixBundleHarvestedDependencyProviderSymbolFields ProviderAttributes;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleHarvestedMsiPackageAttributes : Enum {
    public int value__;
    public static WixBundleHarvestedMsiPackageAttributes None;
    public static WixBundleHarvestedMsiPackageAttributes PerMachine;
    public static WixBundleHarvestedMsiPackageAttributes Win64;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleHarvestedMsiPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleHarvestedMsiPackageAttributes Attributes { get; public set; }
    public string ProductName { get; public set; }
    public string ArpComments { get; public set; }
    public string AllUsers { get; public set; }
    public string MsiFastInstall { get; public set; }
    public string ArpSystemComponent { get; public set; }
    public string ProductCode { get; public set; }
    public string UpgradeCode { get; public set; }
    public string Manufacturer { get; public set; }
    public string ProductLanguage { get; public set; }
    public string ProductVersion { get; public set; }
    public long InstallSize { get; public set; }
    public bool PerMachine { get; public set; }
    public bool Win64 { get; public set; }
    public WixBundleHarvestedMsiPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleHarvestedMsiPackageSymbolFields index);
    public WixBundleHarvestedMsiPackageAttributes get_Attributes();
    public void set_Attributes(WixBundleHarvestedMsiPackageAttributes value);
    public string get_ProductName();
    public void set_ProductName(string value);
    public string get_ArpComments();
    public void set_ArpComments(string value);
    public string get_AllUsers();
    public void set_AllUsers(string value);
    public string get_MsiFastInstall();
    public void set_MsiFastInstall(string value);
    public string get_ArpSystemComponent();
    public void set_ArpSystemComponent(string value);
    public string get_ProductCode();
    public void set_ProductCode(string value);
    public string get_UpgradeCode();
    public void set_UpgradeCode(string value);
    public string get_Manufacturer();
    public void set_Manufacturer(string value);
    public string get_ProductLanguage();
    public void set_ProductLanguage(string value);
    public string get_ProductVersion();
    public void set_ProductVersion(string value);
    public long get_InstallSize();
    public void set_InstallSize(long value);
    public bool get_PerMachine();
    public void set_PerMachine(bool value);
    public bool get_Win64();
    public void set_Win64(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleHarvestedMsiPackageSymbolFields : Enum {
    public int value__;
    public static WixBundleHarvestedMsiPackageSymbolFields Attributes;
    public static WixBundleHarvestedMsiPackageSymbolFields ProductName;
    public static WixBundleHarvestedMsiPackageSymbolFields ArpComments;
    public static WixBundleHarvestedMsiPackageSymbolFields AllUsers;
    public static WixBundleHarvestedMsiPackageSymbolFields MsiFastInstall;
    public static WixBundleHarvestedMsiPackageSymbolFields ArpSystemComponent;
    public static WixBundleHarvestedMsiPackageSymbolFields ProductCode;
    public static WixBundleHarvestedMsiPackageSymbolFields UpgradeCode;
    public static WixBundleHarvestedMsiPackageSymbolFields Manufacturer;
    public static WixBundleHarvestedMsiPackageSymbolFields ProductLanguage;
    public static WixBundleHarvestedMsiPackageSymbolFields ProductVersion;
    public static WixBundleHarvestedMsiPackageSymbolFields InstallSize;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleHarvestedMspPackageAttributes : Enum {
    public int value__;
    public static WixBundleHarvestedMspPackageAttributes None;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleHarvestedMspPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleHarvestedMspPackageAttributes Attributes { get; public set; }
    public string PatchCode { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string ManufacturerName { get; public set; }
    public string PatchXml { get; public set; }
    public WixBundleHarvestedMspPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleHarvestedMspPackageSymbolFields index);
    public WixBundleHarvestedMspPackageAttributes get_Attributes();
    public void set_Attributes(WixBundleHarvestedMspPackageAttributes value);
    public string get_PatchCode();
    public void set_PatchCode(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_ManufacturerName();
    public void set_ManufacturerName(string value);
    public string get_PatchXml();
    public void set_PatchXml(string value);
}
public enum WixToolset.Data.Symbols.WixBundleHarvestedMspPackageSymbolFields : Enum {
    public int value__;
    public static WixBundleHarvestedMspPackageSymbolFields Attributes;
    public static WixBundleHarvestedMspPackageSymbolFields PatchCode;
    public static WixBundleHarvestedMspPackageSymbolFields DisplayName;
    public static WixBundleHarvestedMspPackageSymbolFields Description;
    public static WixBundleHarvestedMspPackageSymbolFields ManufacturerName;
    public static WixBundleHarvestedMspPackageSymbolFields PatchXml;
}
public enum WixToolset.Data.Symbols.WixBundleModifyType : Enum {
    public int value__;
    public static WixBundleModifyType Allowed;
    public static WixBundleModifyType Disabled;
    public static WixBundleModifyType SingleChangeUninstallButton;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMsiFeatureSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackagePayloadRef { get; public set; }
    public string Name { get; public set; }
    public long Size { get; public set; }
    public string Parent { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public int Display { get; public set; }
    public int Level { get; public set; }
    public string Directory { get; public set; }
    public int Attributes { get; public set; }
    public WixBundleMsiFeatureSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMsiFeatureSymbolFields index);
    public string get_PackagePayloadRef();
    public void set_PackagePayloadRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public long get_Size();
    public void set_Size(long value);
    public string get_Parent();
    public void set_Parent(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Description();
    public void set_Description(string value);
    public int get_Display();
    public void set_Display(int value);
    public int get_Level();
    public void set_Level(int value);
    public string get_Directory();
    public void set_Directory(string value);
    public int get_Attributes();
    public void set_Attributes(int value);
}
public enum WixToolset.Data.Symbols.WixBundleMsiFeatureSymbolFields : Enum {
    public int value__;
    public static WixBundleMsiFeatureSymbolFields PackagePayloadRef;
    public static WixBundleMsiFeatureSymbolFields Name;
    public static WixBundleMsiFeatureSymbolFields Size;
    public static WixBundleMsiFeatureSymbolFields Parent;
    public static WixBundleMsiFeatureSymbolFields Title;
    public static WixBundleMsiFeatureSymbolFields Description;
    public static WixBundleMsiFeatureSymbolFields Display;
    public static WixBundleMsiFeatureSymbolFields Level;
    public static WixBundleMsiFeatureSymbolFields Directory;
    public static WixBundleMsiFeatureSymbolFields Attributes;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleMsiPackageAttributes : Enum {
    public int value__;
    public static WixBundleMsiPackageAttributes None;
    public static WixBundleMsiPackageAttributes EnableFeatureSelection;
    public static WixBundleMsiPackageAttributes ForcePerMachine;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMsiPackagePayloadSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleMsiPackagePayloadSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMsiPackagePayloadSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixBundleMsiPackagePayloadSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMsiPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleMsiPackageAttributes Attributes { get; public set; }
    public string ProductCode { get; public set; }
    public string UpgradeCode { get; public set; }
    public string ProductVersion { get; public set; }
    public int ProductLanguage { get; public set; }
    public string ProductName { get; public set; }
    public string Manufacturer { get; public set; }
    public bool EnableFeatureSelection { get; public set; }
    public bool ForcePerMachine { get; public set; }
    public WixBundleMsiPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMsiPackageSymbolFields index);
    public WixBundleMsiPackageAttributes get_Attributes();
    public void set_Attributes(WixBundleMsiPackageAttributes value);
    public string get_ProductCode();
    public void set_ProductCode(string value);
    public string get_UpgradeCode();
    public void set_UpgradeCode(string value);
    public string get_ProductVersion();
    public void set_ProductVersion(string value);
    public int get_ProductLanguage();
    public void set_ProductLanguage(int value);
    public string get_ProductName();
    public void set_ProductName(string value);
    public string get_Manufacturer();
    public void set_Manufacturer(string value);
    public bool get_EnableFeatureSelection();
    public void set_EnableFeatureSelection(bool value);
    public bool get_ForcePerMachine();
    public void set_ForcePerMachine(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleMsiPackageSymbolFields : Enum {
    public int value__;
    public static WixBundleMsiPackageSymbolFields Attributes;
    public static WixBundleMsiPackageSymbolFields ProductCode;
    public static WixBundleMsiPackageSymbolFields UpgradeCode;
    public static WixBundleMsiPackageSymbolFields ProductVersion;
    public static WixBundleMsiPackageSymbolFields ProductLanguage;
    public static WixBundleMsiPackageSymbolFields ProductName;
    public static WixBundleMsiPackageSymbolFields Manufacturer;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMsiPropertySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackageRef { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Condition { get; public set; }
    public WixBundleMsiPropertySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMsiPropertySymbolFields index);
    public string get_PackageRef();
    public void set_PackageRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Condition();
    public void set_Condition(string value);
}
public enum WixToolset.Data.Symbols.WixBundleMsiPropertySymbolFields : Enum {
    public int value__;
    public static WixBundleMsiPropertySymbolFields PackageRef;
    public static WixBundleMsiPropertySymbolFields Name;
    public static WixBundleMsiPropertySymbolFields Value;
    public static WixBundleMsiPropertySymbolFields Condition;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleMspPackageAttributes : Enum {
    public int value__;
    public static WixBundleMspPackageAttributes None;
    public static WixBundleMspPackageAttributes Slipstream;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMspPackagePayloadSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleMspPackagePayloadSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMspPackagePayloadSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixBundleMspPackagePayloadSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMspPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleMspPackageAttributes Attributes { get; public set; }
    public string PatchCode { get; public set; }
    public string Manufacturer { get; public set; }
    public string PatchXml { get; public set; }
    public bool Slipstream { get; public set; }
    public WixBundleMspPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMspPackageSymbolFields index);
    public WixBundleMspPackageAttributes get_Attributes();
    public void set_Attributes(WixBundleMspPackageAttributes value);
    public string get_PatchCode();
    public void set_PatchCode(string value);
    public string get_Manufacturer();
    public void set_Manufacturer(string value);
    public string get_PatchXml();
    public void set_PatchXml(string value);
    public bool get_Slipstream();
    public void set_Slipstream(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleMspPackageSymbolFields : Enum {
    public int value__;
    public static WixBundleMspPackageSymbolFields Attributes;
    public static WixBundleMspPackageSymbolFields PatchCode;
    public static WixBundleMspPackageSymbolFields Manufacturer;
    public static WixBundleMspPackageSymbolFields PatchXml;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMsuPackagePayloadSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleMsuPackagePayloadSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMsuPackagePayloadSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixBundleMsuPackagePayloadSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleMsuPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DetectCondition { get; public set; }
    public WixBundleMsuPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleMsuPackageSymbolFields index);
    public string get_DetectCondition();
    public void set_DetectCondition(string value);
}
public enum WixToolset.Data.Symbols.WixBundleMsuPackageSymbolFields : Enum {
    public int value__;
    public static WixBundleMsuPackageSymbolFields DetectCondition;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundlePackageAttributes : Enum {
    public int value__;
    public static WixBundlePackageAttributes None;
    public static WixBundlePackageAttributes Permanent;
    public static WixBundlePackageAttributes Visible;
    public static WixBundlePackageAttributes Win64;
    public static WixBundlePackageAttributes Vital;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePackageCommandLineSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string WixBundlePackageRef { get; public set; }
    public string InstallArgument { get; public set; }
    public string UninstallArgument { get; public set; }
    public string RepairArgument { get; public set; }
    public string Condition { get; public set; }
    public WixBundlePackageCommandLineSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePackageCommandLineSymbolFields index);
    public string get_WixBundlePackageRef();
    public void set_WixBundlePackageRef(string value);
    public string get_InstallArgument();
    public void set_InstallArgument(string value);
    public string get_UninstallArgument();
    public void set_UninstallArgument(string value);
    public string get_RepairArgument();
    public void set_RepairArgument(string value);
    public string get_Condition();
    public void set_Condition(string value);
}
public enum WixToolset.Data.Symbols.WixBundlePackageCommandLineSymbolFields : Enum {
    public int value__;
    public static WixBundlePackageCommandLineSymbolFields WixBundlePackageRef;
    public static WixBundlePackageCommandLineSymbolFields InstallArgument;
    public static WixBundlePackageCommandLineSymbolFields UninstallArgument;
    public static WixBundlePackageCommandLineSymbolFields RepairArgument;
    public static WixBundlePackageCommandLineSymbolFields Condition;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePackageExitCodeSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ChainPackageId { get; public set; }
    public Nullable`1<int> Code { get; public set; }
    public ExitCodeBehaviorType Behavior { get; public set; }
    public WixBundlePackageExitCodeSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePackageExitCodeSymbolFields index);
    public string get_ChainPackageId();
    public void set_ChainPackageId(string value);
    public Nullable`1<int> get_Code();
    public void set_Code(Nullable`1<int> value);
    public ExitCodeBehaviorType get_Behavior();
    public void set_Behavior(ExitCodeBehaviorType value);
}
public enum WixToolset.Data.Symbols.WixBundlePackageExitCodeSymbolFields : Enum {
    public int value__;
    public static WixBundlePackageExitCodeSymbolFields ChainPackageId;
    public static WixBundlePackageExitCodeSymbolFields Code;
    public static WixBundlePackageExitCodeSymbolFields Behavior;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePackageGroupSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundlePackageGroupSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePackageGroupSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixBundlePackageGroupSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePackageRelatedBundleSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackagePayloadRef { get; public set; }
    public string BundleId { get; public set; }
    public RelatedBundleActionType Action { get; public set; }
    public WixBundlePackageRelatedBundleSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePackageRelatedBundleSymbolFields index);
    public string get_PackagePayloadRef();
    public void set_PackagePayloadRef(string value);
    public string get_BundleId();
    public void set_BundleId(string value);
    public RelatedBundleActionType get_Action();
    public void set_Action(RelatedBundleActionType value);
}
public enum WixToolset.Data.Symbols.WixBundlePackageRelatedBundleSymbolFields : Enum {
    public int value__;
    public static WixBundlePackageRelatedBundleSymbolFields PackagePayloadRef;
    public static WixBundlePackageRelatedBundleSymbolFields BundleId;
    public static WixBundlePackageRelatedBundleSymbolFields Action;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundlePackageType Type { get; public set; }
    public string PayloadRef { get; public set; }
    public WixBundlePackageAttributes Attributes { get; public set; }
    public string InstallCondition { get; public set; }
    public string RepairCondition { get; public set; }
    public Nullable`1<BundleCacheType> Cache { get; public set; }
    public string CacheId { get; public set; }
    public Nullable`1<bool> PerMachine { get; public set; }
    public string LogPathVariable { get; public set; }
    public string RollbackLogPathVariable { get; public set; }
    public long Size { get; public set; }
    public Nullable`1<long> InstallSize { get; public set; }
    public string Version { get; public set; }
    public Nullable`1<int> Language { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string RollbackBoundaryRef { get; public set; }
    public string RollbackBoundaryBackwardRef { get; public set; }
    public bool Permanent { get; public set; }
    public bool Visible { get; public set; }
    public bool Win64 { get; public set; }
    public bool Vital { get; public set; }
    public WixBundlePackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePackageSymbolFields index);
    public WixBundlePackageType get_Type();
    public void set_Type(WixBundlePackageType value);
    public string get_PayloadRef();
    public void set_PayloadRef(string value);
    public WixBundlePackageAttributes get_Attributes();
    public void set_Attributes(WixBundlePackageAttributes value);
    public string get_InstallCondition();
    public void set_InstallCondition(string value);
    public string get_RepairCondition();
    public void set_RepairCondition(string value);
    public Nullable`1<BundleCacheType> get_Cache();
    public void set_Cache(Nullable`1<BundleCacheType> value);
    public string get_CacheId();
    public void set_CacheId(string value);
    public Nullable`1<bool> get_PerMachine();
    public void set_PerMachine(Nullable`1<bool> value);
    public string get_LogPathVariable();
    public void set_LogPathVariable(string value);
    public string get_RollbackLogPathVariable();
    public void set_RollbackLogPathVariable(string value);
    public long get_Size();
    public void set_Size(long value);
    public Nullable`1<long> get_InstallSize();
    public void set_InstallSize(Nullable`1<long> value);
    public string get_Version();
    public void set_Version(string value);
    public Nullable`1<int> get_Language();
    public void set_Language(Nullable`1<int> value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_RollbackBoundaryRef();
    public void set_RollbackBoundaryRef(string value);
    public string get_RollbackBoundaryBackwardRef();
    public void set_RollbackBoundaryBackwardRef(string value);
    public bool get_Permanent();
    public void set_Permanent(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool get_Win64();
    public void set_Win64(bool value);
    public bool get_Vital();
    public void set_Vital(bool value);
}
public enum WixToolset.Data.Symbols.WixBundlePackageSymbolFields : Enum {
    public int value__;
    public static WixBundlePackageSymbolFields Type;
    public static WixBundlePackageSymbolFields PayloadRef;
    public static WixBundlePackageSymbolFields Attributes;
    public static WixBundlePackageSymbolFields InstallCondition;
    public static WixBundlePackageSymbolFields RepairCondition;
    public static WixBundlePackageSymbolFields Cache;
    public static WixBundlePackageSymbolFields CacheId;
    public static WixBundlePackageSymbolFields PerMachine;
    public static WixBundlePackageSymbolFields LogPathVariable;
    public static WixBundlePackageSymbolFields RollbackLogPathVariable;
    public static WixBundlePackageSymbolFields Size;
    public static WixBundlePackageSymbolFields InstallSize;
    public static WixBundlePackageSymbolFields Version;
    public static WixBundlePackageSymbolFields Language;
    public static WixBundlePackageSymbolFields DisplayName;
    public static WixBundlePackageSymbolFields Description;
    public static WixBundlePackageSymbolFields RollbackBoundaryRef;
    public static WixBundlePackageSymbolFields RollbackBoundaryBackwardRef;
}
public enum WixToolset.Data.Symbols.WixBundlePackageType : Enum {
    public int value__;
    public static WixBundlePackageType NotSet;
    public static WixBundlePackageType Bundle;
    public static WixBundlePackageType Exe;
    public static WixBundlePackageType Msi;
    public static WixBundlePackageType Msp;
    public static WixBundlePackageType Msu;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundlePatchTargetCodeAttributes : Enum {
    public int value__;
    public static WixBundlePatchTargetCodeAttributes None;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePatchTargetCodeSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackagePayloadRef { get; public set; }
    public string TargetCode { get; public set; }
    public WixBundlePatchTargetCodeAttributes Attributes { get; public set; }
    public WixBundlePatchTargetCodeType Type { get; public set; }
    public WixBundlePatchTargetCodeSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePatchTargetCodeSymbolFields index);
    public string get_PackagePayloadRef();
    public void set_PackagePayloadRef(string value);
    public string get_TargetCode();
    public void set_TargetCode(string value);
    public WixBundlePatchTargetCodeAttributes get_Attributes();
    public void set_Attributes(WixBundlePatchTargetCodeAttributes value);
    public WixBundlePatchTargetCodeType get_Type();
    public void set_Type(WixBundlePatchTargetCodeType value);
}
public enum WixToolset.Data.Symbols.WixBundlePatchTargetCodeSymbolFields : Enum {
    public int value__;
    public static WixBundlePatchTargetCodeSymbolFields PackagePayloadRef;
    public static WixBundlePatchTargetCodeSymbolFields TargetCode;
    public static WixBundlePatchTargetCodeSymbolFields Attributes;
    public static WixBundlePatchTargetCodeSymbolFields Type;
}
public enum WixToolset.Data.Symbols.WixBundlePatchTargetCodeType : Enum {
    public int value__;
    public static WixBundlePatchTargetCodeType Unspecified;
    public static WixBundlePatchTargetCodeType ProductCode;
    public static WixBundlePatchTargetCodeType UpgradeCode;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundlePayloadAttributes : Enum {
    public int value__;
    public static WixBundlePayloadAttributes None;
    public static WixBundlePayloadAttributes ContentFile;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePayloadGroupSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundlePayloadGroupSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePayloadGroupSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixBundlePayloadGroupSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundlePayloadSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundlePayloadAttributes Attributes { get; public set; }
    public string Name { get; public set; }
    public IntermediateFieldPathValue SourceFile { get; public set; }
    public string DownloadUrl { get; public set; }
    public Nullable`1<bool> Compressed { get; public set; }
    public string UnresolvedSourceFile { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<long> FileSize { get; public set; }
    public string Version { get; public set; }
    public string Hash { get; public set; }
    public string ContainerRef { get; public set; }
    public string EmbeddedId { get; public set; }
    public bool LayoutOnly { get; public set; }
    public Nullable`1<PackagingType> Packaging { get; public set; }
    public string ParentPackagePayloadRef { get; public set; }
    public string CertificatePublicKey { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public bool ContentFile { get; public set; }
    public WixBundlePayloadSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundlePayloadSymbolFields index);
    public WixBundlePayloadAttributes get_Attributes();
    public void set_Attributes(WixBundlePayloadAttributes value);
    public string get_Name();
    public void set_Name(string value);
    public IntermediateFieldPathValue get_SourceFile();
    public void set_SourceFile(IntermediateFieldPathValue value);
    public string get_DownloadUrl();
    public void set_DownloadUrl(string value);
    public Nullable`1<bool> get_Compressed();
    public void set_Compressed(Nullable`1<bool> value);
    public string get_UnresolvedSourceFile();
    public void set_UnresolvedSourceFile(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public Nullable`1<long> get_FileSize();
    public void set_FileSize(Nullable`1<long> value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Hash();
    public void set_Hash(string value);
    public string get_ContainerRef();
    public void set_ContainerRef(string value);
    public string get_EmbeddedId();
    public void set_EmbeddedId(string value);
    public bool get_LayoutOnly();
    public void set_LayoutOnly(bool value);
    public Nullable`1<PackagingType> get_Packaging();
    public void set_Packaging(Nullable`1<PackagingType> value);
    public string get_ParentPackagePayloadRef();
    public void set_ParentPackagePayloadRef(string value);
    public string get_CertificatePublicKey();
    public void set_CertificatePublicKey(string value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public bool get_ContentFile();
    public void set_ContentFile(bool value);
}
public enum WixToolset.Data.Symbols.WixBundlePayloadSymbolFields : Enum {
    public int value__;
    public static WixBundlePayloadSymbolFields Attributes;
    public static WixBundlePayloadSymbolFields Name;
    public static WixBundlePayloadSymbolFields SourceFile;
    public static WixBundlePayloadSymbolFields DownloadUrl;
    public static WixBundlePayloadSymbolFields Compressed;
    public static WixBundlePayloadSymbolFields UnresolvedSourceFile;
    public static WixBundlePayloadSymbolFields DisplayName;
    public static WixBundlePayloadSymbolFields Description;
    public static WixBundlePayloadSymbolFields FileSize;
    public static WixBundlePayloadSymbolFields Version;
    public static WixBundlePayloadSymbolFields Hash;
    public static WixBundlePayloadSymbolFields ContainerRef;
    public static WixBundlePayloadSymbolFields EmbeddedId;
    public static WixBundlePayloadSymbolFields LayoutOnly;
    public static WixBundlePayloadSymbolFields Packaging;
    public static WixBundlePayloadSymbolFields ParentPackagePayloadRef;
    public static WixBundlePayloadSymbolFields CertificatePublicKey;
    public static WixBundlePayloadSymbolFields CertificateThumbprint;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleRelatedPackageAttributes : Enum {
    public int value__;
    public static WixBundleRelatedPackageAttributes None;
    public static WixBundleRelatedPackageAttributes OnlyDetect;
    public static WixBundleRelatedPackageAttributes MinInclusive;
    public static WixBundleRelatedPackageAttributes MaxInclusive;
    public static WixBundleRelatedPackageAttributes LangInclusive;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleRelatedPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackagePayloadRef { get; public set; }
    public string RelatedId { get; public set; }
    public string MinVersion { get; public set; }
    public string MaxVersion { get; public set; }
    public string Languages { get; public set; }
    public WixBundleRelatedPackageAttributes Attributes { get; public set; }
    public bool MinInclusive { get; public set; }
    public bool MaxInclusive { get; public set; }
    public bool OnlyDetect { get; public set; }
    public bool LangInclusive { get; public set; }
    public WixBundleRelatedPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleRelatedPackageSymbolFields index);
    public string get_PackagePayloadRef();
    public void set_PackagePayloadRef(string value);
    public string get_RelatedId();
    public void set_RelatedId(string value);
    public string get_MinVersion();
    public void set_MinVersion(string value);
    public string get_MaxVersion();
    public void set_MaxVersion(string value);
    public string get_Languages();
    public void set_Languages(string value);
    public WixBundleRelatedPackageAttributes get_Attributes();
    public void set_Attributes(WixBundleRelatedPackageAttributes value);
    public bool get_MinInclusive();
    public void set_MinInclusive(bool value);
    public bool get_MaxInclusive();
    public void set_MaxInclusive(bool value);
    public bool get_OnlyDetect();
    public void set_OnlyDetect(bool value);
    public bool get_LangInclusive();
    public void set_LangInclusive(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleRelatedPackageSymbolFields : Enum {
    public int value__;
    public static WixBundleRelatedPackageSymbolFields PackagePayloadRef;
    public static WixBundleRelatedPackageSymbolFields RelatedId;
    public static WixBundleRelatedPackageSymbolFields MinVersion;
    public static WixBundleRelatedPackageSymbolFields MaxVersion;
    public static WixBundleRelatedPackageSymbolFields Languages;
    public static WixBundleRelatedPackageSymbolFields Attributes;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleRollbackBoundaryAttributes : Enum {
    public int value__;
    public static WixBundleRollbackBoundaryAttributes None;
    public static WixBundleRollbackBoundaryAttributes Vital;
    public static WixBundleRollbackBoundaryAttributes Transaction;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleRollbackBoundarySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleRollbackBoundaryAttributes Attributes { get; public set; }
    public string LogPathVariable { get; public set; }
    public bool Vital { get; public set; }
    public bool Transaction { get; public set; }
    public WixBundleRollbackBoundarySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleRollbackBoundarySymbolFields index);
    public WixBundleRollbackBoundaryAttributes get_Attributes();
    public void set_Attributes(WixBundleRollbackBoundaryAttributes value);
    public string get_LogPathVariable();
    public void set_LogPathVariable(string value);
    public bool get_Vital();
    public void set_Vital(bool value);
    public bool get_Transaction();
    public void set_Transaction(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleRollbackBoundarySymbolFields : Enum {
    public int value__;
    public static WixBundleRollbackBoundarySymbolFields Attributes;
    public static WixBundleRollbackBoundarySymbolFields LogPathVariable;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleSlipstreamMspSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string TargetPackageRef { get; public set; }
    public string MspPackageRef { get; public set; }
    public WixBundleSlipstreamMspSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleSlipstreamMspSymbolFields index);
    public string get_TargetPackageRef();
    public void set_TargetPackageRef(string value);
    public string get_MspPackageRef();
    public void set_MspPackageRef(string value);
}
public enum WixToolset.Data.Symbols.WixBundleSlipstreamMspSymbolFields : Enum {
    public int value__;
    public static WixBundleSlipstreamMspSymbolFields TargetPackageRef;
    public static WixBundleSlipstreamMspSymbolFields MspPackageRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string UpgradeCode { get; public set; }
    public string Version { get; public set; }
    public string Copyright { get; public set; }
    public string Name { get; public set; }
    public string Manufacturer { get; public set; }
    public WixBundleAttributes Attributes { get; public set; }
    public string AboutUrl { get; public set; }
    public string HelpTelephone { get; public set; }
    public string HelpUrl { get; public set; }
    public string UpdateUrl { get; public set; }
    public Nullable`1<bool> Compressed { get; public set; }
    public string LogPathVariable { get; public set; }
    public string LogPrefix { get; public set; }
    public string LogExtension { get; public set; }
    public IntermediateFieldPathValue IconSourceFile { get; public set; }
    public IntermediateFieldPathValue SplashScreenSourceFile { get; public set; }
    public string Condition { get; public set; }
    public string Tag { get; public set; }
    public Platform Platform { get; public set; }
    public string ParentName { get; public set; }
    public string BundleId { get; public set; }
    public string ProviderKey { get; public set; }
    public string InProgressName { get; public set; }
    public WixBundleModifyType DisableModify { get; public set; }
    public PackagingType DefaultPackagingType { get; }
    public bool DisableRemove { get; public set; }
    public bool PerMachine { get; public set; }
    public WixBundleSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleSymbolFields index);
    public string get_UpgradeCode();
    public void set_UpgradeCode(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Copyright();
    public void set_Copyright(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Manufacturer();
    public void set_Manufacturer(string value);
    public WixBundleAttributes get_Attributes();
    public void set_Attributes(WixBundleAttributes value);
    public string get_AboutUrl();
    public void set_AboutUrl(string value);
    public string get_HelpTelephone();
    public void set_HelpTelephone(string value);
    public string get_HelpUrl();
    public void set_HelpUrl(string value);
    public string get_UpdateUrl();
    public void set_UpdateUrl(string value);
    public Nullable`1<bool> get_Compressed();
    public void set_Compressed(Nullable`1<bool> value);
    public string get_LogPathVariable();
    public void set_LogPathVariable(string value);
    public string get_LogPrefix();
    public void set_LogPrefix(string value);
    public string get_LogExtension();
    public void set_LogExtension(string value);
    public IntermediateFieldPathValue get_IconSourceFile();
    public void set_IconSourceFile(IntermediateFieldPathValue value);
    public IntermediateFieldPathValue get_SplashScreenSourceFile();
    public void set_SplashScreenSourceFile(IntermediateFieldPathValue value);
    public string get_Condition();
    public void set_Condition(string value);
    public string get_Tag();
    public void set_Tag(string value);
    public Platform get_Platform();
    public void set_Platform(Platform value);
    public string get_ParentName();
    public void set_ParentName(string value);
    public string get_BundleId();
    public void set_BundleId(string value);
    public string get_ProviderKey();
    public void set_ProviderKey(string value);
    public string get_InProgressName();
    public void set_InProgressName(string value);
    public WixBundleModifyType get_DisableModify();
    public void set_DisableModify(WixBundleModifyType value);
    public PackagingType get_DefaultPackagingType();
    public bool get_DisableRemove();
    public void set_DisableRemove(bool value);
    public bool get_PerMachine();
    public void set_PerMachine(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleSymbolFields : Enum {
    public int value__;
    public static WixBundleSymbolFields UpgradeCode;
    public static WixBundleSymbolFields Version;
    public static WixBundleSymbolFields Copyright;
    public static WixBundleSymbolFields Name;
    public static WixBundleSymbolFields Manufacturer;
    public static WixBundleSymbolFields Attributes;
    public static WixBundleSymbolFields AboutUrl;
    public static WixBundleSymbolFields HelpUrl;
    public static WixBundleSymbolFields HelpTelephone;
    public static WixBundleSymbolFields UpdateUrl;
    public static WixBundleSymbolFields Compressed;
    public static WixBundleSymbolFields LogPathVariable;
    public static WixBundleSymbolFields LogPrefix;
    public static WixBundleSymbolFields LogExtension;
    public static WixBundleSymbolFields IconSourceFile;
    public static WixBundleSymbolFields SplashScreenSourceFile;
    public static WixBundleSymbolFields Condition;
    public static WixBundleSymbolFields Tag;
    public static WixBundleSymbolFields Platform;
    public static WixBundleSymbolFields ParentName;
    public static WixBundleSymbolFields BundleId;
    public static WixBundleSymbolFields ProviderKey;
    public static WixBundleSymbolFields InProgressName;
    public static WixBundleSymbolFields DisableModify;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleTagAttributes : Enum {
    public int value__;
    public static WixBundleTagAttributes None;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleTagSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Filename { get; public set; }
    public string Regid { get; public set; }
    public string Name { get; public set; }
    public string InstallPath { get; public set; }
    public WixBundleTagAttributes Attributes { get; public set; }
    public string Xml { get; public set; }
    public WixBundleTagSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleTagSymbolFields index);
    public string get_Filename();
    public void set_Filename(string value);
    public string get_Regid();
    public void set_Regid(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_InstallPath();
    public void set_InstallPath(string value);
    public WixBundleTagAttributes get_Attributes();
    public void set_Attributes(WixBundleTagAttributes value);
    public string get_Xml();
    public void set_Xml(string value);
}
public enum WixToolset.Data.Symbols.WixBundleTagSymbolFields : Enum {
    public int value__;
    public static WixBundleTagSymbolFields Filename;
    public static WixBundleTagSymbolFields Regid;
    public static WixBundleTagSymbolFields Name;
    public static WixBundleTagSymbolFields InstallPath;
    public static WixBundleTagSymbolFields Attributes;
    public static WixBundleTagSymbolFields Xml;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleUpdateAttributes : Enum {
    public int value__;
    public static WixBundleUpdateAttributes None;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleUpdateSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Location { get; public set; }
    public WixBundleUpdateAttributes Attributes { get; public set; }
    public WixBundleUpdateSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleUpdateSymbolFields index);
    public string get_Location();
    public void set_Location(string value);
    public WixBundleUpdateAttributes get_Attributes();
    public void set_Attributes(WixBundleUpdateAttributes value);
}
public enum WixToolset.Data.Symbols.WixBundleUpdateSymbolFields : Enum {
    public int value__;
    public static WixBundleUpdateSymbolFields Location;
    public static WixBundleUpdateSymbolFields Attributes;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixBundleVariableAttributes : Enum {
    public int value__;
    public static WixBundleVariableAttributes None;
    public static WixBundleVariableAttributes Hidden;
    public static WixBundleVariableAttributes Persisted;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixBundleVariableSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixBundleVariableAttributes Attributes { get; public set; }
    public string Value { get; public set; }
    public WixBundleVariableType Type { get; public set; }
    public bool Hidden { get; public set; }
    public bool Persisted { get; public set; }
    public WixBundleVariableSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixBundleVariableSymbolFields index);
    public WixBundleVariableAttributes get_Attributes();
    public void set_Attributes(WixBundleVariableAttributes value);
    public string get_Value();
    public void set_Value(string value);
    public WixBundleVariableType get_Type();
    public void set_Type(WixBundleVariableType value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_Persisted();
    public void set_Persisted(bool value);
}
public enum WixToolset.Data.Symbols.WixBundleVariableSymbolFields : Enum {
    public int value__;
    public static WixBundleVariableSymbolFields Attributes;
    public static WixBundleVariableSymbolFields Value;
    public static WixBundleVariableSymbolFields Type;
}
public enum WixToolset.Data.Symbols.WixBundleVariableType : Enum {
    public int value__;
    public static WixBundleVariableType Unknown;
    public static WixBundleVariableType Formatted;
    public static WixBundleVariableType Numeric;
    public static WixBundleVariableType String;
    public static WixBundleVariableType Version;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixChainAttributes : Enum {
    public int value__;
    public static WixChainAttributes None;
    public static WixChainAttributes DisableRollback;
    public static WixChainAttributes DisableSystemRestore;
    public static WixChainAttributes ParallelCache;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixChainItemSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixChainItemSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixChainItemSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixChainItemSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixChainSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixChainAttributes Attributes { get; public set; }
    public bool DisableRollback { get; public set; }
    public bool DisableSystemRestore { get; public set; }
    public bool ParallelCache { get; public set; }
    public WixChainSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixChainSymbolFields index);
    public WixChainAttributes get_Attributes();
    public void set_Attributes(WixChainAttributes value);
    public bool get_DisableRollback();
    public void set_DisableRollback(bool value);
    public bool get_DisableSystemRestore();
    public void set_DisableSystemRestore(bool value);
    public bool get_ParallelCache();
    public void set_ParallelCache(bool value);
}
public enum WixToolset.Data.Symbols.WixChainSymbolFields : Enum {
    public int value__;
    public static WixChainSymbolFields Attributes;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixComplexReferenceSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Parent { get; public set; }
    public ComplexReferenceParentType ParentType { get; public set; }
    public string ParentLanguage { get; public set; }
    public string Child { get; public set; }
    public ComplexReferenceChildType ChildType { get; public set; }
    public bool IsPrimary { get; public set; }
    public WixComplexReferenceSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixComplexReferenceSymbolFields index);
    public string get_Parent();
    public void set_Parent(string value);
    public ComplexReferenceParentType get_ParentType();
    public void set_ParentType(ComplexReferenceParentType value);
    public string get_ParentLanguage();
    public void set_ParentLanguage(string value);
    public string get_Child();
    public void set_Child(string value);
    public ComplexReferenceChildType get_ChildType();
    public void set_ChildType(ComplexReferenceChildType value);
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
}
public enum WixToolset.Data.Symbols.WixComplexReferenceSymbolFields : Enum {
    public int value__;
    public static WixComplexReferenceSymbolFields Parent;
    public static WixComplexReferenceSymbolFields ParentAttributes;
    public static WixComplexReferenceSymbolFields ParentLanguage;
    public static WixComplexReferenceSymbolFields Child;
    public static WixComplexReferenceSymbolFields ChildAttributes;
    public static WixComplexReferenceSymbolFields Attributes;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixComponentGroupSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string DirectoryRef { get; public set; }
    public string Source { get; public set; }
    public WixComponentGroupSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixComponentGroupSymbolFields index);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public string get_Source();
    public void set_Source(string value);
}
public enum WixToolset.Data.Symbols.WixComponentGroupSymbolFields : Enum {
    public int value__;
    public static WixComponentGroupSymbolFields DirectoryRef;
    public static WixComponentGroupSymbolFields Source;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixComponentSearchAttributes : Enum {
    public int value__;
    public static WixComponentSearchAttributes None;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixComponentSearchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Guid { get; public set; }
    public string ProductCode { get; public set; }
    public WixComponentSearchAttributes Attributes { get; public set; }
    public WixComponentSearchType Type { get; public set; }
    public WixComponentSearchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixComponentSearchSymbolFields index);
    public string get_Guid();
    public void set_Guid(string value);
    public string get_ProductCode();
    public void set_ProductCode(string value);
    public WixComponentSearchAttributes get_Attributes();
    public void set_Attributes(WixComponentSearchAttributes value);
    public WixComponentSearchType get_Type();
    public void set_Type(WixComponentSearchType value);
}
public enum WixToolset.Data.Symbols.WixComponentSearchSymbolFields : Enum {
    public int value__;
    public static WixComponentSearchSymbolFields Guid;
    public static WixComponentSearchSymbolFields ProductCode;
    public static WixComponentSearchSymbolFields Attributes;
    public static WixComponentSearchSymbolFields Type;
}
public enum WixToolset.Data.Symbols.WixComponentSearchType : Enum {
    public int value__;
    public static WixComponentSearchType KeyPath;
    public static WixComponentSearchType State;
    public static WixComponentSearchType WantDirectory;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixCustomTableCellSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string TableRef { get; public set; }
    public string ColumnRef { get; public set; }
    public string RowId { get; public set; }
    public string Data { get; public set; }
    public WixCustomTableCellSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixCustomTableCellSymbolFields index);
    public string get_TableRef();
    public void set_TableRef(string value);
    public string get_ColumnRef();
    public void set_ColumnRef(string value);
    public string get_RowId();
    public void set_RowId(string value);
    public string get_Data();
    public void set_Data(string value);
}
public enum WixToolset.Data.Symbols.WixCustomTableCellSymbolFields : Enum {
    public int value__;
    public static WixCustomTableCellSymbolFields TableRef;
    public static WixCustomTableCellSymbolFields ColumnRef;
    public static WixCustomTableCellSymbolFields RowId;
    public static WixCustomTableCellSymbolFields Data;
}
public enum WixToolset.Data.Symbols.WixCustomTableColumnCategoryType : Enum {
    public int value__;
    public static WixCustomTableColumnCategoryType Text;
    public static WixCustomTableColumnCategoryType UpperCase;
    public static WixCustomTableColumnCategoryType LowerCase;
    public static WixCustomTableColumnCategoryType Integer;
    public static WixCustomTableColumnCategoryType DoubleInteger;
    public static WixCustomTableColumnCategoryType TimeDate;
    public static WixCustomTableColumnCategoryType Identifier;
    public static WixCustomTableColumnCategoryType Property;
    public static WixCustomTableColumnCategoryType Filename;
    public static WixCustomTableColumnCategoryType WildCardFilename;
    public static WixCustomTableColumnCategoryType Path;
    public static WixCustomTableColumnCategoryType Paths;
    public static WixCustomTableColumnCategoryType AnyPath;
    public static WixCustomTableColumnCategoryType DefaultDir;
    public static WixCustomTableColumnCategoryType RegPath;
    public static WixCustomTableColumnCategoryType Formatted;
    public static WixCustomTableColumnCategoryType FormattedSddl;
    public static WixCustomTableColumnCategoryType Template;
    public static WixCustomTableColumnCategoryType Condition;
    public static WixCustomTableColumnCategoryType Guid;
    public static WixCustomTableColumnCategoryType Version;
    public static WixCustomTableColumnCategoryType Language;
    public static WixCustomTableColumnCategoryType Binary;
    public static WixCustomTableColumnCategoryType CustomSource;
    public static WixCustomTableColumnCategoryType Cabinet;
    public static WixCustomTableColumnCategoryType Shortcut;
}
public enum WixToolset.Data.Symbols.WixCustomTableColumnModularizeType : Enum {
    public int value__;
    public static WixCustomTableColumnModularizeType None;
    public static WixCustomTableColumnModularizeType Column;
    public static WixCustomTableColumnModularizeType CompanionFile;
    public static WixCustomTableColumnModularizeType Condition;
    public static WixCustomTableColumnModularizeType ControlEventArgument;
    public static WixCustomTableColumnModularizeType ControlText;
    public static WixCustomTableColumnModularizeType Icon;
    public static WixCustomTableColumnModularizeType Property;
    public static WixCustomTableColumnModularizeType SemicolonDelimited;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixCustomTableColumnSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string TableRef { get; public set; }
    public string Name { get; public set; }
    public IntermediateFieldType Type { get; public set; }
    public WixCustomTableColumnSymbolAttributes Attributes { get; public set; }
    public int Width { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public string KeyTable { get; public set; }
    public Nullable`1<int> KeyColumn { get; public set; }
    public Nullable`1<WixCustomTableColumnCategoryType> Category { get; public set; }
    public string Set { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<WixCustomTableColumnModularizeType> Modularize { get; public set; }
    public bool PrimaryKey { get; }
    public bool Localizable { get; }
    public bool Nullable { get; }
    public bool Unreal { get; }
    public WixCustomTableColumnSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixCustomTableColumnSymbolFields index);
    public string get_TableRef();
    public void set_TableRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public IntermediateFieldType get_Type();
    public void set_Type(IntermediateFieldType value);
    public WixCustomTableColumnSymbolAttributes get_Attributes();
    public void set_Attributes(WixCustomTableColumnSymbolAttributes value);
    public int get_Width();
    public void set_Width(int value);
    public Nullable`1<long> get_MinValue();
    public void set_MinValue(Nullable`1<long> value);
    public Nullable`1<long> get_MaxValue();
    public void set_MaxValue(Nullable`1<long> value);
    public string get_KeyTable();
    public void set_KeyTable(string value);
    public Nullable`1<int> get_KeyColumn();
    public void set_KeyColumn(Nullable`1<int> value);
    public Nullable`1<WixCustomTableColumnCategoryType> get_Category();
    public void set_Category(Nullable`1<WixCustomTableColumnCategoryType> value);
    public string get_Set();
    public void set_Set(string value);
    public string get_Description();
    public void set_Description(string value);
    public Nullable`1<WixCustomTableColumnModularizeType> get_Modularize();
    public void set_Modularize(Nullable`1<WixCustomTableColumnModularizeType> value);
    public bool get_PrimaryKey();
    public bool get_Localizable();
    public bool get_Nullable();
    public bool get_Unreal();
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixCustomTableColumnSymbolAttributes : Enum {
    public int value__;
    public static WixCustomTableColumnSymbolAttributes None;
    public static WixCustomTableColumnSymbolAttributes PrimaryKey;
    public static WixCustomTableColumnSymbolAttributes Localizable;
    public static WixCustomTableColumnSymbolAttributes Nullable;
    public static WixCustomTableColumnSymbolAttributes Unreal;
}
public enum WixToolset.Data.Symbols.WixCustomTableColumnSymbolFields : Enum {
    public int value__;
    public static WixCustomTableColumnSymbolFields TableRef;
    public static WixCustomTableColumnSymbolFields Name;
    public static WixCustomTableColumnSymbolFields Type;
    public static WixCustomTableColumnSymbolFields Attributes;
    public static WixCustomTableColumnSymbolFields Width;
    public static WixCustomTableColumnSymbolFields MinValue;
    public static WixCustomTableColumnSymbolFields MaxValue;
    public static WixCustomTableColumnSymbolFields KeyTable;
    public static WixCustomTableColumnSymbolFields KeyColumn;
    public static WixCustomTableColumnSymbolFields Category;
    public static WixCustomTableColumnSymbolFields Set;
    public static WixCustomTableColumnSymbolFields Description;
    public static WixCustomTableColumnSymbolFields Modularize;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixCustomTableSymbol : IntermediateSymbol {
    public static char ColumnNamesSeparator;
    public IntermediateField Item { get; }
    public string ColumnNames { get; public set; }
    public bool Unreal { get; public set; }
    public String[] ColumnNamesSeparated { get; }
    public WixCustomTableSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixCustomTableSymbolFields index);
    public string get_ColumnNames();
    public void set_ColumnNames(string value);
    public bool get_Unreal();
    public void set_Unreal(bool value);
    public String[] get_ColumnNamesSeparated();
}
public enum WixToolset.Data.Symbols.WixCustomTableSymbolFields : Enum {
    public int value__;
    public static WixCustomTableSymbolFields ColumnNames;
    public static WixCustomTableSymbolFields Unreal;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixDeltaPatchFileSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileRef { get; public set; }
    public string RetainLengths { get; public set; }
    public string IgnoreOffsets { get; public set; }
    public string IgnoreLengths { get; public set; }
    public string RetainOffsets { get; public set; }
    public string SymbolPaths { get; public set; }
    public WixDeltaPatchFileSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixDeltaPatchFileSymbolFields index);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_RetainLengths();
    public void set_RetainLengths(string value);
    public string get_IgnoreOffsets();
    public void set_IgnoreOffsets(string value);
    public string get_IgnoreLengths();
    public void set_IgnoreLengths(string value);
    public string get_RetainOffsets();
    public void set_RetainOffsets(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
}
public enum WixToolset.Data.Symbols.WixDeltaPatchFileSymbolFields : Enum {
    public int value__;
    public static WixDeltaPatchFileSymbolFields FileRef;
    public static WixDeltaPatchFileSymbolFields RetainLengths;
    public static WixDeltaPatchFileSymbolFields IgnoreOffsets;
    public static WixDeltaPatchFileSymbolFields IgnoreLengths;
    public static WixDeltaPatchFileSymbolFields RetainOffsets;
    public static WixDeltaPatchFileSymbolFields SymbolPaths;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixDeltaPatchSymbolPathsSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public SymbolPathType SymbolType { get; public set; }
    public string SymbolId { get; public set; }
    public string SymbolPaths { get; public set; }
    public WixDeltaPatchSymbolPathsSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixDeltaPatchSymbolPathsSymbolFields index);
    public SymbolPathType get_SymbolType();
    public void set_SymbolType(SymbolPathType value);
    public string get_SymbolId();
    public void set_SymbolId(string value);
    public string get_SymbolPaths();
    public void set_SymbolPaths(string value);
}
public enum WixToolset.Data.Symbols.WixDeltaPatchSymbolPathsSymbolFields : Enum {
    public int value__;
    public static WixDeltaPatchSymbolPathsSymbolFields SymbolType;
    public static WixDeltaPatchSymbolPathsSymbolFields SymbolId;
    public static WixDeltaPatchSymbolPathsSymbolFields SymbolPaths;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixDependencyProviderAttributes : Enum {
    public int value__;
    public static WixDependencyProviderAttributes ProvidesAttributesBundle;
    public static WixDependencyProviderAttributes ProvidesAttributesImported;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixDependencyProviderSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ParentRef { get; public set; }
    public string ProviderKey { get; public set; }
    public string Version { get; public set; }
    public string DisplayName { get; public set; }
    public WixDependencyProviderAttributes Attributes { get; public set; }
    public bool Bundle { get; }
    public bool Imported { get; }
    public WixDependencyProviderSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixDependencyProviderSymbolFields index);
    public string get_ParentRef();
    public void set_ParentRef(string value);
    public string get_ProviderKey();
    public void set_ProviderKey(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public WixDependencyProviderAttributes get_Attributes();
    public void set_Attributes(WixDependencyProviderAttributes value);
    public bool get_Bundle();
    public bool get_Imported();
}
public enum WixToolset.Data.Symbols.WixDependencyProviderSymbolFields : Enum {
    public int value__;
    public static WixDependencyProviderSymbolFields ParentRef;
    public static WixDependencyProviderSymbolFields ProviderKey;
    public static WixDependencyProviderSymbolFields Version;
    public static WixDependencyProviderSymbolFields DisplayName;
    public static WixDependencyProviderSymbolFields Attributes;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixDependencyRefSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string WixDependencyProviderRef { get; public set; }
    public string WixDependencyRef { get; public set; }
    public WixDependencyRefSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixDependencyRefSymbolFields index);
    public string get_WixDependencyProviderRef();
    public void set_WixDependencyProviderRef(string value);
    public string get_WixDependencyRef();
    public void set_WixDependencyRef(string value);
}
public enum WixToolset.Data.Symbols.WixDependencyRefSymbolFields : Enum {
    public int value__;
    public static WixDependencyRefSymbolFields WixDependencyProviderRef;
    public static WixDependencyRefSymbolFields WixDependencyRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixDependencySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ProviderKey { get; public set; }
    public string MinVersion { get; public set; }
    public string MaxVersion { get; public set; }
    public WixDependencySymbolAttributes Attributes { get; public set; }
    public bool RequiresAttributesMinVersionInclusive { get; }
    public bool RequiresAttributesMaxVersionInclusive { get; }
    public WixDependencySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixDependencySymbolFields index);
    public string get_ProviderKey();
    public void set_ProviderKey(string value);
    public string get_MinVersion();
    public void set_MinVersion(string value);
    public string get_MaxVersion();
    public void set_MaxVersion(string value);
    public WixDependencySymbolAttributes get_Attributes();
    public void set_Attributes(WixDependencySymbolAttributes value);
    public bool get_RequiresAttributesMinVersionInclusive();
    public bool get_RequiresAttributesMaxVersionInclusive();
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixDependencySymbolAttributes : Enum {
    public int value__;
    public static WixDependencySymbolAttributes None;
    public static WixDependencySymbolAttributes RequiresAttributesMinVersionInclusive;
    public static WixDependencySymbolAttributes RequiresAttributesMaxVersionInclusive;
}
public enum WixToolset.Data.Symbols.WixDependencySymbolFields : Enum {
    public int value__;
    public static WixDependencySymbolFields ProviderKey;
    public static WixDependencySymbolFields MinVersion;
    public static WixDependencySymbolFields MaxVersion;
    public static WixDependencySymbolFields Attributes;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixEnsureTableSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Table { get; public set; }
    public WixEnsureTableSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixEnsureTableSymbolFields index);
    public string get_Table();
    public void set_Table(string value);
}
public enum WixToolset.Data.Symbols.WixEnsureTableSymbolFields : Enum {
    public int value__;
    public static WixEnsureTableSymbolFields Table;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixFeatureGroupSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixFeatureGroupSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixFeatureGroupSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixFeatureGroupSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixFeatureModulesSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FeatureRef { get; public set; }
    public string WixMergeRef { get; public set; }
    public WixFeatureModulesSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixFeatureModulesSymbolFields index);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
    public string get_WixMergeRef();
    public void set_WixMergeRef(string value);
}
public enum WixToolset.Data.Symbols.WixFeatureModulesSymbolFields : Enum {
    public int value__;
    public static WixFeatureModulesSymbolFields FeatureRef;
    public static WixFeatureModulesSymbolFields WixMergeRef;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixFileSearchAttributes : Enum {
    public int value__;
    public static WixFileSearchAttributes None;
    public static WixFileSearchAttributes IsDirectory;
    public static WixFileSearchAttributes MinVersionInclusive;
    public static WixFileSearchAttributes MaxVersionInclusive;
    public static WixFileSearchAttributes MinSizeInclusive;
    public static WixFileSearchAttributes MaxSizeInclusive;
    public static WixFileSearchAttributes MinDateInclusive;
    public static WixFileSearchAttributes MaxDateInclusive;
    public static WixFileSearchAttributes DisableFileRedirection;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixFileSearchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Path { get; public set; }
    public string MinVersion { get; public set; }
    public string MaxVersion { get; public set; }
    public Nullable`1<int> MinSize { get; public set; }
    public Nullable`1<int> MaxSize { get; public set; }
    public Nullable`1<int> MinDate { get; public set; }
    public Nullable`1<int> MaxDate { get; public set; }
    public string Languages { get; public set; }
    public WixFileSearchAttributes Attributes { get; public set; }
    public WixFileSearchType Type { get; public set; }
    public bool IsDirectory { get; public set; }
    public bool MinVersionInclusive { get; public set; }
    public bool MaxVersionInclusive { get; public set; }
    public bool MinSizeInclusive { get; public set; }
    public bool MaxSizeInclusive { get; public set; }
    public bool MinDateInclusive { get; public set; }
    public bool MaxDateInclusive { get; public set; }
    public bool DisableFileRedirection { get; public set; }
    public WixFileSearchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixFileSearchSymbolFields index);
    public string get_Path();
    public void set_Path(string value);
    public string get_MinVersion();
    public void set_MinVersion(string value);
    public string get_MaxVersion();
    public void set_MaxVersion(string value);
    public Nullable`1<int> get_MinSize();
    public void set_MinSize(Nullable`1<int> value);
    public Nullable`1<int> get_MaxSize();
    public void set_MaxSize(Nullable`1<int> value);
    public Nullable`1<int> get_MinDate();
    public void set_MinDate(Nullable`1<int> value);
    public Nullable`1<int> get_MaxDate();
    public void set_MaxDate(Nullable`1<int> value);
    public string get_Languages();
    public void set_Languages(string value);
    public WixFileSearchAttributes get_Attributes();
    public void set_Attributes(WixFileSearchAttributes value);
    public WixFileSearchType get_Type();
    public void set_Type(WixFileSearchType value);
    public bool get_IsDirectory();
    public void set_IsDirectory(bool value);
    public bool get_MinVersionInclusive();
    public void set_MinVersionInclusive(bool value);
    public bool get_MaxVersionInclusive();
    public void set_MaxVersionInclusive(bool value);
    public bool get_MinSizeInclusive();
    public void set_MinSizeInclusive(bool value);
    public bool get_MaxSizeInclusive();
    public void set_MaxSizeInclusive(bool value);
    public bool get_MinDateInclusive();
    public void set_MinDateInclusive(bool value);
    public bool get_MaxDateInclusive();
    public void set_MaxDateInclusive(bool value);
    public bool get_DisableFileRedirection();
    public void set_DisableFileRedirection(bool value);
}
public enum WixToolset.Data.Symbols.WixFileSearchSymbolFields : Enum {
    public int value__;
    public static WixFileSearchSymbolFields Path;
    public static WixFileSearchSymbolFields MinVersion;
    public static WixFileSearchSymbolFields MaxVersion;
    public static WixFileSearchSymbolFields MinSize;
    public static WixFileSearchSymbolFields MaxSize;
    public static WixFileSearchSymbolFields MinDate;
    public static WixFileSearchSymbolFields MaxDate;
    public static WixFileSearchSymbolFields Languages;
    public static WixFileSearchSymbolFields Attributes;
    public static WixFileSearchSymbolFields Type;
}
public enum WixToolset.Data.Symbols.WixFileSearchType : Enum {
    public int value__;
    public static WixFileSearchType Path;
    public static WixFileSearchType Version;
    public static WixFileSearchType Exists;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixFragmentSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixFragmentSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixFragmentSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixFragmentSymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("WixGroupSymbol {ParentType} {ParentId,nq} -> {ChildType} {ChildId,nq}")]
public class WixToolset.Data.Symbols.WixGroupSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ParentId { get; public set; }
    public ComplexReferenceParentType ParentType { get; public set; }
    public string ChildId { get; public set; }
    public ComplexReferenceChildType ChildType { get; public set; }
    public WixGroupSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixGroupSymbolFields index);
    public string get_ParentId();
    public void set_ParentId(string value);
    public ComplexReferenceParentType get_ParentType();
    public void set_ParentType(ComplexReferenceParentType value);
    public string get_ChildId();
    public void set_ChildId(string value);
    public ComplexReferenceChildType get_ChildType();
    public void set_ChildType(ComplexReferenceChildType value);
}
public enum WixToolset.Data.Symbols.WixGroupSymbolFields : Enum {
    public int value__;
    public static WixGroupSymbolFields ParentId;
    public static WixGroupSymbolFields ParentType;
    public static WixGroupSymbolFields ChildId;
    public static WixGroupSymbolFields ChildType;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixInstanceComponentSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ComponentRef { get; public set; }
    public WixInstanceComponentSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixInstanceComponentSymbolFields index);
    public string get_ComponentRef();
    public void set_ComponentRef(string value);
}
public enum WixToolset.Data.Symbols.WixInstanceComponentSymbolFields : Enum {
    public int value__;
    public static WixInstanceComponentSymbolFields ComponentRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixInstanceTransformsSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PropertyId { get; public set; }
    public string ProductCode { get; public set; }
    public string ProductName { get; public set; }
    public string UpgradeCode { get; public set; }
    public WixInstanceTransformsSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixInstanceTransformsSymbolFields index);
    public string get_PropertyId();
    public void set_PropertyId(string value);
    public string get_ProductCode();
    public void set_ProductCode(string value);
    public string get_ProductName();
    public void set_ProductName(string value);
    public string get_UpgradeCode();
    public void set_UpgradeCode(string value);
}
public enum WixToolset.Data.Symbols.WixInstanceTransformsSymbolFields : Enum {
    public int value__;
    public static WixInstanceTransformsSymbolFields PropertyId;
    public static WixInstanceTransformsSymbolFields ProductCode;
    public static WixInstanceTransformsSymbolFields ProductName;
    public static WixInstanceTransformsSymbolFields UpgradeCode;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixMediaTemplateSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string CabinetTemplate { get; public set; }
    public Nullable`1<CompressionLevel> CompressionLevel { get; public set; }
    public string DiskPrompt { get; public set; }
    public string VolumeLabel { get; public set; }
    public Nullable`1<int> MaximumUncompressedMediaSize { get; public set; }
    public Nullable`1<int> MaximumCabinetSizeForLargeFileSplitting { get; public set; }
    public WixMediaTemplateSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixMediaTemplateSymbolFields index);
    public string get_CabinetTemplate();
    public void set_CabinetTemplate(string value);
    public Nullable`1<CompressionLevel> get_CompressionLevel();
    public void set_CompressionLevel(Nullable`1<CompressionLevel> value);
    public string get_DiskPrompt();
    public void set_DiskPrompt(string value);
    public string get_VolumeLabel();
    public void set_VolumeLabel(string value);
    public Nullable`1<int> get_MaximumUncompressedMediaSize();
    public void set_MaximumUncompressedMediaSize(Nullable`1<int> value);
    public Nullable`1<int> get_MaximumCabinetSizeForLargeFileSplitting();
    public void set_MaximumCabinetSizeForLargeFileSplitting(Nullable`1<int> value);
}
public enum WixToolset.Data.Symbols.WixMediaTemplateSymbolFields : Enum {
    public int value__;
    public static WixMediaTemplateSymbolFields CabinetTemplate;
    public static WixMediaTemplateSymbolFields CompressionLevel;
    public static WixMediaTemplateSymbolFields DiskPrompt;
    public static WixMediaTemplateSymbolFields VolumeLabel;
    public static WixMediaTemplateSymbolFields MaximumUncompressedMediaSize;
    public static WixMediaTemplateSymbolFields MaximumCabinetSizeForLargeFileSplitting;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixMergeSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public int Language { get; public set; }
    public string DirectoryRef { get; public set; }
    public string SourceFile { get; public set; }
    public int DiskId { get; public set; }
    public FileSymbolAttributes FileAttributes { get; public set; }
    public string ConfigurationData { get; public set; }
    public string FeatureRef { get; public set; }
    public WixMergeSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixMergeSymbolFields index);
    public int get_Language();
    public void set_Language(int value);
    public string get_DirectoryRef();
    public void set_DirectoryRef(string value);
    public string get_SourceFile();
    public void set_SourceFile(string value);
    public int get_DiskId();
    public void set_DiskId(int value);
    public FileSymbolAttributes get_FileAttributes();
    public void set_FileAttributes(FileSymbolAttributes value);
    public string get_ConfigurationData();
    public void set_ConfigurationData(string value);
    public string get_FeatureRef();
    public void set_FeatureRef(string value);
}
public enum WixToolset.Data.Symbols.WixMergeSymbolFields : Enum {
    public int value__;
    public static WixMergeSymbolFields Language;
    public static WixMergeSymbolFields DirectoryRef;
    public static WixMergeSymbolFields SourceFile;
    public static WixMergeSymbolFields DiskId;
    public static WixMergeSymbolFields FileAttributes;
    public static WixMergeSymbolFields ConfigurationData;
    public static WixMergeSymbolFields FeatureRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixModuleSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ModuleId { get; public set; }
    public string Language { get; public set; }
    public string Version { get; public set; }
    public string Codepage { get; public set; }
    public WixModuleSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixModuleSymbolFields index);
    public string get_ModuleId();
    public void set_ModuleId(string value);
    public string get_Language();
    public void set_Language(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Codepage();
    public void set_Codepage(string value);
}
public enum WixToolset.Data.Symbols.WixModuleSymbolFields : Enum {
    public int value__;
    public static WixModuleSymbolFields ModuleId;
    public static WixModuleSymbolFields Language;
    public static WixModuleSymbolFields Version;
    public static WixModuleSymbolFields Codepage;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixOrderingSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public ComplexReferenceChildType ItemType { get; public set; }
    public string ItemIdRef { get; public set; }
    public ComplexReferenceChildType DependsOnType { get; public set; }
    public string DependsOnIdRef { get; public set; }
    public WixOrderingSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixOrderingSymbolFields index);
    public ComplexReferenceChildType get_ItemType();
    public void set_ItemType(ComplexReferenceChildType value);
    public string get_ItemIdRef();
    public void set_ItemIdRef(string value);
    public ComplexReferenceChildType get_DependsOnType();
    public void set_DependsOnType(ComplexReferenceChildType value);
    public string get_DependsOnIdRef();
    public void set_DependsOnIdRef(string value);
}
public enum WixToolset.Data.Symbols.WixOrderingSymbolFields : Enum {
    public int value__;
    public static WixOrderingSymbolFields ItemType;
    public static WixOrderingSymbolFields ItemIdRef;
    public static WixOrderingSymbolFields DependsOnType;
    public static WixOrderingSymbolFields DependsOnIdRef;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixPackageAttributes : Enum {
    public int value__;
    public static WixPackageAttributes None;
    public static WixPackageAttributes PerMachine;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPackageSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PackageId { get; public set; }
    public string UpgradeCode { get; public set; }
    public string Name { get; public set; }
    public string Language { get; public set; }
    public string Version { get; public set; }
    public string Manufacturer { get; public set; }
    public WixPackageAttributes Attributes { get; public set; }
    public string Codepage { get; public set; }
    public WixPackageUpgradeStrategy UpgradeStrategy { get; public set; }
    public bool PerMachine { get; }
    public WixPackageSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPackageSymbolFields index);
    public string get_PackageId();
    public void set_PackageId(string value);
    public string get_UpgradeCode();
    public void set_UpgradeCode(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Language();
    public void set_Language(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Manufacturer();
    public void set_Manufacturer(string value);
    public WixPackageAttributes get_Attributes();
    public void set_Attributes(WixPackageAttributes value);
    public string get_Codepage();
    public void set_Codepage(string value);
    public WixPackageUpgradeStrategy get_UpgradeStrategy();
    public void set_UpgradeStrategy(WixPackageUpgradeStrategy value);
    public bool get_PerMachine();
}
public enum WixToolset.Data.Symbols.WixPackageSymbolFields : Enum {
    public int value__;
    public static WixPackageSymbolFields PackageId;
    public static WixPackageSymbolFields UpgradeCode;
    public static WixPackageSymbolFields Name;
    public static WixPackageSymbolFields Language;
    public static WixPackageSymbolFields Version;
    public static WixPackageSymbolFields Manufacturer;
    public static WixPackageSymbolFields Attributes;
    public static WixPackageSymbolFields Codepage;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPackageTagSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string FileRef { get; public set; }
    public string Regid { get; public set; }
    public string Name { get; public set; }
    public int Attributes { get; public set; }
    public WixPackageTagSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPackageTagSymbolFields index);
    public string get_FileRef();
    public void set_FileRef(string value);
    public string get_Regid();
    public void set_Regid(string value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Attributes();
    public void set_Attributes(int value);
}
public enum WixToolset.Data.Symbols.WixPackageTagSymbolFields : Enum {
    public int value__;
    public static WixPackageTagSymbolFields FileRef;
    public static WixPackageTagSymbolFields Regid;
    public static WixPackageTagSymbolFields Name;
    public static WixPackageTagSymbolFields Attributes;
}
public enum WixToolset.Data.Symbols.WixPackageUpgradeStrategy : Enum {
    public int value__;
    public static WixPackageUpgradeStrategy None;
    public static WixPackageUpgradeStrategy MajorUpgrade;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPatchBaselineSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public int DiskId { get; public set; }
    public TransformFlags ValidationFlags { get; public set; }
    public IntermediateFieldPathValue BaselineFile { get; public set; }
    public IntermediateFieldPathValue UpdateFile { get; public set; }
    public WixPatchBaselineSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPatchBaselineSymbolFields index);
    public int get_DiskId();
    public void set_DiskId(int value);
    public TransformFlags get_ValidationFlags();
    public void set_ValidationFlags(TransformFlags value);
    public IntermediateFieldPathValue get_BaselineFile();
    public void set_BaselineFile(IntermediateFieldPathValue value);
    public IntermediateFieldPathValue get_UpdateFile();
    public void set_UpdateFile(IntermediateFieldPathValue value);
}
public enum WixToolset.Data.Symbols.WixPatchBaselineSymbolFields : Enum {
    public int value__;
    public static WixPatchBaselineSymbolFields DiskId;
    public static WixPatchBaselineSymbolFields ValidationFlags;
    public static WixPatchBaselineSymbolFields BaselineFile;
    public static WixPatchBaselineSymbolFields UpdateFile;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPatchFamilyGroupSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string WixPatchFamilyGroup { get; public set; }
    public WixPatchFamilyGroupSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPatchFamilyGroupSymbolFields index);
    public string get_WixPatchFamilyGroup();
    public void set_WixPatchFamilyGroup(string value);
}
public enum WixToolset.Data.Symbols.WixPatchFamilyGroupSymbolFields : Enum {
    public int value__;
    public static WixPatchFamilyGroupSymbolFields WixPatchFamilyGroup;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPatchRefSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Table { get; public set; }
    public string PrimaryKeys { get; public set; }
    public WixPatchRefSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPatchRefSymbolFields index);
    public string get_Table();
    public void set_Table(string value);
    public string get_PrimaryKeys();
    public void set_PrimaryKeys(string value);
}
public enum WixToolset.Data.Symbols.WixPatchRefSymbolFields : Enum {
    public int value__;
    public static WixPatchRefSymbolFields Table;
    public static WixPatchRefSymbolFields PrimaryKeys;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPatchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ClientPatchId { get; public set; }
    public Nullable`1<bool> OptimizePatchSizeForLargeFiles { get; public set; }
    public Nullable`1<int> ApiPatchingSymbolFlags { get; public set; }
    public string Codepage { get; public set; }
    public WixPatchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPatchSymbolFields index);
    public string get_ClientPatchId();
    public void set_ClientPatchId(string value);
    public Nullable`1<bool> get_OptimizePatchSizeForLargeFiles();
    public void set_OptimizePatchSizeForLargeFiles(Nullable`1<bool> value);
    public Nullable`1<int> get_ApiPatchingSymbolFlags();
    public void set_ApiPatchingSymbolFlags(Nullable`1<int> value);
    public string get_Codepage();
    public void set_Codepage(string value);
}
public enum WixToolset.Data.Symbols.WixPatchSymbolFields : Enum {
    public int value__;
    public static WixPatchSymbolFields ClientPatchId;
    public static WixPatchSymbolFields OptimizePatchSizeForLargeFiles;
    public static WixPatchSymbolFields ApiPatchingSymbolFlags;
    public static WixPatchSymbolFields Codepage;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPatchTargetSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ProductCode { get; public set; }
    public WixPatchTargetSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPatchTargetSymbolFields index);
    public string get_ProductCode();
    public void set_ProductCode(string value);
}
public enum WixToolset.Data.Symbols.WixPatchTargetSymbolFields : Enum {
    public int value__;
    public static WixPatchTargetSymbolFields ProductCode;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixProductSearchAttributes : Enum {
    public int value__;
    public static WixProductSearchAttributes None;
    public static WixProductSearchAttributes UpgradeCode;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixProductSearchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Guid { get; public set; }
    public WixProductSearchAttributes Attributes { get; public set; }
    public WixProductSearchType Type { get; public set; }
    public bool IsUpgradeCode { get; public set; }
    public WixProductSearchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixProductSearchSymbolFields index);
    public string get_Guid();
    public void set_Guid(string value);
    public WixProductSearchAttributes get_Attributes();
    public void set_Attributes(WixProductSearchAttributes value);
    public WixProductSearchType get_Type();
    public void set_Type(WixProductSearchType value);
    public bool get_IsUpgradeCode();
    public void set_IsUpgradeCode(bool value);
}
public enum WixToolset.Data.Symbols.WixProductSearchSymbolFields : Enum {
    public int value__;
    public static WixProductSearchSymbolFields Guid;
    public static WixProductSearchSymbolFields Attributes;
    public static WixProductSearchSymbolFields Type;
}
public enum WixToolset.Data.Symbols.WixProductSearchType : Enum {
    public int value__;
    public static WixProductSearchType Version;
    public static WixProductSearchType Language;
    public static WixProductSearchType State;
    public static WixProductSearchType Assignment;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixPropertySymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string PropertyRef { get; public set; }
    public bool Admin { get; public set; }
    public bool Hidden { get; public set; }
    public bool Secure { get; public set; }
    public WixPropertySymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixPropertySymbolFields index);
    public string get_PropertyRef();
    public void set_PropertyRef(string value);
    public bool get_Admin();
    public void set_Admin(bool value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_Secure();
    public void set_Secure(bool value);
}
public enum WixToolset.Data.Symbols.WixPropertySymbolFields : Enum {
    public int value__;
    public static WixPropertySymbolFields PropertyRef;
    public static WixPropertySymbolFields Admin;
    public static WixPropertySymbolFields Hidden;
    public static WixPropertySymbolFields Secure;
}
[FlagsAttribute]
public enum WixToolset.Data.Symbols.WixRegistrySearchAttributes : Enum {
    public int value__;
    public static WixRegistrySearchAttributes None;
    public static WixRegistrySearchAttributes ExpandEnvironmentVariables;
    public static WixRegistrySearchAttributes Win64;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixRegistrySearchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public RegistryRootType Root { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public WixRegistrySearchAttributes Attributes { get; public set; }
    public WixRegistrySearchType Type { get; public set; }
    public bool ExpandEnvironmentVariables { get; public set; }
    public bool Win64 { get; public set; }
    public WixRegistrySearchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixRegistrySearchSymbolFields index);
    public RegistryRootType get_Root();
    public void set_Root(RegistryRootType value);
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
    public WixRegistrySearchAttributes get_Attributes();
    public void set_Attributes(WixRegistrySearchAttributes value);
    public WixRegistrySearchType get_Type();
    public void set_Type(WixRegistrySearchType value);
    public bool get_ExpandEnvironmentVariables();
    public void set_ExpandEnvironmentVariables(bool value);
    public bool get_Win64();
    public void set_Win64(bool value);
}
public enum WixToolset.Data.Symbols.WixRegistrySearchSymbolFields : Enum {
    public int value__;
    public static WixRegistrySearchSymbolFields Root;
    public static WixRegistrySearchSymbolFields Key;
    public static WixRegistrySearchSymbolFields Value;
    public static WixRegistrySearchSymbolFields Attributes;
    public static WixRegistrySearchSymbolFields Type;
}
public enum WixToolset.Data.Symbols.WixRegistrySearchType : Enum {
    public int value__;
    public static WixRegistrySearchType Value;
    public static WixRegistrySearchType Exists;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixRelatedBundleSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string BundleId { get; public set; }
    public RelatedBundleActionType Action { get; public set; }
    public WixRelatedBundleSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixRelatedBundleSymbolFields index);
    public string get_BundleId();
    public void set_BundleId(string value);
    public RelatedBundleActionType get_Action();
    public void set_Action(RelatedBundleActionType value);
}
public enum WixToolset.Data.Symbols.WixRelatedBundleSymbolFields : Enum {
    public int value__;
    public static WixRelatedBundleSymbolFields BundleId;
    public static WixRelatedBundleSymbolFields Action;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixSearchRelationSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string ParentSearchRef { get; public set; }
    public int Attributes { get; public set; }
    public WixSearchRelationSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixSearchRelationSymbolFields index);
    public string get_ParentSearchRef();
    public void set_ParentSearchRef(string value);
    public int get_Attributes();
    public void set_Attributes(int value);
}
public enum WixToolset.Data.Symbols.WixSearchRelationSymbolFields : Enum {
    public int value__;
    public static WixSearchRelationSymbolFields ParentSearchRef;
    public static WixSearchRelationSymbolFields Attributes;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixSearchSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Variable { get; public set; }
    public string Condition { get; public set; }
    public string BootstrapperExtensionRef { get; public set; }
    public WixSearchSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixSearchSymbolFields index);
    public string get_Variable();
    public void set_Variable(string value);
    public string get_Condition();
    public void set_Condition(string value);
    public string get_BootstrapperExtensionRef();
    public void set_BootstrapperExtensionRef(string value);
}
public enum WixToolset.Data.Symbols.WixSearchSymbolFields : Enum {
    public int value__;
    public static WixSearchSymbolFields Variable;
    public static WixSearchSymbolFields Condition;
    public static WixSearchSymbolFields BootstrapperExtensionRef;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixSetVariableSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Value { get; public set; }
    public WixBundleVariableType Type { get; public set; }
    public WixSetVariableSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixSetVariableSymbolFields index);
    public string get_Value();
    public void set_Value(string value);
    public WixBundleVariableType get_Type();
    public void set_Type(WixBundleVariableType value);
}
public enum WixToolset.Data.Symbols.WixSetVariableSymbolFields : Enum {
    public int value__;
    public static WixSetVariableSymbolFields Value;
    public static WixSetVariableSymbolFields Type;
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Ref {SymbolicName,nq}")]
public class WixToolset.Data.Symbols.WixSimpleReferenceSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Table { get; public set; }
    public string PrimaryKeys { get; public set; }
    public string SymbolicName { get; }
    public WixSimpleReferenceSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixSimpleReferenceSymbolFields index);
    public string get_Table();
    public void set_Table(string value);
    public string get_PrimaryKeys();
    public void set_PrimaryKeys(string value);
    public string get_SymbolicName();
}
public enum WixToolset.Data.Symbols.WixSimpleReferenceSymbolFields : Enum {
    public int value__;
    public static WixSimpleReferenceSymbolFields Table;
    public static WixSimpleReferenceSymbolFields PrimaryKeys;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixSuppressActionSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public SequenceTable SequenceTable { get; public set; }
    public string Action { get; public set; }
    public WixSuppressActionSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixSuppressActionSymbolFields index);
    public SequenceTable get_SequenceTable();
    public void set_SequenceTable(SequenceTable value);
    public string get_Action();
    public void set_Action(string value);
}
public enum WixToolset.Data.Symbols.WixSuppressActionSymbolFields : Enum {
    public int value__;
    public static WixSuppressActionSymbolFields SequenceTable;
    public static WixSuppressActionSymbolFields Action;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixSuppressModularizationSymbol : IntermediateSymbol {
    public string SuppressIdentifier { get; public set; }
    public IntermediateField Item { get; }
    public WixSuppressModularizationSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public string get_SuppressIdentifier();
    public void set_SuppressIdentifier(string value);
    public IntermediateField get_Item(WixSuppressModularizationSymbolFields index);
}
public enum WixToolset.Data.Symbols.WixSuppressModularizationSymbolFields : Enum {
    public int value__;
    public static WixSuppressModularizationSymbolFields SuppressIdentifier;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixUISymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public WixUISymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixUISymbolFields index);
}
public enum WixToolset.Data.Symbols.WixUISymbolFields : Enum {
    public int value__;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixUpdateRegistrationSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Manufacturer { get; public set; }
    public string Department { get; public set; }
    public string ProductFamily { get; public set; }
    public string Name { get; public set; }
    public string Classification { get; public set; }
    public WixUpdateRegistrationSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixUpdateRegistrationSymbolFields index);
    public string get_Manufacturer();
    public void set_Manufacturer(string value);
    public string get_Department();
    public void set_Department(string value);
    public string get_ProductFamily();
    public void set_ProductFamily(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Classification();
    public void set_Classification(string value);
}
public enum WixToolset.Data.Symbols.WixUpdateRegistrationSymbolFields : Enum {
    public int value__;
    public static WixUpdateRegistrationSymbolFields Manufacturer;
    public static WixUpdateRegistrationSymbolFields Department;
    public static WixUpdateRegistrationSymbolFields ProductFamily;
    public static WixUpdateRegistrationSymbolFields Name;
    public static WixUpdateRegistrationSymbolFields Classification;
}
public static class WixToolset.Data.Symbols.WixUpgradeConstants : object {
    public static string UpgradeDetectedProperty;
    public static string UpgradePreventedCondition;
    public static string DowngradeDetectedProperty;
    public static string DowngradePreventedCondition;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.Symbols.WixVariableSymbol : IntermediateSymbol {
    public IntermediateField Item { get; }
    public string Value { get; public set; }
    public bool Overridable { get; public set; }
    public WixVariableSymbol(SourceLineNumber sourceLineNumber, Identifier id);
    public IntermediateField get_Item(WixVariableSymbolFields index);
    public string get_Value();
    public void set_Value(string value);
    public bool get_Overridable();
    public void set_Overridable(bool value);
}
public enum WixToolset.Data.Symbols.WixVariableSymbolFields : Enum {
    public int value__;
    public static WixVariableSymbolFields Value;
    public static WixVariableSymbolFields Overridable;
}
public static class WixToolset.Data.VerboseMessages : object {
    public static Message BinderTempDirLocatedAt(string directory);
    public static Message BundleGuid(string bundleGuid);
    public static Message CabFile(string fileId, string filePath);
    public static Message CabinetsSplitInParallel();
    public static Message ConnectingMergeModule(string modulePath, string feature);
    public static Message CopyFile(string sourceFile, string destinationFile);
    public static Message CopyingExternalPayload(string payload, string outputDirectory);
    public static Message CreateCabinet(string cabinet);
    public static Message CreateDirectory(string directory);
    public static Message CreatingCabinetFiles();
    public static Message DecompilingTable(string tableName);
    public static Message EmbeddingContainer(string container, long size, string compression);
    public static Message GeneratingBundle(string bundleFile, string stubFile);
    public static Message GeneratingDatabase();
    public static Message ImportBinaryStream(string streamSource);
    public static Message ImportIconStream(string streamSource);
    public static Message ImportingStreams();
    public static Message LayingOutMedia();
    public static Message LoadingPayload(string payload);
    public static Message MergingMergeModule(string modulePath);
    public static Message MergingModules();
    public static Message MoveFile(string sourceFile, string destinationFile);
    public static Message OpeningMergeModule(string modulePath, short language);
    public static Message RemoveDestinationFile(string destinationFile);
    public static Message ResequencingMergeModuleFiles();
    public static Message ResolvingManifest(string manifestFile);
    public static Message ReusingCabCache(SourceLineNumber sourceLineNumbers, string cabinetName, string source);
    public static Message SetCabbingThreadCount(string threads);
    public static Message SwitchingToPerUserPackage(SourceLineNumber sourceLineNumbers, string path);
    public static Message UpdatingFileInformation();
    public static Message ValidatedDatabase(long size);
    public static Message ValidatingDatabase();
    public static Message ValidationInfo(string ice, string message);
    public static Message ValidationSerialized();
    public static Message ValidatorTempDirLocatedAt(string directory);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, ResourceManager resourceManager, string resourceName, Object[] args);
}
public static class WixToolset.Data.WarningMessages : object {
    public static Message AccessDeniedForDeletion(SourceLineNumber sourceLineNumbers, string tempFilesBasePath);
    public static Message AccessDeniedForSettingAttributes(SourceLineNumber sourceLineNumbers, string filePath);
    public static Message ActionSequenceCollision(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName1, string actionName2, int sequenceNumber);
    public static Message ActionSequenceCollision2(SourceLineNumber sourceLineNumbers);
    public static Message AllChangesIncludedInPatch(SourceLineNumber sourceLineNumbers);
    public static Message AmbiguousFileOrDirectoryName(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message AttributeShouldContain(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue, string expectedContains, string otherAttributeName, string otherAttributeValue);
    public static Message BackslashTerminateInlineDirectorySyntax(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message BadColumnDataIgnored(SourceLineNumber sourceLineNumbers, string value, string tableName, string columnName);
    public static Message CannotUpdateCabCache(SourceLineNumber sourceLineNumbers, string cabinetPath, string detail);
    public static Message ColumnsIncompatibleWithInstallerVersion(SourceLineNumber sourceLineNumbers, string tableName, int packageInstallerVersion);
    public static Message CopyFileFileIdUseless(SourceLineNumber sourceLineNumbers);
    public static Message DangerousTableInMergeModule(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message DecompiledStandardActionRelativelyScheduledInModule(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message DecompilingAsCustomTable(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message DefaultLanguageUsedForUnversionedFile(SourceLineNumber sourceLineNumbers, string language, string fileId);
    public static Message DefaultLanguageUsedForVersionedFile(SourceLineNumber sourceLineNumbers, string language, string fileId);
    public static Message DefaultVersionUsedForUnversionedFile(SourceLineNumber sourceLineNumbers, string version, string fileId);
    public static Message DeprecatedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message DeprecatedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string newAttributeName);
    public static Message DeprecatedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string newAttributeName1, string newAttributeName2);
    public static Message DeprecatedAttributeValue(SourceLineNumber sourceLineNumbers, string attributeValue, string elementName, string attributeName);
    public static Message DeprecatedAttributeValue(SourceLineNumber sourceLineNumbers, string attributeValue, string elementName, string attributeName, string newAttributeValue);
    public static Message DeprecatedCommandLineSwitch(string oldSwitch);
    public static Message DeprecatedCommandLineSwitch(string oldSwitch, string newSwitch);
    public static Message DeprecatedComponentGroupId(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message DeprecatedElement(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message DeprecatedElement(SourceLineNumber sourceLineNumbers, string elementName, string newElementName);
    public static Message DeprecatedElement(SourceLineNumber sourceLineNumbers, string elementName, string newElementName1, string newElementName2);
    public static Message DeprecatedIgnoreModularizationElement(SourceLineNumber sourceLineNumbers);
    public static Message DeprecatedLocalizationVariablePrefix(SourceLineNumber sourceLineNumbers, string variableId);
    public static Message DeprecatedLongNameAttribute(SourceLineNumber sourceLineNumbers, string elementName, string longNameAttributeName, string nameAttributeName, string shortNameAttributeName);
    public static Message DeprecatedPatchSequenceTargetAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message DeprecatedPreProcVariable(SourceLineNumber sourceLineNumbers, string oldName, string newName);
    public static Message DeprecatedQuestionMarksGuid(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message DeprecatedRegistryElement(SourceLineNumber sourceLineNumbers);
    public static Message DeprecatedRegistryKeyActionAttribute(SourceLineNumber sourceLineNumbers);
    public static Message DeprecatedTable(string tableName);
    public static Message DeprecatedUpgradeProperty(SourceLineNumber sourceLineNumbers);
    public static Message DirectoryInUse(SourceLineNumber sourceLineNumbers, string filePath);
    public static Message DirectoryRedundantNames(SourceLineNumber sourceLineNumbers, string elementName, string shortNameAttributeName, string longNameAttributeName, string attributeValue);
    public static Message DirectoryRedundantNames(SourceLineNumber sourceLineNumbers, string elementName, string sourceNameAttributeName, string longSourceAttributeName);
    public static Message DiscardedRollbackBoundary(SourceLineNumber sourceLineNumbers, string rollbackBoundaryId);
    public static Message DiscardedRollbackBoundary2(SourceLineNumber sourceLineNumbers);
    public static Message DiscouragedAllUsersValue(SourceLineNumber sourceLineNumbers, string path, string machineOrUser);
    public static Message DetectConditionRecommended(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message ExePackageDetectInformationRecommended(SourceLineNumber sourceLineNumbers);
    public static Message DownloadUrlNotSupportedForAttachedContainers(SourceLineNumber sourceLineNumbers, string containerId);
    public static Message DownloadUrlNotSupportedForBAPayloads(SourceLineNumber sourceLineNumbers, string payloadId);
    public static Message DuplicateComponentGuidsMustHaveMutuallyExclusiveConditions(SourceLineNumber sourceLineNumbers, string componentId, string guid, string type, string keyPath);
    public static Message DuplicatePrimaryKey(SourceLineNumber sourceLineNumbers, string primaryKey, string tableName);
    public static Message EmptyAttributeValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message EmptyCabinet(SourceLineNumber sourceLineNumbers, string cabinetName, bool isPatch);
    public static Message ExpectedForeignRow(SourceLineNumber sourceLineNumbers, string tableName, string primaryKey, string columnName, string columnValue, string foreignTableName);
    public static Message ExpectedForeignRow(SourceLineNumber sourceLineNumbers, string tableName, string primaryKey, string columnName1, string columnValue1, string columnName2, string columnValue2, string foreignTableName);
    public static Message ExternalCabsAreNotSigned(string databaseFile);
    public static Message FailedToDeleteTempDir(string directory);
    public static Message FileSearchFileNameIssue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName1, string attributeName2);
    public static Message GeneratedShortFileNameConflict(SourceLineNumber sourceLineNumbers, string shortFileName);
    public static Message GeneratedShortFileNameConflict2(SourceLineNumber sourceLineNumbers);
    public static Message IdentifierCannotBeModularized(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string identifier, int length, int maximumLength);
    public static Message IdentifierTooLong(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalActionInSequence(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message IllegalColumnValue(SourceLineNumber sourceLineNumbers, string tableName, string columnName, object value);
    public static Message IllegalPatchCreationTable(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message IllegalRegistryKeyPath(SourceLineNumber sourceLineNumbers, string componentName, string registryId);
    public static Message ImplicitComponentPrimaryFeature(string componentId);
    public static Message ImplicitlyPerUser(SourceLineNumber sourceLineNumbers, string path);
    public static Message ImplicitMergeModulePrimaryFeature(string componentId);
    public static Message InsufficientPermissionHarvestTypeLib();
    public static Message InvalidAttributeCombination(SourceLineNumber sourceLineNumbers, string attrib1, string attrib2, string name, string value);
    public static Message InvalidHigherInstallerVersionInModule(SourceLineNumber sourceLineNumbers, string moduleId, int moduleInstallerVersion, int packageInstallerVersion);
    public static Message InvalidFourPartVersion(SourceLineNumber sourceLineNumbers, string elementName, string version);
    public static Message InvalidRemoveFile(SourceLineNumber sourceLineNumbers, string file, string component);
    public static Message MajorUpgradePatchNotRecommended();
    public static Message MediaExternalCabinetFilenameIllegal(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message MergeRescheduledAction(SourceLineNumber sourceLineNumbers, string tableName, string actionName, string mergeModuleFile);
    public static Message MergeTableFailed(SourceLineNumber sourceLineNumbers, string tableName, string primaryKeys, string mergeModuleFile);
    public static Message MissingUpgradeCode(SourceLineNumber sourceLineNumbers);
    public static Message MsiTransactionLimitations(SourceLineNumber sourceLineNumbers);
    public static Message NestedInstall(SourceLineNumber sourceLineNumbers, string tableName, string columnName, object value);
    public static Message NewComponentAddedToExistingFeature(SourceLineNumber sourceLineNumbers, string component, string feature, string transformPath);
    public static Message NoPerMachineDependencies(SourceLineNumber sourceLineNumbers, string packageId);
    public static Message NotABinaryWixlib(string wixlib);
    public static Message NullMsiAssemblyNameValue(SourceLineNumber sourceLineNumbers, string componentName, string name);
    public static Message OrphanedProgId(SourceLineNumber sourceLineNumbers, string progId);
    public static Message PackageCodeSet(SourceLineNumber sourceLineNumbers);
    public static Message PatchTable(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message PathCanonicalized(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string originalValue, string canonicalValue);
    public static Message PerUserButForcingPerMachine(SourceLineNumber sourceLineNumbers, string path);
    public static Message PlaceholderValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message PossiblyIncorrectTypelibVersion(SourceLineNumber sourceLineNumbers, string id);
    public static Message PreprocessorUnknownPragma(SourceLineNumber sourceLineNumbers, string pragmaName);
    public static Message PreprocessorWarning(SourceLineNumber sourceLineNumbers, string message);
    public static Message ProductIdAuthored(SourceLineNumber sourceLineNumbers);
    public static Message PropertyModularizationSuppressed(SourceLineNumber sourceLineNumbers);
    public static Message PropertyUseless(SourceLineNumber sourceLineNumbers, string id);
    public static Message PropertyValueContainsPropertyReference(SourceLineNumber sourceLineNumbers, string propertyId, string otherProperty);
    public static Message RelatedAttributeConditionallyIgnored(SourceLineNumber sourceLineNumbers, string recessiveAttribute, string dominantAttribute, string dominantValue);
    public static Message RemotePayloadsMustNotAlsoBeCompressed(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message RemoveFileNameRequired(SourceLineNumber sourceLineNumbers);
    public static Message RequiresMsi200for64bitPackage(SourceLineNumber sourceLineNumbers);
    public static Message RequiresMsi500forArmPackage(SourceLineNumber sourceLineNumbers);
    public static Message ReservedAttribute(SourceLineNumber sourceLineNumbers, string elementName, string attributeName);
    public static Message RetainRangeMismatch(SourceLineNumber sourceLineNumbers, string fileId);
    public static Message ServiceConfigFamilyNotSupported(SourceLineNumber sourceLineNumbers, string elementName);
    public static Message SkippingMergeModuleTable(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message SkippingPatchCreationTable(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message StandardDirectoryConflictInMergeModule(SourceLineNumber sourceLineNumbers, string directory, string standardDirectory);
    public static Message SuppressAction(SourceLineNumber sourceLineNumbers, string action, string sequenceName);
    public static Message SuppressAction2(SourceLineNumber sourceLineNumbers);
    public static Message SuppressMergedAction(string action, string sequenceName);
    public static Message TableIncompatibleWithInstallerVersion(SourceLineNumber sourceLineNumbers, string tableName, int packageInstallerVersion);
    public static Message TargetDirCorrectedDefaultDir();
    public static Message TooManyProgIds(SourceLineNumber sourceLineNumbers, string clsId, string progId, string otherClsId);
    public static Message SymbolNotTranslatedToOutput(IntermediateSymbol symbol);
    public static Message UnableToFindFileFromCabOrImage(SourceLineNumber sourceLineNumbers, string existingFileSpec, string srcFileSpec);
    public static Message UnableToResetAcls(string error);
    public static Message UnavailableBundleConditionVariable(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string variable, string illegalValueList);
    public static Message UnclearShortcut(SourceLineNumber sourceLineNumbers, string shortcutId, string fileId, string componentId);
    public static Message UnexpectedEntrySection(SourceLineNumber sourceLineNumbers, string sectionType, string expectedType);
    public static Message UnexpectedTableInProduct(SourceLineNumber sourceLineNumbers, string tableName);
    public static Message UnknownAction(SourceLineNumber sourceLineNumbers, string sequenceTableName, string actionName);
    public static Message UnknownPermission(SourceLineNumber sourceLineNumbers, string tableName, string primaryKey, int bitPosition);
    public static Message UnrepresentableColumnValue(SourceLineNumber sourceLineNumbers, string tableName, string columnName, object value);
    public static Message UnsupportedCommandLineArgument(string arg);
    public static Message UnsupportedCommandLineArgumentValue(string arg, string value, string fallback);
    public static Message UpdateOfNonKeyPathFile(string nonKeyPathFileId, string componentId, string keyPathFileId);
    public static Message UxPayloadsOnlySupportEmbedding(SourceLineNumber sourceLineNumbers, string sourceFile);
    public static Message ValidationFailedDueToSystemPolicy();
    public static Message ValidationWarning(SourceLineNumber sourceLineNumbers, string ice, string message);
    public static Message VariableDeclarationCollision(SourceLineNumber sourceLineNumbers, string variableName, string variableValue, string variableCollidingValue);
    public static Message InvalidMsiProductVersion(SourceLineNumber sourceLineNumbers, string version, string package);
    public static Message InvalidMsiProductVersion(SourceLineNumber sourceLineNumbers, string version);
    public static Message CollidingModularizationTypes(string tableName, string columnName, string foreignTableName, int foreignColumnNumber, string modularizationType, string foreignModularizationType);
    public static Message InvalidEnvironmentVariable(string environmentVariable, string value, string defaultValue);
    public static Message WindowsInstallerFileTooLarge(SourceLineNumber sourceLineNumbers, string path, string fileDescription);
    public static Message InvalidWixVersion(SourceLineNumber sourceLineNumbers, string version, string elementName, string attributeName);
    public static Message VBScriptIsDeprecated(SourceLineNumber sourceLineNumbers);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, ResourceManager resourceManager, string resourceName, Object[] args);
}
public enum WixToolset.Data.WindowsInstaller.ColumnCategory : Enum {
    public int value__;
    public static ColumnCategory Unknown;
    public static ColumnCategory Text;
    public static ColumnCategory UpperCase;
    public static ColumnCategory LowerCase;
    public static ColumnCategory Integer;
    public static ColumnCategory DoubleInteger;
    public static ColumnCategory TimeDate;
    public static ColumnCategory Identifier;
    public static ColumnCategory Property;
    public static ColumnCategory Filename;
    public static ColumnCategory WildCardFilename;
    public static ColumnCategory Path;
    public static ColumnCategory Paths;
    public static ColumnCategory AnyPath;
    public static ColumnCategory DefaultDir;
    public static ColumnCategory RegPath;
    public static ColumnCategory Formatted;
    public static ColumnCategory Template;
    public static ColumnCategory Condition;
    public static ColumnCategory Guid;
    public static ColumnCategory Version;
    public static ColumnCategory Language;
    public static ColumnCategory Binary;
    public static ColumnCategory CustomSource;
    public static ColumnCategory Cabinet;
    public static ColumnCategory Shortcut;
    public static ColumnCategory FormattedSDDLText;
}
public class WixToolset.Data.WindowsInstaller.ColumnDefinition : object {
    [CompilerGeneratedAttribute]
private bool <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnModularizeType <ModularizeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocalizable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeyColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnCategory <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Possibilities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unreal>k__BackingField;
    public bool Added { get; public set; }
    public string Name { get; }
    public ColumnType Type { get; }
    public int Length { get; }
    public bool PrimaryKey { get; }
    public bool Nullable { get; }
    public ColumnModularizeType ModularizeType { get; }
    public bool IsLocalizable { get; }
    public Nullable`1<long> MinValue { get; }
    public Nullable`1<long> MaxValue { get; }
    public string KeyTable { get; }
    public Nullable`1<int> KeyColumn { get; }
    public ColumnCategory Category { get; }
    public string Possibilities { get; }
    public string Description { get; }
    public bool UseCData { get; }
    public bool Unreal { get; }
    public ColumnDefinition(string name, ColumnType type, int length, bool primaryKey, bool nullable, ColumnCategory category, Nullable`1<long> minValue, Nullable`1<long> maxValue, string keyTable, Nullable`1<int> keyColumn, string possibilities, string description, Nullable`1<ColumnModularizeType> modularizeType, bool forceLocalizable, bool useCData, bool unreal);
    [CompilerGeneratedAttribute]
public bool get_Added();
    [CompilerGeneratedAttribute]
public void set_Added(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ColumnType get_Type();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public bool get_PrimaryKey();
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public ColumnModularizeType get_ModularizeType();
    [CompilerGeneratedAttribute]
public bool get_IsLocalizable();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public string get_KeyTable();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeyColumn();
    [CompilerGeneratedAttribute]
public ColumnCategory get_Category();
    [CompilerGeneratedAttribute]
public string get_Possibilities();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public bool get_UseCData();
    [CompilerGeneratedAttribute]
public bool get_Unreal();
    internal static ColumnDefinition Read(XmlReader reader);
    internal void Write(XmlWriter writer);
    public sealed virtual int CompareTo(ColumnDefinition other);
    private static ColumnModularizeType CalculateModularizationType(Nullable`1<ColumnModularizeType> modularizeType, ColumnCategory category);
}
public enum WixToolset.Data.WindowsInstaller.ColumnModularizeType : Enum {
    public int value__;
    public static ColumnModularizeType None;
    public static ColumnModularizeType Column;
    public static ColumnModularizeType Icon;
    public static ColumnModularizeType CompanionFile;
    public static ColumnModularizeType Condition;
    public static ColumnModularizeType ControlEventArgument;
    public static ColumnModularizeType ControlText;
    public static ColumnModularizeType Property;
    public static ColumnModularizeType SemicolonDelimited;
}
public enum WixToolset.Data.WindowsInstaller.ColumnType : Enum {
    public int value__;
    public static ColumnType Unknown;
    public static ColumnType String;
    public static ColumnType Localized;
    public static ColumnType Number;
    public static ColumnType Object;
    public static ColumnType Preserved;
}
public class WixToolset.Data.WindowsInstaller.Field : object {
    private object data;
    [CompilerGeneratedAttribute]
private ColumnDefinition <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Modified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousData>k__BackingField;
    public ColumnDefinition Column { get; private set; }
    public object Data { get; public set; }
    public bool Modified { get; public set; }
    public string PreviousData { get; public set; }
    protected Field(ColumnDefinition columnDefinition);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(ColumnDefinition value);
    public object get_Data();
    public void set_Data(object value);
    [CompilerGeneratedAttribute]
public bool get_Modified();
    [CompilerGeneratedAttribute]
public void set_Modified(bool value);
    [CompilerGeneratedAttribute]
public string get_PreviousData();
    [CompilerGeneratedAttribute]
public void set_PreviousData(string value);
    public static Field Create(ColumnDefinition columnDefinition);
    public bool BestEffortSet(object value);
    public bool IsIdentical(Field field);
    public virtual string ToString();
    public int AsInteger();
    public Nullable`1<int> AsNullableInteger();
    public string AsString();
    internal object ValidateValue(ColumnDefinition column, object value);
    internal virtual void Read(XmlReader reader);
    internal virtual void Write(XmlWriter writer);
}
public static class WixToolset.Data.WindowsInstaller.IntermediateLevels : object {
    public static string FullyBound;
}
public class WixToolset.Data.WindowsInstaller.ObjectField : Field {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EmbeddedFileIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreviousEmbeddedFileIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PreviousBaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnresolvedData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnresolvedPreviousData>k__BackingField;
    public Nullable`1<int> EmbeddedFileIndex { get; public set; }
    public Nullable`1<int> PreviousEmbeddedFileIndex { get; public set; }
    public Uri PreviousBaseUri { get; public set; }
    public Uri BaseUri { get; private set; }
    public string UnresolvedData { get; public set; }
    public string UnresolvedPreviousData { get; public set; }
    internal ObjectField(ColumnDefinition columnDefinition);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EmbeddedFileIndex();
    [CompilerGeneratedAttribute]
public void set_EmbeddedFileIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PreviousEmbeddedFileIndex();
    [CompilerGeneratedAttribute]
public void set_PreviousEmbeddedFileIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Uri get_PreviousBaseUri();
    [CompilerGeneratedAttribute]
public void set_PreviousBaseUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
private void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_UnresolvedData();
    [CompilerGeneratedAttribute]
public void set_UnresolvedData(string value);
    [CompilerGeneratedAttribute]
public string get_UnresolvedPreviousData();
    [CompilerGeneratedAttribute]
public void set_UnresolvedPreviousData(string value);
    internal virtual void Read(XmlReader reader);
    internal virtual void Write(XmlWriter writer);
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.WindowsInstaller.Row : object {
    private static long rowCount;
    [CompilerGeneratedAttribute]
private RowOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinition <TableDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private Field[] <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Number>k__BackingField;
    public RowOperation Operation { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; }
    public Table Table { get; }
    public TableDefinition TableDefinition { get; }
    public Field[] Fields { get; }
    public long Number { get; }
    public object Item { get; public set; }
    public Row(SourceLineNumber sourceLineNumbers, Table table);
    public Row(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    [CompilerGeneratedAttribute]
public RowOperation get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(RowOperation value);
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public Table get_Table();
    [CompilerGeneratedAttribute]
public TableDefinition get_TableDefinition();
    [CompilerGeneratedAttribute]
public Field[] get_Fields();
    [CompilerGeneratedAttribute]
public long get_Number();
    public object get_Item(int field);
    public void set_Item(int field, object value);
    public int FieldAsInteger(int field);
    public Nullable`1<int> FieldAsNullableInteger(int field);
    public string FieldAsString(int field);
    public bool BestEffortSetField(int field, object value);
    public string GetKey();
    public string GetPrimaryKey(char delimiter);
    public string GetPrimaryKey(char delimiter, string nullReplacement);
    public bool IsColumnNull(int field);
    public bool IsColumnEmpty(int field);
    public bool IsIdentical(Row row);
    public void CopyTo(Row target);
    public virtual string ToString();
    internal static Row Read(XmlReader reader, Table table);
    internal void Write(XmlWriter writer);
}
public enum WixToolset.Data.WindowsInstaller.RowOperation : Enum {
    public int value__;
    public static RowOperation None;
    public static RowOperation Add;
    public static RowOperation Delete;
    public static RowOperation Modify;
}
public class WixToolset.Data.WindowsInstaller.Rows.BBControlRow : Row {
    public string Billboard { get; public set; }
    public string BBControl { get; public set; }
    public string Type { get; public set; }
    public string X { get; public set; }
    public string Y { get; public set; }
    public string Width { get; public set; }
    public string Height { get; public set; }
    public int Attributes { get; public set; }
    public string Text { get; public set; }
    public BBControlRow(SourceLineNumber sourceLineNumbers, Table table);
    public BBControlRow(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public string get_Billboard();
    public void set_Billboard(string value);
    public string get_BBControl();
    public void set_BBControl(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_X();
    public void set_X(string value);
    public string get_Y();
    public void set_Y(string value);
    public string get_Width();
    public void set_Width(string value);
    public string get_Height();
    public void set_Height(string value);
    public int get_Attributes();
    public void set_Attributes(int value);
    public string get_Text();
    public void set_Text(string value);
}
public class WixToolset.Data.WindowsInstaller.Rows.ComponentRow : Row {
    private string sourceFile;
    public string Component { get; public set; }
    public string Guid { get; public set; }
    public string Directory { get; public set; }
    public bool IsLocalOnly { get; public set; }
    public bool IsSourceOnly { get; public set; }
    public bool IsOptional { get; public set; }
    public bool IsRegistryKeyPath { get; public set; }
    public bool IsSharedDll { get; public set; }
    public bool IsPermanent { get; public set; }
    public bool IsOdbcDataSourceKeyPath { get; public set; }
    public bool Is64Bit { get; public set; }
    public string Condition { get; public set; }
    public string KeyPath { get; public set; }
    public string SourceFile { get; public set; }
    public ComponentRow(SourceLineNumber sourceLineNumbers, Table table);
    public ComponentRow(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public string get_Component();
    public void set_Component(string value);
    public string get_Guid();
    public void set_Guid(string value);
    public string get_Directory();
    public void set_Directory(string value);
    public bool get_IsLocalOnly();
    public void set_IsLocalOnly(bool value);
    public bool get_IsSourceOnly();
    public void set_IsSourceOnly(bool value);
    public bool get_IsOptional();
    public void set_IsOptional(bool value);
    public bool get_IsRegistryKeyPath();
    public void set_IsRegistryKeyPath(bool value);
    public bool get_IsSharedDll();
    public void set_IsSharedDll(bool value);
    public bool get_IsPermanent();
    public void set_IsPermanent(bool value);
    public bool get_IsOdbcDataSourceKeyPath();
    public void set_IsOdbcDataSourceKeyPath(bool value);
    public bool get_Is64Bit();
    public void set_Is64Bit(bool value);
    public string get_Condition();
    public void set_Condition(string value);
    public string get_KeyPath();
    public void set_KeyPath(string value);
    public string get_SourceFile();
    public void set_SourceFile(string value);
}
public class WixToolset.Data.WindowsInstaller.Rows.ControlRow : Row {
    public string Dialog { get; public set; }
    public string Control { get; public set; }
    public string Type { get; public set; }
    public string X { get; public set; }
    public string Y { get; public set; }
    public string Width { get; public set; }
    public string Height { get; public set; }
    public int Attributes { get; public set; }
    public string Property { get; public set; }
    public string Text { get; public set; }
    public string Next { get; public set; }
    public string Help { get; public set; }
    public ControlRow(SourceLineNumber sourceLineNumbers, Table table);
    public ControlRow(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public string get_Dialog();
    public void set_Dialog(string value);
    public string get_Control();
    public void set_Control(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_X();
    public void set_X(string value);
    public string get_Y();
    public void set_Y(string value);
    public string get_Width();
    public void set_Width(string value);
    public string get_Height();
    public void set_Height(string value);
    public int get_Attributes();
    public void set_Attributes(int value);
    public string get_Property();
    public void set_Property(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Next();
    public void set_Next(string value);
    public string get_Help();
    public void set_Help(string value);
}
public class WixToolset.Data.WindowsInstaller.Rows.FileRow : Row {
    public string File { get; public set; }
    public string Component { get; public set; }
    public string FileName { get; public set; }
    public string LongFileName { get; }
    public int FileSize { get; public set; }
    public string Version { get; public set; }
    public string Language { get; public set; }
    public int Attributes { get; public set; }
    public YesNoType Compressed { get; public set; }
    public int Sequence { get; public set; }
    public int DiskId { get; public set; }
    public string Source { get; public set; }
    public string PreviousSource { get; public set; }
    public FileRow(SourceLineNumber sourceLineNumbers, Table table);
    public FileRow(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public string get_File();
    public void set_File(string value);
    public string get_Component();
    public void set_Component(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_LongFileName();
    public int get_FileSize();
    public void set_FileSize(int value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Language();
    public void set_Language(string value);
    public int get_Attributes();
    public void set_Attributes(int value);
    public YesNoType get_Compressed();
    public void set_Compressed(YesNoType value);
    public int get_Sequence();
    public void set_Sequence(int value);
    public int get_DiskId();
    public void set_DiskId(int value);
    public string get_Source();
    public void set_Source(string value);
    public string get_PreviousSource();
    public void set_PreviousSource(string value);
}
public class WixToolset.Data.WindowsInstaller.Rows.MediaRow : Row {
    public int DiskId { get; public set; }
    public int LastSequence { get; public set; }
    public string DiskPrompt { get; public set; }
    public string Cabinet { get; public set; }
    public string VolumeLabel { get; public set; }
    public string Source { get; public set; }
    public MediaRow(SourceLineNumber sourceLineNumbers, Table table);
    public MediaRow(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public int get_DiskId();
    public void set_DiskId(int value);
    public int get_LastSequence();
    public void set_LastSequence(int value);
    public string get_DiskPrompt();
    public void set_DiskPrompt(string value);
    public string get_Cabinet();
    public void set_Cabinet(string value);
    public string get_VolumeLabel();
    public void set_VolumeLabel(string value);
    public string get_Source();
    public void set_Source(string value);
}
public class WixToolset.Data.WindowsInstaller.Rows.PropertyRow : Row {
    public string Property { get; public set; }
    public string Value { get; public set; }
    public PropertyRow(SourceLineNumber sourceLineNumbers, Table table);
    public PropertyRow(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public string get_Property();
    public void set_Property(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class WixToolset.Data.WindowsInstaller.Rows.SummaryInfoRowCollection : KeyedCollection`2<int, Row> {
    public SummaryInfoRowCollection(Table table);
    protected virtual int GetKeyForItem(Row row);
}
public class WixToolset.Data.WindowsInstaller.Rows.UpgradeRow : Row {
    public string UpgradeCode { get; public set; }
    public string VersionMin { get; public set; }
    public string VersionMax { get; public set; }
    public string Language { get; public set; }
    public int Attributes { get; public set; }
    public string Remove { get; public set; }
    public string ActionProperty { get; public set; }
    public UpgradeRow(SourceLineNumber sourceLineNumbers, Table table);
    public UpgradeRow(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public string get_UpgradeCode();
    public void set_UpgradeCode(string value);
    public string get_VersionMin();
    public void set_VersionMin(string value);
    public string get_VersionMax();
    public void set_VersionMax(string value);
    public string get_Language();
    public void set_Language(string value);
    public int get_Attributes();
    public void set_Attributes(int value);
    public string get_Remove();
    public void set_Remove(string value);
    public string get_ActionProperty();
    public void set_ActionProperty(string value);
}
[ExtensionAttribute]
public static class WixToolset.Data.WindowsInstaller.SequenceTableExtensions : object {
    [ExtensionAttribute]
public static string WindowsInstallerTableName(SequenceTable sequence);
}
public class WixToolset.Data.WindowsInstaller.SubStorage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    public string Name { get; }
    public WindowsInstallerData Data { get; }
    public SubStorage(string name, WindowsInstallerData data);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public WindowsInstallerData get_Data();
    internal static SubStorage Read(XmlReader reader, TableDefinitionCollection tableDefinitions);
    internal void Write(XmlWriter writer);
}
[DebuggerDisplayAttribute("{Name}")]
public class WixToolset.Data.WindowsInstaller.Table : object {
    [CompilerGeneratedAttribute]
private TableDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Row> <Rows>k__BackingField;
    public TableDefinition Definition { get; }
    public string Name { get; }
    public TableOperation Operation { get; public set; }
    public IList`1<Row> Rows { get; }
    public Table(TableDefinition tableDefinition);
    [CompilerGeneratedAttribute]
public TableDefinition get_Definition();
    public string get_Name();
    [CompilerGeneratedAttribute]
public TableOperation get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(TableOperation value);
    [CompilerGeneratedAttribute]
public IList`1<Row> get_Rows();
    public Row CreateRow(SourceLineNumber sourceLineNumbers);
    public void ValidateRows();
    internal static Table Read(XmlReader reader, TableDefinitionCollection tableDefinitions);
    internal void Write(XmlWriter writer);
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.WindowsInstaller.TableDefinition : object {
    public static int MaxColumnsInRealTable;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSymbolDefinition <SymbolDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unreal>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnDefinition[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolIdIsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StrongRowType>k__BackingField;
    public string Name { get; }
    public IntermediateSymbolDefinition SymbolDefinition { get; }
    public bool Unreal { get; }
    public ColumnDefinition[] Columns { get; }
    public bool SymbolIdIsPrimaryKey { get; }
    private Type StrongRowType { get; }
    public ColumnDefinition Item { get; }
    public TableDefinition(string name, IntermediateSymbolDefinition symbolDefinition, IEnumerable`1<ColumnDefinition> columns, bool unreal, bool symbolIdIsPrimaryKey, Type strongRowType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IntermediateSymbolDefinition get_SymbolDefinition();
    [CompilerGeneratedAttribute]
public bool get_Unreal();
    [CompilerGeneratedAttribute]
public ColumnDefinition[] get_Columns();
    [CompilerGeneratedAttribute]
public bool get_SymbolIdIsPrimaryKey();
    [CompilerGeneratedAttribute]
private Type get_StrongRowType();
    public ColumnDefinition get_Item(int columnIndex);
    public Row CreateRow(SourceLineNumber sourceLineNumbers);
    internal Row CreateRow(SourceLineNumber sourceLineNumbers, Table table);
    public sealed virtual int CompareTo(TableDefinition updated);
    internal static TableDefinition Read(XmlReader reader, TableDefinitionCollection tableDefinitions);
    internal void Write(XmlWriter writer);
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.WindowsInstaller.TableDefinitionCollection : object {
    public static string XmlNamespaceUri;
    private Dictionary`2<string, TableDefinition> collection;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TableDefinition Item { get; }
    public TableDefinitionCollection(TableDefinitionCollection tableDefinitions);
    public TableDefinitionCollection(IEnumerable`1<TableDefinition> tableDefinitions);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public TableDefinition get_Item(string tableName);
    public bool TryGet(string tableName, TableDefinition& table);
    public sealed virtual void Add(TableDefinition tableDefinition);
    public sealed virtual void Clear();
    public bool Contains(string tableName);
    public sealed virtual bool Contains(TableDefinition table);
    public sealed virtual void CopyTo(TableDefinition[] array, int index);
    public sealed virtual bool Remove(TableDefinition table);
    public sealed virtual IEnumerator`1<TableDefinition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static TableDefinitionCollection Read(XmlReader reader, TableDefinitionCollection tableDefinitions);
    internal void Write(XmlWriter writer);
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Data.WindowsInstaller.TableIndexedCollection : object {
    private Dictionary`2<string, Table> collection;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Table Item { get; public set; }
    public TableIndexedCollection(IEnumerable`1<Table> tables);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(Table table);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Table table);
    public sealed virtual void CopyTo(Table[] array, int arrayIndex);
    public void Remove(string tableName);
    public sealed virtual bool Remove(Table table);
    public sealed virtual IEnumerator`1<Table> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Table get_Item(string tableName);
    public void set_Item(string tableName, Table value);
    public bool TryGetTable(string tableName, Table& table);
}
public enum WixToolset.Data.WindowsInstaller.TableOperation : Enum {
    public int value__;
    public static TableOperation None;
    public static TableOperation Add;
    public static TableOperation Drop;
}
public static class WixToolset.Data.WindowsInstaller.WindowsInstallerConstants : object {
    public static int MsidbComponentAttributesLocalOnly;
    public static int MsidbComponentAttributesSourceOnly;
    public static int MsidbComponentAttributesOptional;
    public static int MsidbComponentAttributesRegistryKeyPath;
    public static int MsidbComponentAttributesSharedDllRefCount;
    public static int MsidbComponentAttributesPermanent;
    public static int MsidbComponentAttributesODBCDataSource;
    public static int MsidbComponentAttributesTransitive;
    public static int MsidbComponentAttributesNeverOverwrite;
    public static int MsidbComponentAttributes64bit;
    public static int MsidbComponentAttributesDisableRegistryReflection;
    public static int MsidbComponentAttributesUninstallOnSupersedence;
    public static int MsidbComponentAttributesShared;
    public static int MsidbControlAttributesVisible;
    public static int MsidbControlAttributesEnabled;
    public static int MsidbControlAttributesSunken;
    public static int MsidbControlAttributesIndirect;
    public static int MsidbControlAttributesInteger;
    public static int MsidbControlAttributesRTLRO;
    public static int MsidbControlAttributesRightAligned;
    public static int MsidbControlAttributesLeftScroll;
    public static int MsidbControlAttributesBiDi;
    public static int MsidbControlAttributesTransparent;
    public static int MsidbControlAttributesNoPrefix;
    public static int MsidbControlAttributesNoWrap;
    public static int MsidbControlAttributesFormatSize;
    public static int MsidbControlAttributesUsersLanguage;
    public static int MsidbControlAttributesMultiline;
    public static int MsidbControlAttributesPasswordInput;
    public static int MsidbControlAttributesProgress95;
    public static int MsidbControlAttributesRemovableVolume;
    public static int MsidbControlAttributesFixedVolume;
    public static int MsidbControlAttributesRemoteVolume;
    public static int MsidbControlAttributesCDROMVolume;
    public static int MsidbControlAttributesRAMDiskVolume;
    public static int MsidbControlAttributesFloppyVolume;
    public static int MsidbControlShowRollbackCost;
    public static int MsidbControlAttributesSorted;
    public static int MsidbControlAttributesComboList;
    public static int MsidbControlAttributesImageHandle;
    public static int MsidbControlAttributesPushLike;
    public static int MsidbControlAttributesBitmap;
    public static int MsidbControlAttributesIcon;
    public static int MsidbControlAttributesFixedSize;
    public static int MsidbControlAttributesIconSize16;
    public static int MsidbControlAttributesIconSize32;
    public static int MsidbControlAttributesIconSize48;
    public static int MsidbControlAttributesElevationShield;
    public static int MsidbControlAttributesHasBorder;
    public static int MsidbCustomActionTypeDll;
    public static int MsidbCustomActionTypeExe;
    public static int MsidbCustomActionTypeTextData;
    public static int MsidbCustomActionTypeJScript;
    public static int MsidbCustomActionTypeVBScript;
    public static int MsidbCustomActionTypeInstall;
    public static int MsidbCustomActionTypeSourceBits;
    public static int MsidbCustomActionTypeTargetBits;
    public static int MsidbCustomActionTypeReturnBits;
    public static int MsidbCustomActionTypeExecuteBits;
    public static int MsidbCustomActionTypeBinaryData;
    public static int MsidbCustomActionTypeSourceFile;
    public static int MsidbCustomActionTypeDirectory;
    public static int MsidbCustomActionTypeProperty;
    public static int MsidbCustomActionTypeContinue;
    public static int MsidbCustomActionTypeAsync;
    public static int MsidbCustomActionTypeFirstSequence;
    public static int MsidbCustomActionTypeOncePerProcess;
    public static int MsidbCustomActionTypeClientRepeat;
    public static int MsidbCustomActionTypeInScript;
    public static int MsidbCustomActionTypeRollback;
    public static int MsidbCustomActionTypeCommit;
    public static int MsidbCustomActionTypeNoImpersonate;
    public static int MsidbCustomActionTypeTSAware;
    public static int MsidbCustomActionType64BitScript;
    public static int MsidbCustomActionTypeHideTarget;
    public static int MsidbCustomActionTypePatchUninstall;
    public static int MsidbDialogAttributesVisible;
    public static int MsidbDialogAttributesModal;
    public static int MsidbDialogAttributesMinimize;
    public static int MsidbDialogAttributesSysModal;
    public static int MsidbDialogAttributesKeepModeless;
    public static int MsidbDialogAttributesTrackDiskSpace;
    public static int MsidbDialogAttributesUseCustomPalette;
    public static int MsidbDialogAttributesRTLRO;
    public static int MsidbDialogAttributesRightAligned;
    public static int MsidbDialogAttributesLeftScroll;
    public static int MsidbDialogAttributesBiDi;
    public static int MsidbDialogAttributesError;
    public static int CommonControlAttributesInvert;
    public static int DialogAttributesInvert;
    public static int MsidbFeatureAttributesFavorLocal;
    public static int MsidbFeatureAttributesFavorSource;
    public static int MsidbFeatureAttributesFollowParent;
    public static int MsidbFeatureAttributesFavorAdvertise;
    public static int MsidbFeatureAttributesDisallowAdvertise;
    public static int MsidbFeatureAttributesUIDisallowAbsent;
    public static int MsidbFeatureAttributesNoUnsupportedAdvertise;
    public static int MsidbFileAttributesReadOnly;
    public static int MsidbFileAttributesHidden;
    public static int MsidbFileAttributesSystem;
    public static int MsidbFileAttributesVital;
    public static int MsidbFileAttributesChecksum;
    public static int MsidbFileAttributesPatchAdded;
    public static int MsidbFileAttributesNoncompressed;
    public static int MsidbFileAttributesCompressed;
    public static int MsidbIniFileActionAddLine;
    public static int MsidbIniFileActionCreateLine;
    public static int MsidbIniFileActionRemoveLine;
    public static int MsidbIniFileActionAddTag;
    public static int MsidbIniFileActionRemoveTag;
    public static int MsidbMoveFileOptionsMove;
    public static int MsidbServiceInstallOwnProcess;
    public static int MsidbServiceInstallShareProcess;
    public static int MsidbServiceInstallInteractive;
    public static int MsidbServiceInstallAutoStart;
    public static int MsidbServiceInstallDemandStart;
    public static int MsidbServiceInstallDisabled;
    public static int MsidbServiceInstallErrorIgnore;
    public static int MsidbServiceInstallErrorNormal;
    public static int MsidbServiceInstallErrorCritical;
    public static int MsidbServiceInstallErrorControlVital;
    public static int MsidbServiceConfigEventInstall;
    public static int MsidbServiceConfigEventUninstall;
    public static int MsidbServiceConfigEventReinstall;
    public static int MsidbServiceControlEventStart;
    public static int MsidbServiceControlEventStop;
    public static int MsidbServiceControlEventDelete;
    public static int MsidbServiceControlEventUninstallStart;
    public static int MsidbServiceControlEventUninstallStop;
    public static int MsidbServiceControlEventUninstallDelete;
    public static int MsidbTextStyleStyleBitsBold;
    public static int MsidbTextStyleStyleBitsItalic;
    public static int MsidbTextStyleStyleBitsUnderline;
    public static int MsidbTextStyleStyleBitsStrike;
    public static int MsidbUpgradeAttributesMigrateFeatures;
    public static int MsidbUpgradeAttributesOnlyDetect;
    public static int MsidbUpgradeAttributesIgnoreRemoveFailure;
    public static int MsidbUpgradeAttributesVersionMinInclusive;
    public static int MsidbUpgradeAttributesVersionMaxInclusive;
    public static int MsidbUpgradeAttributesLanguagesExclusive;
    public static int MsidbRegistryRootClassesRoot;
    public static int MsidbRegistryRootCurrentUser;
    public static int MsidbRegistryRootLocalMachine;
    public static int MsidbRegistryRootUsers;
    public static int MsidbLocatorTypeDirectory;
    public static int MsidbLocatorTypeFileName;
    public static int MsidbLocatorTypeRawValue;
    public static int MsidbLocatorType64bit;
    public static int MsidbClassAttributesRelativePath;
    public static int MsidbRemoveFileInstallModeOnInstall;
    public static int MsidbRemoveFileInstallModeOnRemove;
    public static int MsidbRemoveFileInstallModeOnBoth;
    public static int MsidbODBCDataSourceRegistrationPerMachine;
    public static int MsidbODBCDataSourceRegistrationPerUser;
    public static int MsidbModuleConfigurationFormatText;
    public static int MsidbModuleConfigurationFormatKey;
    public static int MsidbModuleConfigurationFormatInteger;
    public static int MsidbModuleConfigurationFormatBitfield;
    public static int MsidbMsmConfigurableOptionKeyNoOrphan;
    public static int MsidbMsmConfigurableOptionNonNullable;
    public static int SWSHOWNORMAL;
    public static int SWSHOWMAXIMIZED;
    public static int SWSHOWMINNOACTIVE;
    public static int MsidbEmbeddedUI;
    public static int MsidbEmbeddedHandlesBasic;
    public static int INSTALLLOGMODE_FATALEXIT;
    public static int INSTALLLOGMODE_ERROR;
    public static int INSTALLLOGMODE_WARNING;
    public static int INSTALLLOGMODE_USER;
    public static int INSTALLLOGMODE_INFO;
    public static int INSTALLLOGMODE_FILESINUSE;
    public static int INSTALLLOGMODE_RESOLVESOURCE;
    public static int INSTALLLOGMODE_OUTOFDISKSPACE;
    public static int INSTALLLOGMODE_ACTIONSTART;
    public static int INSTALLLOGMODE_ACTIONDATA;
    public static int INSTALLLOGMODE_PROGRESS;
    public static int INSTALLLOGMODE_COMMONDATA;
    public static int INSTALLLOGMODE_INITIALIZE;
    public static int INSTALLLOGMODE_TERMINATE;
    public static int INSTALLLOGMODE_SHOWDIALOG;
    public static int INSTALLLOGMODE_RMFILESINUSE;
    public static int INSTALLLOGMODE_INSTALLSTART;
    public static int INSTALLLOGMODE_INSTALLEND;
}
public class WixToolset.Data.WindowsInstaller.WindowsInstallerData : object {
    internal static string XmlNamespaceUri;
    internal static string XmlElementName;
    private static Version CurrentVersion;
    private static string WixOutputStreamName;
    private static XmlReaderSettings ReaderSettings;
    private static XmlWriterSettings WriterSettings;
    [CompilerGeneratedAttribute]
private OutputType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Codepage>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SubStorage> <SubStorages>k__BackingField;
    [CompilerGeneratedAttribute]
private TableIndexedCollection <Tables>k__BackingField;
    public OutputType Type { get; public set; }
    public int Codepage { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; private set; }
    public ICollection`1<SubStorage> SubStorages { get; private set; }
    public TableIndexedCollection Tables { get; private set; }
    public WindowsInstallerData(SourceLineNumber sourceLineNumbers);
    private static WindowsInstallerData();
    [CompilerGeneratedAttribute]
public OutputType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(OutputType value);
    [CompilerGeneratedAttribute]
public int get_Codepage();
    [CompilerGeneratedAttribute]
public void set_Codepage(int value);
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
private void set_SourceLineNumbers(SourceLineNumber value);
    [CompilerGeneratedAttribute]
public ICollection`1<SubStorage> get_SubStorages();
    [CompilerGeneratedAttribute]
private void set_SubStorages(ICollection`1<SubStorage> value);
    [CompilerGeneratedAttribute]
public TableIndexedCollection get_Tables();
    [CompilerGeneratedAttribute]
private void set_Tables(TableIndexedCollection value);
    public Table EnsureTable(TableDefinition tableDefinition);
    public void Save(WixOutput wixout);
    public void Save(XmlWriter writer);
    public bool TryGetTable(string tableName, Table& table);
    public static WindowsInstallerData Load(string path, bool suppressVersionCheck);
    public static WindowsInstallerData Load(string path, TableDefinitionCollection tableDefinitions, bool suppressVersionCheck);
    public static WindowsInstallerData Load(WixOutput wixOutput, bool suppressVersionCheck);
    public static WindowsInstallerData Load(WixOutput wixOutput, TableDefinitionCollection tableDefinitions, bool suppressVersionCheck);
    internal static WindowsInstallerData Read(XmlReader reader, TableDefinitionCollection tableDefinitions, bool suppressVersionCheck);
    internal void Write(XmlWriter writer);
}
public static class WixToolset.Data.WindowsInstaller.WindowsInstallerStandard : object {
    private static Dictionary`2<string, WixActionSymbol> standardActionsById;
    private static HashSet`1<string> standardActionNames;
    private static HashSet`1<string> standardProperties;
    private static Dictionary`2<string, string> standardDirectoryNamesById;
    private static WindowsInstallerStandard();
    public static bool IsStandardAction(string actionName);
    public static IReadOnlyCollection`1<WixActionSymbol> StandardActions();
    public static IReadOnlyCollection`1<string> StandardDirectoryIds();
    public static string GetPlatformSpecificDirectoryId(string directoryId, Platform platform);
    public static bool IsStandardDirectory(string directoryId);
    public static bool IsStandardProperty(string propertyName);
    public static bool TryGetStandardAction(string id, WixActionSymbol& standardAction);
    public static bool TryGetStandardAction(string sequenceName, string actioname, WixActionSymbol& standardAction);
    public static bool TryGetStandardDirectoryName(string directoryId, String& name);
}
public static class WixToolset.Data.WindowsInstaller.WindowsInstallerTableDefinitions : object {
    public static TableDefinition ActionText;
    public static TableDefinition AdminExecuteSequence;
    public static TableDefinition Condition;
    public static TableDefinition AdminUISequence;
    public static TableDefinition AdvtExecuteSequence;
    public static TableDefinition AdvtUISequence;
    public static TableDefinition AppId;
    public static TableDefinition AppSearch;
    public static TableDefinition Property;
    public static TableDefinition BBControl;
    public static TableDefinition Billboard;
    public static TableDefinition Feature;
    public static TableDefinition Binary;
    public static TableDefinition BindImage;
    public static TableDefinition File;
    public static TableDefinition CCPSearch;
    public static TableDefinition CheckBox;
    public static TableDefinition Class;
    public static TableDefinition Component;
    public static TableDefinition Icon;
    public static TableDefinition ProgId;
    public static TableDefinition ComboBox;
    public static TableDefinition CompLocator;
    public static TableDefinition Complus;
    public static TableDefinition Directory;
    public static TableDefinition Control;
    public static TableDefinition Dialog;
    public static TableDefinition ControlCondition;
    public static TableDefinition ControlEvent;
    public static TableDefinition CreateFolder;
    public static TableDefinition CustomAction;
    public static TableDefinition DrLocator;
    public static TableDefinition DuplicateFile;
    public static TableDefinition Environment;
    public static TableDefinition Error;
    public static TableDefinition EventMapping;
    public static TableDefinition Extension;
    public static TableDefinition MIME;
    public static TableDefinition FeatureComponents;
    public static TableDefinition FileSFPCatalog;
    public static TableDefinition SFPCatalog;
    public static TableDefinition Font;
    public static TableDefinition IniFile;
    public static TableDefinition IniLocator;
    public static TableDefinition InstallExecuteSequence;
    public static TableDefinition InstallUISequence;
    public static TableDefinition IsolatedComponent;
    public static TableDefinition LaunchCondition;
    public static TableDefinition ListBox;
    public static TableDefinition ListView;
    public static TableDefinition LockPermissions;
    public static TableDefinition MsiLockPermissionsEx;
    public static TableDefinition Media;
    public static TableDefinition MoveFile;
    public static TableDefinition MsiAssembly;
    public static TableDefinition MsiAssemblyName;
    public static TableDefinition MsiDigitalCertificate;
    public static TableDefinition MsiDigitalSignature;
    public static TableDefinition MsiEmbeddedChainer;
    public static TableDefinition MsiEmbeddedUI;
    public static TableDefinition MsiFileHash;
    public static TableDefinition MsiPackageCertificate;
    public static TableDefinition MsiPatchCertificate;
    public static TableDefinition MsiPatchHeaders;
    public static TableDefinition PatchMetadata;
    public static TableDefinition MsiPatchMetadata;
    public static TableDefinition MsiPatchOldAssemblyFile;
    public static TableDefinition MsiPatchOldAssemblyName;
    public static TableDefinition PatchSequence;
    public static TableDefinition MsiPatchSequence;
    public static TableDefinition ODBCAttribute;
    public static TableDefinition ODBCDriver;
    public static TableDefinition ODBCDataSource;
    public static TableDefinition ODBCSourceAttribute;
    public static TableDefinition ODBCTranslator;
    public static TableDefinition Patch;
    public static TableDefinition PatchPackage;
    public static TableDefinition PublishComponent;
    public static TableDefinition RadioButton;
    public static TableDefinition Registry;
    public static TableDefinition RegLocator;
    public static TableDefinition RemoveFile;
    public static TableDefinition RemoveIniFile;
    public static TableDefinition RemoveRegistry;
    public static TableDefinition ReserveCost;
    public static TableDefinition SelfReg;
    public static TableDefinition ServiceControl;
    public static TableDefinition ServiceInstall;
    public static TableDefinition MsiServiceConfig;
    public static TableDefinition MsiServiceConfigFailureActions;
    public static TableDefinition Shortcut;
    public static TableDefinition MsiShortcutProperty;
    public static TableDefinition Signature;
    public static TableDefinition SoftwareIdentificationTag;
    public static TableDefinition TextStyle;
    public static TableDefinition TypeLib;
    public static TableDefinition UIText;
    public static TableDefinition Upgrade;
    public static TableDefinition Verb;
    public static TableDefinition ModuleAdminExecuteSequence;
    public static TableDefinition ModuleAdminUISequence;
    public static TableDefinition ModuleAdvtExecuteSequence;
    public static TableDefinition ModuleAdvtUISequence;
    public static TableDefinition ModuleComponents;
    public static TableDefinition ModuleSignature;
    public static TableDefinition ModuleConfiguration;
    public static TableDefinition ModuleDependency;
    public static TableDefinition ModuleExclusion;
    public static TableDefinition ModuleIgnoreTable;
    public static TableDefinition ModuleInstallExecuteSequence;
    public static TableDefinition ModuleInstallUISequence;
    public static TableDefinition ModuleSubstitution;
    public static TableDefinition Properties;
    public static TableDefinition ImageFamilies;
    public static TableDefinition UpgradedImages;
    public static TableDefinition UpgradedFilesToIgnore;
    public static TableDefinition UpgradedFilesOptionalData;
    public static TableDefinition TargetImages;
    public static TableDefinition TargetFilesOptionalData;
    public static TableDefinition FamilyFileRanges;
    public static TableDefinition ExternalFiles;
    public static TableDefinition Streams;
    public static TableDefinition SummaryInformation;
    public static TableDefinition TransformView;
    public static TableDefinition Validation;
    public static TableDefinition WixDependencyProvider;
    public static TableDefinition WixDependency;
    public static TableDefinition WixDependencyRef;
    public static TableDefinition[] All;
    private static WindowsInstallerTableDefinitions();
}
public class WixToolset.Data.WindowsInstaller.WixMissingTableDefinitionException : WixException {
    public WixMissingTableDefinitionException(Message error);
}
public class WixToolset.Data.WixCorruptFileException : WixException {
    [CompilerGeneratedAttribute]
private string <FileFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string FileFormat { get; }
    public string Path { get; }
    public WixCorruptFileException(string path, string format, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_FileFormat();
    [CompilerGeneratedAttribute]
public string get_Path();
}
public class WixToolset.Data.WixException : Exception {
    [CompilerGeneratedAttribute]
private Message <Error>k__BackingField;
    public Message Error { get; }
    public WixException(string message);
    public WixException(string message, Exception innerException);
    public WixException(Message error);
    public WixException(Message error, Exception exception);
    [CompilerGeneratedAttribute]
public Message get_Error();
}
public class WixToolset.Data.WixOutput : object {
    private Stream stream;
    private ZipArchive archive;
    private bool disposed;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public Uri Uri { get; }
    private WixOutput(Uri uri, ZipArchive archive, Stream stream);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    public static WixOutput Create();
    public static WixOutput Create(string path);
    public static WixOutput Create(Uri uri, Stream stream);
    public static WixOutput Read(string path);
    public static WixOutput Read(Uri baseUri);
    public static WixOutput Read(Assembly assembly, string resourceName);
    public static WixOutput Read(Uri uri, Stream stream);
    public void Reopen(bool writable);
    public void ExtractEmbeddedFile(string embeddedId, string outputPath);
    public Stream CreateDataStream(string name);
    public void ImportDataStream(string name, string path);
    public Stream GetDataStream(string name);
    public string GetData(string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void DeleteExistingEntry(string name);
}
public static class WixToolset.Data.WixStandardLibrary : object {
    private static string WixStandardLibraryId;
    public static Intermediate Build(Platform platform);
    [IteratorStateMachineAttribute("WixToolset.Data.WixStandardLibrary/<YieldLocalizations>d__2")]
private static IEnumerable`1<Localization> YieldLocalizations();
    [IteratorStateMachineAttribute("WixToolset.Data.WixStandardLibrary/<YieldSections>d__3")]
private static IEnumerable`1<IntermediateSection> YieldSections(Platform platform);
    private static IntermediateSection CreateSection(string sectionId);
    private static IntermediateSection CreateSectionAroundSymbol(IntermediateSymbol symbol);
    private static string GetStandardDirectoryParent(string directoryId, Platform platform);
}
public static class WixToolset.Data.WixStandardLibraryIdentifiers : object {
    public static string WixStandardPackageReferences;
    public static string WixStandardModuleReferences;
    public static string DefaultFeatureName;
    public static string WixStandardLocalizationStrings;
    private static WixStandardLibraryIdentifiers();
}
public class WixToolset.Data.WixUnexpectedFileFormatException : WixException {
    [CompilerGeneratedAttribute]
private string <ExpectedFileFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string ExpectedFileFormat { get; }
    public string FileFormat { get; }
    public string Path { get; public set; }
    public WixUnexpectedFileFormatException(string path, string expectedFormat, string format, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_ExpectedFileFormat();
    [CompilerGeneratedAttribute]
public string get_FileFormat();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public enum WixToolset.Data.YesNoDefaultType : Enum {
    public int value__;
    public static YesNoDefaultType IllegalValue;
    public static YesNoDefaultType NotSet;
    public static YesNoDefaultType No;
    public static YesNoDefaultType Yes;
    public static YesNoDefaultType Default;
}
public enum WixToolset.Data.YesNoType : Enum {
    public int value__;
    public static YesNoType IllegalValue;
    public static YesNoType NotSet;
    public static YesNoType No;
    public static YesNoType Yes;
}
