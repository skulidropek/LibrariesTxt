public class WixToolset.Dtf.Resources.BitmapResource : Resource {
    private static int SizeOfBitmapFileHeader;
    public BitmapResource(string name, int locale);
    public BitmapResource(string name, int locale, Byte[] data);
    public void ReadFromFile(string path);
}
internal class WixToolset.Dtf.Resources.FixedFileVersionInfo : object {
    private UInt32 signature;
    private UInt32 structVersion;
    private Version fileVersion;
    private Version productVersion;
    private VersionBuildTypes fileFlagsMask;
    private VersionBuildTypes fileFlags;
    private VersionFileOS fileOS;
    private VersionFileType fileType;
    private VersionFileSubtype fileSubtype;
    private DateTime timestamp;
    public Version FileVersion { get; public set; }
    public Version ProductVersion { get; public set; }
    public VersionBuildTypes FileFlagsMask { get; public set; }
    public VersionBuildTypes FileFlags { get; public set; }
    public VersionFileOS FileOS { get; public set; }
    public VersionFileType FileType { get; public set; }
    public VersionFileSubtype FileSubtype { get; public set; }
    public DateTime Timestamp { get; public set; }
    public Version get_FileVersion();
    public void set_FileVersion(Version value);
    public Version get_ProductVersion();
    public void set_ProductVersion(Version value);
    public VersionBuildTypes get_FileFlagsMask();
    public void set_FileFlagsMask(VersionBuildTypes value);
    public VersionBuildTypes get_FileFlags();
    public void set_FileFlags(VersionBuildTypes value);
    public VersionFileOS get_FileOS();
    public void set_FileOS(VersionFileOS value);
    public VersionFileType get_FileType();
    public void set_FileType(VersionFileType value);
    public VersionFileSubtype get_FileSubtype();
    public void set_FileSubtype(VersionFileSubtype value);
    public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
    public void Read(BinaryReader reader);
    public void Write(BinaryWriter writer);
    public static FixedFileVersionInfo op_Explicit(Byte[] bytesValue);
    public static Byte[] op_Explicit(FixedFileVersionInfo ffviValue);
    private static Version UInt64ToVersion(ulong version);
    private static ulong VersionToUInt64(Version version);
    private static DateTime UInt64ToDateTime(ulong dateTime);
    private static ulong DateTimeToUInt64(DateTime dateTime);
}
internal class WixToolset.Dtf.Resources.GroupIconDirectoryInfo : ValueType {
    public byte width;
    public byte height;
    public byte colors;
    public byte reserved;
    public ushort planes;
    public ushort bitsPerPixel;
    public UInt32 imageSize;
    public UInt32 imageOffset;
    public ushort imageIndex;
}
internal class WixToolset.Dtf.Resources.GroupIconInfo : object {
    private ushort reserved;
    private GroupIconType type;
    private GroupIconDirectoryInfo[] images;
    public GroupIconDirectoryInfo[] DirectoryInfo { get; }
    public GroupIconDirectoryInfo[] get_DirectoryInfo();
    public void ReadFromFile(Stream stream);
    public void ReadFromResource(Byte[] data);
    public Byte[] GetResourceData();
    private void Read(BinaryReader reader, bool readFromFile);
}
public class WixToolset.Dtf.Resources.GroupIconResource : Resource {
    internal bool dirty;
    private GroupIconInfo rawGroupIconInfo;
    private List`1<Resource> icons;
    public Byte[] Data { get; public set; }
    public IEnumerable`1<Resource> Icons { get; }
    public GroupIconResource(string name, int locale);
    public GroupIconResource(string name, int locale, Byte[] data);
    public virtual Byte[] get_Data();
    public virtual void set_Data(Byte[] value);
    public IEnumerable`1<Resource> get_Icons();
    public void ReadFromFile(string path);
    private void RefreshIconGroupInfo(Byte[] refreshData);
}
internal enum WixToolset.Dtf.Resources.GroupIconType : Enum {
    public int value__;
    public static GroupIconType Unknown;
    public static GroupIconType Icon;
    public static GroupIconType Cursor;
}
internal static class WixToolset.Dtf.Resources.NativeMethods : object {
    internal static UInt32 LOAD_LIBRARY_AS_DATAFILE;
    internal static IntPtr LoadLibraryEx(string fileName, IntPtr hFile, UInt32 flags);
    internal static bool FreeLibrary(IntPtr module);
    internal static bool EnumResourceTypes(IntPtr module, EnumResTypesProc enumFunc, IntPtr param);
    internal static bool EnumResourceNames(IntPtr module, IntPtr type, EnumResNamesProc enumFunc, IntPtr param);
    internal static bool EnumResourceNames(IntPtr module, string type, EnumResNamesProc enumFunc, IntPtr param);
    internal static bool EnumResourceLanguages(IntPtr module, IntPtr type, IntPtr name, EnumResLangsProc enumFunc, IntPtr param);
    internal static bool EnumResourceLanguages(IntPtr module, string type, string name, EnumResLangsProc enumFunc, IntPtr param);
    internal static IntPtr FindResourceEx(IntPtr module, string type, string name, ushort langId);
    internal static IntPtr LoadResource(IntPtr module, IntPtr resourceInfo);
    internal static IntPtr LockResource(IntPtr resourceData);
    internal static UInt32 SizeofResource(IntPtr module, IntPtr resourceInfo);
    internal static IntPtr BeginUpdateResource(string fileName, bool deleteExistingResources);
    internal static bool UpdateResource(IntPtr updateHandle, IntPtr type, IntPtr name, ushort lcid, IntPtr data, UInt32 dataSize);
    internal static bool UpdateResource(IntPtr updateHandle, IntPtr type, string name, ushort lcid, IntPtr data, UInt32 dataSize);
    internal static bool UpdateResource(IntPtr updateHandle, string type, string name, ushort lcid, IntPtr data, UInt32 dataSize);
    internal static bool EndUpdateResource(IntPtr updateHandle, bool discardChanges);
}
public class WixToolset.Dtf.Resources.Resource : object {
    private ResourceType type;
    private string name;
    private int locale;
    private Byte[] data;
    public ResourceType ResourceType { get; public set; }
    public string Name { get; public set; }
    public int Locale { get; public set; }
    public Byte[] Data { get; public set; }
    public Resource(ResourceType type, string name, int locale);
    public Resource(ResourceType type, string name, int locale, Byte[] data);
    public ResourceType get_ResourceType();
    public void set_ResourceType(ResourceType value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Locale();
    public void set_Locale(int value);
    public virtual Byte[] get_Data();
    public virtual void set_Data(Byte[] value);
    public void Load(string file);
    internal void Load(IntPtr module);
    public void Save(string file);
    internal void Save(IntPtr updateHandle);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Dtf.Resources.ResourceCollection : object {
    private List`1<Resource> resources;
    public Resource Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<WixToolset.Dtf.Resources.Resource>.IsReadOnly { get; }
    public void Find(string resFile);
    public void Find(string resFile, ResourceType type);
    public void Find(string resFile, ResourceType type, string name);
    private bool EnumResTypes(IntPtr module, IntPtr type, IntPtr param);
    private bool EnumResNames(IntPtr module, IntPtr type, IntPtr name, IntPtr param);
    private bool EnumResLangs(IntPtr module, IntPtr type, IntPtr name, ushort langId, IntPtr param);
    private static string ResourceNameToString(IntPtr resName);
    public void Load(string file);
    public void Save(string file);
    public Resource get_Item(int index);
    public void set_Item(int index, Resource value);
    public sealed virtual void Add(Resource item);
    public sealed virtual bool Remove(Resource item);
    public int IndexOf(Resource item);
    public void Insert(int index, Resource item);
    public sealed virtual bool Contains(Resource item);
    public sealed virtual void CopyTo(Resource[] array, int arrayIndex);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<Resource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<WixToolset.Dtf.Resources.Resource>.get_IsReadOnly();
}
public class WixToolset.Dtf.Resources.ResourceType : object {
    private string resourceType;
    public static ResourceType None { get; }
    public static ResourceType Cursor { get; }
    public static ResourceType Bitmap { get; }
    public static ResourceType Icon { get; }
    public static ResourceType Menu { get; }
    public static ResourceType Dialog { get; }
    public static ResourceType String { get; }
    public static ResourceType FontDir { get; }
    public static ResourceType Font { get; }
    public static ResourceType Accelerator { get; }
    public static ResourceType RCData { get; }
    public static ResourceType MessageTable { get; }
    public static ResourceType GroupCursor { get; }
    public static ResourceType GroupIcon { get; }
    public static ResourceType Version { get; }
    public static ResourceType DialogInclude { get; }
    public static ResourceType PlugPlay { get; }
    public static ResourceType Vxd { get; }
    public static ResourceType AniCursor { get; }
    public static ResourceType AniIcon { get; }
    public static ResourceType Html { get; }
    public static ResourceType Manifest { get; }
    public bool IsInteger { get; }
    public int IntegerValue { get; }
    public ResourceType(string resourceType);
    public ResourceType(int resourceType);
    public static ResourceType get_None();
    public static ResourceType get_Cursor();
    public static ResourceType get_Bitmap();
    public static ResourceType get_Icon();
    public static ResourceType get_Menu();
    public static ResourceType get_Dialog();
    public static ResourceType get_String();
    public static ResourceType get_FontDir();
    public static ResourceType get_Font();
    public static ResourceType get_Accelerator();
    public static ResourceType get_RCData();
    public static ResourceType get_MessageTable();
    public static ResourceType get_GroupCursor();
    public static ResourceType get_GroupIcon();
    public static ResourceType get_Version();
    public static ResourceType get_DialogInclude();
    public static ResourceType get_PlugPlay();
    public static ResourceType get_Vxd();
    public static ResourceType get_AniCursor();
    public static ResourceType get_AniIcon();
    public static ResourceType get_Html();
    public static ResourceType get_Manifest();
    public bool get_IsInteger();
    public int get_IntegerValue();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(ResourceType otherType);
    public virtual int GetHashCode();
    public static ResourceType op_Implicit(string resourceType);
    public static string op_Explicit(ResourceType resourceType);
}
[FlagsAttribute]
public enum WixToolset.Dtf.Resources.VersionBuildTypes : Enum {
    public int value__;
    public static VersionBuildTypes None;
    public static VersionBuildTypes Debug;
    public static VersionBuildTypes Prerelease;
    public static VersionBuildTypes Patched;
    public static VersionBuildTypes PrivateBuild;
    public static VersionBuildTypes InfoInferred;
    public static VersionBuildTypes SpecialBuild;
}
internal enum WixToolset.Dtf.Resources.VersionFileOS : Enum {
    public int value__;
    public static VersionFileOS Unknown;
    public static VersionFileOS DOS;
    public static VersionFileOS OS216;
    public static VersionFileOS OS232;
    public static VersionFileOS NT;
    public static VersionFileOS WINCE;
    public static VersionFileOS WINDOWS16;
    public static VersionFileOS PM16;
    public static VersionFileOS PM32;
    public static VersionFileOS WINDOWS32;
    public static VersionFileOS DOS_WINDOWS16;
    public static VersionFileOS DOS_WINDOWS32;
    public static VersionFileOS OS216_PM16;
    public static VersionFileOS OS232_PM32;
    public static VersionFileOS NT_WINDOWS32;
}
public enum WixToolset.Dtf.Resources.VersionFileSubtype : Enum {
    public int value__;
    public static VersionFileSubtype Unknown;
    public static VersionFileSubtype PrinterDriver;
    public static VersionFileSubtype KeyboardDriver;
    public static VersionFileSubtype LanguageDriver;
    public static VersionFileSubtype DisplayDriver;
    public static VersionFileSubtype MouseDriver;
    public static VersionFileSubtype NetworkDriver;
    public static VersionFileSubtype SystemDriver;
    public static VersionFileSubtype InstallableDriver;
    public static VersionFileSubtype SoundDriver;
    public static VersionFileSubtype CommDriver;
    public static VersionFileSubtype InputMethodDriver;
    public static VersionFileSubtype VersionedPrinterDriver;
    public static VersionFileSubtype RasterFont;
    public static VersionFileSubtype VectorFont;
    public static VersionFileSubtype TrueTypeFont;
}
public enum WixToolset.Dtf.Resources.VersionFileType : Enum {
    public int value__;
    public static VersionFileType Unknown;
    public static VersionFileType Application;
    public static VersionFileType Dll;
    public static VersionFileType Driver;
    public static VersionFileType Font;
    public static VersionFileType VirtualDevice;
    public static VersionFileType StaticLibrary;
}
[DefaultMemberAttribute("Item")]
internal class WixToolset.Dtf.Resources.VersionInfo : object {
    private string key;
    private bool isString;
    private Byte[] data;
    private List`1<VersionInfo> children;
    public string Key { get; public set; }
    public bool IsString { get; public set; }
    public Byte[] Data { get; public set; }
    private int Length { get; }
    public VersionInfo Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public VersionInfo(string key);
    public string get_Key();
    public void set_Key(string value);
    public bool get_IsString();
    public void set_IsString(bool value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public void Read(BinaryReader reader);
    public void Write(BinaryWriter writer);
    private static void Pad(BinaryReader reader, long basePosition);
    private static void Pad(BinaryWriter writer, long basePosition);
    private int get_Length();
    public static VersionInfo op_Explicit(Byte[] bytesValue);
    public static Byte[] op_Explicit(VersionInfo viValue);
    public VersionInfo get_Item(string itemKey);
    public sealed virtual void Add(VersionInfo item);
    public sealed virtual bool Remove(VersionInfo item);
    public bool Remove(string itemKey);
    private int IndexOf(string itemKey);
    public sealed virtual bool Contains(VersionInfo item);
    public sealed virtual void CopyTo(VersionInfo[] array, int index);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<VersionInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Dtf.Resources.VersionResource : Resource {
    internal bool dirty;
    private VersionInfo rawVersionInfo;
    private FixedFileVersionInfo rawFileVersionInfo;
    public Byte[] Data { get; public set; }
    public Version FileVersion { get; public set; }
    public Version ProductVersion { get; public set; }
    public VersionBuildTypes BuildTypes { get; public set; }
    public VersionFileType FileType { get; public set; }
    public VersionFileSubtype FileSubtype { get; public set; }
    public DateTime Timestamp { get; public set; }
    public VersionStringTable Item { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<WixToolset.Dtf.Resources.VersionStringTable>.IsReadOnly { get; }
    public VersionResource(string name, int locale);
    public VersionResource(string name, int locale, Byte[] data);
    public virtual Byte[] get_Data();
    public virtual void set_Data(Byte[] value);
    private void RefreshVersionInfo(Byte[] refreshData);
    public Version get_FileVersion();
    public void set_FileVersion(Version value);
    public Version get_ProductVersion();
    public void set_ProductVersion(Version value);
    public VersionBuildTypes get_BuildTypes();
    public void set_BuildTypes(VersionBuildTypes value);
    public VersionFileType get_FileType();
    public void set_FileType(VersionFileType value);
    public VersionFileSubtype get_FileSubtype();
    public void set_FileSubtype(VersionFileSubtype value);
    public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
    public VersionStringTable get_Item(int locale);
    public VersionStringTable Add(int locale);
    public void Remove(int locale);
    public bool Contains(int locale);
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<WixToolset.Dtf.Resources.VersionStringTable>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<WixToolset.Dtf.Resources.VersionStringTable>.Add(VersionStringTable item);
    private sealed virtual override bool System.Collections.Generic.ICollection<WixToolset.Dtf.Resources.VersionStringTable>.Remove(VersionStringTable item);
    private sealed virtual override bool System.Collections.Generic.ICollection<WixToolset.Dtf.Resources.VersionStringTable>.Contains(VersionStringTable item);
    public sealed virtual void CopyTo(VersionStringTable[] array, int arrayIndex);
    [IteratorStateMachineAttribute("WixToolset.Dtf.Resources.VersionResource/<GetEnumerator>d__41")]
public sealed virtual IEnumerator`1<VersionStringTable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Dtf.Resources.VersionStringTable : object {
    private VersionResource parent;
    private VersionInfo rawStringVersionInfo;
    public int Locale { get; public set; }
    public string Item { get; public set; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    public int Count { get; }
    internal VersionStringTable(VersionResource parent, VersionInfo rawStringVersionInfo);
    public int get_Locale();
    public void set_Locale(int value);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.String>.TryGetValue(string key, String& value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Add(KeyValuePair`2<string, string> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Remove(KeyValuePair`2<string, string> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Contains(KeyValuePair`2<string, string> item);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.String>.ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.String>.Add(string key, string value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.String>.Remove(string key);
    public sealed virtual void Clear();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual int get_Count();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.CopyTo(KeyValuePair`2[] array, int index);
    [IteratorStateMachineAttribute("WixToolset.Dtf.Resources.VersionStringTable/<GetEnumerator>d__26")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
