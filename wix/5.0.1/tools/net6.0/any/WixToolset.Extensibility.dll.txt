public abstract class WixToolset.Extensibility.BaseBinderExtension : object {
    [CompilerGeneratedAttribute]
private IBindContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    protected IBindContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    protected IBackendHelper BackendHelper { get; private set; }
    [CompilerGeneratedAttribute]
protected IBindContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IBindContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    [CompilerGeneratedAttribute]
protected IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private void set_BackendHelper(IBackendHelper value);
    public virtual void PreBind(IBindContext context);
    public virtual void PostBind(IBindResult result);
}
public abstract class WixToolset.Extensibility.BaseBurnBackendBinderExtension : object {
    [CompilerGeneratedAttribute]
private IBindContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBurnBackendHelper <BackendHelper>k__BackingField;
    protected IBindContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    protected IBurnBackendHelper BackendHelper { get; private set; }
    protected IReadOnlyCollection`1<IntermediateSymbolDefinition> SymbolDefinitions { get; }
    [CompilerGeneratedAttribute]
protected IBindContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IBindContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    [CompilerGeneratedAttribute]
protected IBurnBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private void set_BackendHelper(IBurnBackendHelper value);
    protected virtual IReadOnlyCollection`1<IntermediateSymbolDefinition> get_SymbolDefinitions();
    public virtual void PreBackendBind(IBindContext context);
    public virtual IResolveFileResult ResolveRelatedFile(string source, string relatedSource, string type, SourceLineNumber sourceLineNumbers);
    public virtual void SymbolsFinalized(IntermediateSection section);
    public virtual string ResolveUrl(string url, string fallbackUrl, string packageId, string payloadId, string fileName);
    public virtual bool TryProcessSymbol(IntermediateSection section, IntermediateSymbol symbol);
    public virtual void PostBackendBind(IBindResult result);
}
public abstract class WixToolset.Extensibility.BaseCommandLineCommand : object {
    [CompilerGeneratedAttribute]
private bool <StopParsing>k__BackingField;
    public bool ShowLogo { get; }
    public bool StopParsing { get; protected set; }
    public virtual bool get_ShowLogo();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopParsing();
    [CompilerGeneratedAttribute]
protected void set_StopParsing(bool value);
    public abstract virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public abstract virtual CommandLineHelp GetCommandLineHelp();
    public abstract virtual bool TryParseArgument(ICommandLineParser parser, string argument);
}
public abstract class WixToolset.Extensibility.BaseCompilerExtension : object {
    [CompilerGeneratedAttribute]
private ICompileContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IParseHelper <ParseHelper>k__BackingField;
    protected ICompileContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    protected IParseHelper ParseHelper { get; private set; }
    public XNamespace Namespace { get; }
    [CompilerGeneratedAttribute]
protected ICompileContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ICompileContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    [CompilerGeneratedAttribute]
protected IParseHelper get_ParseHelper();
    [CompilerGeneratedAttribute]
private void set_ParseHelper(IParseHelper value);
    public abstract virtual XNamespace get_Namespace();
    protected IComponentKeyPath CreateComponentKeyPath();
    public virtual void PreCompile(ICompileContext context);
    public virtual void ParseAttribute(Intermediate intermediate, IntermediateSection section, XElement parentElement, XAttribute attribute, IDictionary`2<string, string> context);
    public virtual void ParseElement(Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public virtual IComponentKeyPath ParsePossibleKeyPathElement(Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public virtual void PostCompile(Intermediate intermediate);
}
public abstract class WixToolset.Extensibility.BaseExtensionCommandLine : object {
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual void PostParse();
    public virtual void PreParse(ICommandLineContext context);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    public virtual bool TryParseCommand(ICommandLineParser parser, string argument, ICommandLineCommand& command);
}
public abstract class WixToolset.Extensibility.BaseExtensionData : object {
    [ObsoleteAttribute("Set the ExtensionDefaultCulture attribute in the WixLocalization source file instead.")]
public string DefaultCulture { get; }
    public virtual string get_DefaultCulture();
    public virtual Intermediate GetLibrary(ISymbolDefinitionCreator symbolDefinitions);
    public virtual bool TryGetSymbolDefinitionByName(string name, IntermediateSymbolDefinition& symbolDefinition);
}
public abstract class WixToolset.Extensibility.BaseExtensionFactory : object {
    protected IReadOnlyCollection`1<Type> ExtensionTypes { get; }
    protected abstract virtual IReadOnlyCollection`1<Type> get_ExtensionTypes();
    public virtual bool TryCreateExtension(Type extensionType, Object& extension);
}
public abstract class WixToolset.Extensibility.BaseLayoutExtension : object {
    [CompilerGeneratedAttribute]
private ILayoutContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    protected ILayoutContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    [CompilerGeneratedAttribute]
protected ILayoutContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ILayoutContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    public virtual void PreLayout(ILayoutContext context);
    public virtual bool CopyFile(string source, string destination);
    public virtual bool MoveFile(string source, string destination);
    public virtual void PostLayout();
}
public abstract class WixToolset.Extensibility.BaseLibrarianExtension : object {
    [CompilerGeneratedAttribute]
private ILibraryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    protected ILibraryContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    [CompilerGeneratedAttribute]
protected ILibraryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ILibraryContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    public virtual void PreCombine(ILibraryContext context);
    public virtual IResolveFileResult ResolveFile(SourceLineNumber sourceLineNumber, IntermediateSymbolDefinition symbolDefinition, string path);
    public virtual void PostCombine(ILibraryResult result);
    protected IResolveFileResult CreateResolveFileResult(string path, IReadOnlyCollection`1<string> checkedPaths);
}
public abstract class WixToolset.Extensibility.BaseLinkerExtension : object {
    [CompilerGeneratedAttribute]
private ILinkContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    protected ILinkContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    [CompilerGeneratedAttribute]
protected ILinkContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ILinkContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    public virtual void PreLink(ILinkContext context);
    public virtual void PostLink(Intermediate intermediate);
}
public abstract class WixToolset.Extensibility.BaseOptimizerExtension : object {
    public virtual void PreOptimize(IOptimizeContext context);
    public virtual void PostOptimize(IOptimizeContext context);
}
public abstract class WixToolset.Extensibility.BasePreprocessorExtension : object {
    [CompilerGeneratedAttribute]
private IPreprocessContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IPreprocessHelper <PreprocessHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Prefixes>k__BackingField;
    protected IPreprocessContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    protected IPreprocessHelper PreprocessHelper { get; private set; }
    public String[] Prefixes { get; protected set; }
    [CompilerGeneratedAttribute]
protected IPreprocessContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IPreprocessContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    [CompilerGeneratedAttribute]
protected IPreprocessHelper get_PreprocessHelper();
    [CompilerGeneratedAttribute]
private void set_PreprocessHelper(IPreprocessHelper value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Prefixes();
    [CompilerGeneratedAttribute]
protected void set_Prefixes(String[] value);
    public virtual void PrePreprocess(IPreprocessContext context);
    public virtual string GetVariableValue(string prefix, string name);
    public virtual string EvaluateFunction(string prefix, string function, String[] args);
    public virtual bool ProcessPragma(string prefix, string pragma, string args, XContainer parent);
    public virtual void PostPreprocess(IPreprocessResult result);
}
public abstract class WixToolset.Extensibility.BaseResolverExtension : object {
    [CompilerGeneratedAttribute]
private IResolveContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    protected IResolveContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    [CompilerGeneratedAttribute]
protected IResolveContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IResolveContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    protected IResolveFileResult CreateResolveFileResult();
    public virtual void PreResolve(IResolveContext context);
    public virtual IResolveFileResult ResolveFile(string source, IntermediateSymbolDefinition symbolDefinition, SourceLineNumber sourceLineNumbers, BindStage bindStage);
    public virtual void PostResolve(IResolveResult result);
}
public abstract class WixToolset.Extensibility.BaseWindowsInstallerBackendBinderExtension : object {
    [CompilerGeneratedAttribute]
private IBindContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper <BackendHelper>k__BackingField;
    protected IBindContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    protected IWindowsInstallerBackendHelper BackendHelper { get; private set; }
    public IReadOnlyCollection`1<TableDefinition> TableDefinitions { get; }
    [CompilerGeneratedAttribute]
protected IBindContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IBindContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    [CompilerGeneratedAttribute]
protected IWindowsInstallerBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private void set_BackendHelper(IWindowsInstallerBackendHelper value);
    public virtual IReadOnlyCollection`1<TableDefinition> get_TableDefinitions();
    protected IResolvedCabinet CreateResolvedCabinet();
    public virtual void PreBackendBind(IBindContext context);
    public virtual void SymbolsFinalized(IntermediateSection section);
    public virtual void FinalizePatchFilterIds(WindowsInstallerData data, IDictionary`2<Row, string> rowToFilterId, string filterIdPrefix);
    public virtual IResolvedCabinet ResolveCabinet(string cabinetPath, IEnumerable`1<IBindFileWithPath> files);
    public virtual string ResolveMedia(MediaSymbol mediaRow, string mediaLayoutDirectory, string layoutDirectory);
    public virtual bool TryProcessSymbol(IntermediateSection section, IntermediateSymbol symbol, WindowsInstallerData data, TableDefinitionCollection tableDefinitions);
    public virtual void PostBackendBind(IBindResult result);
}
public abstract class WixToolset.Extensibility.BaseWindowsInstallerDecompilerExtension : object {
    [CompilerGeneratedAttribute]
private IWindowsInstallerDecompileContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerDecompilerHelper <DecompilerHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TableDefinition> <TableDefinitions>k__BackingField;
    protected IWindowsInstallerDecompileContext Context { get; private set; }
    protected IMessaging Messaging { get; private set; }
    protected IWindowsInstallerDecompilerHelper DecompilerHelper { get; private set; }
    public IReadOnlyCollection`1<TableDefinition> TableDefinitions { get; }
    [CompilerGeneratedAttribute]
protected IWindowsInstallerDecompileContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IWindowsInstallerDecompileContext value);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private void set_Messaging(IMessaging value);
    [CompilerGeneratedAttribute]
protected IWindowsInstallerDecompilerHelper get_DecompilerHelper();
    [CompilerGeneratedAttribute]
private void set_DecompilerHelper(IWindowsInstallerDecompilerHelper value);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyCollection`1<TableDefinition> get_TableDefinitions();
    public virtual void PreDecompile(IWindowsInstallerDecompileContext context, IWindowsInstallerDecompilerHelper helper);
    public virtual void PreDecompileTables(TableIndexedCollection tables);
    public virtual bool TryDecompileTable(Table table);
    public virtual void PostDecompileTables(TableIndexedCollection tables);
    public virtual void PostDecompile(IWindowsInstallerDecompileResult result);
}
public static class WixToolset.Extensibility.CompilerConstants : object {
    public static int IntegerNotSet;
    public static int IllegalInteger;
    public static long LongNotSet;
    public static long IllegalLong;
    public static string IllegalGuid;
    public static Version IllegalVersion;
    private static CompilerConstants();
}
public enum WixToolset.Extensibility.Data.BindStage : Enum {
    public int value__;
    public static BindStage Normal;
    public static BindStage Target;
    public static BindStage Updated;
}
public enum WixToolset.Extensibility.Data.BundleConditionPhase : Enum {
    public int value__;
    public static BundleConditionPhase Startup;
    public static BundleConditionPhase Detect;
    public static BundleConditionPhase Plan;
    public static BundleConditionPhase Execute;
    public static BundleConditionPhase Shutdown;
}
[FlagsAttribute]
public enum WixToolset.Extensibility.Data.BundleVariableNameRule : Enum {
    public int value__;
    public static BundleVariableNameRule EnforceAllRestrictions;
    public static BundleVariableNameRule CanBeBuiltIn;
    public static BundleVariableNameRule CanBeWellKnown;
    public static BundleVariableNameRule CanHaveReservedPrefix;
}
[FlagsAttribute]
public enum WixToolset.Extensibility.Data.BurnPlatforms : Enum {
    public int value__;
    public static BurnPlatforms None;
    public static BurnPlatforms X86;
    public static BurnPlatforms X64;
    public static BurnPlatforms ARM64;
}
public enum WixToolset.Extensibility.Data.CabinetBuildOption : Enum {
    public int value__;
    public static CabinetBuildOption BuildAndMove;
    public static CabinetBuildOption BuildAndCopy;
    public static CabinetBuildOption Copy;
}
public class WixToolset.Extensibility.Data.CommandLineHelp : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Usage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<CommandLineHelpSwitch> <Switches>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<CommandLineHelpCommand> <Commands>k__BackingField;
    public string Description { get; public set; }
    public string Usage { get; public set; }
    public string Notes { get; public set; }
    public IReadOnlyCollection`1<CommandLineHelpSwitch> Switches { get; public set; }
    public IReadOnlyCollection`1<CommandLineHelpCommand> Commands { get; public set; }
    public CommandLineHelp(string description, string usage, IReadOnlyCollection`1<CommandLineHelpSwitch> switches, IReadOnlyCollection`1<CommandLineHelpCommand> commands);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Usage();
    [CompilerGeneratedAttribute]
public void set_Usage(string value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<CommandLineHelpSwitch> get_Switches();
    [CompilerGeneratedAttribute]
public void set_Switches(IReadOnlyCollection`1<CommandLineHelpSwitch> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<CommandLineHelpCommand> get_Commands();
    [CompilerGeneratedAttribute]
public void set_Commands(IReadOnlyCollection`1<CommandLineHelpCommand> value);
}
public class WixToolset.Extensibility.Data.CommandLineHelpCommand : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public CommandLineHelpCommand(string name, string description);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class WixToolset.Extensibility.Data.CommandLineHelpSwitch : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string ShortName { get; public set; }
    public string Description { get; public set; }
    public CommandLineHelpSwitch(string name, string description);
    public CommandLineHelpSwitch(string name, string shortName, string description);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[FlagsAttribute]
public enum WixToolset.Extensibility.Data.CustomActionPlatforms : Enum {
    public int value__;
    public static CustomActionPlatforms None;
    public static CustomActionPlatforms X86;
    public static CustomActionPlatforms X64;
    public static CustomActionPlatforms ARM64;
}
public enum WixToolset.Extensibility.Data.ExtensionCacheLocationScope : Enum {
    public int value__;
    public static ExtensionCacheLocationScope Project;
    public static ExtensionCacheLocationScope User;
    public static ExtensionCacheLocationScope Machine;
}
public interface WixToolset.Extensibility.Data.IBindContext {
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public int CabbingThreadCount { get; public set; }
    public string CabCachePath { get; public set; }
    public Nullable`1<CompressionLevel> DefaultCompressionLevel { get; public set; }
    public IReadOnlyCollection`1<IDelayedField> DelayedFields { get; public set; }
    public IReadOnlyCollection`1<IExpectedExtractFile> ExpectedEmbeddedFiles { get; public set; }
    public IReadOnlyCollection`1<IBinderExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IFileSystemExtension> FileSystemExtensions { get; public set; }
    public string IntermediateFolder { get; public set; }
    public Intermediate IntermediateRepresentation { get; public set; }
    public string OutputPath { get; public set; }
    public string OutputType { get; public set; }
    public PdbType PdbType { get; public set; }
    public string PdbPath { get; public set; }
    public Nullable`1<int> ResolvedCodepage { get; public set; }
    public Nullable`1<int> ResolvedSummaryInformationCodepage { get; public set; }
    public Nullable`1<int> ResolvedLcid { get; public set; }
    public bool SuppressLayout { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    public abstract virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    public abstract virtual int get_CabbingThreadCount();
    public abstract virtual void set_CabbingThreadCount(int value);
    public abstract virtual string get_CabCachePath();
    public abstract virtual void set_CabCachePath(string value);
    public abstract virtual Nullable`1<CompressionLevel> get_DefaultCompressionLevel();
    public abstract virtual void set_DefaultCompressionLevel(Nullable`1<CompressionLevel> value);
    public abstract virtual IReadOnlyCollection`1<IDelayedField> get_DelayedFields();
    public abstract virtual void set_DelayedFields(IReadOnlyCollection`1<IDelayedField> value);
    public abstract virtual IReadOnlyCollection`1<IExpectedExtractFile> get_ExpectedEmbeddedFiles();
    public abstract virtual void set_ExpectedEmbeddedFiles(IReadOnlyCollection`1<IExpectedExtractFile> value);
    public abstract virtual IReadOnlyCollection`1<IBinderExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<IBinderExtension> value);
    public abstract virtual IReadOnlyCollection`1<IFileSystemExtension> get_FileSystemExtensions();
    public abstract virtual void set_FileSystemExtensions(IReadOnlyCollection`1<IFileSystemExtension> value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual Intermediate get_IntermediateRepresentation();
    public abstract virtual void set_IntermediateRepresentation(Intermediate value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual string get_OutputType();
    public abstract virtual void set_OutputType(string value);
    public abstract virtual PdbType get_PdbType();
    public abstract virtual void set_PdbType(PdbType value);
    public abstract virtual string get_PdbPath();
    public abstract virtual void set_PdbPath(string value);
    public abstract virtual Nullable`1<int> get_ResolvedCodepage();
    public abstract virtual void set_ResolvedCodepage(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_ResolvedSummaryInformationCodepage();
    public abstract virtual void set_ResolvedSummaryInformationCodepage(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_ResolvedLcid();
    public abstract virtual void set_ResolvedLcid(Nullable`1<int> value);
    public abstract virtual bool get_SuppressLayout();
    public abstract virtual void set_SuppressLayout(bool value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.IBindFileWithPath {
    public string Id { get; public set; }
    public string Path { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
}
public interface WixToolset.Extensibility.Data.IBindPath {
    public string Name { get; public set; }
    public string Path { get; public set; }
    public BindStage Stage { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual BindStage get_Stage();
    public abstract virtual void set_Stage(BindStage value);
}
public interface WixToolset.Extensibility.Data.IBindResult {
    public IReadOnlyCollection`1<IFileTransfer> FileTransfers { get; public set; }
    public IReadOnlyCollection`1<ITrackedFile> TrackedFiles { get; public set; }
    public WixOutput Wixout { get; public set; }
    public abstract virtual IReadOnlyCollection`1<IFileTransfer> get_FileTransfers();
    public abstract virtual void set_FileTransfers(IReadOnlyCollection`1<IFileTransfer> value);
    public abstract virtual IReadOnlyCollection`1<ITrackedFile> get_TrackedFiles();
    public abstract virtual void set_TrackedFiles(IReadOnlyCollection`1<ITrackedFile> value);
    public abstract virtual WixOutput get_Wixout();
    public abstract virtual void set_Wixout(WixOutput value);
}
public interface WixToolset.Extensibility.Data.ICommandLineArguments {
    public String[] OriginalArguments { get; public set; }
    public String[] Arguments { get; public set; }
    public String[] Extensions { get; public set; }
    public string ErrorArgument { get; public set; }
    public abstract virtual String[] get_OriginalArguments();
    public abstract virtual void set_OriginalArguments(String[] value);
    public abstract virtual String[] get_Arguments();
    public abstract virtual void set_Arguments(String[] value);
    public abstract virtual String[] get_Extensions();
    public abstract virtual void set_Extensions(String[] value);
    public abstract virtual string get_ErrorArgument();
    public abstract virtual void set_ErrorArgument(string value);
    public abstract virtual void Populate(string commandLine);
    public abstract virtual void Populate(String[] args);
    public abstract virtual ICommandLineParser Parse();
}
public interface WixToolset.Extensibility.Data.ICommandLineCommand {
    public bool ShowLogo { get; }
    public bool StopParsing { get; }
    public abstract virtual bool get_ShowLogo();
    public abstract virtual bool get_StopParsing();
    public abstract virtual CommandLineHelp GetCommandLineHelp();
    public abstract virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public abstract virtual bool TryParseArgument(ICommandLineParser parser, string argument);
}
public interface WixToolset.Extensibility.Data.ICommandLineContext {
    public IServiceProvider ServiceProvider { get; }
    public IExtensionManager ExtensionManager { get; public set; }
    public ICommandLineArguments Arguments { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IExtensionManager get_ExtensionManager();
    public abstract virtual void set_ExtensionManager(IExtensionManager value);
    public abstract virtual ICommandLineArguments get_Arguments();
    public abstract virtual void set_Arguments(ICommandLineArguments value);
}
public interface WixToolset.Extensibility.Data.ICompileContext {
    public IServiceProvider ServiceProvider { get; }
    public string CompilationId { get; public set; }
    public IReadOnlyCollection`1<ICompilerExtension> Extensions { get; public set; }
    public string IntermediateFolder { get; public set; }
    public string OutputPath { get; public set; }
    public Platform Platform { get; public set; }
    public bool IsCurrentPlatform64Bit { get; }
    public XDocument Source { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual string get_CompilationId();
    public abstract virtual void set_CompilationId(string value);
    public abstract virtual IReadOnlyCollection`1<ICompilerExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<ICompilerExtension> value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual Platform get_Platform();
    public abstract virtual void set_Platform(Platform value);
    public abstract virtual bool get_IsCurrentPlatform64Bit();
    public abstract virtual XDocument get_Source();
    public abstract virtual void set_Source(XDocument value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.IComponentKeyPath {
    public bool Explicit { get; public set; }
    public Identifier Id { get; public set; }
    public PossibleKeyPathType Type { get; public set; }
    public abstract virtual bool get_Explicit();
    public abstract virtual void set_Explicit(bool value);
    public abstract virtual Identifier get_Id();
    public abstract virtual void set_Id(Identifier value);
    public abstract virtual PossibleKeyPathType get_Type();
    public abstract virtual void set_Type(PossibleKeyPathType value);
}
public interface WixToolset.Extensibility.Data.IDelayedField {
    public IntermediateField Field { get; }
    public IntermediateSymbol Symbol { get; }
    public abstract virtual IntermediateField get_Field();
    public abstract virtual IntermediateSymbol get_Symbol();
}
public interface WixToolset.Extensibility.Data.IExpectedExtractFile {
    public Uri Uri { get; public set; }
    public string EmbeddedFileId { get; public set; }
    public string OutputPath { get; public set; }
    public abstract virtual Uri get_Uri();
    public abstract virtual void set_Uri(Uri value);
    public abstract virtual string get_EmbeddedFileId();
    public abstract virtual void set_EmbeddedFileId(string value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
}
public interface WixToolset.Extensibility.Data.IExtensionCacheLocation {
    public string Path { get; }
    public ExtensionCacheLocationScope Scope { get; }
    public abstract virtual string get_Path();
    public abstract virtual ExtensionCacheLocationScope get_Scope();
}
public interface WixToolset.Extensibility.Data.IFileFacade {
    public string ComponentRef { get; }
    public bool Compressed { get; }
    public int DiskId { get; public set; }
    public string FileName { get; }
    public int FileSize { get; public set; }
    public Identifier Identifier { get; }
    public string Id { get; }
    public string Language { get; public set; }
    public Nullable`1<int> PatchGroup { get; }
    public int Sequence { get; public set; }
    public SourceLineNumber SourceLineNumber { get; }
    public string SourcePath { get; }
    public bool Uncompressed { get; }
    public string Version { get; public set; }
    public MsiFileHashSymbol MsiFileHashSymbol { get; public set; }
    public ICollection`1<MsiAssemblyNameSymbol> AssemblyNameSymbols { get; }
    public abstract virtual string get_ComponentRef();
    public abstract virtual bool get_Compressed();
    public abstract virtual int get_DiskId();
    public abstract virtual void set_DiskId(int value);
    public abstract virtual string get_FileName();
    public abstract virtual int get_FileSize();
    public abstract virtual void set_FileSize(int value);
    public abstract virtual Identifier get_Identifier();
    public abstract virtual string get_Id();
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual Nullable`1<int> get_PatchGroup();
    public abstract virtual int get_Sequence();
    public abstract virtual void set_Sequence(int value);
    public abstract virtual SourceLineNumber get_SourceLineNumber();
    public abstract virtual string get_SourcePath();
    public abstract virtual bool get_Uncompressed();
    public abstract virtual string get_Version();
    public abstract virtual void set_Version(string value);
    public abstract virtual MsiFileHashSymbol get_MsiFileHashSymbol();
    public abstract virtual void set_MsiFileHashSymbol(MsiFileHashSymbol value);
    public abstract virtual ICollection`1<MsiAssemblyNameSymbol> get_AssemblyNameSymbols();
}
public interface WixToolset.Extensibility.Data.IFileSystemContext {
    public IServiceProvider ServiceProvider { get; }
    public string CabCachePath { get; public set; }
    public string IntermediateFolder { get; public set; }
    public Intermediate IntermediateRepresentation { get; public set; }
    public string OutputPath { get; public set; }
    public string OutputPdbPath { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual string get_CabCachePath();
    public abstract virtual void set_CabCachePath(string value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual Intermediate get_IntermediateRepresentation();
    public abstract virtual void set_IntermediateRepresentation(Intermediate value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual string get_OutputPdbPath();
    public abstract virtual void set_OutputPdbPath(string value);
}
public interface WixToolset.Extensibility.Data.IFileTransfer {
    public string Destination { get; public set; }
    public bool Move { get; public set; }
    public bool Redundant { get; public set; }
    public string Source { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; public set; }
    public abstract virtual string get_Destination();
    public abstract virtual void set_Destination(string value);
    public abstract virtual bool get_Move();
    public abstract virtual void set_Move(bool value);
    public abstract virtual bool get_Redundant();
    public abstract virtual void set_Redundant(bool value);
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual SourceLineNumber get_SourceLineNumbers();
    public abstract virtual void set_SourceLineNumbers(SourceLineNumber value);
}
public interface WixToolset.Extensibility.Data.IIncludedFile {
    public string Path { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; public set; }
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual SourceLineNumber get_SourceLineNumbers();
    public abstract virtual void set_SourceLineNumbers(SourceLineNumber value);
}
public interface WixToolset.Extensibility.Data.ILayoutContext {
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<ILayoutExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<ITrackedFile> TrackedFiles { get; public set; }
    public IReadOnlyCollection`1<IFileTransfer> FileTransfers { get; public set; }
    public string IntermediateFolder { get; public set; }
    public string OutputPath { get; public set; }
    public string TrackingFile { get; public set; }
    public bool ResetAcls { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IReadOnlyCollection`1<ILayoutExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<ILayoutExtension> value);
    public abstract virtual IReadOnlyCollection`1<ITrackedFile> get_TrackedFiles();
    public abstract virtual void set_TrackedFiles(IReadOnlyCollection`1<ITrackedFile> value);
    public abstract virtual IReadOnlyCollection`1<IFileTransfer> get_FileTransfers();
    public abstract virtual void set_FileTransfers(IReadOnlyCollection`1<IFileTransfer> value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual string get_TrackingFile();
    public abstract virtual void set_TrackingFile(string value);
    public abstract virtual bool get_ResetAcls();
    public abstract virtual void set_ResetAcls(bool value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.ILibraryContext {
    public IServiceProvider ServiceProvider { get; }
    public bool BindFiles { get; public set; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public IDictionary`2<string, string> BindVariables { get; public set; }
    public IReadOnlyCollection`1<ILibrarianExtension> Extensions { get; public set; }
    public string LibraryId { get; public set; }
    public IReadOnlyCollection`1<Localization> Localizations { get; public set; }
    public string IntermediateFolder { get; public set; }
    public IReadOnlyCollection`1<Intermediate> Intermediates { get; public set; }
    public string OutputPath { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual bool get_BindFiles();
    public abstract virtual void set_BindFiles(bool value);
    public abstract virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    public abstract virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    public abstract virtual IDictionary`2<string, string> get_BindVariables();
    public abstract virtual void set_BindVariables(IDictionary`2<string, string> value);
    public abstract virtual IReadOnlyCollection`1<ILibrarianExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<ILibrarianExtension> value);
    public abstract virtual string get_LibraryId();
    public abstract virtual void set_LibraryId(string value);
    public abstract virtual IReadOnlyCollection`1<Localization> get_Localizations();
    public abstract virtual void set_Localizations(IReadOnlyCollection`1<Localization> value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual IReadOnlyCollection`1<Intermediate> get_Intermediates();
    public abstract virtual void set_Intermediates(IReadOnlyCollection`1<Intermediate> value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.ILibraryResult {
    public IReadOnlyCollection`1<ITrackedFile> TrackedFiles { get; public set; }
    public Intermediate Library { get; public set; }
    public abstract virtual IReadOnlyCollection`1<ITrackedFile> get_TrackedFiles();
    public abstract virtual void set_TrackedFiles(IReadOnlyCollection`1<ITrackedFile> value);
    public abstract virtual Intermediate get_Library();
    public abstract virtual void set_Library(Intermediate value);
}
public interface WixToolset.Extensibility.Data.ILinkContext {
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<ILinkerExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IExtensionData> ExtensionData { get; public set; }
    public OutputType ExpectedOutputType { get; public set; }
    public string IntermediateFolder { get; public set; }
    public IReadOnlyCollection`1<Intermediate> Intermediates { get; public set; }
    public string OutputPath { get; public set; }
    public Platform Platform { get; public set; }
    public bool SkipStdWixlib { get; public set; }
    public ISymbolDefinitionCreator SymbolDefinitionCreator { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IReadOnlyCollection`1<ILinkerExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<ILinkerExtension> value);
    public abstract virtual IReadOnlyCollection`1<IExtensionData> get_ExtensionData();
    public abstract virtual void set_ExtensionData(IReadOnlyCollection`1<IExtensionData> value);
    public abstract virtual OutputType get_ExpectedOutputType();
    public abstract virtual void set_ExpectedOutputType(OutputType value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual IReadOnlyCollection`1<Intermediate> get_Intermediates();
    public abstract virtual void set_Intermediates(IReadOnlyCollection`1<Intermediate> value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual Platform get_Platform();
    public abstract virtual void set_Platform(Platform value);
    public abstract virtual bool get_SkipStdWixlib();
    public abstract virtual void set_SkipStdWixlib(bool value);
    public abstract virtual ISymbolDefinitionCreator get_SymbolDefinitionCreator();
    public abstract virtual void set_SymbolDefinitionCreator(ISymbolDefinitionCreator value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.IOptimizeContext {
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IOptimizerExtension> Extensions { get; public set; }
    public string IntermediateFolder { get; public set; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public IDictionary`2<string, string> BindVariables { get; public set; }
    public Platform Platform { get; public set; }
    public IReadOnlyCollection`1<Intermediate> Intermediates { get; public set; }
    public IReadOnlyCollection`1<Localization> Localizations { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IReadOnlyCollection`1<IOptimizerExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<IOptimizerExtension> value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    public abstract virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    public abstract virtual IDictionary`2<string, string> get_BindVariables();
    public abstract virtual void set_BindVariables(IDictionary`2<string, string> value);
    public abstract virtual Platform get_Platform();
    public abstract virtual void set_Platform(Platform value);
    public abstract virtual IReadOnlyCollection`1<Intermediate> get_Intermediates();
    public abstract virtual void set_Intermediates(IReadOnlyCollection`1<Intermediate> value);
    public abstract virtual IReadOnlyCollection`1<Localization> get_Localizations();
    public abstract virtual void set_Localizations(IReadOnlyCollection`1<Localization> value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.IPreprocessContext {
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IPreprocessorExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<string> IncludeSearchPaths { get; public set; }
    public string IntermediateFolder { get; public set; }
    public string OutputPath { get; public set; }
    public Platform Platform { get; public set; }
    public string SourcePath { get; public set; }
    public IDictionary`2<string, string> Variables { get; public set; }
    public SourceLineNumber CurrentSourceLineNumber { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IReadOnlyCollection`1<IPreprocessorExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<IPreprocessorExtension> value);
    public abstract virtual IReadOnlyCollection`1<string> get_IncludeSearchPaths();
    public abstract virtual void set_IncludeSearchPaths(IReadOnlyCollection`1<string> value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual Platform get_Platform();
    public abstract virtual void set_Platform(Platform value);
    public abstract virtual string get_SourcePath();
    public abstract virtual void set_SourcePath(string value);
    public abstract virtual IDictionary`2<string, string> get_Variables();
    public abstract virtual void set_Variables(IDictionary`2<string, string> value);
    public abstract virtual SourceLineNumber get_CurrentSourceLineNumber();
    public abstract virtual void set_CurrentSourceLineNumber(SourceLineNumber value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.IPreprocessResult {
    public XDocument Document { get; public set; }
    public IReadOnlyCollection`1<IIncludedFile> IncludedFiles { get; public set; }
    public abstract virtual XDocument get_Document();
    public abstract virtual void set_Document(XDocument value);
    public abstract virtual IReadOnlyCollection`1<IIncludedFile> get_IncludedFiles();
    public abstract virtual void set_IncludedFiles(IReadOnlyCollection`1<IIncludedFile> value);
}
public interface WixToolset.Extensibility.Data.IResolveContext {
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public IDictionary`2<string, string> BindVariables { get; public set; }
    public IReadOnlyCollection`1<IResolverExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IExtensionData> ExtensionData { get; public set; }
    public IReadOnlyCollection`1<string> FilterCultures { get; public set; }
    public string IntermediateFolder { get; public set; }
    public Intermediate IntermediateRepresentation { get; public set; }
    public IReadOnlyCollection`1<Localization> Localizations { get; public set; }
    public bool AllowUnresolvedVariables { get; public set; }
    public string OutputPath { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    public abstract virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    public abstract virtual IDictionary`2<string, string> get_BindVariables();
    public abstract virtual void set_BindVariables(IDictionary`2<string, string> value);
    public abstract virtual IReadOnlyCollection`1<IResolverExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<IResolverExtension> value);
    public abstract virtual IReadOnlyCollection`1<IExtensionData> get_ExtensionData();
    public abstract virtual void set_ExtensionData(IReadOnlyCollection`1<IExtensionData> value);
    public abstract virtual IReadOnlyCollection`1<string> get_FilterCultures();
    public abstract virtual void set_FilterCultures(IReadOnlyCollection`1<string> value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual Intermediate get_IntermediateRepresentation();
    public abstract virtual void set_IntermediateRepresentation(Intermediate value);
    public abstract virtual IReadOnlyCollection`1<Localization> get_Localizations();
    public abstract virtual void set_Localizations(IReadOnlyCollection`1<Localization> value);
    public abstract virtual bool get_AllowUnresolvedVariables();
    public abstract virtual void set_AllowUnresolvedVariables(bool value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
}
public interface WixToolset.Extensibility.Data.IResolvedCabinet {
    public CabinetBuildOption BuildOption { get; public set; }
    public string Path { get; public set; }
    public abstract virtual CabinetBuildOption get_BuildOption();
    public abstract virtual void set_BuildOption(CabinetBuildOption value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
}
public interface WixToolset.Extensibility.Data.IResolvedDirectory {
    public string DirectoryParent { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public abstract virtual string get_DirectoryParent();
    public abstract virtual void set_DirectoryParent(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
}
public interface WixToolset.Extensibility.Data.IResolveFileResult {
    public IReadOnlyCollection`1<string> CheckedPaths { get; public set; }
    public string Path { get; public set; }
    public abstract virtual IReadOnlyCollection`1<string> get_CheckedPaths();
    public abstract virtual void set_CheckedPaths(IReadOnlyCollection`1<string> value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
}
public interface WixToolset.Extensibility.Data.IResolveResult {
    public Nullable`1<int> Codepage { get; public set; }
    public Nullable`1<int> SummaryInformationCodepage { get; public set; }
    public Nullable`1<int> PackageLcid { get; public set; }
    public IReadOnlyCollection`1<IDelayedField> DelayedFields { get; public set; }
    public IReadOnlyCollection`1<IExpectedExtractFile> ExpectedEmbeddedFiles { get; public set; }
    public Intermediate IntermediateRepresentation { get; public set; }
    public abstract virtual Nullable`1<int> get_Codepage();
    public abstract virtual void set_Codepage(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_SummaryInformationCodepage();
    public abstract virtual void set_SummaryInformationCodepage(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_PackageLcid();
    public abstract virtual void set_PackageLcid(Nullable`1<int> value);
    public abstract virtual IReadOnlyCollection`1<IDelayedField> get_DelayedFields();
    public abstract virtual void set_DelayedFields(IReadOnlyCollection`1<IDelayedField> value);
    public abstract virtual IReadOnlyCollection`1<IExpectedExtractFile> get_ExpectedEmbeddedFiles();
    public abstract virtual void set_ExpectedEmbeddedFiles(IReadOnlyCollection`1<IExpectedExtractFile> value);
    public abstract virtual Intermediate get_IntermediateRepresentation();
    public abstract virtual void set_IntermediateRepresentation(Intermediate value);
}
public interface WixToolset.Extensibility.Data.ITrackedFile {
    public string Path { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; public set; }
    public TrackedFileType Type { get; public set; }
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual SourceLineNumber get_SourceLineNumbers();
    public abstract virtual void set_SourceLineNumbers(SourceLineNumber value);
    public abstract virtual TrackedFileType get_Type();
    public abstract virtual void set_Type(TrackedFileType value);
}
public interface WixToolset.Extensibility.Data.IWindowsInstallerDecompileContext {
    public IServiceProvider ServiceProvider { get; }
    public string DecompilePath { get; public set; }
    public OutputType DecompileType { get; public set; }
    public IReadOnlyCollection`1<IWindowsInstallerDecompilerExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IExtensionData> ExtensionData { get; public set; }
    public ISymbolDefinitionCreator SymbolDefinitionCreator { get; public set; }
    public string ExtractFolder { get; public set; }
    public string CabinetExtractFolder { get; public set; }
    public string BaseSourcePath { get; public set; }
    public string IntermediateFolder { get; public set; }
    public string OutputPath { get; public set; }
    public bool SuppressCustomTables { get; public set; }
    public bool SuppressDroppingEmptyTables { get; public set; }
    public bool SuppressExtractCabinets { get; public set; }
    public bool SuppressRelativeActionSequencing { get; public set; }
    public bool SuppressUI { get; public set; }
    public bool KeepModularizationIds { get; public set; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual string get_DecompilePath();
    public abstract virtual void set_DecompilePath(string value);
    public abstract virtual OutputType get_DecompileType();
    public abstract virtual void set_DecompileType(OutputType value);
    public abstract virtual IReadOnlyCollection`1<IWindowsInstallerDecompilerExtension> get_Extensions();
    public abstract virtual void set_Extensions(IReadOnlyCollection`1<IWindowsInstallerDecompilerExtension> value);
    public abstract virtual IReadOnlyCollection`1<IExtensionData> get_ExtensionData();
    public abstract virtual void set_ExtensionData(IReadOnlyCollection`1<IExtensionData> value);
    public abstract virtual ISymbolDefinitionCreator get_SymbolDefinitionCreator();
    public abstract virtual void set_SymbolDefinitionCreator(ISymbolDefinitionCreator value);
    public abstract virtual string get_ExtractFolder();
    public abstract virtual void set_ExtractFolder(string value);
    public abstract virtual string get_CabinetExtractFolder();
    public abstract virtual void set_CabinetExtractFolder(string value);
    public abstract virtual string get_BaseSourcePath();
    public abstract virtual void set_BaseSourcePath(string value);
    public abstract virtual string get_IntermediateFolder();
    public abstract virtual void set_IntermediateFolder(string value);
    public abstract virtual string get_OutputPath();
    public abstract virtual void set_OutputPath(string value);
    public abstract virtual bool get_SuppressCustomTables();
    public abstract virtual void set_SuppressCustomTables(bool value);
    public abstract virtual bool get_SuppressDroppingEmptyTables();
    public abstract virtual void set_SuppressDroppingEmptyTables(bool value);
    public abstract virtual bool get_SuppressExtractCabinets();
    public abstract virtual void set_SuppressExtractCabinets(bool value);
    public abstract virtual bool get_SuppressRelativeActionSequencing();
    public abstract virtual void set_SuppressRelativeActionSequencing(bool value);
    public abstract virtual bool get_SuppressUI();
    public abstract virtual void set_SuppressUI(bool value);
    public abstract virtual bool get_KeepModularizationIds();
    public abstract virtual void set_KeepModularizationIds(bool value);
}
public interface WixToolset.Extensibility.Data.IWindowsInstallerDecompileResult {
    public WindowsInstallerData Data { get; public set; }
    public XDocument Document { get; public set; }
    public IList`1<string> ExtractedFilePaths { get; public set; }
    public Nullable`1<Platform> Platform { get; public set; }
    public abstract virtual WindowsInstallerData get_Data();
    public abstract virtual void set_Data(WindowsInstallerData value);
    public abstract virtual XDocument get_Document();
    public abstract virtual void set_Document(XDocument value);
    public abstract virtual IList`1<string> get_ExtractedFilePaths();
    public abstract virtual void set_ExtractedFilePaths(IList`1<string> value);
    public abstract virtual Nullable`1<Platform> get_Platform();
    public abstract virtual void set_Platform(Nullable`1<Platform> value);
}
public enum WixToolset.Extensibility.Data.PossibleKeyPathType : Enum {
    public int value__;
    public static PossibleKeyPathType None;
    public static PossibleKeyPathType File;
    public static PossibleKeyPathType Directory;
    public static PossibleKeyPathType OdbcDataSource;
    public static PossibleKeyPathType Registry;
    public static PossibleKeyPathType RegistryFormatted;
}
public enum WixToolset.Extensibility.Data.TrackedFileType : Enum {
    public int value__;
    public static TrackedFileType Input;
    public static TrackedFileType Temporary;
    public static TrackedFileType Intermediate;
    public static TrackedFileType BuiltContentOutput;
    public static TrackedFileType BuiltTargetOutput;
    public static TrackedFileType BuiltPdbOutput;
    public static TrackedFileType CopiedOutput;
}
public static class WixToolset.Extensibility.DecompilerConstants : object {
    public static char PrimaryKeyDelimiter;
    public static string PrimaryKeyDelimiterString;
}
public interface WixToolset.Extensibility.IBackend {
    public abstract virtual IBindResult Bind(IBindContext context);
}
public interface WixToolset.Extensibility.IBackendFactory {
    public abstract virtual bool TryCreateBackend(string outputType, string outputPath, IBackend& binder);
}
public interface WixToolset.Extensibility.IBinderExtension {
    public abstract virtual void PreBind(IBindContext context);
    public abstract virtual void PostBind(IBindResult result);
}
public interface WixToolset.Extensibility.IBurnBackendBinderExtension {
    public abstract virtual void PreBackendBind(IBindContext context);
    public abstract virtual IResolveFileResult ResolveRelatedFile(string source, string relatedSource, string type, SourceLineNumber sourceLineNumbers);
    public abstract virtual void SymbolsFinalized(IntermediateSection section);
    public abstract virtual string ResolveUrl(string url, string fallbackUrl, string packageId, string payloadId, string fileName);
    public abstract virtual bool TryProcessSymbol(IntermediateSection section, IntermediateSymbol symbol);
    public abstract virtual void PostBackendBind(IBindResult result);
}
public interface WixToolset.Extensibility.ICompilerExtension {
    public XNamespace Namespace { get; }
    public abstract virtual XNamespace get_Namespace();
    public abstract virtual void PreCompile(ICompileContext context);
    public abstract virtual void ParseAttribute(Intermediate intermediate, IntermediateSection section, XElement parentElement, XAttribute attribute, IDictionary`2<string, string> context);
    public abstract virtual void ParseElement(Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public abstract virtual IComponentKeyPath ParsePossibleKeyPathElement(Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public abstract virtual void PostCompile(Intermediate intermediate);
}
public interface WixToolset.Extensibility.IExtensionCommandLine {
    public abstract virtual CommandLineHelp GetCommandLineHelp();
    public abstract virtual void PreParse(ICommandLineContext context);
    public abstract virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    public abstract virtual bool TryParseCommand(ICommandLineParser parser, string argument, ICommandLineCommand& command);
    public abstract virtual void PostParse();
}
public interface WixToolset.Extensibility.IExtensionData {
    public abstract virtual bool TryGetSymbolDefinitionByName(string name, IntermediateSymbolDefinition& symbolDefinition);
    public abstract virtual Intermediate GetLibrary(ISymbolDefinitionCreator symbolDefinitions);
}
public interface WixToolset.Extensibility.IExtensionFactory {
    public abstract virtual bool TryCreateExtension(Type extensionType, Object& extension);
}
public interface WixToolset.Extensibility.IFileSystemExtension {
    public abstract virtual void Initialize(IFileSystemContext context);
    public abstract virtual Nullable`1<bool> CompareFiles(string targetFile, string updatedFile);
}
public interface WixToolset.Extensibility.ILayoutExtension {
    public abstract virtual void PreLayout(ILayoutContext context);
    public abstract virtual bool CopyFile(string source, string destination);
    public abstract virtual bool MoveFile(string source, string destination);
    public abstract virtual void PostLayout();
}
public interface WixToolset.Extensibility.ILibrarianExtension {
    public abstract virtual void PreCombine(ILibraryContext context);
    public abstract virtual IResolveFileResult ResolveFile(SourceLineNumber sourceLineNumber, IntermediateSymbolDefinition symbolDefinition, string path);
    public abstract virtual void PostCombine(ILibraryResult result);
}
public interface WixToolset.Extensibility.ILinkerExtension {
    public abstract virtual void PreLink(ILinkContext context);
    public abstract virtual void PostLink(Intermediate intermediate);
}
public interface WixToolset.Extensibility.IMessageListener {
    public abstract virtual MessageLevel CalculateMessageLevel(IMessaging messaging, Message message, MessageLevel defaultMessageLevel);
    public abstract virtual void Write(Message message);
    public abstract virtual void Write(string message);
}
public interface WixToolset.Extensibility.IOptimizerExtension {
    public abstract virtual void PreOptimize(IOptimizeContext context);
    public abstract virtual void PostOptimize(IOptimizeContext context);
}
public interface WixToolset.Extensibility.IPreprocessorExtension {
    public String[] Prefixes { get; }
    public abstract virtual String[] get_Prefixes();
    public abstract virtual void PrePreprocess(IPreprocessContext context);
    public abstract virtual string GetVariableValue(string prefix, string name);
    public abstract virtual string EvaluateFunction(string prefix, string function, String[] args);
    public abstract virtual bool ProcessPragma(string prefix, string pragma, string args, XContainer parent);
    public abstract virtual void PostPreprocess(IPreprocessResult result);
}
public interface WixToolset.Extensibility.IResolverExtension {
    public abstract virtual void PreResolve(IResolveContext context);
    public abstract virtual IResolveFileResult ResolveFile(string source, IntermediateSymbolDefinition symbolDefinition, SourceLineNumber sourceLineNumbers, BindStage bindStage);
    public abstract virtual void PostResolve(IResolveResult result);
}
public interface WixToolset.Extensibility.IWindowsInstallerBackendBinderExtension {
    public IReadOnlyCollection`1<TableDefinition> TableDefinitions { get; }
    public abstract virtual IReadOnlyCollection`1<TableDefinition> get_TableDefinitions();
    public abstract virtual void PreBackendBind(IBindContext context);
    public abstract virtual void SymbolsFinalized(IntermediateSection section);
    public abstract virtual void FinalizePatchFilterIds(WindowsInstallerData data, IDictionary`2<Row, string> rowToFilterId, string filterIdPrefix);
    public abstract virtual IResolvedCabinet ResolveCabinet(string cabinetPath, IEnumerable`1<IBindFileWithPath> files);
    public abstract virtual string ResolveMedia(MediaSymbol mediaSymbol, string mediaLayoutDirectory, string layoutDirectory);
    public abstract virtual bool TryProcessSymbol(IntermediateSection section, IntermediateSymbol symbol, WindowsInstallerData data, TableDefinitionCollection tableDefinitions);
    public abstract virtual void PostBackendBind(IBindResult result);
}
public interface WixToolset.Extensibility.IWindowsInstallerDecompilerExtension {
    public IReadOnlyCollection`1<TableDefinition> TableDefinitions { get; }
    public abstract virtual IReadOnlyCollection`1<TableDefinition> get_TableDefinitions();
    public abstract virtual void PreDecompile(IWindowsInstallerDecompileContext context, IWindowsInstallerDecompilerHelper helper);
    public abstract virtual void PreDecompileTables(TableIndexedCollection tables);
    public abstract virtual bool TryDecompileTable(Table table);
    public abstract virtual void PostDecompileTables(TableIndexedCollection tables);
    public abstract virtual void PostDecompile(IWindowsInstallerDecompileResult result);
}
public interface WixToolset.Extensibility.Services.IBackendHelper {
    public abstract virtual string CreateGuid();
    public abstract virtual string CreateGuid(Guid namespaceGuid, string value);
    public abstract virtual IResolvedDirectory CreateResolvedDirectory(string directoryParent, string name);
    public abstract virtual IReadOnlyList`1<ITrackedFile> ExtractEmbeddedFiles(IEnumerable`1<IExpectedExtractFile> embeddedFiles);
    public abstract virtual string GenerateIdentifier(string prefix, String[] args);
    public abstract virtual int GetValidCodePage(string value, bool allowNoChange, bool onlyAnsi, SourceLineNumber sourceLineNumbers);
    public abstract virtual string GetMsiFileName(string value, bool source, bool longName);
    public abstract virtual bool IsValidBinderVariable(string variable);
    public abstract virtual bool IsValidFourPartVersion(string version);
    public abstract virtual bool IsValidMsiProductVersion(string version);
    public abstract virtual bool IsValidWixVersion(string version);
    public abstract virtual bool IsValidIdentifier(string id);
    public abstract virtual bool IsValidLongFilename(string filename, bool allowWildcards, bool allowRelative);
    public abstract virtual bool IsValidShortFilename(string filename, bool allowWildcards);
    public abstract virtual void ResolveDelayedFields(IEnumerable`1<IDelayedField> delayedFields, Dictionary`2<string, string> variableCache);
    public abstract virtual String[] SplitMsiFileName(string value);
    public abstract virtual bool TryParseFourPartVersion(string version, String& parsedVersion);
    public abstract virtual bool TryParseMsiProductVersion(string version, bool strict, String& parsedVersion);
}
public interface WixToolset.Extensibility.Services.IBundleValidator {
    public abstract virtual string GetCanonicalRelativePath(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string relativePath);
    public abstract virtual bool ValidateBundleMsiPropertyName(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string propertyName);
    public abstract virtual bool ValidateBundleVariableNameDeclaration(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string variableName);
    public abstract virtual bool ValidateBundleVariableNameValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string variableName, BundleVariableNameRule nameRule);
    public abstract virtual bool ValidateBundleVariableNameTarget(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string variableName);
    public abstract virtual bool ValidateBundleCondition(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string condition, BundleConditionPhase phase);
}
public interface WixToolset.Extensibility.Services.IBurnBackendHelper {
    public abstract virtual void AddBootstrapperApplicationData(string xml);
    public abstract virtual void AddBootstrapperApplicationData(IntermediateSymbol symbol, bool symbolIdIsIdAttribute);
    public abstract virtual void AddBootstrapperExtensionData(string extensionId, string xml);
    public abstract virtual void AddBootstrapperExtensionData(string extensionId, IntermediateSymbol symbol, bool symbolIdIsIdAttribute);
}
public interface WixToolset.Extensibility.Services.ICommandLine {
    public abstract virtual ICommandLineCommand CreateCommand(String[] args);
    public abstract virtual ICommandLineCommand CreateCommand(string commandLine);
    public abstract virtual ICommandLineCommand ParseStandardCommandLine(ICommandLineArguments arguments);
}
public interface WixToolset.Extensibility.Services.ICommandLineParser {
    public string ErrorArgument { get; }
    public abstract virtual string get_ErrorArgument();
    public abstract virtual bool IsSwitch(string argument);
    public abstract virtual string GetArgumentAsFilePathOrError(string argument, string fileType);
    public abstract virtual bool GetArgumentAsFilePathOrError(string argument, string fileType, IList`1<string> paths);
    public abstract virtual string GetNextArgumentOrError(string argument);
    public abstract virtual bool GetNextArgumentOrError(string argument, IList`1<string> arguments);
    public abstract virtual string GetNextArgumentAsDirectoryOrError(string argument);
    public abstract virtual bool GetNextArgumentAsDirectoryOrError(string argument, IList`1<string> directories);
    public abstract virtual string GetNextArgumentAsFilePathOrError(string argument, string filePurpose);
    public abstract virtual bool GetNextArgumentAsFilePathOrError(string argument, string fileType, IList`1<string> paths);
    public abstract virtual void ReportErrorArgument(string argument, Message message);
    public abstract virtual bool TryGetNextSwitchOrArgument(String& argument);
    public abstract virtual string PeekNextArgument();
    public abstract virtual bool TryPeekNextArgument(String& argument);
}
public interface WixToolset.Extensibility.Services.IExtensionManager {
    public abstract virtual void Add(Assembly extensionAssembly);
    public abstract virtual void Load(string extensionReference);
    public abstract virtual IReadOnlyCollection`1<IExtensionCacheLocation> GetCacheLocations();
    public abstract virtual string GetExtensionPackageRootFolderName();
    public abstract virtual IReadOnlyCollection`1<T> GetServices();
}
public interface WixToolset.Extensibility.Services.IFileResolver {
    public abstract virtual string ResolveFile(string source, IEnumerable`1<ILibrarianExtension> librarianExtensions, IEnumerable`1<IBindPath> bindPaths, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition);
    public abstract virtual string ResolveFile(string source, IEnumerable`1<IResolverExtension> resolverExtensions, IEnumerable`1<IBindPath> bindPaths, BindStage bindStage, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, IEnumerable`1<string> alreadyCheckedPaths);
}
public interface WixToolset.Extensibility.Services.IFileSystem {
    public abstract virtual void CopyFile(SourceLineNumber sourceLineNumbers, string source, string destination, bool allowHardlink);
    public abstract virtual void DeleteFile(SourceLineNumber sourceLineNumbers, string source, bool throwOnError, int maxRetries);
    public abstract virtual void MoveFile(SourceLineNumber sourceLineNumbers, string source, string destination);
    public abstract virtual FileStream OpenFile(SourceLineNumber sourceLineNumbers, string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual void ExecuteWithRetries(Action action, int maxRetries);
}
public interface WixToolset.Extensibility.Services.ILayoutServices {
    public abstract virtual IFileTransfer CreateFileTransfer(string source, string destination, bool move, SourceLineNumber sourceLineNumbers);
    public abstract virtual ITrackedFile TrackFile(string path, TrackedFileType type, SourceLineNumber sourceLineNumbers);
}
public interface WixToolset.Extensibility.Services.IMessaging {
    public bool EncounteredError { get; }
    public int ErrorCount { get; }
    public int LastErrorNumber { get; }
    public bool ShowVerboseMessages { get; public set; }
    public bool SuppressAllWarnings { get; public set; }
    public bool WarningsAsError { get; public set; }
    public abstract virtual bool get_EncounteredError();
    public abstract virtual int get_ErrorCount();
    public abstract virtual int get_LastErrorNumber();
    public abstract virtual bool get_ShowVerboseMessages();
    public abstract virtual void set_ShowVerboseMessages(bool value);
    public abstract virtual bool get_SuppressAllWarnings();
    public abstract virtual void set_SuppressAllWarnings(bool value);
    public abstract virtual bool get_WarningsAsError();
    public abstract virtual void set_WarningsAsError(bool value);
    public abstract virtual void SetListener(IMessageListener listener);
    public abstract virtual void ElevateWarningMessage(int warningNumber);
    public abstract virtual void SuppressWarningMessage(int warningNumber);
    public abstract virtual void Write(Message message);
    public abstract virtual void Write(string message, bool verbose);
}
public interface WixToolset.Extensibility.Services.IParseHelper {
    public abstract virtual string CreateGuid(Guid namespaceGuid, string value);
    public abstract virtual Identifier CreateIdentifier(string prefix, String[] args);
    public abstract virtual Identifier CreateIdentifierFromFilename(string filename);
    public abstract virtual string CreateIdentifierValueFromPlatform(string name, Platform currentPlatform, BurnPlatforms supportedPlatforms);
    public abstract virtual IntermediateSymbol CreateSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, string symbolName, Identifier identifier);
    public abstract virtual IntermediateSymbol CreateSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, Identifier identifier);
    public abstract virtual Identifier CreateDirectorySymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, Identifier id, string parentId, string name, string shortName, string sourceName, string shortSourceName);
    public abstract virtual string CreateDirectoryReferenceFromInlineSyntax(IntermediateSection section, SourceLineNumber sourceLineNumbers, XAttribute attribute, string parentId, string inlineSyntax, IDictionary`2<string, string> sectionCachedInlinedDirectoryIds);
    public abstract virtual Identifier CreateRegistrySymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, RegistryRootType root, string key, string name, string value, string componentId, RegistryValueType valueType, RegistryValueActionType valueAction);
    public abstract virtual Identifier CreateRegistrySymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, RegistryRootType root, string key, string name, int value, string componentId);
    public abstract virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, string symbolName, string primaryKey);
    public abstract virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, string symbolName, String[] primaryKeys);
    public abstract virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, string primaryKey);
    public abstract virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, String[] primaryKeys);
    public abstract virtual void CreateCustomActionReference(SourceLineNumber sourceLineNumbers, IntermediateSection section, string customAction, Platform platform, CustomActionPlatforms supportedPlatforms);
    public abstract virtual void CreateComplexReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, string parentLanguage, ComplexReferenceChildType childType, string childId, bool isPrimary);
    public abstract virtual void CreateWixGroupSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType childType, string childId);
    public abstract virtual void CreateWixSearchSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, string elementName, Identifier id, string variable, string condition, string after, string bootstrapperExtensionId);
    public abstract virtual void CreateWixSearchRelationSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, Identifier id, string parentId, int attributes);
    public abstract virtual bool ContainsProperty(string possibleProperty);
    public abstract virtual void EnsureTable(IntermediateSection section, SourceLineNumber sourceLineNumbers, string tableName);
    public abstract virtual void EnsureTable(IntermediateSection section, SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public abstract virtual string GetAttributeValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, EmptyRule emptyRule);
    public abstract virtual Identifier GetAttributeBundleVariableNameIdentifier(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public abstract virtual string GetAttributeBundleVariableNameValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, BundleVariableNameRule nameRule);
    public abstract virtual string GetAttributeGuidValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool generatable, bool canBeEmpty);
    public abstract virtual Identifier GetAttributeIdentifier(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public abstract virtual string GetAttributeIdentifierValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public abstract virtual int GetAttributeIntegerValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, int minimum, int maximum);
    public abstract virtual long GetAttributeLongValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, long minimum, long maximum);
    public abstract virtual string GetAttributeLongFilename(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool allowWildcards, bool allowRelative);
    public abstract virtual Nullable`1<RegistryRootType> GetAttributeRegistryRootValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool allowHkmu);
    public abstract virtual string GetAttributeVersionValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public abstract virtual YesNoType GetAttributeYesNoValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public abstract virtual YesNoDefaultType GetAttributeYesNoDefaultValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public abstract virtual SourceLineNumber GetSourceLineNumbers(XElement element);
    [ObsoleteAttribute]
public abstract virtual string GetConditionInnerText(XElement node);
    [ObsoleteAttribute]
public abstract virtual string GetTrimmedInnerText(XElement element);
    public abstract virtual void InnerTextDisallowed(XElement element);
    public abstract virtual void InnerTextDisallowed(XElement element, string attributeName);
    public abstract virtual bool IsValidIdentifier(string value);
    public abstract virtual bool IsValidLocIdentifier(string identifier);
    public abstract virtual bool IsValidLongFilename(string filename, bool allowWildcards, bool allowRelative);
    public abstract virtual bool IsValidShortFilename(string filename, bool allowWildcards);
    public abstract virtual void ParseExtensionAttribute(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement element, XAttribute attribute, IDictionary`2<string, string> context);
    public abstract virtual void ParseExtensionElement(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public abstract virtual IComponentKeyPath ParsePossibleKeyPathExtensionElement(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public abstract virtual void ParseForExtensionElements(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement element, IDictionary`2<string, string> context);
    public abstract virtual WixActionSymbol ScheduleActionSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, AccessModifier access, SequenceTable sequence, string name, string condition, string beforeAction, string afterAction, bool overridable);
    public abstract virtual void UnexpectedAttribute(XElement element, XAttribute attribute);
    public abstract virtual void UnexpectedElement(XElement parentElement, XElement childElement);
}
public interface WixToolset.Extensibility.Services.IPathResolver {
    public abstract virtual string GetCanonicalDirectoryPath(Dictionary`2<string, IResolvedDirectory> directories, Dictionary`2<string, string> componentIdGenSeeds, string directory, Platform platform);
    public abstract virtual string GetDirectoryPath(Dictionary`2<string, IResolvedDirectory> directories, string directory);
    public abstract virtual string GetFileSourcePath(Dictionary`2<string, IResolvedDirectory> directories, string directoryId, string fileName, bool compressed, bool useLongName);
}
public interface WixToolset.Extensibility.Services.IPreprocessHelper {
    public abstract virtual void AddVariable(IPreprocessContext context, string name, string value);
    public abstract virtual void AddVariable(IPreprocessContext context, string name, string value, bool showWarning);
    public abstract virtual string EvaluateFunction(IPreprocessContext context, string function);
    public abstract virtual string EvaluateFunction(IPreprocessContext context, string prefix, string function, String[] args);
    public abstract virtual string GetVariableValue(IPreprocessContext context, string variable, bool allowMissingPrefix);
    public abstract virtual string GetVariableValue(IPreprocessContext context, string prefix, string name);
    public abstract virtual void PreprocessPragma(IPreprocessContext context, string pragmaName, string args, XContainer parent);
    public abstract virtual string PreprocessString(IPreprocessContext context, string value);
    public abstract virtual void RemoveVariable(IPreprocessContext context, string name);
}
public interface WixToolset.Extensibility.Services.IVariableResolution {
    public bool DelayedResolve { get; public set; }
    public bool IsDefault { get; public set; }
    public bool UpdatedValue { get; public set; }
    public string Value { get; public set; }
    public abstract virtual bool get_DelayedResolve();
    public abstract virtual void set_DelayedResolve(bool value);
    public abstract virtual bool get_IsDefault();
    public abstract virtual void set_IsDefault(bool value);
    public abstract virtual bool get_UpdatedValue();
    public abstract virtual void set_UpdatedValue(bool value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
public interface WixToolset.Extensibility.Services.IVariableResolver {
    public abstract virtual void AddLocalization(Localization localization);
    public abstract virtual void AddVariable(SourceLineNumber sourceLineNumber, string name, string value, bool overridable);
    public abstract virtual IVariableResolution ResolveVariables(SourceLineNumber sourceLineNumbers, string value);
    public abstract virtual IVariableResolution ResolveVariables(SourceLineNumber sourceLineNumbers, string value, bool errorOnUnknown);
    public abstract virtual bool TryGetLocalizedControl(string dialog, string control, LocalizedControl& localizedControl);
}
public interface WixToolset.Extensibility.Services.IWindowsInstallerBackendHelper {
    public abstract virtual IFileFacade CreateFileFacade(FileSymbol file);
    public abstract virtual IFileFacade CreateFileFacade(FileRow fileRow);
    public abstract virtual Row CreateRow(IntermediateSection section, IntermediateSymbol symbol, WindowsInstallerData data, TableDefinition tableDefinition);
    public abstract virtual bool TryAddSymbolToMatchingTableDefinitions(IntermediateSection section, IntermediateSymbol symbol, WindowsInstallerData data, TableDefinitionCollection tableDefinitions);
}
public interface WixToolset.Extensibility.Services.IWindowsInstallerDecompilerHelper {
    public XElement RootElement { get; public set; }
    public abstract virtual XElement get_RootElement();
    public abstract virtual void set_RootElement(XElement value);
    public abstract virtual XElement AddElementToRoot(string name, Object[] content);
    public abstract virtual XElement AddElementToRoot(XName name, Object[] content);
    public abstract virtual XElement AddElementToRoot(XElement element);
    public abstract virtual XElement CreateElement(string name, Object[] content);
    public abstract virtual XElement GetIndexedElement(Row row);
    public abstract virtual XElement GetIndexedElement(string table, string primaryKey);
    public abstract virtual XElement GetIndexedElement(string table, string primaryKey1, string primaryKey2);
    public abstract virtual XElement GetIndexedElement(string table, string primaryKey1, string primaryKey2, string primaryKey3);
    public abstract virtual XElement GetIndexedElement(string table, String[] primaryKeys);
    public abstract virtual bool TryGetIndexedElement(Row row, XElement& element);
    public abstract virtual bool TryGetIndexedElement(string table, string primaryKey, XElement& element);
    public abstract virtual bool TryGetIndexedElement(string table, string primaryKey1, string primaryKey2, XElement& element);
    public abstract virtual bool TryGetIndexedElement(string table, string primaryKey1, string primaryKey2, string primaryKey3, XElement& element);
    public abstract virtual bool TryGetIndexedElement(string table, String[] primaryKeys, XElement& element);
    public abstract virtual void IndexElement(Row row, XElement element);
    public abstract virtual void IndexElement(string table, string primaryKey, XElement element);
    public abstract virtual void IndexElement(string table, string primaryKey1, string primaryKey2, XElement element);
    public abstract virtual void IndexElement(string table, string primaryKey1, string primaryKey2, string primaryKey3, XElement element);
    public abstract virtual void IndexElement(string table, String[] primaryKeys, XElement element);
}
public interface WixToolset.Extensibility.Services.IWixBranding {
    public abstract virtual string GetCreatingApplication();
    public abstract virtual string ReplacePlaceholders(string original, Assembly assembly);
}
public interface WixToolset.Extensibility.Services.IWixToolsetCoreServiceProvider {
    public abstract virtual void AddService(Type serviceType, Func`3<IWixToolsetCoreServiceProvider, Dictionary`2<Type, object>, object> creationFunction);
    public abstract virtual void AddService(Func`3<IWixToolsetCoreServiceProvider, Dictionary`2<Type, object>, T> creationFunction);
}
[ExtensionAttribute]
public static class WixToolset.Extensibility.Services.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider provider);
    [ExtensionAttribute]
public static bool TryGetService(IServiceProvider provider, Type serviceType, Object& service);
    [ExtensionAttribute]
public static bool TryGetService(IServiceProvider provider, T& service);
}
