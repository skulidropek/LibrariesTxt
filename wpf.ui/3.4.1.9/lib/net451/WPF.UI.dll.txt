[GuidAttribute("00000603-0000-0010-8000-00AA006D2EA4")]
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute]
[DefaultMemberAttribute("Tables")]
public interface ADOX._Catalog {
    [DispIdAttribute("0")]
public Tables Tables { get; }
    [DispIdAttribute("0")]
public abstract virtual Tables get_Tables();
    public void _VtblGap1_7();
    [DispIdAttribute("6")]
public abstract virtual object Create(string ConnectString);
}
[TypeIdentifierAttribute]
[CompilerGeneratedAttribute]
[GuidAttribute("00000512-0000-0010-8000-00AA006D2EA4")]
public interface ADOX._Collection {
}
[GuidAttribute("00000603-0000-0010-8000-00AA006D2EA4")]
[TypeIdentifierAttribute]
[CoClassAttribute("System.Object")]
[CompilerGeneratedAttribute]
public interface ADOX.Catalog {
}
[DefaultMemberAttribute("Item")]
[CompilerGeneratedAttribute]
[GuidAttribute("00000611-0000-0010-8000-00AA006D2EA4")]
[TypeIdentifierAttribute]
public interface ADOX.Tables {
}
internal static class cBSMxLUEMrqk0d2sQF : object {
    private static cBSMxLUEMrqk0d2sQF();
}
internal class cH8IXcwQY4Peh2qpAn.xrUtBVoaXtCT6B0w6a : object {
    private static bool ywq4VEynyU;
    private static xrUtBVoaXtCT6B0w6a();
    internal static void Hxi1QRxzqbNe7();
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface IBiz.IAccessDataBaseBiz {
    public abstract virtual List`1<T> DataTableToList(DataTable dt);
    public abstract virtual int DeleteSQL(string strWhere);
    public abstract virtual Task`1<int> ExecSQLNoQueryAsync(string strSql);
    public abstract virtual int ExecSQLNoQuery(string strSql);
    public abstract virtual Task`1<int> DeleteSQLAsync(string strWhere);
    public abstract virtual OleDbDataReader ExecSQLQuery(string strSQL);
    public abstract virtual int InsertSQL(string strValue);
    public abstract virtual Task`1<int> InsertSQLAsync(string strValue);
    public abstract virtual DataTable SelectSQL(string strDisp, string strWhere);
    public abstract virtual void SetConnStr(string Strconn);
    public abstract virtual int UpdateSQL(string strSet, string strWhere);
    public abstract virtual Task`1<int> UpdateSQLAsync(string strSet, string strWhere);
    public abstract virtual bool CompactAccess(string accessFile);
    public abstract virtual bool CompactAccessFile(string accessFile);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface IBiz.IFilesBiz {
    public abstract virtual string AddBlankString(int length);
    public abstract virtual void BytesToFile(Byte[] bytes, string saveFile);
    public abstract virtual void ClearMemory();
    public abstract virtual Task ClearMemoryAsncy();
    public abstract virtual TcpClient ConnTcp(string IPaddress, int Port, int WaitTime);
    public abstract virtual string CreateFolder(string fileName, string filePath);
    public abstract virtual string Decode(string data);
    public abstract virtual bool DeleteKey(string section, string key, string InIFilePath);
    public abstract virtual bool DeleteSection(string Section, string InIFilePath);
    public abstract virtual string Encode(string data);
    public abstract virtual string FileCopy(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual string FileRead(string path, string encoding);
    public abstract virtual Byte[] FileToBytes(string path);
    public abstract virtual void FileWrite(string path, string str, bool append, string encoding);
    public abstract virtual List`1<string> GetFiles(string path, string searchPattern);
    public abstract virtual List`1<string> GetSectionAllKeys(string Key, string InIFilePath);
    public abstract virtual List`1<Tuple`2<string, string>> GetAllValues(string Key, string InIFilePath);
    public abstract virtual bool PingIP(string ip);
    public abstract virtual double ReadIniDouble(string section, string key, string InIFilePath);
    public abstract virtual int ReadIniInt(string section, string key, string InIFilePath);
    public abstract virtual string ReadIniString(string section, string key, string InIFilePath);
    public abstract virtual string Replace(string str, string oldStr, string newStr);
    public abstract virtual void SetIniPath(string striniFilePath);
    public abstract virtual void SetTime(string strTime);
    public abstract virtual bool WriteIniString(string section, string key, string val, string InIFilePath);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface IBiz.ILogNetBiz {
    public abstract virtual void WriteDebug(string content, string fileName, string path);
    public abstract virtual void WriteInfo(string content, string fileName, string path);
    public abstract virtual void WriteError(string content, string fileName, string path);
    public abstract virtual void WriteException(Exception ex, string title, string fileName, string path);
    public abstract virtual void WriteNewLine(string fileName, string path);
    public abstract virtual void WriteString(string content, string fileName, string path);
    public abstract virtual void WriteTitle(string content, string fileName, string path);
    public abstract virtual void WriteWarn(string content, string fileName, string path);
    public abstract virtual void WriteFatal(string content, string fileName, string path);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
    private static EmbeddedAttribute();
}
[EmbeddedAttribute{75775834-8F42-4314-9990-4FFC3BD543DD}]
[CompilerGeneratedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute{75775834-8F42-4314-9990-4FFC3BD543DD} : Attribute {
    private static EmbeddedAttribute{75775834-8F42-4314-9990-4FFC3BD543DD}();
}
[EmbeddedAttribute{988638CB-9EF3-4647-99AF-863AC4CE39CC}]
[CompilerGeneratedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute{988638CB-9EF3-4647-99AF-863AC4CE39CC} : Attribute {
    private static EmbeddedAttribute{988638CB-9EF3-4647-99AF-863AC4CE39CC}();
}
[TypeIdentifierAttribute]
[CompilerGeneratedAttribute]
[GuidAttribute("000000A0-0000-0010-8000-00AA006D2EA4")]
public interface Microsoft.Office.Interop.Access.Dao._Collection {
}
[TypeIdentifierAttribute]
[GuidAttribute("0000000A-0000-0010-8000-00AA006D2EA4")]
[CompilerGeneratedAttribute]
public interface Microsoft.Office.Interop.Access.Dao._DAO {
}
[TypeIdentifierAttribute]
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("Workspaces")]
[GuidAttribute("00000021-0000-0010-8000-00AA006D2EA4")]
public interface Microsoft.Office.Interop.Access.Dao._DBEngine {
    [DispIdAttribute("0")]
public Workspaces Workspaces { get; }
    public void _VtblGap1_8();
    [DispIdAttribute("0")]
public abstract virtual Workspaces get_Workspaces();
    public void _VtblGap2_2();
    [DispIdAttribute("1610809354")]
public abstract virtual void CompactDatabase(string SrcName, string DstName, object DstLocale, object Options, object SrcLocale);
}
[TypeIdentifierAttribute]
[CompilerGeneratedAttribute]
[GuidAttribute("000000A2-0000-0010-8000-00AA006D2EA4")]
public interface Microsoft.Office.Interop.Access.Dao._DynaCollection {
}
[CoClassAttribute("System.Object")]
[GuidAttribute("00000021-0000-0010-8000-00AA006D2EA4")]
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute]
public interface Microsoft.Office.Interop.Access.Dao.DBEngine {
}
[TypeIdentifierAttribute]
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("Item")]
[GuidAttribute("0000003B-0000-0010-8000-00AA006D2EA4")]
public interface Microsoft.Office.Interop.Access.Dao.Workspaces {
}
internal class SOj3wtG2Ob7xEudvw7.CDCWSn7SaPjUwoq2Cc : object {
    internal static Module TWp4PNnQc;
    private static CDCWSn7SaPjUwoq2Cc();
    internal static void KWN1QRxxSoqkd(int typemdt);
}
[EmbeddedAttribute{75775834-8F42-4314-9990-4FFC3BD543DD}]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
    private static IsReadOnlyAttribute();
}
[CompilerGeneratedAttribute]
[AttributeUsageAttribute("27524")]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
    private static NullableAttribute();
}
[AttributeUsageAttribute("27524")]
[EmbeddedAttribute{988638CB-9EF3-4647-99AF-863AC4CE39CC}]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A} : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}(byte );
    public NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}(Byte[] );
    private static NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}();
}
[AttributeUsageAttribute("5196")]
[EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
    private static NullableContextAttribute();
}
[EmbeddedAttribute{988638CB-9EF3-4647-99AF-863AC4CE39CC}]
[CompilerGeneratedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D} : Attribute {
    public byte Flag;
    public NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}(byte );
    private static NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute{75775834-8F42-4314-9990-4FFC3BD543DD}]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
    private static RefSafetyRulesAttribute();
}
internal class vJiGl01UUJfXfNWas3.DyyVDbaRvM1YfIq9il : object {
    private static IntPtr c9FNce5cf;
    private static Int32[] sMgC0o5PW;
    private static int S0FvrGWpN;
    internal static rL2N9N6wh7IWY3IC3G x3c4o2PyTx;
    private static long phV4Uu6SUx;
    private static bool NFL4IGyoc7;
    private static bool cQCd71PIW;
    private static IntPtr ghLACNa05;
    private static bool NrL10qsNW;
    private static int Qwp4ejR7FG;
    private static SortedList d1uknJpcW;
    private static Byte[] dKMLoMpMs;
    private static Byte[] hIsn23p8h;
    internal static Hashtable IBe4hEip2A;
    [AXBrnIFfMAfABnJrF9("Mono.Cecil.CustomAttributeArgument")]
private static bool firstrundone;
    private static long i244bikuos;
    private static bool hSjGubHK9;
    private static object diL3t0peo;
    internal static rL2N9N6wh7IWY3IC3G bFB44BUGlg;
    private static int uS9zmJ6WC;
    private static int WS94a0Vnlv;
    private static bool TWn4MujlZv;
    private static Assembly j8hgmZJ7n;
    private static Byte[] lodECQQVs;
    private static UInt32[] M6EKmwjSJ;
    private static Byte[] VvPxdPh3O;
    private static IntPtr XtL4lyIIgx;
    private static bool PVVpfAGtG;
    private static DyyVDbaRvM1YfIq9il();
    private void FSL1QRxAX5tty();
    internal static Byte[] creoiNvd7(Byte[]  );
    private static void jZiU8kt7k(UInt32&  , UInt32  , UInt32  , UInt32  , UInt32  , ushort  , UInt32  , UInt32[]  );
    private static void yIEeUuogE(UInt32&  , UInt32  , UInt32  , UInt32  , UInt32  , ushort  , UInt32  , UInt32[]  );
    private static void HNMMnrD0K(UInt32&  , UInt32  , UInt32  , UInt32  , UInt32  , ushort  , UInt32  , UInt32[]  );
    private static void U6ZIpjiMV(UInt32&  , UInt32  , UInt32  , UInt32  , UInt32  , ushort  , UInt32  , UInt32[]  );
    private static UInt32 TYIaeXNeW(UInt32  , ushort  );
    internal static bool rI3lmZ9FL();
    internal static SymmetricAlgorithm SuhhReBcy();
    internal static void QWOOk18h0();
    internal static Byte[] BjkXsyRir(Byte[]  );
    private static UInt32 b82VQ34LR(UInt32  );
    [AXBrnIFfMAfABnJrF9("Mono.Cecil.CustomAttributeArgument")]
internal static string pvQ2Nvbv9(string  );
    private static void KqVWF2r0M(IntPtr  , UInt32  );
    private static int SR2f8Si0X(IntPtr&  , int  , int  , Int32&  );
    public static IntPtr LXFsnj021(IntPtr  , string  , UInt32  );
    private static IntPtr jMyYFyWuy(IntPtr  , UInt32  , UInt32  , UInt32  );
    internal static UInt32 NvQ34uZt895nxEhi2FIr(IntPtr  , IntPtr  , IntPtr  , UInt32  , IntPtr  , UInt32&  );
    private static int gVU0QeojF();
    private static void HK2JaffxR();
    private static Delegate ubITRqgdO(IntPtr  , Type  );
    internal static void vEB6drODu();
    internal static object vZF7RiFiF(object  );
    public static IntPtr puGi6bKKk(string  );
    public static IntPtr ROhFJh1RB(IntPtr  , string  );
    private static int T7LBbJ4ta(IntPtr  , IntPtr  , Byte[]  , UInt32  , IntPtr&  );
    private static int fMdPu7i25(IntPtr  , IntPtr  , Byte[]  , UInt32  , IntPtr&  );
    private static int yMayDYsjD(IntPtr  , int  , int  , Int32&  );
    private static IntPtr Kxm8CyXvJ(UInt32  , int  , UInt32  );
    private static int JkHjxJCFT(IntPtr  );
    [AXBrnIFfMAfABnJrF9("Mono.Cecil.CustomAttributeArgument")]
private static Byte[] eM2t2dfoT(string  );
    [AXBrnIFfMAfABnJrF9("Mono.Cecil.CustomAttributeArgument")]
private static Byte[] vDfq2bW1V(Byte[]  );
    private Byte[] B3XRfqih9();
    private Byte[] sVk5WFvVV();
    private Byte[] E3GryunuI();
    private Byte[] yxOcIGI9u();
    private Byte[] Oihu8LNHm();
    private Byte[] ifqQyNVWS();
    internal Byte[] hcDmskCdX();
    internal Byte[] mKgSOTjDj();
    internal Byte[] aYTwtN0c5();
    internal Byte[] udfDaXdkp();
    internal static IntPtr Nv6QGgCrvcuIbw7hNu(IntPtr , int );
    internal static int C9FTJww59biClJpY5c(IntPtr , int );
    internal static long faOIwLYRJUKGJYRq9x(IntPtr , int );
    internal static void kSVllZ2Vktq2RXLhvM(IntPtr , int , IntPtr );
    internal static void iVgDIjkiWalIiKAYfY(IntPtr , int , int );
    internal static void z7DKyb9GDAj1oWe2L4(IntPtr , int , long );
    internal static IntPtr CRANZTXHP6pV23nbO6(int );
    internal static void UlLv9KZHo5tJ0WEIJV(object , int , IntPtr , int );
    internal static void gru6yKLuBKxsko41lJ();
    internal static object WDxbX3tniIT3GIOLj5();
    internal static object Iw6CILTZ4jG007dCGa(object );
    internal static IntPtr q3xYeKvhrvUfOpTZRM(object );
    internal static bool fldaURgJOE5DwJMsNQ(IntPtr , IntPtr );
    internal static int JbhY1rc9lXOHbWlCCW();
    internal static Type r0Zj89DCKG7AbJgL2o(object , bool );
    internal static bool dqKF7R1uS29THETorD(Type , Type );
    internal static object AL6t70nDieY8vod3WX(object );
    internal static object qbX7aMxISmm3n4LwPH(object );
    internal static object Chm6KNam22mSFaWQmj(object );
    internal static object tRf0JGpewuHhFuW8B4(object );
    internal static object PP1cg98oHq1mZxrBQ6(object );
    internal static bool ASvxoRPANpEWSmN6P8(object , object );
    internal static object StUcxff1ttLwu4VY07(object );
    internal static int U4KrJ406AdkgXeTMhR(object );
    internal static int rMoP38GcxeJOK2RycA(object );
    internal static int cEJmok782ugIT6htkU(object );
    internal static int paPUWBJePvQ4LOOdE0(object );
    internal static bool I0sEVihKDh7J5GYVu9(object , object );
    internal static bool RJYnoHMaAuorsHf7bl(object , object );
    internal static bool lhOfUFeU1tAEMCmPXB(object );
    internal static void uYQls4Nl511u3lv75p(object );
    internal static object lkQHMnjC2eBRnNN4AX(object , object );
    internal static object UAqh0EUjkGD6Zy3YZA(object );
    internal static void bkiq2W6HEMw9bY4jnL(object , long );
    internal static long lotjyJW9xK2ubnrEs2(object );
    internal static object tYqZGYKnm8xmsEmFaB(object , int );
    internal static void E9WXIGS1JZoKAEcKbZ(object );
    internal static object k5vXjS3HHBHyj8L7ZZ(object );
    internal static object X9VMEEyXJUEDJn6ggP(object );
    internal static void qo2kbquZLP7hWcNEXq(object , int , int );
    internal static object CWNi3XFY4XUHN6VauH(object );
    internal static IntPtr Qh4dAEHINO3QZipD0U(object );
    internal static object G9aIPY5SZpe8WrT0co(object );
    internal static int puwsBPRRgIW5MANHk0(object );
    internal static int KEcq1GqhcAhdtd0MgF(object );
    internal static object eUTDYBrNrtZsdnDxJY();
    internal static void yfQWqudwEis77wRP5G(object , CipherMode );
    internal static object MiNmS3VjcfHnlDg2eC(object , object , object );
    internal static void vKNThnQidpfjaaoOTd(object , object , int , int );
    internal static void VUh5H5IG9fDNsfZRsN(object );
    internal static object NYieJ6EOABxQXc5RdX(object );
    internal static void QXCybClYN3kcD7xSUJ(object );
    internal static void QEAYQubURHUuVsxr5M(object );
    internal static int v6frm9BssXBkdYYi25(object );
    internal static object qEZdQwOX0pFxExTWcV(int );
    internal static long Oa3Kjas5E6nB5vhkmW(object );
    internal static void RGlSrLiL6cSwtSiwDx(IntPtr , int );
    internal static void oFh3TkACLqExqTEHNE(object , object , object );
    internal static Type cNPjZmzi80H8TJwLnP(RuntimeTypeHandle );
    internal static int HjFoYtomjdqeMju8YUR(long );
    internal static object wQ8T2Vooo4iQmaiBJ6L();
    internal static object qnJCMHo4VrwvSmevs8a(object , object );
    internal static bool pvGK2moCLRXB4x1v8ha(IntPtr , IntPtr );
    internal static object r8fJV9owrUMa3jFpDLF(IntPtr  , Type  );
    internal static IntPtr pxO3dioY56hPXvH4YQl(object );
    internal static int Gb6MDVo2yvCESvNfLGS(IntPtr );
    internal static long enYQZnokIyoBDtPjhdJ(IntPtr );
    internal static IntPtr nGijcNo9wCjkOcUCLPC(object );
    internal static int bDMIEjoXGhijKMxa2sY(object );
    internal static object D8a9FyoZMxBpc8CdUVK(object );
    internal static bool RcAlHdoL4VFc0HBQ2QK(object , object );
    internal static object US42QYotbPqXBaqqLuG(object );
    internal static object g5UTQZoTP8g2KlF4qZS(Type , object );
    internal static object kHDYHBovFTqZgxZEkMJ(object );
    internal static object QiT3gbogMtjNQH2phHH(object );
    internal static ModuleHandle RBQIf0ocWwPJFyyBicC(object );
    internal static Type TXKNE5oDr2Kn9X8OlXv(object );
    internal static object KGnswco18WyK7TNrdTY(object , object );
    internal static object GxjRjBonloKfg9GL5Tn(long );
    internal static void hUZbT8ox7O6dVKTewfw(object );
    internal static RuntimeMethodHandle ox1yV4oavwm7MTSp3jk(object );
    internal static void xXxmwJopcbtN6YxF7IH(RuntimeMethodHandle );
    internal static void yHkLDgo8laIBHXZdqwi(object , RuntimeFieldHandle );
    internal static void aSphUaoPQhUoNWkFwnb(IntPtr , IntPtr );
    internal static bool gFUe5to916O7s0NnaE();
    internal static bool Aptb9i46KQsF6o7txu();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public static class WPF.UI.AccessDataBase : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static IAccessDataBaseBiz <AccessDataBaseBiz>k__BackingField;
    public static IAccessDataBaseBiz AccessDataBaseBiz { get; public set; }
    private static AccessDataBase();
    [CompilerGeneratedAttribute]
public static IAccessDataBaseBiz get_AccessDataBaseBiz();
    [CompilerGeneratedAttribute]
public static void set_AccessDataBaseBiz(IAccessDataBaseBiz value);
    public static List`1<T> DataTableToList(DataTable dt);
    public static int DeleteSQL(string strWhere);
    public static Task`1<int> DeleteSQLAsync(string strWhere);
    public static Task`1<int> ExecSQLNoQueryAsync(string strSql);
    public static int ExecSQLNoQuery(string strSql);
    public static OleDbDataReader ExecSQLQuery(string strSQL);
    public static int InsertSQL(string strValue);
    public static Task`1<int> InsertSQLAsync(string strValue);
    public static DataTable SelectSQL(string strDisp, string strWhere);
    public static void SetConnStr(string Strconn);
    public static int UpdateSQL(string strSet, string strWhere);
    public static Task`1<int> UpdateSQLAsync(string strSet, string strWhere);
    public static bool CompactAccess(string accessFile);
    public static bool CompactAccessFile(string accessFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.AirBubblesAnimation : object {
    private FrameworkElement element;
    private Storyboard showStoryboard;
    private Storyboard hideStoryboard;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler ShowAnimationCompleted;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler HideAnimationCompleted;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Size <ElementSize>k__BackingField;
    public Size ElementSize { get; public set; }
    public AirBubblesAnimation(FrameworkElement element);
    private static AirBubblesAnimation();
    [CompilerGeneratedAttribute]
public void add_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HideAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HideAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public Size get_ElementSize();
    [CompilerGeneratedAttribute]
public void set_ElementSize(Size value);
    private void showStoryboard_Completed(object sender, EventArgs e);
    private void hideStoryboard_Completed(object sender, EventArgs e);
    public void Show();
    public void Hide();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.Base64Helper : object {
    private static IBase64 base64;
    private static Base64Helper();
    public static string Encode(string plainText);
    public static string Decode(string base64Text);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Biz.AccessDataBaseBiz : object {
    private LogNetBiz LogNet;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConnStr>k__BackingField;
    private string ConnStr { get; private set; }
    private static AccessDataBaseBiz();
    [CompilerGeneratedAttribute]
private string get_ConnStr();
    [CompilerGeneratedAttribute]
private void set_ConnStr(string value);
    public sealed virtual void SetConnStr(string Strconn);
    [AsyncStateMachineAttribute("WPF.UI.Biz.AccessDataBaseBiz/<ExecSQLNoQueryAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecSQLNoQueryAsync(string strSql);
    public sealed virtual int ExecSQLNoQuery(string strSql);
    public sealed virtual OleDbDataReader ExecSQLQuery(string strSQL);
    private DataTable GetDataTableNotPara(string sql);
    public sealed virtual List`1<T> DataTableToList(DataTable dt);
    public sealed virtual DataTable SelectSQL(string strDisp, string strWhere);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("WPF.UI.Biz.AccessDataBaseBiz/<UpdateSQLAsync>d__12`1")]
public sealed virtual Task`1<int> UpdateSQLAsync(string strSet, string strWhere);
    public sealed virtual int UpdateSQL(string strSet, string strWhere);
    [AsyncStateMachineAttribute("WPF.UI.Biz.AccessDataBaseBiz/<InsertSQLAsync>d__14`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> InsertSQLAsync(string strValue);
    public sealed virtual int InsertSQL(string strValue);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("WPF.UI.Biz.AccessDataBaseBiz/<DeleteSQLAsync>d__16`1")]
public sealed virtual Task`1<int> DeleteSQLAsync(string strWhere);
    public sealed virtual int DeleteSQL(string strWhere);
    public sealed virtual bool CompactAccess(string accessFile);
    public sealed virtual bool CompactAccessFile(string accessFile);
}
public class WPF.UI.Biz.Base : object {
    [NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("1")]
public static LogNetBiz LogNet;
    private static Base();
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public static class WPF.UI.Biz.DirFile : object {
    private static DirFile();
    public static bool IsExistDirectory(string directoryPath);
    public static bool IsExistFile(string filePath);
    public static String[] GetFileNames(string directoryPath);
    public static String[] GetDirectories(string directoryPath);
    public static String[] GetFileNames(string directoryPath, string searchPattern, bool isSearchChild);
    public static bool IsEmptyDirectory(string directoryPath);
    public static bool Contains(string directoryPath, string searchPattern);
    public static bool Contains(string directoryPath, string searchPattern, bool isSearchChild);
    public static void CreateDir(string dir);
    public static void DeleteDir(string dir);
    public static void DeleteFile(string file);
    public static void CreateFile(string dir, string pagestr);
    public static void MoveFile(string dir1, string dir2);
    public static void CopyFile(string dir1, string dir2);
    public static string GetDateDir();
    public static string GetDateFile();
    public static void CopyFolder(string varFromDirectory, string varToDirectory);
    public static void ExistsFile(string FilePath);
    public static void DeleteFolderFiles(string varFromDirectory, string varToDirectory);
    public static void CopyFiles(string cDir, string TempId);
    public static void CreateDirectory(string directoryPath);
    public static void CreateFile(string filePath);
    public static void CreateFile(string filePath, Byte[] buffer);
    public static int GetLineCount(string filePath);
    public static int GetFileSize(string filePath);
    public static String[] GetDirectories(string directoryPath, string searchPattern, bool isSearchChild);
    public static void WriteText(string filePath, string text, Encoding encoding);
    public static void AppendText(string filePath, string content);
    public static void Copy(string sourceFilePath, string destFilePath);
    public static void Move(string sourceFilePath, string descDirectoryPath);
    public static string GetFileName(string filePath);
    public static string GetFileNameNoExtension(string filePath);
    public static string GetExtension(string filePath);
    public static void ClearDirectory(string directoryPath);
    public static void ClearFile(string filePath);
    public static void DeleteDirectory(string directoryPath);
    public static PathTypeEnum GetPathType(string path);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Biz.FileIOBiz : object {
    public static string strIniFilePath;
    protected static object FileLock;
    private static FileIOBiz();
    protected internal static int GetPrivateProfileSection(string lpAppName, Byte[] lpReturnedString, int nSize, string lpFileName);
    protected internal static int GetPrivateProfileSectionNames(Byte[] lpReturnedString, int nSize, string lpFileName);
    private static long WritePrivateProfileString(string section, string key, string val, string filePath);
    private static long GetPrivateProfileString(string section, string key, string strDefault, StringBuilder retVal, int size, string filePath);
    public static int SetProcessWorkingSetSize(IntPtr process, int minSize, int maxSize);
    public sealed virtual void ClearMemory();
    [AsyncStateMachineAttribute("WPF.UI.Biz.FileIOBiz/<ClearMemoryAsncy>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task ClearMemoryAsncy();
    public sealed virtual string AddBlankString(int length);
    public sealed virtual string Encode(string data);
    public sealed virtual bool PingIP(string ip);
    public sealed virtual string Decode(string data);
    public sealed virtual void SetIniPath(string striniFilePath);
    public sealed virtual string ReadIniString(string section, string key, string InIFilePath);
    public sealed virtual int ReadIniInt(string section, string key, string InIFilePath);
    public sealed virtual double ReadIniDouble(string section, string key, string InIFilePath);
    public bool ReadIniBool(string section, string key, string InIFilePath);
    public sealed virtual string Replace(string str, string oldStr, string newStr);
    public sealed virtual bool WriteIniString(string section, string key, string val, string InIFilePath);
    public sealed virtual bool DeleteSection(string Section, string InIFilePath);
    public sealed virtual bool DeleteKey(string section, string key, string InIFilePath);
    public sealed virtual List`1<string> GetSectionAllKeys(string Key, string InIFilePath);
    public sealed virtual List`1<Tuple`2<string, string>> GetAllValues(string Key, string InIFilePath);
    public sealed virtual TcpClient ConnTcp(string IPaddress, int Port, int WaitTime);
    public sealed virtual void FileWrite(string path, string str, bool append, string encoding);
    public sealed virtual List`1<string> GetFiles(string path, string searchPattern);
    public sealed virtual string FileRead(string path, string encoding);
    public sealed virtual string FileCopy(string sourceFileName, string destFileName, bool overwrite);
    public sealed virtual string CreateFolder(string fileName, string filePath);
    public sealed virtual void SetTime(string strTime);
    public sealed virtual Byte[] FileToBytes(string path);
    public sealed virtual void BytesToFile(Byte[] bytes, string saveFile);
    [CompilerGeneratedAttribute]
private void <ClearMemoryAsncy>b__8_0();
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Biz.FileOperate : object {
    private static FileOperate();
    protected void Write_Txt(string FileName, string Content);
    protected string Read_Txt(string filename);
    public static string GetPostfixStr(string filename);
    public static void WriteFile(string Path, string Strings);
    public static string ReadFile(string Path, string encoding);
    public static void FileAdd(string Path, string strings);
    public static void FileCoppy(string OrignFile, string NewFile);
    public static void FileDel(string Path);
    public static void FileMove(string OrignFile, string NewFile);
    public static void FolderCreate(string OrignFolder, string NewFloder);
    public static void FolderCreate(string Path);
    public static void FileCreate(string Path);
    public static void DeleteFolder(string dir);
    public static void CopyDir(string srcPath, string aimPath);
    public static string GetFoldAll(string Path);
    public static string ListTreeShow(DirectoryInfo theDir, int nLevel, string Rn);
    public static string GetFoldAll(string Path, string DropName, string tplPath);
    public static string ListTreeShow(DirectoryInfo theDir, int nLevel, string Rn, string tplPath);
    public static long GetDirectoryLength(string dirPath);
    public static string GetFileAttibe(string filePath);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Biz.INIFile : object {
    public string path;
    public INIFile(string INIPath);
    private static INIFile();
    private static long WritePrivateProfileString(string section, string key, string val, string filePath);
    private static int GetPrivateProfileString(string section, string key, string def, StringBuilder retVal, int size, string filePath);
    private static int GetPrivateProfileString(string section, string key, string defVal, Byte[] retVal, int size, string filePath);
    public void IniWriteValue(string Section, string Key, string Value);
    public string IniReadValue(string Section, string Key);
    public Byte[] IniReadValues(string section, string key);
    public void ClearAllSection();
    public void ClearSection(string Section);
}
public enum WPF.UI.Biz.LogHelperType : Enum {
    public int value__;
    public static LogHelperType Debug;
    public static LogHelperType Error;
    public static LogHelperType Info;
    public static LogHelperType Descrition;
    public static LogHelperType Fatal;
    public static LogHelperType Warn;
    public static LogHelperType Title;
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Biz.LogNetBiz : object {
    private static object Olock;
    private static LogNetBiz();
    public sealed virtual void WriteDebug(string content, string fileName, string path);
    public sealed virtual void WriteInfo(string content, string fileName, string path);
    public sealed virtual void WriteError(string content, string fileName, string path);
    public sealed virtual void WriteException(Exception ex, string title, string fileName, string path);
    public sealed virtual void WriteTitle(string content, string fileName, string path);
    public sealed virtual void WriteWarn(string content, string fileName, string path);
    public sealed virtual void WriteNewLine(string fileName, string path);
    public sealed virtual void WriteFatal(string content, string fileName, string path);
    public sealed virtual void WriteString(string content, string fileName, string path);
    private void Write(LogHelperType logtype, string content, string fileName, string path);
    private void Write(string content, string fileName, string path);
    [AsyncStateMachineAttribute("WPF.UI.Biz.LogNetBiz/<WriteAsync>d__12")]
[DebuggerStepThroughAttribute]
private Task WriteAsync(string content, string fileName, string path);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public static class WPF.UI.Biz.PathHelper : object {
    private static PathHelper();
    public static string GetAbsPathFromPath(string path);
    public static Uri GetUriFromPath(string path);
    public static string GetRelativePath(string filespec, string folder);
    public static int DeleteOldFiles(string dir, int days);
    public static Dictionary`2<string, int> DeleteOldFilesInSubDir(string dir, int days, SearchOption searchOption);
    public static Dictionary`2<string, int> DeleteOldFilesInDirAndSubDir(string dir, int days, SearchOption searchOption);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class WPF.UI.CloseCommand : object {
    private static CloseCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.CMDHelper : object {
    private static ICMD CMDBiz;
    private static CMDHelper();
    public static string Run(string command);
}
public class WPF.UI.Common.Base64Biz : object {
    private static Base64Biz();
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public sealed virtual string Encode(string plainText);
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public sealed virtual string Decode(string base64Text);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.BitHelper : object {
    private static BitHelper();
    public static bool GetBitFromByte(byte value, int offset);
    public static bool GetBitFrom2Bytes(Byte[] value, int offset, bool isLittleEndian);
    public static bool GetBitFrom2Bytes(byte high, byte low, int offset);
    public static bool GetBitFromByteArray(Byte[] value, int start, int offset);
    public static bool GetBitFrom2BytesArray(Byte[] value, int start, int offset, bool isLittleEndian);
    public static bool GetBitFromShort(short value, int offset, bool isLittleEndian);
    public static bool GetBitFromUShort(ushort value, int offset, bool isLittleEndian);
    public static Boolean[] GetBitArrayFromByteArray(Byte[] value, int length);
    public static Boolean[] GetBitArrayFromByteArray(Byte[] value, int start, int length);
    public static Boolean[] GetBitArrayFromByteArray(Byte[] value);
    public static Boolean[] GetBitArrayFromByte(byte value);
    public static Boolean[] GetBitArrayFromBitArray(Boolean[] value, int start, int length);
    public static Boolean[] GetBitArrayFromBitArrayString(string value, string spilt);
    public static bool IsBoolean(string value);
}
[DefaultMemberAttribute("Item")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[DescriptionAttribute("字节集合类")]
public class WPF.UI.Common.ByteArray : object {
    private List`1<byte> list;
    public byte Item { get; public set; }
    public int Length { get; }
    public Byte[] array { get; }
    private static ByteArray();
    public byte get_Item(int index);
    public void set_Item(int index, byte value);
    public int get_Length();
    public Byte[] get_array();
    public void Clear();
    public void Add(byte item);
    public void Add(Byte[] items);
    public void Add(byte item1, byte item2);
    public void Add(byte item1, byte item2, byte item3);
    public void Add(byte item1, byte item2, byte item3, byte item4);
    public void Add(byte item1, byte item2, byte item3, byte item4, byte item5);
    public void Add(ByteArray byteArray);
    public void Add(ushort value);
    public void Add(short value);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.ByteArrayHelper : object {
    private static ByteArrayHelper();
    public static Byte[] GetByteArrayFromByteArray(Byte[] data, int start, int length);
    public static Byte[] GetByteArrayFromByteArray(Byte[] data, int start);
    public static Byte[] Get2BytesFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static Byte[] Get4BytesFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static Byte[] Get8BytesFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static bool GetByteArrayEquals(Byte[] value1, Byte[] value2);
    public static Byte[] GetByteArrayFromByte(byte value);
    public static Byte[] GetByteArrayFromShort(short value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromUShort(ushort value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromInt(int value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromUInt(UInt32 value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromFloat(float value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromDouble(double value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromLong(long value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromULong(ulong value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromShortArray(Int16[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromUShortArray(UInt16[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromIntArray(Int32[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromUIntArray(UInt32[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromFloatArray(Single[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromDoubleArray(Double[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromLongArray(Int64[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromULongArray(UInt64[] value, DataFormat dataFormat);
    public static Byte[] GetByteArrayFromString(string value, Encoding encoding);
    public static Byte[] GetByteArrayFromHexString(string value, string spilt);
    public static Byte[] GetByteArrayFromHexStringWithoutSpilt(string value);
    public static Byte[] GetAsciiByteArrayFromValue(byte value);
    public static Byte[] GetAsciiByteArrayFromValue(short value);
    public static Byte[] GetAsciiByteArrayFromValue(ushort value);
    public static Byte[] GetAsciiByteArrayFromValue(string value);
    public static Byte[] GetByteArrayFromBoolArray(Boolean[] data);
    public static Byte[] GetByteArrayFromSiemensString(string value);
    public static Byte[] GetByteArrayFromOmronCIPString(string data);
    public static Byte[] GetEvenByteArray(Byte[] data);
    public static Byte[] GetFixedLengthByteArray(Byte[] data, int length);
    public static Byte[] GetAsciiBytesFromByteArray(Byte[] value, string segment);
    public static Byte[] GetBytesArrayFromAsciiByteArray(Byte[] value);
    public static Byte[] GetByteArrayFromTwoByteArray(Byte[] bytes1, Byte[] bytes2);
    public static Byte[] GetByteArrayFromThreeByteArray(Byte[] bytes1, Byte[] bytes2, Byte[] bytes3);
    public static Byte[] SetByteArray(Byte[] sourceArray, object value, int start, int offset);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.ByteHelper : object {
    private static ByteHelper();
    public static byte SetbitValue(byte value, int offset, bool bitValue);
    public static byte GetByteFromByteArray(Byte[] value, int start);
    public static byte GetByteFromBoolArray(Boolean[] value);
}
public class WPF.UI.Common.CMDBiz : object {
    private static CMDBiz();
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public sealed virtual string Run(string command);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.ComputerInfoBiz : object {
    private static ComputerInfoBiz();
    public sealed virtual string GetOperatingSystem();
    public sealed virtual string GetComputerName();
    public sealed virtual string GetCpuName();
    public sealed virtual string GetCpuBrand();
    public sealed virtual int GetCpuCores();
    public sealed virtual int GetCpuLogicalProcessors();
    public sealed virtual string GetCpuFrequency();
    public sealed virtual ulong GetTotalMemory();
    public sealed virtual List`1<string> GetGraphicsCards();
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.DoubleHelper : object {
    private static DoubleHelper();
    public static double GetDoubleFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static Double[] GetDoubleArrayFromByteArray(Byte[] value, DataFormat dataFormat);
    public static Double[] GetDoubleArrayFromString(string value, string spilt);
}
[ExtensionAttribute]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public static class WPF.UI.Common.Ext : object {
    private static Ext();
    [ExtensionAttribute]
public static T CloneModel(T classObject);
    [ExtensionAttribute]
public static string ToEnString(Byte[] s);
    [ExtensionAttribute]
public static string ToEncodeString(Byte[] dealBytes, Encoding encode);
    [ExtensionAttribute]
public static string ToBase64Str(string data);
    [ExtensionAttribute]
public static int ToInt(object data);
    [ExtensionAttribute]
public static Nullable`1<int> ToIntOrNull(object data);
    [ExtensionAttribute]
public static double ToDouble(object data);
    [ExtensionAttribute]
public static double ToDouble(object data, int digits);
    [ExtensionAttribute]
public static Nullable`1<double> ToDoubleOrNull(object data);
    [ExtensionAttribute]
public static decimal ToDecimal(object data);
    [ExtensionAttribute]
public static decimal ToDecimal(object data, int digits);
    [ExtensionAttribute]
public static Nullable`1<decimal> ToDecimalOrNull(object data);
    [ExtensionAttribute]
public static Nullable`1<decimal> ToDecimalOrNull(object data, int digits);
    [ExtensionAttribute]
public static DateTime ToDate(object data);
    [ExtensionAttribute]
public static DateTime ToDateTime(object data);
    [ExtensionAttribute]
public static Nullable`1<DateTime> ToDateOrNull(object data);
    [ExtensionAttribute]
public static bool ToBool(object data);
    [ExtensionAttribute]
private static Nullable`1<bool> GetBool(object data);
    [ExtensionAttribute]
public static Nullable`1<bool> ToBoolOrNull(object data);
    [ExtensionAttribute]
public static Byte[] ToBytes(string data);
    [ExtensionAttribute]
public static Byte[] ToBytesDefault(string data);
    [ExtensionAttribute]
public static string ToStringExt(object data);
    [ExtensionAttribute]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("0")]
public static T SafeValue(Nullable`1<T> value);
    [ExtensionAttribute]
public static bool IsEmpty(string value);
    [ExtensionAttribute]
public static bool IsEmpty(Nullable`1<Guid> value);
    [ExtensionAttribute]
public static bool IsEmpty(Guid value);
    [ExtensionAttribute]
public static bool IsEmpty(object value);
    [ExtensionAttribute]
public static bool IsNum(string value);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.FloatHelper : object {
    private static FloatHelper();
    public static float GetFloatFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static Single[] GetFloatArrayFromByteArray(Byte[] value, DataFormat dataFormat);
    public static Single[] GetFloatArrayFromString(string value, string spilt);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface WPF.UI.Common.IBase64 {
    public abstract virtual string Decode(string base64Text);
    public abstract virtual string Encode(string plainText);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface WPF.UI.Common.ICMD {
    public abstract virtual string Run(string command);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface WPF.UI.Common.IComputerInfo {
    public abstract virtual string GetComputerName();
    public abstract virtual string GetCpuBrand();
    public abstract virtual int GetCpuCores();
    public abstract virtual string GetCpuFrequency();
    public abstract virtual int GetCpuLogicalProcessors();
    public abstract virtual string GetCpuName();
    public abstract virtual List`1<string> GetGraphicsCards();
    public abstract virtual string GetOperatingSystem();
    public abstract virtual ulong GetTotalMemory();
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.IntHelper : object {
    private static IntHelper();
    public static int GetIntFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static Int32[] GetIntArrayFromByteArray(Byte[] value, DataFormat dataFormat);
    public static Int32[] GetIntArrayFromString(string value, string spilt);
    public static int GetByteLengthFromBoolLength(int boolLength);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface WPF.UI.Common.IReadCode {
    public abstract virtual TcpClient ConnTcp(string IPaddress, int Port, int WaitTime);
    public abstract virtual string GetComCode(SerialPort Keye);
    public abstract virtual string GetComKeyeCode(SerialPort Keye);
    public abstract virtual string GetKeyeCode(TcpClient ScanClient, string OpenStr, string CloseStr, int RecOutTime);
    public abstract virtual string GetScanCode(TcpClient ScanClient, string OpenStr, int RecOutTime);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface WPF.UI.Common.IRegedit {
    public abstract virtual bool DelKey(string Keys);
    public abstract virtual bool IsKeyExit(string keys);
    public abstract virtual long ReadReg(string keys);
    public abstract virtual void WriteReg(string keys, long strValue);
    public abstract virtual void WriteReg(string keys, string strValue);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface WPF.UI.Common.IRegex {
    public abstract virtual bool IsMobilePhone(string str);
    public abstract virtual bool IsBase64String(string str);
    public abstract virtual bool IsDate(string date);
    public abstract virtual bool IsDate(string date, string format);
    public abstract virtual bool IsDate(string date, string format, IFormatProvider provider, DateTimeStyles styles);
    public abstract virtual bool IsEmail(string email);
    public abstract virtual bool IsGuid(string guid);
    public abstract virtual bool IsPassPort(string idCard);
    public abstract virtual bool IsInt(object number);
    public abstract virtual bool IsInt(string number);
    public abstract virtual bool IsIP(string ip);
    public abstract virtual bool IsNullOrEmpty(object data);
    public abstract virtual bool IsNumber(object number);
    public abstract virtual bool IsNumber(string number);
    public abstract virtual bool IsUrl(string url);
    public abstract virtual bool IsMacAddress(string mac);
    public abstract virtual string RemoveHtml(string htmlString);
    public abstract virtual int Length(string str);
    [ObsoleteAttribute("This method has been moved to StringHelper.")]
public abstract virtual string SubString(string str, int length);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public interface WPF.UI.Common.ISystem {
    public abstract virtual string GetCpuId();
    public abstract virtual string GetMotherboardId();
    public abstract virtual string GetDiskId();
    public abstract virtual string GetSystemId();
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.LongHelper : object {
    private static LongHelper();
    public static long GetLongFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static Int64[] GetLongArrayFromByteArray(Byte[] value, DataFormat dataFormat);
    public static Int64[] GetLongArrayFromString(string value, string spilt);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.MigrationHelper : object {
    private static string ByteMax;
    private static string ByteMin;
    private static string ShortMax;
    private static string ShortMin;
    private static string UShortMax;
    private static string UShortMin;
    private static string IntMax;
    private static string IntMin;
    private static string UIntMax;
    private static string UIntMin;
    private static string FloatMax;
    private static string FloatMin;
    private static string LongMax;
    private static string LongMin;
    private static string ULongMax;
    private static string ULongMin;
    private static string DoubleMax;
    private static string DoubleMin;
    private static MigrationHelper();
    private static string GetErrorMsg(DataType type);
    public static OperateResult`1<object> GetMigrationValue(object value, string scale, string offset);
    public static OperateResult`1<string> SetMigrationValue(string set, DataType type, string scale, string offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.Common.Notice : object {
    private static Notice();
    public static void Show(string message, string title);
    public static void Show(string message, string title, MsgBoxIcon noticeIcon);
    public static void Show(string message, string title, double durationSeconds, MsgBoxIcon noticeIcon);
    private static void CallNoticeWindow(string message, string title, Nullable`1<double> durationSeconds, MsgBoxIcon noticeIcon);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.OperateResult : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ErrorCode>k__BackingField;
    public bool IsSuccess { get; public set; }
    public string Message { get; public set; }
    public int ErrorCode { get; public set; }
    public OperateResult(bool isSuccess);
    public OperateResult(bool isSuccess, string message);
    public OperateResult(bool isSuccess, int errorCode, string message);
    public OperateResult(string message);
    public OperateResult(int errorCode, string message);
    private static OperateResult();
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(int value);
    public static OperateResult CreateSuccessResult();
    public static OperateResult CreateFailResult(string message);
    public static OperateResult CreateFailResult();
    public static OperateResult`1<T1> CopyOperateResult(OperateResult`1<T2> result);
    public static OperateResult`1<T> CreateSuccessResult(T value);
    public static OperateResult`1<T> CreateFailResult(OperateResult result);
    public static OperateResult`1<T> CreateFailResult(string message);
    public static OperateResult`2<T1, T2> CreateSuccessResult(T1 value1, T2 value2);
    public static OperateResult`2<T1, T2> CreateFailResult(OperateResult result);
    public static OperateResult`2<T1, T2> CreateFailResult(string message);
    public static OperateResult`3<T1, T2, T3> CreateSuccessResult(T1 value1, T2 value2, T3 value3);
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("2")]
public static OperateResult`3<T1, T2, T3> CreateFailResult(OperateResult result);
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("2")]
public static OperateResult`3<T1, T2, T3> CreateFailResult(string message);
    public static OperateResult`4<T1, T2, T3, T4> CreateSuccessResult(T1 value1, T2 value2, T3 value3, T4 value4);
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("2")]
public static OperateResult`4<T1, T2, T3, T4> CreateFailResult(OperateResult result);
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("2")]
public static OperateResult`4<T1, T2, T3, T4> CreateFailResult(string message);
    public static OperateResult`5<T1, T2, T3, T4, T5> CreateSuccessResult(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("2")]
public static OperateResult`5<T1, T2, T3, T4, T5> CreateFailResult(OperateResult result);
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("2")]
public static OperateResult`5<T1, T2, T3, T4, T5> CreateFailResult(string message);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.OperateResult`1 : OperateResult {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Content>k__BackingField;
    public T Content { get; public set; }
    public OperateResult`1(bool isSuccess);
    public OperateResult`1(string message);
    public OperateResult`1(int errorCode, string message);
    public OperateResult`1(bool isSuccess, int errorCode, string message);
    public OperateResult`1(bool isSuccess, int errorCode, string message, T content);
    private static OperateResult`1();
    [CompilerGeneratedAttribute]
public T get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(T value);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.OperateResult`2 : OperateResult {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T1 <Content1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Content2>k__BackingField;
    public T1 Content1 { get; public set; }
    public T2 Content2 { get; public set; }
    public OperateResult`2(bool isSuccess);
    public OperateResult`2(string message);
    public OperateResult`2(int errorCode, string message);
    public OperateResult`2(bool isSuccess, int errorCode, string message);
    public OperateResult`2(bool isSuccess, int errorCode, string message, T1 content1, T2 content2);
    private static OperateResult`2();
    [CompilerGeneratedAttribute]
public T1 get_Content1();
    [CompilerGeneratedAttribute]
public void set_Content1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Content2();
    [CompilerGeneratedAttribute]
public void set_Content2(T2 value);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.OperateResult`3 : OperateResult {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Content1>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T2 <Content2>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T3 <Content3>k__BackingField;
    public T1 Content1 { get; public set; }
    public T2 Content2 { get; public set; }
    public T3 Content3 { get; public set; }
    public OperateResult`3(bool isSuccess);
    public OperateResult`3(string message);
    public OperateResult`3(int errorCode, string message);
    public OperateResult`3(bool isSuccess, int errorCode, string message);
    public OperateResult`3(bool isSuccess, int errorCode, string message, T1 content1, T2 content2, T3 content3);
    private static OperateResult`3();
    [CompilerGeneratedAttribute]
public T1 get_Content1();
    [CompilerGeneratedAttribute]
public void set_Content1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Content2();
    [CompilerGeneratedAttribute]
public void set_Content2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Content3();
    [CompilerGeneratedAttribute]
public void set_Content3(T3 value);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.OperateResult`4 : OperateResult {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T1 <Content1>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T2 <Content2>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T3 <Content3>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T4 <Content4>k__BackingField;
    public T1 Content1 { get; public set; }
    public T2 Content2 { get; public set; }
    public T3 Content3 { get; public set; }
    public T4 Content4 { get; public set; }
    public OperateResult`4(bool isSuccess);
    public OperateResult`4(string message);
    public OperateResult`4(int errorCode, string message);
    public OperateResult`4(bool isSuccess, int errorCode, string message);
    public OperateResult`4(bool isSuccess, int errorCode, string message, T1 content1, T2 content2, T3 content3, T4 content4);
    private static OperateResult`4();
    [CompilerGeneratedAttribute]
public T1 get_Content1();
    [CompilerGeneratedAttribute]
public void set_Content1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Content2();
    [CompilerGeneratedAttribute]
public void set_Content2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Content3();
    [CompilerGeneratedAttribute]
public void set_Content3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Content4();
    [CompilerGeneratedAttribute]
public void set_Content4(T4 value);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.OperateResult`5 : OperateResult {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Content1>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T2 <Content2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Content3>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T4 <Content4>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T5 <Content5>k__BackingField;
    public T1 Content1 { get; public set; }
    public T2 Content2 { get; public set; }
    public T3 Content3 { get; public set; }
    public T4 Content4 { get; public set; }
    public T5 Content5 { get; public set; }
    public OperateResult`5(bool isSuccess);
    public OperateResult`5(string message);
    public OperateResult`5(int errorCode, string message);
    public OperateResult`5(bool isSuccess, int errorCode, string message);
    public OperateResult`5(bool isSuccess, int errorCode, string message, T1 content1, T2 content2, T3 content3, T4 content4, T5 content5);
    private static OperateResult`5();
    [CompilerGeneratedAttribute]
public T1 get_Content1();
    [CompilerGeneratedAttribute]
public void set_Content1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Content2();
    [CompilerGeneratedAttribute]
public void set_Content2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Content3();
    [CompilerGeneratedAttribute]
public void set_Content3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Content4();
    [CompilerGeneratedAttribute]
public void set_Content4(T4 value);
    [CompilerGeneratedAttribute]
public T5 get_Content5();
    [CompilerGeneratedAttribute]
public void set_Content5(T5 value);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.ReadCodeBiz : object {
    private static ReadCodeBiz();
    public sealed virtual string GetScanCode(TcpClient ScanClient, string OpenStr, int RecOutTime);
    public sealed virtual string GetKeyeCode(TcpClient ScanClient, string OpenStr, string CloseStr, int RecOutTime);
    public sealed virtual string GetComKeyeCode(SerialPort Keye);
    public sealed virtual string GetComCode(SerialPort Keye);
    public sealed virtual TcpClient ConnTcp(string IPaddress, int Port, int WaitTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.Common.ReadCodeHelper : object {
    private static IReadCode ReadCode;
    private static ReadCodeHelper();
    public string GetScanCode(TcpClient ScanClient, string OpenStr, int RecOutTime);
    public string GetKeyeCode(TcpClient ScanClient, string OpenStr, string CloseStr, int RecOutTime);
    public string GetComKeyeCode(SerialPort Keye);
    public string GetComCode(SerialPort Keye);
    public TcpClient ConnTcp(string IPaddress, int Port, int WaitTime);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.RegeditBiz : object {
    private static RegeditBiz();
    public sealed virtual void WriteReg(string keys, long strValue);
    public sealed virtual void WriteReg(string keys, string strValue);
    public sealed virtual long ReadReg(string keys);
    public sealed virtual bool IsKeyExit(string keys);
    public sealed virtual bool DelKey(string Keys);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.RegexBiz : object {
    private static RegexBiz();
    public sealed virtual bool IsMobilePhone(string str);
    public sealed virtual bool IsBase64String(string str);
    public sealed virtual bool IsDate(string date);
    public sealed virtual bool IsDate(string date, string format);
    public sealed virtual bool IsDate(string date, string format, IFormatProvider provider, DateTimeStyles styles);
    public sealed virtual bool IsEmail(string email);
    public sealed virtual bool IsGuid(string guid);
    public sealed virtual bool IsPassPort(string idCard);
    public sealed virtual bool IsInt(object number);
    public sealed virtual bool IsInt(string number);
    public sealed virtual bool IsIP(string ip);
    public sealed virtual bool IsNullOrEmpty(object data);
    public sealed virtual bool IsNumber(object number);
    public sealed virtual bool IsNumber(string number);
    public sealed virtual bool IsUrl(string strUrl);
    public sealed virtual bool IsMacAddress(string mac);
    public sealed virtual string RemoveHtml(string htmlString);
    public sealed virtual int Length(string str);
    [ObsoleteAttribute("该方法已移至StringHelper")]
public sealed virtual string SubString(string str, int length);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Common.ShortHelper : object {
    private static ShortHelper();
    public static short GetShortFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static Int16[] GetShortArrayFromByteArray(Byte[] value, DataFormat type);
    public static Int16[] GetShortArrayFromString(string value, string spilt);
    public static short SetBitValueFrom2ByteArray(Byte[] value, int offset, bool bitVal, DataFormat dataFormat);
    public static short SetBitValueFromShort(short value, int offset, bool bitVal, DataFormat dataFormat);
    public static short GetByteLengthFromBoolLength(int boolLength);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.StringHelper : object {
    private static StringHelper();
    public static string GetStringFromByteArrayByBitConvert(Byte[] value, int start, int count);
    public static string GetStringFromByteArrayByBitConvert(Byte[] value);
    public static string GetStringFromByteArrayByEncoding(Byte[] value, int start, int count, Encoding encoding);
    public static string GetStringFromByteArrayByEncoding(Byte[] value, Encoding encoding);
    public static string GetHexStringFromByteArray(Byte[] value, int start, int count, string segment);
    public static string GetHexStringFromByteArray(Byte[] source, string segment);
    public static string GetSiemensStringFromByteArray(Byte[] source, int start, int length, string emptyStr);
    public static string GetStringFromValueArray(T[] value, int start, int length, string segment);
    public static string GetStringFromValueArray(T[] value, string segment);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.SystemBiz : object {
    private static SystemBiz();
    public sealed virtual string GetCpuId();
    public sealed virtual string GetMotherboardId();
    public sealed virtual string GetDiskId();
    public sealed virtual string GetSystemId();
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.UIntHelper : object {
    private static UIntHelper();
    public static UInt32 GetUIntFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static UInt32[] GetUIntArrayFromByteArray(Byte[] value, DataFormat dataFormat);
    public static UInt32[] GetUIntArrayFromString(string value, string spilt);
    public static UInt32 GetByteLengthFromBoolLength(int boolLength);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.ULongHelper : object {
    private static ULongHelper();
    public static ulong GetULongFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static UInt64[] GetULongArrayFromByteArray(Byte[] value, DataFormat dataFormat);
    public static UInt64[] GetULongArrayFromString(string value, string spilt);
}
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
public class WPF.UI.Common.UShortHelper : object {
    private static UShortHelper();
    public static ushort GetUShortFromByteArray(Byte[] value, int start, DataFormat dataFormat);
    public static UInt16[] GetUShortArrayFromByteArray(Byte[] value, DataFormat type);
    public static UInt16[] GetUShortArrayFromString(string value, string spilt);
    public static ushort SetBitValueFrom2ByteArray(Byte[] value, int offset, bool bitVal, DataFormat dataFormat);
    public static ushort SetBitValueFromUShort(ushort value, int offset, bool bitVal, DataFormat dataFormat);
    public static ushort GetByteLengthFromBoolLength(int boolLength);
}
public class WPF.UI.Controls.CheckIcon : UserControl {
    [NullableAttribute("1")]
public static DependencyProperty MessageBoxIconProperty;
    [NullableAttribute("1")]
public static DependencyProperty ThicknessProperty;
    internal Grid GrdInfo;
    internal Grid GrdError;
    internal Grid GrdSuccess;
    internal Grid GrdWarn;
    internal Grid GrdQuestion;
    private bool _contentLoaded;
    public MsgBoxIcon MessageBoxIcon { get; public set; }
    public double Thickness { get; public set; }
    private static CheckIcon();
    public MsgBoxIcon get_MessageBoxIcon();
    public void set_MessageBoxIcon(MsgBoxIcon value);
    public double get_Thickness();
    public void set_Thickness(double value);
    [NullableContextAttribute("1")]
private static void OnMessageBoxIconChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class WPF.UI.Controls.DateTimePicker : UserControl {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [NullableAttribute("1")]
public static DependencyProperty TimesProperty;
    internal Border border1;
    internal Button iconButton1;
    internal TextBlock textBlock1;
    internal Grid girdChioce;
    internal Popup popChioce;
    private bool _contentLoaded;
    public DateTime DateTime { get; public set; }
    [NullableAttribute("1")]
public string Times { get; public set; }
    [NullableContextAttribute("1")]
public DateTimePicker(string txt);
    private static DateTimePicker();
    [NullableContextAttribute("1")]
private void iconButton1_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void UserControl_Loaded(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public void set_DateTime(DateTime value);
    [NullableContextAttribute("1")]
public string get_Times();
    [NullableContextAttribute("1")]
public void set_Times(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("1")]
private void <iconButton1_Click>b__2_0(string dateTimeStr);
}
public class WPF.UI.Controls.Growl.CloseWindowCommand : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler CanExecuteChanged;
    private static CloseWindowCommand();
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public static class WPF.UI.Controls.Growl.ControlCommands : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Search>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Clear>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Switch>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <RotateRight>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <RotateLeft>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Reduce>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Enlarge>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Restore>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Open>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Save>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static RoutedCommand <Close>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Cancel>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Confirm>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Yes>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <No>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static RoutedCommand <CloseAll>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <CloseOther>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static RoutedCommand <Prev>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Next>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static RoutedCommand <Jump>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static RoutedCommand <Am>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Pm>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <Sure>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <HourChange>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static RoutedCommand <MinuteChange>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <SecondChange>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <MouseMove>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static OpenLinkCommand <OpenLink>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ShutdownAppCommand <ShutdownApp>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static PushMainWindow2TopCommand <PushMainWindow2Top>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static CloseWindowCommand <CloseWindow>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <SortByCategory>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static RoutedCommand <SortByName>k__BackingField;
    public static RoutedCommand Search { get; }
    public static RoutedCommand Clear { get; }
    public static RoutedCommand Switch { get; }
    public static RoutedCommand RotateRight { get; }
    public static RoutedCommand RotateLeft { get; }
    public static RoutedCommand Reduce { get; }
    public static RoutedCommand Enlarge { get; }
    public static RoutedCommand Restore { get; }
    public static RoutedCommand Open { get; }
    public static RoutedCommand Save { get; }
    public static RoutedCommand Selected { get; }
    public static RoutedCommand Close { get; }
    public static RoutedCommand Cancel { get; }
    public static RoutedCommand Confirm { get; }
    public static RoutedCommand Yes { get; }
    public static RoutedCommand No { get; }
    public static RoutedCommand CloseAll { get; }
    public static RoutedCommand CloseOther { get; }
    public static RoutedCommand Prev { get; }
    public static RoutedCommand Next { get; }
    public static RoutedCommand Jump { get; }
    public static RoutedCommand Am { get; }
    public static RoutedCommand Pm { get; }
    public static RoutedCommand Sure { get; }
    public static RoutedCommand HourChange { get; }
    public static RoutedCommand MinuteChange { get; }
    public static RoutedCommand SecondChange { get; }
    public static RoutedCommand MouseMove { get; }
    public static OpenLinkCommand OpenLink { get; }
    public static ShutdownAppCommand ShutdownApp { get; }
    public static PushMainWindow2TopCommand PushMainWindow2Top { get; }
    public static CloseWindowCommand CloseWindow { get; }
    public static RoutedCommand SortByCategory { get; }
    public static RoutedCommand SortByName { get; }
    private static ControlCommands();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Search();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Clear();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Switch();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_RotateRight();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_RotateLeft();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Reduce();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Enlarge();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Restore();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Open();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Save();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Selected();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Close();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Cancel();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Confirm();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Yes();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_No();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_CloseAll();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_CloseOther();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Prev();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Next();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Jump();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Am();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Pm();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_Sure();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_HourChange();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MinuteChange();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_SecondChange();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MouseMove();
    [CompilerGeneratedAttribute]
public static OpenLinkCommand get_OpenLink();
    [CompilerGeneratedAttribute]
public static ShutdownAppCommand get_ShutdownApp();
    [CompilerGeneratedAttribute]
public static PushMainWindow2TopCommand get_PushMainWindow2Top();
    [CompilerGeneratedAttribute]
public static CloseWindowCommand get_CloseWindow();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_SortByCategory();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_SortByName();
}
public class WPF.UI.Controls.Growl.Data.ResourceToken : object {
    public static string CalendarGeometry;
    public static string DeleteGeometry;
    public static string DeleteFillCircleGeometry;
    public static string CloseGeometry;
    public static string UpGeometry;
    public static string DownGeometry;
    public static string ClockGeometry;
    public static string LeftGeometry;
    public static string RightGeometry;
    public static string RotateLeftGeometry;
    public static string EnlargeGeometry;
    public static string ReduceGeometry;
    public static string DownloadGeometry;
    public static string SaveGeometry;
    public static string WindowsGeometry;
    public static string FullScreenGeometry;
    public static string FullScreenReturnGeometry;
    public static string SearchGeometry;
    public static string UpDownGeometry;
    public static string WindowMinGeometry;
    public static string CheckedGeometry;
    public static string EyeOpenGeometry;
    public static string EyeCloseGeometry;
    public static string WindowRestoreGeometry;
    public static string WindowMaxGeometry;
    public static string AudioGeometry;
    public static string BubbleTailGeometry;
    public static string StarGeometry;
    public static string AddGeometry;
    public static string SubGeometry;
    public static string AllGeometry;
    public static string DragGeometry;
    public static string DropperGeometry;
    public static string SuccessGeometry;
    public static string InfoGeometry;
    public static string ErrorGeometry;
    public static string WarningGeometry;
    public static string AskGeometry;
    public static string FatalGeometry;
    public static string PrimaryBrush;
    public static string DarkPrimaryBrush;
    public static string SuccessBrush;
    public static string DarkSuccessBrush;
    public static string InfoBrush;
    public static string DarkInfoBrush;
    public static string DangerBrush;
    public static string DarkDangerBrush;
    public static string WarningBrush;
    public static string DarkWarningBrush;
    public static string AccentBrush;
    public static string DarkAccentBrush;
    public static string PrimaryTextBrush;
    public static string SecondaryTextBrush;
    public static string ThirdlyTextBrush;
    public static string ReverseTextBrush;
    public static string TextIconBrush;
    public static string BorderBrush;
    public static string SecondaryBorderBrush;
    public static string BackgroundBrush;
    public static string RegionBrush;
    public static string SecondaryRegionBrush;
    public static string ThirdlyRegionBrush;
    public static string TitleBrush;
    public static string DefaultBrush;
    public static string DarkDefaultBrush;
    public static string DarkMaskBrush;
    public static string DarkOpacityBrush;
    public static string Boolean2BooleanReConverter;
    public static string Boolean2VisibilityReConverter;
    public static string BooleanArr2VisibilityConverter;
    public static string Long2FileSizeConverter;
    public static string String2VisibilityConverter;
    public static string String2VisibilityReConverter;
    public static string Boolean2VisibilityConverter;
    public static string TreeViewItemMarginConverter;
    public static string Color2HexStringConverter;
    public static string Object2BooleanConverter;
    public static string Boolean2StringConverter;
    public static string Int2StringConverter;
    public static string BorderClipConverter;
    public static string BorderCircularClipConverter;
    public static string BorderCircularConverter;
    public static string Object2VisibilityConverter;
    public static string Number2PercentageConverter;
    public static string RectangleCircularConverter;
    public static string ThicknessSplitConverter;
    public static string CornerRadiusSplitConverter;
    public static string MenuScrollingVisibilityConverter;
    public static string Double2GridLengthConverter;
    public static string DoubleMinConverter;
    public static string EffectShadowColor;
    public static string EffectShadow1;
    public static string EffectShadow2;
    public static string EffectShadow3;
    public static string EffectShadow4;
    public static string EffectShadow5;
    public static string PrimaryColor;
    public static string DarkPrimaryColor;
    public static string DangerColor;
    public static string DarkDangerColor;
    public static string WarningColor;
    public static string DarkWarningColor;
    public static string InfoColor;
    public static string DarkInfoColor;
    public static string SuccessColor;
    public static string DarkSuccessColor;
    public static string PrimaryTextColor;
    public static string SecondaryTextColor;
    public static string ThirdlyTextColor;
    public static string ReverseTextColor;
    public static string TextIconColor;
    public static string BorderColor;
    public static string SecondaryBorderColor;
    public static string BackgroundColor;
    public static string RegionColor;
    public static string SecondaryRegionColor;
    public static string ThirdlyRegionColor;
    public static string TitleColor;
    public static string SecondaryTitleColor;
    public static string DefaultColor;
    public static string DarkDefaultColor;
    public static string AccentColor;
    public static string DarkAccentColor;
    public static string DarkMaskColor;
    public static string DarkOpacityColor;
    public static string BehaviorXY200;
    public static string BehaviorX200;
    public static string BehaviorY200;
    public static string BehaviorXY400;
    public static string BehaviorX400;
    public static string BehaviorY400;
    internal static string ButtonCustom;
    private static ResourceToken();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class WPF.UI.Controls.Growl.Growl : Control {
    private static GrowlWindow GrowlWindow;
    private Panel _panelMore;
    private Grid _gridMain;
    private Button _buttonClose;
    private bool _showCloseButton;
    private bool _staysOpen;
    private int _waitTime;
    private int _tickCount;
    private DispatcherTimer _timerClose;
    private static Dictionary`2<string, Panel> PanelDic;
    internal static DependencyProperty CancelStrProperty;
    internal static DependencyProperty ConfirmStrProperty;
    public static DependencyProperty ShowDateTimeProperty;
    public static DependencyProperty MessageProperty;
    public static DependencyProperty TimeProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty IconBrushProperty;
    public static DependencyProperty TypeProperty;
    public static DependencyProperty TokenProperty;
    public static DependencyProperty GrowlParentProperty;
    private static DependencyProperty IsCreatedAutomaticallyProperty;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<bool, bool> <ActionBeforeClose>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static Panel <GrowlPanel>k__BackingField;
    private Func`2<bool, bool> ActionBeforeClose { get; private set; }
    public static Panel GrowlPanel { get; public set; }
    public InfoType Type { get; public set; }
    internal string CancelStr { get; internal set; }
    internal string ConfirmStr { get; internal set; }
    public bool ShowDateTime { get; public set; }
    public string Message { get; public set; }
    public DateTime Time { get; public set; }
    public Geometry Icon { get; public set; }
    public Brush IconBrush { get; public set; }
    private static Growl();
    [CompilerGeneratedAttribute]
private Func`2<bool, bool> get_ActionBeforeClose();
    [CompilerGeneratedAttribute]
private void set_ActionBeforeClose(Func`2<bool, bool> value);
    [CompilerGeneratedAttribute]
public static Panel get_GrowlPanel();
    [CompilerGeneratedAttribute]
public static void set_GrowlPanel(Panel value);
    public InfoType get_Type();
    public void set_Type(InfoType value);
    internal string get_CancelStr();
    internal void set_CancelStr(string value);
    internal string get_ConfirmStr();
    internal void set_ConfirmStr(string value);
    public bool get_ShowDateTime();
    public void set_ShowDateTime(bool value);
    public string get_Message();
    public void set_Message(string value);
    public DateTime get_Time();
    public void set_Time(DateTime value);
    public Geometry get_Icon();
    public void set_Icon(Geometry value);
    public Brush get_IconBrush();
    public void set_IconBrush(Brush value);
    public static void Register(string token, Panel panel);
    public static void Unregister(string token, Panel panel);
    public static void Unregister(Panel panel);
    public static void Unregister(string token);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    public virtual void OnApplyTemplate();
    private void CheckNull();
    private static void OnTokenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetToken(DependencyObject element, string value);
    public static string GetToken(DependencyObject element);
    public static void SetGrowlParent(DependencyObject element, bool value);
    public static bool GetGrowlParent(DependencyObject element);
    private static void SetIsCreatedAutomatically(DependencyObject element, bool value);
    private static bool GetIsCreatedAutomatically(DependencyObject element);
    private void StartTimer();
    private static void SetGrowlPanel(Panel panel);
    private static void InitGrowlPanel(Panel panel);
    private void Update();
    private static void ShowGlobal(GrowlInfo growlInfo);
    private static void Show(GrowlInfo growlInfo);
    private static Panel CreateDefaultPanel();
    private static void RemoveDefaultPanel(Panel panel);
    private static void InitGrowlInfo(GrowlInfo& growlInfo, InfoType infoType);
    public static void Success(string message, string token);
    public static void Success(GrowlInfo growlInfo);
    public static void SuccessGlobal(string message);
    public static void SuccessGlobal(GrowlInfo growlInfo);
    public static void Info(string message, string token);
    public static void Info(GrowlInfo growlInfo);
    public static void InfoGlobal(string message);
    public static void InfoGlobal(GrowlInfo growlInfo);
    private void ButtonClose_OnClick(object sender, RoutedEventArgs e);
    private void Close(bool invokeParam);
    public static void Clear(string token);
    private static void Clear(Panel panel);
    public static void ClearGlobal();
    private void ButtonCancel_OnClick(object sender, RoutedEventArgs e);
    private void ButtonOk_OnClick(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <StartTimer>b__72_0(object <p0>, EventArgs <p1>);
    [CompilerGeneratedAttribute]
private void <Close>b__90_0(object <p0>, EventArgs <p1>);
}
public class WPF.UI.Controls.Growl.GrowlInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ShowDateTime>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <WaitTime>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <CancelStr>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConfirmStr>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<bool, bool> <ActionBeforeClose>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <StaysOpen>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCustom>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InfoType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Geometry <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IconKey>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Brush <IconBrush>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <IconBrushKey>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ShowCloseButton>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FlowDirection <FlowDirection>k__BackingField;
    public string Message { get; public set; }
    public bool ShowDateTime { get; public set; }
    public int WaitTime { get; public set; }
    public string CancelStr { get; public set; }
    public string ConfirmStr { get; public set; }
    public Func`2<bool, bool> ActionBeforeClose { get; public set; }
    public bool StaysOpen { get; public set; }
    public bool IsCustom { get; public set; }
    public InfoType Type { get; public set; }
    public Geometry Icon { get; public set; }
    public string IconKey { get; public set; }
    public Brush IconBrush { get; public set; }
    public string IconBrushKey { get; public set; }
    public bool ShowCloseButton { get; public set; }
    public string Token { get; public set; }
    public FlowDirection FlowDirection { get; public set; }
    private static GrowlInfo();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowDateTime();
    [CompilerGeneratedAttribute]
public void set_ShowDateTime(bool value);
    [CompilerGeneratedAttribute]
public int get_WaitTime();
    [CompilerGeneratedAttribute]
public void set_WaitTime(int value);
    [CompilerGeneratedAttribute]
public string get_CancelStr();
    [CompilerGeneratedAttribute]
public void set_CancelStr(string value);
    [CompilerGeneratedAttribute]
public string get_ConfirmStr();
    [CompilerGeneratedAttribute]
public void set_ConfirmStr(string value);
    [CompilerGeneratedAttribute]
public Func`2<bool, bool> get_ActionBeforeClose();
    [CompilerGeneratedAttribute]
public void set_ActionBeforeClose(Func`2<bool, bool> value);
    [CompilerGeneratedAttribute]
public bool get_StaysOpen();
    [CompilerGeneratedAttribute]
public void set_StaysOpen(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCustom();
    [CompilerGeneratedAttribute]
public void set_IsCustom(bool value);
    [CompilerGeneratedAttribute]
public InfoType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(InfoType value);
    [CompilerGeneratedAttribute]
public Geometry get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Geometry value);
    [CompilerGeneratedAttribute]
public string get_IconKey();
    [CompilerGeneratedAttribute]
public void set_IconKey(string value);
    [CompilerGeneratedAttribute]
public Brush get_IconBrush();
    [CompilerGeneratedAttribute]
public void set_IconBrush(Brush value);
    [CompilerGeneratedAttribute]
public string get_IconBrushKey();
    [CompilerGeneratedAttribute]
public void set_IconBrushKey(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowCloseButton();
    [CompilerGeneratedAttribute]
public void set_ShowCloseButton(bool value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public FlowDirection get_FlowDirection();
    [CompilerGeneratedAttribute]
public void set_FlowDirection(FlowDirection value);
}
public class WPF.UI.Controls.Growl.GrowlWindow : Window {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Panel <GrowlPanel>k__BackingField;
    internal Panel GrowlPanel { get; internal set; }
    private static GrowlWindow();
    [CompilerGeneratedAttribute]
internal Panel get_GrowlPanel();
    [CompilerGeneratedAttribute]
internal void set_GrowlPanel(Panel value);
    internal void Init();
    protected virtual void OnSourceInitialized(EventArgs e);
}
public enum WPF.UI.Controls.Growl.InfoType : Enum {
    public int value__;
    public static InfoType Success;
    public static InfoType Info;
    public static InfoType Warning;
    public static InfoType Error;
    public static InfoType Fatal;
    public static InfoType Ask;
}
public class WPF.UI.Controls.Growl.OpenLinkCommand : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler CanExecuteChanged;
    private static OpenLinkCommand();
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public class WPF.UI.Controls.Growl.PushMainWindow2TopCommand : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    private static PushMainWindow2TopCommand();
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public class WPF.UI.Controls.Growl.ShutdownAppCommand : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    private static ShutdownAppCommand();
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public class WPF.UI.Controls.Helper.AnimationHelper : object {
    public static DependencyProperty FadeInProperty;
    public static DependencyProperty FadeOutProperty;
    public static DependencyProperty SlideInFromRightProperty;
    public static DependencyProperty SlideInFromLeftProperty;
    public static DependencyProperty SlideInFromTopProperty;
    public static DependencyProperty SlideInFromBottomProperty;
    public static DependencyProperty GradualInProperty;
    public static DependencyProperty MarginToProperty;
    public static DependencyProperty DurationSecondsProperty;
    public static DependencyProperty BeginTimeSecondsProperty;
    public static DependencyProperty EasingFunctionProperty;
    public static RoutedEvent CompletedEvent;
    private static AnimationHelper();
    public static bool GetFadeIn(DependencyObject obj);
    public static void SetFadeIn(DependencyObject obj, bool value);
    private static void OnFadeInChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetFadeOut(DependencyObject obj);
    public static void SetFadeOut(DependencyObject obj, bool value);
    private static void OnFadeOutChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetSlideInFromRight(DependencyObject obj);
    public static void SetSlideInFromRight(DependencyObject obj, bool value);
    private static void OnSlideInFromRightChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetSlideInFromLeft(DependencyObject obj);
    public static void SetSlideInFromLeft(DependencyObject obj, bool value);
    private static void OnSlideInFromLeftChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetSlideInFromTop(DependencyObject obj);
    public static void SetSlideInFromTop(DependencyObject obj, bool value);
    private static void OnSlideInFromTopChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetSlideInFromBottom(DependencyObject obj);
    public static void SetSlideInFromBottom(DependencyObject obj, bool value);
    private static void OnSlideInFromBottomChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetGradualIn(DependencyObject obj);
    public static void SetGradualIn(DependencyObject obj, bool value);
    private static void OnGradualInChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static Thickness GetMarginTo(DependencyObject obj);
    public static void SetMarginTo(DependencyObject obj, Thickness value);
    private static void OnMarginToChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static double GetDurationSeconds(DependencyObject obj);
    public static void SetDurationSeconds(DependencyObject obj, double value);
    public static double GetBeginTimeSeconds(DependencyObject obj);
    public static void SetBeginTimeSeconds(DependencyObject obj, double value);
    public static IEasingFunction GetEasingFunction(DependencyObject obj);
    public static void SetEasingFunction(DependencyObject obj, IEasingFunction value);
    private static DoubleAnimation GetDoubleAnimation(double to, FrameworkElement element);
    private static DoubleAnimation GetDoubleAnimation(double to, TimeSpan duration, FrameworkElement element, Nullable`1<TimeSpan> beginTime, IEasingFunction easingFunction);
    private static ColorAnimation GetColorAnimation(Color to, FrameworkElement element);
    private static ColorAnimation GetColorAnimation(Color to, TimeSpan duration, FrameworkElement element, Nullable`1<TimeSpan> beginTime, IEasingFunction easingFunction);
    private static ThicknessAnimation GetThicknessAnimation(Thickness to, FrameworkElement element);
    public static ThicknessAnimation CreateAnimation(Thickness thickness, double milliseconds);
    public static DoubleAnimation CreateAnimation(double toValue, double milliseconds);
    public static void AddCompletedHandler(DependencyObject d, RoutedEventHandler handler);
    public static void RemoveCompletedHandler(DependencyObject d, RoutedEventHandler handler);
    internal static void RaiseCompleted(UIElement uie);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.Controls.Helper.TreeViewHelper : object {
    public static DependencyProperty TreeViewStyleProperty;
    public static DependencyProperty SelectModeProperty;
    public static DependencyProperty ExpandModeProperty;
    public static DependencyProperty ExpandBehaviourProperty;
    public static DependencyProperty ExpandedBrushProperty;
    public static DependencyProperty SelectedBackgroundProperty;
    public static DependencyProperty SelectedForegroundProperty;
    public static DependencyProperty ItemHeightProperty;
    public static DependencyProperty ItemIconProperty;
    public static DependencyProperty ItemPaddingProperty;
    internal static DependencyProperty LastSelecteedItemProperty;
    internal static DependencyProperty LastExpandedItemProperty;
    private static TreeViewHelper();
    public static TreeViewStyle GetTreeViewStyle(DependencyObject obj);
    public static void SetTreeViewStyle(DependencyObject obj, TreeViewStyle value);
    public static SelectMode GetSelectMode(DependencyObject obj);
    public static void SetSelectMode(DependencyObject obj, SelectMode value);
    public static ExpandMode GetExpandMode(DependencyObject obj);
    public static void SetExpandMode(DependencyObject obj, ExpandMode value);
    private static void OnExpandModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnExpandModeItemSelected(object sender, RoutedEventArgs e);
    private static TreeViewItem GetTreeViewItemFromChild(TreeView treeView, UIElement child);
    public static ExpandBehaviour GetExpandBehaviour(DependencyObject obj);
    public static void SetExpandBehaviour(DependencyObject obj, ExpandBehaviour value);
    private static void OnExpandBehaviourChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnExpandBehaviourItemSelected(object sender, RoutedEventArgs e);
    public static Brush GetExpandedBrush(DependencyObject obj);
    public static void SetExpandedBrush(DependencyObject obj, Brush value);
    public static Brush GetSelectedBackground(DependencyObject obj);
    public static void SetSelectedBackground(DependencyObject obj, Brush value);
    public static Brush GetSelectedForeground(DependencyObject obj);
    public static void SetSelectedForeground(DependencyObject obj, Brush value);
    public static double GetItemHeight(DependencyObject obj);
    public static void SetItemHeight(DependencyObject obj, double value);
    public static object GetItemIcon(DependencyObject obj);
    public static void SetItemIcon(DependencyObject obj, object value);
    public static Thickness GetItemPadding(DependencyObject obj);
    public static void SetItemPadding(DependencyObject obj, Thickness value);
    internal static TreeViewItem GetLastSelectedItem(DependencyObject obj);
    internal static void SetLastSelecteedItem(DependencyObject obj, TreeViewItem value);
    internal static TreeViewItem GetLastExpandedItem(DependencyObject obj);
    internal static void SetLastExpandedItem(DependencyObject obj, TreeViewItem value);
    private static void TreeView_SelectedItemChanged(object sender, RoutedEventArgs e);
    private static void TreeViewItem_Selected(object sender, RoutedEventArgs e);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class WPF.UI.Controls.Internal.CloseCommand : object {
    private static CloseCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class WPF.UI.Controls.Internal.NoticeCard : Control {
    private DispatcherTimer _dispatcherTimer;
    public static DependencyProperty MessageProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty MessageBoxIconProperty;
    public static DependencyProperty CloseCommandProperty;
    public static RoutedEvent TimeupEvent;
    public string Message { get; public set; }
    public string Title { get; public set; }
    public MsgBoxIcon MessageBoxIcon { get; public set; }
    public ICommand CloseCommand { get; public set; }
    private static NoticeCard();
    public NoticeCard(Nullable`1<double> durationSeconds);
    public string get_Message();
    public void set_Message(string value);
    public string get_Title();
    public void set_Title(string value);
    public MsgBoxIcon get_MessageBoxIcon();
    public void set_MessageBoxIcon(MsgBoxIcon value);
    public ICommand get_CloseCommand();
    public void set_CloseCommand(ICommand value);
    private void DispatcherTimer_Tick(object sender, EventArgs e);
    public void add_Timeup(RoutedEventHandler value);
    public void remove_Timeup(RoutedEventHandler value);
    internal void RaiseTimeup();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.Controls.Message.MessageAdorner : Adorner {
    private ListBox listBox;
    private UIElement _child;
    private FrameworkElement adornedElement;
    public UIElement Child { get; public set; }
    protected int VisualChildrenCount { get; }
    public MessageAdorner(UIElement adornedElement);
    private static MessageAdorner();
    public void ClearMessages();
    public void PushMessage(string message, MsgBoxIcon type);
    public UIElement get_Child();
    public void set_Child(UIElement value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Visual GetVisualChild(int index);
}
public class WPF.UI.Controls.Message.MessageItem : ListBoxItem {
    [NullableAttribute("1")]
public static DependencyProperty MessageTypeProperty;
    public MsgBoxIcon MessageType { get; public set; }
    private static MessageItem();
    public MsgBoxIcon get_MessageType();
    public void set_MessageType(MsgBoxIcon value);
}
public class WPF.UI.Controls.Message.SmallPanel : Panel {
    private static SmallPanel();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class WPF.UI.Controls.Messages.SmallPanel : Panel {
    private static SmallPanel();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.Controls.NoticeControl : UserControl {
    private DispatcherTimer _dispatcherTimer;
    public static DependencyProperty MessageProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty MessageBoxIconProperty;
    public static DependencyProperty CloseCommandProperty;
    public static RoutedEvent TimeupEvent;
    private bool _contentLoaded;
    public string Message { get; public set; }
    public string Title { get; public set; }
    public MsgBoxIcon MessageBoxIcon { get; public set; }
    public ICommand CloseCommand { get; public set; }
    public NoticeControl(Nullable`1<double> durationSeconds);
    private static NoticeControl();
    public string get_Message();
    public void set_Message(string value);
    public string get_Title();
    public void set_Title(string value);
    public MsgBoxIcon get_MessageBoxIcon();
    public void set_MessageBoxIcon(MsgBoxIcon value);
    public ICommand get_CloseCommand();
    public void set_CloseCommand(ICommand value);
    private void DispatcherTimer_Tick(object sender, EventArgs e);
    public void add_Timeup(RoutedEventHandler value);
    public void remove_Timeup(RoutedEventHandler value);
    internal void RaiseTimeup();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[NullableContextAttribute("0")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class WPF.UI.Controls.NoticeWindow : Window {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static NoticeWindow <Instance>k__BackingField;
    [NullableAttribute("0")]
internal Canvas cvaMain;
    private bool _contentLoaded;
    public static NoticeWindow Instance { get; public set; }
    private static NoticeWindow();
    [CompilerGeneratedAttribute]
public static NoticeWindow get_Instance();
    [CompilerGeneratedAttribute]
public static void set_Instance(NoticeWindow value);
    private void NoticeWindow_Closing(object sender, CancelEventArgs e);
    private void Window_Initialized(object sender, EventArgs e);
    [AsyncStateMachineAttribute("WPF.UI.Controls.NoticeWindow/<AddNotice>d__7")]
[DebuggerStepThroughAttribute]
public void AddNotice(string message, string title, Nullable`1<double> durationSeconds, MsgBoxIcon messageBoxIcon);
    private void NoticeCard_Timeup(object sender, RoutedEventArgs e);
    private void BeginAnimation(NoticeCard noticeCard, bool toShow, Action callback);
    private void BeginSortAnimation(int expect);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[NullableContextAttribute("0")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class WPF.UI.Controls.Other.AdornerContainer : Adorner {
    private UIElement _child;
    public UIElement Child { get; public set; }
    protected int VisualChildrenCount { get; }
    public AdornerContainer(UIElement adornedElement);
    private static AdornerContainer();
    public UIElement get_Child();
    public void set_Child(UIElement value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Visual GetVisualChild(int index);
}
public abstract class WPF.UI.Controls.Other.AttachableCollection`1 : FreezableCollection`1<T> {
    private DependencyObject _associatedObject;
    private Collection`1<T> _snapshot;
    public DependencyObject AssociatedObject { get; }
    private DependencyObject WPF.UI.Controls.Other.IAttachedObject.AssociatedObject { get; }
    private static AttachableCollection`1();
    public DependencyObject get_AssociatedObject();
    private sealed virtual override DependencyObject WPF.UI.Controls.Other.IAttachedObject.get_AssociatedObject();
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
    protected abstract virtual void OnAttached();
    protected abstract virtual void OnDetaching();
    internal abstract virtual void ItemAdded(T item);
    internal abstract virtual void ItemRemoved(T item);
    private void VerifyAdd(T item);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class WPF.UI.Controls.Other.BehaviorCollection : AttachableCollection`1<Behavior> {
    private static BehaviorCollection();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    internal virtual void ItemAdded(Behavior item);
    internal virtual void ItemRemoved(Behavior item);
    protected virtual Freezable CreateInstanceCore();
}
internal class WPF.UI.Controls.Other.BitmapHandle : WpfSafeHandle {
    [SecurityCriticalAttribute]
private BitmapHandle(bool ownsHandle);
    private static BitmapHandle();
    [ReliabilityContractAttribute("3", "1")]
[SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
internal HandleRef MakeHandleRef(object obj);
    [SecurityCriticalAttribute]
internal static BitmapHandle CreateFromHandle(IntPtr hbitmap, bool ownsHandle);
}
internal static class WPF.UI.Controls.Other.CommonHandles : object {
    public static int Icon;
    public static int HDC;
    public static int GDI;
    public static int Kernel;
    private static CommonHandles();
}
[AttributeUsageAttribute("132")]
public class WPF.UI.Controls.Other.DefaultTriggerAttribute : Attribute {
    private Object[] _parameters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <TargetType>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Type <TriggerType>k__BackingField;
    public IEnumerable Parameters { get; }
    public Type TargetType { get; }
    public Type TriggerType { get; }
    public DefaultTriggerAttribute(Type targetType, Type triggerType, object parameter);
    public DefaultTriggerAttribute(Type targetType, Type triggerType, Object[] parameters);
    private static DefaultTriggerAttribute();
    public IEnumerable get_Parameters();
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public Type get_TriggerType();
    public TriggerBase Instantiate();
}
public class WPF.UI.Controls.Other.DesignerHelper : object {
    private static Nullable`1<bool> _isInDesignMode;
    public static bool IsInDesignMode { get; }
    private static DesignerHelper();
    public static bool get_IsInDesignMode();
}
internal class WPF.UI.Controls.Other.ExceptionStringTable : object {
    private static ResourceManager ResourceMan;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static CultureInfo <Culture>k__BackingField;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotHostBehaviorCollectionMultipleTimesExceptionMessage { get; }
    internal static string CannotHostBehaviorMultipleTimesExceptionMessage { get; }
    internal static string CannotHostTriggerActionMultipleTimesExceptionMessage { get; }
    internal static string CannotHostTriggerCollectionMultipleTimesExceptionMessage { get; }
    internal static string CannotHostTriggerMultipleTimesExceptionMessage { get; }
    internal static string CommandDoesNotExistOnBehaviorWarningMessage { get; }
    internal static string DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage { get; }
    internal static string DuplicateItemInCollectionExceptionMessage { get; }
    internal static string EventTriggerBaseInvalidEventExceptionMessage { get; }
    internal static string EventTriggerCannotFindEventNameExceptionMessage { get; }
    internal static string RetargetedTypeConstraintViolatedExceptionMessage { get; }
    internal static string TypeConstraintViolatedExceptionMessage { get; }
    internal static string UnableToResolveTargetNameWarningMessage { get; }
    private static ExceptionStringTable();
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string get_CannotHostBehaviorCollectionMultipleTimesExceptionMessage();
    internal static string get_CannotHostBehaviorMultipleTimesExceptionMessage();
    internal static string get_CannotHostTriggerActionMultipleTimesExceptionMessage();
    internal static string get_CannotHostTriggerCollectionMultipleTimesExceptionMessage();
    internal static string get_CannotHostTriggerMultipleTimesExceptionMessage();
    internal static string get_CommandDoesNotExistOnBehaviorWarningMessage();
    internal static string get_DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage();
    internal static string get_DuplicateItemInCollectionExceptionMessage();
    internal static string get_EventTriggerBaseInvalidEventExceptionMessage();
    internal static string get_EventTriggerCannotFindEventNameExceptionMessage();
    internal static string get_RetargetedTypeConstraintViolatedExceptionMessage();
    internal static string get_TypeConstraintViolatedExceptionMessage();
    internal static string get_UnableToResolveTargetNameWarningMessage();
}
public class WPF.UI.Controls.Other.ExtendedVisualStateManager : VisualStateManager {
    internal static DependencyProperty CachedBackgroundProperty;
    internal static DependencyProperty CachedEffectProperty;
    private static List`1<DependencyProperty> ChildAffectingLayoutProperties;
    internal static DependencyProperty CurrentStateProperty;
    internal static DependencyProperty DidCacheBackgroundProperty;
    private static List`1<DependencyProperty> LayoutProperties;
    internal static DependencyProperty LayoutStoryboardProperty;
    private static Storyboard LayoutTransitionStoryboard;
    private static List`1<FrameworkElement> MovingElements;
    internal static DependencyProperty OriginalLayoutValuesProperty;
    public static DependencyProperty RuntimeVisibilityPropertyProperty;
    public static DependencyProperty TransitionEffectProperty;
    internal static DependencyProperty TransitionEffectStoryboardProperty;
    public static DependencyProperty UseFluidLayoutProperty;
    private bool _changingState;
    public static bool IsRunningFluidLayoutTransition { get; }
    private static ExtendedVisualStateManager();
    public static bool get_IsRunningFluidLayoutTransition();
    private static void AnimateTransitionEffect(FrameworkElement stateGroupsRoot, VisualTransition transition);
    private static object CacheLocalValueHelper(DependencyObject dependencyObject, DependencyProperty property);
    private static void control_LayoutUpdated(object sender, EventArgs e);
    private static void CopyLayoutProperties(FrameworkElement source, FrameworkElement target, bool restoring);
    private static Storyboard CreateLayoutTransitionStoryboard(VisualTransition transition, List`1<FrameworkElement> movingElements, Dictionary`2<FrameworkElement, double> oldOpacities);
    private static Storyboard ExtractLayoutStoryboard(VisualState state);
    private static List`1<FrameworkElement> FindTargetElements(FrameworkElement control, FrameworkElement templateRoot, Storyboard layoutStoryboard, List`1<OriginalLayoutValueRecord> originalValueRecords, List`1<FrameworkElement> movingElements);
    private static VisualTransition FindTransition(VisualStateGroup group, VisualState previousState, VisualState state);
    private static bool FinishesWithZeroOpacity(FrameworkElement control, FrameworkElement stateGroupsRoot, VisualState state, VisualState previousState);
    private static void FinishTransitionEffectAnimation(FrameworkElement stateGroupsRoot);
    internal static object GetCachedBackground(DependencyObject obj);
    internal static Effect GetCachedEffect(DependencyObject obj);
    internal static VisualState GetCurrentState(DependencyObject obj);
    internal static bool GetDidCacheBackground(DependencyObject obj);
    internal static Rect GetLayoutRect(FrameworkElement element);
    internal static Storyboard GetLayoutStoryboard(DependencyObject obj);
    private static Dictionary`2<FrameworkElement, double> GetOldOpacities(FrameworkElement control, FrameworkElement templateRoot, Storyboard layoutStoryboard, List`1<OriginalLayoutValueRecord> originalValueRecords, List`1<FrameworkElement> movingElements);
    internal static List`1<OriginalLayoutValueRecord> GetOriginalLayoutValues(DependencyObject obj);
    private static Dictionary`2<FrameworkElement, Rect> GetRectsOfTargets(IEnumerable`1<FrameworkElement> targets, ICollection`1<FrameworkElement> movingElements);
    public static DependencyProperty GetRuntimeVisibilityProperty(DependencyObject obj);
    private static object GetTimelineTarget(FrameworkElement control, FrameworkElement templateRoot, Timeline timeline);
    public static TransitionEffect GetTransitionEffect(DependencyObject obj);
    internal static Storyboard GetTransitionEffectStoryboard(DependencyObject obj);
    public static bool GetUseFluidLayout(DependencyObject obj);
    private static object GetValueFromTimeline(Timeline timeline, Boolean& gotValue);
    protected virtual bool GoToStateCore(FrameworkElement control, FrameworkElement stateGroupsRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions);
    private static bool IsClose(double a, double b);
    private static bool IsVisibilityProperty(DependencyProperty property);
    private static DependencyProperty LayoutPropertyFromTimeline(Timeline timeline, bool forceRuntimeProperty);
    private static bool PrepareTransitionEffectImage(FrameworkElement stateGroupsRoot, bool useTransitions, VisualTransition transition);
    private static void ReplaceCachedLocalValueHelper(FrameworkElement element, DependencyProperty property, object value);
    internal static void SetCachedBackground(DependencyObject obj, object value);
    internal static void SetCachedEffect(DependencyObject obj, Effect value);
    internal static void SetCurrentState(DependencyObject obj, VisualState value);
    internal static void SetDidCacheBackground(DependencyObject obj, bool value);
    internal static void SetLayoutStoryboard(DependencyObject obj, Storyboard value);
    private static void SetLayoutStoryboardProperties(FrameworkElement control, FrameworkElement templateRoot, Storyboard layoutStoryboard, List`1<OriginalLayoutValueRecord> originalValueRecords);
    internal static void SetOriginalLayoutValues(DependencyObject obj, List`1<OriginalLayoutValueRecord> value);
    public static void SetRuntimeVisibilityProperty(DependencyObject obj, DependencyProperty value);
    public static void SetTransitionEffect(DependencyObject obj, TransitionEffect value);
    internal static void SetTransitionEffectStoryboard(DependencyObject obj, Storyboard value);
    public static void SetUseFluidLayout(DependencyObject obj, bool value);
    private static void StopAnimations();
    private static bool TimelineIsAnimatingRootOpacity(Timeline timeline, FrameworkElement control, FrameworkElement stateGroupsRoot);
    private static void TransferLocalValue(FrameworkElement element, DependencyProperty sourceProperty, DependencyProperty destProperty);
    private bool TransitionEffectAwareGoToStateCore(FrameworkElement control, FrameworkElement stateGroupsRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions, VisualTransition transition, bool animateWithTransitionEffect, VisualState previousState);
    private static void UnwrapMovingElementsFromCanvases(List`1<FrameworkElement> movingElements);
    private static void WrapMovingElementsInCanvases(List`1<FrameworkElement> movingElements, Dictionary`2<FrameworkElement, Rect> oldRects, Dictionary`2<FrameworkElement, Rect> newRects);
}
public class WPF.UI.Controls.Other.FluidMoveBehavior : FluidMoveBehaviorBase {
    private static DependencyProperty CacheDuringOverlayProperty;
    public static DependencyProperty DurationProperty;
    public static DependencyProperty EaseXProperty;
    public static DependencyProperty EaseYProperty;
    public static DependencyProperty FloatAboveProperty;
    private static DependencyProperty HasTransformWrapperProperty;
    private static DependencyProperty InitialIdentityTagProperty;
    public static DependencyProperty InitialTagPathProperty;
    public static DependencyProperty InitialTagProperty;
    private static DependencyProperty OverlayProperty;
    private static Dictionary`2<object, Storyboard> TransitionStoryboardDictionary;
    public Duration Duration { get; public set; }
    public IEasingFunction EaseX { get; public set; }
    public IEasingFunction EaseY { get; public set; }
    public bool FloatAbove { get; public set; }
    public TagType InitialTag { get; public set; }
    public string InitialTagPath { get; public set; }
    protected bool ShouldSkipInitialLayout { get; }
    private static FluidMoveBehavior();
    public Duration get_Duration();
    public void set_Duration(Duration value);
    public IEasingFunction get_EaseX();
    public void set_EaseX(IEasingFunction value);
    public IEasingFunction get_EaseY();
    public void set_EaseY(IEasingFunction value);
    public bool get_FloatAbove();
    public void set_FloatAbove(bool value);
    public TagType get_InitialTag();
    public void set_InitialTag(TagType value);
    public string get_InitialTagPath();
    public void set_InitialTagPath(string value);
    protected virtual bool get_ShouldSkipInitialLayout();
    private static void AddTransform(FrameworkElement child, Transform transform);
    private Storyboard CreateTransitionStoryboard(FrameworkElement child, bool usingBeforeLoaded, Rect& layoutRect, Rect& currentRect);
    protected virtual void EnsureTags(FrameworkElement child);
    private static bool GetHasTransformWrapper(DependencyObject obj);
    private static object GetInitialIdentityTag(DependencyObject obj);
    private static object GetOverlay(DependencyObject obj);
    private static Transform GetTransform(FrameworkElement child);
    private static bool IsClose(double a, double b);
    private static bool IsEmptyRect(Rect rect);
    private static void RemoveTransform(FrameworkElement child);
    private static void SetHasTransformWrapper(DependencyObject obj, bool value);
    private static void SetOverlay(DependencyObject obj, object value);
    private static void TransferLocalValue(FrameworkElement element, DependencyProperty source, DependencyProperty dest);
    internal virtual void UpdateLayoutTransitionCore(FrameworkElement child, FrameworkElement root, object tag, TagData newTagData);
}
public abstract class WPF.UI.Controls.Other.FluidMoveBehaviorBase : Behavior`1<FrameworkElement> {
    public static DependencyProperty AppliesToProperty;
    protected static DependencyProperty IdentityTagProperty;
    public static DependencyProperty IsActiveProperty;
    private static DateTime LastPurgeTick;
    private static TimeSpan MinTickDelta;
    private static DateTime NextToLastPurgeTick;
    internal static Dictionary`2<object, TagData> TagDictionary;
    public static DependencyProperty TagPathProperty;
    public static DependencyProperty TagProperty;
    public FluidMoveScope AppliesTo { get; public set; }
    public bool IsActive { get; public set; }
    protected bool ShouldSkipInitialLayout { get; }
    public TagType Tag { get; public set; }
    public string TagPath { get; public set; }
    private static FluidMoveBehaviorBase();
    public FluidMoveScope get_AppliesTo();
    public void set_AppliesTo(FluidMoveScope value);
    public bool get_IsActive();
    public void set_IsActive(bool value);
    protected virtual bool get_ShouldSkipInitialLayout();
    public TagType get_Tag();
    public void set_Tag(TagType value);
    public string get_TagPath();
    public void set_TagPath(string value);
    private void AssociatedObject_LayoutUpdated(object sender, EventArgs e);
    protected virtual void EnsureTags(FrameworkElement child);
    protected static object GetIdentityTag(DependencyObject obj);
    private static FrameworkElement GetVisualRoot(FrameworkElement child);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected static void SetIdentityTag(DependencyObject obj, object value);
    internal static Rect TranslateRect(Rect rect, FrameworkElement from, FrameworkElement to);
    private void UpdateLayoutTransition(FrameworkElement child);
    internal abstract virtual void UpdateLayoutTransitionCore(FrameworkElement child, FrameworkElement root, object tag, TagData newTagData);
}
internal static class WPF.UI.Controls.Other.HandleCollector : object {
    private static HandleType[] HandleTypes;
    private static int HandleTypeCount;
    private static object HandleMutex;
    private static HandleCollector();
    internal static IntPtr Add(IntPtr handle, int type);
    [SecuritySafeCriticalAttribute]
internal static SafeHandle Add(SafeHandle handle, int type);
    internal static void Add(int type);
    internal static int RegisterType(string typeName, int expense, int initialThreshold);
    internal static IntPtr Remove(IntPtr handle, int type);
    [SecuritySafeCriticalAttribute]
internal static SafeHandle Remove(SafeHandle handle, int type);
    internal static void Remove(int type);
}
public interface WPF.UI.Controls.Other.IAttachedObject {
    public DependencyObject AssociatedObject { get; }
    public abstract virtual void Attach(DependencyObject dependencyObject);
    public abstract virtual void Detach();
    public abstract virtual DependencyObject get_AssociatedObject();
}
internal class WPF.UI.Controls.Other.IconHandle : WpfSafeHandle {
    private static IconHandle();
    [SecurityCriticalAttribute]
[ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static IconHandle GetInvalidIcon();
    [SecurityCriticalAttribute]
internal IntPtr CriticalGetHandle();
}
public static class WPF.UI.Controls.Other.Interaction : object {
    private static DependencyProperty TriggersProperty;
    private static DependencyProperty BehaviorsProperty;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <ShouldRunInDesignMode>k__BackingField;
    internal static bool ShouldRunInDesignMode { get; internal set; }
    private static Interaction();
    [CompilerGeneratedAttribute]
internal static bool get_ShouldRunInDesignMode();
    [CompilerGeneratedAttribute]
internal static void set_ShouldRunInDesignMode(bool value);
    public static TriggerCollection GetTriggers(DependencyObject obj);
    public static BehaviorCollection GetBehaviors(DependencyObject obj);
    private static void OnBehaviorsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnTriggersChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    internal static bool IsElementLoaded(FrameworkElement element);
}
public abstract class WPF.UI.Controls.Other.Interactivity.Behavior : Animatable {
    private DependencyObject _associatedObject;
    private Type _associatedType;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler AssociatedObjectChanged;
    protected DependencyObject AssociatedObject { get; }
    protected Type AssociatedType { get; }
    private DependencyObject WPF.UI.Controls.Other.IAttachedObject.AssociatedObject { get; }
    internal Behavior(Type associatedType);
    private static Behavior();
    protected DependencyObject get_AssociatedObject();
    protected Type get_AssociatedType();
    private sealed virtual override DependencyObject WPF.UI.Controls.Other.IAttachedObject.get_AssociatedObject();
    [CompilerGeneratedAttribute]
internal void add_AssociatedObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_AssociatedObjectChanged(EventHandler value);
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
    protected virtual Freezable CreateInstanceCore();
    private void OnAssociatedObjectChanged();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
}
public abstract class WPF.UI.Controls.Other.Interactivity.Behavior`1 : Behavior {
    protected T AssociatedObject { get; }
    private static Behavior`1();
    protected T get_AssociatedObject();
}
public enum WPF.UI.Controls.Other.Interactivity.FluidMoveScope : Enum {
    public int value__;
    public static FluidMoveScope Self;
    public static FluidMoveScope Children;
}
[DefaultTriggerAttribute("System.Windows.Controls.Primitives.ButtonBase", "System.Windows.EventTrigger", "Mono.Cecil.CustomAttributeArgument")]
[DefaultTriggerAttribute("System.Windows.UIElement", "System.Windows.EventTrigger", "Mono.Cecil.CustomAttributeArgument")]
public abstract class WPF.UI.Controls.Other.Interactivity.TriggerAction : Animatable {
    public static DependencyProperty IsEnabledProperty;
    private Type _associatedObjectTypeConstraint;
    private DependencyObject _associatedObject;
    private bool _isHosted;
    protected DependencyObject AssociatedObject { get; }
    public bool IsEnabled { get; public set; }
    protected Type AssociatedObjectTypeConstraint { get; }
    internal bool IsHosted { get; internal set; }
    private DependencyObject WPF.UI.Controls.Other.IAttachedObject.AssociatedObject { get; }
    internal TriggerAction(Type associatedObjectTypeConstraint);
    private static TriggerAction();
    protected DependencyObject get_AssociatedObject();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    protected virtual Type get_AssociatedObjectTypeConstraint();
    internal bool get_IsHosted();
    internal void set_IsHosted(bool value);
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
    private sealed virtual override DependencyObject WPF.UI.Controls.Other.IAttachedObject.get_AssociatedObject();
    internal void CallInvoke(object parameter);
    protected virtual Freezable CreateInstanceCore();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected abstract virtual void Invoke(object parameter);
}
public class WPF.UI.Controls.Other.Interactivity.TriggerActionCollection : AttachableCollection`1<TriggerAction> {
    private static TriggerActionCollection();
    protected virtual Freezable CreateInstanceCore();
    internal virtual void ItemAdded(TriggerAction item);
    internal virtual void ItemRemoved(TriggerAction item);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
}
[ContentPropertyAttribute("Actions")]
public abstract class WPF.UI.Controls.Other.Interactivity.TriggerBase : Animatable {
    private static DependencyPropertyKey ActionsPropertyKey;
    public static DependencyProperty ActionsProperty;
    private DependencyObject _associatedObject;
    private Type _associatedObjectTypeConstraint;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler`1<PreviewInvokeEventArgs> PreviewInvoke;
    public TriggerActionCollection Actions { get; }
    protected DependencyObject AssociatedObject { get; }
    protected Type AssociatedObjectTypeConstraint { get; }
    private DependencyObject WPF.UI.Controls.Other.IAttachedObject.AssociatedObject { get; }
    internal TriggerBase(Type associatedObjectTypeConstraint);
    private static TriggerBase();
    public TriggerActionCollection get_Actions();
    protected DependencyObject get_AssociatedObject();
    protected virtual Type get_AssociatedObjectTypeConstraint();
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
    private sealed virtual override DependencyObject WPF.UI.Controls.Other.IAttachedObject.get_AssociatedObject();
    [CompilerGeneratedAttribute]
public void add_PreviewInvoke(EventHandler`1<PreviewInvokeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreviewInvoke(EventHandler`1<PreviewInvokeEventArgs> value);
    protected virtual Freezable CreateInstanceCore();
    protected void InvokeActions(object parameter);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
}
public class WPF.UI.Controls.Other.Interactivity.TriggerCollection : AttachableCollection`1<TriggerBase> {
    private static TriggerCollection();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    internal virtual void ItemAdded(TriggerBase item);
    internal virtual void ItemRemoved(TriggerBase item);
    protected virtual Freezable CreateInstanceCore();
}
internal class WPF.UI.Controls.Other.InteropMethods : object {
    internal static IntPtr HRGN_NONE;
    private static InteropMethods();
    internal static int RegisterWindowMessage(string msg);
    internal static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, TBBUTTON& lpBuffer, int dwSize, Int32& lpNumberOfBytesRead);
    internal static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, RECT& lpBuffer, int dwSize, Int32& lpNumberOfBytesRead);
    internal static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, TRAYDATA& lpBuffer, int dwSize, Int32& lpNumberOfBytesRead);
    internal static UInt32 SendMessage(IntPtr hWnd, UInt32 Msg, UInt32 wParam, IntPtr lParam);
    internal static UInt32 GetWindowThreadProcessId(IntPtr hWnd, UInt32& lpdwProcessId);
    internal static bool AttachThreadInput(UInt32& currentForegroundWindowThreadId, UInt32& thisWindowThreadId, bool isAttach);
    internal static IntPtr GetForegroundWindow();
    internal static IntPtr OpenProcess(ProcessAccess dwDesiredAccess, bool bInheritHandle, UInt32 dwProcessId);
    internal static IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, int dwSize, AllocationType flAllocationType, MemoryProtection flProtect);
    internal static int CloseHandle(IntPtr hObject);
    internal static bool VirtualFreeEx(IntPtr hProcess, IntPtr lpAddress, int dwSize, FreeType dwFreeType);
    internal static IntPtr FindWindow(string lpClassName, string lpWindowName);
    internal static IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);
    internal static bool GetWindowRect(IntPtr hwnd, RECT& lpRect);
    internal static bool GetCursorPos(POINT& pt);
    internal static IntPtr GetDesktopWindow();
    internal static bool AddClipboardFormatListener(IntPtr hwnd);
    internal static bool RemoveClipboardFormatListener(IntPtr hwnd);
    internal static IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    internal static bool EnableMenuItem(IntPtr hMenu, int UIDEnabledItem, int uEnable);
    internal static bool InsertMenu(IntPtr hMenu, int wPosition, int wFlags, int wIDNewItem, string lpNewItem);
    internal static bool IntDestroyMenu(HandleRef hMenu);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
internal static IntPtr IntGetDC(HandleRef hWnd);
    [SecurityCriticalAttribute]
internal static IntPtr GetDC(HandleRef hWnd);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
internal static int IntReleaseDC(HandleRef hWnd, HandleRef hDC);
    [SecurityCriticalAttribute]
internal static int ReleaseDC(HandleRef hWnd, HandleRef hDC);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
internal static int GetDeviceCaps(HandleRef hDC, int nIndex);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
internal static int GetSystemMetrics(SM nIndex);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static bool IntDestroyIcon(IntPtr hIcon);
    [SecurityCriticalAttribute]
internal static bool DestroyIcon(IntPtr hIcon);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static bool IntDeleteObject(IntPtr hObject);
    [SecurityCriticalAttribute]
internal static bool DeleteObject(IntPtr hObject);
    [SecurityCriticalAttribute]
internal static BitmapHandle CreateDIBSection(HandleRef hdc, BITMAPINFO& bitmapInfo, int iUsage, IntPtr& ppvBits, SafeFileMappingHandle hSection, int dwOffset);
    internal static bool IntCloseHandle(HandleRef handle);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static BitmapHandle PrivateCreateDIBSection(HandleRef hdc, BITMAPINFO& bitmapInfo, int iUsage, IntPtr& ppvBits, SafeFileMappingHandle hSection, int dwOffset);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static IconHandle PrivateCreateIconIndirect(ICONINFO iconInfo);
    [SecurityCriticalAttribute]
internal static IconHandle CreateIconIndirect(ICONINFO iconInfo);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static BitmapHandle PrivateCreateBitmap(int width, int height, int planes, int bitsPerPixel, Byte[] lpvBits);
    [SecurityCriticalAttribute]
internal static BitmapHandle CreateBitmap(int width, int height, int planes, int bitsPerPixel, Byte[] lpvBits);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static int IntGetModuleFileName(HandleRef hModule, StringBuilder buffer, int length);
    [SecurityCriticalAttribute]
internal static string GetModuleFileName(HandleRef hModule);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
internal static int ExtractIconEx(string szExeFileName, int nIconIndex, IconHandle& phiconLarge, IconHandle& phiconSmall, int nIcons);
    internal static int Shell_NotifyIcon(int message, NOTIFYICONDATA pnid);
    [SecurityCriticalAttribute]
internal static IntPtr CreateWindowEx(int dwExStyle, string lpClassName, string lpWindowName, int dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
internal static short RegisterClass(WNDCLASS4ICON wc);
    internal static IntPtr DefWindowProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    internal static bool SetForegroundWindow(IntPtr hWnd);
    internal static IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);
    internal static IntPtr GetModuleHandle(string lpModuleName);
    internal static bool UnhookWindowsHookEx(IntPtr hhk);
    internal static IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hMod, UInt32 dwThreadId);
    internal static IntPtr GetWindowDC(IntPtr window);
    internal static UInt32 GetPixel(IntPtr dc, int x, int y);
    internal static int ReleaseDC(IntPtr window, IntPtr dc);
    internal static int GetDeviceCaps(IntPtr hdc, int nIndex);
    internal static IntPtr GetDC(IntPtr ptr);
    private static bool GetWindowPlacement(IntPtr hwnd, WINDOWPLACEMENT lpwndpl);
    internal static WINDOWPLACEMENT GetWindowPlacement(IntPtr hwnd);
    internal static int GetXLParam(int lParam);
    internal static int GetYLParam(int lParam);
    internal static int HiWord(int value);
    internal static int LoWord(int value);
    internal static IntPtr MonitorFromWindow(IntPtr handle, int flags);
    internal static bool EnumThreadWindows(UInt32 dwThreadId, EnumWindowsProc lpfn, IntPtr lParam);
    internal static bool DeleteDC(IntPtr hdc);
    internal static IntPtr CreateCompatibleDC(IntPtr hdc);
    internal static IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);
    internal static IntPtr SendMessage(IntPtr hWnd, int nMsg, IntPtr wParam, IntPtr lParam);
    internal static IntPtr MonitorFromPoint(POINT pt, int flags);
    internal static IntPtr GetWindow(IntPtr hwnd, int nCmd);
    internal static IntPtr GetActiveWindow();
    internal static bool IsWindowVisible(IntPtr hwnd);
    internal static bool IsIconic(IntPtr hwnd);
    internal static bool IsZoomed(IntPtr hwnd);
    internal static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, int flags);
    internal static Point GetCursorPos();
    private static int GetWindowLong(IntPtr hWnd, int nIndex);
    internal static int GetWindowLong(IntPtr hWnd, GWL nIndex);
    internal static IntPtr SetWindowLong(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    internal static IntPtr SetWindowLongPtr32(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    internal static IntPtr SetWindowLongPtr64(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    private static int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
    private static IntPtr SetWindowLongPtr(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
    internal static IntPtr SetWindowLongPtr(IntPtr hWnd, GWLP nIndex, IntPtr dwNewLong);
    internal static int SetWindowLong(IntPtr hWnd, GWL nIndex, int dwNewLong);
    internal static ushort RegisterClass(WNDCLASS& lpWndClass);
    internal static UInt32 GetCurrentThreadId();
    internal static IntPtr CreateWindowEx(int dwExStyle, IntPtr classAtom, string lpWindowName, int dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    internal static bool DestroyWindow(IntPtr hwnd);
    internal static bool UnregisterClass(IntPtr classAtom, IntPtr hInstance);
    internal static bool UpdateLayeredWindow(IntPtr hwnd, IntPtr hdcDest, POINT& pptDest, SIZE& psize, IntPtr hdcSrc, POINT& pptSrc, UInt32 crKey, BLENDFUNCTION& pblend, UInt32 dwFlags);
    internal static bool RedrawWindow(IntPtr hWnd, IntPtr lprcUpdate, IntPtr hrgnUpdate, RedrawWindowFlags flags);
    internal static bool EnumDisplayMonitors(IntPtr hdc, IntPtr lprcClip, EnumMonitorsDelegate lpfnEnum, IntPtr dwData);
    internal static bool IntersectRect(RECT& lprcDst, RECT& lprcSrc1, RECT& lprcSrc2);
    internal static bool GetMonitorInfo(IntPtr hMonitor, MONITORINFO& monitorInfo);
    public static IntPtr MonitorFromRect(RECT& rect, int flags);
    internal static IntPtr CreateDIBSection(IntPtr hdc, BITMAPINFO& pbmi, UInt32 iUsage, IntPtr& ppvBits, IntPtr hSection, UInt32 dwOffset);
    internal static bool AlphaBlend(IntPtr hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, IntPtr hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION pfn);
    internal static int GET_SC_WPARAM(IntPtr wParam);
    internal static IntPtr ChildWindowFromPointEx(IntPtr hwndParent, POINT pt, int uFlags);
    internal static IntPtr CreateCompatibleBitmap(IntPtr hDC, int width, int height);
    internal static bool BitBlt(IntPtr hDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, int dwRop);
    internal static bool EnableWindow(IntPtr hWnd, bool enable);
    public static bool ShowWindow(IntPtr hwnd, SW nCmdShow);
    internal static object PtrToStructure(IntPtr lparam, Type cls);
    internal static void PtrToStructure(IntPtr lparam, object data);
    internal static UInt32 SHAppBarMessage(int dwMessage, APPBARDATA& pData);
    [SecurityCriticalAttribute]
internal static int DwmGetColorizationColor(UInt32& pcrColorization, Boolean& pfOpaqueBlend);
    internal static int DwmSetWindowAttribute(IntPtr hwnd, DwmWindowAttribute dwAttribute, Int32& pvAttribute, UInt32 cbAttribute);
    private static IntPtr GetWindowLongPtr32(IntPtr hWnd, int nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr hWnd, int nIndex);
    internal static IntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);
    internal static bool SetWindowPlacement(IntPtr hWnd, WINDOWPLACEMENT& placement);
}
internal class WPF.UI.Controls.Other.InteropValues : object {
    private static InteropValues();
}
public class WPF.UI.Controls.Other.PanelElement : object {
    public static DependencyProperty FluidMoveBehaviorProperty;
    private static DependencyProperty TempFluidMoveBehaviorProperty;
    private static PanelElement();
    private static void OnFluidMoveBehaviorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetFluidMoveBehavior(DependencyObject element, FluidMoveBehavior value);
    public static FluidMoveBehavior GetFluidMoveBehavior(DependencyObject element);
    private static void SetTempFluidMoveBehavior(DependencyObject element, FluidMoveBehavior value);
    private static FluidMoveBehavior GetTempFluidMoveBehavior(DependencyObject element);
}
public class WPF.UI.Controls.Other.PreviewInvokeEventArgs : EventArgs {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Cancelling>k__BackingField;
    public bool Cancelling { get; public set; }
    private static PreviewInvokeEventArgs();
    [CompilerGeneratedAttribute]
public bool get_Cancelling();
    [CompilerGeneratedAttribute]
public void set_Cancelling(bool value);
}
public class WPF.UI.Controls.Other.ResourceHelper : object {
    private static ResourceDictionary _theme;
    private static ResourceHelper();
    public static T GetResource(string key);
    internal static T GetResourceInternal(string key);
    public static ResourceDictionary GetSkin(Assembly assembly, string themePath, SkinType skin);
    public static ResourceDictionary GetSkin(SkinType skin);
    public static ResourceDictionary GetTheme();
    public static ResourceDictionary GetStandaloneTheme();
}
internal class WPF.UI.Controls.Other.SafeFileMappingHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public bool IsInvalid { get; }
    [SecurityCriticalAttribute]
internal SafeFileMappingHandle(IntPtr handle);
    private static SafeFileMappingHandle();
    [SecuritySafeCriticalAttribute]
[SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
    [SecuritySafeCriticalAttribute]
[SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
public static bool CloseHandleNoThrow(HandleRef handle);
}
public class WPF.UI.Controls.Other.ScrollViewer : ScrollViewer {
    private double _totalVerticalOffset;
    private double _totalHorizontalOffset;
    private bool _isRunning;
    public static DependencyProperty CanMouseWheelProperty;
    public static DependencyProperty IsInertiaEnabledProperty;
    public static DependencyProperty IsPenetratingProperty;
    internal static DependencyProperty CurrentVerticalOffsetProperty;
    internal static DependencyProperty CurrentHorizontalOffsetProperty;
    public bool CanMouseWheel { get; public set; }
    public bool IsInertiaEnabled { get; public set; }
    public bool IsPenetrating { get; public set; }
    internal double CurrentVerticalOffset { get; internal set; }
    internal double CurrentHorizontalOffset { get; internal set; }
    private static ScrollViewer();
    public bool get_CanMouseWheel();
    public void set_CanMouseWheel(bool value);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    internal void ScrollToTopInternal(double milliseconds);
    public void ScrollToVerticalOffsetWithAnimation(double offset, double milliseconds);
    public void ScrollToHorizontalOffsetWithAnimation(double offset, double milliseconds);
    protected virtual HitTestResult HitTestCore(PointHitTestParameters hitTestParameters);
    public static void SetIsInertiaEnabled(DependencyObject element, bool value);
    public static bool GetIsInertiaEnabled(DependencyObject element);
    public bool get_IsInertiaEnabled();
    public void set_IsInertiaEnabled(bool value);
    public bool get_IsPenetrating();
    public void set_IsPenetrating(bool value);
    public static void SetIsPenetrating(DependencyObject element, bool value);
    public static bool GetIsPenetrating(DependencyObject element);
    private static void OnCurrentVerticalOffsetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal double get_CurrentVerticalOffset();
    internal void set_CurrentVerticalOffset(double value);
    private static void OnCurrentHorizontalOffsetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal double get_CurrentHorizontalOffset();
    internal void set_CurrentHorizontalOffset(double value);
}
public class WPF.UI.Controls.Other.ScrollViewerAttach : object {
    public static DependencyProperty AutoHideProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty IsDisabledProperty;
    private static ScrollViewerAttach();
    public static void SetAutoHide(DependencyObject element, bool value);
    public static bool GetAutoHide(DependencyObject element);
    private static void OnOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetOrientation(DependencyObject element, Orientation value);
    public static Orientation GetOrientation(DependencyObject element);
    private static void OnIsDisabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetIsDisabled(DependencyObject element, bool value);
    public static bool GetIsDisabled(DependencyObject element);
    [CompilerGeneratedAttribute]
internal static void <OnOrientationChanged>g__ScrollViewerPreviewMouseWheel|4_0(object sender, MouseWheelEventArgs args);
    [CompilerGeneratedAttribute]
internal static void <OnIsDisabledChanged>g__ScrollViewerPreviewMouseWheel|8_0(object sender, MouseWheelEventArgs args);
}
public enum WPF.UI.Controls.Other.SkinType : Enum {
    public int value__;
    public static SkinType Default;
    public static SkinType Dark;
    public static SkinType Violet;
}
public enum WPF.UI.Controls.Other.TagType : Enum {
    public int value__;
    public static TagType Element;
    public static TagType DataContext;
}
public abstract class WPF.UI.Controls.Other.TransitionEffect : ShaderEffect {
    public static DependencyProperty InputProperty;
    public static DependencyProperty OldImageProperty;
    public static DependencyProperty ProgressProperty;
    public Brush Input { get; public set; }
    public Brush OldImage { get; public set; }
    public double Progress { get; public set; }
    private static TransitionEffect();
    public Brush get_Input();
    public void set_Input(Brush value);
    public Brush get_OldImage();
    public void set_OldImage(Brush value);
    public double get_Progress();
    public void set_Progress(double value);
    public TransitionEffect CloneCurrentValue();
    protected abstract virtual TransitionEffect DeepCopy();
}
[ExtensionAttribute]
public static class WPF.UI.Controls.Other.UIElementExtension : object {
    private static UIElementExtension();
    [ExtensionAttribute]
public static void Show(UIElement element);
    [ExtensionAttribute]
public static void Show(UIElement element, bool show);
    [ExtensionAttribute]
public static void Hide(UIElement element);
    [ExtensionAttribute]
public static void Collapse(UIElement element);
}
internal static class WPF.UI.Controls.Other.ValueBoxes : object {
    internal static object TrueBox;
    internal static object FalseBox;
    internal static object VerticalBox;
    internal static object HorizontalBox;
    internal static object VisibleBox;
    internal static object CollapsedBox;
    internal static object HiddenBox;
    internal static object Double01Box;
    internal static object Double0Box;
    internal static object Double1Box;
    internal static object Double10Box;
    internal static object Double20Box;
    internal static object Double100Box;
    internal static object Double200Box;
    internal static object Double300Box;
    internal static object DoubleNeg1Box;
    internal static object Int0Box;
    internal static object Int1Box;
    internal static object Int2Box;
    internal static object Int5Box;
    internal static object Int99Box;
    private static ValueBoxes();
    internal static object BooleanBox(bool value);
    internal static object OrientationBox(Orientation value);
    internal static object VisibilityBox(Visibility value);
}
[ExtensionAttribute]
public static class WPF.UI.Controls.Other.VisualHelper : object {
    private static VisualHelper();
    internal static VisualStateGroup TryGetVisualStateGroup(DependencyObject d, string groupName);
    internal static FrameworkElement GetImplementationRoot(DependencyObject d);
    public static T GetChild(DependencyObject d);
    public static T GetParent(DependencyObject d);
    [ExtensionAttribute]
public static IntPtr GetHandle(Visual visual);
    internal static void HitTestVisibleElements(Visual visual, HitTestResultCallback resultCallback, HitTestParameters parameters);
    private static HitTestFilterBehavior ExcludeNonVisualElements(DependencyObject potentialHitTestTarget);
    internal static bool ModifyStyle(IntPtr hWnd, int styleToRemove, int styleToAdd);
}
[ExtensionAttribute]
public static class WPF.UI.Controls.Other.WindowHelper : object {
    private static BitArray _cacheValid;
    private static bool _setDpiX;
    private static bool _dpiInitialized;
    private static object _dpiLock;
    private static int _dpi;
    private static int _dpiX;
    internal static int Dpi { get; }
    internal static int DpiX { get; }
    private static WindowHelper();
    public static Window GetActiveWindow();
    [SecuritySafeCriticalAttribute]
[SecurityCriticalAttribute]
internal static int get_Dpi();
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static int get_DpiX();
    public static IntPtr CreateHandle();
    [ExtensionAttribute]
public static IntPtr GetHandle(Window window);
    [ExtensionAttribute]
public static HwndSource GetHwndSource(Window window);
    public static void SetWindowToForeground(Window window);
}
internal abstract class WPF.UI.Controls.Other.WpfSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private int _collectorId;
    [SecurityCriticalAttribute]
protected WpfSafeHandle(bool ownsHandle, int collectorId);
    private static WpfSafeHandle();
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.Controls.SearchBoxControl : UserControl {
    public static DependencyProperty BtnContentProperty;
    public static DependencyProperty TextBoxTextProperty;
    public static DependencyProperty WatermarkProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static RoutedEvent TextChangedEvent;
    public static DependencyProperty TextChangedCommandProperty;
    [NullableAttribute("0")]
internal SearchBoxControl userControl;
    [NullableAttribute("0")]
internal Grid grid;
    [NullableAttribute("0")]
internal Border border;
    private bool _contentLoaded;
    public string BtnContent { get; public set; }
    public string TextBoxText { get; public set; }
    public string Watermark { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public ICommand TextChangedCommand { get; public set; }
    private static SearchBoxControl();
    public string get_BtnContent();
    public void set_BtnContent(string value);
    public string get_TextBoxText();
    public void set_TextBoxText(string value);
    public string get_Watermark();
    public void set_Watermark(string value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public void add_TextChanged(RoutedEventHandler value);
    public void remove_TextChanged(RoutedEventHandler value);
    protected virtual void OnTextChanged();
    private void TextBox_TextChanged(object sender, TextChangedEventArgs e);
    public ICommand get_TextChangedCommand();
    public void set_TextChangedCommand(ICommand value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [NullableContextAttribute("0")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[NullableContextAttribute("0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[DesignTimeVisibleAttribute("False")]
public class WPF.UI.Controls.TDateTimeView : UserControl {
    [NullableAttribute("1")]
private string formerDateTimeStr;
    [NullableAttribute("1")]
public Action`1<string> DateTimeOK;
    internal Grid girdChioce;
    internal Popup popChioce;
    internal TextBlock tbTitle;
    internal Button iBtnCloseView;
    internal Calendar calDate;
    internal Border TDateTime2;
    internal Label lblTime;
    internal Button btnhh;
    internal TextBlock textBlockh;
    internal Button btnmm;
    internal TextBlock textBlockm;
    internal Button btnss;
    internal Button btnNow;
    internal Button btnOK;
    private bool _contentLoaded;
    [NullableContextAttribute("1")]
public TDateTimeView(string txt);
    private static TDateTimeView();
    [NullableContextAttribute("1")]
private void UserControl_Loaded(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void iBtnCloseView_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void btnOK_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void btnNow_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void btnhh_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void btnmm_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void calDate_PreviewMouseUp(object sender, MouseButtonEventArgs e);
    [NullableContextAttribute("1")]
protected void OnDateTimeContent(string dateTimeStr);
    [NullableContextAttribute("1")]
private void btnss_Click(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("1")]
private void <btnhh_Click>b__7_0(string hourstr);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("1")]
private void <btnmm_Click>b__8_0(string minStr);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("1")]
private void <btnss_Click>b__12_0(string sexStr);
}
[DesignTimeVisibleAttribute("False")]
public class WPF.UI.Controls.THourView : UserControl {
    [NullableAttribute("1")]
private string formerHourStr;
    [NullableAttribute("1")]
public Action`1<string> HourClick;
    internal TextBlock tbTitle;
    internal Button iBtnCloseView;
    internal DataGrid dgHour;
    private bool _contentLoaded;
    [NullableContextAttribute("1")]
public THourView(string txt);
    private static THourView();
    public void LoadHour();
    [NullableContextAttribute("1")]
private void UserControl_Loaded(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void dgHour_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e);
    [NullableContextAttribute("1")]
private void iBtnCloseView_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
protected void OnHourClickContentEdit(string hourstr);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[DesignTimeVisibleAttribute("False")]
public class WPF.UI.Controls.TMinSexView : UserControl {
    [NullableAttribute("1")]
public string formerMinStr;
    [NullableAttribute("1")]
public Action`1<string> MinClick;
    internal TextBlock textBlockTitle;
    internal Button iBtnCloseView;
    internal DataGrid dgMinSex;
    private bool _contentLoaded;
    [NullableContextAttribute("1")]
public TMinSexView(string txt);
    private static TMinSexView();
    public void LoadMin();
    [NullableContextAttribute("1")]
private void UserControl_Loaded(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void dgMinSex_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e);
    [NullableContextAttribute("1")]
private void iBtnCloseView_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
protected void OnMinClickContent(string minStr);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class WPF.UI.Converter.Add5Converter : object {
    private static Add5Converter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.AndMultiValueConverter : object {
    private static AndMultiValueConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.BooleanToInverseBooleanConverter : object {
    private static BooleanToInverseBooleanConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.BooleanToVisibilityConverter : object {
    private static BooleanToVisibilityConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.CompareConverter : object {
    private static CompareConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.ConVerters : object {
    private static ConVerters();
}
public class WPF.UI.Converter.GetLength : object {
    private static GetLength();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.GetLengthValue : object {
    private static GetLengthValue();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.IconConverter : object {
    private static IconConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.IsNotNullConverter : object {
    private static IsNotNullConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.IsNullConverter : object {
    private static IsNullConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.ManyIntToVisibilityConverter : object {
    private static ManyIntToVisibilityConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.ValueToBoolConverter : object {
    private static ValueToBoolConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class WPF.UI.Converter.VisibilityConverter : object {
    private static VisibilityConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.CustomMessageHelper : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private INotificationMessageManager <Manager>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AccentColor>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <Background>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Foreground>k__BackingField;
    public INotificationMessageManager Manager { get; public set; }
    private string AccentColor { get; private set; }
    private string Background { get; private set; }
    private string Foreground { get; private set; }
    public CustomMessageHelper(INotificationMessageManager manager);
    public CustomMessageHelper(INotificationMessageManager manager, string accentColor, string background, string foreground);
    private static CustomMessageHelper();
    [CompilerGeneratedAttribute]
public INotificationMessageManager get_Manager();
    [CompilerGeneratedAttribute]
public void set_Manager(INotificationMessageManager value);
    [CompilerGeneratedAttribute]
private string get_AccentColor();
    [CompilerGeneratedAttribute]
private void set_AccentColor(string value);
    [CompilerGeneratedAttribute]
private string get_Background();
    [CompilerGeneratedAttribute]
private void set_Background(string value);
    [CompilerGeneratedAttribute]
private string get_Foreground();
    [CompilerGeneratedAttribute]
private void set_Foreground(string value);
    public void CreateCustomMessage(string message, string badge, int timeout);
    public void CreateCustomMessage(string message, string badge, string button1Text, Action`1<INotificationMessageButton> button1Action);
    public void CreateCustomMessage(string message, string badge, string button1Text, Action`1<INotificationMessageButton> button1Action, string button2Text, Action`1<INotificationMessageButton> button2Action);
    public void CreateCustomMessage(string message, string badge, string buttonText, Action`1<INotificationMessageButton> buttonAction, int timeout);
    public void CreateCustomMessage(string message, string badge, string button1Text, Action`1<INotificationMessageButton> button1Action, string button2Text, Action`1<INotificationMessageButton> button2Action, int timeout);
    public void CreateCustomMessage(string message, string badge, int timeout, string accentColor, string background, string foreground);
    public void CreateCustomMessage(string header, string message, int timeout, string accentColor, string background);
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public class WPF.UI.Database.AccessDatabase : object {
    private string connectionString;
    private object connectionLock;
    public AccessDatabase(string dbFilePath, string password);
    private static AccessDatabase();
    private OleDbConnection GetOpenConnection();
    public static void CreateDatabase(string dbFilePath);
    public Tuple`2<int, string> CreateTable(string tableName, Dictionary`2<string, string> columns);
    public Tuple`2<int, string> CreateTable(string tableName, Dictionary`2<string, AccessTyle> columns);
    public Tuple`2<int, string> CreateTable(string tableName);
    private string GetColumnType(Type propertyType);
    public Tuple`2<int, string> DeleteTable(string tableName);
    public static void CopyDatabase(string sourceFilePath, string destinationFilePath);
    public int ExecuteNonQuery(string query, Dictionary`2<string, object> parameters);
    public DataTable ExecuteQuery(string query, Dictionary`2<string, object> parameters);
    public DataTable SelectRecord(string tableName, string field, string condition, Dictionary`2<string, object> parameters);
    public Tuple`2<int, string> InsertRecord(string tableName, Dictionary`2<string, object> data);
    public Tuple`2<int, string> UpdateRecord(string tableName, string condition, Dictionary`2<string, object> newData);
    public Tuple`2<int, string> DeleteRecord(string tableName, string condition);
    public List`1<Dictionary`2<string, object>> DataTableToList(DataTable dataTable);
    public List`1<T> DataTableToList(DataTable dataTable);
}
internal class WPF.UI.Database.AccessDatabaseTest : object {
    private static AccessDatabaseTest();
    [NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
private static void Mains(String[] args);
}
public enum WPF.UI.Database.AccessTyle : Enum {
    public int value__;
    public static AccessTyle AUTOINCREMENT_PRIMARY_KEY;
    public static AccessTyle TEXT;
    public static AccessTyle INTEGER;
    public static AccessTyle REAL;
    public static AccessTyle DATETIME;
}
public enum WPF.UI.DefaultButton : Enum {
    public int value__;
    public static DefaultButton None;
    public static DefaultButton YesOK;
    public static DefaultButton NoOrCancel;
    public static DefaultButton CancelOrNo;
}
public enum WPF.UI.ExpandBehaviour : Enum {
    public int value__;
    public static ExpandBehaviour Any;
    public static ExpandBehaviour OnlyOne;
}
public enum WPF.UI.ExpandMode : Enum {
    public int value__;
    public static ExpandMode DoubleClick;
    public static ExpandMode SingleClick;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.FileHelper : object {
    private static FileHelper();
    public static String[] GetDirectories(string path);
    public static String[] GetFiles(string path);
    public static String[] GetFiles(string path, string searchPattern);
    public static void RenameFile(string oldFilePath, string newFilePath);
    public static void DeleteFile(string filePath);
    public static void DeleteDirectory(string directoryPath);
    public static void MoveFile(string sourceFilePath, string destinationFilePath);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public static class WPF.UI.FileIO : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static IFilesBiz <FilesBiz>k__BackingField;
    public static IFilesBiz FilesBiz { get; public set; }
    private static FileIO();
    [CompilerGeneratedAttribute]
public static IFilesBiz get_FilesBiz();
    [CompilerGeneratedAttribute]
public static void set_FilesBiz(IFilesBiz value);
    public static void ClearMemory();
    [AsyncStateMachineAttribute("WPF.UI.FileIO/<ClearMemoryAsncy>d__5")]
[DebuggerStepThroughAttribute]
public static Task ClearMemoryAsncy();
    public static string AddBlankString(int length);
    public static string Encode(string data);
    public static bool PingIP(string ip);
    public static string Decode(string data);
    public static void SetIniPath(string striniFilePath);
    public static string ReadIniString(string section, string key, string InIFilePath);
    public static int ReadIniInt(string section, string key, string InIFilePath);
    public static double ReadIniDouble(string section, string key, string InIFilePath);
    public static string Replace(string str, string oldStr, string newStr);
    public static bool WriteIniString(string section, string key, string val, string InIFilePath);
    public static bool DeleteSection(string Section, string InIFilePath);
    public static bool DeleteKey(string section, string key, string InIFilePath);
    public static List`1<string> GetSectionAllKeys(string Key, string InIFilePath);
    public static List`1<Tuple`2<string, string>> GetAllValues(string Key, string InIFilePath);
    public static TcpClient ConnTcp(string IPaddress, int Port, int WaitTime);
    public static void FileWrite(string path, string str, bool append, string encoding);
    public static List`1<string> GetFiles(string path, string searchPattern);
    public static string FileRead(string path, string encoding);
    public static string FileCopy(string sourceFileName, string destFileName, bool overwrite);
    public static string CreateFolder(string fileName, string filePath);
    public static void SetTime(string strTime);
    public static Byte[] FileToBytes(string path);
    public static void BytesToFile(Byte[] bytes, string saveFile);
}
public class WPF.UI.GlobalProperty : object {
    private static GlobalProperty();
}
public interface WPF.UI.Growls.IEditableCollectionView {
    public NewItemPlaceholderPosition NewItemPlaceholderPosition { get; public set; }
    public bool CanAddNew { get; }
    public bool IsAddingNew { get; }
    public object CurrentAddItem { get; }
    public bool CanRemove { get; }
    public bool CanCancelEdit { get; }
    public bool IsEditingItem { get; }
    public object CurrentEditItem { get; }
    public abstract virtual NewItemPlaceholderPosition get_NewItemPlaceholderPosition();
    public abstract virtual void set_NewItemPlaceholderPosition(NewItemPlaceholderPosition value);
    public abstract virtual bool get_CanAddNew();
    public abstract virtual bool get_IsAddingNew();
    public abstract virtual object get_CurrentAddItem();
    public abstract virtual bool get_CanRemove();
    public abstract virtual bool get_CanCancelEdit();
    public abstract virtual bool get_IsEditingItem();
    public abstract virtual object get_CurrentEditItem();
    public abstract virtual object AddNew();
    public abstract virtual void CommitNew();
    public abstract virtual void CancelNew();
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void Remove(object item);
    public abstract virtual void EditItem(object item);
    public abstract virtual void CommitEdit();
    public abstract virtual void CancelEdit();
}
public enum WPF.UI.Growls.ItemsAlignment : Enum {
    public int value__;
    public static ItemsAlignment LeftOrTop;
    public static ItemsAlignment Center;
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
internal class WPF.UI.Growls.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    private static Resources();
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.9.0.0")]
[CompilerGeneratedAttribute]
internal class WPF.UI.Growls.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
internal class WPF.UI.Growls.ScrollDownCommand : object {
    private static ScrollDownCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
internal class WPF.UI.Growls.ScrollLeftCommand : object {
    private static ScrollLeftCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
internal class WPF.UI.Growls.ScrollRightCommand : object {
    private static ScrollRightCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
internal class WPF.UI.Growls.ScrollUpCommand : object {
    private static ScrollUpCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
public class WPF.UI.Growls.TabControlHelper : object {
    public static DependencyProperty TabControlStyleProperty;
    public static DependencyProperty ItemHeightProperty;
    public static DependencyProperty ItemIconProperty;
    public static DependencyProperty ItemPaddingProperty;
    public static DependencyProperty ItemCornerRadiusProperty;
    public static DependencyProperty ItemsAlignmentProperty;
    public static DependencyProperty ItemBackgroundProperty;
    public static DependencyProperty HeaderPanelBackgroundProperty;
    public static DependencyProperty SelectedForegroundProperty;
    public static DependencyProperty SelectedBackgroundProperty;
    public static DependencyProperty ExtendControlProperty;
    public static DependencyProperty CanRemoveProperty;
    public static DependencyProperty DisableScrollButtonProperty;
    public static RoutedEvent RemovedEvent;
    internal static DependencyProperty ScrollLeftCommandProperty;
    internal static DependencyProperty ScrollRightCommandProperty;
    internal static DependencyProperty ScrollUpCommandProperty;
    internal static DependencyProperty ScrollDownCommandProperty;
    private static TabControlHelper();
    public static TabControlStyle GetTabControlStyle(DependencyObject obj);
    public static void SetTabControlStyle(DependencyObject obj, TabControlStyle value);
    public static double GetItemHeight(DependencyObject obj);
    public static void SetItemHeight(DependencyObject obj, double value);
    public static object GetItemIcon(DependencyObject obj);
    public static void SetItemIcon(DependencyObject obj, object value);
    public static Thickness GetItemPadding(DependencyObject obj);
    public static void SetItemPadding(DependencyObject obj, Thickness value);
    public static CornerRadius GetItemCornerRadius(DependencyObject obj);
    public static void SetItemCornerRadius(DependencyObject obj, CornerRadius value);
    public static ItemsAlignment GetItemsAlignment(DependencyObject obj);
    public static void SetItemsAlignment(DependencyObject obj, ItemsAlignment value);
    public static Brush GetItemBackground(DependencyObject obj);
    public static void SetItemBackground(DependencyObject obj, Brush value);
    public static Brush GetHeaderPanelBackground(DependencyObject obj);
    public static void SetHeaderPanelBackground(DependencyObject obj, Brush value);
    public static Brush GetSelectedForeground(DependencyObject obj);
    public static void SetSelectedForeground(DependencyObject obj, Brush value);
    public static Brush GetSelectedBackground(DependencyObject obj);
    public static void SetSelectedBackground(DependencyObject obj, Brush value);
    public static UIElement GetExtendControl(DependencyObject obj);
    public static void SetExtendControl(DependencyObject obj, UIElement value);
    public static bool GetCanRemove(DependencyObject obj);
    public static void SetCanRemove(DependencyObject obj, bool value);
    public static bool GetDisableScrollButton(DependencyObject obj);
    public static void SetDisableScrollButton(DependencyObject obj, bool value);
    public static void AddRemovedHandler(DependencyObject d, TabItemRemovedEventHandler handler);
    public static void RemoveRemovedHandler(DependencyObject d, TabItemRemovedEventHandler handler);
    internal static void RaiseRemoved(UIElement uie, TabItem newValue, bool removedFromSource);
    internal static ICommand GetScrollLeftCommand(DependencyObject obj);
    internal static void SetScrollLeftCommand(DependencyObject obj, ICommand value);
    internal static ICommand GetScrollRightCommand(DependencyObject obj);
    internal static void SetScrollRightCommand(DependencyObject obj, ICommand value);
    internal static ICommand GetScrollUpCommand(DependencyObject obj);
    internal static void SetScrollUpCommand(DependencyObject obj, ICommand value);
    internal static ICommand GetScrollDownCommand(DependencyObject obj);
    internal static void SetScrollDownCommand(DependencyObject obj, ICommand value);
}
public enum WPF.UI.Growls.TabControlStyle : Enum {
    public int value__;
    public static TabControlStyle Standard;
    public static TabControlStyle Classic;
    public static TabControlStyle Card;
}
public class WPF.UI.Growls.TabItemRemovedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TabItem <RemovedItem>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <RemovedFromSource>k__BackingField;
    public TabItem RemovedItem { get; public set; }
    public bool RemovedFromSource { get; public set; }
    public TabItemRemovedEventArgs(TabItem removedItem, bool removedFromSource, RoutedEvent routedEvent);
    private static TabItemRemovedEventArgs();
    [CompilerGeneratedAttribute]
public TabItem get_RemovedItem();
    [CompilerGeneratedAttribute]
public void set_RemovedItem(TabItem value);
    [CompilerGeneratedAttribute]
public bool get_RemovedFromSource();
    [CompilerGeneratedAttribute]
public void set_RemovedFromSource(bool value);
}
public class WPF.UI.Growls.TabItemRemovedEventHandler : MulticastDelegate {
    public TabItemRemovedEventHandler(object object, IntPtr method);
    private static TabItemRemovedEventHandler();
    public virtual void Invoke(object sender, TabItemRemovedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TabItemRemovedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.IconHelper : object {
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty WidthProperty;
    public static DependencyProperty HeightProperty;
    private static IconHelper();
    public static FontFamily GetFontFamily(DependencyObject obj);
    public static void SetFontFamily(DependencyObject obj, FontFamily value);
    public static double GetFontSize(DependencyObject obj);
    public static void SetFontSize(DependencyObject obj, double value);
    public static Brush GetForeground(DependencyObject obj);
    public static void SetForeground(DependencyObject obj, Brush value);
    public static double GetWidth(DependencyObject obj);
    public static void SetWidth(DependencyObject obj, double value);
    public static double GetHeight(DependencyObject obj);
    public static void SetHeight(DependencyObject obj, double value);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.InsideOutFadingAnimation : object {
    private FrameworkElement element;
    private Storyboard showStoryboard;
    private Storyboard hideStoryboard;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler ShowAnimationCompleted;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler HideAnimationCompleted;
    public InsideOutFadingAnimation(FrameworkElement element);
    private static InsideOutFadingAnimation();
    [CompilerGeneratedAttribute]
public void add_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HideAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HideAnimationCompleted(EventHandler value);
    private void InitOpacityMask(FrameworkElement element);
    public void Show();
    public void Hide();
    private void showStoryboard_Completed(object sender, EventArgs e);
    private void hideStoryboard_Completed(object sender, EventArgs e);
}
internal class WPF.UI.InstanceCommon : object {
    private static InstanceCommon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.LinearFadingAnimation : object {
    private FrameworkElement element;
    private Storyboard showStoryboard;
    private Storyboard hideStoryboard;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler ShowAnimationCompleted;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler HideAnimationCompleted;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FadeInDirection <Direction>k__BackingField;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FadeInDirection Direction { get; public set; }
    public LinearFadingAnimation(FrameworkElement element);
    private static LinearFadingAnimation();
    [CompilerGeneratedAttribute]
public void add_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HideAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HideAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public FadeInDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(FadeInDirection value);
    private void InitOpacityMask(FrameworkElement element);
    private void SetFadingDirection(FrameworkElement element);
    public void Show();
    public void Hide();
    private void showStoryboard_Completed(object sender, EventArgs e);
    private void hideStoryboard_Completed(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class WPF.UI.LogNet : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ILogNetBiz <LogNetBiz>k__BackingField;
    public static ILogNetBiz LogNetBiz { get; public set; }
    private static LogNet();
    [CompilerGeneratedAttribute]
public static ILogNetBiz get_LogNetBiz();
    [CompilerGeneratedAttribute]
public static void set_LogNetBiz(ILogNetBiz value);
    public static void WriteDebug(string content, string fileName, string path);
    public static void WriteInfo(string content, string fileName, string path);
    public static void WriteError(string content, string fileName, string path);
    public static void WriteException(Exception ex, string title, string fileName, string path);
    public static void WriteNewLine(string fileName, string path);
    public static void WriteString(string content, string fileName, string path);
    public static void WriteTitle(string content, string fileName, string path);
    public static void WriteWarn(string content, string fileName, string path);
    public static void WriteFatal(string content, string fileName, string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class WPF.UI.MaxCommand : object {
    private static MaxCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.MenuHelper : object {
    public static DependencyProperty SubmenuCornerRadiusProperty;
    public static DependencyProperty SubmenuShadowColorProperty;
    public static DependencyProperty SubmenuItemHeightProperty;
    public static DependencyProperty SubmenuItemWidthProperty;
    public static DependencyProperty SubmenuHeaderHeightProperty;
    public static DependencyProperty SubmenuHeaderWidthProperty;
    public static DependencyProperty SubmenuWidthProperty;
    public static DependencyProperty SubmenuHeightProperty;
    public static DependencyProperty ItemPaddingProperty;
    public static DependencyProperty SubmenuBackgroundProperty;
    public static DependencyProperty SubmenuBorderBrushProperty;
    private static MenuHelper();
    public static CornerRadius GetSubmenuCornerRadius(DependencyObject obj);
    public static void SetSubmenuCornerRadius(DependencyObject obj, CornerRadius value);
    public static Nullable`1<Color> GetSubmenuShadowColor(DependencyObject obj);
    public static void SetSubmenuShadowColor(DependencyObject obj, Nullable`1<Color> value);
    public static double GetSubmenuItemHeight(DependencyObject obj);
    public static void SetSubmenuItemHeight(DependencyObject obj, double value);
    public static double GetSubmenuItemWidth(DependencyObject obj);
    public static void SetSubmenuItemWidth(DependencyObject obj, double value);
    public static double GetSubmenuHeaderHeight(DependencyObject obj);
    public static void SetSubmenuHeaderHeight(DependencyObject obj, double value);
    public static double GetSubmenuHeaderWidth(DependencyObject obj);
    public static void SetSubmenuHeaderWidth(DependencyObject obj, double value);
    public static double GetSubmenuWidth(DependencyObject obj);
    public static void SetSubmenuWidth(DependencyObject obj, double value);
    public static double GetSubmenuHeight(DependencyObject obj);
    public static void SetSubmenuHeight(DependencyObject obj, double value);
    public static Thickness GetItemPadding(DependencyObject obj);
    public static void SetItemPadding(DependencyObject obj, Thickness value);
    public static void SetSubmenuBackground(DependencyObject element, Nullable`1<Color> value);
    public static Nullable`1<Color> GetSubmenuBackground(DependencyObject element);
    public static void SetSubmenuBorderBrush(DependencyObject element, Nullable`1<Color> value);
    public static Nullable`1<Color> GetSubmenuBorderBrush(DependencyObject element);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public static class WPF.UI.Messages : object {
    private static MessageAdorner messageAdorner;
    private static Window win;
    private static Messages();
    public static void Push(string message, MsgBoxIcon type);
    public static void ClearMessageAdorner();
    private static AdornerLayer GetAdornerLayer(Visual visual);
    public static void PushSuccess(string message);
    public static void PushInfo(string message);
    public static void PushQuestion(string message);
    public static void PushWarning(string message);
    public static void PushError(string message);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public static class WPF.UI.MessengerHelper : object {
    private static MessengerHelper();
    public static void Register(object recipient, Action`1<TMessage> action, bool keepTargetAlive);
    public static void Register(object recipient, object token, Action`1<TMessage> action, bool keepTargetAlive);
    public static void Register(object recipient, object token, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public static void Register(object recipient, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public static void Send(TMessage message);
    [NullableContextAttribute("2")]
public static void Send(TMessage message);
    public static void Send(TMessage message, object token);
    public static void Unregister(object recipient);
    public static void Unregister(object recipient);
    public static void Unregister(object recipient, object token);
    public static void Unregister(object recipient, Action`1<TMessage> action);
    public static void Unregister(object recipient, object token, Action`1<TMessage> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class WPF.UI.MinCommand : object {
    private static MinCommand();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
public enum WPF.UI.Model.DataFormat : Enum {
    public int value__;
    public static DataFormat ABCD;
    public static DataFormat BADC;
    public static DataFormat CDAB;
    public static DataFormat DCBA;
}
public enum WPF.UI.Model.DataType : Enum {
    public int value__;
    public static DataType Bool;
    public static DataType Byte;
    public static DataType SByte;
    public static DataType Short;
    public static DataType UShort;
    public static DataType Int;
    public static DataType UInt;
    public static DataType Float;
    public static DataType Double;
    public static DataType Long;
    public static DataType ULong;
    public static DataType String;
    public static DataType WString;
    public static DataType Struct;
    public static DataType BoolArray;
    public static DataType ByteArray;
    public static DataType SByteArray;
    public static DataType ShortArray;
    public static DataType UShortArray;
    public static DataType IntArray;
    public static DataType UIntArray;
    public static DataType FloatArray;
    public static DataType DoubleArray;
    public static DataType LongArray;
    public static DataType ULongArray;
    public static DataType StringArray;
    public static DataType WStringArray;
}
public class WPF.UI.Model.LogHelper : object {
    private static LogHelper();
}
public enum WPF.UI.Model.LogHelperType : Enum {
    public int value__;
    public static LogHelperType Debug;
    public static LogHelperType Error;
    public static LogHelperType Info;
    public static LogHelperType Descrition;
    public static LogHelperType Fatal;
    public static LogHelperType Warn;
    public static LogHelperType Title;
}
public enum WPF.UI.MsgBoxIcon : Enum {
    public int value__;
    public static MsgBoxIcon None;
    public static MsgBoxIcon Info;
    public static MsgBoxIcon Success;
    public static MsgBoxIcon Error;
    public static MsgBoxIcon Warning;
    public static MsgBoxIcon Question;
}
public enum WPF.UI.MsgBoxStyle : Enum {
    public int value__;
    public static MsgBoxStyle Standard;
    public static MsgBoxStyle Modern;
    public static MsgBoxStyle Classic;
    public static MsgBoxStyle Poster;
}
public class WPF.UI.MVVM.Command.RelayCommand : object {
    private WeakAction _execute;
    private WeakFunc`1<bool> _canExecute;
    private EventHandler _requerySuggestedLocal;
    public RelayCommand(Action execute, bool keepTargetAlive);
    public RelayCommand(Action execute, Func`1<bool> canExecute, bool keepTargetAlive);
    private static RelayCommand();
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
public class WPF.UI.MVVM.Command.RelayCommand`1 : object {
    private WeakAction`1<T> _execute;
    private WeakFunc`2<T, bool> _canExecute;
    public RelayCommand`1(Action`1<T> execute, bool keepTargetAlive);
    public RelayCommand`1(Action`1<T> execute, Func`2<T, bool> canExecute, bool keepTargetAlive);
    private static RelayCommand`1();
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
internal static class WPF.UI.MVVM.Helpers.DesignerLibrary : object {
    private static Nullable`1<DesignerPlatformLibrary> _detectedDesignerPlatformLibrary;
    private static Nullable`1<bool> _isInDesignMode;
    internal static DesignerPlatformLibrary DetectedDesignerLibrary { get; }
    public static bool IsInDesignMode { get; }
    private static DesignerLibrary();
    internal static DesignerPlatformLibrary get_DetectedDesignerLibrary();
    private static DesignerPlatformLibrary GetCurrentPlatform();
    public static bool get_IsInDesignMode();
}
internal enum WPF.UI.MVVM.Helpers.DesignerPlatformLibrary : Enum {
    public int value__;
    public static DesignerPlatformLibrary Unknown;
    public static DesignerPlatformLibrary Net;
    public static DesignerPlatformLibrary WinRt;
    public static DesignerPlatformLibrary Silverlight;
}
public interface WPF.UI.MVVM.Helpers.IExecuteWithObject {
    public object Target { get; }
    public abstract virtual object get_Target();
    public abstract virtual void ExecuteWithObject(object parameter);
    public abstract virtual void MarkForDeletion();
}
public interface WPF.UI.MVVM.Helpers.IExecuteWithObjectAndResult {
    public abstract virtual object ExecuteWithObject(object parameter);
}
public class WPF.UI.MVVM.Helpers.WeakAction : object {
    private Action _staticAction;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private WeakReference <ActionReference>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private object <LiveReference>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private WeakReference <Reference>k__BackingField;
    protected MethodInfo Method { get; protected set; }
    public string MethodName { get; }
    protected WeakReference ActionReference { get; protected set; }
    protected object LiveReference { get; protected set; }
    protected WeakReference Reference { get; protected set; }
    public bool IsStatic { get; }
    public bool IsAlive { get; }
    public object Target { get; }
    protected object ActionTarget { get; }
    public WeakAction(Action action, bool keepTargetAlive);
    public WeakAction(object target, Action action, bool keepTargetAlive);
    private static WeakAction();
    [CompilerGeneratedAttribute]
protected MethodInfo get_Method();
    [CompilerGeneratedAttribute]
protected void set_Method(MethodInfo value);
    public virtual string get_MethodName();
    [CompilerGeneratedAttribute]
protected WeakReference get_ActionReference();
    [CompilerGeneratedAttribute]
protected void set_ActionReference(WeakReference value);
    [CompilerGeneratedAttribute]
protected object get_LiveReference();
    [CompilerGeneratedAttribute]
protected void set_LiveReference(object value);
    [CompilerGeneratedAttribute]
protected WeakReference get_Reference();
    [CompilerGeneratedAttribute]
protected void set_Reference(WeakReference value);
    public bool get_IsStatic();
    public virtual bool get_IsAlive();
    public sealed virtual object get_Target();
    protected object get_ActionTarget();
    public void Execute();
    public void MarkForDeletion();
}
public class WPF.UI.MVVM.Helpers.WeakAction`1 : WeakAction {
    private Action`1<T> _staticAction;
    public string MethodName { get; }
    public bool IsAlive { get; }
    public WeakAction`1(Action`1<T> action, bool keepTargetAlive);
    public WeakAction`1(object target, Action`1<T> action, bool keepTargetAlive);
    private static WeakAction`1();
    public virtual string get_MethodName();
    public virtual bool get_IsAlive();
    public void Execute();
    public void Execute(T parameter);
    public sealed virtual void ExecuteWithObject(object parameter);
    public sealed virtual void MarkForDeletion();
}
public class WPF.UI.MVVM.Helpers.WeakFunc`1 : object {
    private Func`1<TResult> _staticFunc;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <Method>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private WeakReference <FuncReference>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private object <LiveReference>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private WeakReference <Reference>k__BackingField;
    protected MethodInfo Method { get; protected set; }
    public bool IsStatic { get; }
    public string MethodName { get; }
    protected WeakReference FuncReference { get; protected set; }
    protected object LiveReference { get; protected set; }
    protected WeakReference Reference { get; protected set; }
    public bool IsAlive { get; }
    public object Target { get; }
    protected object FuncTarget { get; }
    public WeakFunc`1(Func`1<TResult> func, bool keepTargetAlive);
    public WeakFunc`1(object target, Func`1<TResult> func, bool keepTargetAlive);
    private static WeakFunc`1();
    [CompilerGeneratedAttribute]
protected MethodInfo get_Method();
    [CompilerGeneratedAttribute]
protected void set_Method(MethodInfo value);
    public bool get_IsStatic();
    public virtual string get_MethodName();
    [CompilerGeneratedAttribute]
protected WeakReference get_FuncReference();
    [CompilerGeneratedAttribute]
protected void set_FuncReference(WeakReference value);
    [CompilerGeneratedAttribute]
protected object get_LiveReference();
    [CompilerGeneratedAttribute]
protected void set_LiveReference(object value);
    [CompilerGeneratedAttribute]
protected WeakReference get_Reference();
    [CompilerGeneratedAttribute]
protected void set_Reference(WeakReference value);
    public virtual bool get_IsAlive();
    public object get_Target();
    protected object get_FuncTarget();
    public TResult Execute();
    public void MarkForDeletion();
}
public class WPF.UI.MVVM.Helpers.WeakFunc`2 : WeakFunc`1<TResult> {
    private Func`2<T, TResult> _staticFunc;
    public string MethodName { get; }
    public bool IsAlive { get; }
    public WeakFunc`2(Func`2<T, TResult> func, bool keepTargetAlive);
    public WeakFunc`2(object target, Func`2<T, TResult> func, bool keepTargetAlive);
    private static WeakFunc`2();
    public virtual string get_MethodName();
    public virtual bool get_IsAlive();
    public TResult Execute();
    public TResult Execute(T parameter);
    public sealed virtual object ExecuteWithObject(object parameter);
    public void MarkForDeletion();
}
public interface WPF.UI.MVVM.ICleanup {
    public abstract virtual void Cleanup();
}
[ObsoleteAttribute("This class is not recommended because it uses MessageBoxResult which is not good in VMs. See http://www.galasoft.ch/s/dialogmessage.")]
public class WPF.UI.MVVM.Messaging.DialogMessage : GenericMessage`1<string> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private MessageBoxButton <Button>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<MessageBoxResult> <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Caption>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private MessageBoxResult <DefaultResult>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private MessageBoxImage <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MessageBoxOptions <Options>k__BackingField;
    public MessageBoxButton Button { get; public set; }
    public Action`1<MessageBoxResult> Callback { get; private set; }
    public string Caption { get; public set; }
    public MessageBoxResult DefaultResult { get; public set; }
    public MessageBoxImage Icon { get; public set; }
    public MessageBoxOptions Options { get; public set; }
    public DialogMessage(string content, Action`1<MessageBoxResult> callback);
    public DialogMessage(object sender, string content, Action`1<MessageBoxResult> callback);
    public DialogMessage(object sender, object target, string content, Action`1<MessageBoxResult> callback);
    private static DialogMessage();
    [CompilerGeneratedAttribute]
public MessageBoxButton get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(MessageBoxButton value);
    [CompilerGeneratedAttribute]
public Action`1<MessageBoxResult> get_Callback();
    [CompilerGeneratedAttribute]
private void set_Callback(Action`1<MessageBoxResult> value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public MessageBoxResult get_DefaultResult();
    [CompilerGeneratedAttribute]
public void set_DefaultResult(MessageBoxResult value);
    [CompilerGeneratedAttribute]
public MessageBoxImage get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(MessageBoxImage value);
    [CompilerGeneratedAttribute]
public MessageBoxOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(MessageBoxOptions value);
    public void ProcessCallback(MessageBoxResult result);
}
public class WPF.UI.MVVM.Messaging.GenericMessage`1 : MessageBase {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T <Content>k__BackingField;
    public T Content { get; protected set; }
    public GenericMessage`1(T content);
    public GenericMessage`1(object sender, T content);
    public GenericMessage`1(object sender, object target, T content);
    private static GenericMessage`1();
    [CompilerGeneratedAttribute]
public T get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(T value);
}
public interface WPF.UI.MVVM.Messaging.IMessenger {
    public abstract virtual void Register(object recipient, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Register(object recipient, object token, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Register(object recipient, object token, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Register(object recipient, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Send(TMessage message);
    public abstract virtual void Send(TMessage message);
    public abstract virtual void Send(TMessage message, object token);
    public abstract virtual void Unregister(object recipient);
    public abstract virtual void Unregister(object recipient);
    public abstract virtual void Unregister(object recipient, object token);
    public abstract virtual void Unregister(object recipient, Action`1<TMessage> action);
    public abstract virtual void Unregister(object recipient, object token, Action`1<TMessage> action);
}
public class WPF.UI.MVVM.Messaging.MessageBase : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private object <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Target>k__BackingField;
    public object Sender { get; protected set; }
    public object Target { get; protected set; }
    public MessageBase(object sender);
    public MessageBase(object sender, object target);
    private static MessageBase();
    [CompilerGeneratedAttribute]
public object get_Sender();
    [CompilerGeneratedAttribute]
protected void set_Sender(object value);
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(object value);
}
public class WPF.UI.MVVM.Messaging.Messenger : object {
    private static object CreationLock;
    private static IMessenger _defaultInstance;
    private object _registerLock;
    private Dictionary`2<Type, List`1<WeakActionAndToken>> _recipientsOfSubclassesAction;
    private Dictionary`2<Type, List`1<WeakActionAndToken>> _recipientsStrictAction;
    private bool _isCleanupRegistered;
    public static IMessenger Default { get; }
    private static Messenger();
    public static IMessenger get_Default();
    public virtual void Register(object recipient, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Register(object recipient, object token, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Register(object recipient, object token, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Register(object recipient, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Send(TMessage message);
    public virtual void Send(TMessage message);
    public virtual void Send(TMessage message, object token);
    public virtual void Unregister(object recipient);
    public virtual void Unregister(object recipient);
    public virtual void Unregister(object recipient, object token);
    public virtual void Unregister(object recipient, Action`1<TMessage> action);
    public virtual void Unregister(object recipient, object token, Action`1<TMessage> action);
    public static void OverrideDefault(IMessenger newMessenger);
    public static void Reset();
    public void ResetAll();
    private static void CleanupList(IDictionary`2<Type, List`1<WeakActionAndToken>> lists);
    private static void SendToList(TMessage message, IEnumerable`1<WeakActionAndToken> weakActionsAndTokens, Type messageTargetType, object token);
    private static void UnregisterFromLists(object recipient, Dictionary`2<Type, List`1<WeakActionAndToken>> lists);
    private static void UnregisterFromLists(object recipient, object token, Action`1<TMessage> action, Dictionary`2<Type, List`1<WeakActionAndToken>> lists);
    public void RequestCleanup();
    public void Cleanup();
    private void SendToTargetOrType(TMessage message, Type messageTargetType, object token);
}
public class WPF.UI.MVVM.Messaging.NotificationMessage : MessageBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Notification>k__BackingField;
    public string Notification { get; private set; }
    public NotificationMessage(string notification);
    public NotificationMessage(object sender, string notification);
    public NotificationMessage(object sender, object target, string notification);
    private static NotificationMessage();
    [CompilerGeneratedAttribute]
public string get_Notification();
    [CompilerGeneratedAttribute]
private void set_Notification(string value);
}
public class WPF.UI.MVVM.Messaging.NotificationMessage`1 : GenericMessage`1<T> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <Notification>k__BackingField;
    public string Notification { get; private set; }
    public NotificationMessage`1(T content, string notification);
    public NotificationMessage`1(object sender, T content, string notification);
    public NotificationMessage`1(object sender, object target, T content, string notification);
    private static NotificationMessage`1();
    [CompilerGeneratedAttribute]
public string get_Notification();
    [CompilerGeneratedAttribute]
private void set_Notification(string value);
}
public class WPF.UI.MVVM.Messaging.NotificationMessageAction : NotificationMessageWithCallback {
    public NotificationMessageAction(string notification, Action callback);
    public NotificationMessageAction(object sender, string notification, Action callback);
    public NotificationMessageAction(object sender, object target, string notification, Action callback);
    private static NotificationMessageAction();
    public void Execute();
}
public class WPF.UI.MVVM.Messaging.NotificationMessageAction`1 : NotificationMessageWithCallback {
    public NotificationMessageAction`1(string notification, Action`1<TCallbackParameter> callback);
    public NotificationMessageAction`1(object sender, string notification, Action`1<TCallbackParameter> callback);
    public NotificationMessageAction`1(object sender, object target, string notification, Action`1<TCallbackParameter> callback);
    private static NotificationMessageAction`1();
    public void Execute(TCallbackParameter parameter);
}
public class WPF.UI.MVVM.Messaging.NotificationMessageWithCallback : NotificationMessage {
    private Delegate _callback;
    public NotificationMessageWithCallback(string notification, Delegate callback);
    public NotificationMessageWithCallback(object sender, string notification, Delegate callback);
    public NotificationMessageWithCallback(object sender, object target, string notification, Delegate callback);
    private static NotificationMessageWithCallback();
    public virtual object Execute(Object[] arguments);
    private static void CheckCallback(Delegate callback);
}
public class WPF.UI.MVVM.Messaging.PropertyChangedMessage`1 : PropertyChangedMessageBase {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T <NewValue>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T <OldValue>k__BackingField;
    public T NewValue { get; private set; }
    public T OldValue { get; private set; }
    public PropertyChangedMessage`1(object sender, T oldValue, T newValue, string propertyName);
    public PropertyChangedMessage`1(T oldValue, T newValue, string propertyName);
    public PropertyChangedMessage`1(object sender, object target, T oldValue, T newValue, string propertyName);
    private static PropertyChangedMessage`1();
    [CompilerGeneratedAttribute]
public T get_NewValue();
    [CompilerGeneratedAttribute]
private void set_NewValue(T value);
    [CompilerGeneratedAttribute]
public T get_OldValue();
    [CompilerGeneratedAttribute]
private void set_OldValue(T value);
}
public abstract class WPF.UI.MVVM.Messaging.PropertyChangedMessageBase : MessageBase {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; protected set; }
    protected PropertyChangedMessageBase(object sender, string propertyName);
    protected PropertyChangedMessageBase(object sender, object target, string propertyName);
    protected PropertyChangedMessageBase(string propertyName);
    private static PropertyChangedMessageBase();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
protected void set_PropertyName(string value);
}
public class WPF.UI.MVVM.ObservableObject : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangingEventHandler PropertyChanging;
    protected PropertyChangedEventHandler PropertyChangedHandler { get; }
    protected PropertyChangingEventHandler PropertyChangingHandler { get; }
    private static ObservableObject();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected PropertyChangedEventHandler get_PropertyChangedHandler();
    [CompilerGeneratedAttribute]
public void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanging(PropertyChangingEventHandler value);
    protected PropertyChangingEventHandler get_PropertyChangingHandler();
    [DebuggerStepThroughAttribute]
[ConditionalAttribute("DEBUG")]
public void VerifyPropertyName(string propertyName);
    public virtual void RaisePropertyChanging(string propertyName);
    public virtual void RaisePropertyChanged(string propertyName);
    public virtual void RaisePropertyChanging(Expression`1<Func`1<T>> propertyExpression);
    public virtual void RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression);
    protected static string GetPropertyName(Expression`1<Func`1<T>> propertyExpression);
    protected bool Set(Expression`1<Func`1<T>> propertyExpression, T& field, T newValue);
    protected bool Set(string propertyName, T& field, T newValue);
}
public static class WPF.UI.MVVM.Threading.DispatcherHelper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Dispatcher <UIDispatcher>k__BackingField;
    public static Dispatcher UIDispatcher { get; private set; }
    private static DispatcherHelper();
    [CompilerGeneratedAttribute]
public static Dispatcher get_UIDispatcher();
    [CompilerGeneratedAttribute]
private static void set_UIDispatcher(Dispatcher value);
    public static void CheckBeginInvokeOnUI(Action action);
    private static void CheckDispatcher();
    public static DispatcherOperation RunAsync(Action action);
    public static void Initialize();
    public static void Reset();
}
public abstract class WPF.UI.MVVM.ViewModelBase : ObservableObject {
    private IMessenger _messengerInstance;
    public bool IsInDesignMode { get; }
    public static bool IsInDesignModeStatic { get; }
    protected IMessenger MessengerInstance { get; protected set; }
    public ViewModelBase(IMessenger messenger);
    private static ViewModelBase();
    public bool get_IsInDesignMode();
    public static bool get_IsInDesignModeStatic();
    protected IMessenger get_MessengerInstance();
    protected void set_MessengerInstance(IMessenger value);
    public virtual void Cleanup();
    protected virtual void Broadcast(T oldValue, T newValue, string propertyName);
    public virtual void RaisePropertyChanged(string propertyName, T oldValue, T newValue, bool broadcast);
    public virtual void RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression, T oldValue, T newValue, bool broadcast);
    protected bool Set(Expression`1<Func`1<T>> propertyExpression, T& field, T newValue, bool broadcast);
    protected bool Set(string propertyName, T& field, T newValue, bool broadcast);
    protected bool Set(T& field, T newValue, bool broadcast, string propertyName);
}
public interface WPF.UI.MVVM.Views.IDialogService {
    public abstract virtual Task ShowError(string message, string title, string buttonText, Action afterHideCallback);
    public abstract virtual Task ShowError(Exception error, string title, string buttonText, Action afterHideCallback);
    public abstract virtual Task ShowMessage(string message, string title);
    public abstract virtual Task ShowMessage(string message, string title, string buttonText, Action afterHideCallback);
    public abstract virtual Task`1<bool> ShowMessage(string message, string title, string buttonConfirmText, string buttonCancelText, Action`1<bool> afterHideCallback);
    public abstract virtual Task ShowMessageBox(string message, string title);
}
public interface WPF.UI.MVVM.Views.INavigationService {
    public string CurrentPageKey { get; }
    public abstract virtual string get_CurrentPageKey();
    public abstract virtual void GoBack();
    public abstract virtual void NavigateTo(string pageKey);
    public abstract virtual void NavigateTo(string pageKey, object parameter);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class WPF.UI.MyClassTest : object {
    private static MyClassTest instance;
    private static MyClassTest();
    public static MyClassTest GetInstance();
    public void Test();
}
public class WPF.UI.NotificationMessageContainer : ItemsControl {
    public static DependencyProperty ManagerProperty;
    public INotificationMessageManager Manager { get; public set; }
    private static NotificationMessageContainer();
    public INotificationMessageManager get_Manager();
    public void set_Manager(INotificationMessageManager value);
    private static void ManagerPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void AttachManagerEvents(INotificationMessageManager newManager);
    private void DetachManagerEvents(INotificationMessageManager oldManager);
    private void ManagerOnOnMessageDismissed(object sender, NotificationMessageManagerEventArgs args);
    private void RemoveMessage(INotificationMessage message);
    private void ManagerOnOnMessageQueued(object sender, NotificationMessageManagerEventArgs args);
}
public enum WPF.UI.Notifications.ContentLocation : Enum {
    public int value__;
    public static ContentLocation Top;
    public static ContentLocation Bottom;
    public static ContentLocation Left;
    public static ContentLocation Right;
    public static ContentLocation Main;
    public static ContentLocation AboveBadge;
}
public interface WPF.UI.Notifications.INotificationAnimation {
    public bool Animates { get; public set; }
    public double AnimationInDuration { get; public set; }
    public double AnimationOutDuration { get; public set; }
    public AnimationTimeline AnimationIn { get; public set; }
    public AnimationTimeline AnimationOut { get; public set; }
    public DependencyProperty AnimationInDependencyProperty { get; public set; }
    public DependencyProperty AnimationOutDependencyProperty { get; public set; }
    public UIElement AnimatableElement { get; }
    public abstract virtual bool get_Animates();
    public abstract virtual void set_Animates(bool value);
    public abstract virtual double get_AnimationInDuration();
    public abstract virtual void set_AnimationInDuration(double value);
    public abstract virtual double get_AnimationOutDuration();
    public abstract virtual void set_AnimationOutDuration(double value);
    public abstract virtual AnimationTimeline get_AnimationIn();
    public abstract virtual void set_AnimationIn(AnimationTimeline value);
    public abstract virtual AnimationTimeline get_AnimationOut();
    public abstract virtual void set_AnimationOut(AnimationTimeline value);
    public abstract virtual DependencyProperty get_AnimationInDependencyProperty();
    public abstract virtual void set_AnimationInDependencyProperty(DependencyProperty value);
    public abstract virtual DependencyProperty get_AnimationOutDependencyProperty();
    public abstract virtual void set_AnimationOutDependencyProperty(DependencyProperty value);
    public abstract virtual UIElement get_AnimatableElement();
}
public interface WPF.UI.Notifications.INotificationMessage {
    public Brush Background { get; public set; }
    public Brush AccentBrush { get; public set; }
    public Brush BadgeAccentBrush { get; public set; }
    public string BadgeText { get; public set; }
    public Visibility BadgeVisibility { get; public set; }
    public Brush ButtonAccentBrush { get; public set; }
    public ObservableCollection`1<object> Buttons { get; public set; }
    public string Header { get; public set; }
    public Visibility HeaderVisibility { get; public set; }
    public string Message { get; public set; }
    public Visibility MessageVisibility { get; public set; }
    public object OverlayContent { get; public set; }
    public object AdditionalContentTop { get; public set; }
    public object AdditionalContentBottom { get; public set; }
    public object AdditionalContentLeft { get; public set; }
    public object AdditionalContentRight { get; public set; }
    public object AdditionalContentMain { get; public set; }
    public object AdditionalContentOverBadge { get; public set; }
    public Brush Foreground { get; public set; }
    public abstract virtual Brush get_Background();
    public abstract virtual void set_Background(Brush value);
    public abstract virtual Brush get_AccentBrush();
    public abstract virtual void set_AccentBrush(Brush value);
    public abstract virtual Brush get_BadgeAccentBrush();
    public abstract virtual void set_BadgeAccentBrush(Brush value);
    public abstract virtual string get_BadgeText();
    public abstract virtual void set_BadgeText(string value);
    public abstract virtual Visibility get_BadgeVisibility();
    public abstract virtual void set_BadgeVisibility(Visibility value);
    public abstract virtual Brush get_ButtonAccentBrush();
    public abstract virtual void set_ButtonAccentBrush(Brush value);
    public abstract virtual ObservableCollection`1<object> get_Buttons();
    public abstract virtual void set_Buttons(ObservableCollection`1<object> value);
    public abstract virtual string get_Header();
    public abstract virtual void set_Header(string value);
    public abstract virtual Visibility get_HeaderVisibility();
    public abstract virtual void set_HeaderVisibility(Visibility value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual Visibility get_MessageVisibility();
    public abstract virtual void set_MessageVisibility(Visibility value);
    public abstract virtual object get_OverlayContent();
    public abstract virtual void set_OverlayContent(object value);
    public abstract virtual object get_AdditionalContentTop();
    public abstract virtual void set_AdditionalContentTop(object value);
    public abstract virtual object get_AdditionalContentBottom();
    public abstract virtual void set_AdditionalContentBottom(object value);
    public abstract virtual object get_AdditionalContentLeft();
    public abstract virtual void set_AdditionalContentLeft(object value);
    public abstract virtual object get_AdditionalContentRight();
    public abstract virtual void set_AdditionalContentRight(object value);
    public abstract virtual object get_AdditionalContentMain();
    public abstract virtual void set_AdditionalContentMain(object value);
    public abstract virtual object get_AdditionalContentOverBadge();
    public abstract virtual void set_AdditionalContentOverBadge(object value);
    public abstract virtual Brush get_Foreground();
    public abstract virtual void set_Foreground(Brush value);
}
public interface WPF.UI.Notifications.INotificationMessageButton {
    public bool IsEnabled { get; public set; }
    public object Content { get; public set; }
    public Action`1<INotificationMessageButton> Callback { get; public set; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual object get_Content();
    public abstract virtual void set_Content(object value);
    public abstract virtual Action`1<INotificationMessageButton> get_Callback();
    public abstract virtual void set_Callback(Action`1<INotificationMessageButton> value);
}
public interface WPF.UI.Notifications.INotificationMessageFactory {
    public abstract virtual INotificationMessage GetMessage();
    public abstract virtual INotificationMessageButton GetButton();
}
public interface WPF.UI.Notifications.INotificationMessageManager {
    public INotificationMessageFactory Factory { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnMessageQueued(NotificationMessageManagerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnMessageQueued(NotificationMessageManagerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnMessageDismissed(NotificationMessageManagerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnMessageDismissed(NotificationMessageManagerEventHandler value);
    public abstract virtual INotificationMessageFactory get_Factory();
    public abstract virtual void set_Factory(INotificationMessageFactory value);
    public abstract virtual void Queue(INotificationMessage message);
    public abstract virtual void Dismiss(INotificationMessage message);
}
public class WPF.UI.Notifications.NotificationMessage : Control {
    public static DependencyProperty OverlayContentProperty;
    public static DependencyProperty AdditionalContentTopProperty;
    public static DependencyProperty AdditionalContentBottomProperty;
    public static DependencyProperty AdditionalContentLeftProperty;
    public static DependencyProperty AdditionalContentRightProperty;
    public static DependencyProperty AdditionalContentMainProperty;
    public static DependencyProperty AdditionalContentOverBadgeProperty;
    public static DependencyProperty AccentBrushProperty;
    public static DependencyProperty ButtonAccentBrushProperty;
    public static DependencyProperty BadgeVisibilityProperty;
    public static DependencyProperty BadgeAccentBrushProperty;
    public static DependencyProperty BadgeTextProperty;
    public static DependencyProperty HeaderVisibilityProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty MessageVisibilityProperty;
    public static DependencyProperty MessageProperty;
    public static DependencyProperty ButtonsProperty;
    public static DependencyProperty AnimatesProperty;
    public static DependencyProperty AnimationInDurationProperty;
    public static DependencyProperty AnimationOutDurationProperty;
    public static DependencyProperty AnimationInProperty;
    public static DependencyProperty AnimationOutProperty;
    public static DependencyProperty AnimationInDependencyPropProperty;
    public static DependencyProperty AnimationOutDependencyPropProperty;
    public object OverlayContent { get; public set; }
    public object AdditionalContentTop { get; public set; }
    public object AdditionalContentBottom { get; public set; }
    public object AdditionalContentLeft { get; public set; }
    public object AdditionalContentRight { get; public set; }
    public object AdditionalContentMain { get; public set; }
    public object AdditionalContentOverBadge { get; public set; }
    public Brush AccentBrush { get; public set; }
    public Brush ButtonAccentBrush { get; public set; }
    public Visibility BadgeVisibility { get; public set; }
    public Brush BadgeAccentBrush { get; public set; }
    public string BadgeText { get; public set; }
    public Visibility HeaderVisibility { get; public set; }
    public string Header { get; public set; }
    public Visibility MessageVisibility { get; public set; }
    public string Message { get; public set; }
    public ObservableCollection`1<object> Buttons { get; public set; }
    public bool Animates { get; public set; }
    public double AnimationInDuration { get; public set; }
    public double AnimationOutDuration { get; public set; }
    public UIElement AnimatableElement { get; }
    public AnimationTimeline AnimationIn { get; public set; }
    public AnimationTimeline AnimationOut { get; public set; }
    public DependencyProperty AnimationInDependencyProperty { get; public set; }
    public DependencyProperty AnimationOutDependencyProperty { get; public set; }
    private static NotificationMessage();
    public sealed virtual object get_OverlayContent();
    public sealed virtual void set_OverlayContent(object value);
    public sealed virtual object get_AdditionalContentTop();
    public sealed virtual void set_AdditionalContentTop(object value);
    public sealed virtual object get_AdditionalContentBottom();
    public sealed virtual void set_AdditionalContentBottom(object value);
    public sealed virtual object get_AdditionalContentLeft();
    public sealed virtual void set_AdditionalContentLeft(object value);
    public sealed virtual object get_AdditionalContentRight();
    public sealed virtual void set_AdditionalContentRight(object value);
    public sealed virtual object get_AdditionalContentMain();
    public sealed virtual void set_AdditionalContentMain(object value);
    public sealed virtual object get_AdditionalContentOverBadge();
    public sealed virtual void set_AdditionalContentOverBadge(object value);
    public sealed virtual Brush get_AccentBrush();
    public sealed virtual void set_AccentBrush(Brush value);
    public sealed virtual Brush get_ButtonAccentBrush();
    public sealed virtual void set_ButtonAccentBrush(Brush value);
    public sealed virtual Visibility get_BadgeVisibility();
    public sealed virtual void set_BadgeVisibility(Visibility value);
    public sealed virtual Brush get_BadgeAccentBrush();
    public sealed virtual void set_BadgeAccentBrush(Brush value);
    public sealed virtual string get_BadgeText();
    public sealed virtual void set_BadgeText(string value);
    public sealed virtual Visibility get_HeaderVisibility();
    public sealed virtual void set_HeaderVisibility(Visibility value);
    public sealed virtual string get_Header();
    public sealed virtual void set_Header(string value);
    public sealed virtual Visibility get_MessageVisibility();
    public sealed virtual void set_MessageVisibility(Visibility value);
    public sealed virtual string get_Message();
    public sealed virtual void set_Message(string value);
    public sealed virtual ObservableCollection`1<object> get_Buttons();
    public sealed virtual void set_Buttons(ObservableCollection`1<object> value);
    public sealed virtual bool get_Animates();
    public sealed virtual void set_Animates(bool value);
    public sealed virtual double get_AnimationInDuration();
    public sealed virtual void set_AnimationInDuration(double value);
    public sealed virtual double get_AnimationOutDuration();
    public sealed virtual void set_AnimationOutDuration(double value);
    public sealed virtual UIElement get_AnimatableElement();
    public sealed virtual AnimationTimeline get_AnimationIn();
    public sealed virtual void set_AnimationIn(AnimationTimeline value);
    public sealed virtual AnimationTimeline get_AnimationOut();
    public sealed virtual void set_AnimationOut(AnimationTimeline value);
    public sealed virtual DependencyProperty get_AnimationInDependencyProperty();
    public sealed virtual void set_AnimationInDependencyProperty(DependencyProperty value);
    public sealed virtual DependencyProperty get_AnimationOutDependencyProperty();
    public sealed virtual void set_AnimationOutDependencyProperty(DependencyProperty value);
    private static void AccentBrushPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void BadgeTextPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void HeaderPropertyChangesCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void MessagePropertyChangesCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private sealed virtual override Brush WPF.UI.Notifications.INotificationMessage.get_Background();
    private sealed virtual override void WPF.UI.Notifications.INotificationMessage.set_Background(Brush value);
    private sealed virtual override Brush WPF.UI.Notifications.INotificationMessage.get_Foreground();
    private sealed virtual override void WPF.UI.Notifications.INotificationMessage.set_Foreground(Brush value);
}
public class WPF.UI.Notifications.NotificationMessageBuilder : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private INotificationMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INotificationMessageManager <Manager>k__BackingField;
    public INotificationMessage Message { get; public set; }
    public INotificationMessageManager Manager { get; public set; }
    private static NotificationMessageBuilder();
    [CompilerGeneratedAttribute]
public INotificationMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(INotificationMessage value);
    [CompilerGeneratedAttribute]
public INotificationMessageManager get_Manager();
    [CompilerGeneratedAttribute]
public void set_Manager(INotificationMessageManager value);
    public static NotificationMessageBuilder CreateMessage();
    public void SetHeader(string header);
    public void SetMessage(string message);
    public void AddButton(INotificationMessageButton button);
    public void SetBadge(string badgeText);
    public void SetAccent(Brush accentBrush);
    public void SetBackground(Brush backgroundBrush);
    public void SetOverlay(object overlay);
    public void SetAdditionalContentTop(object additionalContentTop);
    public void SetAdditionalContentBottom(object additionalContentBottom);
    public void SetAdditionalContentLeft(object additionalContentLeft);
    public void SetAdditionalContentRight(object additionalContentRight);
    public void SetAdditionalContentMain(object additionalContentMain);
    public void SetAdditionalContentOverBadge(object additionalContentOverBadge);
    public void SetForeground(Brush brush);
    public void SetAnimates(bool animates);
    public void SetAnimationInDuration(double duration);
    public void SetAnimationOutDuration(double duration);
    public void SetAnimationIn(AnimationTimeline animation);
    public void SetAnimationOut(AnimationTimeline animation);
    public void SetAnimationInDependencyProperty(DependencyProperty property);
    public void SetAnimationOutDependencyProperty(DependencyProperty property);
    public INotificationMessage Queue();
    public void Delay(int delayMilliseconds, Action`1<INotificationMessage> action);
    public void Delay(TimeSpan delay, Action`1<INotificationMessage> action);
}
[ExtensionAttribute]
public static class WPF.UI.Notifications.NotificationMessageBuilderLinq : object {
    private static NotificationMessageBuilderLinq();
    [ExtensionAttribute]
public static NotificationMessageBuilder Background(NotificationMessageBuilder builder, Brush backgroundBrush);
    [ExtensionAttribute]
public static NotificationMessageBuilder Background(NotificationMessageBuilder builder, string backgroundBrush);
    [ExtensionAttribute]
public static NotificationMessageBuilder Accent(NotificationMessageBuilder builder, Brush accentBrush);
    [ExtensionAttribute]
public static NotificationMessageBuilder Accent(NotificationMessageBuilder builder, string accentBrush);
    [ExtensionAttribute]
public static NotificationMessageBuilder HasBadge(NotificationMessageBuilder builder, string badgeText);
    [ExtensionAttribute]
public static NotificationMessageBuilder HasHeader(NotificationMessageBuilder builder, string header);
    [ExtensionAttribute]
public static NotificationMessageBuilder HasMessage(NotificationMessageBuilder builder, string message);
    [ExtensionAttribute]
public static NotificationMessageBuilder CreateMessage(INotificationMessageManager manager);
    [ExtensionAttribute]
public static DismissNotificationMessage Dismiss(NotificationMessageBuilder builder);
    [ExtensionAttribute]
public static NotificationMessageBuilder WithDelay(DismissNotificationMessage dismiss, int delayMilliseconds, Action`1<INotificationMessage> callback);
    [ExtensionAttribute]
public static NotificationMessageBuilder WithDelay(DismissNotificationMessage dismiss, TimeSpan delay, Action`1<INotificationMessage> callback);
    [ExtensionAttribute]
public static NotificationMessageBuilder WithButton(DismissNotificationMessage dismiss, object content, Action`1<INotificationMessageButton> callback);
    [ExtensionAttribute]
public static NotificationMessageBuilder WithButton(NotificationMessageBuilder builder, object content, Action`1<INotificationMessageButton> callback);
    [ExtensionAttribute]
private static Action`1<INotificationMessage> DismissBefore(NotificationMessageBuilder builder, Action`1<INotificationMessage> callback);
    [ExtensionAttribute]
private static Action`1<INotificationMessageButton> DismissBefore(NotificationMessageBuilder builder, Action`1<INotificationMessageButton> callback);
    [ExtensionAttribute]
public static NotificationMessageBuilder WithOverlay(NotificationMessageBuilder builder, object overlay);
    [ExtensionAttribute]
public static NotificationMessageBuilder WithAdditionalContent(NotificationMessageBuilder builder, ContentLocation contentLocation, object additionalContent);
    [ExtensionAttribute]
public static NotificationMessageBuilder Foreground(NotificationMessageBuilder builder, string foregroundBrush);
    [ExtensionAttribute]
public static NotificationMessageBuilder Animates(NotificationMessageBuilder builder, bool animates);
    [ExtensionAttribute]
public static NotificationMessageBuilder AnimationInDuration(NotificationMessageBuilder builder, double duration);
    [ExtensionAttribute]
public static NotificationMessageBuilder AnimationOutDuration(NotificationMessageBuilder builder, double duration);
    [ExtensionAttribute]
public static NotificationMessageBuilder AnimationIn(NotificationMessageBuilder builder, AnimationTimeline animation);
    [ExtensionAttribute]
public static NotificationMessageBuilder AnimationOut(NotificationMessageBuilder builder, AnimationTimeline animation);
    [ExtensionAttribute]
public static NotificationMessageBuilder AnimationInDependencyProperty(NotificationMessageBuilder builder, DependencyProperty property);
    [ExtensionAttribute]
public static NotificationMessageBuilder AnimationOutDependencyProperty(NotificationMessageBuilder builder, DependencyProperty property);
}
public class WPF.UI.Notifications.NotificationMessageButton : Button {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<INotificationMessageButton> <Callback>k__BackingField;
    public Action`1<INotificationMessageButton> Callback { get; public set; }
    public NotificationMessageButton(object content);
    private static NotificationMessageButton();
    protected virtual void OnClick();
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<INotificationMessageButton> get_Callback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Callback(Action`1<INotificationMessageButton> value);
    private sealed virtual override void WPF.UI.Notifications.INotificationMessageButton.set_IsEnabled(bool value);
}
public class WPF.UI.Notifications.NotificationMessageFactory : object {
    private static NotificationMessageFactory();
    public sealed virtual INotificationMessage GetMessage();
    public sealed virtual INotificationMessageButton GetButton();
}
public class WPF.UI.Notifications.NotificationMessageManager : object {
    private List`1<INotificationMessage> queuedMessages;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NotificationMessageManagerEventHandler OnMessageQueued;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NotificationMessageManagerEventHandler OnMessageDismissed;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INotificationMessageFactory <Factory>k__BackingField;
    public INotificationMessageFactory Factory { get; public set; }
    private static NotificationMessageManager();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnMessageQueued(NotificationMessageManagerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnMessageQueued(NotificationMessageManagerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnMessageDismissed(NotificationMessageManagerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnMessageDismissed(NotificationMessageManagerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual INotificationMessageFactory get_Factory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Factory(INotificationMessageFactory value);
    public sealed virtual void Queue(INotificationMessage message);
    private void TriggerMessageQueued(INotificationMessage message);
    public sealed virtual void Dismiss(INotificationMessage message);
    private void TriggerMessageDismissed(INotificationMessage message);
}
public class WPF.UI.Notifications.NotificationMessageManagerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private INotificationMessage <Message>k__BackingField;
    public INotificationMessage Message { get; public set; }
    public NotificationMessageManagerEventArgs(INotificationMessage message);
    private static NotificationMessageManagerEventArgs();
    [CompilerGeneratedAttribute]
public INotificationMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(INotificationMessage value);
}
public class WPF.UI.Notifications.NotificationMessageManagerEventHandler : MulticastDelegate {
    public NotificationMessageManagerEventHandler(object object, IntPtr method);
    private static NotificationMessageManagerEventHandler();
    public virtual void Invoke(object sender, NotificationMessageManagerEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, NotificationMessageManagerEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[CompilerGeneratedAttribute]
internal class WPF.UI.Notifications.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    private static Resources();
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.6.0.0")]
internal class WPF.UI.Notifications.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.Notifying : UserControl {
    private Window _owner;
    private Popup _popup;
    private DispatcherTimer _timer;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Closed;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> Click;
    private static DependencyProperty MessageProperty;
    private static DependencyProperty CornerRadiusProperty;
    private static DependencyProperty IconSizeProperty;
    private static DependencyProperty BorderBrushProperty;
    private static DependencyProperty BorderThicknessProperty;
    private static DependencyProperty BackgroundProperty;
    private static DependencyProperty HorizontalContentAlignmentProperty;
    private static DependencyProperty VerticalContentAlignmentProperty;
    private static DependencyProperty ToastWidthProperty;
    private static DependencyProperty ToastHeightProperty;
    private static DependencyProperty IconProperty;
    private static DependencyProperty TimeProperty;
    private static DependencyProperty LocationProperty;
    public static DependencyProperty TextWidthProperty;
    public static DependencyProperty ToastMarginProperty;
    private static DependencyProperty IconForegroundProperty;
    [NullableAttribute("0")]
internal Grid grid;
    [NullableAttribute("0")]
internal TextBlock iconText;
    [NullableAttribute("0")]
internal TextBlock txt_toast;
    private bool _contentLoaded;
    private string Message { get; private set; }
    private CornerRadius CornerRadius { get; private set; }
    private double IconSize { get; private set; }
    private Brush BorderBrush { get; private set; }
    private Thickness BorderThickness { get; private set; }
    private Brush Background { get; private set; }
    private HorizontalAlignment HorizontalContentAlignment { get; private set; }
    private VerticalAlignment VerticalContentAlignment { get; private set; }
    private double ToastWidth { get; private set; }
    private double ToastHeight { get; private set; }
    private NotifyingIcon Icon { get; private set; }
    private int Time { get; private set; }
    private NotifyingLocation Location { get; private set; }
    public double TextWidth { get; public set; }
    public Thickness ToastMargin { get; public set; }
    private Brush IconForeground { get; private set; }
    private Notifying(Window owner, string message, NotifyingOptions options, NotifyingIcon icon, NotifyingLocation location);
    private static Notifying();
    private void Owner_Closed(object sender, EventArgs e);
    public static void Show(string msg, NotifyingOptions options);
    public static void Show(Window owner, string msg, NotifyingOptions options);
    public static void Show(string msg, NotifyingIcon icon, NotifyingLocation location);
    private static void ShowToast(Notifying toast, int time);
    private void UpdatePosition(object sender, EventArgs e);
    private static void Popup_Closed(object sender, EventArgs e);
    private void UserControl_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private static UIElement GetPopupPlacementTarget(Notifying toast);
    private static void SetPopupOffset(Popup popup, Notifying toast);
    public void Close();
    [CompilerGeneratedAttribute]
private void add_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_Closed(EventHandler`1<EventArgs> value);
    private void RaiseClosed(EventArgs e);
    [CompilerGeneratedAttribute]
private void add_Click(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_Click(EventHandler`1<EventArgs> value);
    private void RaiseClick(EventArgs e);
    private string get_Message();
    private void set_Message(string value);
    private CornerRadius get_CornerRadius();
    private void set_CornerRadius(CornerRadius value);
    private double get_IconSize();
    private void set_IconSize(double value);
    private Brush get_BorderBrush();
    private void set_BorderBrush(Brush value);
    private Thickness get_BorderThickness();
    private void set_BorderThickness(Thickness value);
    private Brush get_Background();
    private void set_Background(Brush value);
    private HorizontalAlignment get_HorizontalContentAlignment();
    private void set_HorizontalContentAlignment(HorizontalAlignment value);
    private VerticalAlignment get_VerticalContentAlignment();
    private void set_VerticalContentAlignment(VerticalAlignment value);
    private double get_ToastWidth();
    private void set_ToastWidth(double value);
    private double get_ToastHeight();
    private void set_ToastHeight(double value);
    private NotifyingIcon get_Icon();
    private void set_Icon(NotifyingIcon value);
    private static void OnNotifyingIconIconChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private int get_Time();
    private void set_Time(int value);
    private NotifyingLocation get_Location();
    private void set_Location(NotifyingLocation value);
    public double get_TextWidth();
    public void set_TextWidth(double value);
    public Thickness get_ToastMargin();
    public void set_ToastMargin(Thickness value);
    private Brush get_IconForeground();
    private void set_IconForeground(Brush value);
    private void Border_MouseEnter(object sender, MouseEventArgs e);
    private void Border_MouseLeave(object sender, MouseEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[NullableContextAttribute("0")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public enum WPF.UI.NotifyingIcon : Enum {
    public int value__;
    public static NotifyingIcon None;
    public static NotifyingIcon Info;
    public static NotifyingIcon Error;
    public static NotifyingIcon Warning;
    public static NotifyingIcon Success;
    public static NotifyingIcon Question;
}
public class WPF.UI.NotifyingIconConverter : object {
    private static NotifyingIconConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    [CompilerGeneratedAttribute]
internal static void <Convert>g__WithoutIcon|0_0(<>c__DisplayClass0_0& );
}
public enum WPF.UI.NotifyingLocation : Enum {
    public int value__;
    public static NotifyingLocation OwnerCenter;
    public static NotifyingLocation OwnerLeft;
    public static NotifyingLocation OwnerRight;
    public static NotifyingLocation OwnerTopLeft;
    public static NotifyingLocation OwnerTopCenter;
    public static NotifyingLocation OwnerTopRight;
    public static NotifyingLocation OwnerBottomLeft;
    public static NotifyingLocation OwnerBottomCenter;
    public static NotifyingLocation OwnerBottomRight;
    public static NotifyingLocation ScreenCenter;
    public static NotifyingLocation ScreenLeft;
    public static NotifyingLocation ScreenRight;
    public static NotifyingLocation ScreenTopLeft;
    public static NotifyingLocation ScreenTopCenter;
    public static NotifyingLocation ScreenTopRight;
    public static NotifyingLocation ScreenBottomLeft;
    public static NotifyingLocation ScreenBottomCenter;
    public static NotifyingLocation ScreenBottomRight;
    public static NotifyingLocation Default;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.NotifyingOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <ToastWidth>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private double <ToastHeight>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private double <TextWidth>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <Time>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private NotifyingIcon <Icon>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private NotifyingLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Brush <Foreground>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Brush <IconForeground>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FontStyle <FontStyle>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private FontStretch <FontStretch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FontFamily <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FontWeight <FontWeight>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private double <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CornerRadius <CornerRadius>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Brush <BorderBrush>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Thickness <BorderThickness>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Brush <Background>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalContentAlignment>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private VerticalAlignment <VerticalContentAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> <Click>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Thickness <ToastMargin>k__BackingField;
    public double ToastWidth { get; public set; }
    public double ToastHeight { get; public set; }
    public double TextWidth { get; public set; }
    public int Time { get; public set; }
    public NotifyingIcon Icon { get; public set; }
    public NotifyingLocation Location { get; public set; }
    public Brush Foreground { get; public set; }
    public Brush IconForeground { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public double FontSize { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public double IconSize { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public Brush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public Brush Background { get; public set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    public EventHandler`1<EventArgs> Closed { get; internal set; }
    public EventHandler`1<EventArgs> Click { get; internal set; }
    public Thickness ToastMargin { get; public set; }
    private static NotifyingOptions();
    [CompilerGeneratedAttribute]
public double get_ToastWidth();
    [CompilerGeneratedAttribute]
public void set_ToastWidth(double value);
    [CompilerGeneratedAttribute]
public double get_ToastHeight();
    [CompilerGeneratedAttribute]
public void set_ToastHeight(double value);
    [CompilerGeneratedAttribute]
public double get_TextWidth();
    [CompilerGeneratedAttribute]
public void set_TextWidth(double value);
    [CompilerGeneratedAttribute]
public int get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(int value);
    [CompilerGeneratedAttribute]
public NotifyingIcon get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(NotifyingIcon value);
    [CompilerGeneratedAttribute]
public NotifyingLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(NotifyingLocation value);
    [CompilerGeneratedAttribute]
public Brush get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_IconForeground();
    [CompilerGeneratedAttribute]
public void set_IconForeground(Brush value);
    [CompilerGeneratedAttribute]
public FontStyle get_FontStyle();
    [CompilerGeneratedAttribute]
public void set_FontStyle(FontStyle value);
    [CompilerGeneratedAttribute]
public FontStretch get_FontStretch();
    [CompilerGeneratedAttribute]
public void set_FontStretch(FontStretch value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public FontFamily get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(FontFamily value);
    [CompilerGeneratedAttribute]
public FontWeight get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public double get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(double value);
    [CompilerGeneratedAttribute]
public CornerRadius get_CornerRadius();
    [CompilerGeneratedAttribute]
public void set_CornerRadius(CornerRadius value);
    [CompilerGeneratedAttribute]
public Brush get_BorderBrush();
    [CompilerGeneratedAttribute]
public void set_BorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public Thickness get_BorderThickness();
    [CompilerGeneratedAttribute]
public void set_BorderThickness(Thickness value);
    [CompilerGeneratedAttribute]
public Brush get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(Brush value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalContentAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public VerticalAlignment get_VerticalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalContentAlignment(VerticalAlignment value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Closed();
    [CompilerGeneratedAttribute]
internal void set_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Click();
    [CompilerGeneratedAttribute]
internal void set_Click(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public Thickness get_ToastMargin();
    [CompilerGeneratedAttribute]
public void set_ToastMargin(Thickness value);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.OpacityFadingAnimation : object {
    private FrameworkElement element;
    private Storyboard showStoryboard;
    private Storyboard hideStoryboard;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler ShowAnimationCompleted;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventHandler HideAnimationCompleted;
    public OpacityFadingAnimation(FrameworkElement element);
    private static OpacityFadingAnimation();
    [CompilerGeneratedAttribute]
public void add_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ShowAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HideAnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HideAnimationCompleted(EventHandler value);
    public void Show();
    public void Hide();
    private void showStoryboard_Completed(object sender, EventArgs e);
    private void hideStoryboard_Completed(object sender, EventArgs e);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.PasswordBoxHelper : object {
    public static DependencyProperty ShowPasswordProperty;
    private static PasswordBoxHelper();
    public static bool GetShowPassword(DependencyObject obj);
    public static void SetShowPassword(DependencyObject obj, bool value);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.RegeditHelper : object {
    private static IRegedit Regedit;
    private static RegeditHelper();
    public static void WriteReg(string keys, long strValue);
    public static void WriteReg(string keys, string strValue);
    public static long ReadReg(string keys);
    public static bool IsKeyExit(string keys);
    public static bool DelKey(string Keys);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.RegexHelper : object {
    public static IRegex RegexBiz;
    private static RegexHelper();
    public static bool IsMobilePhone(string str);
    public static bool IsBase64String(string str);
    public static bool IsDate(string date);
    public static bool IsDate(string date, string format);
    public static bool IsDate(string date, string format, IFormatProvider provider, DateTimeStyles styles);
    public static bool IsEmail(string email);
    public static bool IsGuid(string guid);
    public static bool IsPassPort(string idCard);
    public static bool IsInt(object number);
    public static bool IsInt(string number);
    public static bool IsIP(string ip);
    public static bool IsNullOrEmpty(object data);
    public static bool IsNumber(object number);
    public static bool IsNumber(string number);
    public static bool IsUrl(string strUrl);
    public static bool IsMacAddress(string mac);
    public static string RemoveHtml(string htmlString);
    public static int Length(string str);
    public static string SubString(string str, int length);
}
public enum WPF.UI.SelectMode : Enum {
    public int value__;
    public static SelectMode Any;
    public static SelectMode ChildOnly;
    public static SelectMode Disabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.ShuttersAnimation : object {
    private FrameworkElement element;
    private PathGeometry path;
    private RectangleGeometry rectangle;
    private DispatcherTimer timer;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ShuttersDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <RectSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <InitialSize>k__BackingField;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ShuttersDirection Direction { get; public set; }
    [DefaultValueAttribute("40")]
public double RectSize { get; public set; }
    [DefaultValueAttribute("0")]
public double InitialSize { get; public set; }
    public ShuttersAnimation(FrameworkElement element);
    private static ShuttersAnimation();
    [CompilerGeneratedAttribute]
public ShuttersDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(ShuttersDirection value);
    [CompilerGeneratedAttribute]
public double get_RectSize();
    [CompilerGeneratedAttribute]
public void set_RectSize(double value);
    [CompilerGeneratedAttribute]
public double get_InitialSize();
    [CompilerGeneratedAttribute]
public void set_InitialSize(double value);
    private void timer_Tick(object sender, EventArgs e);
    public void Start();
    public void Stop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.SystemHelper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ISystem <System>k__BackingField;
    private static IComputerInfo ComputerInfo;
    private static ISystem System { get; private set; }
    private static SystemHelper();
    [CompilerGeneratedAttribute]
private static ISystem get_System();
    [CompilerGeneratedAttribute]
private static void set_System(ISystem value);
    public static string GetCpuId();
    public static string GetComputerName();
    public static string GetCpuBrand();
    public static int GetCpuCores();
    public static string GetCpuFrequency();
    public static int GetCpuLogicalProcessors();
    public static string GetCpuName();
    public static string GetDiskId();
    public static List`1<string> GetGraphicsCards();
    public static string GetMotherboardId();
    public static string GetOperatingSystem();
    public static string GetSystemId();
    public static ulong GetTotalMemory();
}
[NullableContextAttribute{660BD049-2E1B-41A0-966F-422AB0D13D0D}("1")]
[ExtensionAttribute]
[NullableAttribute{AF4A5C24-658A-4492-81F5-C39C32D4E83A}("0")]
public static class WPF.UI.TaskThreading.TaskExtensions : object {
    private static TaskExtensions();
    [ExtensionAttribute]
[AsyncStateMachineAttribute("WPF.UI.TaskThreading.TaskExtensions/<TimeoutAfter>d__0`1")]
[DebuggerStepThroughAttribute]
public static Task`1<TResult> TimeoutAfter(Task`1<TResult> task, TimeSpan timeout);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("WPF.UI.TaskThreading.TaskExtensions/<TimeoutAfter>d__1")]
public static Task TimeoutAfter(Task task, TimeSpan timeout);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("WPF.UI.TaskThreading.TaskExtensions/<SafeFireAndForget>d__2")]
public static void SafeFireAndForget(Task task, Action onCompleted, Action`1<Exception> onError);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public static class WPF.UI.Test.ButtonHelper : object {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty DisabledBackgroundProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty MouseOverForegroundProperty;
    public static DependencyProperty CheckedForegroundProperty;
    public static DependencyProperty PressedForegroundProperty;
    public static DependencyProperty DisabledForegroundProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty HorizontalAlignmentProperty;
    public static DependencyProperty MouseOverHorizontalAlignmentProperty;
    public static DependencyProperty CheckedHorizontalAlignmentProperty;
    public static DependencyProperty VerticalAlignmentProperty;
    public static DependencyProperty MouseOverVerticalAlignmentProperty;
    public static DependencyProperty CheckedVerticalAlignmentProperty;
    public static DependencyProperty WidthProperty;
    public static DependencyProperty MouseOverWidthProperty;
    public static DependencyProperty CheckedWidthProperty;
    public static DependencyProperty HeightProperty;
    public static DependencyProperty MouseOverHeightProperty;
    public static DependencyProperty CheckedHeightProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty MouseOverCornerRadiusProperty;
    public static DependencyProperty PressedCornerRadiusProperty;
    public static DependencyProperty DisabledCornerRadiusProperty;
    public static DependencyProperty MarginProperty;
    public static DependencyProperty MouseOverMarginProperty;
    public static DependencyProperty CheckedMarginProperty;
    public static DependencyProperty DisabledMarginProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty MouseOverPaddingProperty;
    public static DependencyProperty CheckedPaddingProperty;
    public static DependencyProperty DisabledPaddingProperty;
    public static DependencyProperty TagProperty;
    public static DependencyProperty IconFontProperty;
    public static DependencyProperty MouseOverIconFontProperty;
    public static DependencyProperty CheckedIconFontProperty;
    public static DependencyProperty PressedIconFontProperty;
    public static DependencyProperty DisabledIconFontProperty;
    public static DependencyProperty IconFontWidthProperty;
    public static DependencyProperty IconFontHeightProperty;
    public static DependencyProperty IconFontMarginProperty;
    public static DependencyProperty ButtonStyleProperty;
    private static ButtonHelper();
    public static void SetBackground(DependencyObject element, Brush value);
    public static Brush GetBackground(DependencyObject element);
    public static void SetMouseOverBackground(DependencyObject element, Brush value);
    public static Brush GetMouseOverBackground(DependencyObject element);
    public static void SetCheckedBackground(DependencyObject element, Brush value);
    public static Brush GetCheckedBackground(DependencyObject element);
    public static void SetPressedBackground(DependencyObject element, Brush value);
    public static Brush GetPressedBackground(DependencyObject element);
    public static void SetDisabledBackground(DependencyObject element, Brush value);
    public static Brush GetDisabledBackground(DependencyObject element);
    public static void SetForeground(DependencyObject element, Brush value);
    public static Brush GetForeground(DependencyObject element);
    public static void SetMouseOverForeground(DependencyObject element, Brush value);
    public static Brush GetMouseOverForeground(DependencyObject element);
    public static void SetCheckedForeground(DependencyObject element, Brush value);
    public static Brush GetCheckedForeground(DependencyObject element);
    public static void SetPressedForeground(DependencyObject element, Brush value);
    public static Brush GetPressedForeground(DependencyObject element);
    public static void SetDisabledForeground(DependencyObject element, Brush value);
    public static Brush GetDisabledForeground(DependencyObject element);
    public static void SetBorderThickness(DependencyObject element, Thickness value);
    public static Thickness GetBorderThickness(DependencyObject element);
    public static void SetHorizontalAlignmentBrush(DependencyObject element, HorizontalAlignment value);
    public static HorizontalAlignment GetHorizontalAlignment(DependencyObject element);
    public static void SetMouseOverHorizontalAlignmentBrush(DependencyObject element, HorizontalAlignment value);
    public static HorizontalAlignment GetMouseOverHorizontalAlignment(DependencyObject element);
    public static void SetCheckedHorizontalAlignmentBrush(DependencyObject element, HorizontalAlignment value);
    public static HorizontalAlignment GetCheckedHorizontalAlignment(DependencyObject element);
    public static void SetVerticalAlignmentBrush(DependencyObject element, VerticalAlignment value);
    public static VerticalAlignment GetVerticalAlignment(DependencyObject element);
    public static void SetMouseOverVerticalAlignmentBrush(DependencyObject element, VerticalAlignment value);
    public static VerticalAlignment GetMouseOverVerticalAlignment(DependencyObject element);
    public static void SetCheckedVerticalAlignmentBrush(DependencyObject element, VerticalAlignment value);
    public static VerticalAlignment GetCheckedVerticalAlignment(DependencyObject element);
    public static void SetWidth(DependencyObject element, double value);
    public static double GetWidth(DependencyObject element);
    public static void SetMouseOverWidth(DependencyObject element, double value);
    public static double GetMouseOverWidth(DependencyObject element);
    public static void SetCheckedWidth(DependencyObject element, double value);
    public static double GetCheckedWidth(DependencyObject element);
    public static void SetHeight(DependencyObject element, double value);
    public static double GetHeight(DependencyObject element);
    public static void SetMouseOverHeight(DependencyObject element, double value);
    public static double GetMouseOverHeight(DependencyObject element);
    public static void SetCheckedHeight(DependencyObject element, double value);
    public static double GetCheckedHeight(DependencyObject element);
    public static void SetCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetCornerRadius(DependencyObject element);
    public static void SetMouseOverCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetMouseOverCornerRadius(DependencyObject element);
    public static void SetPressedCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetPressedCornerRadius(DependencyObject element);
    public static void SetDisabledCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetDisabledCornerRadius(DependencyObject element);
    public static void SetMargin(DependencyObject element, Thickness value);
    public static Thickness GetMargin(DependencyObject element);
    public static void SetMouseOverMargin(DependencyObject element, Thickness value);
    public static Thickness GetMouseOverMargin(DependencyObject element);
    public static void SetCheckedMargin(DependencyObject element, Thickness value);
    public static Thickness GetCheckedMargin(DependencyObject element);
    public static void SetDisabledMargin(DependencyObject element, Thickness value);
    public static Thickness GetDisabledMargin(DependencyObject element);
    public static void SetPadding(DependencyObject element, Thickness value);
    public static Thickness GetPadding(DependencyObject element);
    public static void SetMouseOverPadding(DependencyObject element, Thickness value);
    public static Thickness GetMouseOverPadding(DependencyObject element);
    public static void SetCheckedPadding(DependencyObject element, Thickness value);
    public static Thickness GetCheckedPadding(DependencyObject element);
    public static void SetDisabledPadding(DependencyObject element, Thickness value);
    public static Thickness GetDisabledPadding(DependencyObject element);
    public static void SetTag(DependencyObject element, object value);
    public static object GetTag(DependencyObject element);
    public static void SetIconFont(DependencyObject element, object value);
    public static object GetIconFont(DependencyObject element);
    public static void SetMouseOverIconFont(DependencyObject element, object value);
    public static object GetMouseOverIconFont(DependencyObject element);
    public static void SetCheckedIconFont(DependencyObject element, object value);
    public static object GetCheckedIconFont(DependencyObject element);
    public static void SetPressedIconFont(DependencyObject element, object value);
    public static object GetPressedIconFont(DependencyObject element);
    public static void SetDisabledIconFont(DependencyObject element, object value);
    public static object GetDisabledIconFont(DependencyObject element);
    public static void SetIconFontWidth(DependencyObject element, double value);
    public static double GetIconFontWidth(DependencyObject element);
    public static void SetIconFontHeight(DependencyObject element, double value);
    public static double GetIconFontHeight(DependencyObject element);
    public static void SetIconFontMargin(DependencyObject element, Thickness value);
    public static Thickness GetIconFontMargin(DependencyObject element);
    public static ButtonStyle GetButtonStyle(DependencyObject obj);
    public static void SetButtonStyle(DependencyObject obj, ButtonStyle value);
}
public enum WPF.UI.Test.ButtonStyle : Enum {
    public int value__;
    public static ButtonStyle Standard;
    public static ButtonStyle Hollow;
    public static ButtonStyle Outline;
    public static ButtonStyle Link;
}
public class WPF.UI.TextBoxHelper : object {
    private static TextBoxHelper();
}
public enum WPF.UI.TreeViewStyle : Enum {
    public int value__;
    public static TreeViewStyle Standard;
    public static TreeViewStyle Classic;
    public static TreeViewStyle Modern;
    public static TreeViewStyle Chain;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.WpfScreen : object {
    private Screen screen;
    public static WpfScreen Primary { get; }
    public Rect DeviceBounds { get; }
    public Rect WorkingArea { get; }
    public bool IsPrimary { get; }
    public string DeviceName { get; }
    internal WpfScreen(Screen screen);
    private static WpfScreen();
    [IteratorStateMachineAttribute("WPF.UI.WpfScreen/<AllScreens>d__0")]
public static IEnumerable`1<WpfScreen> AllScreens();
    public static WpfScreen GetScreenFrom(Window window);
    public static WpfScreen GetScreenFrom(Point point);
    public static WpfScreen get_Primary();
    public Rect get_DeviceBounds();
    public Rect get_WorkingArea();
    private Rect GetRect(Rectangle value);
    public bool get_IsPrimary();
    public string get_DeviceName();
}
[ExtensionAttribute]
public static class WPF.UI.WpfScreenExtensions : object {
    private static WpfScreenExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Rect GetCurrentScreenWorkArea(Window window);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class WPF.UI.WPFUI : object {
    public static DependencyProperty DropShadowEffectColorProperty;
    public static DependencyProperty MouseOverDropShadowEffectColorProperty;
    public static DependencyProperty CheckedDropShadowEffectColorProperty;
    public static DependencyProperty DropShadowEffectDepthProperty;
    public static DependencyProperty MouseOverDropShadowEffectDepthProperty;
    public static DependencyProperty CheckedDropShadowEffectDepthProperty;
    public static DependencyProperty DropShadowEffectBlurRadiusProperty;
    public static DependencyProperty MouseOverDropShadowEffectBlurRadiusProperty;
    public static DependencyProperty CheckedDropShadowEffectBlurRadiusProperty;
    public static DependencyProperty DropShadowEffectOpacityProperty;
    public static DependencyProperty MouseOverDropShadowEffectOpacityProperty;
    public static DependencyProperty CheckedDropShadowEffectOpacityProperty;
    public static DependencyProperty DropShadowEffectDirectionProperty;
    public static DependencyProperty MouseOverDropShadowEffectDirectionProperty;
    public static DependencyProperty CheckedDropShadowEffectDirectionProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty DisabledBackgroundProperty;
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty DisabledBorderBrushProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty MouseOverForegroundProperty;
    public static DependencyProperty CheckedForegroundProperty;
    public static DependencyProperty PressedForegroundProperty;
    public static DependencyProperty DisabledForegroundProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty HorizontalAlignmentProperty;
    public static DependencyProperty MouseOverHorizontalAlignmentProperty;
    public static DependencyProperty CheckedHorizontalAlignmentProperty;
    public static DependencyProperty VerticalAlignmentProperty;
    public static DependencyProperty MouseOverVerticalAlignmentProperty;
    public static DependencyProperty CheckedVerticalAlignmentProperty;
    public static DependencyProperty ImageBrushProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty MouseOverIconProperty;
    public static DependencyProperty CheckedIconProperty;
    public static DependencyProperty PressedIconProperty;
    public static DependencyProperty DisabledIconProperty;
    public static DependencyProperty IconWidthProperty;
    public static DependencyProperty IconHeightProperty;
    public static DependencyProperty IconMarginProperty;
    public static DependencyProperty WidthProperty;
    public static DependencyProperty MouseOverWidthProperty;
    public static DependencyProperty CheckedWidthProperty;
    public static DependencyProperty HeightProperty;
    public static DependencyProperty MouseOverHeightProperty;
    public static DependencyProperty CheckedHeightProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty MouseOverCornerRadiusProperty;
    public static DependencyProperty PressedCornerRadiusProperty;
    public static DependencyProperty DisabledCornerRadiusProperty;
    public static DependencyProperty MarginProperty;
    public static DependencyProperty MouseOverMarginProperty;
    public static DependencyProperty CheckedMarginProperty;
    public static DependencyProperty DisabledMarginProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty MouseOverPaddingProperty;
    public static DependencyProperty CheckedPaddingProperty;
    public static DependencyProperty DisabledPaddingProperty;
    public static DependencyProperty TagProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty ToolTipProperty;
    public static DependencyProperty MouseOverToolTipProperty;
    public static DependencyProperty CheckedToolTipProperty;
    public static DependencyProperty PressedToolTipProperty;
    public static DependencyProperty DisabledToolTipProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty MouseOverFontSizeProperty;
    public static DependencyProperty CheckedFontSizeProperty;
    public static DependencyProperty PressedFontSizeProperty;
    public static DependencyProperty DisabledFontSizeProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty MouseOverTextProperty;
    public static DependencyProperty CheckedTextProperty;
    public static DependencyProperty PressedTextProperty;
    public static DependencyProperty DisabledTextProperty;
    public static DependencyProperty ContentProperty;
    public static DependencyProperty MouseOverContentProperty;
    public static DependencyProperty CheckedContentProperty;
    public static DependencyProperty PressedContentProperty;
    public static DependencyProperty DisabledContentProperty;
    public static DependencyProperty OpacityProperty;
    public static DependencyProperty MouseOverOpacityProperty;
    public static DependencyProperty CheckedOpacityProperty;
    public static DependencyProperty OpacityContentProperty;
    public static DependencyProperty DisabledOpacityProperty;
    public static DependencyProperty Tag1Property;
    public static DependencyProperty Tag2Property;
    public static DependencyProperty Tag3Property;
    public static DependencyProperty Tag4Property;
    public static DependencyProperty Tag5Property;
    public static DependencyProperty WatermarkProperty;
    private static WPFUI();
    public static void SetDropShadowEffectColor(DependencyObject element, Color value);
    public static Color GetDropShadowEffectColor(DependencyObject element);
    public static void SetMouseOverDropShadowEffectColor(DependencyObject element, Color value);
    public static Color GetMouseOverDropShadowEffectColor(DependencyObject element);
    public static void SetCheckedDropShadowEffectColor(DependencyObject element, Color value);
    public static Color GetCheckedDropShadowEffectColor(DependencyObject element);
    public static void SetDropShadowEffectDepth(DependencyObject element, double value);
    public static double GetDropShadowEffectDepth(DependencyObject element);
    public static void SetMouseOverDropShadowEffectDepth(DependencyObject element, double value);
    public static double GetMouseOverDropShadowEffectDepth(DependencyObject element);
    public static void SetCheckedDropShadowEffectDepth(DependencyObject element, double value);
    public static double GetCheckedDropShadowEffectDepth(DependencyObject element);
    public static void SetDropShadowEffectBlurRadius(DependencyObject element, double value);
    public static double GetDropShadowEffectBlurRadius(DependencyObject element);
    public static void SetMouseOverDropShadowEffectBlurRadius(DependencyObject element, double value);
    public static double GetMouseOverDropShadowEffectBlurRadius(DependencyObject element);
    public static void SetCheckedDropShadowEffectBlurRadius(DependencyObject element, double value);
    public static double GetCheckedDropShadowEffectBlurRadius(DependencyObject element);
    public static void SetDropShadowEffectOpacity(DependencyObject element, double value);
    public static double GetDropShadowEffectOpacity(DependencyObject element);
    public static void SetMouseOverDropShadowEffectOpacity(DependencyObject element, double value);
    public static double GetMouseOverDropShadowEffectOpacity(DependencyObject element);
    public static void SetCheckedDropShadowEffectOpacity(DependencyObject element, double value);
    public static double GetCheckedDropShadowEffectOpacity(DependencyObject element);
    public static void SetDropShadowEffectDirection(DependencyObject element, double value);
    public static double GetDropShadowEffectDirection(DependencyObject element);
    public static void SetMouseOverDropShadowEffectDirection(DependencyObject element, double value);
    public static double GetMouseOverDropShadowEffectDirection(DependencyObject element);
    public static void SetCheckedDropShadowEffectDirection(DependencyObject element, double value);
    public static double GetCheckedDropShadowEffectDirection(DependencyObject element);
    public static void SetBackground(DependencyObject element, Brush value);
    public static Brush GetBackground(DependencyObject element);
    public static void SetMouseOverBackground(DependencyObject element, Brush value);
    public static Brush GetMouseOverBackground(DependencyObject element);
    public static void SetCheckedBackground(DependencyObject element, Brush value);
    public static Brush GetCheckedBackground(DependencyObject element);
    public static void SetPressedBackground(DependencyObject element, Brush value);
    public static Brush GetPressedBackground(DependencyObject element);
    public static void SetDisabledBackground(DependencyObject element, Brush value);
    public static Brush GetDisabledBackground(DependencyObject element);
    public static void SetBorderBrush(DependencyObject element, Brush value);
    public static Brush GetBorderBrush(DependencyObject element);
    public static void SetMouseOverBorderBrush(DependencyObject element, Brush value);
    public static Brush GetMouseOverBorderBrush(DependencyObject element);
    public static void SetCheckedBorderBrush(DependencyObject element, Brush value);
    public static Brush GetCheckedBorderBrush(DependencyObject element);
    public static void SetPressedBorderBrush(DependencyObject element, Brush value);
    public static Brush GetPressedBorderBrush(DependencyObject element);
    public static void SetDisabledBorderBrush(DependencyObject element, Brush value);
    public static Brush GetDisabledBorderBrush(DependencyObject element);
    public static void SetForeground(DependencyObject element, Brush value);
    public static Brush GetForeground(DependencyObject element);
    public static void SetMouseOverForeground(DependencyObject element, Brush value);
    public static Brush GetMouseOverForeground(DependencyObject element);
    public static void SetCheckedForeground(DependencyObject element, Brush value);
    public static Brush GetCheckedForeground(DependencyObject element);
    public static void SetPressedForeground(DependencyObject element, Brush value);
    public static Brush GetPressedForeground(DependencyObject element);
    public static void SetDisabledForeground(DependencyObject element, Brush value);
    public static Brush GetDisabledForeground(DependencyObject element);
    public static void SetBorderThickness(DependencyObject element, Thickness value);
    public static Thickness GetBorderThickness(DependencyObject element);
    public static void SetHorizontalAlignmentBrush(DependencyObject element, HorizontalAlignment value);
    public static HorizontalAlignment GetHorizontalAlignment(DependencyObject element);
    public static void SetMouseOverHorizontalAlignmentBrush(DependencyObject element, HorizontalAlignment value);
    public static HorizontalAlignment GetMouseOverHorizontalAlignment(DependencyObject element);
    public static void SetCheckedHorizontalAlignmentBrush(DependencyObject element, HorizontalAlignment value);
    public static HorizontalAlignment GetCheckedHorizontalAlignment(DependencyObject element);
    public static void SetVerticalAlignmentBrush(DependencyObject element, VerticalAlignment value);
    public static VerticalAlignment GetVerticalAlignment(DependencyObject element);
    public static void SetMouseOverVerticalAlignmentBrush(DependencyObject element, VerticalAlignment value);
    public static VerticalAlignment GetMouseOverVerticalAlignment(DependencyObject element);
    public static void SetCheckedVerticalAlignmentBrush(DependencyObject element, VerticalAlignment value);
    public static VerticalAlignment GetCheckedVerticalAlignment(DependencyObject element);
    public static void SetImageBrush(DependencyObject element, ImageSource value);
    public static ImageSource GetImageBrush(DependencyObject element);
    public static void SetIcon(DependencyObject element, ImageSource value);
    public static ImageSource GetIcon(DependencyObject element);
    public static void SetMouseOverIcon(DependencyObject element, ImageSource value);
    public static ImageSource GetMouseOverIcon(DependencyObject element);
    public static void SetCheckedIcon(DependencyObject element, ImageSource value);
    public static ImageSource GetCheckedIcon(DependencyObject element);
    public static void SetPressedIcon(DependencyObject element, ImageSource value);
    public static ImageSource GetPressedIcon(DependencyObject element);
    public static void SetDisabledIcon(DependencyObject element, ImageSource value);
    public static ImageSource GetDisabledIcon(DependencyObject element);
    public static void SetIconWidth(DependencyObject element, double value);
    public static double GetIconWidth(DependencyObject element);
    public static void SetIconHeight(DependencyObject element, double value);
    public static double GetIconHeight(DependencyObject element);
    public static void SetIconMargin(DependencyObject element, Thickness value);
    public static Thickness GetIconMargin(DependencyObject element);
    public static void SetWidth(DependencyObject element, double value);
    public static double GetWidth(DependencyObject element);
    public static void SetMouseOverWidth(DependencyObject element, double value);
    public static double GetMouseOverWidth(DependencyObject element);
    public static void SetCheckedWidth(DependencyObject element, double value);
    public static double GetCheckedWidth(DependencyObject element);
    public static void SetHeight(DependencyObject element, double value);
    public static double GetHeight(DependencyObject element);
    public static void SetMouseOverHeight(DependencyObject element, double value);
    public static double GetMouseOverHeight(DependencyObject element);
    public static void SetCheckedHeight(DependencyObject element, double value);
    public static double GetCheckedHeight(DependencyObject element);
    public static void SetCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetCornerRadius(DependencyObject element);
    public static void SetMouseOverCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetMouseOverCornerRadius(DependencyObject element);
    public static void SetPressedCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetPressedCornerRadius(DependencyObject element);
    public static void SetDisabledCornerRadius(DependencyObject element, CornerRadius value);
    public static CornerRadius GetDisabledCornerRadius(DependencyObject element);
    public static void SetMargin(DependencyObject element, Thickness value);
    public static Thickness GetMargin(DependencyObject element);
    public static void SetMouseOverMargin(DependencyObject element, Thickness value);
    public static Thickness GetMouseOverMargin(DependencyObject element);
    public static void SetCheckedMargin(DependencyObject element, Thickness value);
    public static Thickness GetCheckedMargin(DependencyObject element);
    public static void SetDisabledMargin(DependencyObject element, Thickness value);
    public static Thickness GetDisabledMargin(DependencyObject element);
    public static void SetPadding(DependencyObject element, Thickness value);
    public static Thickness GetPadding(DependencyObject element);
    public static void SetMouseOverPadding(DependencyObject element, Thickness value);
    public static Thickness GetMouseOverPadding(DependencyObject element);
    public static void SetCheckedPadding(DependencyObject element, Thickness value);
    public static Thickness GetCheckedPadding(DependencyObject element);
    public static void SetDisabledPadding(DependencyObject element, Thickness value);
    public static Thickness GetDisabledPadding(DependencyObject element);
    public static void SetTag(DependencyObject element, object value);
    public static object GetTag(DependencyObject element);
    public static void SetTitle(DependencyObject element, string value);
    public static string GetTitle(DependencyObject element);
    public static void SetToolTip(DependencyObject element, object value);
    public static object GetToolTip(DependencyObject element);
    public static void SetMouseOverToolTip(DependencyObject element, object value);
    public static object GetMouseOverToolTip(DependencyObject element);
    public static void SetCheckedToolTip(DependencyObject element, object value);
    public static object GetCheckedToolTip(DependencyObject element);
    public static void SetPressedToolTip(DependencyObject element, object value);
    public static object GetPressedToolTip(DependencyObject element);
    public static void SetDisabledToolTip(DependencyObject element, object value);
    public static object GetDisabledToolTip(DependencyObject element);
    public static void SetFontSize(DependencyObject element, double value);
    public static double GetFontSize(DependencyObject element);
    public static void SetMouseOverFontSize(DependencyObject element, double value);
    public static double GetMouseOverFontSize(DependencyObject element);
    public static void SetCheckedFontSize(DependencyObject element, double value);
    public static double GetCheckedFontSize(DependencyObject element);
    public static void SetPressedFontSize(DependencyObject element, double value);
    public static double GetPressedFontSize(DependencyObject element);
    public static void SetDisabledFontSize(DependencyObject element, double value);
    public static double GetDisabledFontSize(DependencyObject element);
    public static FontWeight GetFontWeight(DependencyObject obj);
    public static void SetFontWeight(DependencyObject obj, FontWeight value);
    public static FontFamily GetFontFamily(DependencyObject obj);
    public static void SetFontFamily(DependencyObject obj, FontFamily value);
    public static void SetText(DependencyObject element, object value);
    public static object GetText(DependencyObject element);
    public static void SetMouseOverText(DependencyObject element, object value);
    public static object GetMouseOverText(DependencyObject element);
    public static void SetCheckedText(DependencyObject element, object value);
    public static object GetCheckedText(DependencyObject element);
    public static void SetPressedText(DependencyObject element, object value);
    public static object GetPressedText(DependencyObject element);
    public static void SetDisabledText(DependencyObject element, object value);
    public static object GetDisabledText(DependencyObject element);
    public static void SetContent(DependencyObject element, object value);
    public static object GetContent(DependencyObject element);
    public static void SetMouseOverContent(DependencyObject element, object value);
    public static object GetMouseOverContent(DependencyObject element);
    public static void SetCheckedContent(DependencyObject element, object value);
    public static object GetCheckedContent(DependencyObject element);
    public static void SetPressedContent(DependencyObject element, object value);
    public static object GetPressedContent(DependencyObject element);
    public static void SetDisabledContent(DependencyObject element, object value);
    public static object GetDisabledContent(DependencyObject element);
    public static void SetOpacity(DependencyObject element, double value);
    public static double GetOpacity(DependencyObject element);
    public static void SetMouseOverOpacity(DependencyObject element, double value);
    public static double GetMouseOverOpacity(DependencyObject element);
    public static void SetCheckedOpacity(DependencyObject element, double value);
    public static double GetCheckedOpacity(DependencyObject element);
    public static void SetOpacityContent(DependencyObject element, object value);
    public static object GetOpacityContent(DependencyObject element);
    public static void SetDisabledOpacity(DependencyObject element, object value);
    public static object GetDisabledOpacity(DependencyObject element);
    public static object GetTag1(DependencyObject obj);
    public static void SetTag1(DependencyObject obj, object value);
    public static object GetTag2(DependencyObject obj);
    public static void SetTag2(DependencyObject obj, object value);
    public static object GetTag3(DependencyObject obj);
    public static void SetTag3(DependencyObject obj, object value);
    public static object GetTag4(DependencyObject obj);
    public static void SetTag4(DependencyObject obj, object value);
    public static object GetTag5(DependencyObject obj);
    public static void SetTag5(DependencyObject obj, object value);
    public static void SetWatermark(DependencyObject element, string value);
    public static string GetWatermark(DependencyObject element);
}
public class WPF.UI.WPFUIBase : object {
    private static WPFUIBase();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class WPF.UI.WPFUIWindow : Window {
    private bool _closeHandler;
    public static DependencyProperty IsMaskVisibleProperty;
    public static DependencyProperty MaskBrushProperty;
    public static DependencyProperty DisableForceClosingProperty;
    internal static DependencyProperty CloseCommandProperty;
    internal static DependencyProperty MinCommandProperty;
    internal static DependencyProperty MaxCommandProperty;
    public bool IsMaskVisible { get; public set; }
    public Brush MaskBrush { get; public set; }
    public bool DisableForceClosing { get; public set; }
    internal ICommand CloseCommand { get; internal set; }
    internal ICommand MinCommand { get; internal set; }
    internal ICommand MaxCommand { get; internal set; }
    private static WPFUIWindow();
    public bool get_IsMaskVisible();
    public void set_IsMaskVisible(bool value);
    public Brush get_MaskBrush();
    public void set_MaskBrush(Brush value);
    public bool get_DisableForceClosing();
    public void set_DisableForceClosing(bool value);
    internal ICommand get_CloseCommand();
    internal void set_CloseCommand(ICommand value);
    internal ICommand get_MinCommand();
    internal void set_MinCommand(ICommand value);
    internal ICommand get_MaxCommand();
    internal void set_MaxCommand(ICommand value);
    private void WPFUIWindow_Loaded(object sender, RoutedEventArgs e);
    protected virtual void OnContentRendered(EventArgs e);
    private void GrdTitle_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    public void ForceClose();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.WPFUIWindowCaption : object {
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty HeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty MinimizeButtonStyleProperty;
    public static DependencyProperty MaximizeButtonStyleProperty;
    public static DependencyProperty CloseButtonStyleProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty ExtendControlProperty;
    public static DependencyProperty DisableCloseButtonProperty;
    public static DependencyProperty HideBasicButtonsProperty;
    private static WPFUIWindowCaption();
    public static Thickness GetPadding(DependencyObject obj);
    public static void SetPadding(DependencyObject obj, Thickness value);
    public static double GetHeight(DependencyObject obj);
    public static void SetHeight(DependencyObject obj, double value);
    public static Brush GetForeground(DependencyObject obj);
    public static void SetForeground(DependencyObject obj, Brush value);
    public static Brush GetBackground(DependencyObject obj);
    public static void SetBackground(DependencyObject obj, Brush value);
    public static Style GetMinimizeButtonStyle(DependencyObject obj);
    public static void SetMinimizeButtonStyle(DependencyObject obj, Style value);
    public static Style GetMaximizeButtonStyle(DependencyObject obj);
    public static void SetMaximizeButtonStyle(DependencyObject obj, Style value);
    public static Style GetCloseButtonStyle(DependencyObject obj);
    public static void SetCloseButtonStyle(DependencyObject obj, Style value);
    public static object GetHeader(DependencyObject obj);
    public static void SetHeader(DependencyObject obj, object value);
    public static UIElement GetExtendControl(DependencyObject obj);
    public static void SetExtendControl(DependencyObject obj, UIElement value);
    public static bool GetDisableCloseButton(DependencyObject obj);
    public static void SetDisableCloseButton(DependencyObject obj, bool value);
    public static bool GetHideBasicButtons(DependencyObject obj);
    public static void SetHideBasicButtons(DependencyObject obj, bool value);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.XMLProcess : object {
    private string _XMLPath;
    public string XMLPath { get; }
    public XMLProcess(string strPath);
    private static XMLProcess();
    public string get_XMLPath();
    private XmlDocument XMLLoad();
    private static XmlDocument XMLLoad(string strPath);
    private static string GetXmlFullPath(string strPath);
    public string Read(string node);
    public static string Read(string path, string node);
    public static string Read(string path, string node, string attribute);
    public String[] ReadAllChildallValue(string node);
    public XmlNodeList ReadAllChild(string node);
    public DataView GetDataViewByXml(string strWhere, string strSort);
    public DataSet GetDataSetByXml(string strXmlPath);
    public void Insert(string path, string node, string element, string attribute, string value);
    public void Insert(string path, string node, string element, String[][] strList);
    public bool WriteXmlByDataSet(string strXmlPath, String[] Columns, String[] ColumnValue);
    public void Update(string node, string value);
    public static void Update(string path, string node, string value);
    public static void Update(string path, string node, string attribute, string value);
    public static bool UpdateXmlRow(string strXmlPath, String[] Columns, String[] ColumnValue, string strWhereColumnName, string strWhereColumnValue);
    public static void Delete(string path, string node);
    public static void Delete(string path, string node, string attribute);
    public static bool DeleteXmlAllRows(string strXmlPath);
    public static bool DeleteXmlRowByIndex(string strXmlPath, int iDeleteRow);
    public static bool DeleteXmlRows(string strXmlPath, string strColumn, String[] ColumnValue);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class WPF.UI.XmlReadWriteHelper : object {
    private string filePath;
    public XmlReadWriteHelper(string filePath);
    private static XmlReadWriteHelper();
    public bool CreateXmlFile(string path);
    public bool DeleteXmlFile(string path);
    public string ReadXml(string path);
    public bool ModifyXml(string nodePath, string newValue, string path);
    public bool DeleteXmlNode(string nodePath, string path);
}
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    private static GeneratedInternalTypeHelper();
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
