[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class X.PagedList.BasePagedList`1 : PagedListMetaData {
    protected List`1<T> Subset;
    public static int DefaultPageSize;
    public T Item { get; }
    public int Count { get; }
    protected internal BasePagedList`1(int pageNumber, int pageSize, int totalItemCount);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T get_Item(int index);
    public virtual int get_Count();
    [ObsoleteAttribute("This method will be removed in future versions")]
public sealed virtual PagedListMetaData GetMetaData();
}
public interface X.PagedList.IPagedList {
    public int PageCount { get; }
    public int TotalItemCount { get; }
    public int PageNumber { get; }
    public int PageSize { get; }
    public bool HasPreviousPage { get; }
    public bool HasNextPage { get; }
    public bool IsFirstPage { get; }
    public bool IsLastPage { get; }
    public int FirstItemOnPage { get; }
    public int LastItemOnPage { get; }
    public abstract virtual int get_PageCount();
    public abstract virtual int get_TotalItemCount();
    public abstract virtual int get_PageNumber();
    public abstract virtual int get_PageSize();
    public abstract virtual bool get_HasPreviousPage();
    public abstract virtual bool get_HasNextPage();
    public abstract virtual bool get_IsFirstPage();
    public abstract virtual bool get_IsLastPage();
    public abstract virtual int get_FirstItemOnPage();
    public abstract virtual int get_LastItemOnPage();
}
public interface X.PagedList.IPagedList`1 {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This method will be removed in future versions")]
public abstract virtual PagedListMetaData GetMetaData();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class X.PagedList.PagedList`1 : BasePagedList`1<T> {
    public PagedList`1(IQueryable`1<T> superset, int pageNumber, int pageSize);
    public PagedList`1(IEnumerable`1<T> superset, int pageNumber, int pageSize);
    public PagedList`1(IPagedList pagedList, IEnumerable`1<T> collection);
    public static PagedList`1<T> Empty(int pageSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class X.PagedList.PagedList`2 : BasePagedList`1<T> {
    public PagedList`2(IQueryable`1<T> superset, Expression`1<Func`2<T, TKey>> keySelectorExpression, int pageNumber, int pageSize);
    public PagedList`2(IEnumerable`1<T> superset, Func`2<T, TKey> keySelectorMethod, int pageNumber, int pageSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class X.PagedList.PagedListExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Split(IEnumerable`1<T> superset, int numberOfPages);
    [IteratorStateMachineAttribute("X.PagedList.PagedListExtensions/<Partition>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Partition(IEnumerable`1<T> superset, int pageSize);
    [ExtensionAttribute]
public static IPagedList`1<TResult> Select(IPagedList`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IEnumerable`1<T> superset);
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IEnumerable`1<T> superset, int pageNumber, int pageSize);
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IEnumerable`1<T> superset, int pageNumber, int pageSize, Nullable`1<int> totalSetCount);
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IEnumerable`1<T> superset, Expression`1<Func`2<T, TKey>> keySelector, int pageNumber, int pageSize);
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IQueryable`1<T> superset, int pageNumber, int pageSize, Nullable`1<int> totalSetCount);
    [ExtensionAttribute]
public static IPagedList`1<T> ToPagedList(IQueryable`1<T> superset, Expression`1<Func`2<T, TKey>> keySelector, int pageNumber, int pageSize);
}
[ObsoleteAttribute("This class will be removed in future versions")]
public class X.PagedList.PagedListMetaData : object {
    [CompilerGeneratedAttribute]
private int <PageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPreviousPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNextPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirstPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstItemOnPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastItemOnPage>k__BackingField;
    public int PageCount { get; protected set; }
    public int TotalItemCount { get; protected set; }
    public int PageNumber { get; protected set; }
    public int PageSize { get; protected set; }
    public bool HasPreviousPage { get; protected set; }
    public bool HasNextPage { get; protected set; }
    public bool IsFirstPage { get; protected set; }
    public bool IsLastPage { get; protected set; }
    public int FirstItemOnPage { get; protected set; }
    public int LastItemOnPage { get; protected set; }
    [NullableContextAttribute("1")]
public PagedListMetaData(IPagedList pagedList);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageCount();
    [CompilerGeneratedAttribute]
protected void set_PageCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalItemCount();
    [CompilerGeneratedAttribute]
protected void set_TotalItemCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageNumber();
    [CompilerGeneratedAttribute]
protected void set_PageNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageSize();
    [CompilerGeneratedAttribute]
protected void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasPreviousPage();
    [CompilerGeneratedAttribute]
protected void set_HasPreviousPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasNextPage();
    [CompilerGeneratedAttribute]
protected void set_HasNextPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFirstPage();
    [CompilerGeneratedAttribute]
protected void set_IsFirstPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLastPage();
    [CompilerGeneratedAttribute]
protected void set_IsLastPage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FirstItemOnPage();
    [CompilerGeneratedAttribute]
protected void set_FirstItemOnPage(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LastItemOnPage();
    [CompilerGeneratedAttribute]
protected void set_LastItemOnPage(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class X.PagedList.StaticPagedList`1 : BasePagedList`1<T> {
    public StaticPagedList`1(IEnumerable`1<T> subset, IPagedList metaData);
    public StaticPagedList`1(IEnumerable`1<T> subset, int pageNumber, int pageSize, int totalItemCount);
    public static StaticPagedList`1<T> Empty(int pageSize);
}
