[ExtensionAttribute]
public static class XAct.AppDomainExtensions : object {
    private static string _appDir;
    private static ITracingService TracingService { get; }
    public static string BaseDir { get; }
    public static InitializeLibraryBindingsResults RegisterBindings(bool performPreScan, Action`1<IBindingDescriptor> optionalOnErrorBindingCallback, Action`1<IBindingDescriptorResult> optionalPostBindingCallback, IEnumerable`1<IBindingDescriptorBase> servicesToRegisterBeforeXActLibServices);
    [ExtensionAttribute]
public static void RegisterBindings(AppDomain appDomain, InitializeLibraryBindingsResults& bindingResults, bool performPreScan, Action`1<IBindingDescriptor> optionalOnErrorBindingCallback, Action`1<IBindingDescriptorResult> optionalPostBindingCallback, IEnumerable`1<IBindingDescriptorBase> servicesToRegisterBeforeXActLibServices);
    [ExtensionAttribute]
public static IBindingDescriptor[] ScanForDefaultBindingDescriptors(AppDomain appDomain, BindingScanResults& bindingScanResults, IBindingDescriptor[] dependenciesToRegisterFirst, bool skipDuplicates);
    private static ITracingService get_TracingService();
    public static string get_BaseDir();
    [ExtensionAttribute]
public static Assembly[] LoadAllLocalAndReferencedAssemblies(AppDomain appDomain, BindingScanResults& bindingScanResults);
    [ExtensionAttribute]
[DebuggerHiddenAttribute]
public static Assembly[] LoadAllAssembliesInDomain(AppDomain appDomain);
    [ExtensionAttribute]
[DebuggerHiddenAttribute]
public static Assembly[] LoadAllReferencedAssemblies(AppDomain appDomain, bool avoidLoadingSystemAssemblies);
    [ExtensionAttribute]
public static string LoadAllAssembliesInBaseDirectory(AppDomain appDomain);
    [ExtensionAttribute]
public static string LoadAllAssembliesInPrivateBinDirectory(AppDomain appDomain, string discoveryPath);
    private static void LoadAssembliesInDirectory(string path);
    [ExtensionAttribute]
public static Type[] GetTypesDecoratedWithAttribute(AppDomain appDomain, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static KeyValuePair`2[] GetTypesDecoratedWithAttribute(AppDomain appDomain, Func`2<TAttribute, bool> filter, bool inherit, bool allowMultiples);
    [ExtensionAttribute]
public static KeyValuePair`2[] GetTypesDecoratedWithAttribute(AppDomain appDomain, Func`2<TAttribute, bool> filter);
    [ExtensionAttribute]
public static Type[] GetAllTypesImplementingOpenGenericType(Assembly[] assemblies);
    [ExtensionAttribute]
public static Type[] GetAllTypesImplementingOpenGenericType(AppDomain appDomain);
    [ExtensionAttribute]
public static Type[] GetTypesImplementingType(AppDomain appDomain, bool instantiableOnly, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static Type[] GetTypesImplementingType(AppDomain appDomain, Type modelBuilderType, bool instantiableOnly, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static KeyValuePair`2[] GetTypesDecoratedWithAttributeAndInstantiateAndInvokeInterfaceMethod(AppDomain appDomain, Action`1<TClassContract> action, Func`2<TAttribute, bool> filter, Action`4<bool, Type, TAttribute, TClassContract> optionalInvokeCallback);
    [ExtensionAttribute]
public static bool IsPermitted(AppDomain appDomain, IPermission requestedPermission);
    [ExtensionAttribute]
public static void SetThreadToCurrentWindowsThread(AppDomain appDomain);
    [ExtensionAttribute]
public static Type GetTypeFromTypeFullName(AppDomain appDomain, string fullTypeName, string assemblyName);
    [ExtensionAttribute]
public static Type GetTypeFromTypeFullName(AppDomain appDomain, IHasAssemblyAndTypeNames entity);
}
[ExtensionAttribute]
public static class XAct.AssemblyExtensions : object {
    [ExtensionAttribute]
public static Version GetAssemblyVersion(Assembly assembly);
    [ExtensionAttribute]
public static Version GetAssemblyFileVersion(Assembly assembly);
    [ExtensionAttribute]
public static Version GetAssemblyProductVersion(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetReferencedAssemblyLocations(Assembly assembly);
    [ExtensionAttribute]
public static Bitmap LoadBitmapFromResource(Assembly assembly, string imageResourcePath);
    [ExtensionAttribute]
public static bool IsAssemblyDebugBuild(Assembly assembly);
    [ExtensionAttribute]
public static bool Is64Bit(Assembly assembly);
}
[ExtensionAttribute]
public static class XAct.BitmapExtensions : object {
    [ExtensionAttribute]
public static Bitmap ConvertToGrayscale(Bitmap original);
}
internal class XAct.Class1 : object {
}
public class XAct.Collections.PriorityQueue`1 : object {
    private SortedDictionary`2<int, Queue`1<TItem>> _innerDictionaryOfQueuesByPriority;
    public int Count { get; }
    public bool IsEmpty { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Clear();
    public bool Contains(TItem item);
    public sealed virtual void CopyTo(Array array, int index);
    public TItem Dequeue();
    public TItem Dequeue(int priority);
    public void Enqueue(TItem value, int priority);
    public TItem Peek();
    private sealed virtual override IEnumerator`1<TItem> System.Collections.Generic.IEnumerable<TItem>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public TItem[] ToArray();
}
[DefaultMemberAttribute("Item")]
[CollectionDataContractAttribute]
[SuppressMessageAttribute("Microsoft.Naming", "CA1710")]
public class XAct.Collections.WrappedList`1 : object {
    private IList _innerList;
    public TItem Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; public set; }
    public bool IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public WrappedList`1(IList innerList);
    public TItem get_Item(int index);
    public void set_Item(int index, TItem value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override T XAct.IHasInnerItemReadOnly.GetInnerItem();
    public int IndexOf(TItem item);
    public void Insert(int index, TItem item);
    public void Add(TItem item);
    public bool Contains(TItem item);
    public void CopyTo(TItem[] array, int arrayIndex);
    public bool Remove(TItem item);
    protected IEnumerator GetEnumerator();
}
[ExtensionAttribute]
public static class XAct.DateTimeFFExtensions : object {
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Naming", "CA1720")]
public static int ToInt(DateTime dateTime);
    [ExtensionAttribute]
public static double ToDouble(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime AddInterval(DateTime dateTime, TimeInterval timeInterval, int amount);
}
public class XAct.Diagnostics.Implementations.NullTracingService : TracingServiceBase {
    public NullTracingService(ITraceSwitchService traceSwitchService);
    protected virtual void WriteLine(TraceLevel traceLevel, string message);
    public virtual void DebugTrace(int stackTraceFrameOffset, TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void DebugTrace(TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void DebugTraceException(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
    public virtual void DebugTraceException(TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
    public virtual void QuickTrace(string message, Object[] arguments);
    protected virtual void TimerElapsed(object sender, ElapsedEventArgs e);
    public virtual void Trace(int stackTraceFrameOffset, TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void Trace(TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void TraceException(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception, string message, Object[] messageArguments);
    public virtual void TraceException(TraceLevel traceLevel, Exception exception, string message, Object[] messageArguments);
}
public class XAct.Diagnostics.Implementations.SystemDiagnosticsTracingService : TracingServiceBase {
    public SystemDiagnosticsTracingService(ITraceSwitchService traceSwitchService);
    protected virtual void WriteLine(TraceLevel traceLevel, string message);
    protected virtual void TimerElapsed(object sender, ElapsedEventArgs e);
}
[DefaultMemberAttribute("Item")]
public class XAct.Diagnostics.Implementations.TraceSwitchService : object {
    public static string ApplicationTraceSwitchName;
    private ITraceSwitchServiceState _traceSwitchCache;
    private ITraceSwitchServiceConfiguration _traceSwitchServiceConfiguration;
    public ITraceSwitchServiceConfiguration Configuration { get; }
    public bool Enabled { get; public set; }
    public bool ReflectionEnabled { get; public set; }
    public TraceLevel DefaultTraceLevel { get; public set; }
    public TraceSwitch Item { get; }
    public TraceSwitchService(ITraceSwitchServiceState traceSwitchCache, ITraceSwitchServiceConfiguration traceSwitchServiceConfiguration);
    public sealed virtual ITraceSwitchServiceConfiguration get_Configuration();
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    public sealed virtual bool get_ReflectionEnabled();
    public sealed virtual void set_ReflectionEnabled(bool value);
    public TraceLevel get_DefaultTraceLevel();
    public void set_DefaultTraceLevel(TraceLevel value);
    public sealed virtual TraceSwitch get_Item(string traceSwitchName);
    public sealed virtual TraceSwitch GetNamedTraceSwitch(string traceSwitchName, TraceLevel defaultTraceLevel);
    public sealed virtual TraceSwitch GetApplicationTraceSwitch();
    public sealed virtual bool ShouldTrace(TraceLevel traceLevel, Type classInstanceType);
    public sealed virtual TraceSwitch GetAssemblyTraceSwitch(Assembly assembly);
    public sealed virtual TraceSwitch GetTraceSwitch(int stackTraceFrameOffset);
    public sealed virtual TraceSwitch GetTraceSwitchByType(Type instanceType);
}
[ComVisibleAttribute("False")]
public class XAct.Diagnostics.Implementations.TraceSwitchServiceState : Dictionary`2<string, TraceSwitch> {
}
public abstract class XAct.Diagnostics.Implementations.TracingServiceBase : object {
    private ITraceSwitchService _traceSwitchService;
    private static DateTime _lastDateTimeReseted;
    private Timer _timer;
    private int baseTraceOffsetAmount;
    protected TracingServiceBase(ITraceSwitchService traceSwitchService);
    public virtual void DebugTrace(TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void DebugTrace(int stackTraceFrameOffset, TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void DebugTraceException(TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
    public virtual void DebugTraceException(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
    public virtual void QuickTrace(string message, Object[] arguments);
    public virtual void Trace(TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void Trace(int stackTraceFrameOffset, TraceLevel traceLevel, string message, Object[] arguments);
    public virtual void TraceException(TraceLevel traceLevel, Exception exception, string message, Object[] messageArguments);
    public virtual void TraceException(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception, string message, Object[] messageArguments);
    [ConditionalAttribute("DEBUG")]
private void DebugTraceInternal(int stackTraceFrameOffset, TraceLevel traceLevel, string message, Object[] arguments);
    [ConditionalAttribute("DEBUG")]
private void DebugTraceExceptionInternal(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception, string message, Object[] messageArguments);
    private void ResetFlushTimer();
    private void TimerElapsedInternal(object sender, ElapsedEventArgs e);
    protected abstract virtual void TimerElapsed(object sender, ElapsedEventArgs e);
    private void WriteLineIf(int stackTraceFrameOffset, TraceLevel traceLevel, string message, Object[] messageArguments);
    private void WriteLineIf(Type classInstanceType, TraceLevel traceLevel, string message, Object[] args);
    protected abstract virtual void WriteLine(TraceLevel traceLevel, string message);
    private string StringFormatMessage(string message, Object[] messageArguments);
    private string PrefixMessage(TraceLevel traceLevel, string message);
    private string PrefixMessageWithMethodName(string message, Object[] messageArgs);
    private void TraceException(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception);
    private void TraceException(Type invokingClassInstance, TraceLevel traceLevel, Exception exception);
    public sealed virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
public interface XAct.Diagnostics.ITraceSwitchService {
    public ITraceSwitchServiceConfiguration Configuration { get; }
    public bool Enabled { get; public set; }
    public bool ReflectionEnabled { get; public set; }
    public TraceSwitch Item { get; }
    public abstract virtual ITraceSwitchServiceConfiguration get_Configuration();
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_ReflectionEnabled();
    public abstract virtual void set_ReflectionEnabled(bool value);
    public abstract virtual TraceSwitch get_Item(string traceSwitchName);
    public abstract virtual TraceSwitch GetNamedTraceSwitch(string traceSwitchName, TraceLevel defaultTraceLevel);
    public abstract virtual TraceSwitch GetApplicationTraceSwitch();
    public abstract virtual bool ShouldTrace(TraceLevel traceLevel, Type classInstanceType);
    public abstract virtual TraceSwitch GetAssemblyTraceSwitch(Assembly assembly);
    public abstract virtual TraceSwitch GetTraceSwitch(int stackTraceFrameOffset);
    public abstract virtual TraceSwitch GetTraceSwitchByType(Type instanceType);
}
public interface XAct.Diagnostics.ITraceSwitchServiceConfiguration {
    public bool Enabled { get; public set; }
    public bool ReflectionEnabled { get; public set; }
    public bool CacheTraceSwitches { get; public set; }
    public TraceLevel DefaultTraceLevel { get; public set; }
    public TraceLevel DefaultApplicationTraceLevel { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_ReflectionEnabled();
    public abstract virtual void set_ReflectionEnabled(bool value);
    public abstract virtual bool get_CacheTraceSwitches();
    public abstract virtual void set_CacheTraceSwitches(bool value);
    public abstract virtual TraceLevel get_DefaultTraceLevel();
    public abstract virtual void set_DefaultTraceLevel(TraceLevel value);
    public abstract virtual TraceLevel get_DefaultApplicationTraceLevel();
    public abstract virtual void set_DefaultApplicationTraceLevel(TraceLevel value);
}
public interface XAct.Diagnostics.SharedState.ITraceSwitchServiceState {
}
public class XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector : XActLibStatusServiceConnectorBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UrlAccessibilityStatusServiceConnectorConfiguration <Configuration>k__BackingField;
    public UrlAccessibilityStatusServiceConnectorConfiguration Configuration { get; private set; }
    public UrlAccessibilityStatusServiceConnector(UrlAccessibilityStatusServiceConnectorConfiguration uriAccessibilityFeedServiceConnectorConfiguration);
    [CompilerGeneratedAttribute]
public UrlAccessibilityStatusServiceConnectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(UrlAccessibilityStatusServiceConnectorConfiguration value);
    public virtual StatusResponse Get(object arguments, Nullable`1<DateTime> startTimeUtc, Nullable`1<DateTime> endTimeUtc);
    private void MakeTable(StatusResponseTable table, object arguments);
    private StatusResponseTableRow MakeTableRow(UrlAccessibilityStatusServiceConnectorConfigurationItem urlSetting);
}
public class XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfiguration : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <Timeout>k__BackingField;
    private List`1<UrlAccessibilityStatusServiceConnectorConfigurationItem> _urls;
    public TimeSpan Timeout { get; public set; }
    public List`1<UrlAccessibilityStatusServiceConnectorConfigurationItem> Urls { get; }
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public List`1<UrlAccessibilityStatusServiceConnectorConfigurationItem> get_Urls();
}
public class XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ExpectedHttpResponseCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <Timeout>k__BackingField;
    public string Title { get; public set; }
    public Uri Url { get; public set; }
    public int ExpectedHttpResponseCode { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public UrlAccessibilityStatusServiceConnectorConfigurationItem(string url, int expectedResponse, TimeSpan timeOut);
    public UrlAccessibilityStatusServiceConnectorConfigurationItem(Uri uri, int expectedResponse, TimeSpan timeOut);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    [CompilerGeneratedAttribute]
public int get_ExpectedHttpResponseCode();
    [CompilerGeneratedAttribute]
public void set_ExpectedHttpResponseCode(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public virtual string ToString();
}
public class XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector : XActLibStatusServiceConnectorBase {
    private IEnvironmentService _environmentService;
    private IIOService _ioService;
    private XmlDocument _xmlDocument;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private XmlDocumentStatusServiceConnectorConfiguration <Configuration>k__BackingField;
    public XmlDocumentStatusServiceConnectorConfiguration Configuration { get; private set; }
    public XmlDocumentStatusServiceConnector(IEnvironmentService environmentService, IIOService ioService, XmlDocumentStatusServiceConnectorConfiguration connectorConfiguration);
    [CompilerGeneratedAttribute]
public XmlDocumentStatusServiceConnectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(XmlDocumentStatusServiceConnectorConfiguration value);
    public virtual StatusResponse Get(object arguments, Nullable`1<DateTime> startTimeUtc, Nullable`1<DateTime> endTimeUtc);
    private void MakeTable(StatusResponseTable table, object arguments);
    private StatusResponseTableRow MakeTableRow(string title, string value);
}
public class XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfiguration : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FilePath>k__BackingField;
    private List`1<XmlDocumentStatusServiceConnectorConfigurationItem> _xPaths;
    public string FilePath { get; public set; }
    public List`1<XmlDocumentStatusServiceConnectorConfigurationItem> XPathDefinitions { get; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    public List`1<XmlDocumentStatusServiceConnectorConfigurationItem> get_XPathDefinitions();
}
public class XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfigurationItem : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <XPath>k__BackingField;
    public string Title { get; public set; }
    public string XPath { get; public set; }
    public XmlDocumentStatusServiceConnectorConfigurationItem(string title, string xpath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_XPath();
    [CompilerGeneratedAttribute]
public void set_XPath(string value);
    public virtual string ToString();
}
public class XAct.Diagnostics.Status.Connectors.UrlAccessibilityStatusServiceConnectorFactory : object {
    public static UrlAccessibilityStatusServiceConnector Create(string name, string title, string description, UrlAccessibilityStatusServiceConnectorConfigurationItem[] urlInfos);
}
public class XAct.Diagnostics.Status.Connectors.XmlDocumentStatusServiceConnectorFactory : object {
    public static XmlDocumentStatusServiceConnector Create(string name, string title, string description, string relativeFilePath, XmlDocumentStatusServiceConnectorConfigurationItem[] xpathDefinitions);
}
public class XAct.Diagnostics.TraceSwitchServiceConfiguration : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReflectionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CacheTraceSwitches>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TraceLevel <DefaultTraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TraceLevel <DefaultApplicationTraceLevel>k__BackingField;
    public bool Enabled { get; public set; }
    public bool ReflectionEnabled { get; public set; }
    public bool CacheTraceSwitches { get; public set; }
    public TraceLevel DefaultTraceLevel { get; public set; }
    public TraceLevel DefaultApplicationTraceLevel { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReflectionEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReflectionEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheTraceSwitches();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheTraceSwitches(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_DefaultTraceLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultTraceLevel(TraceLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_DefaultApplicationTraceLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultApplicationTraceLevel(TraceLevel value);
}
[ExtensionAttribute]
public static class XAct.DirectoryInfoExtensions : object {
    [ExtensionAttribute]
public static void SetDateTime(DirectoryInfo directoryInfo, AuditableEvent type, DateTime dateTimeUtc);
    [ExtensionAttribute]
public static bool ExistsOrCreate(DirectoryInfo info);
    [ExtensionAttribute]
public static bool TryFindParentFile(DirectoryInfo directoryInfo, string searchPattern, FileInfo& resultFileInfo);
}
public abstract class XAct.Domain.ObservableModelBase : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangingEventHandler PropertyChanging;
    protected Dictionary`2<string, object> BackupValues;
    protected Dictionary`2<string, object> CurrentValues;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnPropertyChanging(string propertyName);
    protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    public virtual void BeginEdit();
    public virtual void CancelEdit();
    public virtual void EndEdit();
    protected virtual T GetPropertyValue(string propertyName);
    protected virtual void SetPropertyValue(string propertyName, object value);
    protected virtual object ExtractPropertyFromDictionaryValue(string propertyName);
    protected virtual void SetPropertyValueInDictionaryValue(string propertyName, object value);
    protected virtual void ValidatePropertyValue(string propertyName, object value);
    protected virtual void CloneDictionary(IDictionary`2<string, object> from, IDictionary`2<string, object> to);
}
[DataContractAttribute]
public enum XAct.Drawing.ColorType : Enum {
    public int value__;
    public static ColorType BW;
    public static ColorType Grayscale;
    public static ColorType Color;
}
[DataContractAttribute]
public class XAct.EditableValue`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangingEventHandler PropertyChanging;
    protected TValue _previousValue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Editing>k__BackingField;
    [DataMemberAttribute]
protected TValue _currentValue;
    [DataMemberAttribute]
private SerializedObject _serializedValue;
    private Type _valueType;
    [DataMemberAttribute]
private OfflineModelState _modelState;
    protected bool Editing { get; protected set; }
    public Type ValueType { get; protected set; }
    public TValue Value { get; public set; }
    public OfflineModelState ModelState { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
protected bool get_Editing();
    [CompilerGeneratedAttribute]
protected void set_Editing(bool value);
    public Type get_ValueType();
    protected void set_ValueType(Type value);
    public virtual TValue get_Value();
    public virtual void set_Value(TValue value);
    public sealed virtual OfflineModelState get_ModelState();
    public sealed virtual void set_ModelState(OfflineModelState value);
    public sealed virtual void BeginEdit();
    public sealed virtual void CancelEdit();
    public sealed virtual void EndEdit();
    protected virtual TValue GetValue();
    protected virtual void SetValue(TValue value);
    public SerializedObject Serialize();
    [OnSerializingAttribute]
private void InitializeFuncs(StreamingContext streamingContext);
    private void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    private void OnPropertyChanging(string propertyName);
    protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    public static TValue op_Implicit(EditableValue`1<TValue> value);
}
[ExtensionAttribute]
public static class XAct.EditableValueExtensions : object {
    [ExtensionAttribute]
public static TValue GetValue(EditableValue`1<TValue> editableValue);
    [ExtensionAttribute]
public static void SetValue(EditableValue`1<TValue> editableValue, TValue value);
}
public interface XAct.Environment.IFFEnvironmentService {
    public IFFEnvironmentServiceConfiguration Configuration { get; }
    public abstract virtual IFFEnvironmentServiceConfiguration get_Configuration();
}
public interface XAct.Environment.IFFEnvironmentServiceConfiguration {
}
public interface XAct.Environment.IFFPrincipalService {
}
[DefaultBindingImplementationAttribute]
public class XAct.Environment.Implementations.FFEnvironmentService : PCLEnvironmentService {
    private IEnvironmentServiceConfiguration XAct.Environment.IEnvironmentService.Configuration { get; }
    public IFFEnvironmentServiceConfiguration Configuration { get; }
    public FFEnvironmentService(IFFEnvironmentServiceConfiguration environmentServiceConfiguration, IEnvironmentManagementService environmentManagementService);
    private sealed virtual override IEnvironmentServiceConfiguration XAct.Environment.IEnvironmentService.get_Configuration();
    public sealed virtual IFFEnvironmentServiceConfiguration get_Configuration();
    public sealed virtual string MapPath(string virtualPath);
}
[DefaultBindingImplementationAttribute]
[DefaultBindingImplementationAttribute]
[DefaultBindingImplementationAttribute]
public class XAct.Environment.Implementations.FFEnvironmentServiceConfiguration : PCLEnvironmentServiceConfiguration {
}
[DefaultBindingImplementationAttribute]
public class XAct.Environment.Implementations.FFPrincipalService : XActLibServiceBase {
    private IEnvironmentService _environmentService;
    public IPrincipal Principal { get; public set; }
    public string CurrentIdentityIdentifier { get; }
    public FFPrincipalService(ITracingService tracingService, IEnvironmentService environmentService);
    public sealed virtual IPrincipal get_Principal();
    public sealed virtual void set_Principal(IPrincipal value);
    public sealed virtual string get_CurrentIdentityIdentifier();
    private void SetHttpUserPropertyIfAvailable(IPrincipal principal);
}
public class XAct.Events.Implementations.EventAggregatorService : XActLibServiceBase {
    private object _lock;
    private IEventAggregatorServiceSubscriberServiceState Subcribers { get; }
    private SynchronizationContext Context { get; }
    public EventAggregatorService(ITracingService tracingService, IEventAggregatorServiceSubscriberServiceState subscriberCache);
    private IEventAggregatorServiceSubscriberServiceState get_Subcribers();
    private SynchronizationContext get_Context();
    public sealed virtual void Publish(T message);
    public sealed virtual void AddSubscriber(IEventSubscriber listener);
    public sealed virtual void RemoveSubscriber(IEventSubscriber listener);
    private IEnumerable`1<IEventSubscriber> All();
    private void SendAction(Action action);
}
[ExtensionAttribute]
public static class XAct.ExceptionExtensions : object {
    [ExtensionAttribute]
public static void Trace(Exception e, TraceLevel traceLevel, string message, Object[] args);
    [ExtensionAttribute]
public static string ToLogString(Exception ex, string additionalMessage);
}
public class XAct.Exceptions.Configuration.Implementations.ExceptionHandlingServiceConfigurations : object {
    private Dictionary`2<string, List`1<IExceptionHandlingConfiguration>> _cache;
    public sealed virtual void Add(IExceptionHandlingConfiguration exceptionHandlingDescription, string category);
    public sealed virtual IExceptionHandlingConfiguration Get(Exception exception, string category);
}
[ExtensionAttribute]
public static class XAct.Extensions.ObjectExtensions2 : object {
    [ExtensionAttribute]
public static XmlNode ToXmlNode(object objectToSerialize);
}
[ExtensionAttribute]
public static class XAct.Extensions.ObjectReflectionExtensions2FF : object {
    [ExtensionAttribute]
public static T CloneTheUncloneable(T source);
}
[ComVisibleAttribute("False")]
public class XAct.FF.IO.Entities.FileSystemDirectoryInfo : DirectoryInfoBase`2<IFSIOService, FileSystemFileInfo> {
    public FileSystemDirectoryInfo(string fullName);
    public FileSystemDirectoryInfo(IPathService pathService, string fullName);
    public FileSystemDirectoryInfo(IFSIOService ifsIOService, IPathService pathService, string fullName);
}
[ComVisibleAttribute("False")]
public class XAct.FF.IO.Entities.FileSystemFileInfo : FileInfoBase`2<IFSIOService, FileSystemDirectoryInfo> {
    public FileSystemFileInfo(string fullName);
    public FileSystemFileInfo(IPathService pathService, string fullName);
    public FileSystemFileInfo(IFSIOService ifsIOService, IPathService pathService, string fullName);
}
[DataContractAttribute]
public class XAct.FF.Settings.Implementations.SettingRecordMetadata : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private OfflineModelState <_state>k__BackingField;
    private string _applicationName;
    private string _zoneOrTier;
    private string _host;
    private string _user;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Key>k__BackingField;
    [DataMemberAttribute]
private OfflineModelState _state { get; private set; }
    [DataMemberAttribute]
public string ApplicationName { get; public set; }
    [DataMemberAttribute]
public string ZoneOrTier { get; public set; }
    [DataMemberAttribute]
public string Host { get; public set; }
    [DataMemberAttribute]
public string User { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    public OfflineModelState GetState();
    public void SetState(OfflineModelState modelState);
    [CompilerGeneratedAttribute]
private OfflineModelState get__state();
    [CompilerGeneratedAttribute]
private void set__state(OfflineModelState value);
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual string get_ZoneOrTier();
    public virtual void set_ZoneOrTier(string value);
    public virtual string get_Host();
    public virtual void set_Host(string value);
    public string get_User();
    public void set_User(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
}
[ExtensionAttribute]
public static class XAct.FileAccessExtensions : object {
    [ExtensionAttribute]
public static FileAccess MapTo(FileAccess fileAccess);
}
[ExtensionAttribute]
public static class XAct.FileInfoExtensions : object {
    private static IDateTimeService DateTimeService { get; }
    private static IEnvironmentService EnvironmentService { get; }
    private static IDateTimeService get_DateTimeService();
    private static IEnvironmentService get_EnvironmentService();
    [ExtensionAttribute]
public static bool IsPathAbsolute(FileInfo fileInfo);
    private static bool IsDirectorySeparatorChar(char sepChar, bool eitherDirection);
    [ExtensionAttribute]
public static FileInfo RelativeTo(FileInfo fileInfo, DirectoryInfo directoryInfo, bool throwExceptionIfNotCorrelation);
    [ExtensionAttribute]
public static void SetCreateTime(FileInfo fileInfo, DateTime creationTimeUtc);
    [ExtensionAttribute]
public static void SetLastWriteTime(FileInfo fileInfo, DateTime lastWriteTimeUtc);
    [ExtensionAttribute]
public static void SetLastAccessTime(FileInfo fileInfo, DateTime lastAccessTimeUtc);
    [ExtensionAttribute]
public static TimeSpan GetFileAge(FileInfo fileInfo, Nullable`1<DateTime> nowUtc, FileDateType fileDateType);
    [ExtensionAttribute]
public static DateTime GetDateFromFileInfo(FileInfo fileInfo, FileDateType fileDateType, bool forceRefresh);
    [ExtensionAttribute]
public static string SuffixFileName(FileInfo filePath, string fileNameSuffix);
    [ExtensionAttribute]
public static string PrefixFileName(FileInfo filePath, string fileNamePrefix);
    [ExtensionAttribute]
public static bool TryFindParentFile(FileInfo fileInfo, string searchPattern, FileInfo& resultFileInfo);
}
[ExtensionAttribute]
public static class XAct.FileInfoExtensions2 : object {
    private static ITracingService TracingService { get; }
    private static ITracingService get_TracingService();
    [ExtensionAttribute]
public static bool SafeMove(FileInfo from, string toPath, int attempts, int retryMilliseconds, bool iftargetExistsRenameWithStamp);
    [ExtensionAttribute]
public static bool RotateToMakeSpace(FileInfo fileInfo, IIOService ioService);
}
[ExtensionAttribute]
public static class XAct.FileModeExtensions : object {
    [ExtensionAttribute]
public static FileMode MapTo(FileMode fileMode);
}
[ExtensionAttribute]
public static class XAct.FileShareExtensions : object {
    [ExtensionAttribute]
public static FileShare MapTo(FileShare fileShare);
}
[ExtensionAttribute]
public static class XAct.FileSystemInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsADirectory(FileSystemInfo fileSystemInfo);
    [ExtensionAttribute]
public static void SetCreateTime(FileSystemInfo fileSystemInfo, DateTime creationTimeUtc);
    [ExtensionAttribute]
public static void SetLastWriteTime(FileSystemInfo fileSystemInfo, DateTime lastWriteTimeUtc);
    [ExtensionAttribute]
public static void SetLastAccessTime(FileSystemInfo fileSystemInfo, DateTime lastAccessTimeUtc);
}
[ExtensionAttribute]
public static class XAct.HierarchicalOperationOptionExtensions : object {
    [ExtensionAttribute]
public static SearchOption MapTo(HierarchicalOperationOption hierarchicalOperationOption);
}
[ExtensionAttribute]
public static class XAct.IApplicationSettingScopeExtensions : object {
    [ExtensionAttribute]
public static string ContextIdentity(IApplicationSettingScope setting);
}
[ExtensionAttribute]
public static class XAct.IHasTypeNameExtensions : object {
    [ExtensionAttribute]
public static Type GetTypeFromTypeName(IHasTypeName entity);
    [ExtensionAttribute]
public static Type GetTypeFromTypeName(IHasAssemblyAndTypeAndMethodNames entity);
}
[ExtensionAttribute]
public static class XAct.IListExtensionsFF : object {
    [ExtensionAttribute]
public static string ToCsv(IList`1<T> data, bool includePropertyNamesOnFistLine);
}
[ExtensionAttribute]
public static class XAct.ImageExtensions : object {
    [ExtensionAttribute]
public static Byte[] ToBytes(Image image, ImageFormat format);
}
[DefaultBindingImplementationAttribute]
public class XAct.IO.FileSystemUserFileSystemService : XActLibServiceBase {
    private IPathService _pathService;
    private IFSIOService _fsIOService;
    private IProductInformationService _productInformationService;
    public IDirectoryInfo UserLocal { get; }
    public IDirectoryInfo UserRoaming { get; }
    public IDirectoryInfo UserTemp { get; }
    public IDirectoryInfo CommonLocal { get; }
    public IDirectoryInfo ApplicationRoot { get; }
    public FileSystemUserFileSystemService(ITracingService tracingService, IPathService pathService, IFSIOService fsIOService, IProductInformationService productInformationService);
    public sealed virtual IDirectoryInfo get_UserLocal();
    public sealed virtual IDirectoryInfo get_UserRoaming();
    private void AddCompanyAndProductNameToBasePath(String& result);
    public sealed virtual IDirectoryInfo get_UserTemp();
    public sealed virtual IDirectoryInfo get_CommonLocal();
    public sealed virtual IDirectoryInfo get_ApplicationRoot();
}
public interface XAct.IO.IFileSystemUserFileSystemService {
}
public interface XAct.IO.IFSIOService {
}
public interface XAct.IO.IIsolatedStorageIOService {
}
public interface XAct.IO.IIsolatedStorageUserFileSystemService {
}
[DefaultBindingImplementationAttribute]
public class XAct.IO.Implementations.FSIOService : XActLibServiceBase {
    private static string _accessTestFileName;
    private IPathService _pathService;
    public string DirectoryAccessTestFileName { get; }
    public FSIOService(ITracingService tracingService, IPathService pathService);
    public sealed virtual string get_DirectoryAccessTestFileName();
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileOpenAsync>d__5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> FileOpenAsync(string fileFullName, FileMode fileMode, FileAccess fileAccess, FileShare fileShare);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileOpenReadAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> FileOpenReadAsync(string fileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileOpenWriteAsync>d__7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> FileOpenWriteAsync(string fileFullName, bool replaceAnyIfFound, bool append);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileOpenTextAsync>d__8")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("Obfuscates what is really going on. Prefer instead using ioService.OpenRead(path).OpenStreamReader()")]
public sealed virtual Task`1<StreamReader> FileOpenTextAsync(string fileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileReplaceAsync>d__9")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileReplaceAsync(string sourceFileFullName, string destinationFileFullName, string destinationBackupFileName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileCreateAsync>d__10")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("Obfuscates what is really going on: prefer using ioService.OpenWrite(path,true,false)")]
public sealed virtual Task`1<Stream> FileCreateAsync(string sourceFileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileDeleteAsync>d__11")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileDeleteAsync(string fileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileExistsAsync>d__12")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> FileExistsAsync(string fileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileMoveAsync>d__13")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileMoveAsync(string sourceFileName, string destinationFileName, bool overWriteAllowed);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileAppendAllTextAsync>d__14")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("Obfuscates whats really going on. Prefer using ioService.OpenWrite(uri,true, true).OpenStreamWriter().Write(contents);")]
public sealed virtual Task FileAppendAllTextAsync(string fileFullName, string contents);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileCopyAsync>d__15")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileCopyAsync(string sourceFileFullName, string destinationFileFullName, bool overWriteAllowed);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<GetDirectoryFileNamesAsync>d__16")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<String[]> GetDirectoryFileNamesAsync(string directoryFullName, string searchPattern, HierarchicalOperationOption searchOption);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<DirectoryCreateAsync>d__17")]
[DebuggerStepThroughAttribute]
public sealed virtual Task DirectoryCreateAsync(string directoryFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<DirectoryExistsAsync>d__18")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> DirectoryExistsAsync(string directoryFullName, bool createIfMissing);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<DirectoryDeleteAsync>d__19")]
[DebuggerStepThroughAttribute]
public sealed virtual Task DirectoryDeleteAsync(string directoryFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<DirectoryGetDateTimeAsync>d__20")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DateTime> DirectoryGetDateTimeAsync(string directoryFullName, AuditableEvent type);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<DirectorySetDateTimeAsync>d__21")]
[DebuggerStepThroughAttribute]
public sealed virtual Task DirectorySetDateTimeAsync(string directoryFullName, AuditableEvent type, DateTime dateTimeUtc);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileGetSizeAsync>d__22")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<long> FileGetSizeAsync(string fileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileGetDateTimeAsync>d__23")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DateTime> FileGetDateTimeAsync(string directoryFullName, AuditableEvent type);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileSetDateTimeAsync>d__24")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileSetDateTimeAsync(string fileFullName, AuditableEvent type, DateTime dateTimeUtc);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<GetFileInfoAsync>d__25")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IFileInfo> GetFileInfoAsync(string fileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<FileCheckAccessibilityAsync>d__26")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> FileCheckAccessibilityAsync(string fileFullName, FileAccess desiredFileAccess, FileShare desiredFileShare);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.FSIOService/<DirectoryCheckAccessibilityAsync>d__27")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DirectoryAccessibilityCheckResults> DirectoryCheckAccessibilityAsync(string directoryFullName, bool tryForceCreateDirectory);
    private void XXX(String& sourcePath);
}
[DefaultBindingImplementationAttribute]
public class XAct.IO.Implementations.IsolatedStorageIOService : XActLibServiceBase {
    private IPathService _pathService;
    private static string _accessTestFileName;
    public string DirectoryAccessTestFileName { get; }
    private IsolatedStorageFile ApplicationIsolatedStorageFile { get; }
    public IsolatedStorageIOService(ITracingService tracingService, IPathService pathService);
    public sealed virtual string get_DirectoryAccessTestFileName();
    private IsolatedStorageFile get_ApplicationIsolatedStorageFile();
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileOpenAsync>d__7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> FileOpenAsync(string uri, FileMode fileMode, FileAccess fileAccess, FileShare fileShare);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileOpenReadAsync>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> FileOpenReadAsync(string uri);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileOpenWriteAsync>d__9")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> FileOpenWriteAsync(string uri, bool replaceAnyIfFound, bool append);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileOpenTextAsync>d__10")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("Obfuscates what is really going on. Prefer instead using ioService.OpenRead(path).OpenStreamReader()")]
public sealed virtual Task`1<StreamReader> FileOpenTextAsync(string uri);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileReplaceAsync>d__11")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileReplaceAsync(string sourceUri, string destinationUri, string destinationBackupUri);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileCopyAsync>d__12")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileCopyAsync(string sourceUri, string destinationUri, bool overwriteAllowed);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileCreateAsync>d__13")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("Obfuscates what is really going on: prefer using ioService.OpenWrite(path,false)")]
public sealed virtual Task`1<Stream> FileCreateAsync(string uri);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileDeleteAsync>d__14")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileDeleteAsync(string uri);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileExistsAsync>d__15")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> FileExistsAsync(string uri);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileGetSizeAsync>d__16")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<long> FileGetSizeAsync(string fileFullName);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileMoveAsync>d__17")]
[DebuggerStepThroughAttribute]
public sealed virtual Task FileMoveAsync(string sourceUri, string destinationUri, bool overWriteAllowed);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileAppendAllTextAsync>d__18")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("Obfuscates whats really going on. Prefer using ioService.OpenWrite(uri,true,true).OpenStreamWriter().Write(contents);")]
public sealed virtual Task FileAppendAllTextAsync(string uri, string contents);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<GetDirectoryFileNamesAsync>d__19")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<String[]> GetDirectoryFileNamesAsync(string directoryName, string searchPattern, HierarchicalOperationOption searchOption);
    public Task`1<String[]> GetDirectoryFiles(string directoryName, string searchPattern, SearchOption searchOption);
    public sealed virtual Task DirectoryCreateAsync(string directoryPath);
    public sealed virtual Task`1<bool> DirectoryExistsAsync(string directoryPath, bool createIfMissing);
    public sealed virtual Task DirectoryDeleteAsync(string directoryPath);
    public sealed virtual Task`1<DateTime> FileGetDateTimeAsync(string fileFullName, AuditableEvent type);
    private static void CheckPath(string relativeFileNamePath);
    private static bool IsPathAbsolute(string path);
    private static bool IsDirectorySeparatorChar(char sepChar, bool eitherDirection);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<GetFileInfoAsync>d__28")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IFileInfo> GetFileInfoAsync(string fileName);
    public sealed virtual Task FileSetDateTimeAsync(string fileFullName, AuditableEvent type, DateTime dateTimeUtc);
    public sealed virtual Task`1<DateTime> DirectoryGetDateTimeAsync(string directoryFullName, AuditableEvent type);
    public sealed virtual Task DirectorySetDateTimeAsync(string directoryFullName, AuditableEvent type, DateTime dateTimeUtc);
    [AsyncStateMachineAttribute("XAct.IO.Implementations.IsolatedStorageIOService/<FileCheckAccessibilityAsync>d__32")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> FileCheckAccessibilityAsync(string fileFullName, FileAccess desiredFileAccess, FileShare desiredFileShare);
    public sealed virtual Task`1<DirectoryAccessibilityCheckResults> DirectoryCheckAccessibilityAsync(string directoryFileName, bool tryForceCreateDirectory);
}
[ComVisibleAttribute("False")]
public class XAct.IO.IsolatedStorageDirectoryInfo : DirectoryInfoBase`2<IIsolatedStorageIOService, IsolatedStorageFileInfo> {
    public IsolatedStorageDirectoryInfo(string fullName);
    public IsolatedStorageDirectoryInfo(IIOService managingIOService, string fullName);
    public IsolatedStorageDirectoryInfo(IIOService managingIOService, IPathService pathService, string fullName);
}
[ComVisibleAttribute("False")]
public class XAct.IO.IsolatedStorageFileInfo : FileInfoBase`2<IIsolatedStorageIOService, IsolatedStorageDirectoryInfo> {
    public IsolatedStorageFileInfo(string fullName);
    public IsolatedStorageFileInfo(IIOService managingIOService, string fullName);
    public IsolatedStorageFileInfo(IIOService managingIOService, IPathService pathService, string fullName);
}
[ExtensionAttribute]
public static class XAct.IsolatedStorageExtensions : object {
    public static IsolatedStorageFile GetApplicationIsolatedStorageFile();
    [ExtensionAttribute]
public static bool FileExists(IsolatedStorageFile isolatedStorageArea, string searchPattern, String& foundFileName);
    [ExtensionAttribute]
public static IsolatedStorageFileStream OpenReadStream(IsolatedStorageFile isolatedStorageFile, string relativeFileNamePath);
    [ExtensionAttribute]
public static IsolatedStorageFileStream OpenWriteStream(IsolatedStorageFile isolatedStorageFile, string relativeFileNamePath, bool append);
    private static bool IsPathAbsolute(string path);
    private static bool IsDirectorySeparatorChar(char sepChar, bool eitherDirection);
}
[ExtensionAttribute]
public static class XAct.IsolatedStorageFileStreamExtensions : object {
    [ExtensionAttribute]
public static void Load(IsolatedStorageFileStream isolatedStorageFileStream, XmlDocument& xmlDocument);
    [ExtensionAttribute]
public static bool Save(IsolatedStorageFileStream isolatedStorageFileStream, XmlDocument xmlDocument, Encoding encoding);
}
[ExtensionAttribute]
public static class XAct.IXmlSerializableExtensionsFF : object {
    [ExtensionAttribute]
public static XmlNode ToXmlNode(IXmlSerializable objectToSerialize);
}
[ExtensionAttribute]
public static class XAct.NameValueCollectionExtensions : object {
    private static CultureInfo _invariantCulture;
    private static NameValueCollectionExtensions();
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToDictionary(NameValueCollection thisNameValueCollection);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public static TValue InitializeParam(NameValueCollection nameValueCollection, string attributeTag, TValue defaultValue, StringDictionary sqlKeywords);
    [ExtensionAttribute]
public static T PageNumber(NameValueCollection formOrQueryStringNameValueCollection, string key);
}
public class XAct.Net.TimeoutWebClient : WebClient {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan Timeout { get; public set; }
    public TimeoutWebClient(TimeSpan timeOut);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    protected virtual WebRequest GetWebRequest(Uri uri);
}
public class XAct.ProcessManager : object {
    public static ProcessManagerResult InvokeProcess(string exePath, string arguments, string workingDirectory, int timeoutSeconds);
}
public class XAct.ProcessManagerResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ProcessExited>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StandardOut>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StandardError>k__BackingField;
    public int ExitCode { get; public set; }
    public Nullable`1<bool> ProcessExited { get; public set; }
    public string StandardOut { get; public set; }
    public string StandardError { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProcessExited();
    [CompilerGeneratedAttribute]
public void set_ProcessExited(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_StandardOut();
    [CompilerGeneratedAttribute]
public void set_StandardOut(string value);
    [CompilerGeneratedAttribute]
public string get_StandardError();
    [CompilerGeneratedAttribute]
public void set_StandardError(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class XAct.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string EnumValueNotFound { get; }
    public static string ErrMsg_AValueIsRequired { get; }
    public static string ErrMsgArgumentCannotBeNotInitialized { get; }
    public static string ErrMsgArgumentCannotBeNull { get; }
    public static string ErrMsgArgumentCannotBeNullOrEmpty { get; }
    public static string ErrMsgArgumentEnumValueCannotBeUndefined { get; }
    public static string ErrMsgArgumentLengthCannotBeZero { get; }
    public static string ErrMsgItemIsNotOfRightType { get; }
    public static string ErrMsgValueCannotBeNull { get; }
    public static string Exception_LengthMustByLargerThanZero { get; }
    public static string ObjectExtensions_MakeUniqueIdentifier_Cannot_generate_UniqueKey_for_Null_objects_ { get; }
    public static string ObjectExtensions_RegisterService_IoC_container_not_yet_handled_via_Reflection_ { get; }
    public static string String1 { get; }
    public static string StringLengthMustBeLargerThanX { get; }
    public static string ValidatorWarningSymbol { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_EnumValueNotFound();
    public static string get_ErrMsg_AValueIsRequired();
    public static string get_ErrMsgArgumentCannotBeNotInitialized();
    public static string get_ErrMsgArgumentCannotBeNull();
    public static string get_ErrMsgArgumentCannotBeNullOrEmpty();
    public static string get_ErrMsgArgumentEnumValueCannotBeUndefined();
    public static string get_ErrMsgArgumentLengthCannotBeZero();
    public static string get_ErrMsgItemIsNotOfRightType();
    public static string get_ErrMsgValueCannotBeNull();
    public static string get_Exception_LengthMustByLargerThanZero();
    public static string get_ObjectExtensions_MakeUniqueIdentifier_Cannot_generate_UniqueKey_for_Null_objects_();
    public static string get_ObjectExtensions_RegisterService_IoC_container_not_yet_handled_via_Reflection_();
    public static string get_String1();
    public static string get_StringLengthMustBeLargerThanX();
    public static string get_ValidatorWarningSymbol();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
internal class XAct.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    [ApplicationScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("00:00:00")]
public TimeSpan NowOffset { get; }
    [ApplicationScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
public DateTime Now { get; }
    private static Settings();
    private void SettingChangingEventHandler(object sender, SettingChangingEventArgs e);
    private void SettingsSavingEventHandler(object sender, CancelEventArgs e);
    public static Settings get_Default();
    public TimeSpan get_NowOffset();
    public DateTime get_Now();
}
internal class XAct.RollingFileNameHelper : object {
    public static FileInfo ResolveNameOfNewRollingFile(DateTime currentDateTime, string templateFileName, bool deleteOlderFiles, int numberOfDaysToLeaveOldFiles);
    private static string ReplaceDateTimePatternInTextWithCurrentDateTime(DateTime now, string filePath, String& datePattern);
    private static string FindDateTimePatternInText(string filePath);
    private static IEnumerable`1<FileInfo> GetListOfOlderFiles(DateTime currentDateTime, string templateFileName, string datePattern, int numberOfDaysToLeaveOldFiles);
}
public class XAct.Security.Cryptography.SymmetricAlgorithms : object {
    public static string DefaultSymmetricalAlgorithm;
    private static CultureInfo _invariantCulture;
    private static int C_KB;
    public static long MaxChunkSize;
    public static int ChunkSize;
    private static ITracingService _tracingService;
    private string _algorithmName;
    private bool _embedIVAtHeadOfOutgoingStream;
    private bool _embedKeyAtHeadOfOutgoingStream;
    private bool _embedSaltAtHeadOfOutgoingStream;
    private bool _initialized;
    private string _keyPhrase;
    private Byte[] _saltBytes;
    private SymmetricAlgorithm _symmetricAlgorithm;
    public CipherMode CipherMode { get; }
    public PaddingMode PaddingMode { get; }
    public Byte[] IVBytes { get; }
    public Byte[] SaltBytes { get; protected set; }
    public Byte[] KeyBytes { get; }
    public bool EmbedSaltAtHeadOfOutgoingStream { get; }
    public bool EmbedKeyAtHeadOfOutgoingStream { get; }
    public bool EmbedIVAtHeadOfOutgoingStream { get; }
    public string AlgorithmName { get; }
    public SymmetricAlgorithms(string algorithmName);
    public SymmetricAlgorithms(string algorithmName, CipherMode cipherMode, PaddingMode paddingMode);
    public SymmetricAlgorithms(string algorithmName, CipherMode cipherMode, PaddingMode paddingMode, bool embedIVAtHeadOfOutgoingStream, bool embedSaltAtHeadOfOutgoingStream, bool embedKeyAtHeadOfOutgoingStream);
    private static SymmetricAlgorithms();
    public CipherMode get_CipherMode();
    public PaddingMode get_PaddingMode();
    public Byte[] get_IVBytes();
    public Byte[] get_SaltBytes();
    protected void set_SaltBytes(Byte[] value);
    public Byte[] get_KeyBytes();
    public bool get_EmbedSaltAtHeadOfOutgoingStream();
    public bool get_EmbedKeyAtHeadOfOutgoingStream();
    public bool get_EmbedIVAtHeadOfOutgoingStream();
    public string get_AlgorithmName();
    public static void SetLoggingService(ITracingService tracingService);
    public static void Encrypt(Stream plainTextStream, Stream cipherTextStream, ICryptoTransform cryptoTransform);
    public static void Decrypt(Stream cipherTextStream, Stream plainTextStream, ICryptoTransform cryptoTransform);
    public void Initialize(string keyPhrase);
    public void Initialize(string keyPhrase, Byte[] ivBytes, Byte[] saltBytes);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720")]
public void Initialize(Byte[] ivBytes, Byte[] keyBytes);
    public string Encrypt(string plainText);
    public void Encrypt(string inputPlainTextFile, string outputCipherTextFileName);
    public void Encrypt(Stream inputPlainTextStream, Stream outputCipherTextStream);
    public string Decrypt(string cipherText);
    public void Decrypt(string inputCipherTextFile, string outputPlainTextFileName);
    public void Decrypt(Stream inputCipherTextStream, Stream outputPlainTextStream);
    protected void InitializeAlgorithm(CipherMode cipherMode, PaddingMode paddingMode);
    protected void GenerateKey(string keyPhrase, Byte[] saltBytes);
    protected static string DumpBuffer(string label, Byte[] buffer);
    protected static void LogEntry(TraceLevel traceLevel, string message, Object[] args);
}
[ExtensionAttribute]
public static class XAct.Security.Permissions.PermissionSetExtensions : object {
    [ExtensionAttribute]
public static bool IsPermitted(PermissionSet permissionSet, IPermission requestedPermission);
    [ExtensionAttribute]
public static bool IsPermitted(PermissionSet permissionSet, PermissionSet requestedPermissionSet);
}
[ExtensionAttribute]
public static class XAct.SerializedApplicationSettingExtensions : object {
    [ExtensionAttribute]
public static string CompositeKey(SerializedApplicationSetting setting);
}
[DataContractAttribute]
public class XAct.SerializedObject : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SerializationMethod <SerializationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedValueType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedValue>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public SerializationMethod SerializationMethod { get; public set; }
    [DataMemberAttribute]
public string SerializedValueType { get; public set; }
    [DataMemberAttribute]
public string SerializedValue { get; public set; }
    public SerializedObject(SerializationMethod serializationMethod, Type valueType, object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SerializationMethod get_SerializationMethod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SerializationMethod(SerializationMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SerializedValueType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SerializedValueType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SerializedValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SerializedValue(string value);
}
[DataContractAttribute]
public class XAct.Services.Comm.ServiceModel.AppSoapException : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Stack>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string Method { get; public set; }
    [DataMemberAttribute]
public string Assembly { get; public set; }
    [DataMemberAttribute]
public string Stack { get; public set; }
    public AppSoapException(bool publicApi, Exception e, bool includeStack);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_Stack();
    [CompilerGeneratedAttribute]
public void set_Stack(string value);
    public virtual string ToString();
}
[DefaultBindingImplementationAttribute]
public class XAct.Services.FFConversionService : XActLibServiceBase {
    public FFConversionService(ITracingService tracingService);
    public sealed virtual TTarget Convert(object source);
    public sealed virtual object Convert(object source, Type targetType);
}
[ExtensionAttribute]
public static class XAct.SettingExtensions : object {
    [ExtensionAttribute]
public static SerializedApplicationSetting SerializeAsSerializedSetting(Setting setting, ApplicationSettings applicationSettings);
}
[DataContractAttribute]
public class XAct.Settings.ApplicationSettingAudit : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <ApplicationTennantId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <SettingFK>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SerializationMethod <SerializationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedValueType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CreatedByOrganisation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedPreviousValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Tag>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public Guid ApplicationTennantId { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public Guid SettingFK { get; public set; }
    [DataMemberAttribute]
public SerializationMethod SerializationMethod { get; public set; }
    [DataMemberAttribute]
public string SerializedValueType { get; public set; }
    [DataMemberAttribute]
public string SerializedValue { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public string CreatedBy { get; public set; }
    [DataMemberAttribute]
public string CreatedByOrganisation { get; public set; }
    [DataMemberAttribute]
public string SerializedPreviousValue { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_ApplicationTennantId();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationTennantId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual Guid get_SettingFK();
    [CompilerGeneratedAttribute]
public virtual void set_SettingFK(Guid value);
    [CompilerGeneratedAttribute]
public virtual SerializationMethod get_SerializationMethod();
    [CompilerGeneratedAttribute]
public virtual void set_SerializationMethod(SerializationMethod value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValueType();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValueType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValue();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValue(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedByOrganisation();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedByOrganisation(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedPreviousValue();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedPreviousValue(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
}
[DataContractAttribute]
public class XAct.Settings.ApplicationSettings : Settings {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ApplicationSettingScope <ContextIdentifier>k__BackingField;
    [DataMemberAttribute]
public ApplicationSettingScope ContextIdentifier { get; public set; }
    [CompilerGeneratedAttribute]
public ApplicationSettingScope get_ContextIdentifier();
    [CompilerGeneratedAttribute]
public void set_ContextIdentifier(ApplicationSettingScope value);
}
[DataContractAttribute]
public class XAct.Settings.ApplicationSettingScope : object {
    [DataMemberAttribute]
private string _environmentIdentifier;
    [DataMemberAttribute]
private string _zoneOrTierIdentifier;
    [DataMemberAttribute]
private string _hostIdentifier;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <TennantIdentifier>k__BackingField;
    public string EnvironmentIdentifier { get; public set; }
    public string ZoneOrTierIdentifier { get; public set; }
    public string HostIdentifier { get; public set; }
    [DataMemberAttribute]
public Guid TennantIdentifier { get; public set; }
    public ApplicationSettingScope(string environmentIdentifier, string zoneOrTierIdentifier, string hostIdentifier, Guid tennantIdentifier);
    public sealed virtual string get_EnvironmentIdentifier();
    public sealed virtual void set_EnvironmentIdentifier(string value);
    public sealed virtual string get_ZoneOrTierIdentifier();
    public sealed virtual void set_ZoneOrTierIdentifier(string value);
    public sealed virtual string get_HostIdentifier();
    public sealed virtual void set_HostIdentifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TennantIdentifier();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TennantIdentifier(Guid value);
}
public interface XAct.Settings.IApplicationSettingScope {
    public string EnvironmentIdentifier { get; public set; }
    public string ZoneOrTierIdentifier { get; public set; }
    public string HostIdentifier { get; public set; }
    public Guid TennantIdentifier { get; public set; }
    public abstract virtual string get_EnvironmentIdentifier();
    public abstract virtual void set_EnvironmentIdentifier(string value);
    public abstract virtual string get_ZoneOrTierIdentifier();
    public abstract virtual void set_ZoneOrTierIdentifier(string value);
    public abstract virtual string get_HostIdentifier();
    public abstract virtual void set_HostIdentifier(string value);
    public abstract virtual Guid get_TennantIdentifier();
    public abstract virtual void set_TennantIdentifier(Guid value);
}
public interface XAct.Settings.IApplicationSettingsService {
    public IApplicationSettingsServiceConfiguration Configuration { get; }
    public ApplicationSettings Current { get; }
    public abstract virtual IApplicationSettingsServiceConfiguration get_Configuration();
    public abstract virtual ApplicationSettings get_Current();
    public abstract virtual TSettings GetCurrentSettings();
    public abstract virtual TSettings Initialize(TSettings settings);
    public abstract virtual void Persist(ApplicationSettings settings, IDictionary`2<string, object> grabBag);
}
public interface XAct.Settings.IApplicationSettingsServiceConfiguration {
    public bool PersistUsingLocalTime { get; public set; }
    public abstract virtual bool get_PersistUsingLocalTime();
    public abstract virtual void set_PersistUsingLocalTime(bool value);
}
public interface XAct.Settings.IModuleSettingGroup {
    public bool HasAccess { get; }
    public abstract virtual bool get_HasAccess();
}
public interface XAct.Settings.Implementations.ISettingsEditingService {
    public abstract virtual Settings GetSettingsForEditing(Settings settings);
}
public interface XAct.Settings.IProfileSettingCollectionAccessor {
    public SettingCollection Settings { get; }
    public abstract virtual SettingCollection get_Settings();
}
internal interface XAct.Settings.IProfileSettingsInternalService {
    public abstract virtual String[] GetRoleOwner();
}
public interface XAct.Settings.IProfileSettingsService {
}
public interface XAct.Settings.ISetting {
}
public interface XAct.Settings.ISetting`1 {
    public abstract virtual void ResetValue();
}
internal interface XAct.Settings.ISettingAccessor {
    public abstract virtual Setting RetrieveSetting(string settingName);
}
public interface XAct.Settings.ISettingGroup {
}
public interface XAct.Settings.ISettings {
    public abstract virtual ModuleSettingGroup GetModule(string moduleName, Func`1<bool> hasAccess);
}
public interface XAct.Settings.ISettingsService {
    public Settings Current { get; }
    public abstract virtual Settings get_Current();
    public abstract virtual TSettings GetCurrentSettings();
    public abstract virtual void Persist();
}
public interface XAct.Settings.ISettingsServiceConfiguration {
    public bool AuditChanges { get; public set; }
    public Func`2<string, bool> IsUnlockedCallback { get; }
    public Func`2<string, bool> IsReadAuthorizedCallback { get; }
    public Func`2<string, bool> IsWriteAuthorizedCallback { get; }
    public Type SettingsType { get; }
    public abstract virtual bool get_AuditChanges();
    public abstract virtual void set_AuditChanges(bool value);
    public abstract virtual Func`2<string, bool> get_IsUnlockedCallback();
    public abstract virtual Func`2<string, bool> get_IsReadAuthorizedCallback();
    public abstract virtual Func`2<string, bool> get_IsWriteAuthorizedCallback();
    public abstract virtual Type get_SettingsType();
    public abstract virtual TSettings Build();
    public abstract virtual void Initialize(TSettings appSetting, string zoneOrTier, Func`2<string, bool> isUnlockedCallback, Func`2<string, bool> isReadAuthorizedCallback, Func`2<string, bool> isWriteAuthorizedCallback, bool auditChanges);
}
public interface XAct.Settings.ISettingValueAccessor {
    public abstract virtual TValue GetSettingValue(string settingName);
    public abstract virtual TValue TryGetSettingValue(string settingName, TValue defaultValueIfNotFound);
    public abstract virtual bool TryGetSettingValue(string settingName, TValue& value, TValue defaultValueIfNotFound);
    public abstract virtual void SetSettingValue(string propertyName, TValue propertyValue);
}
[DataContractAttribute]
public class XAct.Settings.ModuleSettingGroup : SettingGroup {
    public static string ModuleSeparatorCharacter;
    private bool _hasAccess;
    private Func`1<bool> _hasAccessFunc;
    public bool HasAccess { get; }
    public ModuleSettingGroup(string groupName, Func`1<bool> hasAccess);
    public sealed virtual bool get_HasAccess();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext streamingContext);
    [OnDeserializingAttribute]
private void OnDeserializing(StreamingContext streamingContext);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext streamingContext);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <OnDeserializing>b__8_0();
}
[CollectionDataContractAttribute]
[ComVisibleAttribute("False")]
public class XAct.Settings.ModuleSettingGroupCollection : KeyedCollection`2<string, ModuleSettingGroup> {
    protected virtual string GetKeyForItem(ModuleSettingGroup item);
}
public abstract class XAct.Settings.ProfileServiceBase : object {
    private string _cacheKey;
    protected string _typeName;
    private ITracingService _tracingService;
    private IContextStateService _contextStateService;
    protected ITracingService TracingService { get; }
    protected IContextStateService ContextStateService { get; }
    public Settings Current { get; }
    protected ProfileServiceBase(ITracingService tracingService, IContextStateService contextStateService);
    protected ITracingService get_TracingService();
    protected IContextStateService get_ContextStateService();
    public abstract virtual void Persist();
    public sealed virtual Settings get_Current();
    public sealed virtual TSettings GetCurrentSettings();
    protected abstract virtual TSettings InternalRetrieve(string context);
    protected abstract virtual TIdType[] GetIdsOfOnlyTheModulesRegisteredForThisApp();
    protected abstract virtual ModuleSettingGroup GetDefaultSettings(TIdType moduleId);
}
[DataContractAttribute]
public class XAct.Settings.SerializedApplicationSetting : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <Timestamp>k__BackingField;
    private string _environmentIdentifier;
    private string _zoneOrTierIdentifier;
    private string _hostIdentifier;
    private Guid _tennantIdentifier;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SerializationMethodRaw>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IsReadableAuthorisationInformation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IsWritableAuthorisationInformation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IsUnlockedInformation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializedValueType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <LastModifiedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Scope>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public string EnvironmentIdentifier { get; public set; }
    [DataMemberAttribute]
public string ZoneOrTierIdentifier { get; public set; }
    [DataMemberAttribute]
public string HostIdentifier { get; public set; }
    [DataMemberAttribute]
public Guid TennantIdentifier { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public bool Enabled { get; public set; }
    public SerializationMethod SerializationMethod { get; public set; }
    [DataMemberAttribute]
public int SerializationMethodRaw { get; public set; }
    [DataMemberAttribute]
public string SerializedValue { get; public set; }
    [DataMemberAttribute]
public string SerializedDefaultValue { get; public set; }
    [DataMemberAttribute]
public string IsReadableAuthorisationInformation { get; public set; }
    [DataMemberAttribute]
public string IsWritableAuthorisationInformation { get; public set; }
    [DataMemberAttribute]
public string IsUnlockedInformation { get; public set; }
    [DataMemberAttribute]
public string SerializedValueType { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [DataMemberAttribute]
public string Metadata { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    [IgnoreDataMemberAttribute]
public int Scope { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    public virtual string get_EnvironmentIdentifier();
    public virtual void set_EnvironmentIdentifier(string value);
    public virtual string get_ZoneOrTierIdentifier();
    public virtual void set_ZoneOrTierIdentifier(string value);
    public virtual string get_HostIdentifier();
    public virtual void set_HostIdentifier(string value);
    public virtual Guid get_TennantIdentifier();
    public virtual void set_TennantIdentifier(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public virtual void set_Enabled(bool value);
    public virtual SerializationMethod get_SerializationMethod();
    public virtual void set_SerializationMethod(SerializationMethod value);
    [CompilerGeneratedAttribute]
public virtual int get_SerializationMethodRaw();
    [CompilerGeneratedAttribute]
public virtual void set_SerializationMethodRaw(int value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValue();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValue(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedDefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedDefaultValue(string value);
    [CompilerGeneratedAttribute]
public virtual string get_IsReadableAuthorisationInformation();
    [CompilerGeneratedAttribute]
public virtual void set_IsReadableAuthorisationInformation(string value);
    [CompilerGeneratedAttribute]
public virtual string get_IsWritableAuthorisationInformation();
    [CompilerGeneratedAttribute]
public virtual void set_IsWritableAuthorisationInformation(string value);
    [CompilerGeneratedAttribute]
public virtual string get_IsUnlockedInformation();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnlockedInformation(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValueType();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValueType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Metadata();
    [CompilerGeneratedAttribute]
public virtual void set_Metadata(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    public virtual SerializedApplicationSetting Set(T value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public virtual int get_Scope();
    [CompilerGeneratedAttribute]
public virtual void set_Scope(int value);
}
public class XAct.Settings.SerializedSettingRenderingInformation : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RenderHintsIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RenderGroupingHints>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <RenderOrderHint>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RenderingImageHints>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RenderLabelHints>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RenderViewControlHints>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RenderEditControlHints>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RenderEditValidationHints>k__BackingField;
    public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string RenderHintsIdentifier { get; public set; }
    [DataMemberAttribute]
public string RenderGroupingHints { get; public set; }
    [DataMemberAttribute]
public int RenderOrderHint { get; public set; }
    [DataMemberAttribute]
public string RenderingImageHints { get; public set; }
    [DataMemberAttribute]
public string RenderLabelHints { get; public set; }
    [DataMemberAttribute]
public string RenderViewControlHints { get; public set; }
    [DataMemberAttribute]
public string RenderEditControlHints { get; public set; }
    [DataMemberAttribute]
public string RenderEditValidationHints { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RenderHintsIdentifier();
    [CompilerGeneratedAttribute]
public virtual void set_RenderHintsIdentifier(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RenderGroupingHints();
    [CompilerGeneratedAttribute]
public virtual void set_RenderGroupingHints(string value);
    [CompilerGeneratedAttribute]
public virtual int get_RenderOrderHint();
    [CompilerGeneratedAttribute]
public virtual void set_RenderOrderHint(int value);
    [CompilerGeneratedAttribute]
public virtual string get_RenderingImageHints();
    [CompilerGeneratedAttribute]
public virtual void set_RenderingImageHints(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RenderLabelHints();
    [CompilerGeneratedAttribute]
public virtual void set_RenderLabelHints(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RenderViewControlHints();
    [CompilerGeneratedAttribute]
public virtual void set_RenderViewControlHints(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RenderEditControlHints();
    [CompilerGeneratedAttribute]
public virtual void set_RenderEditControlHints(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RenderEditValidationHints();
    [CompilerGeneratedAttribute]
public virtual void set_RenderEditValidationHints(string value);
}
[DataContractAttribute]
[ComVisibleAttribute("False")]
public class XAct.Settings.Setting : EditableValue`1<object> {
    [DataMemberAttribute]
private Guid _id;
    [DataMemberAttribute]
private string _name;
    [DataMemberAttribute]
private string _tag;
    [DataMemberAttribute]
private string _description;
    [DataMemberAttribute]
private string _metadata;
    [DataMemberAttribute]
private SettingEditingMetadata _editingMetadata;
    public Guid Id { get; }
    public string Name { get; }
    public object Value { get; public set; }
    public string Tag { get; }
    public string Description { get; }
    public string Metadata { get; }
    public SettingEditingMetadata EditingMetadata { get; }
    public Setting(Guid id, string name, Type valueType, object value, string tag, string description, string metadata, SettingEditingMetadata editingMetadata, OfflineModelState offlineModelState);
    public Setting(string name, Type valueType, object value, string tag, string description, string metadata, SettingEditingMetadata editingMetadata, OfflineModelState offlineModelState);
    public virtual Guid get_Id();
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_Tag();
    public virtual string get_Description();
    public virtual string get_Metadata();
    public virtual SettingEditingMetadata get_EditingMetadata();
    protected virtual void SetValue(object value);
    protected virtual object GetValue();
    public virtual void ResetValue();
    public void Delete();
    public void InternalRemoveModuleFromName();
    public virtual string ToString();
}
[CollectionDataContractAttribute]
[ComVisibleAttribute("False")]
public class XAct.Settings.SettingCollection : KeyedCollection`2<string, Setting> {
    [IteratorStateMachineAttribute("XAct.Settings.SettingCollection/<GetFilteredItems>d__1")]
public IEnumerable`1<Setting> GetFilteredItems(OfflineModelState modelState);
    protected virtual string GetKeyForItem(Setting item);
    public virtual string ToString();
}
[DataContractAttribute]
public class XAct.Settings.SettingEditingMetadata : object {
    [DataMemberAttribute]
private int _scope;
    [DataMemberAttribute]
private bool _isReadAuthorized;
    private Func`1<bool> _isReadAuthorizedFunc;
    [DataMemberAttribute]
private bool _isWriteAuthorized;
    private Func`1<bool> _isWriteAuthorizedFunc;
    [DataMemberAttribute]
private bool _isUnlocked;
    private Func`1<bool> _isUnlockedFunc;
    [DataMemberAttribute]
protected object _defaultValue;
    public int Scope { get; public set; }
    public bool IsReadAuthorized { get; }
    public bool IsWriteAuthorized { get; }
    public bool IsUnlocked { get; }
    public object DefaultValue { get; }
    public SettingEditingMetadata(object defaultValue, Func`1<bool> isUnlockedFunc, Func`1<bool> isReadAuthorizedFunc, Func`1<bool> isWriteAuthorizedFunc);
    public int get_Scope();
    public void set_Scope(int value);
    public sealed virtual bool get_IsReadAuthorized();
    public sealed virtual bool get_IsWriteAuthorized();
    public bool get_IsUnlocked();
    public object get_DefaultValue();
    protected virtual void InitializeAuthorizationFuncs(Func`1<bool> isUnlocked, Func`1<bool> isReadAuthorized, Func`1<bool> isWriteAuthorized);
    [OnSerializingAttribute]
private void SerializeAuthenticationFuncMethods(StreamingContext streamingContext);
    [OnDeserializingAttribute]
private void OnDeserializing(StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
private bool <OnDeserializing>b__22_0();
    [CompilerGeneratedAttribute]
private bool <OnDeserializing>b__22_1();
    [CompilerGeneratedAttribute]
private bool <OnDeserializing>b__22_2();
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class XAct.Settings.SettingGroup : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangingEventHandler PropertyChanging;
    public static char SettingPathSeparator;
    protected SettingGroup ParentGroup;
    [DataMemberAttribute]
private string _name;
    [DataMemberAttribute]
private string _namePrefix;
    [DataMemberAttribute]
protected SettingCollection _settingsCollection;
    [DataMemberAttribute]
private SettingGroupCollection _settingsGroupCollection;
    public SettingGroup Item { get; }
    private SettingCollection XAct.Settings.IProfileSettingCollectionAccessor.Settings { get; }
    public string NamePrefix { get; }
    public string Name { get; }
    public SettingGroup(string groupName);
    internal SettingGroup(SettingGroup parentProfileSettingsGroup, string groupName);
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanging(PropertyChangingEventHandler value);
    public SettingGroup get_Item(string settingGroupName);
    private sealed virtual override SettingCollection XAct.Settings.IProfileSettingCollectionAccessor.get_Settings();
    public string get_NamePrefix();
    public sealed virtual string get_Name();
    public bool ContainsSetting(string settingName);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[DebuggerNonUserCodeAttribute]
public sealed virtual Setting RetrieveSetting(string settingName);
    public virtual TValue GetSettingValue(string settingName);
    public virtual TValue TryGetSettingValue(string settingName, TValue defaultValueIfNotFound);
    public virtual bool TryGetSettingValue(string settingName, TValue& value, TValue defaultValueIfNotFound);
    public virtual void SetSettingValue(string settingName, TValue settingValue);
    public virtual void AddSetting(string name, object value, SettingEditingMetadata settingEditingMetadata, string tag, string description, string metadata, bool throwExceptionIfAlreadyAdded, OfflineModelState offlineModelState);
    public virtual void AddSetting(string name, Type valueType, object value, SettingEditingMetadata settingEditingMetadata, string tag, string description, string metadata, bool throwExceptionIfAlreadyAdded, OfflineModelState offlineModelState);
    public virtual void AddSetting(Setting setting, bool throwExceptionIfAlreadyAdded);
    public virtual bool TryGetSetting(string key, Setting& setting);
    private void setting_PropertyChanging(object sender, PropertyChangingEventArgs e);
    private void setting_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnPropertyChanging(string propertyName);
    private void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    private void BuildupNamePrefix(SettingGroup parentProfileSettingsGroup);
    private string BuildFullPropertyName(string settingName, bool allowSeparator);
    [IteratorStateMachineAttribute("XAct.Settings.SettingGroup/<GetEnumerator>d__41")]
public sealed virtual IEnumerator`1<Setting> GetEnumerator();
    [IteratorStateMachineAttribute("XAct.Settings.SettingGroup/<System-Collections-IEnumerable-GetEnumerator>d__42")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [OnDeserializingAttribute]
private void OnDeserializing(StreamingContext streamingContext);
    public virtual string ToString();
}
[ComVisibleAttribute("False")]
[CollectionDataContractAttribute]
public class XAct.Settings.SettingGroupCollection : KeyedCollection`2<string, SettingGroup> {
    protected virtual string GetKeyForItem(SettingGroup item);
}
[DataContractAttribute]
public class XAct.Settings.SettingRenderingHints : object {
    [DataMemberAttribute]
private string _renderHintsIdentifier;
    [DataMemberAttribute]
private string _renderGroupingHints;
    [DataMemberAttribute]
private int _renderOrderHint;
    [DataMemberAttribute]
private string _renderingImageHints;
    [DataMemberAttribute]
private string _renderLabelHints;
    [DataMemberAttribute]
private string _renderViewControlHints;
    [DataMemberAttribute]
private string _renderEditControlHints;
    [DataMemberAttribute]
private string _renderEditValidationHints;
    public string RenderHintsIdentifier { get; }
    public string RenderGroupingHints { get; }
    public int RenderOrderHint { get; }
    public string RenderingImageHints { get; private set; }
    public string RenderLabelHints { get; }
    public string RenderViewControlHints { get; }
    public string RenderEditControlHints { get; }
    public string RenderEditValidationHints { get; }
    public SettingRenderingHints(string renderingHintsIdentifier, string renderingGroupHints, int renderingOrderHint, string renderingLabelsHints, string renderingViewControlHints, string renderingEditControlHints, string renderingEditValidationControlHints);
    public sealed virtual string get_RenderHintsIdentifier();
    public sealed virtual string get_RenderGroupingHints();
    public sealed virtual int get_RenderOrderHint();
    public sealed virtual string get_RenderingImageHints();
    private void set_RenderingImageHints(string value);
    public sealed virtual string get_RenderLabelHints();
    public sealed virtual string get_RenderViewControlHints();
    public sealed virtual string get_RenderEditControlHints();
    public sealed virtual string get_RenderEditValidationHints();
}
[DataContractAttribute]
public class XAct.Settings.Settings : ModuleSettingGroup {
    [DataMemberAttribute]
private ModuleSettingGroupCollection _moduleSettingsGroupCollection;
    public ModuleSettingGroupCollection Modules { get; }
    public ModuleSettingGroupCollection get_Modules();
    public sealed virtual ModuleSettingGroup GetModule(string moduleName, Func`1<bool> hasAccess);
    public virtual TValue TryGetSettingValue(string settingName, TValue defaultValueIfNotFound);
    public virtual bool TryGetSettingValue(string settingName, TValue& value, TValue defaultValueIfNotFound);
    public virtual bool TryGetSetting(string key, Setting& setting);
    public virtual void AddSetting(string name, object value, SettingEditingMetadata settingEditingInformation, string tag, string description, string metadata, bool throwExceptionIfAlreadyAdded, OfflineModelState offlineModelState);
    public virtual void AddSetting(string name, Type valueType, object value, SettingEditingMetadata settingEditingInformation, string tag, string description, string metadata, bool throwExceptionIfAlreadyAdded, OfflineModelState offlineModelState);
    public virtual void AddSetting(Setting setting, bool throwExceptionIfAlreadyAdded);
    public virtual TValue GetSettingValue(string settingName);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext streamingContext);
    [OnDeserializingAttribute]
private void OnDeserializing(StreamingContext streamingContext);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext streamingContext);
    public void ExtractModuleAndPath(string key, String& moduleName, String& variablePath, Type& type);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class XAct.SettingsExtensions : object {
    [ExtensionAttribute]
public static void Load(Settings settings, SerializedApplicationSetting[] serializedSettings, bool serializedSettingsAreOrdered, bool includeEditingInformation, Func`2<string, bool> isUnlockedCallback, Func`2<string, bool> isReadableCallback, Func`2<string, bool> isWritableCallback, OfflineModelState offlineModelState);
    [ExtensionAttribute]
public static List`1<Setting> GetAllSettings(Settings settings);
    [ExtensionAttribute]
public static void ClearAllSettings(Settings settings);
    [ExtensionAttribute]
public static TSettings CloneSettings(TSettings settings);
}
[ExtensionAttribute]
public static class XAct.StackFrameExtensions : object {
    [ExtensionAttribute]
public static Type GetDeclaringType(StackFrame stackFrame);
    [ExtensionAttribute]
public static string GetMethodSignature(StackFrame stackFrame, bool includeClassName);
}
[ExtensionAttribute]
public static class XAct.StackTraceExceptions : object {
    [ExtensionAttribute]
public static Type CurrentMethodDeclaringType(StackTrace stackTrace, int stackTraceFrameOffset);
    [ExtensionAttribute]
public static string GetMethodSignature(StackTrace stackTrace, int stackTraceFrameOffset);
}
[ExtensionAttribute]
public static class XAct.StreamExtensionsFF : object {
    [ExtensionAttribute]
public static XslCompiledTransform CreateXslCompiledTransform(Stream xslStream, bool enabledScript);
}
[ExtensionAttribute]
public static class XAct.StringDictionaryExtensions : object {
    [ExtensionAttribute]
public static TProperty GetValue(StringDictionary dictionary, string key, TProperty defaultValue);
}
[ExtensionAttribute]
public static class XAct.StringExtensionsFF : object {
    [ExtensionAttribute]
public static string Encrypt(string source, string key, Byte[] iv);
    [ExtensionAttribute]
public static string Decrypt(string source, string key, Byte[] iv);
}
[ExtensionAttribute]
public static class XAct.StringGuidExtensions : object {
    public static Guid DnsNamespace;
    public static Guid UrlNamespace;
    public static Guid IsoOidNamespace;
    private static StringGuidExtensions();
    [ExtensionAttribute]
public static Guid GenerateDeterministicGuid(string name, Guid namespaceId, int version);
    internal static void SwapByteOrder(Byte[] guid);
    private static void SwapBytes(Byte[] guid, int left, int right);
}
[ExtensionAttribute]
public static class XAct.ThreadExtensionsFF : object {
    [ExtensionAttribute]
[ObsoleteAttribute("As per http://bit.ly/wScpJd, ThreadStatic is more performant.")]
public static T GetTLSObject(Thread thread, string slotName);
    [ExtensionAttribute]
[ObsoleteAttribute("As per http://bit.ly/wScpJd, ThreadStatic is more performant.")]
public static void SetTLSObject(Thread thread, string slotName, T obj);
}
public class XAct.Threading.PrioritizedSpoolProcessor`1 : SpoolProcessor`1<TItem> {
    public PrioritizedSpoolProcessor`1(ITracingService tracingService, Func`3<int, object, TItem[]> retrievePrioritizedItemsFunction, Func`2<TItem, bool> itemProcessingFunction, Action preTimerIntervalEvent, Action postTimerIntervalEvent, int preTimerIntervalEventInterval, int postTimerIntervalEventInterval, int intervalInMilliseconds, int minThreads, int maximumNumberOfThreads);
    protected virtual void RetrieveItemsAndAllocateThreads(int totalNumberOfThreadsToAllocateThisTime);
    private void RetrieveItemsAndAllocateThreadPerPriority(int priorityI, int totalNumberOfThreadsToAllocateThisTime, Int32& leftOvers);
}
public class XAct.Threading.SpoolProcessor`1 : object {
    private int preIterationCounter;
    private int postIterationCounter;
    protected ITracingService _tracingService;
    protected Func`3<int, object, TItem[]> _getItems;
    protected Timer _threadAllocationTimer;
    protected Func`2<TItem, bool> _itemProcessingFunction;
    protected Action _preTimerIntervalEvent;
    private int _preTimerIntervalEventInterval;
    protected Action _postTimerIntervalEvent;
    private int _postTimerIntervalEventInterval;
    private long _timerInterval;
    private bool _randomizeTimerInterval;
    private int _randomizeTimerIntervalDivisor;
    private int _minimumNumberOfAvailableThreadsRequiredToRequestNewThreads;
    private int _maximumNumberOfNewThreadsToIssueAtAnyOneTime;
    public long TimerInterval { get; }
    public bool RandomizeTimerInterval { get; }
    public int RandomizeTimerIntervalDivisor { get; }
    public int MinimumNumberOfAvailableThreadsRequiredToRequestNewThreads { get; }
    public int MaximumNumberOfNewThreadsToIssueAtAnyOneTime { get; }
    public SpoolProcessor`1(ITracingService tracingService, Func`3<int, object, TItem[]> getItems, Func`2<TItem, bool> itemProcessingFunction, Action preTimerIntervalEvent, Action postTimerIntervalEvent, int preTimerIntervalEventInterval, int postTimerIntervalEventInterval, int intervalInMilliseconds, int minimumNumberOfAvailableThreadsRequiredToRequestNewThreads, int maximumNumberOfNewThreadsToIssueAtAnyOneTime, bool randomizeTimerInterval, int randomizeFraction);
    public long get_TimerInterval();
    public bool get_RandomizeTimerInterval();
    public int get_RandomizeTimerIntervalDivisor();
    public int get_MinimumNumberOfAvailableThreadsRequiredToRequestNewThreads();
    public int get_MaximumNumberOfNewThreadsToIssueAtAnyOneTime();
    public virtual void Start();
    public virtual void Stop();
    private void Timer_Elapsed(object sender, ElapsedEventArgs e);
    protected void PreTimerInterval();
    protected virtual void RetrieveItemsAndAllocateThreads(int totalNumberOfThreadsToAllocateThisTime);
    protected TItem[] RetrieveItems(int maxNumberOfItemsToRetrieve);
    protected void AllocateAndIntializeNewWorkerThreads(TItem[] items);
    protected void AllocateAndIntializeNewWorkerThread(TItem item, string tag);
    protected void PostTimerInterval();
    protected void Trace(TraceLevel traceLevel, string message, Object[] args);
    protected void TraceException(TraceLevel traceLevel, Exception exception, string message, Object[] args);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class XAct.TimerExtensions : object {
    private static Random random;
    private static TimerExtensions();
    [ExtensionAttribute]
public static void AddRandonmessToTimerInterval(Timer timer, int pollInterval);
}
[ExtensionAttribute]
public static class XAct.TraceLevelExtensions : object {
    [ExtensionAttribute]
public static TraceEventType ToTraceEventType(TraceLevel traceLevel);
}
[ExtensionAttribute]
public static class XAct.TraceSwitchExtensions : object {
    [ExtensionAttribute]
public static TraceLevel Max(TraceSwitch traceSwitch, TraceSwitch[] traceSwitchs);
    [ExtensionAttribute]
public static TraceLevel Min(TraceSwitch traceSwitch, TraceSwitch[] traceSwitchs);
    [ExtensionAttribute]
public static bool ShouldTrace(TraceSwitch traceSwitch, TraceLevel messsageTraceLevel);
}
public abstract class XAct.WebThreadAndTypeSpecificManagementServiceBase`1 : object {
    protected bool IsMutable;
    private string _cacheKey;
    private ITracingService _tracingService;
    private IContextStateService _stateService;
    protected WebThreadAndTypeSpecificManagementServiceBase`1(ITracingService tracingService, IContextStateService stateService);
    public TContext GetCurrent();
    public sealed virtual void Push(TSpecializedContext context);
    public sealed virtual TContext Pop();
    public sealed virtual int Count();
    private TContext EnsureThreadSpecificInstance();
    private Stack`1<TContext> GetOrCreateThreadSpecificStack();
    public sealed virtual TContext Create();
    protected abstract virtual TContext CreateNewSourceInstance();
    protected abstract virtual TContext CloneSourceInstanceValuesToNewThreadInstance(TContext srcContext);
    protected virtual TContext CreateNewSourceInstanceHelper();
    protected virtual TContext CloneSourceInstanceValuesToNewThreadInstanceHelper(TContext srcContext);
}
public abstract class XAct.WebThreadSpecificStackableContextManagementServiceBase`1 : WebThreadSpecificContextManagementServiceBase`1<TContext> {
    protected bool IsMutable;
    protected WebThreadSpecificStackableContextManagementServiceBase`1(ITracingService tracingService, IContextStateService stateService);
    public sealed virtual void Push(TContext context);
    public sealed virtual TContext Pop();
    public sealed virtual int Count();
    protected virtual TContext EnsureThreadSpecificInstance();
    private Stack`1<TContext> GetOrCreateThreadSpecificStack();
    public virtual TContext Create();
    protected virtual TContext CloneSourceInstanceValuesToNewThreadInstance(TContext srcContext);
}
public class XAct.Xml.XmlNodeSerializer : object {
    private XmlSerializer _serializer;
    public XmlNodeSerializer(Type destinationType);
    public XmlNode Serialize(object value);
    public object Deserialize(XmlNode node);
}
[ComVisibleAttribute("False")]
public class XAct.Xml.XmlNodeWriter : XmlWriter {
    private static CultureInfo _invariantCulture;
    private XmlAttribute _ca;
    private XmlNode _current;
    private XmlNameTable _nameTable;
    private XmlDocument _owner;
    private XmlNode _root;
    private WriteState _state;
    private string _xmlns;
    private string _xmlnsURI;
    public WriteState WriteState { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public XmlNodeWriter(XmlElement root, bool clearCurrentContents);
    public XmlNodeWriter(XmlDocument root);
    public XmlNodeWriter(XmlDocument root, bool clearCurrentContents);
    private static XmlNodeWriter();
    public virtual WriteState get_WriteState();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    private void Init(XmlNode rootNode, bool clearCurrentContents);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204")]
public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204")]
public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204")]
public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteName(string name);
    public virtual void WriteNmToken(string name);
    public virtual void WriteProcessingInstruction(string name, string text);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1820")]
public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204")]
public virtual void WriteStartDocument();
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204")]
public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
}
[ExtensionAttribute]
public static class XAct.XmlDocumentExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, string> ReadXPathValues(XmlDocument emptyXmlDocument, string relativeOrfileFullName, Dictionary`2<string, string> xPaths, IEnvironmentService environmentService, IIOService ioService);
    [ExtensionAttribute]
public static Dictionary`2<string, string> ReadXPathValues(XmlDocument emptyXmlDocument, Dictionary`2<string, string> xPaths);
    [ExtensionAttribute]
public static void ToStreamWithDeclaration(XDocument xDocument, Stream stream, Encoding encoding);
}
[ExtensionAttribute]
public static class XAct.XmlExtensions : object {
    [ExtensionAttribute]
public static TValue GetAttributeValue(XmlElement xmlElement, string tag, TValue defaultValue, bool checkChildTagsAsWell);
    [ExtensionAttribute]
public static XmlAttribute SetAttributeValue(XmlElement xmlElement, string tag, TValue value);
    [ExtensionAttribute]
public static XmlElement GetChildElement(XmlElement xmlElement, string elementName, bool createIfNotFound);
}
public static class XAct.XTensions.DirectoryInfoExtensions : object {
}
