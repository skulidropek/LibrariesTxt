public interface IHasIsReadOnly {
    public bool IsReadOnly { get; public set; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void set_IsReadOnly(bool value);
}
[ExtensionAttribute]
public static class XAct.ApplicationContextServiceExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetXActLibStateDictionary(IApplicationStateService applicationStateService);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetXActLibStateDictionary(ISessionStateService sessionStateService);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetXActLibContextDictionary(IContextStateService contextStateService);
}
public static class XAct.ApplicationEnvironment : object {
    private static PropertyInfo _cachedHttpContextPropertyInfo;
    public static object HttpContext { get; }
    public static TItem GetHttpContextPropertyByReflection(string propertyName);
    public static void SetHttpContextPropertyByReflection(string propertyName, object propertyValue);
    public static object get_HttpContext();
}
[ExtensionAttribute]
public static class XAct.ArrayExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(Array array);
    [ExtensionAttribute]
public static bool IsTooMany(Array array, int argMax);
    [ExtensionAttribute]
public static bool IsTooFew(Array array, int argMin);
    [ExtensionAttribute]
public static void Shuffle(T[] array, Random rnd);
}
[ExtensionAttribute]
public static class XAct.AssemblyArrayExtensions : object {
    private static object _lock;
    [CompilerGeneratedAttribute]
private static Func`2<Assembly, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<PrioritizedBindingDescriptor, object> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<PrioritizedBindingDescriptor, Priority> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<PrioritizedBindingDescriptor, IBindingDescriptor> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Type, DefaultBindingImplementationAttribute>, Priority> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<Type, int> CS$<>9__CachedAnonymousMethodDelegate18;
    private static ITracingService TracingService { get; }
    private static AssemblyArrayExtensions();
    private static ITracingService get_TracingService();
    [ExtensionAttribute]
public static Type[] GetTypesDecoratedWithAttribute(Assembly[] assemblies, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static KeyValuePair`2[] GetTypesDecoratedWithAttribute(Assembly[] assemblies, Func`2<TAttribute, bool> filter, bool inherit, bool allowMultiples);
    [ExtensionAttribute]
public static Type[] GetAllTypesImplementingOpenGenericType(Assembly[] assemblies);
    [ExtensionAttribute]
public static Type[] GetAllTypesImplementingOpenGenericType(Assembly[] assemblies, Type openGenericType);
    [ExtensionAttribute]
public static Type[] GetTypesImplementingType(Assembly[] assemblies, bool instantiableOnly, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static Type[] GetTypesImplementingType(Assembly[] assemblies, Type interfaceType, bool instantiableOnly, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static KeyValuePair`2[] GetTypesDecoratedWithAttribute(Assembly[] assemblies, Func`2<TAttribute, bool> filter);
    [ExtensionAttribute]
public static KeyValuePair`2[] GetTypesDecoratedWithAttributeAndInstantiateAndInvokeInterfaceMethod(Assembly[] assemblies, Action`1<TClassContract> action, Func`2<TAttribute, bool> filter, Action`4<bool, Type, TAttribute, TClassContract> optionalInvokeCallback);
    [ExtensionAttribute]
public static void ScanForAndRegisterBindingDescriptors(Assembly[] assemblies, InitializeLibraryBindingsResults& bindingsResults, bool performPreScan, Action`1<IBindingDescriptor> optionalOnErrorBindingCallback, Action`1<IBindingDescriptorResult> optionalPostBindingCallback, IEnumerable`1<IBindingDescriptorBase> servicesToRegisterBeforeXActLibServices);
    [ExtensionAttribute]
public static void ScanForDefaultBindingDescriptors(Assembly[] assemblies, IBindingDescriptor[] servicesToRegisterFirst, bool skipDuplicates, BindingScanResults& bindingScanResults);
    private static List`1<PrioritizedBindingDescriptor> BuildListFromAttributes(Assembly[] assemblies, IBindingDescriptor[] servicesToRegisterFirst, bool skipDuplicates);
    private static List`1<PrioritizedBindingDescriptor> BuildListFromInterfaces(Assembly[] assemblies, IBindingDescriptor[] servicesToRegisterFirst, bool skipDuplicates, List`1& implementationsUndeterminedDueToNotFindingInterfaceToMapTo);
    private static Type GetBestMatchForInterfaceType(Type implementationType, bool areDirectInterfaces, Type[] interfaceTypes);
    private static string NameWithNoGenericSuffix(Type implementationType);
    private static string AlreadyRegisteredKey(IBindingDescriptor serviceRegistrationDescriptor);
    private static IBindingDescriptor[] FlattenPreRegisterList(IEnumerable`1<IBindingDescriptorBase> servicesToRegisterBeforeXActLibServices);
    [CompilerGeneratedAttribute]
private static string <ScanForAndRegisterBindingDescriptors>b__1(Assembly a);
    [CompilerGeneratedAttribute]
private static object <ScanForDefaultBindingDescriptors>b__3(PrioritizedBindingDescriptor x);
    [CompilerGeneratedAttribute]
private static Priority <ScanForDefaultBindingDescriptors>b__4(PrioritizedBindingDescriptor x);
    [CompilerGeneratedAttribute]
private static IBindingDescriptor <ScanForDefaultBindingDescriptors>b__5(PrioritizedBindingDescriptor x);
    [CompilerGeneratedAttribute]
private static Priority <BuildListFromAttributes>b__9(KeyValuePair`2<Type, DefaultBindingImplementationAttribute> kvp);
    [CompilerGeneratedAttribute]
private static bool <GetBestMatchForInterfaceType>b__11(Type x);
    [CompilerGeneratedAttribute]
private static int <GetBestMatchForInterfaceType>b__12(Type x);
}
[ExtensionAttribute]
public static class XAct.AssemblyExtensions : object {
    private static List`1<string> _errorAssemblies;
    private static AssemblyExtensions();
    [ExtensionAttribute]
public static string GetProductCompanyName(Assembly assembly);
    [ExtensionAttribute]
public static string GetProductCopyright(Assembly assembly);
    [ExtensionAttribute]
public static string GetProductName(Assembly assembly);
    [ExtensionAttribute]
public static string GetProductTitle(Assembly assembly);
    [ExtensionAttribute]
public static string GetProductDescription(Assembly assembly);
    [ExtensionAttribute]
public static IDictionary`2<Type, T> GetTypesDecoratedWithAttribute(Assembly assembly, bool inherit);
    [ExtensionAttribute]
public static AssemblyName[] GetReferencedAssemblies(Assembly assembly);
    [ExtensionAttribute]
public static Type GetTypeEndingWith(Assembly assembly, string typeName);
    [ExtensionAttribute]
public static List`1<KeyValuePair`2<Type, TAttribute>> GetTypesDecoratedWithAttibutes(Assembly assembly, Func`2<TAttribute, bool> filter, bool inherit, bool allowMultiples);
    [ExtensionAttribute]
public static Type[] GetTypesDecoratedWithAttributes(Assembly assembly, Func`2<TAttribute, bool> filter, bool inherit);
    [ExtensionAttribute]
public static Type[] GetExportedTypesSafely(Assembly assembly);
    [ExtensionAttribute]
public static Type[] GetAllTypesImplementingOpenGenericType(Assembly assembly);
    [ExtensionAttribute]
public static Type[] GetAllTypesImplementingOpenGenericType(Assembly assembly, Type openGenericType);
    [ExtensionAttribute]
public static Type[] GetTypesImplementingType(Assembly assembly, bool instantiableOnly, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static Type[] GetTypesImplementingType(Assembly assembly, Type interfaceType, bool instantiableOnly, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static Type[] GetTypesDecoratedWithAttributes(Assembly assembly, Type attributeType, Func`2<Attribute, bool> filter, bool inherit);
}
public interface XAct.Authentication.IHasUserNameAndPassword {
    public string Name { get; public set; }
    public string Password { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Password();
    public abstract virtual void set_Password(string value);
}
public interface XAct.Authentication.IHasUserNameAndPasswordReadOnly {
    public string Name { get; }
    public string Password { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Password();
}
[ExtensionAttribute]
public static class XAct.BoolExtensions : object {
    [ExtensionAttribute]
public static string ToString(bool booleanValue, bool useShorthand);
}
[ExtensionAttribute]
public static class XAct.ByteArrayExtensions : object {
    [ExtensionAttribute]
public static string ToHexString(Byte[] byteArray);
    private static char GetHexChar(int number);
    [ExtensionAttribute]
public static Stream ToStream(Byte[] bytesArray);
    [ExtensionAttribute]
public static string ToString(Byte[] byteArray, Encoding encoding);
    [ExtensionAttribute]
public static Char[] ByteArrayToCharArray(Byte[] bytesArray, Encoding encoding);
    [ExtensionAttribute]
public static string ByteArrayToBase64(Byte[] bytesArray);
    [ExtensionAttribute]
public static Byte[] ChangeEncoding(Byte[] bytesArray, Encoding srcEncoding, Encoding targetEncoding);
}
public class XAct.Caching.DateTimeCacheItem`1 : FuncCacheItem`1<TData> {
    [CompilerGeneratedAttribute]
private DateTime <ExpiresOn>k__BackingField;
    public DateTime ExpiresOn { get; private set; }
    public DateTimeCacheItem`1(TData value, DateTime expiresOn);
    [CompilerGeneratedAttribute]
public DateTime get_ExpiresOn();
    [CompilerGeneratedAttribute]
private void set_ExpiresOn(DateTime value);
}
public class XAct.Caching.FuncCacheItem`1 : object {
    private TData _value;
    protected bool _dataFetched;
    [CompilerGeneratedAttribute]
private Func`1<bool> <ValidDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<TData> <DataFactoryDelegate>k__BackingField;
    public Func`1<bool> ValidDelegate { get; protected set; }
    public Func`1<TData> DataFactoryDelegate { get; protected set; }
    public TData Value { get; }
    public bool Valid { get; }
    public FuncCacheItem`1(Func`1<TData> dataFactory, Func`1<bool> isValid);
    [CompilerGeneratedAttribute]
public Func`1<bool> get_ValidDelegate();
    [CompilerGeneratedAttribute]
protected void set_ValidDelegate(Func`1<bool> value);
    [CompilerGeneratedAttribute]
public Func`1<TData> get_DataFactoryDelegate();
    [CompilerGeneratedAttribute]
protected void set_DataFactoryDelegate(Func`1<TData> value);
    public sealed virtual TData get_Value();
    public sealed virtual bool get_Valid();
}
public interface XAct.Caching.ICacheItem`1 {
    public TData Value { get; }
    public abstract virtual TData get_Value();
}
public interface XAct.Caching.ICachingService {
    public abstract virtual void Set(string key, TData objectToCache, Func`1<bool> isValid);
    public abstract virtual void Set(string key, TData objectToCache, TimeSpan expiryTimespan);
    public abstract virtual void Set(string key, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public abstract virtual bool TryGet(string key, TData& result);
    public abstract virtual bool TryGet(string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public abstract virtual void Remove(string key);
    public abstract virtual void Clear(string keyPrefix);
}
public interface XAct.Caching.ICultureInfoBasedCachingService {
    public abstract virtual void Set(CultureInfo cultureInfo, string key, TData objectToCache, Func`1<bool> isValid);
    public abstract virtual void Set(CultureInfo cultureInfo, string key, TData objectToCache, TimeSpan expiryTimespan);
    public abstract virtual void Set(CultureInfo cultureInfo, string key, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public abstract virtual bool TryGet(CultureInfo cultureInfo, string key, TData& result);
    public abstract virtual bool TryGet(CultureInfo cultureInfo, string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public abstract virtual void Remove(CultureInfo cultureInfo, string key);
    public abstract virtual void Clear(CultureInfo cultureInfo);
}
public interface XAct.Caching.IDateTimeCacheItem`1 {
    public string Key { get; }
    public DateTime ExpiresOn { get; }
    public abstract virtual string get_Key();
    public abstract virtual DateTime get_ExpiresOn();
}
public interface XAct.Caching.IHttpContextCachingService {
}
public class XAct.Caching.Implementations.CachingService : object {
    private ICachingService _cachingService;
    private ICachingService _nonWebCachingService;
    private IEnvironmentService _environmentService;
    private IDateTimeService _dateTimeService;
    private ITracingService _tracingService;
    private bool IsWebEnvironment { get; }
    public CachingService(IEnvironmentService environmentService, IDateTimeService dateTimeService, ITracingService tracingService);
    public sealed virtual bool TryGet(string key, TData& result);
    public sealed virtual bool TryGet(string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual void Set(string key, TData objectToCache, Func`1<bool> isValid);
    public sealed virtual void Set(string key, TData objectToCache, TimeSpan expiryTimespan);
    public sealed virtual void Set(string key, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual void Remove(string key);
    public sealed virtual void Clear(string prefix);
    private bool get_IsWebEnvironment();
    private ICachingService GetCachingService();
}
public class XAct.Caching.Implementations.CultureInfoBasedCachingService : object {
    private ICachingService _cachingService;
    public CultureInfoBasedCachingService(ICachingService cachingService);
    public sealed virtual void Set(CultureInfo cultureInfo, string key, TData objectToCache, Func`1<bool> isValid);
    public sealed virtual void Set(CultureInfo cultureInfo, string key, TData objectToCache, TimeSpan expiryTimespan);
    public sealed virtual void Set(CultureInfo cultureInfo, string key, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual bool TryGet(CultureInfo cultureInfo, string key, TData& result);
    public sealed virtual bool TryGet(CultureInfo cultureInfo, string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual void Remove(CultureInfo cultureInfo, string key);
    public sealed virtual void Clear(CultureInfo cultureInfo);
    private string MakeCultureBasedKey(CultureInfo cultureInfo, string key);
    private string MakePrefix(CultureInfo cultureInfo);
}
public class XAct.Caching.Implementations.NonHttpContextCachingService : object {
    private IDictionary`2<string, IHasValid> _items;
    private ITracingService _tracingService;
    private IDateTimeService _dateTimeService;
    private IEnvironmentService _environmentService;
    public NonHttpContextCachingService(ITracingService tracingService, IDateTimeService dateTimeService, IEnvironmentService environmentService);
    public sealed virtual void Set(string key, TData objectToCache, Func`1<bool> isValid);
    public sealed virtual void Set(string key, TData objectToCache, TimeSpan expiryTimespan);
    public sealed virtual void Set(string key, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual bool TryGet(string key, TData& result);
    public sealed virtual bool TryGet(string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    private bool InternalTryGet(string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual void Remove(string key);
    public sealed virtual void Clear(string prefix);
}
public class XAct.Caching.Implementations.ReflectionHttpContextCachingService : object {
    private IEnvironmentService _environmentService;
    private ITracingService _tracingService;
    private IDateTimeService _dateTimeService;
    private MethodInfo _addItemMemberInfo;
    private MethodInfo _getEnumeratorMemberInfo;
    private MethodInfo _getItemMemberInfo;
    private object _httpContextCache;
    private MethodInfo _removeItemMemberInfo;
    private object HttpContextCache { get; }
    public ReflectionHttpContextCachingService(ITracingService tracingService, IDateTimeService dateTimeService, IEnvironmentService environmentService);
    public sealed virtual bool TryGet(string key, TData& result);
    public sealed virtual bool TryGet(string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    private bool InternalTryGet(string key, TData& result, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual void Set(string key, TData objectToCache, Func`1<bool> isValid);
    public sealed virtual void Set(string key, TData objectToCache, TimeSpan expiryTimespan);
    public sealed virtual void Set(string key, Func`1<TData> dataFactory, TimeSpan expiryTimespan, bool selfUpdating);
    public sealed virtual void Remove(string key);
    public sealed virtual void Clear(string prefix);
    private object get_HttpContextCache();
    private void Insert(string key, ICacheItem`1<TData> cacheItem);
    private void InsertToCacheByReflection(string key, object value, DateTime absoluteExpirationDate);
    private void AddToCacheByReflection(string key, object value, DateTime absoluteExpirationDate);
    private object GetItemByReflection(string key);
    private void RemoveItemByReflection(string key);
    private IDictionaryEnumerator GetEnumeratorByReflection();
}
[CompilerGeneratedAttribute]
internal class XAct.Caching.NamespaceDoc : object {
}
public class XAct.Caching.SelfUpdatingCacheItem`1 : FuncCacheItem`1<TItem> {
    [CompilerGeneratedAttribute]
private bool <SelfUpdating>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeSpan>k__BackingField;
    public bool SelfUpdating { get; private set; }
    public TimeSpan TimeSpan { get; private set; }
    public SelfUpdatingCacheItem`1(Func`1<TItem> dataFactory, TimeSpan timeSpan, DateTime invalidateUTCDateTime, bool selfUpdating);
    [CompilerGeneratedAttribute]
public bool get_SelfUpdating();
    [CompilerGeneratedAttribute]
private void set_SelfUpdating(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeSpan();
    [CompilerGeneratedAttribute]
private void set_TimeSpan(TimeSpan value);
    public void Reset(Func`1<bool> isValid);
}
public abstract class XAct.CancelEventArgsBase`1 : EventArgs {
    private bool _cancel;
    protected TItem _item;
    public bool Cancel { get; public set; }
    protected CancelEventArgsBase`1(TItem item);
    protected CancelEventArgsBase`1(TItem item, bool allowDefaultValue);
    public bool get_Cancel();
    public void set_Cancel(bool value);
}
[DataContractAttribute]
public enum XAct.CaseSensitivity : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CaseSensitivity Undefined;
    [EnumMemberAttribute]
public static CaseSensitivity Sensitive;
    [EnumMemberAttribute]
public static CaseSensitivity Insensitive;
}
[DataContractAttribute]
public class XAct.Categorization.Tag : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ApplicationTennantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CategoryFK>k__BackingField;
    [CompilerGeneratedAttribute]
private TagCategory <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public Guid ApplicationTennantId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> CategoryFK { get; public set; }
    [DataMemberAttribute]
public TagCategory Category { get; public set; }
    [DataMemberAttribute]
public bool Enabled { get; public set; }
    [DataMemberAttribute]
public int Order { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public string CreatedBy { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_ApplicationTennantId();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationTennantId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_CategoryFK();
    [CompilerGeneratedAttribute]
public virtual void set_CategoryFK(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual TagCategory get_Category();
    [CompilerGeneratedAttribute]
public virtual void set_Category(TagCategory value);
    [CompilerGeneratedAttribute]
public virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    [CompilerGeneratedAttribute]
public virtual void set_Order(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
}
[DataContractAttribute]
public class XAct.Categorization.TagCategory : ReferenceDataGuidIdBase {
    [CompilerGeneratedAttribute]
private Guid <ApplicationTennantId>k__BackingField;
    [DataMemberAttribute]
public Guid ApplicationTennantId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_ApplicationTennantId();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationTennantId(Guid value);
}
[ExtensionAttribute]
public static class XAct.CharArrayExtensions : object {
    [ExtensionAttribute]
public static string ToString(Char[] charArray);
}
[DataContractAttribute]
public abstract class XAct.Claims.PersistableClaimBase : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OwnerFK>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public Guid OwnerFK { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [DataMemberAttribute]
public string Authority { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_OwnerFK();
    [CompilerGeneratedAttribute]
public virtual void set_OwnerFK(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Authority();
    [CompilerGeneratedAttribute]
public virtual void set_Authority(string value);
}
[ExtensionAttribute]
public static class XAct.CollectionPageExtensions : object {
    [ExtensionAttribute]
public static CollectionPage`1<TItem> ToCollectionPage(IEnumerable`1<TItem> source, int pageIndex, int pageSize);
    [ExtensionAttribute]
public static CollectionPage`1<TItem> ToCollectionPage(IQueryable`1<TItem> source, int pageIndex, int pageSize);
}
public class XAct.Collections.AscendingComparer`1 : object {
    public sealed virtual int Compare(object x, object y);
    private static int QuickCompare(object x, object y);
}
public class XAct.Collections.Comparers.FuncComparer`1 : object {
    private Func`3<T, T, bool> _comparer;
    private Func`2<T, object> _keyExtractor;
    [CompilerGeneratedAttribute]
private static Func`3<object, object, object> CS$<>9__CachedAnonymousMethodDelegate1;
    public FuncComparer`1(Func`2<T, object> keyExtractor);
    public FuncComparer`1(Func`3<T, T, bool> comparer);
    public FuncComparer`1(Func`2<T, object> keyExtractor, Func`3<T, T, bool> comparer);
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
    [CompilerGeneratedAttribute]
private static object <GetHashCode>b__0(object x, object y);
}
[CollectionDataContractAttribute]
public class XAct.Collections.CovariantCollection`2 : object {
    private ICollection`1<TInnerCollectionItem> _wrappedCollection;
    public int Count { get; }
    public bool IsReadOnly { get; public set; }
    public CovariantCollection`2(ICollection`1<TInnerCollectionItem> collectionToWrap);
    public sealed virtual void Add(TExposedAs item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TExposedAs item);
    public sealed virtual void CopyTo(TExposedAs[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual bool Remove(TExposedAs item);
    public sealed virtual IEnumerator`1<TExposedAs> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static TInnerCollectionItem ConvertInterfaceTypeBackToInnerCollectionType(TExposedAs item);
    private sealed virtual override T XAct.IHasInnerItemReadOnly.GetInnerItem();
}
public class XAct.Collections.DescendingComparer`1 : object {
    public sealed virtual int Compare(object x, object y);
    private static int QuickCompare(object x, object y);
}
public class XAct.Collections.GenericComparer`1 : object {
    private SortDirection _sortDirection;
    private Collection`1<PropertyInfo> _propertyInfos;
    public GenericComparer`1(String[] propertyNames);
    public GenericComparer`1(SortDirection sortDirection, String[] propertyNames);
    public sealed virtual int Compare(T x, T y);
    private void Initialize(String[] propertyNames);
}
public class XAct.Collections.GenericSubListComparer`1 : object {
    private Int32[] _indexes;
    private SortDirection _sortDirection;
    public GenericSubListComparer`1(Int32[] indexesToSortBy);
    public GenericSubListComparer`1(SortDirection sortDirection, Int32[] indexesToSortBy);
    public sealed virtual int Compare(T x, T y);
}
public class XAct.Collections.HashSetCollection`1 : object {
    private static object _placeHolder;
    protected Dictionary`2<T, object> InternalDictionary;
    protected object PlaceHolder { get; }
    public int Count { get; }
    public bool IsReadOnly { get; public set; }
    public HashSetCollection`1(IEqualityComparer`1<T> comparer);
    private static HashSetCollection`1();
    protected object get_PlaceHolder();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface XAct.Collections.IQuerySortSpecification {
    public string Key { get; }
    public SortDirection Direction { get; }
    public abstract virtual string get_Key();
    public abstract virtual SortDirection get_Direction();
}
public interface XAct.Collections.IWrappedList {
    public IList InnerList { get; }
    public abstract virtual IList get_InnerList();
}
[DefaultMemberAttribute("Item")]
public class XAct.Collections.MRUList`2 : object {
    private Func`2<TItem, TItemId> _idMethod;
    private LinkedList`1<MruItem<TItem, TItemId>> _linkedList;
    private Dictionary`2<TItemId, LinkedListNode`1<MruItem<TItem, TItemId>>> _itemDictionary;
    private bool _addNewestAtStart;
    private int _maxCapacity;
    [CompilerGeneratedAttribute]
private static Func`2<MruItem<TItem, TItemId>, TItem> CS$<>9__CachedAnonymousMethodDelegate6;
    public bool AddNewestAtStart { get; public set; }
    public TItem Item { get; }
    public int Count { get; }
    public MRUList`2(Func`2<TItem, TItemId> anonymousMethodToRetrieveVertexIdentifier);
    public bool get_AddNewestAtStart();
    public void set_AddNewestAtStart(bool value);
    public TItem get_Item(TItemId itemId);
    public int get_Count();
    public bool Contains(TItemId itemId);
    public TItem Find(TItemId itemId, bool throwAnExceptionIfNotFound);
    public void MakeNewest(TItem item);
    public void MakeNewest(TItemId itemId);
    public TItem RemoveNewest();
    public TItem PeekNewest();
    public IEnumerable`1<TItem> RemoveOldestWhileCount(int maxCount);
    public TItem RemoveOldest();
    public TItem PeekOldest();
    public void Add(TItem item);
    public TItem Remove(TItem item);
    public TItem Remove(TItemId itemId);
    public void Clear();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void MakeNewest(LinkedListNode`1<MruItem<TItem, TItemId>> linkedListNode);
    private void AddAsNewest(LinkedListNode`1<MruItem<TItem, TItemId>> linkedListNode);
    private void AddAsOldest(LinkedListNode`1<MruItem<TItem, TItemId>> linkedListNode);
    private LinkedListNode`1<MruItem<TItem, TItemId>> GetLatest();
    private LinkedListNode`1<MruItem<TItem, TItemId>> GetOldest();
    [CompilerGeneratedAttribute]
private static TItem <GetEnumerator>b__5(MruItem<TItem, TItemId> mruItem);
}
[CompilerGeneratedAttribute]
internal class XAct.Collections.NamespaceDoc : object {
}
public class XAct.Collections.ObjectWrapperCollection`3 : object {
    private ICollection`1<TWrappedEntity> _wrappedCollection;
    public int Count { get; }
    public bool IsReadOnly { get; public set; }
    public ObjectWrapperCollection`3(ICollection`1<TWrappedEntity> collectionToWrap);
    public sealed virtual void Add(TEntityWrapperInterface item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TEntityWrapperInterface item);
    public sealed virtual void CopyTo(TEntityWrapperInterface[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual bool Remove(TEntityWrapperInterface item);
    public sealed virtual IEnumerator`1<TEntityWrapperInterface> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static TEntityWrapperInterface BuildEntityWrapper(TWrappedEntity wrappedEntity);
}
[DefaultMemberAttribute("Item")]
public class XAct.Collections.ReadOnlyDictionary`2 : object {
    private IDictionary`2<TKey, TValue> _dict;
    private bool _IsReadOnly;
    public int Count { get; }
    public bool IsReadOnly { get; public set; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    public ICollection`1<TValue> Values { get; }
    public int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    public sealed virtual ICollection`1<TValue> get_Values();
    public void Add(KeyValuePair`2<TKey, TValue> item);
    public void Clear();
    public bool Contains(KeyValuePair`2<TKey, TValue> item);
    public void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public bool Remove(KeyValuePair`2<TKey, TValue> item);
}
[DataContractAttribute]
public enum XAct.Collections.SortDirection : Enum {
    public int value__;
    [EnumMemberAttribute]
public static SortDirection Undefined;
    [EnumMemberAttribute]
public static SortDirection Ascending;
    [EnumMemberAttribute]
public static SortDirection Descending;
}
[DefaultMemberAttribute("Item")]
public class XAct.Collections.TreeNode`1 : object {
    private List`1<TreeNode`1<T>> _children;
    [CompilerGeneratedAttribute]
private TreeNode`1<T> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TreeNode`1<T>, IEnumerable`1<TreeNode`1<T>>> CS$<>9__CachedAnonymousMethodDelegate2;
    public TreeNode`1<T> Parent { get; private set; }
    public T Value { get; public set; }
    public TreeNode`1<T> Item { get; }
    public IEnumerable`1<TreeNode`1<T>> Ancestors { get; }
    public IEnumerable`1<TreeNode`1<T>> Descendants { get; }
    public IEnumerable`1<TreeNode`1<T>> Children { get; }
    public IEnumerable`1<TreeNode`1<T>> Siblings { get; }
    public IEnumerable`1<TreeNode`1<T>> SelfAndChildren { get; }
    public IEnumerable`1<TreeNode`1<T>> SelfAndAncestors { get; }
    public IEnumerable`1<TreeNode`1<T>> SelfAndDescendants { get; }
    public IEnumerable`1<TreeNode`1<T>> SelfAndSiblings { get; }
    public IEnumerable`1<TreeNode`1<T>> All { get; }
    public IEnumerable`1<TreeNode`1<T>> SameLevel { get; }
    public int Level { get; }
    public IEnumerable`1<TreeNode`1<T>> SelfAndSameLevel { get; }
    public TreeNode`1<T> Root { get; }
    public bool IsRoot { get; }
    public TreeNode`1(T value);
    [CompilerGeneratedAttribute]
public TreeNode`1<T> get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TreeNode`1<T> value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    public TreeNode`1<T> get_Item(int index);
    public TreeNode`1<T> Add(T value, int index);
    public void Add(TreeNode`1<T> childNode, int index);
    public TreeNode`1<T> AddFirstChild(T value);
    public void AddFirstChild(TreeNode`1<T> childNode);
    public TreeNode`1<T> AddFirstSibling(T value);
    public void AddFirstSibling(TreeNode`1<T> childNode);
    public TreeNode`1<T> AddLastSibling(T value);
    public void AddLastSibling(TreeNode`1<T> childNode);
    public TreeNode`1<T> AddParent(T value);
    public void AddParent(TreeNode`1<T> parentNode);
    public IEnumerable`1<TreeNode`1<T>> get_Ancestors();
    public IEnumerable`1<TreeNode`1<T>> get_Descendants();
    public IEnumerable`1<TreeNode`1<T>> get_Children();
    public IEnumerable`1<TreeNode`1<T>> get_Siblings();
    private bool Other(TreeNode`1<T> node);
    public IEnumerable`1<TreeNode`1<T>> get_SelfAndChildren();
    public IEnumerable`1<TreeNode`1<T>> get_SelfAndAncestors();
    public IEnumerable`1<TreeNode`1<T>> get_SelfAndDescendants();
    public IEnumerable`1<TreeNode`1<T>> get_SelfAndSiblings();
    public IEnumerable`1<TreeNode`1<T>> get_All();
    public IEnumerable`1<TreeNode`1<T>> get_SameLevel();
    public int get_Level();
    public IEnumerable`1<TreeNode`1<T>> get_SelfAndSameLevel();
    public IEnumerable`1<TreeNode`1<T>> GetNodesAtLevel(int level);
    private IEnumerable`1<TreeNode`1<T>> GetNodesAtLevelInternal(int level);
    public TreeNode`1<T> get_Root();
    public void Disconnect();
    public bool get_IsRoot();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TreeNode`1<T>> GetEnumerator();
    public virtual string ToString();
    public static IEnumerable`1<TreeNode`1<T>> CreateTree(IEnumerable`1<T> values, Func`2<T, TId> idSelector, Func`2<T, Nullable`1<TId>> parentIdSelector);
    public static IEnumerable`1<TreeNode`1<T>> CreateTree(IEnumerable`1<TreeNode`1<T>> rootNodes, Func`2<T, TId> idSelector, Func`2<T, Nullable`1<TId>> parentIdSelector);
    private static bool IsSameId(TId id, Nullable`1<TId> parentId);
    public static bool op_Equality(TreeNode`1<T> value1, TreeNode`1<T> value2);
    public static bool op_Inequality(TreeNode`1<T> value1, TreeNode`1<T> value2);
    public virtual bool Equals(object anderePeriode);
    public bool Equals(TreeNode`1<T> value);
    public bool Equals(TreeNode`1<T> value1, TreeNode`1<T> value2);
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object value1, object value2);
    public sealed virtual int GetHashCode(object obj);
    public virtual int GetHashCode();
    public int GetHashCode(TreeNode`1<T> value);
    [CompilerGeneratedAttribute]
private bool <Add>b__0(TreeNode`1<T> n);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<TreeNode`1<T>> <get_SelfAndDescendants>b__1(TreeNode`1<T> c);
    [CompilerGeneratedAttribute]
private static TreeNode`1<T> <CreateTree>b__7(T v);
    [CompilerGeneratedAttribute]
private static TreeNode`1<T> <CreateTree>b__a(TreeNode`1<T> n);
    [CompilerGeneratedAttribute]
private static bool <CreateTree>b__c(TreeNode`1<T> n);
}
public class XAct.Collections.VersionComparer : object {
    public sealed virtual int Compare(object x, object y);
    private static int QuickCompare(object x, object y);
}
[CollectionDataContractAttribute]
[DefaultMemberAttribute("Item")]
public class XAct.Collections.WrappedList`1 : object {
    private IList _innerList;
    public TItem Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; public set; }
    public bool IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public WrappedList`1(IList innerList);
    public TItem get_Item(int index);
    public void set_Item(int index, TItem value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override T XAct.IHasInnerItemReadOnly.GetInnerItem();
    public int IndexOf(TItem item);
    public void Insert(int index, TItem item);
    public void Add(TItem item);
    public bool Contains(TItem item);
    public void CopyTo(TItem[] array, int arrayIndex);
    public bool Remove(TItem item);
    protected IEnumerator GetEnumerator();
}
public abstract class XAct.Commands.CommandMessageBase : object {
    [CompilerGeneratedAttribute]
private string <ResourceFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UndoTitle>k__BackingField;
    public string ResourceFilter { get; public set; }
    public string Title { get; public set; }
    public string UndoTitle { get; public set; }
    protected CommandMessageBase(string title, string undoTitle, string resourceFilter);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResourceFilter();
    [CompilerGeneratedAttribute]
public void set_ResourceFilter(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UndoTitle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UndoTitle(string value);
}
[DataContractAttribute]
public abstract class XAct.Commands.CommandMessageHandlerBase`1 : object {
    private EventHandler CanExecuteChanged;
    [IgnoreDataMemberAttribute]
protected bool _canUndo;
    private Func`2<TCommandMessage, IResponse> _validateForExecution;
    private Func`2<TCommandMessage, IResponse> _validateForUnexecute;
    private Action`1<TCommandMessage> _execute;
    private Action`1<TCommandMessage> _unexecute;
    [CompilerGeneratedAttribute]
private static Func`2<TCommandMessage, IResponse> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<TCommandMessage, IResponse> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<TCommandMessage> CS$<>9__CachedAnonymousMethodDelegate5;
    public bool Undoable { get; }
    protected CommandMessageHandlerBase`1(Action`1<TCommandMessage> execute);
    protected CommandMessageHandlerBase`1(Action`1<TCommandMessage> execute, Func`2<TCommandMessage, IResponse> validateForExecution, bool canUndo, Func`2<TCommandMessage, IResponse> validateForUnexecute, Action`1<TCommandMessage> unExecute);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool get_Undoable();
    public sealed virtual bool CanExecute(TCommandMessage commandMessage);
    public virtual IResponse ValidateForExecution(TCommandMessage commandMessage);
    public virtual void Execute(TCommandMessage commandMessage);
    protected virtual void OnCanExecuteChanged(EventArgs e);
    public sealed virtual bool CanUnexecute(TCommandMessage commandMessage);
    public virtual IResponse ValidateForUnexecution(TCommandMessage commandMessage);
    public virtual void Unexecute(TCommandMessage commandMessage);
    protected Response cantUndoError();
    [CompilerGeneratedAttribute]
private static IResponse <.ctor>b__0(TCommandMessage x);
    [CompilerGeneratedAttribute]
private static IResponse <.ctor>b__1(TCommandMessage x);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(TCommandMessage x);
}
public interface XAct.Commands.Configuration.ICommandServiceConfiguration {
    public bool RecordAllCommands { get; public set; }
    public abstract virtual bool get_RecordAllCommands();
    public abstract virtual void set_RecordAllCommands(bool value);
}
public class XAct.Commands.Configuration.Implementations.CommandServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <RecordAllCommands>k__BackingField;
    public bool RecordAllCommands { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RecordAllCommands();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecordAllCommands(bool value);
}
public class XAct.Commands.ExecutableRunnerActionResult : object {
    [CompilerGeneratedAttribute]
private int <IndentLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StepType>k__BackingField;
    [CompilerGeneratedAttribute]
private IHasExecutableAction <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public int IndentLevel { get; public set; }
    public Type StepType { get; public set; }
    public IHasExecutableAction Step { get; public set; }
    public bool Success { get; public set; }
    public Exception Exception { get; public set; }
    public TimeSpan Duration { get; public set; }
    [CompilerGeneratedAttribute]
public int get_IndentLevel();
    [CompilerGeneratedAttribute]
public void set_IndentLevel(int value);
    [CompilerGeneratedAttribute]
public Type get_StepType();
    [CompilerGeneratedAttribute]
public void set_StepType(Type value);
    [CompilerGeneratedAttribute]
public IHasExecutableAction get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(IHasExecutableAction value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    public virtual string ToString();
}
public class XAct.Commands.HasExecutableActionRunner : object {
    private static int _indentLevel;
    public bool ThrowOnException;
    public string ContextTag;
    public bool AddToGlobalResults;
    private Type[] _stepTypes;
    private List`1<ExecutableRunnerActionResult> _summary;
    [CompilerGeneratedAttribute]
private static ExecutableRunnerActionResult[] <GlobalSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ExecutableRunnerActionResult> <Callback>k__BackingField;
    public static int IndentLevel { get; }
    public static ExecutableRunnerActionResult[] GlobalSummary { get; protected set; }
    public bool Initialized { get; protected set; }
    public ExecutableRunnerActionResult[] Summary { get; }
    public Action`1<ExecutableRunnerActionResult> Callback { get; public set; }
    public HasExecutableActionRunner(string contextTag, Type[] stepTypes);
    public HasExecutableActionRunner(string contextTag, bool throwOnException, bool addToGlobalResults, Action`1<ExecutableRunnerActionResult> callback, Type[] stepTypes);
    private static HasExecutableActionRunner();
    public static int get_IndentLevel();
    [CompilerGeneratedAttribute]
public static ExecutableRunnerActionResult[] get_GlobalSummary();
    [CompilerGeneratedAttribute]
protected static void set_GlobalSummary(ExecutableRunnerActionResult[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Initialized();
    [CompilerGeneratedAttribute]
protected void set_Initialized(bool value);
    public ExecutableRunnerActionResult[] get_Summary();
    [CompilerGeneratedAttribute]
public Action`1<ExecutableRunnerActionResult> get_Callback();
    [CompilerGeneratedAttribute]
public void set_Callback(Action`1<ExecutableRunnerActionResult> value);
    public sealed virtual void Execute();
    private void InternalExecute();
    private void InvokeStep(ExecutableRunnerActionResult runState);
    public static void AddToGlobalSummary(ExecutableRunnerActionResult executableRunnerActionResult);
}
public interface XAct.Commands.ICommandMessage {
    public string UndoTitle { get; public set; }
    public abstract virtual string get_UndoTitle();
    public abstract virtual void set_UndoTitle(string value);
}
public interface XAct.Commands.ICommandMessageHandler`1 {
    public abstract virtual void add_CanExecuteChanged(EventHandler value);
    public abstract virtual void remove_CanExecuteChanged(EventHandler value);
    public abstract virtual bool CanExecute(TCommandMessage commandMessage);
    public abstract virtual bool CanUnexecute(TCommandMessage commandMessage);
    public abstract virtual IResponse ValidateForExecution(TCommandMessage commandMessage);
    public abstract virtual IResponse ValidateForUnexecution(TCommandMessage commandMessage);
    public abstract virtual void Unexecute(TCommandMessage commandMessage);
}
public interface XAct.Commands.ICommandMessageRecordable {
}
public interface XAct.Commands.ICommandMessageResult`1 {
    public T Result { get; public set; }
    public abstract virtual T get_Result();
    public abstract virtual void set_Result(T value);
}
public interface XAct.Commands.ICommandMessageState`1 {
    public T State { get; public set; }
    public abstract virtual T get_State();
    public abstract virtual void set_State(T value);
}
public interface XAct.Commands.ICommandRecordService {
    public abstract virtual void RecordCommand(ICommandMessage commandMessage, bool commandIsUndoable, bool unexecute);
}
public interface XAct.Commands.ICommandService {
    public ICommandServiceConfiguration Configuration { get; }
    public int HistoryIndex { get; }
    public int HistoryLength { get; }
    public abstract virtual ICommandServiceConfiguration get_Configuration();
    public abstract virtual int get_HistoryIndex();
    public abstract virtual int get_HistoryLength();
    public abstract virtual void Execute(ICommandMessage[] commandMessages);
    public abstract virtual void Execute(bool executeImmetiately, ICommandMessage[] commandMessages);
    public abstract virtual void Undo(int steps);
    public abstract virtual void Redo(int steps);
}
public interface XAct.Commands.ISimpleContextCommandService {
    public abstract virtual void Execute();
}
[DataContractAttribute]
public class XAct.Commands.Models.CommandRecord : object {
    private IDateTimeService _dateTimeService;
    private bool _enabled;
    private Nullable`1<DateTime> _createdOnUtc;
    private Nullable`1<DateTime> _lastModifiedOnUtc;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ApplicationTennantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Undoable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializationMethod <SerializationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializedValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public bool Enabled { get; public set; }
    [DataMemberAttribute]
public Guid ApplicationTennantId { get; public set; }
    [DataMemberAttribute]
public string UserIdentifier { get; public set; }
    [DataMemberAttribute]
public bool Undoable { get; public set; }
    [DataMemberAttribute]
public bool Operation { get; public set; }
    [DataMemberAttribute]
public SerializationMethod SerializationMethod { get; public set; }
    [DataMemberAttribute]
public string SerializedValueType { get; public set; }
    [DataMemberAttribute]
public string SerializedValue { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    public CommandRecord(IDateTimeService dateTimeService);
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public virtual Guid get_ApplicationTennantId();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationTennantId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_UserIdentifier();
    [CompilerGeneratedAttribute]
public virtual void set_UserIdentifier(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Undoable();
    [CompilerGeneratedAttribute]
public virtual void set_Undoable(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_Operation();
    [CompilerGeneratedAttribute]
public virtual void set_Operation(bool value);
    [CompilerGeneratedAttribute]
public virtual SerializationMethod get_SerializationMethod();
    [CompilerGeneratedAttribute]
public virtual void set_SerializationMethod(SerializationMethod value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValueType();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValueType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValue();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValue(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
    public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
}
[CompilerGeneratedAttribute]
internal class XAct.Commands.NamespaceDoc : object {
}
public class XAct.Commands.Services.Implementations.CommandRecordService : object {
    private IDateTimeService _dateTimeService;
    private IApplicationTennantService _applicationTennantService;
    private IPrincipalService _principalService;
    private IRepositoryService _repositoryService;
    public CommandRecordService(IDateTimeService dateTimeService, IApplicationTennantService applicationTennantService, IPrincipalService principalService, IRepositoryService repositoryService);
    public sealed virtual void RecordCommand(ICommandMessage commandMessage, bool commandIsUndoable, bool unexecute);
}
public class XAct.Commands.Services.Implementations.CommandService : object {
    private ICommandRecordService _commandRecordService;
    private ICommandServiceState _commandMessageDispatcherServiceState;
    [CompilerGeneratedAttribute]
private ICommandServiceConfiguration <Configuration>k__BackingField;
    public ICommandServiceConfiguration Configuration { get; private set; }
    public int HistoryLength { get; }
    public int HistoryIndex { get; private set; }
    public CommandService(ICommandRecordService commandRecordService, ICommandServiceConfiguration commandServiceConfiguration, ICommandServiceState commandMessageDispatcherServiceState);
    [CompilerGeneratedAttribute]
public sealed virtual ICommandServiceConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(ICommandServiceConfiguration value);
    public sealed virtual int get_HistoryLength();
    public sealed virtual int get_HistoryIndex();
    private void set_HistoryIndex(int value);
    public sealed virtual void Execute(ICommandMessage[] commandMessages);
    public sealed virtual void Execute(bool executeImmetiately, ICommandMessage[] commandMessages);
    public sealed virtual void Undo(int steps);
    public sealed virtual void Redo(int steps);
    public void ClearHistory();
    public ICommandMessageHandler`1<TCommandMessage> GetHandler(TCommandMessage commandMessage);
    public object GetHandlerInternal(TCommandMessage commandMessage, Type commandMessageType);
    private void EnqueueCommands(IEnumerable`1<ICommandMessage> commandMessages);
    private void ExecuteCommands();
    private void InvokeOperationAndUpdateCommandRecord(CommandHistoryItem kvp, bool unexecute);
    private void AddToHistory(CommandHistoryItem kvp);
}
public interface XAct.Commands.Services.State.ICommandServiceState {
    public Queue`1<CommandHistoryItem> Queue { get; }
    public List`1<CommandHistoryItem> History { get; }
    public int HistoryIndex { get; public set; }
    public abstract virtual Queue`1<CommandHistoryItem> get_Queue();
    public abstract virtual List`1<CommandHistoryItem> get_History();
    public abstract virtual int get_HistoryIndex();
    public abstract virtual void set_HistoryIndex(int value);
}
public interface XAct.Commands.Services.State.IContextSpecificCommandExecutionQueue {
}
public interface XAct.Commands.Services.State.IContextSpecificCommandHistoryList {
}
[DataContractAttribute]
public class XAct.Commands.Services.State.Implementations.CommandHistoryItem : KeyValue`2<CommandRecord, ICommandMessage> {
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <Handler>k__BackingField;
    [DataMemberAttribute]
[DynamicAttribute]
public object Handler { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(object value);
}
public class XAct.Commands.Services.State.Implementations.CommandServiceState : object {
    private string _counterKey;
    private IContextStateService _contextStateService;
    private IContextSpecificCommandExecutionQueue _contextSpecificCommandExecutionQueue;
    private IContextSpecificCommandHistoryList _contextSpecificCommandHistoryList;
    public Queue`1<CommandHistoryItem> Queue { get; }
    public List`1<CommandHistoryItem> History { get; }
    public int HistoryIndex { get; public set; }
    public CommandServiceState(IContextStateService contextStateService, IContextSpecificCommandExecutionQueue contextSpecificCommandExecutionQueue, IContextSpecificCommandHistoryList contextSpecificCommandHistoryList);
    public sealed virtual Queue`1<CommandHistoryItem> get_Queue();
    public sealed virtual List`1<CommandHistoryItem> get_History();
    public sealed virtual int get_HistoryIndex();
    public sealed virtual void set_HistoryIndex(int value);
}
public class XAct.Commands.Services.State.Implementations.ContextSpecificCommandExecutionQueue : WebThreadSpecificContextManagementServiceBase`1<Queue`1<CommandHistoryItem>> {
    public ContextSpecificCommandExecutionQueue(ITracingService tracingService, IContextStateService contextStateService);
    protected virtual Queue`1<CommandHistoryItem> CreateNewSourceInstance();
}
public class XAct.Commands.Services.State.Implementations.ContextSpecificCommandHistoryList : WebThreadSpecificContextManagementServiceBase`1<List`1<CommandHistoryItem>> {
    public ContextSpecificCommandHistoryList(ITracingService tracingService, IContextStateService contextStateService);
    protected virtual List`1<CommandHistoryItem> CreateNewSourceInstance();
}
public class XAct.Commands.SimpleContextCommandService : object {
    private ICommandService _commandService;
    private IContextStateService _contextStateService;
    private SimpleContextCommandService(ICommandService commandService, IContextStateService contextStateService);
    public sealed virtual void Execute();
}
public class XAct.Configuration.ConfigurationException : Exception {
    public ConfigurationException(string message);
    public ConfigurationException(string message, Exception innerException);
}
public class XAct.Configuration.ConfigurationSettingsAttribute : Attribute {
}
public interface XAct.Configuration.IApplicationConfigurationService {
}
[CompilerGeneratedAttribute]
internal class XAct.Configuration.NamespaceDoc : object {
}
public static class XAct.Constants.PerformanceCounters : object {
    public static string RepositoryServiceQueriesAll;
    public static string RepositoryServiceQueriesDeferred;
    public static string RepositoryServiceQueriesImmediate;
    public static string RepositoryServiceQueriesCommitDuration;
    public static string RepositoryServiceQueriesCommitEntitiesChanged;
    public static string RepositoryServiceQueriesCommitEntitiesAdded;
    public static string RepositoryServiceQueriesCommitEntitiesUpdated;
    public static string RepositoryServiceQueriesCommitEntitiesDeleted;
    private static PerformanceCounters();
}
public class XAct.Constants.Serialization : object {
    public static string DefaultNamespaceRoot;
    private static Serialization();
}
public class XAct.Context : object {
    private object _Context;
    public Context(object context);
    public sealed virtual TContextType GetContext();
}
public enum XAct.Culture : Enum {
    public int value__;
    public static Culture Undefined;
    public static Culture CurrentCulture;
    public static Culture CurrentExceptionCulture;
    public static Culture CurrentUICulture;
    public static Culture CurrentCurrencyCulture;
}
[ExtensionAttribute]
public static class XAct.CultureInfoExtensions : object {
    [ExtensionAttribute]
public static String[] BuildCultureCodeList(CultureInfo culture, bool addInvariant, bool lowered);
}
public class XAct.Data.CollectionPage`1 : Collection`1<TItem> {
    private int _totalCount;
    private int _pageIndex;
    private int _pageSize;
    private bool _hasPreviousPage;
    private bool _hasNextPage;
    private int _numberOfPages;
    public int TotalCount { get; public set; }
    public int PageIndex { get; public set; }
    public int PageSize { get; public set; }
    public bool HasPreviousPage { get; }
    public bool HasNextPage { get; }
    public int TotalPages { get; }
    public CollectionPage`1(IQueryable`1<TItem> source, int index, int pageSize);
    public CollectionPage`1(IEnumerable`1<TItem> source, int index, int pageSize);
    public sealed virtual int get_TotalCount();
    public sealed virtual void set_TotalCount(int value);
    public sealed virtual int get_PageIndex();
    public sealed virtual void set_PageIndex(int value);
    public sealed virtual int get_PageSize();
    public sealed virtual void set_PageSize(int value);
    public sealed virtual bool get_HasPreviousPage();
    public sealed virtual bool get_HasNextPage();
    public sealed virtual int get_TotalPages();
    private static void ThrowNotImplemented(string argumentName, object argumentValue);
}
[DataContractAttribute]
public class XAct.Data.DataSources.DataSource : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemote>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectorClassification>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataStoreCatalogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataStoreTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataStoreSerializedIdentifierNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayMetaData>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public bool IsRemote { get; public set; }
    [DataMemberAttribute]
public string ConnectorClassification { get; public set; }
    [DataMemberAttribute]
public string ConnectionProviderType { get; public set; }
    [DataMemberAttribute]
public string ConnectionString { get; public set; }
    [DataMemberAttribute]
public string ConnectionMetaData { get; public set; }
    [DataMemberAttribute]
public string DataStoreCatalogName { get; public set; }
    [DataMemberAttribute]
public string DataStoreTableName { get; public set; }
    [DataMemberAttribute]
public string DataStoreSerializedIdentifierNames { get; public set; }
    [DataMemberAttribute]
public string DisplayMetaData { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsRemote();
    [CompilerGeneratedAttribute]
public virtual void set_IsRemote(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectorClassification();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectorClassification(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionProviderType();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionProviderType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionMetaData();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionMetaData(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataStoreCatalogName();
    [CompilerGeneratedAttribute]
public virtual void set_DataStoreCatalogName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataStoreTableName();
    [CompilerGeneratedAttribute]
public virtual void set_DataStoreTableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataStoreSerializedIdentifierNames();
    [CompilerGeneratedAttribute]
public virtual void set_DataStoreSerializedIdentifierNames(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayMetaData();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayMetaData(string value);
}
[DataContractAttribute]
public class XAct.Data.DataSources.DataSourceIdentifier : object {
    [DataMemberAttribute]
private Guid _sourceId;
    [DataMemberAttribute]
private string _serializedIdentities;
    public Guid DataSourceId { get; }
    public string DataSourceSerializedIdentities { get; }
    public DataSourceIdentifier(Guid dataSourceId, string serializedIdentities);
    public void Initialize(Guid dataSourceId, string serializedIdentities);
    public sealed virtual Guid get_DataSourceId();
    public sealed virtual string get_DataSourceSerializedIdentities();
}
public interface XAct.Data.DataSources.IDataSource {
    public string Name { get; public set; }
    public string ConnectorClassification { get; public set; }
    public string ConnectionProviderType { get; public set; }
    public string ConnectionString { get; public set; }
    public string ConnectionMetaData { get; public set; }
    public string DataStoreCatalogName { get; public set; }
    public string DataStoreTableName { get; public set; }
    public string DataStoreSerializedIdentifierNames { get; public set; }
    public string DisplayMetaData { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_ConnectorClassification();
    public abstract virtual void set_ConnectorClassification(string value);
    public abstract virtual string get_ConnectionProviderType();
    public abstract virtual void set_ConnectionProviderType(string value);
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual string get_ConnectionMetaData();
    public abstract virtual void set_ConnectionMetaData(string value);
    public abstract virtual string get_DataStoreCatalogName();
    public abstract virtual void set_DataStoreCatalogName(string value);
    public abstract virtual string get_DataStoreTableName();
    public abstract virtual void set_DataStoreTableName(string value);
    public abstract virtual string get_DataStoreSerializedIdentifierNames();
    public abstract virtual void set_DataStoreSerializedIdentifierNames(string value);
    public abstract virtual string get_DisplayMetaData();
    public abstract virtual void set_DisplayMetaData(string value);
}
public interface XAct.Data.DataSources.IDataSourcesService {
    public abstract virtual IDataSource GetDataSourceConnector(Guid dataSourceId);
}
public class XAct.Data.DbRepositorySettings : object {
    [CompilerGeneratedAttribute]
private string <ConnectionStringSettingsName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterPrefix>k__BackingField;
    public string ConnectionStringSettingsName { get; public set; }
    public string ParameterPrefix { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionStringSettingsName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionStringSettingsName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ParameterPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParameterPrefix(string value);
}
public interface XAct.Data.IDbConnectionSettings {
    public string ConnectionStringSettingsName { get; public set; }
    public string ParameterPrefix { get; public set; }
    public abstract virtual string get_ConnectionStringSettingsName();
    public abstract virtual void set_ConnectionStringSettingsName(string value);
    public abstract virtual string get_ParameterPrefix();
    public abstract virtual void set_ParameterPrefix(string value);
}
public abstract class XAct.Data.Repositories.Implementations.ApplicationTennantIdSpecificDistributedGuidIdRepositoryServiceBase`1 : DistributedGuidIdRepositoryServiceBase`1<TElement> {
    protected IApplicationTennantService _applicationTennantService;
    protected ApplicationTennantIdSpecificDistributedGuidIdRepositoryServiceBase`1(ITracingService tracingService, IApplicationTennantService applicationTennantService, IRepositoryService repositoryService);
    public virtual void DeleteOnCommit(TElement element);
    public virtual void PersistOnCommit(TElement element);
    public virtual TElement GetById(Guid id);
    public virtual bool Exists(Guid id);
    public virtual bool Exists(Expression`1<Func`2<TElement, bool>> where);
    public virtual int Count();
    public virtual int Count(Expression`1<Func`2<TElement, bool>> where);
    public virtual IQueryable`1<TElement> Retrieve(PagedQuerySpecification pagedQuerySpecification);
    protected virtual TElement Get(Expression`1<Func`2<TElement, bool>> where);
    protected virtual IQueryable`1<TElement> Retrieve(Expression`1<Func`2<TElement, bool>> where, Func`2<IQueryable`1<TElement>, IOrderedQueryable`1<TElement>> orderBy, PagedQuerySpecification pagedQuerySpecification);
}
public abstract class XAct.Data.Repositories.Implementations.ApplicationTennantIdSpecificReferenceDataDistributedGuidIdRepositoryServiceBase`1 : ApplicationTennantIdSpecificDistributedGuidIdRepositoryServiceBase`1<TEntity> {
    protected ApplicationTennantIdSpecificReferenceDataDistributedGuidIdRepositoryServiceBase`1(ITracingService tracingService, IApplicationTennantService applicationTennantService, IRepositoryService repositoryService);
    public sealed virtual TEntity GetByText(string text);
}
public abstract class XAct.Data.Repositories.Implementations.DistributedGuidIdRepositoryServiceBase`1 : RepositoryServiceBase`2<TElement, Guid> {
    protected DistributedGuidIdRepositoryServiceBase`1(ITracingService tracingService, IRepositoryService repositoryService);
    protected virtual Expression`1<Func`2<TElement, bool>> IdEquality(Guid id);
}
public abstract class XAct.Data.Repositories.Implementations.ReferenceDataDistributedGuidIdCodedRepositoryServiceBase`1 : DistributedGuidIdRepositoryServiceBase`1<TEntity> {
    protected ReferenceDataDistributedGuidIdCodedRepositoryServiceBase`1(ITracingService tracingService, IRepositoryService repositoryService);
    public sealed virtual TEntity GetByText(string text);
    public sealed virtual TEntity GetByCode(string code);
}
public abstract class XAct.Data.Repositories.Implementations.ReferenceDataDistributedGuidIdRepositoryServiceBase`1 : DistributedGuidIdRepositoryServiceBase`1<TEntity> {
    protected ReferenceDataDistributedGuidIdRepositoryServiceBase`1(ITracingService tracingService, IRepositoryService repositoryService);
    public sealed virtual TEntity GetByText(string text);
}
public abstract class XAct.Data.Repositories.Implementations.ReferenceDataRepositoryServiceBase`2 : RepositoryServiceBase`2<TElement, TId> {
    protected ReferenceDataRepositoryServiceBase`2(ITracingService tracingService, IRepositoryService repositoryService);
    public sealed virtual TElement GetByText(string text);
}
public abstract class XAct.Data.Repositories.Implementations.RepositoryServiceBase`2 : ServiceBase {
    protected IRepositoryService _repositoryService;
    protected RepositoryServiceBase`2(ITracingService tracingService, IRepositoryService repositoryService);
    protected abstract virtual Expression`1<Func`2<TModel, bool>> IdEquality(TId id);
    public virtual bool Exists(TId id);
    public virtual bool Exists(Expression`1<Func`2<TModel, bool>> where);
    public virtual int Count();
    public virtual int Count(Expression`1<Func`2<TModel, bool>> where);
    public virtual TModel GetById(TId id);
    public virtual void PersistOnCommit(TModel element);
    public virtual void DeleteOnCommit(TModel element);
    public virtual IQueryable`1<TModel> Retrieve(PagedQuerySpecification pagedQuerySpecification);
    protected virtual TModel Get(Expression`1<Func`2<TModel, bool>> where);
    protected virtual IQueryable`1<TModel> Retrieve(Expression`1<Func`2<TModel, bool>> where, Func`2<IQueryable`1<TModel>, IOrderedQueryable`1<TModel>> orderBy, PagedQuerySpecification pagedQuerySpecification);
}
[DataContractAttribute]
public class XAct.Data.Updates.DataStoreUpdateLog : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public string EnvironmentIdentifier { get; public set; }
    [DataMemberAttribute]
public bool Enabled { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string get_EnvironmentIdentifier();
    [CompilerGeneratedAttribute]
public virtual void set_EnvironmentIdentifier(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
}
[ExtensionAttribute]
public static class XAct.DateTimeExtensions : object {
    private static DateTime SQLMinDate;
    [CompilerGeneratedAttribute]
private static Func`3<DateTime, DateTime, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public static IDateTimeService DateTimeService { get; }
    private static DateTimeExtensions();
    public static IDateTimeService get_DateTimeService();
    [ExtensionAttribute]
public static bool IsStartOfGregorianCalendar(Nullable`1<DateTime> date);
    [ExtensionAttribute]
public static bool IsStartOfGregorianCalendar(DateTime date);
    [ExtensionAttribute]
public static string Format(Nullable`1<DateTime> dateTime, CultureInfo cultureInfo, string format, string ifNull);
    [ExtensionAttribute]
public static string Format(DateTime dateTime, CultureInfo cultureInfo, string format);
    [ExtensionAttribute]
public static string ToStandardStringWithMilliseconds(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime WeekStart(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime Weekend(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime MonthStart(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime MonthEnd(DateTime dateTime);
    [ExtensionAttribute]
public static int Quarter(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime QuarterStart(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime QuarterEnd(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime YearStart(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime YearEnd(DateTime dateTime);
    [ExtensionAttribute]
public static int WeekNumber(DateTime dateTime, bool firstWeekIsZero);
    [ExtensionAttribute]
public static DateTime DateOfWeek(DateTime dateTime, int weekNumber);
    [ExtensionAttribute]
public static int ISOWeekNumber(DateTime dt);
    [ExtensionAttribute]
public static int Age(DateTime dateOfBirth);
    [ExtensionAttribute]
public static bool IsWeekend(DateTime value);
    [ExtensionAttribute]
public static DateTime GetLastDayOfMonth(DateTime dateTime);
    [ExtensionAttribute]
public static string DateTimeAsISODate(DateTime dt);
    [ExtensionAttribute]
public static double ElapsedSeconds(DateTime input);
    [ExtensionAttribute]
public static DateTime RoundToNearestPreviousInterval(DateTime dateTime, int intervalMilliseconds);
    [ExtensionAttribute]
public static IEnumerable`1<DateTime> GetIntervalsBetweenDateTimes(DateTime beginning, Nullable`1<DateTime> end, int intervalMilliseconds);
    [ExtensionAttribute]
public static long DateTimeToUnixTimeStamp(DateTime dateTime);
    [ExtensionAttribute]
public static void ValidateIsUtc(DateTime dateTime, string argumentName);
    [ExtensionAttribute]
public static DateTime AddWorkingDays(DateTime specificDate, int workingDaysToAdd);
    [ExtensionAttribute]
public static bool IsWeekDay(DateTime date, bool mondayIsStartOfWeek);
    [ExtensionAttribute]
public static bool IsFutureDate(Nullable`1<DateTime> date, bool nullDateReturnsTrue);
    [ExtensionAttribute]
public static bool IsFutureDate(DateTime dateOnly);
    [ExtensionAttribute]
public static bool IsPastDate(Nullable`1<DateTime> date, bool nullDateReturnsTrue);
    [ExtensionAttribute]
public static bool IsPastDate(DateTime date);
    [ExtensionAttribute]
public static bool IsFutureDateTime(DateTime dateTime);
    [ExtensionAttribute]
public static bool IsFutureDateTime(Nullable`1<DateTime> dateTime, bool nullDateReturnsTrue);
    [ExtensionAttribute]
public static bool IsEarlierDateThan(Nullable`1<DateTime> dateTime, Nullable`1<DateTime> comparedToDateTime, bool nullDateTimeReturnsTrue, bool comparedToDateTimeReturnsTrue);
    [ExtensionAttribute]
public static bool IsLaterDateThan(Nullable`1<DateTime> first, Nullable`1<DateTime> second, bool nullDateTimeReturnsTrue, bool comparedToDateTimeReturnsTrue);
    [ExtensionAttribute]
public static bool IsTodaysDate(Nullable`1<DateTime> date);
    [ExtensionAttribute]
public static bool IsSameDateAs(Nullable`1<DateTime> a, Nullable`1<DateTime> b);
    [ExtensionAttribute]
public static bool IsSameDateAs(DateTime date, DateTime comparedToDate);
    [ExtensionAttribute]
public static bool IsSameDateTimeAs(DateTime dateTime, DateTime comparedToDateTime);
    [ExtensionAttribute]
public static bool IsSameDateTimeAs(Nullable`1<DateTime> dateTime, Nullable`1<DateTime> comparedToDateTime, Nullable`1<TimeSpan> deltaAllowed);
    [ExtensionAttribute]
public static bool IsSameDateTimeAs(Nullable`1<DateTime> dateTime, Nullable`1<DateTime> comparedToDateTime, bool onlyUseDateComponentForComparison);
    [ExtensionAttribute]
public static bool IsSameDateAs(DateTime a, DateTime b, bool onlyUseDateComponentForComparison);
    [CompilerGeneratedAttribute]
private static bool <IsSameDateAs>b__5(DateTime dt1, DateTime dt2);
}
public class XAct.DependencyResolver : object {
    public static object DependencyInjectionContainer;
    public static object DependencyInjectionContainerConnector;
    private static IDependencyResolver _current;
    [CompilerGeneratedAttribute]
private static IInitializeLibraryBindingsResults <BindingResults>k__BackingField;
    [CompilerGeneratedAttribute]
private static Exception <LastResolutionException>k__BackingField;
    public static IDependencyResolver Current { get; }
    public static IInitializeLibraryBindingsResults BindingResults { get; public set; }
    public static Exception LastResolutionException { get; public set; }
    private static DependencyResolver();
    public static IDependencyResolver get_Current();
    public static IDependencyResolver GetNamedContext(string name);
    [CompilerGeneratedAttribute]
public static IInitializeLibraryBindingsResults get_BindingResults();
    [CompilerGeneratedAttribute]
public static void set_BindingResults(IInitializeLibraryBindingsResults value);
    [CompilerGeneratedAttribute]
public static Exception get_LastResolutionException();
    [CompilerGeneratedAttribute]
public static void set_LastResolutionException(Exception value);
    public sealed virtual void SetInternal(object o);
    public sealed virtual T GetInstance(bool throwExceptionIfNotFound);
    public sealed virtual object GetInstance(Type type, bool throwExceptionIfNotFound);
    public sealed virtual T GetInstance(string tag, bool throwExceptionIfNotFound);
    public sealed virtual object GetInstance(Type type, string tag, bool throwExceptionIfNotFound);
    public sealed virtual IEnumerable`1<T> GetInstances();
    public sealed virtual IEnumerable`1<object> GetInstances(Type type);
    [CompilerGeneratedAttribute]
private static T <GetInstances>b__0(object o);
}
public class XAct.Diagnostics.DurationTracingService : object {
    [CompilerGeneratedAttribute]
private IDurationTracingServiceState <State>k__BackingField;
    public IDurationTracingServiceState State { get; private set; }
    public DurationTracingService(IDurationTracingServiceState state);
    [CompilerGeneratedAttribute]
public sealed virtual IDurationTracingServiceState get_State();
    [CompilerGeneratedAttribute]
private void set_State(IDurationTracingServiceState value);
    public sealed virtual void Start(string tag);
    public sealed virtual void Stop(string tag);
    public sealed virtual void Clear(string tag);
    public KeyValue`2[] Report();
    private Timer GetTimer(string tag);
}
public interface XAct.Diagnostics.ITracingService {
    public abstract virtual void QuickTrace(string message, Object[] arguments);
    public abstract virtual void Trace(TraceLevel traceLevel, string message, Object[] arguments);
    public abstract virtual void Trace(int stackTraceOffset, TraceLevel traceLevel, string message, Object[] arguments);
    public abstract virtual void TraceException(TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
    public abstract virtual void TraceException(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
    public abstract virtual void DebugTrace(TraceLevel traceLevel, string message, Object[] arguments);
    public abstract virtual void DebugTrace(int stackTraceFrameOffset, TraceLevel traceLevel, string message, Object[] arguments);
    public abstract virtual void DebugTraceException(TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
    public abstract virtual void DebugTraceException(int stackTraceFrameOffset, TraceLevel traceLevel, Exception exception, string message, Object[] arguments);
}
[CompilerGeneratedAttribute]
internal class XAct.Diagnostics.NamespaceDoc : object {
}
public interface XAct.Diagnostics.Performance.IPerformanceCounterService {
    public IPerformanceCounterServiceConfiguration Configuration { get; }
    public abstract virtual IPerformanceCounterServiceConfiguration get_Configuration();
    public abstract virtual bool Initialize();
    public abstract virtual TValue GetRawValue(string categoryName, string performanceCounterName, bool raiseExceptionIfNotFound);
    public abstract virtual TValue GetRawValue(string categoryName, string performanceCounterName, string instanceName, bool raiseExceptionIfNotFound);
    public abstract virtual TValue GetComputedValue(string categoryName, string performanceCounterName, bool raiseExceptionIfNotFound);
    public abstract virtual TValue GetComputedValue(string categoryName, string performanceCounterName, string instanceName, bool raiseExceptionIfNotFound);
    public abstract virtual bool Set(string categoryName, string performanceCounterName, long amount, bool raiseExceptionIfNotFound);
    public abstract virtual bool Set(string categoryName, string performanceCounterName, string instanceName, long amount, bool raiseExceptionIfNotFound);
    public abstract virtual bool Offset(string categoryName, string performanceCounterName, long amount, bool raiseExceptionIfNotFound);
    public abstract virtual bool Offset(string categoryName, string performanceCounterName, string instanceName, long amount, bool raiseExceptionIfNotFound);
    public abstract virtual bool UpdateDenominator(string categoryName, string performanceCounterName, Nullable`1<long> amount, string nameExtension, bool raiseExceptionIfNotFound);
    public abstract virtual bool UpdateDenominator(string categoryName, string performanceCounterName, string instanceName, Nullable`1<long> amount, string nameExtension, bool raiseExceptionIfNotFound);
}
[AttributeUsageAttribute("1092")]
public class XAct.Diagnostics.Performance.PerformanceCounterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceCounterUpdateType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetSubOperationCounters>k__BackingField;
    public bool Enabled { get; private set; }
    public PerformanceCounterUpdateType Type { get; public set; }
    public string CategoryName { get; private set; }
    public string Name { get; private set; }
    public int Order { get; public set; }
    public string Tag { get; public set; }
    public bool ResetSubOperationCounters { get; public set; }
    public PerformanceCounterAttribute(string categoryName, string counterName, bool enabled, string tag, PerformanceCounterUpdateType updateType, bool resetSubOperationCounters);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public PerformanceCounterUpdateType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PerformanceCounterUpdateType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CategoryName();
    [CompilerGeneratedAttribute]
private void set_CategoryName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Order(int value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public bool get_ResetSubOperationCounters();
    [CompilerGeneratedAttribute]
public void set_ResetSubOperationCounters(bool value);
}
public enum XAct.Diagnostics.Performance.PerformanceCounterUpdateType : Enum {
    public int value__;
    public static PerformanceCounterUpdateType Increment;
    public static PerformanceCounterUpdateType Automatic;
}
[DefaultBindingImplementationAttribute("XAct.Diagnostics.Performance.Services.Configuration.IPerformanceCounterServiceConfiguration", "2", "-1", "")]
public class XAct.Diagnostics.Performance.Services.Configuration.Implementations.PerformanceCounterServiceConfiguration : object {
    private bool _enabled;
    private bool _attemptSelfInstall;
    private bool _forceCategoryRecreationIfSelfInstalling;
    private bool _raiseExceptionsIfPerformanceCounterNotFound;
    [CompilerGeneratedAttribute]
private PerformanceCounterCategoryCreationInformation[] <CounterCategoryCreationInformation>k__BackingField;
    public bool Enabled { get; public set; }
    public bool AttemptSelfInstall { get; public set; }
    public bool ForceCategoryRecreationIfSelfInstalling { get; public set; }
    public bool RaiseExceptionsIfPerformanceCounterNotFound { get; public set; }
    public PerformanceCounterCategoryCreationInformation[] CounterCategoryCreationInformation { get; public set; }
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    public sealed virtual bool get_AttemptSelfInstall();
    public sealed virtual void set_AttemptSelfInstall(bool value);
    public sealed virtual bool get_ForceCategoryRecreationIfSelfInstalling();
    public sealed virtual void set_ForceCategoryRecreationIfSelfInstalling(bool value);
    public sealed virtual bool get_RaiseExceptionsIfPerformanceCounterNotFound();
    public sealed virtual void set_RaiseExceptionsIfPerformanceCounterNotFound(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerformanceCounterCategoryCreationInformation[] get_CounterCategoryCreationInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CounterCategoryCreationInformation(PerformanceCounterCategoryCreationInformation[] value);
}
public interface XAct.Diagnostics.Performance.Services.Configuration.IPerformanceCounterServiceConfiguration {
    public bool AttemptSelfInstall { get; public set; }
    public bool ForceCategoryRecreationIfSelfInstalling { get; public set; }
    public bool RaiseExceptionsIfPerformanceCounterNotFound { get; public set; }
    public PerformanceCounterCategoryCreationInformation[] CounterCategoryCreationInformation { get; public set; }
    public abstract virtual bool get_AttemptSelfInstall();
    public abstract virtual void set_AttemptSelfInstall(bool value);
    public abstract virtual bool get_ForceCategoryRecreationIfSelfInstalling();
    public abstract virtual void set_ForceCategoryRecreationIfSelfInstalling(bool value);
    public abstract virtual bool get_RaiseExceptionsIfPerformanceCounterNotFound();
    public abstract virtual void set_RaiseExceptionsIfPerformanceCounterNotFound(bool value);
    public abstract virtual PerformanceCounterCategoryCreationInformation[] get_CounterCategoryCreationInformation();
    public abstract virtual void set_CounterCategoryCreationInformation(PerformanceCounterCategoryCreationInformation[] value);
}
public class XAct.Diagnostics.Performance.Services.Entities.PerformanceCounterCategoryCreationInformation : object {
    private bool _initialized;
    private PerformanceCounterCreationInformation[] _counterCreationInformations;
    private string _description;
    private string _name;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    public bool Initialized { get; public set; }
    public Guid Id { get; public set; }
    public Byte[] Timestamp { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public PerformanceCounterCreationInformation[] CounterCreationInformation { get; public set; }
    public PerformanceCounterCategoryCreationInformation(string name, string description, PerformanceCounterCreationInformation[] counterCreationInformations);
    public virtual bool get_Initialized();
    public virtual void set_Initialized(bool value);
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual PerformanceCounterCreationInformation[] get_CounterCreationInformation();
    public virtual void set_CounterCreationInformation(PerformanceCounterCreationInformation[] value);
}
public class XAct.Diagnostics.Performance.Services.Entities.PerformanceCounterCreationInformation : object {
    private string _name;
    private string _description;
    private PerformanceCounterType _type;
    private string _instanceName;
    private bool _readOnly;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <BaseFK>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceCounterCreationInformation <Base>k__BackingField;
    public Guid Id { get; public set; }
    public Byte[] Timestamp { get; public set; }
    public string Name { get; public set; }
    public string InstanceName { get; public set; }
    public bool ReadOnly { get; public set; }
    public string Description { get; public set; }
    public PerformanceCounterType Type { get; public set; }
    public Nullable`1<Guid> BaseFK { get; public set; }
    public PerformanceCounterCreationInformation Base { get; public set; }
    public PerformanceCounterCreationInformation(string name, string description, PerformanceCounterType type);
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_InstanceName();
    public virtual void set_InstanceName(string value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public PerformanceCounterType get_Type();
    public void set_Type(PerformanceCounterType value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_BaseFK();
    [CompilerGeneratedAttribute]
public void set_BaseFK(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual PerformanceCounterCreationInformation get_Base();
    [CompilerGeneratedAttribute]
public virtual void set_Base(PerformanceCounterCreationInformation value);
}
public enum XAct.Diagnostics.Performance.Services.Entities.PerformanceCounterType : Enum {
    public int value__;
    public static PerformanceCounterType NumberOfItemsHEX32;
    public static PerformanceCounterType NumberOfItemsHEX64;
    public static PerformanceCounterType NumberOfItems32;
    public static PerformanceCounterType NumberOfItems64;
    public static PerformanceCounterType CounterDelta32;
    public static PerformanceCounterType CounterDelta64;
    public static PerformanceCounterType SampleCounter;
    public static PerformanceCounterType CountPerTimeInterval32;
    public static PerformanceCounterType CountPerTimeInterval64;
    public static PerformanceCounterType RateOfCountsPerSecond32;
    public static PerformanceCounterType RateOfCountsPerSecond64;
    public static PerformanceCounterType RawFraction;
    public static PerformanceCounterType CounterTimer;
    public static PerformanceCounterType Timer100Ns;
    public static PerformanceCounterType SampleFraction;
    public static PerformanceCounterType CounterTimerInverse;
    public static PerformanceCounterType Timer100NsInverse;
    public static PerformanceCounterType CounterMultiTimer;
    public static PerformanceCounterType CounterMultiTimer100Ns;
    public static PerformanceCounterType CounterMultiTimerInverse;
    public static PerformanceCounterType CounterMultiTimer100NsInverse;
    public static PerformanceCounterType AverageTimer32;
    public static PerformanceCounterType ElapsedTime;
    public static PerformanceCounterType AverageCount64;
    public static PerformanceCounterType SampleBase;
    public static PerformanceCounterType AverageBase;
    public static PerformanceCounterType RawBase;
    public static PerformanceCounterType CounterMultiBase;
}
public interface XAct.Diagnostics.Performance.Services.IContextStatePerformanceCounterService {
    public abstract virtual void IncrementContextOperationCounter(string tag, int offset);
    public abstract virtual int GetContextOperationCounter(string tag);
    public abstract virtual void ResetContextOperationCounter(string tag);
    public abstract virtual void IncrementContextOperationDuration(string tag, TimeSpan timeSpan);
    public abstract virtual TimeSpan GetContextOperationDuration(string tag);
    public abstract virtual void ResetContextOperationDuration(string tag);
}
public class XAct.Diagnostics.Performance.Services.Implementations.ContextStatePerformanceCounterService : object {
    private IContextStateService _contextStateService;
    public ContextStatePerformanceCounterService(IContextStateService contextStateService);
    public sealed virtual void IncrementContextOperationCounter(string tag, int offset);
    public sealed virtual int GetContextOperationCounter(string tag);
    public sealed virtual void ResetContextOperationCounter(string tag);
    public sealed virtual void IncrementContextOperationDuration(string tag, TimeSpan timeSpan);
    public sealed virtual TimeSpan GetContextOperationDuration(string tag);
    public sealed virtual void ResetContextOperationDuration(string tag);
}
public class XAct.Diagnostics.Performance.Services.Implementations.NullPerformanceCounterService : object {
    [CompilerGeneratedAttribute]
private IPerformanceCounterServiceConfiguration <Configuration>k__BackingField;
    public IPerformanceCounterServiceConfiguration Configuration { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounterServiceConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(IPerformanceCounterServiceConfiguration value);
    public sealed virtual bool Initialize();
    public sealed virtual TValue GetRawValue(string categoryName, string performanceCounterName, bool raiseExceptionIfNotFound);
    public sealed virtual TValue GetRawValue(string categoryName, string performanceCounterName, string instanceName, bool raiseExceptionIfNotFound);
    public sealed virtual TValue GetComputedValue(string categoryName, string performanceCounterName, bool raiseExceptionIfNotFound);
    public sealed virtual TValue GetComputedValue(string categoryName, string performanceCounterName, string instanceName, bool raiseExceptionIfNotFound);
    public sealed virtual bool Set(string categoryName, string performanceCounterName, long amount, bool raiseExceptionIfNotFound);
    public sealed virtual bool Set(string categoryName, string performanceCounterName, string instanceName, long amount, bool raiseExceptionIfNotFound);
    public sealed virtual bool Offset(string categoryName, string performanceCounterName, long amount, bool raiseExceptionIfNotFound);
    public sealed virtual bool Offset(string categoryName, string performanceCounterName, string instanceName, long amount, bool raiseExceptionIfNotFound);
    public sealed virtual bool UpdateDenominator(string categoryName, string performanceCounterName, Nullable`1<long> amount, string nameExtension, bool raiseExceptionIfNotFound);
    public sealed virtual bool UpdateDenominator(string categoryName, string performanceCounterName, string instanceName, Nullable`1<long> amount, string nameExtension, bool raiseExceptionIfNotFound);
}
public class XAct.Diagnostics.ScopedTraceMessage : object {
    private TraceLevel _traceLevel;
    private ITracingService _tracingService;
    private string _savedMessage;
    public ScopedTraceMessage(ITracingService tracingService, TraceLevel traceLevel, string message, Object[] arguments);
    public sealed virtual void Dispose();
}
public interface XAct.Diagnostics.Services.Configuration.IDurationTracingServiceState {
    public IDictionary`2<string, Timer> Timers { get; }
    public abstract virtual IDictionary`2<string, Timer> get_Timers();
}
public class XAct.Diagnostics.Services.Configuration.Implementations.DurationTracingServiceState : object {
    private IDictionary`2<string, Timer> _timers;
    public IDictionary`2<string, Timer> Timers { get; }
    public sealed virtual IDictionary`2<string, Timer> get_Timers();
}
public interface XAct.Diagnostics.Services.IDurationTracingService {
    public IDurationTracingServiceState State { get; }
    public abstract virtual IDurationTracingServiceState get_State();
    public abstract virtual void Start(string tag);
    public abstract virtual void Stop(string tag);
    public abstract virtual void Clear(string tag);
}
[DataContractAttribute]
public class XAct.Diagnostics.Services.Implementations.MetricsSerieEntry : object {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [DataMemberAttribute]
public DateTime DateTime { get; public set; }
    [DataMemberAttribute]
public double Value { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public virtual void set_DateTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual double get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(double value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
}
[DataContractAttribute]
public class XAct.Diagnostics.Services.Implementations.StatusResponse : object {
    public static ResultStatus[] ResultStatuses;
    [DataMemberAttribute]
private ResultStatus _status;
    [DataMemberAttribute]
private StatusResponseTable _data;
    [DataMemberAttribute]
private StatusResponseMetricsSeries _series;
    [DataMemberAttribute]
private List`1<NameStringValue> _displayMetadata;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MessageArguments>k__BackingField;
    public ResultStatus Status { get; }
    [DataMemberAttribute]
public string StatusText { get; private set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string ResourceFilter { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public String[] MessageArguments { get; public set; }
    public StatusResponseTable Data { get; }
    public StatusResponseMetricsSeries Series { get; }
    public List`1<NameStringValue> DisplayMetadata { get; }
    private static StatusResponse();
    public sealed virtual ResultStatus get_Status();
    private void set_StatusText(string value);
    public string get_StatusText();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ResourceFilter();
    [CompilerGeneratedAttribute]
public virtual void set_ResourceFilter(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_MessageArguments();
    [CompilerGeneratedAttribute]
public virtual void set_MessageArguments(String[] value);
    public virtual StatusResponseTable get_Data();
    public StatusResponseMetricsSeries get_Series();
    public virtual List`1<NameStringValue> get_DisplayMetadata();
}
[DataContractAttribute]
public class XAct.Diagnostics.Services.Implementations.StatusResponseMetricsSerie : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private MetricsSerieEntry[] <Items>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public ResultStatus Status { get; public set; }
    [DataMemberAttribute]
public MetricsSerieEntry[] Items { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ResultStatus get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Status(ResultStatus value);
    [CompilerGeneratedAttribute]
public virtual MetricsSerieEntry[] get_Items();
    [CompilerGeneratedAttribute]
public virtual void set_Items(MetricsSerieEntry[] value);
}
[DataContractAttribute]
public class XAct.Diagnostics.Services.Implementations.StatusResponseMetricsSeries : object {
    [DataMemberAttribute]
private List`1<StatusResponseMetricsSerie> _series;
    public List`1<StatusResponseMetricsSerie> Series { get; }
    public List`1<StatusResponseMetricsSerie> get_Series();
}
[DataContractAttribute]
public class XAct.Diagnostics.Services.Implementations.StatusResponseTable : object {
    [DataMemberAttribute]
private List`1<string> _headers;
    [DataMemberAttribute]
private List`1<StatusResponseTableRow> _rows;
    public List`1<string> Headers { get; }
    public List`1<StatusResponseTableRow> Rows { get; }
    public List`1<string> get_Headers();
    public List`1<StatusResponseTableRow> get_Rows();
}
[DataContractAttribute]
public class XAct.Diagnostics.Services.Implementations.StatusResponseTableRow : object {
    [DataMemberAttribute]
private List`1<string> _cells;
    private ResultStatus _status;
    [CompilerGeneratedAttribute]
private string <AdditionalInformation>k__BackingField;
    [DataMemberAttribute]
public ResultStatus Status { get; public set; }
    [DataMemberAttribute]
public string StatusText { get; private set; }
    public List`1<string> Cells { get; }
    [DataMemberAttribute]
public string AdditionalInformation { get; public set; }
    public ResultStatus get_Status();
    public void set_Status(ResultStatus value);
    private void set_StatusText(string value);
    public string get_StatusText();
    public List`1<string> get_Cells();
    [CompilerGeneratedAttribute]
public string get_AdditionalInformation();
    [CompilerGeneratedAttribute]
public void set_AdditionalInformation(string value);
}
public abstract class XAct.Diagnostics.Status.Connectors.Implementations.StatusServiceConnectorBase : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    public string Name { get; public set; }
    public string ResourceFilter { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string StatusText { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResourceFilter();
    [CompilerGeneratedAttribute]
public void set_ResourceFilter(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
public void set_StatusText(string value);
    public abstract virtual StatusResponse Get(object arguments, Nullable`1<DateTime> startTimeUtc, Nullable`1<DateTime> endTimeUtc);
    protected StatusResponse BuildReponseObject();
    protected List`1<T> ProcessArguments(object arguments, Func`2<string, T> builder);
}
public abstract class XAct.Diagnostics.Status.Connectors.Implementations.XActLibStatusServiceConnectorBase : StatusServiceConnectorBase {
}
public interface XAct.Diagnostics.Status.Connectors.IStatusServiceConnector {
    public abstract virtual StatusResponse Get(object arguments, Nullable`1<DateTime> startTimeUtc, Nullable`1<DateTime> endTimeUtc);
}
public interface XAct.Diagnostics.Status.Connectors.IStatusServiceMetricsFeedConnector {
    public IStatusServiceMetricsFeedConnectorConfiguration Configuration { get; }
    public abstract virtual IStatusServiceMetricsFeedConnectorConfiguration get_Configuration();
}
public interface XAct.Diagnostics.Status.Connectors.IStatusServiceMetricsFeedConnectorConfiguration {
    public List`1<StatusServiceMetricsFeedConnectorConfigurationItem> CounterSpecs { get; }
    public abstract virtual List`1<StatusServiceMetricsFeedConnectorConfigurationItem> get_CounterSpecs();
}
[DataContractAttribute]
public class XAct.Diagnostics.Status.Services.Connectors.Implementations.StatusServiceMetricsFeedConnectorConfigurationItem : object {
    [CompilerGeneratedAttribute]
private string <CounterCategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CounterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Multiplier>k__BackingField;
    [DataMemberAttribute]
public string CounterCategoryName { get; public set; }
    [DataMemberAttribute]
public string CounterName { get; public set; }
    [DataMemberAttribute]
public string InstanceName { get; public set; }
    [DataMemberAttribute]
public bool ReadOnly { get; public set; }
    [DataMemberAttribute]
public double Multiplier { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CounterCategoryName();
    [CompilerGeneratedAttribute]
public void set_CounterCategoryName(string value);
    [CompilerGeneratedAttribute]
public string get_CounterName();
    [CompilerGeneratedAttribute]
public void set_CounterName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public double get_Multiplier();
    [CompilerGeneratedAttribute]
public void set_Multiplier(double value);
    public string GetUniqueName();
}
public class XAct.Diagnostics.Timer : object {
    private IDateTimeService DateTimeService;
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Stopped>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Running>k__BackingField;
    public DateTime Started { get; private set; }
    public DateTime Stopped { get; private set; }
    public bool Running { get; public set; }
    public TimeSpan Duration { get; }
    [CompilerGeneratedAttribute]
public DateTime get_Started();
    [CompilerGeneratedAttribute]
private void set_Started(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Stopped();
    [CompilerGeneratedAttribute]
private void set_Stopped(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_Running();
    [CompilerGeneratedAttribute]
public void set_Running(bool value);
    public TimeSpan get_Duration();
    public void Start();
    public void Stop();
    public void Clear();
}
public enum XAct.Diagnostics.TraceLevel : Enum {
    public int value__;
    public static TraceLevel Off;
    public static TraceLevel Error;
    public static TraceLevel Warning;
    public static TraceLevel Info;
    public static TraceLevel Verbose;
}
[DataContractAttribute]
public enum XAct.Difficulty : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Difficulty Undefined;
    [EnumMemberAttribute]
public static Difficulty Beginner;
    [EnumMemberAttribute]
public static Difficulty Normal;
    [EnumMemberAttribute]
public static Difficulty Advanced;
    [EnumMemberAttribute]
public static Difficulty Expert;
    [EnumMemberAttribute]
public static Difficulty Guru;
}
public class XAct.Dimensions.Size : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public Size(int width, int height);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public virtual string ToString();
    private string ToGoogle();
}
public abstract class XAct.DisposableBase : object {
    private bool _disposed;
    protected bool Disposed { get; }
    protected bool get_Disposed();
    public sealed virtual void Dispose();
    protected virtual void Cleanup();
    protected virtual void Finalize();
}
public class XAct.Domain.AuditableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
public class XAct.Domain.AuditablePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SourcePropertyDotPath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Options>k__BackingField;
    public string SourcePropertyDotPath { get; public set; }
    public String[] Options { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourcePropertyDotPath();
    [CompilerGeneratedAttribute]
public void set_SourcePropertyDotPath(string value);
    [CompilerGeneratedAttribute]
public String[] get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(String[] value);
}
[FlagsAttribute]
public enum XAct.Domain.OfflineModelState : Enum {
    public int value__;
    public static OfflineModelState Undefined;
    public static OfflineModelState UnchangedExisting;
    public static OfflineModelState New;
    public static OfflineModelState Updated;
    public static OfflineModelState Deleted;
    public static OfflineModelState Clean;
    public static OfflineModelState RemoteCreationPending;
    public static OfflineModelState RemoteUpdatePending;
    public static OfflineModelState RemoteDeletionPending;
    public static OfflineModelState LocalCreationPending;
    public static OfflineModelState LocalUpdatePending;
    public static OfflineModelState LocalDeletionPending;
    public static OfflineModelState LocalPending;
    public static OfflineModelState RemotePending;
    public static OfflineModelState CreationPending;
    public static OfflineModelState UpdatePending;
    public static OfflineModelState DeletionPending;
}
public enum XAct.Domain.Repositories.CommitType : Enum {
    public int value__;
    public static CommitType Default;
    public static CommitType AcceptAllChanges;
    public static CommitType DetectAndHoldChangesTillComplete;
    public static CommitType HoldChangesTillComplete;
    public static CommitType CompleteChanges;
}
public interface XAct.Domain.Repositories.Configuration.IUnitOfWorkServiceConfiguration {
    public abstract virtual void SetFactoryDelegate(Func`1<IUnitOfWork> func, string key);
    public abstract virtual Func`1<IUnitOfWork> GetFactoryDelegate(string key);
}
public interface XAct.Domain.Repositories.IApplicationTennantIdSpecificReferenceDataRepository`2 {
    public abstract virtual TEntity GetByText(string name);
}
public interface XAct.Domain.Repositories.IApplicationTennantIdSpecificRepository`2 {
}
public interface XAct.Domain.Repositories.IContext {
    public abstract virtual int Commit(CommitType commitType);
}
public interface XAct.Domain.Repositories.IContextSpecification {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface XAct.Domain.Repositories.IIncludeSpecification {
    public Object[] Includes { get; }
    public abstract virtual Object[] get_Includes();
}
public interface XAct.Domain.Repositories.IIncludeSpecification`1 {
    public Expression`1[] Includes { get; }
    public abstract virtual Expression`1[] get_Includes();
}
public class XAct.Domain.Repositories.Implementations.UnitOfWorkService : object {
    public static string ContextKeyPrefix;
    private string _contextKey;
    private IContextStateService _contextStateService;
    private IUnitOfWorkServiceConfiguration _unitOfWorkServiceConfiguration;
    private Func`1<IUnitOfWork> _factoryMethod;
    public IUnitOfWorkServiceConfiguration Configuration { get; }
    public string DefaultContextKey { get; public set; }
    public UnitOfWorkService(IContextStateService contextStateService, IUnitOfWorkServiceConfiguration unitOfWorkServiceConfiguration);
    public sealed virtual IUnitOfWorkServiceConfiguration get_Configuration();
    public sealed virtual void RegisterFactory(Func`1<IUnitOfWork> contextFactoryDelegate);
    public sealed virtual string get_DefaultContextKey();
    public sealed virtual void set_DefaultContextKey(string value);
    public sealed virtual void SetCurrent(IUnitOfWork unitOfWork, string contextKey);
    public sealed virtual IUnitOfWork GetCurrent(string contextKey);
}
public class XAct.Domain.Repositories.Implementations.UnitOfWorkServiceConfiguration : object {
    private IDictionary`2<string, Func`1<IUnitOfWork>> _delegates;
    public sealed virtual void SetFactoryDelegate(Func`1<IUnitOfWork> func, string contextKey);
    public sealed virtual Func`1<IUnitOfWork> GetFactoryDelegate(string contextKey);
}
public class XAct.Domain.Repositories.IncludeSpecification : object {
    [CompilerGeneratedAttribute]
private Object[] <Includes>k__BackingField;
    public Object[] Includes { get; private set; }
    public IncludeSpecification(Object[] propertyNames);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_Includes();
    [CompilerGeneratedAttribute]
private void set_Includes(Object[] value);
}
public class XAct.Domain.Repositories.IncludeSpecification`1 : object {
    [CompilerGeneratedAttribute]
private Expression`1[] <Includes>k__BackingField;
    public Expression`1[] Includes { get; private set; }
    private Object[] XAct.Domain.Repositories.IIncludeSpecification.Includes { get; }
    public IncludeSpecification`1(Expression`1[] propertyExpressions);
    [CompilerGeneratedAttribute]
public sealed virtual Expression`1[] get_Includes();
    [CompilerGeneratedAttribute]
private void set_Includes(Expression`1[] value);
    private sealed virtual override Object[] XAct.Domain.Repositories.IIncludeSpecification.get_Includes();
}
public interface XAct.Domain.Repositories.IReferenceDataCodedRepository`2 {
    public abstract virtual TEntity GetByCode(string code);
}
public interface XAct.Domain.Repositories.IReferenceDataRepository`2 {
    public abstract virtual TEntity GetByText(string name);
}
public interface XAct.Domain.Repositories.IRepositoryService {
    public abstract virtual IUnitOfWork GetContext(string contextKey);
    public abstract virtual bool Exists(Expression`1<Func`2<TModel, bool>> filter);
    public abstract virtual int Count(Expression`1<Func`2<TModel, bool>> filter);
    public abstract virtual bool Contains(Expression`1<Func`2<TModel, bool>> filter);
    public abstract virtual TModel GetSingle(Expression`1<Func`2<TModel, bool>> filter, IIncludeSpecification includeSpecification, MergeOption mergeOptions);
    public abstract virtual IQueryable`1<TModel> GetByFilter(Expression`1<Func`2<TModel, bool>> filter, IIncludeSpecification includeSpecification, IPagedQuerySpecification pagedQuerySpecs, Func`2<IQueryable`1<TModel>, IOrderedQueryable`1<TModel>> orderBy, MergeOption mergeOptions);
    public abstract virtual void PersistOnCommit(TModel model, Func`2<TModel, bool> isEntityNew);
    public abstract virtual void AddOrUpdate(Expression`1<Func`2<TModel, object>> identifierExpression, TModel[] models);
    public abstract virtual void PersistOnCommit(TModel model, bool generateDistributeIdentityIfRequired);
    public abstract virtual void AddOnCommit(TModel model);
    public abstract virtual void AddOnCommit(TModel model, bool generateDistributeIdentityIfRequired);
    public abstract virtual void AttachOnCommit(TModel model);
    public abstract virtual void Detach(TModel model);
    public abstract virtual void UpdateOnCommit(TModel model);
    public abstract virtual void DeleteOnCommit(TId id);
    public abstract virtual void DeleteOnCommit(TModel model);
    public abstract virtual void DeleteOnCommit(Expression`1<Func`2<TModel, bool>> predicate);
    public abstract virtual bool IsAttached(TModel model);
    public abstract virtual bool IsNew(T model, bool generateIdentity);
}
[ObsoleteAttribute]
public interface XAct.Domain.Repositories.IRepositoryService`1 {
    public IUnitOfWork Context { get; }
    public abstract virtual IUnitOfWork get_Context();
    public abstract virtual int Count(Expression`1<Func`2<TAggregateRootEntity, bool>> filter);
    public abstract virtual bool Contains(Expression`1<Func`2<TAggregateRootEntity, bool>> filter);
    public abstract virtual TAggregateRootEntity GetSingle(Expression`1<Func`2<TAggregateRootEntity, bool>> filter, IIncludeSpecification includeSpecification, MergeOption mergeOptions);
    public abstract virtual IQueryable`1<TAggregateRootEntity> GetByFilter(Expression`1<Func`2<TAggregateRootEntity, bool>> filter, IIncludeSpecification includeSpecification, IPagedQuerySpecification pagedQuerySpecs, Func`2<IQueryable`1<TAggregateRootEntity>, IOrderedQueryable`1<TAggregateRootEntity>> orderBy, MergeOption mergeOptions);
    public abstract virtual void PersistOnCommit(TAggregateRootEntity aggregateRootEntity);
    public abstract virtual bool IsEntityNew(TAggregateRootEntity aggregateRootEntity);
    public abstract virtual void AddOnCommit(TAggregateRootEntity aggregateRootEntity);
    public abstract virtual void AttachOnCommit(TAggregateRootEntity aggregateRootEntity);
    public abstract virtual void UpdateOnCommit(TAggregateRootEntity aggregateRootEntity);
    public abstract virtual void DeleteOnCommit(TAggregateRootEntity aggregateRootEntity);
    public abstract virtual void DeleteOnCommit(Expression`1<Func`2<TAggregateRootEntity, bool>> predicate);
}
public interface XAct.Domain.Repositories.ISimpleRepository`2 {
    public abstract virtual bool Exists(TId id);
    public abstract virtual bool Exists(Expression`1<Func`2<TModel, bool>> where);
    public abstract virtual int Count();
    public abstract virtual int Count(Expression`1<Func`2<TModel, bool>> where);
    public abstract virtual TModel GetById(TId id);
    public abstract virtual void PersistOnCommit(TModel element);
    public abstract virtual void DeleteOnCommit(TModel element);
    public abstract virtual IQueryable`1<TModel> Retrieve(PagedQuerySpecification pagedQuerySpecification);
}
public interface XAct.Domain.Repositories.ISpecification`1 {
    public Expression`1<Func`2<TAggregateRootEntity, bool>> IsSatisfied { get; }
    public abstract virtual Expression`1<Func`2<TAggregateRootEntity, bool>> get_IsSatisfied();
}
public interface XAct.Domain.Repositories.IUnitOfWork {
}
public interface XAct.Domain.Repositories.IUnitOfWorkService {
    public IUnitOfWorkServiceConfiguration Configuration { get; }
    public string DefaultContextKey { get; public set; }
    public abstract virtual IUnitOfWorkServiceConfiguration get_Configuration();
    public abstract virtual void RegisterFactory(Func`1<IUnitOfWork> contextFactoryDelegate);
    public abstract virtual string get_DefaultContextKey();
    public abstract virtual void set_DefaultContextKey(string value);
    public abstract virtual void SetCurrent(IUnitOfWork unitOfWork, string contextKey);
    public abstract virtual IUnitOfWork GetCurrent(string contextKey);
}
public enum XAct.Domain.Repositories.MergeOption : Enum {
    public int value__;
    public static MergeOption Undefined;
    public static MergeOption AppendOnly;
    public static MergeOption OverwriteChanges;
    public static MergeOption PreserveChanges;
    public static MergeOption NoTracking;
}
public class XAct.Domain.Repositories.UnitOfWorkThreadScope : object {
    [ThreadStaticAttribute]
private static IDictionary`2<string, IUnitOfWork> ThreadUnitOfWork;
    public UnitOfWorkThreadScope(string contextKey, bool useThreadStorage);
    public UnitOfWorkThreadScope(IUnitOfWorkServiceConfiguration unitOfWorkServiceConfiguration);
    private static UnitOfWorkThreadScope();
    public static bool TryGet(string contextKey, IUnitOfWork& unitOfWork);
    public sealed virtual void Dispose();
}
public class XAct.Domain.SimpleAuditableAttribute : AuditableAttribute {
    [CompilerGeneratedAttribute]
private string <SourceIdentifier>k__BackingField;
    public string SourceIdentifier { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceIdentifier();
    [CompilerGeneratedAttribute]
public void set_SourceIdentifier(string value);
}
public interface XAct.Entities.IEntityWrappingService`3 {
    public abstract virtual TEntityWrapperInterface WrapEntity(TWrappedEntity entityToWrap);
    public abstract virtual ICollection`1<TEntityWrapperInterface> WrapCollection(ICollection`1<TWrappedEntity> collectionOfEntitiesToWrap);
}
public class XAct.Entities.Implementations.EntityWrappingService`3 : object {
    public sealed virtual TEntityWrapperInterface WrapEntity(TWrappedEntity entityToWrap);
    public sealed virtual ICollection`1<TEntityWrapperInterface> WrapCollection(ICollection`1<TWrappedEntity> collectionOfEntitiesToWrap);
}
public class XAct.Entities.Implementations.WeakReferenceService`2 : object {
    private int _purgeCheckCounter;
    private Dictionary`2<int, TOuterWrapper> _cacheDictionary;
    private ITracingService _tracingService;
    private int _purgeCounterMax;
    [CompilerGeneratedAttribute]
private static Func`2<TOuterWrapper, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<int, TOuterWrapper>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<int, TOuterWrapper>, int> CS$<>9__CachedAnonymousMethodDelegate5;
    public int PurgeCounterMax { get; public set; }
    public int Count { get; }
    public int CountAlive { get; }
    public WeakReferenceService`2(ITracingService tracingService);
    public sealed virtual int get_PurgeCounterMax();
    public sealed virtual void set_PurgeCounterMax(int value);
    public sealed virtual int get_Count();
    public sealed virtual int get_CountAlive();
    public bool IsTracked(TInnerObject watchedObject);
    public sealed virtual TOuterWrapper Register(TInnerObject watchedObject, bool raiseErrorIfAlreadyRegistered);
    public sealed virtual TOuterWrapper Register(TOuterWrapper outerObject, bool raiseErrorIfAlreadyRegistered);
    public sealed virtual TOuterWrapper Get(TInnerObject watchedObject);
    public sealed virtual void Purge();
    [CompilerGeneratedAttribute]
private static bool <get_CountAlive>b__0(TOuterWrapper outerWrapper);
    [CompilerGeneratedAttribute]
private static bool <Purge>b__2(KeyValuePair`2<int, TOuterWrapper> p);
    [CompilerGeneratedAttribute]
private static int <Purge>b__3(KeyValuePair`2<int, TOuterWrapper> p);
}
[ExtensionAttribute]
public static class XAct.EnumerableCacheExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> CacheGeneratedResults(IEnumerable`1<T> sequence);
}
[ExtensionAttribute]
public static class XAct.EnumExtensions : object {
    [ExtensionAttribute]
public static TTargetEnum MapEnumTo(TSourceEnum source);
    [ExtensionAttribute]
public static TAttribute GetAttribute(Enum enumeration);
    [ExtensionAttribute]
public static TAttributeValue GetAttributeValue(Enum enumeration, Func`2<TAttribute, TAttributeValue> expression);
}
[FlagsAttribute]
[DataContractAttribute]
public enum XAct.Enums.AuditableEvent : Enum {
    public int value__;
    public static AuditableEvent Undefined;
    public static AuditableEvent Created;
    public static AuditableEvent Accessed;
    public static AuditableEvent Modified;
    public static AuditableEvent Deleted;
}
public class XAct.Environment.DateTimeServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private TimeSpan <NowUtcOffset>k__BackingField;
    public TimeSpan NowUtcOffset { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_NowUtcOffset();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NowUtcOffset(TimeSpan value);
}
public interface XAct.Environment.IApplicationTennantManagementService {
    public abstract virtual Guid Get();
    public abstract virtual void Set(Guid value);
}
public interface XAct.Environment.IApplicationTennantService {
    public abstract virtual Guid Get();
}
public interface XAct.Environment.IClientEnvironmentService {
    public CultureInfo ClientUICulture { get; }
    public string ClientIP { get; }
    public abstract virtual CultureInfo get_ClientUICulture();
    public abstract virtual string get_ClientIP();
}
public interface XAct.Environment.IClientPersistenceService {
    public abstract virtual string GetValue(string containerName, string key);
    public abstract virtual void SetValue(string containerName, string value, TimeSpan duration, string key);
    public abstract virtual void ClearContainer(string containerName);
}
public interface XAct.Environment.IDateTimeService {
    public IDateTimeServiceConfiguration Configuration { get; }
    [ObsoleteAttribute("Use UTC, and convert to Local at UI level or other required ouput only.", "False")]
public DateTime Now { get; }
    public DateTime NowUTC { get; }
    public abstract virtual IDateTimeServiceConfiguration get_Configuration();
    public abstract virtual DateTime get_Now();
    public abstract virtual DateTime get_NowUTC();
    public abstract virtual void SetUTCOffset(DateTime nowUTC);
    public abstract virtual void SetUTCOffset(TimeSpan timeSpanOffset);
    public abstract virtual void ResetUTCOffset();
}
public interface XAct.Environment.IDateTimeServiceConfiguration {
    public TimeSpan NowUtcOffset { get; public set; }
    public abstract virtual TimeSpan get_NowUtcOffset();
    public abstract virtual void set_NowUtcOffset(TimeSpan value);
}
public interface XAct.Environment.IDefaultPrincipalService {
}
public interface XAct.Environment.IDeviceInformationService {
    public abstract virtual string GetUniqueDeviceID(string salt);
}
public interface XAct.Environment.IEnvironmentManagementService {
    public abstract virtual void RestartApplication();
}
public interface XAct.Environment.IEnvironmentService {
    public IEnvironmentServiceConfiguration Configuration { get; }
    public Random Random { get; }
    public CultureInfo DefaultCulture { get; }
    public bool IsUserInteractive { get; }
    public string DomainName { get; }
    public string MachineName { get; }
    public string ApplicationName { get; }
    public string ApplicationNameHash { get; }
    public string EnvironmentName { get; }
    public string ApplicationBasePath { get; }
    public object HttpContext { get; }
    public string NewLine { get; }
    public abstract virtual IEnvironmentServiceConfiguration get_Configuration();
    public abstract virtual Random get_Random();
    public abstract virtual CultureInfo get_DefaultCulture();
    public abstract virtual bool get_IsUserInteractive();
    public abstract virtual string get_DomainName();
    public abstract virtual string get_MachineName();
    public abstract virtual string get_ApplicationName();
    public abstract virtual string get_ApplicationNameHash();
    public abstract virtual string get_EnvironmentName();
    public abstract virtual string get_ApplicationBasePath();
    public abstract virtual object get_HttpContext();
    public abstract virtual string get_NewLine();
    public abstract virtual string MapPath(string virtualPath);
    public abstract virtual long GetTotalMemoryAllocated(bool waitForGarbageCollectionBeforeReturning);
}
public interface XAct.Environment.IEnvironmentServiceConfiguration {
    public Assembly EntryAssembly { get; public set; }
    public string AppDir { get; public set; }
    public string ApplicationIdentifier { get; public set; }
    public string EnvironmentIdentifier { get; public set; }
    public bool UserInteractive { get; public set; }
    public string DomainName { get; public set; }
    public string MachineName { get; public set; }
    public abstract virtual Assembly get_EntryAssembly();
    public abstract virtual void set_EntryAssembly(Assembly value);
    public abstract virtual string get_AppDir();
    public abstract virtual void set_AppDir(string value);
    public abstract virtual string get_ApplicationIdentifier();
    public abstract virtual void set_ApplicationIdentifier(string value);
    public abstract virtual string get_EnvironmentIdentifier();
    public abstract virtual void set_EnvironmentIdentifier(string value);
    public abstract virtual bool get_UserInteractive();
    public abstract virtual void set_UserInteractive(bool value);
    public abstract virtual string get_DomainName();
    public abstract virtual void set_DomainName(string value);
    public abstract virtual string get_MachineName();
    public abstract virtual void set_MachineName(string value);
}
public interface XAct.Environment.Implementations.IPCLEnvironmentService {
    public IPCLEnvironmentServiceConfiguration Configuration { get; }
    public abstract virtual IPCLEnvironmentServiceConfiguration get_Configuration();
}
public class XAct.Environment.Implementations.ProductInformationServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private ProductInformation <DeveloperInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductInformation <OwnerInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductInformation <ResellerInformation>k__BackingField;
    public ProductInformation DeveloperInformation { get; public set; }
    public ProductInformation OwnerInformation { get; public set; }
    public ProductInformation ResellerInformation { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ProductInformation get_DeveloperInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeveloperInformation(ProductInformation value);
    [CompilerGeneratedAttribute]
public sealed virtual ProductInformation get_OwnerInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OwnerInformation(ProductInformation value);
    [CompilerGeneratedAttribute]
public sealed virtual ProductInformation get_ResellerInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResellerInformation(ProductInformation value);
}
public interface XAct.Environment.IPCLEnvironmentServiceConfiguration {
}
public interface XAct.Environment.IPrincipalService {
    public IPrincipal Principal { get; public set; }
    public string CurrentIdentityIdentifier { get; }
    public abstract virtual IPrincipal get_Principal();
    public abstract virtual void set_Principal(IPrincipal value);
    public abstract virtual string get_CurrentIdentityIdentifier();
}
public interface XAct.Environment.IProductInformationService {
    public IProductInformationServiceConfiguration Configuration { get; }
    public abstract virtual IProductInformationServiceConfiguration get_Configuration();
    public abstract virtual ProductInformation GetProductInformation(ProductInformationType productInformationType);
    public abstract virtual string CompanyName(ProductInformationType productInformationType);
    public abstract virtual string ProductName(ProductInformationType productInformationType);
    public abstract virtual string ResourceFilter(ProductInformationType productInformationType);
    public abstract virtual string CompanyDisplayNameResourceKey(ProductInformationType productInformationType);
    public abstract virtual string CompanyDisplayAddressResourceKey(ProductInformationType productInformationType);
    public abstract virtual string CompanyDisplayContactInformationResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductDisplayCopyrightResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductDisplayTitleResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductDisplaySubTitleResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductDisplayDescriptionResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductDisplayProductUrlResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductAPIBaseEndpointResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductAPIErrorReportingEndpointResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductAPISupportEndpointResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductAPILicensingEndpointResourceKey(ProductInformationType productInformationType);
    public abstract virtual string ProductAPIUpdatesAvailableEndpointResourceKey(ProductInformationType productInformationType);
}
public interface XAct.Environment.IProductInformationServiceConfiguration {
    public ProductInformation DeveloperInformation { get; public set; }
    public ProductInformation OwnerInformation { get; public set; }
    public ProductInformation ResellerInformation { get; public set; }
    public abstract virtual ProductInformation get_DeveloperInformation();
    public abstract virtual void set_DeveloperInformation(ProductInformation value);
    public abstract virtual ProductInformation get_OwnerInformation();
    public abstract virtual void set_OwnerInformation(ProductInformation value);
    public abstract virtual ProductInformation get_ResellerInformation();
    public abstract virtual void set_ResellerInformation(ProductInformation value);
}
[CompilerGeneratedAttribute]
internal class XAct.Environment.NamespaceDoc : object {
}
[DefaultBindingImplementationAttribute("XAct.Environment.IEnvironmentServiceConfiguration", "2", "-1", "")]
public class XAct.Environment.PCLEnvironmentServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private string <ApplicationIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserInteractive>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <EntryAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppDir>k__BackingField;
    public string ApplicationIdentifier { get; public set; }
    public string DomainName { get; public set; }
    public string MachineName { get; public set; }
    public string EnvironmentIdentifier { get; public set; }
    public bool UserInteractive { get; public set; }
    public Assembly EntryAssembly { get; public set; }
    public string AppDir { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationIdentifier();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationIdentifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DomainName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DomainName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MachineName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentIdentifier();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentIdentifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UserInteractive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserInteractive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Assembly get_EntryAssembly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EntryAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AppDir(string value);
}
[DataContractAttribute]
public class XAct.Environment.ProductInformation : object {
    [CompilerGeneratedAttribute]
private ProductInformationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyDisplayNameResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyDisplayAddressResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyDisplayContactInformationResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductDisplayCopyrightResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductDisplayTitleResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductDisplaySubTitleResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductDisplayDescriptionResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductDisplayProductUrlResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductAPIBaseEndpointResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductAPIErrorReportingEndpointResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductAPISupportEndpointResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductAPILicensingEndpointResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductAPIUpdatesUvailableEndpointResourceKey>k__BackingField;
    [DataMemberAttribute]
public ProductInformationType Type { get; public set; }
    [DataMemberAttribute]
public string CompanyName { get; public set; }
    [DataMemberAttribute]
public string ProductName { get; public set; }
    [DataMemberAttribute]
public string ResourceFilter { get; public set; }
    [DataMemberAttribute]
public string CompanyDisplayNameResourceKey { get; public set; }
    [DataMemberAttribute]
public string CompanyDisplayAddressResourceKey { get; public set; }
    [DataMemberAttribute]
public string CompanyDisplayContactInformationResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductDisplayCopyrightResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductDisplayTitleResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductDisplaySubTitleResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductDisplayDescriptionResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductDisplayProductUrlResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductAPIBaseEndpointResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductAPIErrorReportingEndpointResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductAPISupportEndpointResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductAPILicensingEndpointResourceKey { get; public set; }
    [DataMemberAttribute]
public string ProductAPIUpdatesUvailableEndpointResourceKey { get; public set; }
    [CompilerGeneratedAttribute]
public ProductInformationType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ProductInformationType value);
    [CompilerGeneratedAttribute]
public virtual string get_CompanyName();
    [CompilerGeneratedAttribute]
public virtual void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductName();
    [CompilerGeneratedAttribute]
public virtual void set_ProductName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ResourceFilter();
    [CompilerGeneratedAttribute]
public virtual void set_ResourceFilter(string value);
    [CompilerGeneratedAttribute]
public virtual string get_CompanyDisplayNameResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_CompanyDisplayNameResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_CompanyDisplayAddressResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_CompanyDisplayAddressResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_CompanyDisplayContactInformationResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_CompanyDisplayContactInformationResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductDisplayCopyrightResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductDisplayCopyrightResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductDisplayTitleResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductDisplayTitleResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductDisplaySubTitleResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductDisplaySubTitleResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductDisplayDescriptionResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductDisplayDescriptionResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductDisplayProductUrlResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductDisplayProductUrlResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductAPIBaseEndpointResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductAPIBaseEndpointResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductAPIErrorReportingEndpointResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductAPIErrorReportingEndpointResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductAPISupportEndpointResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductAPISupportEndpointResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductAPILicensingEndpointResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductAPILicensingEndpointResourceKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductAPIUpdatesUvailableEndpointResourceKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProductAPIUpdatesUvailableEndpointResourceKey(string value);
}
[DataContractAttribute]
public enum XAct.Environment.ProductInformationType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ProductInformationType Undefined;
    [EnumMemberAttribute]
public static ProductInformationType Default;
    [EnumMemberAttribute]
public static ProductInformationType Developer;
    [EnumMemberAttribute]
public static ProductInformationType Owner;
    [EnumMemberAttribute]
public static ProductInformationType LicensedSeller;
}
public class XAct.Environment.Services.Implementations.ApplicationTennantManagementService : XActLibServiceBase {
    [ThreadStaticAttribute]
private static Guid id;
    public ApplicationTennantManagementService(ITracingService tracingService);
    public sealed virtual Guid Get();
    public sealed virtual void Set(Guid value);
}
public class XAct.Environment.Services.Implementations.ApplicationTennantService : object {
    private IApplicationTennantManagementService _applicationTennantManagementService;
    public ApplicationTennantService(IApplicationTennantManagementService applicationTennantManagementService);
    public sealed virtual Guid Get();
}
public class XAct.Environment.Services.Implementations.ClientEnvironmentService : object {
    public CultureInfo ClientUICulture { get; }
    public string ClientIP { get; }
    public virtual CultureInfo get_ClientUICulture();
    public virtual string get_ClientIP();
}
public class XAct.Environment.Services.Implementations.DateTimeService : object {
    private IDateTimeServiceConfiguration _configuration;
    public IDateTimeServiceConfiguration Configuration { get; }
    [ObsoleteAttribute("Use UTC, and convert to Local at UI level or other required ouput only.", "False")]
public DateTime Now { get; }
    public DateTime NowUTC { get; }
    public DateTimeService(IDateTimeServiceConfiguration dateTimeServiceConfiguration);
    public sealed virtual IDateTimeServiceConfiguration get_Configuration();
    public sealed virtual DateTime get_Now();
    public sealed virtual DateTime get_NowUTC();
    public sealed virtual void SetUTCOffset(DateTime nowUTC);
    public sealed virtual void SetUTCOffset(TimeSpan timeSpanOffset);
    public sealed virtual void ResetUTCOffset();
}
[DefaultBindingImplementationAttribute("XAct.Environment.IPrincipalService", "0", "-1", "")]
public class XAct.Environment.Services.Implementations.DefaultPrincipalService : object {
    private IContextStateService _contextStateService;
    private IEnvironmentService _environmentService;
    public IPrincipal Principal { get; public set; }
    public string CurrentIdentityIdentifier { get; }
    public DefaultPrincipalService(IContextStateService contextStateService, IEnvironmentService environmentService);
    public sealed virtual IPrincipal get_Principal();
    public sealed virtual void set_Principal(IPrincipal value);
    public sealed virtual string get_CurrentIdentityIdentifier();
    private void SetHttpUserPropertyIfAvailable(IPrincipal principal);
}
public class XAct.Environment.Services.Implementations.DeviceInformationService : object {
    private IEnvironmentService _environmentService;
    private static string _cachedDeviceUniqueId;
    public static string CachedDeviceUniqueId { get; public set; }
    public DeviceInformationService(IEnvironmentService environmentService);
    public sealed virtual string GetUniqueDeviceID(string hashSalt);
    public static string get_CachedDeviceUniqueId();
    public static void set_CachedDeviceUniqueId(string value);
}
public class XAct.Environment.Services.Implementations.EnvironmentManagementService : object {
    public sealed virtual void RestartApplication();
    public void RestartServerAppPool();
}
[DefaultBindingImplementationAttribute("XAct.Environment.IEnvironmentService", "0", "-1", "")]
public class XAct.Environment.Services.Implementations.PCLEnvironmentService : object {
    private IEnvironmentManagementService _environmentManagementService;
    private object _httpContext;
    private string _newLine;
    private IPCLEnvironmentServiceConfiguration _pclenvironmentServiceConfiguration;
    private Random _random;
    private static string _applicationName;
    private static string _applicationNameHash;
    private IEnvironmentServiceConfiguration XAct.Environment.IEnvironmentService.Configuration { get; }
    public IPCLEnvironmentServiceConfiguration Configuration { get; }
    public Random Random { get; }
    public CultureInfo DefaultCulture { get; }
    public bool IsUserInteractive { get; }
    public string DomainName { get; }
    public string MachineName { get; }
    public string ApplicationName { get; }
    public string EnvironmentName { get; }
    public string ApplicationNameHash { get; }
    public Assembly EntryAssembly { get; }
    public string ApplicationBasePath { get; }
    public object HttpContext { get; }
    public string NewLine { get; }
    public PCLEnvironmentService(IPCLEnvironmentServiceConfiguration environmentServiceConfiguration, IEnvironmentManagementService environmentManagementService);
    private sealed virtual override IEnvironmentServiceConfiguration XAct.Environment.IEnvironmentService.get_Configuration();
    public sealed virtual IPCLEnvironmentServiceConfiguration get_Configuration();
    public sealed virtual Random get_Random();
    public sealed virtual CultureInfo get_DefaultCulture();
    public sealed virtual bool get_IsUserInteractive();
    public sealed virtual string get_DomainName();
    public sealed virtual string get_MachineName();
    public sealed virtual string get_ApplicationName();
    public sealed virtual string get_EnvironmentName();
    public sealed virtual string get_ApplicationNameHash();
    public Assembly get_EntryAssembly();
    public sealed virtual string MapPath(string virtualPath);
    public sealed virtual string get_ApplicationBasePath();
    public sealed virtual object get_HttpContext();
    public sealed virtual string get_NewLine();
    public sealed virtual long GetTotalMemoryAllocated(bool waitForGarbageCollectionBeforeReturning);
}
public class XAct.Environment.Services.Implementations.ProductInformationService : object {
    private ProductInformation[] _productInformations;
    private IProductInformationServiceConfiguration _productInformationServiceConfiguration;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<ProductInformation, string> CS$<>9__CachedAnonymousMethodDelegate1f;
    public IProductInformationServiceConfiguration Configuration { get; }
    public ProductInformationService(IProductInformationServiceConfiguration productInformationServiceConfiguration);
    public sealed virtual IProductInformationServiceConfiguration get_Configuration();
    public sealed virtual ProductInformation GetProductInformation(ProductInformationType productInformationType);
    public sealed virtual string ResourceFilter(ProductInformationType productInformationType);
    public sealed virtual string CompanyName(ProductInformationType productInformationType);
    public sealed virtual string ProductName(ProductInformationType productInformationType);
    public sealed virtual string CompanyDisplayNameResourceKey(ProductInformationType productInformationType);
    public sealed virtual string CompanyDisplayAddressResourceKey(ProductInformationType productInformationType);
    public sealed virtual string CompanyDisplayContactInformationResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductDisplayCopyrightResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductDisplayTitleResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductDisplaySubTitleResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductDisplayDescriptionResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductDisplayProductUrlResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductAPIBaseEndpointResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductAPIErrorReportingEndpointResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductAPISupportEndpointResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductAPILicensingEndpointResourceKey(ProductInformationType productInformationType);
    public sealed virtual string ProductAPIUpdatesAvailableEndpointResourceKey(ProductInformationType productInformationType);
    private string FallthruValue(Func`2<ProductInformation, string> methodName, ProductInformationType productInformationType, bool allowFallthru);
    [CompilerGeneratedAttribute]
private static string <ResourceFilter>b__0(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <CompanyName>b__2(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductName>b__4(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <CompanyDisplayNameResourceKey>b__6(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <CompanyDisplayAddressResourceKey>b__8(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <CompanyDisplayContactInformationResourceKey>b__a(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductDisplayCopyrightResourceKey>b__c(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductDisplayTitleResourceKey>b__e(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductDisplaySubTitleResourceKey>b__10(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductDisplayDescriptionResourceKey>b__12(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductDisplayProductUrlResourceKey>b__14(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductAPIBaseEndpointResourceKey>b__16(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductAPIErrorReportingEndpointResourceKey>b__18(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductAPISupportEndpointResourceKey>b__1a(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductAPILicensingEndpointResourceKey>b__1c(ProductInformation m);
    [CompilerGeneratedAttribute]
private static string <ProductAPIUpdatesAvailableEndpointResourceKey>b__1e(ProductInformation m);
}
[DataContractAttribute]
public enum XAct.Equality : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Equality Undefined;
    [EnumMemberAttribute]
public static Equality DataTypeCheck;
    [EnumMemberAttribute]
public static Equality Equal;
    [EnumMemberAttribute]
public static Equality NotEqual;
    [EnumMemberAttribute]
public static Equality LessThan;
    [EnumMemberAttribute]
public static Equality LessThanEqual;
    [EnumMemberAttribute]
public static Equality GreaterThan;
    [EnumMemberAttribute]
public static Equality GreaterThanEqual;
}
public class XAct.Events.ExceptionEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    public ExceptionEventArgs`1(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
public class XAct.Events.GenericCancelEventArgs`1 : CancelEventArgsBase`1<TItem> {
    public TItem Item { get; }
    public GenericCancelEventArgs`1(TItem item);
    public TItem get_Item();
}
public class XAct.Events.GenericExceptionEventArgs`1 : ExceptionEventArgs`1<TItem> {
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    public TItem Item { get; private set; }
    public GenericExceptionEventArgs`1(Exception exception, TItem item);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(TItem value);
}
public interface XAct.Events.IEvent {
}
public interface XAct.Events.IEventAggregatorService {
    public abstract virtual void Publish(T message);
    public abstract virtual void AddSubscriber(IEventSubscriber subscriber);
    public abstract virtual void RemoveSubscriber(IEventSubscriber subscriber);
}
public interface XAct.Events.IEventAggregatorServiceSubscriberServiceState {
}
public interface XAct.Events.IEventSubscriber {
}
public interface XAct.Events.IEventSubscriber`1 {
    public abstract virtual void Handle(T message);
}
[DefaultBindingImplementationAttribute("XAct.Events.IEventAggregatorServiceSubscriberServiceState", "4", "-1", "")]
public class XAct.Events.Implementations.EventAggregatorServiceSubscriberServiceState : List`1<IEventSubscriber> {
}
public interface XAct.Exceptions.Configuration.IExceptionHandlingServiceConfigurations {
    public abstract virtual void Add(IExceptionHandlingConfiguration exceptionHandlingDescription, string category);
    public abstract virtual IExceptionHandlingConfiguration Get(Exception exception, string category);
}
[FlagsAttribute]
public enum XAct.Exceptions.ExceptionHandlingBehaviour : Enum {
    public int value__;
    public static ExceptionHandlingBehaviour Unknown;
    public static ExceptionHandlingBehaviour Ignore;
    public static ExceptionHandlingBehaviour Log;
    public static ExceptionHandlingBehaviour LeaveExceptionIntact;
    public static ExceptionHandlingBehaviour ReplaceException;
    public static ExceptionHandlingBehaviour LogAndLeaveExceptionIntact;
    public static ExceptionHandlingBehaviour LogAndReplaceException;
}
public class XAct.Exceptions.ExceptionHandlingConfiguration : object {
    [CompilerGeneratedAttribute]
private Type <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionHandlingBehaviour <ExceptionHandlingBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLevel <TraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReplacementExceptionType>k__BackingField;
    public Type ExceptionType { get; private set; }
    public ExceptionHandlingBehaviour ExceptionHandlingBehaviour { get; private set; }
    public TraceLevel TraceLevel { get; public set; }
    public Type ReplacementExceptionType { get; private set; }
    public ExceptionHandlingConfiguration(Type exceptionToHandle, ExceptionHandlingBehaviour exceptionHandlingBehaviour, Type replacementException);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionHandlingBehaviour get_ExceptionHandlingBehaviour();
    [CompilerGeneratedAttribute]
private void set_ExceptionHandlingBehaviour(ExceptionHandlingBehaviour value);
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_TraceLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TraceLevel(TraceLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ReplacementExceptionType();
    [CompilerGeneratedAttribute]
private void set_ReplacementExceptionType(Type value);
}
public class XAct.Exceptions.ExceptionHandlingConfiguration`1 : ExceptionHandlingConfiguration {
    public ExceptionHandlingConfiguration`1(ExceptionHandlingBehaviour exceptionHandlingBehaviour);
}
public class XAct.Exceptions.ExceptionHandlingConfiguration`2 : ExceptionHandlingConfiguration {
    public ExceptionHandlingConfiguration`2(ExceptionHandlingBehaviour exceptionHandlingBehaviour);
}
public interface XAct.Exceptions.IExceptionHandlingConfiguration {
    public Type ExceptionType { get; }
    public ExceptionHandlingBehaviour ExceptionHandlingBehaviour { get; }
    public TraceLevel TraceLevel { get; public set; }
    public Type ReplacementExceptionType { get; }
    public abstract virtual Type get_ExceptionType();
    public abstract virtual ExceptionHandlingBehaviour get_ExceptionHandlingBehaviour();
    public abstract virtual TraceLevel get_TraceLevel();
    public abstract virtual void set_TraceLevel(TraceLevel value);
    public abstract virtual Type get_ReplacementExceptionType();
}
public interface XAct.Exceptions.IExceptionHandlingManagementService {
    public abstract virtual void Register(IExceptionHandlingConfiguration exceptionHandlingDescription, string category);
    public abstract virtual IExceptionHandlingConfiguration Retrieve(Exception exception, string category);
}
public interface XAct.Exceptions.IExceptionHandlingService {
    public IExceptionHandlingConfiguration Configuration { get; public set; }
    public Type DefaultExceptionType { get; public set; }
    public abstract virtual IExceptionHandlingConfiguration get_Configuration();
    public abstract virtual void set_Configuration(IExceptionHandlingConfiguration value);
    public abstract virtual Type get_DefaultExceptionType();
    public abstract virtual void set_DefaultExceptionType(Type value);
    public abstract virtual bool HandleException(Exception& exception, string category);
}
public interface XAct.Exceptions.IExceptionHandlingServiceConfiguration {
    public IExceptionHandlingConfiguration DefaultExceptionHandlingConfiguration { get; public set; }
    public Type DefaultExceptionType { get; public set; }
    public abstract virtual IExceptionHandlingConfiguration get_DefaultExceptionHandlingConfiguration();
    public abstract virtual void set_DefaultExceptionHandlingConfiguration(IExceptionHandlingConfiguration value);
    public abstract virtual Type get_DefaultExceptionType();
    public abstract virtual void set_DefaultExceptionType(Type value);
}
public class XAct.Exceptions.Implementations.ExceptionHandlingManagementService : object {
    private IExceptionHandlingServiceConfigurations _exceptionHandlingDefinitions;
    public ExceptionHandlingManagementService(IExceptionHandlingServiceConfigurations exceptionHandlingDefinitions);
    public sealed virtual void Register(IExceptionHandlingConfiguration exceptionHandlingDescription, string category);
    public sealed virtual IExceptionHandlingConfiguration Retrieve(Exception exception, string category);
}
public class XAct.Exceptions.Implementations.ExceptionHandlingService : object {
    private ITracingService _tracingService;
    private IExceptionHandlingManagementService _exceptionManagementService;
    private Type _defaultExceptionType;
    [CompilerGeneratedAttribute]
private IExceptionHandlingConfiguration <Configuration>k__BackingField;
    public IExceptionHandlingConfiguration Configuration { get; public set; }
    public Type DefaultExceptionType { get; public set; }
    public ExceptionHandlingService(ITracingService tracingService, IExceptionHandlingManagementService exceptionManagementService, IExceptionHandlingServiceConfiguration exceptionHandlingServiceConfiguration);
    [CompilerGeneratedAttribute]
public sealed virtual IExceptionHandlingConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Configuration(IExceptionHandlingConfiguration value);
    public sealed virtual Type get_DefaultExceptionType();
    public sealed virtual void set_DefaultExceptionType(Type value);
    public sealed virtual bool HandleException(Exception& exception, string category);
}
public class XAct.Exceptions.Implementations.ExceptionHandlingServiceConfiguration : object {
    private Type _defaultExceptionType;
    [CompilerGeneratedAttribute]
private IExceptionHandlingConfiguration <DefaultExceptionHandlingConfiguration>k__BackingField;
    public IExceptionHandlingConfiguration DefaultExceptionHandlingConfiguration { get; public set; }
    public Type DefaultExceptionType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IExceptionHandlingConfiguration get_DefaultExceptionHandlingConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultExceptionHandlingConfiguration(IExceptionHandlingConfiguration value);
    public sealed virtual Type get_DefaultExceptionType();
    public sealed virtual void set_DefaultExceptionType(Type value);
}
[ExtensionAttribute]
public static class XAct.Expressions.PredicateBuilder : object {
    public static Expression`1<Func`2<T, bool>> True();
    public static Expression`1<Func`2<T, bool>> False();
    public static Expression`1<Func`2<T, bool>> Create(Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Not(Expression`1<Func`2<T, bool>> expression);
    [ExtensionAttribute]
private static Expression`1<T> Compose(Expression`1<T> first, Expression`1<T> second, Func`3<Expression, Expression, Expression> merge);
    [CompilerGeneratedAttribute]
private static ParameterExpression <Compose>b__1(<>f__AnonymousType0`2<ParameterExpression, ParameterExpression> p);
    [CompilerGeneratedAttribute]
private static ParameterExpression <Compose>b__2(<>f__AnonymousType0`2<ParameterExpression, ParameterExpression> p);
}
[ExtensionAttribute]
public static class XAct.FloatExtensions : object {
    [ExtensionAttribute]
public static bool IsOdd(float number);
    [ExtensionAttribute]
public static bool IsEven(float number);
}
public class XAct.GenericEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TPayload <Value>k__BackingField;
    public TPayload Value { get; private set; }
    [DebuggerStepThroughAttribute]
public GenericEventArgs`1(TPayload value);
    [CompilerGeneratedAttribute]
public TPayload get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(TPayload value);
}
[ExtensionAttribute]
public static class XAct.GenericExtensions : object {
    [ExtensionAttribute]
public static bool IsSameAs(Nullable`1<T> a, Nullable`1<T> b, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static bool IsSameAs(T a, T b, Func`3<T, T, bool> comparer);
}
public class XAct.GenericProperty`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    public static T op_Implicit(GenericProperty`1<T> value);
    public static GenericProperty`1<T> op_Implicit(T value);
}
public interface XAct.Graphs.IHasIncomplete {
    public bool IsIncomplete { get; public set; }
    public abstract virtual bool get_IsIncomplete();
    public abstract virtual void set_IsIncomplete(bool value);
    public abstract virtual void Clear();
}
[ExtensionAttribute]
public static class XAct.GuidExtensions : object {
    [ExtensionAttribute]
public static string ToString(Guid guid);
    [ObsoleteAttribute]
[ExtensionAttribute]
public static Guid GenerateCombGuid(Guid machineGuid);
    [ExtensionAttribute]
public static string ToShortGuidString(Guid guid);
    [ExtensionAttribute]
public static string ToShortGuidString(Guid guid, bool embedTimeStamp);
    public static Guid ToShortGuid(string value);
    public static Guid ToShortGuid(string value, TimeSpan timeToLive);
}
[ExtensionAttribute]
public static class XAct.HasIdListExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TId> GetIds(IEnumerable`1<TEntity> entities);
    [CompilerGeneratedAttribute]
private static TId <GetIds>b__0(TEntity s);
}
[DataContractAttribute]
public enum XAct.HierarchicalOperationOption : Enum {
    public int value__;
    [EnumMemberAttribute]
public static HierarchicalOperationOption Undefined;
    [EnumMemberAttribute]
public static HierarchicalOperationOption TopOnly;
    [EnumMemberAttribute]
public static HierarchicalOperationOption Recursive;
}
[ExtensionAttribute]
public static class XAct.ICollectionsExtensions : object {
    private static ITracingService TracingService { get; }
    private static ITracingService get_TracingService();
    [ExtensionAttribute]
public static void Trace(ICollection`1<T> collection, TraceLevel traceLevel);
    [ExtensionAttribute]
public static void RemoveAll(ICollection`1<T> first, IEnumerable`1<T> second, Func`2<T, object> identitExpression);
    [ExtensionAttribute]
public static T[] RemoveAll(ICollection`1<T> collection, Predicate`1<T> predicate);
    [ExtensionAttribute]
public static bool Contains(ICollection`1<T> collection, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static List`1<T> GetItemsMissingFromList1(ICollection`1<T> collection1, ICollection`1<T> collection2, Func`2<T, object> comparisionExpression);
    [ExtensionAttribute]
public static List`1<T> Missing(ICollection`1<T> collection1, ICollection`1<T> collection2, Func`2<T, object> comparisionExpression);
    [ExtensionAttribute]
public static void UpdateFrom(ICollection`1<T> originalItemCollection, IEnumerable`1<T> updatedItemCollection, Func`2<T, object> referenceItemIdentityExpression, Func`3<T, T, bool> updateOriginalCollectionItemFromUpdatedCollectionItemAction, Predicate`1<T> softDeleteItemPredicate, Action`1<T> preAddItemAction, Action`1<T> preUpdateItemAction, Action`1<T> preDeleteItemAction);
    [ExtensionAttribute]
public static void UpdateFrom(ICollection`1<T1> originalItemCollection, IEnumerable`1<TProxy> updatedProxyItemCollection, Func`2<T1, object> referenceItemIdentityExpression, Func`2<TProxy, T1> mapProxyItemToReferenceItem, Func`3<T1, T1, bool> updateOriginalCollectionItemFromUpdatedCollectionItemAction, Predicate`1<TProxy> softDeleteItemPredicate, Action`1<T1> preAddItemAction, Action`1<T1> preUpdateItemAction, Action`1<T1> preDeleteItemAction);
    [ExtensionAttribute]
public static void Add(ICollection`1<T> destination, IEnumerable`1<T> source);
    [CompilerGeneratedAttribute]
private static bool <UpdateFrom>b__d(T o1, T o2);
}
[ExtensionAttribute]
public static class XAct.ICommandMessageExtensions : object {
    [ExtensionAttribute]
public static void Execute(ICommandMessage commandMessage);
}
[DataContractAttribute]
public enum XAct.Identity.AddressType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static AddressType Billing;
    [EnumMemberAttribute]
public static AddressType Shipping;
}
[DataContractAttribute]
public abstract class XAct.Identity.IdentityAddressBase : object {
    [CompilerGeneratedAttribute]
private AddressType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Phone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneExt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instructions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StreetLine1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StreetLine2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Neighbourhood>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [DataMemberAttribute]
public AddressType Type { get; public set; }
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Email { get; public set; }
    [DataMemberAttribute]
public string Phone { get; public set; }
    [DataMemberAttribute]
public string PhoneExt { get; public set; }
    [DataMemberAttribute]
public string Instructions { get; public set; }
    [DataMemberAttribute]
public string StreetLine1 { get; public set; }
    [DataMemberAttribute]
public string StreetLine2 { get; public set; }
    [DataMemberAttribute]
public string Neighbourhood { get; public set; }
    [DataMemberAttribute]
public string City { get; public set; }
    [DataMemberAttribute]
public string Region { get; public set; }
    [DataMemberAttribute]
public string PostalCode { get; public set; }
    [DataMemberAttribute]
public string Country { get; public set; }
    [CompilerGeneratedAttribute]
public virtual AddressType get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(AddressType value);
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
public virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Phone();
    [CompilerGeneratedAttribute]
public virtual void set_Phone(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneExt();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneExt(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Instructions();
    [CompilerGeneratedAttribute]
public virtual void set_Instructions(string value);
    [CompilerGeneratedAttribute]
public virtual string get_StreetLine1();
    [CompilerGeneratedAttribute]
public virtual void set_StreetLine1(string value);
    [CompilerGeneratedAttribute]
public virtual string get_StreetLine2();
    [CompilerGeneratedAttribute]
public virtual void set_StreetLine2(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Neighbourhood();
    [CompilerGeneratedAttribute]
public virtual void set_Neighbourhood(string value);
    [CompilerGeneratedAttribute]
public virtual string get_City();
    [CompilerGeneratedAttribute]
public virtual void set_City(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Region();
    [CompilerGeneratedAttribute]
public virtual void set_Region(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PostalCode();
    [CompilerGeneratedAttribute]
public virtual void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Country();
    [CompilerGeneratedAttribute]
public virtual void set_Country(string value);
}
[DataContractAttribute]
public abstract class XAct.Identity.IdentityAliasBase : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preferred>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SurName>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public bool Preferred { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public string FirstName { get; public set; }
    [DataMemberAttribute]
public string MoreNames { get; public set; }
    [DataMemberAttribute]
public string SurName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual bool get_Preferred();
    [CompilerGeneratedAttribute]
public virtual void set_Preferred(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FirstName();
    [CompilerGeneratedAttribute]
public virtual void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MoreNames();
    [CompilerGeneratedAttribute]
public virtual void set_MoreNames(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SurName();
    [CompilerGeneratedAttribute]
public virtual void set_SurName(string value);
}
[DataContractAttribute]
public abstract class XAct.Identity.IdentityBase`3 : object {
    [DataMemberAttribute]
private ICollection`1<TClaim> _identityClaims;
    [DataMemberAttribute]
private ICollection`1<TEntityAlias> _aliases;
    private Nullable`1<Guid> _preferredAliasFK;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentFK>k__BackingField;
    [CompilerGeneratedAttribute]
private TEntity <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModifiedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TEntityAlias, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    public Guid ParentFK { get; public set; }
    [DataMemberAttribute]
public TEntity Parent { get; public set; }
    public ICollection`1<TClaim> IdentityClaims { get; }
    [DataMemberAttribute]
public Nullable`1<Guid> PreferredAliasFK { get; public set; }
    [IgnoreDataMemberAttribute]
public TEntityAlias PreferredAlias { get; public set; }
    public ICollection`1<TEntityAlias> Aliases { get; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> DeletedOnUtc { get; public set; }
    [DataMemberAttribute]
public string CreatedBy { get; public set; }
    [DataMemberAttribute]
public string LastModifiedBy { get; public set; }
    [DataMemberAttribute]
public string DeletedBy { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_ParentFK();
    [CompilerGeneratedAttribute]
public virtual void set_ParentFK(Guid value);
    [CompilerGeneratedAttribute]
public virtual TEntity get_Parent();
    [CompilerGeneratedAttribute]
public virtual void set_Parent(TEntity value);
    public virtual ICollection`1<TClaim> get_IdentityClaims();
    public virtual Nullable`1<Guid> get_PreferredAliasFK();
    public virtual void set_PreferredAliasFK(Nullable`1<Guid> value);
    public virtual TEntityAlias get_PreferredAlias();
    public virtual void set_PreferredAlias(TEntityAlias value);
    public virtual ICollection`1<TEntityAlias> get_Aliases();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_DeletedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public virtual string get_LastModifiedBy();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedBy(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DeletedBy();
    [CompilerGeneratedAttribute]
public virtual void set_DeletedBy(string value);
    [CompilerGeneratedAttribute]
private static bool <get_PreferredAlias>b__3(TEntityAlias x);
}
public abstract class XAct.Identity.IdentityWithAddressesBase`4 : IdentityBase`3<TEntity, TEntityAlias, TEntityClaim> {
    private ICollection`1<TEntityAddress> _addresses;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <PreferredBillingAddressFK>k__BackingField;
    [CompilerGeneratedAttribute]
private TEntityAddress <PreferredBillingAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <PreferredShippingAddressFK>k__BackingField;
    [CompilerGeneratedAttribute]
private TEntityAddress <PreferredShippingAddress>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<Guid> PreferredBillingAddressFK { get; public set; }
    [DataMemberAttribute]
public TEntityAddress PreferredBillingAddress { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> PreferredShippingAddressFK { get; public set; }
    [DataMemberAttribute]
public TEntityAddress PreferredShippingAddress { get; public set; }
    [DataMemberAttribute]
public ICollection`1<TEntityAddress> Addresses { get; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_PreferredBillingAddressFK();
    [CompilerGeneratedAttribute]
public virtual void set_PreferredBillingAddressFK(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual TEntityAddress get_PreferredBillingAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreferredBillingAddress(TEntityAddress value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_PreferredShippingAddressFK();
    [CompilerGeneratedAttribute]
public virtual void set_PreferredShippingAddressFK(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual TEntityAddress get_PreferredShippingAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreferredShippingAddress(TEntityAddress value);
    public virtual ICollection`1<TEntityAddress> get_Addresses();
}
public interface XAct.IDependencyResolver {
    public abstract virtual void SetInternal(object o);
    public abstract virtual object GetInstance(Type type, bool throwExceptionIfNotFound);
    public abstract virtual object GetInstance(Type type, string tag, bool throwExceptionIfNotFound);
    public abstract virtual T GetInstance(bool throwExceptionIfNotFound);
    public abstract virtual T GetInstance(string tag, bool throwExceptionIfNotFound);
    public abstract virtual IEnumerable`1<object> GetInstances(Type type);
    public abstract virtual IEnumerable`1<T> GetInstances();
}
[ExtensionAttribute]
public static class XAct.IDictionaryExtensions : object {
    private static CultureInfo _invariantCulture;
    private static IDictionaryExtensions();
    [ExtensionAttribute]
public static object GetValue(IDictionary dictionary, object tag, bool caseInsensitive, Object[] oneAlternateTag);
    [ExtensionAttribute]
public static void Clone(IDictionary`2<TKey, TValue> source, IDictionary`2<TKey, TValue> target);
    [ExtensionAttribute]
public static void Trace(IDictionary dictionary, TraceLevel traceLevel);
    [ExtensionAttribute]
public static string JoinSafely(IDictionary dictionary, string separator, string separator2);
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<TKey, TValue> dictionary, TValue& result, TKey[] keys);
}
public interface XAct.IDistributedIdService {
    public abstract virtual Guid NewGuid();
}
[ExtensionAttribute]
public static class XAct.IEnumerableExtensions : object {
    private static CultureInfo _invariantCulture;
    private static IEnumerableExtensions();
    [ExtensionAttribute]
public static bool Exists(IEnumerable`1<T> collection, Predicate`1<T> predicateToApply);
    [ExtensionAttribute]
public static IEnumerable`1<T> Filter(IEnumerable`1<T> collection, Predicate`1<T> predicateToApply);
    [ExtensionAttribute]
public static bool Find(IEnumerable`1<T> collection, Predicate`1<T> predicateToApply, T& matchedItem);
    [ExtensionAttribute]
public static int FindIndex(IEnumerable`1<T> collection, Predicate`1<T> predicateToApply, T& matchedItem);
    [ExtensionAttribute]
public static bool FindLast(IEnumerable`1<T> collection, Predicate`1<T> predicateToApply, T& matchedItem);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> collection, Action`1<T> actionToApply);
    [ExtensionAttribute]
public static void ForEach(IEnumerable enumerable, Action`1<T> action);
    [ExtensionAttribute]
public static IEnumerable`1<TReturn> Map(IEnumerable`1<TCollectionItem> collection, Func`2<TCollectionItem, TReturn> functionToApply);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetItemsContainedInBothLists(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, object> expression);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetItemsExceptThoseFoundInBothLists(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, object> expression);
    [ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> referenceCollection, IEnumerable`1<T> updatedCollection, Func`2<T, object> expression);
    [ExtensionAttribute]
public static IEnumerable`1<T> Intersect(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, object> expression);
    [ExtensionAttribute]
public static IEnumerable`1<T> Union(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, object> expression);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> firstCollection, IEnumerable`1<T> secondCollection, Func`2<T, object> matchExpression, Action`2<T, T> updateSecondCollectionItemOverFirstCollectionItemAction);
    [ExtensionAttribute]
public static string CollectionToString(IEnumerable collection, string divChar);
    [ExtensionAttribute]
public static IEnumerable`1<int> To(int from, int to);
    [ExtensionAttribute]
public static IEnumerable`1<T> AtOddPositions(IEnumerable`1<T> list);
    [ExtensionAttribute]
public static IEnumerable`1<T> AtEvenPositions(IEnumerable`1<T> list);
    public static string ConvertListToInClause(IEnumerable list, string formatCode, bool useQuotes, bool useLowercase, bool addBrackets);
    [ExtensionAttribute]
public static IEnumerable`1<T> Append(IEnumerable`1<T> collection, T item);
    [ExtensionAttribute]
public static IEnumerable`1<T> Prepend(IEnumerable`1<T> collection, T item);
    [ExtensionAttribute]
public static T ArgMax(IEnumerable`1<T> collection, Func`2<T, TValue> function);
    private static bool GreaterThan(T first, T second);
    [ExtensionAttribute]
public static T ArgMin(IEnumerable`1<T> collection, Func`2<T, TValue> function);
    private static bool LessThan(T first, T second);
    private static T ArgComp(IEnumerable`1<T> collection, Func`2<T, TValue> function, Func`3<TValue, TValue, bool> accept);
    [ExtensionAttribute]
public static String[] ToStringArray(IEnumerable`1<T> x);
    [ExtensionAttribute]
public static string JoinSafely(IEnumerable`1<T> items, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static List`1<T> AddIfNotAlreadyAdded(IEnumerable`1<T> list, T item, Expression`1<Func`2<T, TProperty>> keySelector);
    [ExtensionAttribute]
public static List`1<T> AddIfNotAlreadyAdded(IEnumerable`1<T> list, IEnumerable`1<T> items, Expression`1<Func`2<T, TProperty>> keySelector);
    [ExtensionAttribute]
public static List`1<T> AddIfNotAlreadyAdded(IEnumerable`1<T> list, T item);
    [ExtensionAttribute]
public static List`1<T> AddIfNotAlreadyAdded(IEnumerable`1<T> list, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item);
    [ExtensionAttribute]
public static IEnumerable`1<T> TopologicalSort(IEnumerable`1<T> source, Func`2<T, IEnumerable`1<T>> dependencies, bool throwOnCycle);
    private static void Visit(T item, HashSet`1<T> visited, List`1<T> sorted, Func`2<T, IEnumerable`1<T>> dependencies, bool throwOnCycle);
    [ExtensionAttribute]
public static string ToDelimited(IEnumerable`1<T> list, string separator, Func`2<T, string> toStringFunction);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> GetDuplicates(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
public static bool IsMultiple(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool None(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IList`1<TSource> Except(IEnumerable`1<TSource> source, TSource item);
    [ExtensionAttribute]
public static bool AllValuesUnique(IEnumerable`1<T> source);
    [CompilerGeneratedAttribute]
private static string <ToStringArray>b__2d(T y);
    [CompilerGeneratedAttribute]
private static string <ToDelimited>b__43(T x);
    [CompilerGeneratedAttribute]
private static bool <GetDuplicates>b__45(IGrouping`2<TKey, TSource> i);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<TSource> <GetDuplicates>b__46(IGrouping`2<TKey, TSource> i);
}
public interface XAct.IHasApplicationIdentifier {
    public string ApplicationIdentifier { get; public set; }
    public abstract virtual string get_ApplicationIdentifier();
    public abstract virtual void set_ApplicationIdentifier(string value);
}
public interface XAct.IHasApplicationIdentifierReadOnly {
    public string ApplicationIdentifier { get; }
    public abstract virtual string get_ApplicationIdentifier();
}
public interface XAct.IHasApplicationTennant {
    public string SSOIdentifier { get; public set; }
    public abstract virtual string get_SSOIdentifier();
    public abstract virtual void set_SSOIdentifier(string value);
}
public interface XAct.IHasApplicationTennantId {
    public Guid ApplicationTennantId { get; public set; }
    public abstract virtual Guid get_ApplicationTennantId();
    public abstract virtual void set_ApplicationTennantId(Guid value);
}
public interface XAct.IHasApplicationTennantIdReadOnly {
    public Guid ApplicationTennantId { get; }
    public abstract virtual Guid get_ApplicationTennantId();
}
public interface XAct.IHasApplicationTennantIdSpecificDistributedGuidId {
}
public interface XAct.IHasApplicationTennantIdSpecificDistributedGuidIdReferenceData {
}
public interface XAct.IHasApplicationTennantIdSpecificReferenceData`1 {
}
public interface XAct.IHasAssemblyAndTypeAndMethodNames {
}
public interface XAct.IHasAssemblyAndTypeAndMethodNamesAndParameters {
    public Object[] Parameters { get; public set; }
    public abstract virtual Object[] get_Parameters();
    public abstract virtual void set_Parameters(Object[] value);
}
public interface XAct.IHasAssemblyAndTypeNames {
    public string AssemblyName { get; public set; }
    public string TypeFullName { get; public set; }
    public abstract virtual string get_AssemblyName();
    public abstract virtual void set_AssemblyName(string value);
    public abstract virtual string get_TypeFullName();
    public abstract virtual void set_TypeFullName(string value);
}
public interface XAct.IHasAuditability {
}
public interface XAct.IHasAuditabilitySimple {
}
public interface XAct.IHasBindingPriority {
}
public interface XAct.IHasBindingScope {
}
public interface XAct.IHasCategoryName {
    public string CategoryName { get; public set; }
    public abstract virtual string get_CategoryName();
    public abstract virtual void set_CategoryName(string value);
}
public interface XAct.IHasCategoryNameReadOnly {
    public string CategoryName { get; }
    public abstract virtual string get_CategoryName();
}
public interface XAct.IHasChildrenCollection`1 {
    public ICollection`1<T> Children { get; public set; }
    public abstract virtual ICollection`1<T> get_Children();
    public abstract virtual void set_Children(ICollection`1<T> value);
}
public interface XAct.IHasChildrenCollectionReadOnly`1 {
    public ICollection`1<T> Children { get; }
    public abstract virtual ICollection`1<T> get_Children();
}
public interface XAct.IHasClaim {
    public string Type { get; public set; }
    public string Value { get; public set; }
    public string Authority { get; public set; }
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual string get_Authority();
    public abstract virtual void set_Authority(string value);
}
public interface XAct.IHasCode {
    public string Code { get; public set; }
    public abstract virtual string get_Code();
    public abstract virtual void set_Code(string value);
}
public interface XAct.IHasCodedReferenceData`1 {
}
public interface XAct.IHasCodedReferenceDataReadOnly`1 {
}
public interface XAct.IHasCodeReadOnly {
    public string Code { get; }
    public abstract virtual string get_Code();
}
public interface XAct.IHasComment {
    public string Comment { get; public set; }
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
}
public interface XAct.IHasCorrelationGuidId {
    public Guid CorrelationId { get; public set; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual void set_CorrelationId(Guid value);
}
public interface XAct.IHasCorrelationGuidIdReadOnly {
}
public interface XAct.IHasCorrelationId`1 {
    public TId CorrelationId { get; public set; }
    public abstract virtual TId get_CorrelationId();
    public abstract virtual void set_CorrelationId(TId value);
}
public interface XAct.IHasCorrelationIdReadOnly`1 {
    public TId CorrelationId { get; }
    public abstract virtual TId get_CorrelationId();
}
public interface XAct.IHasCreate`1 {
    public abstract virtual TInstanceType CreateInstance();
}
public interface XAct.IHasCreateCollection`1 {
    public abstract virtual ICollection`1<TInstanceType> CreateInstanceCollection();
}
public interface XAct.IHasCreates`1 {
}
public interface XAct.IHasCurrent`1 {
    public TContext Current { get; public set; }
    public abstract virtual TContext get_Current();
    public abstract virtual void set_Current(TContext value);
}
public interface XAct.IHasCurrentReadOnly`1 {
    public TContext Current { get; }
    public abstract virtual TContext get_Current();
}
public interface XAct.IHasDataSourceIdentified {
    public IHasDataSourceIdentifier DataSource { get; }
    public abstract virtual IHasDataSourceIdentifier get_DataSource();
}
public interface XAct.IHasDataSourceIdentifier {
    public Guid DataSourceId { get; public set; }
    public string DataSourceSerializedIdentities { get; public set; }
    public abstract virtual Guid get_DataSourceId();
    public abstract virtual void set_DataSourceId(Guid value);
    public abstract virtual string get_DataSourceSerializedIdentities();
    public abstract virtual void set_DataSourceSerializedIdentities(string value);
}
public interface XAct.IHasDataSourceIdentifierReadOnly {
    public Guid DataSourceId { get; }
    public string DataSourceSerializedIdentities { get; }
    public abstract virtual Guid get_DataSourceId();
    public abstract virtual string get_DataSourceSerializedIdentities();
}
public interface XAct.IHasDateTimeAccessedOnUtc {
    public Nullable`1<DateTime> LastAccessedOnUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_LastAccessedOnUtc();
    public abstract virtual void set_LastAccessedOnUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasDateTimeAccessedOnUtcReadOnly {
    public Nullable`1<DateTime> LastAccessedOnUtc { get; }
    public abstract virtual Nullable`1<DateTime> get_LastAccessedOnUtc();
}
public interface XAct.IHasDateTimeCreatedBy {
    public string CreatedBy { get; public set; }
    public abstract virtual string get_CreatedBy();
    public abstract virtual void set_CreatedBy(string value);
}
public interface XAct.IHasDateTimeCreatedByReadOnly {
    public string CreatedBy { get; }
    public abstract virtual string get_CreatedBy();
}
public interface XAct.IHasDateTimeCreatedOnUtc {
    public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_CreatedOnUtc();
    public abstract virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasDateTimeCreatedOnUtcReadOnly {
    public Nullable`1<DateTime> CreatedOnUtc { get; }
    public abstract virtual Nullable`1<DateTime> get_CreatedOnUtc();
}
public interface XAct.IHasDateTimeDeletedBy {
    public string DeletedBy { get; public set; }
    public abstract virtual string get_DeletedBy();
    public abstract virtual void set_DeletedBy(string value);
}
public interface XAct.IHasDateTimeDeletedByReadOnly {
    public string DeletedBy { get; }
    public abstract virtual string get_DeletedBy();
}
public interface XAct.IHasDateTimeDeletedOnUtc {
    public Nullable`1<DateTime> DeletedOnUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_DeletedOnUtc();
    public abstract virtual void set_DeletedOnUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasDateTimeDeletedOnUtcReadOnly {
    public Nullable`1<DateTime> DeletedOnUtc { get; }
    public abstract virtual Nullable`1<DateTime> get_DeletedOnUtc();
}
public interface XAct.IHasDateTimeModifiedBy {
    public string LastModifiedBy { get; public set; }
    public abstract virtual string get_LastModifiedBy();
    public abstract virtual void set_LastModifiedBy(string value);
}
public interface XAct.IHasDateTimeModifiedByReadOnly {
    public string LastModifiedBy { get; }
    public abstract virtual string get_LastModifiedBy();
}
public interface XAct.IHasDateTimeModifiedOnUtc {
    public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    public abstract virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasDateTimeModifiedOnUtcReadOnly {
    public Nullable`1<DateTime> LastModifiedOnUtc { get; }
    public abstract virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
}
public interface XAct.IHasDateTimeTrackabilityUtc {
}
public interface XAct.IHasDateTimeTrackabilityUtcSimple {
}
public interface XAct.IHasDeleted {
    public bool Deleted { get; public set; }
    public abstract virtual bool get_Deleted();
    public abstract virtual void set_Deleted(bool value);
}
public interface XAct.IHasDeletedReadOnly {
    public bool Deleted { get; }
    public abstract virtual bool get_Deleted();
}
public interface XAct.IHasDescription {
    public string Description { get; public set; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
}
public interface XAct.IHasDescriptionReadOnly {
    public string Description { get; }
    public abstract virtual string get_Description();
}
public interface XAct.IHasDirtyFlag {
    public bool IsDirty { get; public set; }
    public abstract virtual bool get_IsDirty();
    public abstract virtual void set_IsDirty(bool value);
    public abstract virtual void ResetDirty();
}
public interface XAct.IHasDistributedGuidId {
}
public interface XAct.IHasDistributedGuidIdAndTimestamp {
}
[ExtensionAttribute]
public static class XAct.IHasDistributedGuidIdExtensions : object {
    private static IDistributedIdService DistributedIdService { get; }
    private static IDistributedIdService get_DistributedIdService();
    [ExtensionAttribute]
public static bool GenerateDistributedId(IHasId`1<Guid> model);
}
public interface XAct.IHasDistributedGuidIdReadOnly {
}
public interface XAct.IHasDistributedId`1 {
}
public static class XAct.IHasDistributedIdentifierExtensions : object {
}
public interface XAct.IHasDistributedIdentities {
}
public interface XAct.IHasDistributedIdentitiesReadOnly {
}
public interface XAct.IHasDistributedIdentityComplexType {
    public IHasDistributedIdentities DistributedIdentity { get; public set; }
    public abstract virtual IHasDistributedIdentities get_DistributedIdentity();
    public abstract virtual void set_DistributedIdentity(IHasDistributedIdentities value);
}
[ExtensionAttribute]
public static class XAct.IHasDistributedIdentityExtensions : object {
    [ExtensionAttribute]
public static bool Equals(IHasDistributedIdentities entity, IHasDistributedIdentities value);
}
public interface XAct.IHasDistributedIdReadOnly`1 {
}
public interface XAct.IHasDistributedTags {
    public ICollection`1<Tag> Tags { get; public set; }
    public abstract virtual ICollection`1<Tag> get_Tags();
    public abstract virtual void set_Tags(ICollection`1<Tag> value);
}
public interface XAct.IHasDistributedTagsReadOnly {
    public ICollection`1<Tag> Tags { get; }
    public abstract virtual ICollection`1<Tag> get_Tags();
}
public interface XAct.IHasEnabled {
    public bool Enabled { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
public interface XAct.IHasEnabledReadOnly {
    public bool Enabled { get; }
    public abstract virtual bool get_Enabled();
}
public interface XAct.IHasEncryptionApplied {
    public bool ObfuscationApplied { get; public set; }
    public Nullable`1<DateTime> ObfuscationRequiredLastChecked { get; public set; }
    public abstract virtual bool get_ObfuscationApplied();
    public abstract virtual void set_ObfuscationApplied(bool value);
    public abstract virtual Nullable`1<DateTime> get_ObfuscationRequiredLastChecked();
    public abstract virtual void set_ObfuscationRequiredLastChecked(Nullable`1<DateTime> value);
}
public interface XAct.IHasException {
    public Exception Exception { get; public set; }
    public abstract virtual Exception get_Exception();
    public abstract virtual void set_Exception(Exception value);
}
public interface XAct.IHasExceptionReadOnly {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
public interface XAct.IHasExcluded {
    public bool Excluded { get; public set; }
    public abstract virtual bool get_Excluded();
    public abstract virtual void set_Excluded(bool value);
}
public interface XAct.IHasExecutableAction {
    public abstract virtual void Execute();
}
public interface XAct.IHasExecutableAction`1 {
    public abstract virtual void Execute(TArg argument);
}
public interface XAct.IHasExecutableFunction`1 {
    public abstract virtual TResult Execute();
}
public interface XAct.IHasExecutableFunction`2 {
    public abstract virtual TResult Execute(TArg argument);
}
public interface XAct.IHasExecutableFunction`3 {
    public abstract virtual TResult Execute(TArg argument, TArg2& output2);
}
public interface XAct.IHasFactory`1 {
    public IHasCreates`1<TAggregateEntity> Factory { get; }
    public abstract virtual IHasCreates`1<TAggregateEntity> get_Factory();
}
public interface XAct.IHasFilter {
    public string Filter { get; public set; }
    public abstract virtual string get_Filter();
    public abstract virtual void set_Filter(string value);
}
public interface XAct.IHasFilterReadOnly {
    public string Filter { get; }
    public abstract virtual string get_Filter();
}
public interface XAct.IHasGetContext {
    public abstract virtual TContextType GetContext();
}
public interface XAct.IHasGetSet {
    public abstract virtual TValue Get(string key);
    public abstract virtual void Set(string key, TValue value);
}
public interface XAct.IHasGuidIdentity {
}
[ExtensionAttribute]
public static class XAct.IHasGuidIdExtensions : object {
    [ExtensionAttribute]
public static bool DetermineIfNewAndGenerateGuidIfSo(IHasId`1<Guid> entity, IRepositoryService repositoryService, IDistributedIdService distributedIdService, Nullable`1<bool> isNewOverride);
}
public interface XAct.IHasHierarchicalKeyValueCollection`1 {
}
public interface XAct.IHasHierarchyCollection`1 {
    public T Parent { get; public set; }
    public abstract virtual T get_Parent();
    public abstract virtual void set_Parent(T value);
}
public interface XAct.IHasHierarchyCollectionReadOnly`1 {
}
public interface XAct.IHasHighBindingPriority {
}
public interface XAct.IHasId`1 {
    public TId Id { get; public set; }
    public abstract virtual TId get_Id();
    public abstract virtual void set_Id(TId value);
}
public interface XAct.IHasIdentity`3 {
    public TEntity Parent { get; public set; }
    public Nullable`1<Guid> PreferredAliasFK { get; public set; }
    public TEntityAlias PreferredAlias { get; public set; }
    public ICollection`1<TEntityAlias> Aliases { get; }
    public ICollection`1<TClaim> IdentityClaims { get; }
    public abstract virtual TEntity get_Parent();
    public abstract virtual void set_Parent(TEntity value);
    public abstract virtual Nullable`1<Guid> get_PreferredAliasFK();
    public abstract virtual void set_PreferredAliasFK(Nullable`1<Guid> value);
    public abstract virtual TEntityAlias get_PreferredAlias();
    public abstract virtual void set_PreferredAlias(TEntityAlias value);
    public abstract virtual ICollection`1<TEntityAlias> get_Aliases();
    public abstract virtual ICollection`1<TClaim> get_IdentityClaims();
}
public interface XAct.IHasIdentityWithAddresses`4 {
    public Nullable`1<Guid> PreferredBillingAddressFK { get; public set; }
    public TPostalAddress PreferredBillingAddress { get; public set; }
    public Nullable`1<Guid> PreferredShippingAddressFK { get; public set; }
    public TPostalAddress PreferredShippingAddress { get; public set; }
    public ICollection`1<TPostalAddress> Addresses { get; }
    public abstract virtual Nullable`1<Guid> get_PreferredBillingAddressFK();
    public abstract virtual void set_PreferredBillingAddressFK(Nullable`1<Guid> value);
    public abstract virtual TPostalAddress get_PreferredBillingAddress();
    public abstract virtual void set_PreferredBillingAddress(TPostalAddress value);
    public abstract virtual Nullable`1<Guid> get_PreferredShippingAddressFK();
    public abstract virtual void set_PreferredShippingAddressFK(Nullable`1<Guid> value);
    public abstract virtual TPostalAddress get_PreferredShippingAddress();
    public abstract virtual void set_PreferredShippingAddress(TPostalAddress value);
    public abstract virtual ICollection`1<TPostalAddress> get_Addresses();
}
public interface XAct.IHasIdReadOnly`1 {
    public TId Id { get; }
    public abstract virtual TId get_Id();
}
public interface XAct.IHasImportance {
    public Importance Importance { get; public set; }
    public abstract virtual Importance get_Importance();
    public abstract virtual void set_Importance(Importance value);
}
public interface XAct.IHasInitializationStep {
}
public interface XAct.IHasInitialize {
    public abstract virtual void Initialize();
}
public interface XAct.IHasInitialize`1 {
    public abstract virtual void Initialize(T itemToInitialize);
}
public interface XAct.IHasInitialized {
    public bool Initialized { get; public set; }
    public abstract virtual bool get_Initialized();
    public abstract virtual void set_Initialized(bool value);
}
public interface XAct.IHasInitializedReadOnly {
    public bool Initialized { get; }
    public abstract virtual bool get_Initialized();
}
public interface XAct.IHasInnerItem`1 {
    public abstract virtual void SetInnerObject(object o);
}
public interface XAct.IHasInnerItemReadOnly {
    public abstract virtual TItem GetInnerItem();
}
public interface XAct.IHasIntCoordinate {
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Z { get; public set; }
    public abstract virtual int get_X();
    public abstract virtual void set_X(int value);
    public abstract virtual int get_Y();
    public abstract virtual void set_Y(int value);
    public abstract virtual int get_Z();
    public abstract virtual void set_Z(int value);
}
public interface XAct.IHasIntegrationStep {
}
public interface XAct.IHasIntId {
}
public interface XAct.IHasIntQuantity {
    public int Quantity { get; public set; }
    public abstract virtual int get_Quantity();
    public abstract virtual void set_Quantity(int value);
}
public interface XAct.IHasIsAuditModel {
    public Guid AuditId { get; public set; }
    public string Action { get; public set; }
    public DateTime AuditActionOn { get; public set; }
    public string AuditActionBy { get; public set; }
    public abstract virtual Guid get_AuditId();
    public abstract virtual void set_AuditId(Guid value);
    public abstract virtual string get_Action();
    public abstract virtual void set_Action(string value);
    public abstract virtual DateTime get_AuditActionOn();
    public abstract virtual void set_AuditActionOn(DateTime value);
    public abstract virtual string get_AuditActionBy();
    public abstract virtual void set_AuditActionBy(string value);
}
public interface XAct.IHasIsSimpleAuditModel {
    public string Source { get; public set; }
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
}
public interface XAct.IHasItem`1 {
    public TItem Item { get; public set; }
    public abstract virtual TItem get_Item();
    public abstract virtual void set_Item(TItem value);
}
public interface XAct.IHasItemReadOnly`1 {
    public TItem Item { get; }
    public abstract virtual TItem get_Item();
}
public interface XAct.IHasKey {
    public string Key { get; public set; }
    public abstract virtual string get_Key();
    public abstract virtual void set_Key(string value);
}
public interface XAct.IHasKeyReadOnly {
    public string Key { get; }
    public abstract virtual string get_Key();
}
public interface XAct.IHasKeyValue`1 {
}
public interface XAct.IHasKeyValueReadOnly`1 {
}
public interface XAct.IHasLowBindingPriority {
}
public interface XAct.IHasMachineId {
    public string MachineId { get; public set; }
    public abstract virtual string get_MachineId();
    public abstract virtual void set_MachineId(string value);
}
public interface XAct.IHasMachineIdReadOnly {
    public string MachineId { get; }
    public abstract virtual string get_MachineId();
}
public interface XAct.IHasMediumBindingPriority {
}
public interface XAct.IHasMetadataReadOnly {
    public ICollection`1<Metadata> Metadata { get; }
    public abstract virtual ICollection`1<Metadata> get_Metadata();
}
public interface XAct.IHasMethodName {
    public string MethodName { get; public set; }
    public abstract virtual string get_MethodName();
    public abstract virtual void set_MethodName(string value);
}
public interface XAct.IHasModelPersistenceMap {
}
public interface XAct.IHasModelState {
    public OfflineModelState ModelState { get; public set; }
    public abstract virtual OfflineModelState get_ModelState();
    public abstract virtual void set_ModelState(OfflineModelState value);
}
public interface XAct.IHasModuleIdentifier {
    public string ModuleIdentifier { get; public set; }
    public abstract virtual string get_ModuleIdentifier();
    public abstract virtual void set_ModuleIdentifier(string value);
}
public interface XAct.IHasModuleIdentifierReadOnly {
    public string ModuleIdentifier { get; }
    public abstract virtual string get_ModuleIdentifier();
}
public interface XAct.IHasName {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface XAct.IHasNameAndDescription {
    public string Name { get; public set; }
    public string Description { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
}
public interface XAct.IHasNameAndDescriptionReadOnly {
    public string Name { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
}
public interface XAct.IHasNamedValue`1 {
    public string Name { get; public set; }
    public TValue Value { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual TValue get_Value();
    public abstract virtual void set_Value(TValue value);
}
public interface XAct.IHasNamedValueReadOnly`1 {
    public TValue Value { get; }
    public abstract virtual TValue get_Value();
}
public interface XAct.IHasNameReadOnly {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface XAct.IHasNames {
    public string Title { get; public set; }
    public string FirstName { get; public set; }
    public string MoreNames { get; public set; }
    public string SurName { get; public set; }
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_FirstName();
    public abstract virtual void set_FirstName(string value);
    public abstract virtual string get_MoreNames();
    public abstract virtual void set_MoreNames(string value);
    public abstract virtual string get_SurName();
    public abstract virtual void set_SurName(string value);
}
public interface XAct.IHasNoBindingRequiredScope {
}
public interface XAct.IHasNote {
    public string Note { get; public set; }
    public abstract virtual string get_Note();
    public abstract virtual void set_Note(string value);
}
public interface XAct.IHasNoteReadOnly {
    public string Note { get; }
    public abstract virtual string get_Note();
}
public interface XAct.IHasNullableEndDateTimeUtc {
    public Nullable`1<DateTime> EndDateTimeUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_EndDateTimeUtc();
    public abstract virtual void set_EndDateTimeUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasNullableProjectedEndDateTimeUtc {
    public Nullable`1<DateTime> ProjectedEndDateTimeUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_ProjectedEndDateTimeUtc();
    public abstract virtual void set_ProjectedEndDateTimeUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasNullableProjectedStartDateTimeEndDateTimeUtc {
}
public interface XAct.IHasNullableProjectedStartDateTimeUtc {
    public Nullable`1<DateTime> ProjectedStartDateTimeUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_ProjectedStartDateTimeUtc();
    public abstract virtual void set_ProjectedStartDateTimeUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasNullableStartDateTimeEndDateTimeUtc {
}
public interface XAct.IHasNullableStartDateTimeUtc {
    public Nullable`1<DateTime> StartDateTimeUtc { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_StartDateTimeUtc();
    public abstract virtual void set_StartDateTimeUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasOrder {
    public int Order { get; public set; }
    public abstract virtual int get_Order();
    public abstract virtual void set_Order(int value);
}
public interface XAct.IHasOrderReadOnly {
    public int Order { get; }
    public abstract virtual int get_Order();
}
public interface XAct.IHasOrganisationIdentifier {
    public Guid OrganisationId { get; public set; }
    public abstract virtual Guid get_OrganisationId();
    public abstract virtual void set_OrganisationId(Guid value);
}
public interface XAct.IHasOrganisationIdentifierReadOnly {
    public Guid OrganisationId { get; }
    public abstract virtual Guid get_OrganisationId();
}
public interface XAct.IHasOwnerFK`1 {
    public TId OwnerFK { get; }
    public abstract virtual TId get_OwnerFK();
}
public interface XAct.IHasOwnerFKReadOnly`1 {
    public TId OwnerFK { get; }
    public abstract virtual TId get_OwnerFK();
}
public interface XAct.IHasParent`1 {
    public TParent Parent { get; public set; }
    public abstract virtual TParent get_Parent();
    public abstract virtual void set_Parent(TParent value);
}
public interface XAct.IHasParentFK`1 {
    public TId ParentFK { get; public set; }
    public abstract virtual TId get_ParentFK();
    public abstract virtual void set_ParentFK(TId value);
}
public interface XAct.IHasParentFKReadOnly`1 {
    public TId ParentFK { get; }
    public abstract virtual TId get_ParentFK();
}
public interface XAct.IHasParentReadOnly`1 {
    public TParent Parent { get; public set; }
    public abstract virtual TParent get_Parent();
    public abstract virtual void set_Parent(TParent value);
}
public interface XAct.IHasPersistableClaim {
    public Guid OwnerFK { get; public set; }
    public abstract virtual Guid get_OwnerFK();
    public abstract virtual void set_OwnerFK(Guid value);
}
public interface XAct.IHasPostalAddress {
    public string Name { get; public set; }
    public string Email { get; public set; }
    public string Phone { get; public set; }
    public string PhoneExt { get; public set; }
    public string Instructions { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Email();
    public abstract virtual void set_Email(string value);
    public abstract virtual string get_Phone();
    public abstract virtual void set_Phone(string value);
    public abstract virtual string get_PhoneExt();
    public abstract virtual void set_PhoneExt(string value);
    public abstract virtual string get_Instructions();
    public abstract virtual void set_Instructions(string value);
}
public interface XAct.IHasPostalAddressMinimal {
    public string StreetLine1 { get; public set; }
    public string StreetLine2 { get; public set; }
    public string Neighbourhood { get; public set; }
    public string City { get; public set; }
    public string Region { get; public set; }
    public string PostalCode { get; public set; }
    public string Country { get; public set; }
    public abstract virtual string get_StreetLine1();
    public abstract virtual void set_StreetLine1(string value);
    public abstract virtual string get_StreetLine2();
    public abstract virtual void set_StreetLine2(string value);
    public abstract virtual string get_Neighbourhood();
    public abstract virtual void set_Neighbourhood(string value);
    public abstract virtual string get_City();
    public abstract virtual void set_City(string value);
    public abstract virtual string get_Region();
    public abstract virtual void set_Region(string value);
    public abstract virtual string get_PostalCode();
    public abstract virtual void set_PostalCode(string value);
    public abstract virtual string get_Country();
    public abstract virtual void set_Country(string value);
}
public interface XAct.IHasPreferred {
    public bool Preferred { get; public set; }
    public abstract virtual bool get_Preferred();
    public abstract virtual void set_Preferred(bool value);
}
public interface XAct.IHasPrice {
    public decimal Price { get; public set; }
    public abstract virtual decimal get_Price();
    public abstract virtual void set_Price(decimal value);
}
public interface XAct.IHasPriority {
    public Priority Priority { get; public set; }
    public abstract virtual Priority get_Priority();
    public abstract virtual void set_Priority(Priority value);
}
public interface XAct.IHasPriorityReadOnly {
    public Priority Priority { get; }
    public abstract virtual Priority get_Priority();
}
public interface XAct.IHasQuantity {
    public decimal Quantity { get; public set; }
    public abstract virtual decimal get_Quantity();
    public abstract virtual void set_Quantity(decimal value);
}
public interface XAct.IHasReferenceData {
}
public interface XAct.IHasReferenceData`1 {
}
public interface XAct.IHasReferenceDataReadOnly {
}
public interface XAct.IHasReferenceDataReadOnly`1 {
}
public interface XAct.IHasRenderingHints {
    public string RenderGroupingHints { get; public set; }
    public int RenderOrderHint { get; public set; }
    public abstract virtual string get_RenderGroupingHints();
    public abstract virtual void set_RenderGroupingHints(string value);
    public abstract virtual int get_RenderOrderHint();
    public abstract virtual void set_RenderOrderHint(int value);
}
public interface XAct.IHasRenderingHintsIdentifierReadOnly {
    public string RenderHintsIdentifier { get; }
    public abstract virtual string get_RenderHintsIdentifier();
}
public interface XAct.IHasRenderingHintsReadOnly {
    public string RenderGroupingHints { get; }
    public int RenderOrderHint { get; }
    public abstract virtual string get_RenderGroupingHints();
    public abstract virtual int get_RenderOrderHint();
}
public interface XAct.IHasRenderingImageHints {
}
public interface XAct.IHasRenderingImageHintsReadOnly {
    public string RenderingImageHints { get; }
    public abstract virtual string get_RenderingImageHints();
}
public interface XAct.IHasResourceFilter {
    public string ResourceFilter { get; public set; }
    public abstract virtual string get_ResourceFilter();
    public abstract virtual void set_ResourceFilter(string value);
}
public interface XAct.IHasResourceFilterReadOnly {
    public string ResourceFilter { get; }
    public abstract virtual string get_ResourceFilter();
}
public interface XAct.IHasResult`1 {
    public TResult Result { get; }
    public abstract virtual TResult get_Result();
}
public interface XAct.IHasResultStatus {
    public ResultStatus Status { get; public set; }
    public abstract virtual ResultStatus get_Status();
    public abstract virtual void set_Status(ResultStatus value);
}
public interface XAct.IHasResultStatusReadOnly {
    public ResultStatus Status { get; }
    public abstract virtual ResultStatus get_Status();
}
public interface XAct.IHasRetrievePersist`1 {
    public abstract virtual T Retrieve();
    public abstract virtual void Persist();
}
public interface XAct.IHasSelected {
    public bool Selected { get; public set; }
    public abstract virtual bool get_Selected();
    public abstract virtual void set_Selected(bool value);
}
public interface XAct.IHasSelectedReadOnly {
    public bool Selected { get; }
    public abstract virtual bool get_Selected();
}
public interface XAct.IHasSerializedTypeValueAndMethod {
    public SerializationMethod SerializationMethod { get; public set; }
    public string SerializedValueType { get; public set; }
    public string SerializedValue { get; public set; }
    public abstract virtual SerializationMethod get_SerializationMethod();
    public abstract virtual void set_SerializationMethod(SerializationMethod value);
    public abstract virtual string get_SerializedValueType();
    public abstract virtual void set_SerializedValueType(string value);
    public abstract virtual string get_SerializedValue();
    public abstract virtual void set_SerializedValue(string value);
}
[ExtensionAttribute]
public static class XAct.IHasSerializedTypeValueAndMethodExtensions : object {
    [ExtensionAttribute]
public static SerializationMethod SerializeValue(IHasSerializedTypeValueAndMethod entity, T value, SerializationMethod serializationMethod, Type valueType);
    [ExtensionAttribute]
public static object DeserializeValue(IHasSerializedTypeValueAndMethod entity);
    [ExtensionAttribute]
public static T DeserializeValue(IHasSerializedTypeValueAndMethod entity);
}
public interface XAct.IHasService {
}
public interface XAct.IHasServiceConfiguration {
}
public interface XAct.IHasServiceState {
}
public interface XAct.IHasSettingRenderingHints {
    public string RenderLabelHints { get; public set; }
    public string RenderEditControlHints { get; public set; }
    public string RenderViewControlHints { get; public set; }
    public string RenderEditValidationHints { get; public set; }
    public abstract virtual string get_RenderLabelHints();
    public abstract virtual void set_RenderLabelHints(string value);
    public abstract virtual string get_RenderEditControlHints();
    public abstract virtual void set_RenderEditControlHints(string value);
    public abstract virtual string get_RenderViewControlHints();
    public abstract virtual void set_RenderViewControlHints(string value);
    public abstract virtual string get_RenderEditValidationHints();
    public abstract virtual void set_RenderEditValidationHints(string value);
}
public interface XAct.IHasSettingRenderingHintsReadOnly {
    public string RenderLabelHints { get; }
    public string RenderEditControlHints { get; }
    public string RenderViewControlHints { get; }
    public string RenderEditValidationHints { get; }
    public abstract virtual string get_RenderLabelHints();
    public abstract virtual string get_RenderEditControlHints();
    public abstract virtual string get_RenderViewControlHints();
    public abstract virtual string get_RenderEditValidationHints();
}
public interface XAct.IHasSeverity {
    public Severity Severity { get; public set; }
    public abstract virtual Severity get_Severity();
    public abstract virtual void set_Severity(Severity value);
}
public interface XAct.IHasSingletonBindingScope {
}
public interface XAct.IHasStart {
}
public interface XAct.IHasStartStop {
}
public interface XAct.IHasStatus {
    public string Status { get; public set; }
    public abstract virtual string get_Status();
    public abstract virtual void set_Status(string value);
}
public interface XAct.IHasStatusFK {
    public string StatusFK { get; public set; }
    public abstract virtual string get_StatusFK();
    public abstract virtual void set_StatusFK(string value);
}
public interface XAct.IHasStatusReadOnly {
    public string Status { get; }
    public abstract virtual string get_Status();
}
public interface XAct.IHasStop {
}
public interface XAct.IHasSubjectAndBody {
    public string Subject { get; public set; }
    public string Body { get; public set; }
    public abstract virtual string get_Subject();
    public abstract virtual void set_Subject(string value);
    public abstract virtual string get_Body();
    public abstract virtual void set_Body(string value);
}
public interface XAct.IHasSubjectAndBodyReadOnly {
    public string Subject { get; }
    public string Body { get; }
    public abstract virtual string get_Subject();
    public abstract virtual string get_Body();
}
public interface XAct.IHasSuccess {
    public bool Success { get; public set; }
    public abstract virtual bool get_Success();
    public abstract virtual void set_Success(bool value);
}
public interface XAct.IHasSuccessReadOnly {
    public bool Success { get; }
    public abstract virtual bool get_Success();
}
public interface XAct.IHasSyncronizedDeleteInformation {
    public Guid MarkedForDeletionKey { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> MarkedForDeletionDateTimeUtc { get; public set; }
    public abstract virtual Guid get_MarkedForDeletionKey();
    public abstract virtual void set_MarkedForDeletionKey(Guid value);
    public abstract virtual Nullable`1<DateTime> get_MarkedForDeletionDateTimeUtc();
    public abstract virtual void set_MarkedForDeletionDateTimeUtc(Nullable`1<DateTime> value);
}
public interface XAct.IHasTag {
    public string Tag { get; public set; }
    public abstract virtual string get_Tag();
    public abstract virtual void set_Tag(string value);
}
public interface XAct.IHasTag`1 {
}
public interface XAct.IHasTagReadOnly {
    public string Tag { get; }
    public abstract virtual string get_Tag();
}
public interface XAct.IHasTagsReadOnly {
    public ICollection`1<Tag> Tags { get; }
    public abstract virtual ICollection`1<Tag> get_Tags();
}
public interface XAct.IHasText {
    public string Text { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface XAct.IHasTextAndDescription {
}
public interface XAct.IHasTextAndDescriptionReadOnly {
}
public interface XAct.IHasTextAndTitle {
}
public interface XAct.IHasTextAndTitleReadOnly {
}
public interface XAct.IHasTextReadOnly {
    public string Text { get; }
    public abstract virtual string get_Text();
}
public interface XAct.IHasTimestamp {
    public Byte[] Timestamp { get; public set; }
    public abstract virtual Byte[] get_Timestamp();
    public abstract virtual void set_Timestamp(Byte[] value);
}
public interface XAct.IHasTitle {
    public string Title { get; public set; }
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
}
public interface XAct.IHasTitleReadOnly {
    public string Title { get; }
    public abstract virtual string get_Title();
}
public interface XAct.IHasTouched {
    public DateTime LastAccessed { get; }
    public abstract virtual DateTime get_LastAccessed();
    public abstract virtual void Touch();
}
public interface XAct.IHasTraceLevel {
    public TraceLevel TraceLevel { get; public set; }
    public abstract virtual TraceLevel get_TraceLevel();
    public abstract virtual void set_TraceLevel(TraceLevel value);
}
public interface XAct.IHasTransientBindingScope {
}
public interface XAct.IHasTypeName {
    public string TypeName { get; public set; }
    public abstract virtual string get_TypeName();
    public abstract virtual void set_TypeName(string value);
}
public interface XAct.IHasUndoable {
    public bool Undoable { get; public set; }
    public abstract virtual bool get_Undoable();
    public abstract virtual void set_Undoable(bool value);
}
public interface XAct.IHasUndoableReadOnly {
    public bool Undoable { get; }
    public abstract virtual bool get_Undoable();
}
public interface XAct.IHasUserIdentifier {
    public string UserIdentifier { get; public set; }
    public abstract virtual string get_UserIdentifier();
    public abstract virtual void set_UserIdentifier(string value);
}
public interface XAct.IHasUserIdentifierReadOnly {
    public string UserIdentifier { get; }
    public abstract virtual string get_UserIdentifier();
}
public interface XAct.IHasValid {
    public bool Valid { get; }
    public abstract virtual bool get_Valid();
}
public interface XAct.IHasValidFromToDateRange {
    public Nullable`1<DateTime> ValidFrom { get; public set; }
    public Nullable`1<DateTime> ValidTo { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_ValidFrom();
    public abstract virtual void set_ValidFrom(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_ValidTo();
    public abstract virtual void set_ValidTo(Nullable`1<DateTime> value);
}
public interface XAct.IHasValue`1 {
    public TValue Value { get; public set; }
    public abstract virtual TValue get_Value();
    public abstract virtual void set_Value(TValue value);
}
public interface XAct.IHasValueReadOnly`1 {
    public TValue Value { get; }
    public abstract virtual TValue get_Value();
}
public interface XAct.IHasWeakReferenced`1 {
    public WeakReference WeakReference { get; }
    public abstract virtual WeakReference get_WeakReference();
}
public interface XAct.IHasWebThreadBindingScope {
}
public interface XAct.IHasWeight {
    public int Weight { get; public set; }
    public abstract virtual int get_Weight();
    public abstract virtual void set_Weight(int value);
}
public interface XAct.IHasXActLibEntity {
}
public interface XAct.IHasXActLibModelPersistenceMap {
}
public interface XAct.IHasXActLibProcessor {
}
public interface XAct.IHasXActLibService {
}
public interface XAct.IHasXActLibServiceConfiguration {
}
public interface XAct.IHasXActLibServiceState {
}
public interface XAct.IHasXActLibTestServiceConfiguration {
}
[ExtensionAttribute]
public static class XAct.IInitializeLibraryBindingsResultsExtensions : object {
    private static object _lock;
    private static IInitializeLibraryBindingsResultsExtensions();
    [ExtensionAttribute]
public static string ToStringEx(IInitializeLibraryBindingsResults initializeLibraryBindingsResults);
    [ExtensionAttribute]
public static void DumpToFile(IInitializeLibraryBindingsResults initializeLibraryBindingsResults, string fullFilePath);
    private static string ExtractBaseDirectory(string baseDirectory);
}
[ExtensionAttribute]
public static class XAct.IListExtensions : object {
    private static IEnvironmentService EnvironmentService { get; }
    private static IEnvironmentService get_EnvironmentService();
    [ExtensionAttribute]
public static void AddIfNotAlreadyAdded(IList`1<T> list, T item);
    [ExtensionAttribute]
public static void AddIfNotAlreadyAdded(IList`1<T> list, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static bool Contains(IList`1<T> list, T item, Func`2<T, object> expression);
    [ExtensionAttribute]
public static string ToText(IList`1<T> stringList);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<int, TData>> Chunk(IList`1<TData> list, int chunkMaxSize);
    [ExtensionAttribute]
public static IEnumerable`1<TData> GetPage(IList`1<TData> list, int pageSize, int pageNumber);
    [ExtensionAttribute]
public static void RemoveAll(IList`1<T> listToModify, ICollection`1<T> itemsToUseAsFilters, Func`2<T, object> comparisionExpression, T[]& removedItems);
    [ExtensionAttribute]
public static void RemoveAll(IList`1<T> first, Predicate`1<T> predicate);
    [ExtensionAttribute]
public static String[] Trace(IList`1<T> list);
    [ExtensionAttribute]
public static int LastIndexOf(IList`1<T> items, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static void Truncate(IList`1<T> list, int newSize);
    [CompilerGeneratedAttribute]
private static object <Contains>b__3(T x);
}
public class XAct.Implementations.DistributedIdService : object {
    private ITracingService _tracingService;
    private IEnvironmentService _environmentService;
    private Oxidation _oxidation;
    private SequentialGuidGenerator _sequentialGuidGenerator;
    public DistributedIdService(ITracingService tracingService, IEnvironmentService environmentService);
    public sealed virtual Guid NewGuid();
}
[DataContractAttribute]
public enum XAct.Importance : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Importance Critical;
    [EnumMemberAttribute]
public static Importance Urgent;
    [EnumMemberAttribute]
public static Importance High;
    [EnumMemberAttribute]
public static Importance Normal;
    [EnumMemberAttribute]
public static Importance Low;
    [EnumMemberAttribute]
public static Importance VeryLow;
}
public interface XAct.Initialization.IHastInitializationStage {
    public InitializationStage InitializationStage { get; }
    public abstract virtual InitializationStage get_InitializationStage();
}
public enum XAct.Initialization.InitializationStage : Enum {
    public int value__;
    public static InitializationStage Undefined;
    public static InitializationStage S01_PreInitialization;
    public static InitializationStage S02_Initialization;
    public static InitializationStage S03_Integration;
    public static InitializationStage S04_PostIntegration;
}
public class XAct.Initialization.InitializerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private InitializationStage <InitializationStage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string ModuleName { get; private set; }
    public string Tag { get; private set; }
    public InitializationStage InitializationStage { get; private set; }
    public int Order { get; private set; }
    public bool Enabled { get; private set; }
    public string Description { get; private set; }
    public InitializerAttribute(string moduleName, string tag, InitializationStage initializationStage, int order, string description);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
private void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(string value);
    [CompilerGeneratedAttribute]
public sealed virtual InitializationStage get_InitializationStage();
    [CompilerGeneratedAttribute]
private void set_InitializationStage(InitializationStage value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
private void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
}
[ExtensionAttribute]
public static class XAct.IntegerExtensions : object {
    [ExtensionAttribute]
public static bool IsLargerThan(int number, int minimumNumber);
    [ExtensionAttribute]
public static bool IsLargerThanOrEqualTo(int number, int minimumNumber);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void ValidateIsLargerThan(int number, int minimumNumber);
    [ObsoleteAttribute]
[ExtensionAttribute]
public static void ValidateIsLargerThanOrEqualTo(int number, int minimumNumber);
    [ExtensionAttribute]
public static bool IsSmallerThan(int number, int maximumNumber);
    [ExtensionAttribute]
public static bool IsSmallerThanOrEqualTo(int number, int maximumNumber);
    [ExtensionAttribute]
public static void ValidateIsSmallerThan(int number, int maximumNumber);
    [ExtensionAttribute]
public static void ValidateIsSmallerThanOrEqualTo(int number, int referenceNumber);
    [ExtensionAttribute]
public static string ToHexString(int number);
    public static string ToHexString2(int number);
    [ExtensionAttribute]
public static string Pad(int number, int length);
    [ExtensionAttribute]
public static int MinMax(int number, int min, int max);
    [ExtensionAttribute]
public static bool BitIsSet(int number, int checkNumber);
    [ExtensionAttribute]
public static bool BitIsNotSet(int number, int flags);
    [ExtensionAttribute]
public static int BitSet(int number, int flags);
    [ExtensionAttribute]
public static int BitClear(int number, int flags);
    [ExtensionAttribute]
public static Guid ToGuid(int value);
}
public abstract class XAct.IO.DirectoryInfoBase`2 : FileSystemInfoBase`1<TIOService> {
    protected DirectoryInfoBase`2(IIOService managingIOService, string fullName);
    protected DirectoryInfoBase`2(IIOService managingIOService, IPathService pathService, string fullName);
    public sealed virtual IFileInfo[] GetFiles();
}
public enum XAct.IO.FileAccess : Enum {
    public int value__;
    public static FileAccess Read;
    public static FileAccess Write;
    public static FileAccess ReadWrite;
}
public enum XAct.IO.FileDateType : Enum {
    public int value__;
    public static FileDateType Created;
    public static FileDateType LastAccessed;
    public static FileDateType LastModified;
}
public class XAct.IO.FileInfoBase`2 : FileSystemInfoBase`1<TIOService> {
    private TDirectoryInfo _parentDirectory;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    public string Extension { get; }
    public IDirectoryInfo Directory { get; }
    public bool IsReadOnly { get; private set; }
    public long Size { get; }
    protected FileInfoBase`2(IIOService managingIOService, string fullName);
    protected FileInfoBase`2(IIOService managingIOService, IPathService pathService, string fullName);
    public sealed virtual string get_Extension();
    public sealed virtual IDirectoryInfo get_Directory();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
    public sealed virtual long get_Size();
}
public enum XAct.IO.FileMode : Enum {
    public int value__;
    public static FileMode CreateNew;
    public static FileMode Create;
    public static FileMode Open;
    public static FileMode OpenOrCreate;
    public static FileMode Truncate;
    public static FileMode Append;
}
[FlagsAttribute]
public enum XAct.IO.FileShare : Enum {
    public int value__;
    public static FileShare None;
    public static FileShare Read;
    public static FileShare Write;
    public static FileShare ReadWrite;
    public static FileShare Delete;
    public static FileShare Inheritable;
}
public abstract class XAct.IO.FileSystemInfoBase`1 : object {
    [CompilerGeneratedAttribute]
private IIOService <IOService>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathService <PathService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public IIOService IOService { get; private set; }
    protected IPathService PathService { get; private set; }
    public string Name { get; private set; }
    public string FullName { get; private set; }
    public bool Exists { get; }
    public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    protected FileSystemInfoBase`1(IIOService managingIOService, IPathService pathService, string fullName);
    [CompilerGeneratedAttribute]
public sealed virtual IIOService get_IOService();
    [CompilerGeneratedAttribute]
private void set_IOService(IIOService value);
    [CompilerGeneratedAttribute]
protected IPathService get_PathService();
    [CompilerGeneratedAttribute]
private void set_PathService(IPathService value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    public sealed virtual bool get_Exists();
    public sealed virtual Nullable`1<DateTime> get_CreatedOnUtc();
    public sealed virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    public sealed virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    public sealed virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
}
public enum XAct.IO.Format : Enum {
    public int value__;
    public static Format Undefined;
    public static Format Default;
    public static Format Auto;
    public static Format InputFormat;
    public static Format Console;
    public static Format Html;
    public static Format PDF;
}
public interface XAct.IO.IDefaultPathService {
}
public interface XAct.IO.IDirectoryInfo {
    public abstract virtual IFileInfo[] GetFiles();
}
public interface XAct.IO.IFileInfo {
    public string Extension { get; }
    public IDirectoryInfo Directory { get; }
    public bool IsReadOnly { get; }
    public long Size { get; }
    public abstract virtual string get_Extension();
    public abstract virtual IDirectoryInfo get_Directory();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual long get_Size();
}
public interface XAct.IO.IFileSystemInfo {
    public IIOService IOService { get; }
    public string Name { get; }
    public string FullName { get; }
    public bool Exists { get; }
    public abstract virtual IIOService get_IOService();
    public abstract virtual string get_Name();
    public abstract virtual string get_FullName();
    public abstract virtual bool get_Exists();
}
public interface XAct.IO.IIOService {
    public string DirectoryAccessTestFileName { get; }
    public abstract virtual string get_DirectoryAccessTestFileName();
    public abstract virtual Task`1<Stream> FileOpenAsync(string uri, FileMode fileMode, FileAccess fileAccess, FileShare fileShare);
    public abstract virtual Task`1<Stream> FileOpenReadAsync(string uri);
    public abstract virtual Task`1<Stream> FileOpenWriteAsync(string uri, bool replaceAnyIfFound, bool append);
    [ObsoleteAttribute("Obfuscates what is really going on. Prefer instead using ioService.OpenRead(path).OpenStreamReader()")]
public abstract virtual Task`1<StreamReader> FileOpenTextAsync(string uri);
    public abstract virtual Task FileReplaceAsync(string sourceUri, string destinationUri, string destinationBackupUri);
    public abstract virtual Task FileCopyAsync(string sourceUri, string destinationUri, bool overwriteAllowed);
    [ObsoleteAttribute("Obfuscates what is really going on: prefer using ioService.OpenWrite(path,false, false)")]
public abstract virtual Task`1<Stream> FileCreateAsync(string uri);
    public abstract virtual Task FileDeleteAsync(string uri);
    public abstract virtual Task`1<bool> FileExistsAsync(string uri);
    public abstract virtual Task`1<IFileInfo> GetFileInfoAsync(string fileName);
    public abstract virtual Task FileMoveAsync(string sourceUri, string destinationUri, bool overWriteAllowed);
    [ObsoleteAttribute("Obfuscates whats really going on. Prefer using ioService.OpenWrite(uri,false, true).OpenStreamWriter().Write(contents);")]
public abstract virtual Task FileAppendAllTextAsync(string uri, string contents);
    public abstract virtual Task`1<bool> FileCheckAccessibilityAsync(string fileFullName, FileAccess desiredFileAccess, FileShare desiredFileShare);
    public abstract virtual Task`1<String[]> GetDirectoryFileNamesAsync(string directoryName, string searchPattern, HierarchicalOperationOption searchOption);
    public abstract virtual Task DirectoryCreateAsync(string directoryPath);
    public abstract virtual Task`1<bool> DirectoryExistsAsync(string directoryPath, bool createIfMissing);
    public abstract virtual Task DirectoryDeleteAsync(string directoryPath);
    public abstract virtual Task`1<DateTime> FileGetDateTimeAsync(string fileFullName, AuditableEvent type);
    public abstract virtual Task`1<long> FileGetSizeAsync(string fileFullName);
    public abstract virtual Task FileSetDateTimeAsync(string fileFullName, AuditableEvent type, DateTime dateTimeUtc);
    public abstract virtual Task`1<DateTime> DirectoryGetDateTimeAsync(string directoryFullName, AuditableEvent type);
    public abstract virtual Task DirectorySetDateTimeAsync(string directoryFullName, AuditableEvent type, DateTime dateTimeUtc);
    public abstract virtual Task`1<DirectoryAccessibilityCheckResults> DirectoryCheckAccessibilityAsync(string directoryFileName, bool tryForceCreateDirectory);
}
public class XAct.IO.Implementations.DirectoryAccessibilityCheckResults : object {
    [CompilerGeneratedAttribute]
private bool <Exists>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultStatus <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultStatus <CanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultStatus <CanDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public bool Exists { get; public set; }
    public ResultStatus CanRead { get; public set; }
    public ResultStatus CanWrite { get; public set; }
    public ResultStatus CanDelete { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Exists();
    [CompilerGeneratedAttribute]
public void set_Exists(bool value);
    [CompilerGeneratedAttribute]
public ResultStatus get_CanRead();
    [CompilerGeneratedAttribute]
public void set_CanRead(ResultStatus value);
    [CompilerGeneratedAttribute]
public ResultStatus get_CanWrite();
    [CompilerGeneratedAttribute]
public void set_CanWrite(ResultStatus value);
    [CompilerGeneratedAttribute]
public ResultStatus get_CanDelete();
    [CompilerGeneratedAttribute]
public void set_CanDelete(ResultStatus value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
public interface XAct.IO.IPathService {
    public abstract virtual int GetRootLength(string path);
    public abstract virtual Char[] GetInvalidPathChars();
    public abstract virtual Char[] GetInvalidFileNameChars();
    public abstract virtual string Combine(string directory, string fileName);
    public abstract virtual string GetFileName(string path);
    public abstract virtual string GetExtension(string fileName);
    public abstract virtual string GetFileNameWithoutExtension(string path);
    public abstract virtual string GetDirectoryName(string path);
    public abstract virtual string ChangeExtension(string path, string extension);
    public abstract virtual bool HasExtension(string path);
    public abstract virtual bool IsPathRooted(string path);
}
public interface XAct.IO.IUserFileSystemService {
    public IDirectoryInfo UserLocal { get; }
    public IDirectoryInfo UserRoaming { get; }
    public IDirectoryInfo UserTemp { get; }
    public IDirectoryInfo CommonLocal { get; }
    public IDirectoryInfo ApplicationRoot { get; }
    public abstract virtual IDirectoryInfo get_UserLocal();
    public abstract virtual IDirectoryInfo get_UserRoaming();
    public abstract virtual IDirectoryInfo get_UserTemp();
    public abstract virtual IDirectoryInfo get_CommonLocal();
    public abstract virtual IDirectoryInfo get_ApplicationRoot();
}
[DefaultBindingImplementationAttribute("XAct.IO.IPathService", "0", "-2", "")]
public class XAct.IO.Services.Implementations.DefaultPathService : object {
    internal static int MAX_PATH;
    internal static int MAX_DIRECTORY_PATH;
    internal static int MaxLongPath;
    private static string Prefix;
    public static char DirectorySeparatorChar;
    public static char AltDirectorySeparatorChar;
    public static char VolumeSeparatorChar;
    [ObsoleteAttribute("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")]
public static Char[] InvalidPathChars;
    internal static Char[] TrimEndChars;
    private static Char[] RealInvalidPathChars;
    private static Char[] InvalidFileNameChars;
    public static char PathSeparator;
    internal static int MaxPath;
    private static Char[] s_Base32Char;
    private static DefaultPathService();
    private static string GetResourceString(string key);
    public sealed virtual string ChangeExtension(string path, string extension);
    public sealed virtual int GetRootLength(string path);
    public sealed virtual string GetDirectoryName(string path);
    internal static bool IsDirectorySeparator(char c);
    public sealed virtual Char[] GetInvalidPathChars();
    public sealed virtual Char[] GetInvalidFileNameChars();
    public sealed virtual string GetExtension(string path);
    private bool HasLongPathPrefix(string path);
    private string AddLongPathPrefix(string path);
    private string RemoveLongPathPrefix(string path);
    private static StringBuilder RemoveLongPathPrefix(StringBuilder path);
    public sealed virtual string GetFileName(string path);
    public sealed virtual string GetFileNameWithoutExtension(string path);
    private bool IsRelative(string path);
    public sealed virtual bool HasExtension(string path);
    public sealed virtual bool IsPathRooted(string path);
    public sealed virtual string Combine(string path1, string path2);
    private string Combine(string path1, string path2, string path3);
    private string Combine(string path1, string path2, string path3, string path4);
    private string Combine(String[] paths);
    private string CombineNoChecks(string path1, string path2);
    internal static string ToBase32StringSuitableForDirName(Byte[] buff);
    [SecuritySafeCriticalAttribute]
internal static void CheckSearchPattern(string searchPattern);
    internal static void CheckInvalidPathChars(string path);
    private string InternalCombine(string path1, string path2);
}
public class XAct.IO.StringWriterWithEncoding : StringWriter {
    private Encoding encoding;
    public Encoding Encoding { get; }
    public StringWriterWithEncoding(Encoding encoding);
    public StringWriterWithEncoding(StringBuilder stringBuilder, Encoding encoding);
    public StringWriterWithEncoding(IFormatProvider formatProvider, Encoding encoding);
    public StringWriterWithEncoding(StringBuilder stringBuilder, IFormatProvider formatProvider, Encoding encoding);
    public virtual Encoding get_Encoding();
}
public interface XAct.IO.Transformations.IDefaultMarkdownService {
}
public interface XAct.IO.Transformations.IMarkdownService {
    public abstract virtual string Transform(string markdownText, Format format);
}
[DefaultBindingImplementationAttribute("XAct.IO.Transformations.IMarkdownService", "0", "-2", "")]
public class XAct.IO.Transformations.Implementations.DefaultMarkdownService : object {
    public sealed virtual string Transform(string markdownText, Format format);
}
public class XAct.IO.Utf8StringWriter : StringWriterWithEncoding {
    public Utf8StringWriter(StringBuilder stringBuilder);
    public Utf8StringWriter(IFormatProvider formatProvider);
    public Utf8StringWriter(IFormatProvider formatProvider, StringBuilder stringBuilder);
}
[ExtensionAttribute]
public static class XAct.IPerformanceCounterServiceConfigurationExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, List`1<string>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<string, XDocument> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static void ScanForConfigurationFiles(IPerformanceCounterServiceConfiguration performanceCounterServiceConfiguration, string currentCurrentDirectory, List`1& messages);
    [ExtensionAttribute]
public static void ScanForConfigurationFiles(IPerformanceCounterServiceConfiguration performanceCounterServiceConfiguration, string currentCurrentDirectory, Func`2<string, List`1<string>> getXDocumentsInDirectory, Func`2<string, XDocument> getXDocument, List`1& messages);
    [ExtensionAttribute]
public static void ScanForConfigurationFiles(IPerformanceCounterServiceConfiguration performanceCounterServiceConfiguration, XDocument[] xDocuments, List`1& messages);
    private static void ParseCategoryNodes(IEnumerable`1<XElement> categoryNodes, Dictionary`2& performanceCounterCategoryCreationInformationCache, List`1& messages);
    private static void ParseCategoryNode(XElement categoryNode, Dictionary`2& performanceCounterCategoryCreationInformationCache, List`1& messages);
    private static PerformanceCounterCreationInformation[] ParseCounterNodes(IEnumerable`1<XElement> counterNodes, List`1& messages);
    private static PerformanceCounterCreationInformation ParseCounter(XElement counterNode, int counterIndex, List`1& messages);
    [CompilerGeneratedAttribute]
private static List`1<string> <ScanForConfigurationFiles>b__0(string x);
    [CompilerGeneratedAttribute]
private static XDocument <ScanForConfigurationFiles>b__1(string x);
}
public interface XAct.IPersistedFile {
    public int Size { get; }
    public string ContentType { get; public set; }
    public abstract virtual int get_Size();
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
}
[ExtensionAttribute]
public static class XAct.IQueryableExtensions : object {
    private static string C_EXPRESSION_NOT_PROPERTY;
    [ExtensionAttribute]
public static T FirstOrDefaultEx(IEnumerable`1<T> o);
    [ExtensionAttribute]
public static IQueryable`1<T> WithSelectItem(IQueryable`1<T> items, Expression`1<Func`2<T, string>> propertyExpression);
}
[ExtensionAttribute]
public static class XAct.IResponseExtensions : object {
    private static ICultureSpecificResponseService CultureSpecificResponseService { get; }
    private static ICultureSpecificResponseService get_CultureSpecificResponseService();
    [ExtensionAttribute]
public static bool IsError(IResponse response);
    [ExtensionAttribute]
public static bool IsSuccess(IResponse response);
    [ExtensionAttribute]
public static void TransferValuesFromRequest(IPageable pagedResponse, IPagedQuerySpecification pagedRequest);
    [ExtensionAttribute]
public static bool AddMessage(IResponse response, MessageCode messageCode, String[] arguments);
    [ExtensionAttribute]
public static void TransferProperties(IResponse sourceResponse, IResponse targetResponse);
    [ExtensionAttribute]
public static void TransferProperties(IResponse`1<T> sourceResponse, IResponse`1<T> targetResponse);
    [ExtensionAttribute]
public static Response`1<T> Clone(IResponse sourceResource, T data);
    [ExtensionAttribute]
public static Response Clone(IResponse sourceResource);
    [ExtensionAttribute]
public static void SetPresentationAttributes(IResponse response, CultureInfo cultureInfo, ICultureSpecificResponseService cultureSpecificResponseService);
    [ExtensionAttribute]
public static bool ContainsMessageCode(IResponse response, MessageCode checkForMessageCode, bool recursive);
    [ExtensionAttribute]
public static Message ContainsMessageCode(IResponse response, IEnumerable`1<Message> messageCodes, IEnumerable`1<MessageCode> checkForMessageCodes, bool recursive);
}
public interface XAct.IWeakReferenceService`2 {
    public int PurgeCounterMax { get; public set; }
    public int Count { get; }
    public int CountAlive { get; }
    public abstract virtual int get_PurgeCounterMax();
    public abstract virtual void set_PurgeCounterMax(int value);
    public abstract virtual int get_Count();
    public abstract virtual int get_CountAlive();
    public abstract virtual TOuterWrapper Register(TInnerObject watchedObject, bool raiseErrorIfAlreadyRegistered);
    public abstract virtual TOuterWrapper Register(TOuterWrapper watchedObject, bool raiseErrorIfAlreadyRegistered);
    public abstract virtual TOuterWrapper Get(TInnerObject watchedObject);
    public abstract virtual void Purge();
}
public interface XAct.IWebThreadAndTypeSpecificManagementServiceBase`1 {
    public abstract virtual TContext Create();
    public abstract virtual void Push(TSpecializedContext context);
    public abstract virtual TContext Pop();
    public abstract virtual int Count();
}
public interface XAct.IWebThreadSpecificContextManagementServiceBase`1 {
}
public interface XAct.IWebThreadSpecificStackableContextManagementServiceBase`1 {
    public abstract virtual TContext Create();
    public abstract virtual void Push(TContext context);
    public abstract virtual TContext Pop();
    public abstract virtual int Count();
}
[ExtensionAttribute]
public static class XAct.IXmlSerializableExtensions : object {
    private static CultureInfo _invariantCulture;
    private static IXmlSerializableExtensions();
    [ExtensionAttribute]
public static string ToXmlString(IXmlSerializable objectToSerialize);
}
[ExtensionAttribute]
public static class XAct.KeyedCollectionExtensions : object {
    [ExtensionAttribute]
public static bool TryGet(KeyedCollection`2<TKey, TValue> keyedCollection, TKey key, TValue& value);
}
[DataContractAttribute]
public class XAct.KeyValue`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [DataMemberAttribute]
public TKey Key { get; public set; }
    [DataMemberAttribute]
public TValue Value { get; public set; }
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(TValue value);
}
public class XAct.KeyValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; private set; }
    public string Value { get; private set; }
    public KeyValueAttribute(string key, string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public static class XAct.Library.Constants.AppSettingKeys : object {
    public static string EnableDebugger;
    public static string EnableNConfig;
}
public class XAct.Library.Constants.Compilation : object {
    public static string AssemblyKey;
}
public static class XAct.Library.Constants.DataContracts : object {
    public static string BaseDataContractNamespace;
    public static string BaseDataContract_0_1_Namespace;
}
public static class XAct.Library.Constants.MessageCodes : object {
    public static int XActBaseMessageCode;
    public static int OperationNotAuthenticated;
    public static int OperationNotAuthorized;
    public static int OperationNotPossible;
    public static int OperationValidationFailed;
    public static int ValueCannotBeNull;
    public static int ValueCannotBeEmpty;
    public static int ValueCannotBeParsed;
    public static int ValueCannotBeOutOfValidRange;
}
public class XAct.Library.Constants.UnitOfWork : object {
    public static string DefaultContextKey;
}
public static class XAct.Library.Settings.Bindings : object {
    private static bool _scanByInterfaces;
    private static BindingLifetimeType _defaultServiceLifespan;
    [CompilerGeneratedAttribute]
private static string <AssemblySearchPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <IoCFQAssemblyNameOverride>k__BackingField;
    public static bool ScanByInterfaces { get; public set; }
    public static string AssemblySearchPath { get; public set; }
    public static string IoCFQAssemblyNameOverride { get; public set; }
    public static BindingLifetimeType DefaultServiceLifespan { get; public set; }
    private static Bindings();
    public static bool get_ScanByInterfaces();
    public static void set_ScanByInterfaces(bool value);
    [CompilerGeneratedAttribute]
public static string get_AssemblySearchPath();
    [CompilerGeneratedAttribute]
public static void set_AssemblySearchPath(string value);
    [CompilerGeneratedAttribute]
public static string get_IoCFQAssemblyNameOverride();
    [CompilerGeneratedAttribute]
public static void set_IoCFQAssemblyNameOverride(string value);
    public static BindingLifetimeType get_DefaultServiceLifespan();
    public static void set_DefaultServiceLifespan(BindingLifetimeType value);
}
public class XAct.Library.Settings.Caching : object {
    public static string XActLibPrefix;
    public static TimeSpan DefaultShortCachingTimeSpan;
    public static TimeSpan DefaultMediumCachingTimeSpan;
    public static TimeSpan DefaultReferenceCachingTimeSpan;
    private static Caching();
}
public static class XAct.Library.Settings.Comparison : object {
    public static TimeSpan DateTimeComparisonTimeSpan;
    private static Comparison();
}
public class XAct.Library.Settings.Db : object {
    public static SeedingCommitLevel CommitRegularlyDuringSeeding;
    public static SeedingType SeedingType;
    private static string _defaultXActLibDbTablePrefix;
    private static string _defaultXActLibSchema;
    public static string DefaultXActLibConnectionStringSettingsName;
    public static string DbParameterPrefix;
    public static bool SeedDemoEntries;
    public static bool ForceNewContextEveryTime;
    public static string DefaultXActLibDbTablePrefix { get; public set; }
    public static string DefaultXActLibSchema { get; public set; }
    private static Db();
    public static string get_DefaultXActLibDbTablePrefix();
    public static void set_DefaultXActLibDbTablePrefix(string value);
    public static string get_DefaultXActLibSchema();
    public static void set_DefaultXActLibSchema(string value);
}
public static class XAct.Library.Settings.Globalisation : object {
    public static CultureInfo DefaultUICulture;
    public static bool AllowResourceRecursion;
    private static Globalisation();
}
public static class XAct.Library.Settings.IO : object {
    public static bool PreferIsolatedStorage;
    private static IO();
}
public static class XAct.Library.Settings.IoC : object {
    public static bool UseTempAppDomainWhenScanningForServices;
    public static Action`1<IBindingDescriptor> RegisterBindingMethod;
    public static Func`3<Type, string, bool> IsBindingRegisteredMethod;
    public static Action ResetAllMethod;
    private static IoC();
}
public static class XAct.Library.Settings.Optimisation : object {
}
public enum XAct.Library.Settings.SeedingCommitLevel : Enum {
    public int value__;
    public static SeedingCommitLevel Always;
    public static SeedingCommitLevel Regularly;
    public static SeedingCommitLevel Excessively_UseOnlyForDebuggingPurposes;
}
public enum XAct.Library.Settings.SeedingType : Enum {
    public int value__;
    public static SeedingType SkipSeeding;
    public static SeedingType SeedEveryTime;
    public static SeedingType ResetImmutableReferenceData;
    public static SeedingType ResetMutableAppSettings;
    public static SeedingType ResetMutableReferenceData;
    public static SeedingType ResetMutableUserData;
}
public static class XAct.Library.Settings.State : object {
    public static bool WhenHttpStateIsNotAvailableMakeContextStateThreadBasedRatherThanSingleton;
    private static State();
}
[ExtensionAttribute]
public static class XAct.ListExtensions : object {
    [ExtensionAttribute]
public static void Truncate(List`1<T> list, int newSize);
}
public class XAct.Location.GeoCoordinates : object {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public GeoCoordinates(double latitude, double longitude);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    public virtual string ToString();
    private string ToGoogle();
}
[DataContractAttribute]
public enum XAct.LockState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static LockState Unlocked;
    [EnumMemberAttribute]
public static LockState EnheritedLocked;
    [EnumMemberAttribute]
public static LockState Locked;
}
[ExtensionAttribute]
public static class XAct.LongExtensions : object {
    private static String[] sizes;
    private static LongExtensions();
    [ExtensionAttribute]
public static string ToHumanReadableFileSizeString(long byteCount);
}
[ExtensionAttribute]
public static class XAct.MathsExtensions : object {
    private static CultureInfo _invariantCulture;
    private static MathsExtensions();
    [ExtensionAttribute]
public static bool IsBetween(decimal thisValue, decimal lowerBound, decimal upperBound);
    public static string ToString(decimal number, IFormatProvider cultureInfo, bool includeCurrencySymbol);
}
[ExtensionAttribute]
public static class XAct.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static bool HasAttribute(MemberInfo propertyInfo, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(MemberInfo memberInfo, bool inherit);
    [ExtensionAttribute]
public static TAttribute GetAttribute(MemberInfo memberInfo, bool inherit);
    [ExtensionAttribute]
public static Attribute GetAttribute(MemberInfo memberInfo, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static string FullName(MemberInfo memberInfo, bool useReflectedType);
}
[ExtensionAttribute]
public static class XAct.MessageCodeExtensions : object {
    public static IMessageCodeMetadataService MessageCodeMetadataService { get; }
    public static IMessageCodeMetadataService get_MessageCodeMetadataService();
    [ExtensionAttribute]
public static bool GetMetadata(MessageCode messageCode, String& resourceFilter, String& text, Byte& argumentCount, IMessageCodeMetadataService messageCodeMetadataService);
    [ExtensionAttribute]
public static MessageCodeMetadataAttribute GetMetadata(MessageCode messageCode, IMessageCodeMetadataService messageCodeMetadataService);
    [ExtensionAttribute]
public static bool TryGetMetadata(MessageCode messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute, IMessageCodeMetadataService messageCodeMetadataService);
    [ExtensionAttribute]
public static bool ContainsMessageCode(IEnumerable`1<Message> messageCodes, MessageCode checkForMessageCode, bool recursive);
    [ExtensionAttribute]
public static bool ContainsMessageCode(IEnumerable`1<MessageCode> messageCodes, MessageCode checkForMessageCode);
    [ExtensionAttribute]
public static Message ContainsMessageCode(IEnumerable`1<Message> messageCodes, IEnumerable`1<MessageCode> checkForMessageCodes, bool recursive);
}
[DataContractAttribute]
public abstract class XAct.Messages.ApplicationTennantIdSpecificReferenceDataGuidIdBase : ReferenceDataGuidIdBase {
    [CompilerGeneratedAttribute]
private Guid <ApplicationTennantId>k__BackingField;
    public Guid ApplicationTennantId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_ApplicationTennantId();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationTennantId(Guid value);
}
[DataContractAttribute]
public abstract class XAct.Messages.ApplicationTennantIdSpecificReferenceDataGuidIdCodedBase : ReferenceDataGuidIdBase {
    [CompilerGeneratedAttribute]
private Guid <ApplicationTennantId>k__BackingField;
    public Guid ApplicationTennantId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_ApplicationTennantId();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationTennantId(Guid value);
}
[DataContractAttribute]
public class XAct.Messages.HelpEntrySummary : RecursiveTextAndTitleBase`1<HelpEntrySummary> {
}
public interface XAct.Messages.IMessageCodeMetadataService {
    public IMessageCodeMetadataServiceConfiguration Configuration { get; }
    public abstract virtual IMessageCodeMetadataServiceConfiguration get_Configuration();
    public abstract virtual void Scan(Type[] classesContainingStaticPropertiesOfTypeMessageCode);
    public abstract virtual bool TryGet(MessageCode messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
    public abstract virtual bool TryGet(string messageCodeIdentifier, MessageCode& messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
}
public interface XAct.Messages.IMessagePresentationAttributes {
}
public interface XAct.Messages.IPageable {
    public int TotalCount { get; public set; }
    public int PageSize { get; public set; }
    public int TotalPages { get; }
    public int PageIndex { get; public set; }
    public bool HasPreviousPage { get; }
    public bool HasNextPage { get; }
    public abstract virtual int get_TotalCount();
    public abstract virtual void set_TotalCount(int value);
    public abstract virtual int get_PageSize();
    public abstract virtual void set_PageSize(int value);
    public abstract virtual int get_TotalPages();
    public abstract virtual int get_PageIndex();
    public abstract virtual void set_PageIndex(int value);
    public abstract virtual bool get_HasPreviousPage();
    public abstract virtual bool get_HasNextPage();
}
public interface XAct.Messages.IPagedDataRequest`1 {
    [DataMemberAttribute]
public T Data { get; public set; }
    public abstract virtual T get_Data();
    public abstract virtual void set_Data(T value);
}
public interface XAct.Messages.IPagedQuerySpecification {
    public TimeSpan TimeElapsed { get; public set; }
    public int PageIndex { get; }
    public int PageSize { get; }
    public bool RetrieveTotalRecordsInSource { get; }
    public int TotalRecordsInSource { get; public set; }
    public abstract virtual TimeSpan get_TimeElapsed();
    public abstract virtual void set_TimeElapsed(TimeSpan value);
    public abstract virtual int get_PageIndex();
    public abstract virtual int get_PageSize();
    public abstract virtual bool get_RetrieveTotalRecordsInSource();
    public abstract virtual int get_TotalRecordsInSource();
    public abstract virtual void set_TotalRecordsInSource(int value);
}
public interface XAct.Messages.IPagedResponse`1 {
    public int TotalCountInDataStore { get; public set; }
    public abstract virtual int get_TotalCountInDataStore();
    public abstract virtual void set_TotalCountInDataStore(int value);
}
public interface XAct.Messages.IPagedSearchTermQuerySpecification {
    public QuerySearchTerm[] SearchTerms { get; public set; }
    public QuerySortSpecification[] SortSpecifications { get; public set; }
    public abstract virtual QuerySearchTerm[] get_SearchTerms();
    public abstract virtual void set_SearchTerms(QuerySearchTerm[] value);
    public abstract virtual QuerySortSpecification[] get_SortSpecifications();
    public abstract virtual void set_SortSpecifications(QuerySortSpecification[] value);
}
public interface XAct.Messages.IQuerySearchTerm {
    public string Key { get; public set; }
    public string Text { get; public set; }
    public Equality Equality { get; public set; }
    public object Value { get; public set; }
    public abstract virtual string get_Key();
    public abstract virtual void set_Key(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual Equality get_Equality();
    public abstract virtual void set_Equality(Equality value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public interface XAct.Messages.IReferenceDataIOModel {
}
public interface XAct.Messages.IResponse {
    public List`1<Message> Messages { get; }
    public TimeSpan TimeElapsed { get; public set; }
    public List`1<Metadata> Metadata { get; }
    public abstract virtual List`1<Message> get_Messages();
    public abstract virtual TimeSpan get_TimeElapsed();
    public abstract virtual void set_TimeElapsed(TimeSpan value);
    public abstract virtual List`1<Metadata> get_Metadata();
}
public interface XAct.Messages.IResponse`1 {
    public bool HasData { get; }
    public TData Data { get; public set; }
    public abstract virtual bool get_HasData();
    public abstract virtual TData get_Data();
    public abstract virtual void set_Data(TData value);
}
[DataContractAttribute]
public abstract class XAct.Messages.KeyValueBase : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    protected KeyValueBase(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[DataContractAttribute]
public class XAct.Messages.Message : object {
    [DataMemberAttribute]
private MessageCode _messageCode;
    [DataMemberAttribute]
private List`1<Message> _innerMessages;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private MessagePresentationAttributes <PresentationAttributes>k__BackingField;
    public MessageCode MessageCode { get; }
    [DataMemberAttribute]
public String[] Arguments { get; private set; }
    [DataMemberAttribute]
public MessagePresentationAttributes PresentationAttributes { get; public set; }
    public List`1<Message> InnerMessages { get; }
    public Message(MessageCode messageCode, String[] arguments);
    public MessageCode get_MessageCode();
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(String[] value);
    [CompilerGeneratedAttribute]
public MessagePresentationAttributes get_PresentationAttributes();
    [CompilerGeneratedAttribute]
public void set_PresentationAttributes(MessagePresentationAttributes value);
    public List`1<Message> get_InnerMessages();
    [OnDeserializingAttribute]
public void OnDeserializing(StreamingContext streamingContext);
}
[DataContractAttribute]
public class XAct.Messages.MessageCode : ValueType {
    [DataMemberAttribute]
private long _id;
    [DataMemberAttribute]
private Severity _severity;
    public long Id { get; }
    public Severity Severity { get; }
    public MessageCode(long id, Severity severity);
    public sealed virtual long get_Id();
    public Severity get_Severity();
    public static bool op_Equality(MessageCode c1, MessageCode c2);
    public static bool op_Inequality(MessageCode c1, MessageCode c2);
    public bool Equals(MessageCode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DataContractAttribute]
public class XAct.Messages.MessageCodeMetadataAttribute : Attribute {
    [DataMemberAttribute]
private byte _argumentCount;
    [DataMemberAttribute]
private string _resourceFilter;
    [DataMemberAttribute]
private string _text;
    public byte ArgumentCount { get; }
    public string ResourceFilter { get; }
    public string Text { get; }
    public MessageCodeMetadataAttribute(string resourceFilter, string resourceKey, byte argumentCount);
    public MessageCodeMetadataAttribute(string text, byte argumentCount);
    public byte get_ArgumentCount();
    public sealed virtual string get_ResourceFilter();
    public sealed virtual string get_Text();
}
[DataContractAttribute]
public class XAct.Messages.MessagePresentationAttributes : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalInformationUrl>k__BackingField;
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string AdditionalInformation { get; public set; }
    [DataMemberAttribute]
public string AdditionalInformationUrl { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalInformation();
    [CompilerGeneratedAttribute]
public void set_AdditionalInformation(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalInformationUrl();
    [CompilerGeneratedAttribute]
public void set_AdditionalInformationUrl(string value);
}
[DataContractAttribute]
public class XAct.Messages.Metadata : KeyValueBase {
    public Metadata(string key, string value);
}
[DataContractAttribute]
public class XAct.Messages.PagedQuerySpecification : object {
    private int _totalRecordsInSource;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetrieveTotalRecordsInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeElapsed>k__BackingField;
    [DataMemberAttribute]
public int PageIndex { get; public set; }
    [DataMemberAttribute]
public int PageSize { get; public set; }
    [DataMemberAttribute]
public bool RetrieveTotalRecordsInSource { get; private set; }
    [DataMemberAttribute]
public int TotalRecordsInSource { get; public set; }
    [DataMemberAttribute]
public TimeSpan TimeElapsed { get; public set; }
    public PagedQuerySpecification(int pageIndex, int pageSize, bool retrieveTotalRecords);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RetrieveTotalRecordsInSource();
    [CompilerGeneratedAttribute]
private void set_RetrieveTotalRecordsInSource(bool value);
    public sealed virtual int get_TotalRecordsInSource();
    public sealed virtual void set_TotalRecordsInSource(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeElapsed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeElapsed(TimeSpan value);
}
[DataContractAttribute]
public class XAct.Messages.PagedRequest`1 : object {
    private int _totalRecordsInSource;
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetrieveTotalRecordsInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeElapsed>k__BackingField;
    [DataMemberAttribute]
public T Data { get; public set; }
    [DataMemberAttribute]
public int PageIndex { get; public set; }
    [DataMemberAttribute]
public int PageSize { get; public set; }
    [DataMemberAttribute]
public bool RetrieveTotalRecordsInSource { get; private set; }
    [DataMemberAttribute]
public int TotalRecordsInSource { get; public set; }
    [DataMemberAttribute]
public TimeSpan TimeElapsed { get; public set; }
    public PagedRequest`1(T data, int pageIndex, int pageSize, bool retrieveTotalRecords);
    public PagedRequest`1(int pageIndex, int pageSize, bool retrieveTotalRecords);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(T value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RetrieveTotalRecordsInSource();
    [CompilerGeneratedAttribute]
private void set_RetrieveTotalRecordsInSource(bool value);
    public sealed virtual int get_TotalRecordsInSource();
    public sealed virtual void set_TotalRecordsInSource(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeElapsed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeElapsed(TimeSpan value);
}
[DataContractAttribute]
public class XAct.Messages.PagedResponse`1 : object {
    private static Severity[] _noSuccess;
    [DataMemberAttribute]
private int _totalPages;
    [DataMemberAttribute]
private bool _hasPreviousPage;
    [DataMemberAttribute]
private bool _hasNextPage;
    [DataMemberAttribute]
private int _totalRecordsInSource;
    [DataMemberAttribute]
private bool _success;
    [DataMemberAttribute]
private List`1<Message> _messages;
    [DataMemberAttribute]
private List`1<Metadata> _metadata;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeElapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TItem> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [DataMemberAttribute]
public int TotalCount { get; public set; }
    [DataMemberAttribute]
public int PageSize { get; public set; }
    public int TotalPages { get; }
    [DataMemberAttribute]
public int PageIndex { get; public set; }
    public bool HasPreviousPage { get; }
    public bool HasNextPage { get; }
    public int TotalCountInDataStore { get; public set; }
    public TimeSpan TimeElapsed { get; public set; }
    public bool Success { get; }
    public List`1<Message> Messages { get; }
    public List`1<Metadata> Metadata { get; }
    [DataMemberAttribute]
public ICollection`1<TItem> Data { get; public set; }
    public PagedResponse`1(ICollection`1<TItem> items, int pageIndex, int pageSize, int totalSetCount);
    private static PagedResponse`1();
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PageSize(int value);
    public sealed virtual int get_TotalPages();
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PageIndex(int value);
    public sealed virtual bool get_HasPreviousPage();
    public sealed virtual bool get_HasNextPage();
    public int get_TotalCountInDataStore();
    public void set_TotalCountInDataStore(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeElapsed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeElapsed(TimeSpan value);
    public sealed virtual bool get_Success();
    public sealed virtual List`1<Message> get_Messages();
    public sealed virtual List`1<Metadata> get_Metadata();
    [CompilerGeneratedAttribute]
public ICollection`1<TItem> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(ICollection`1<TItem> value);
    [OnDeserializingAttribute]
public void OnDeserializing(StreamingContext streamingContext);
    [OnSerializedAttribute]
private void OnSerialized(StreamingContext context);
    public bool AddMessage(MessageCode messageCode, String[] arguments);
    [CompilerGeneratedAttribute]
private static bool <OnSerialized>b__0(Message m);
}
[DataContractAttribute]
public class XAct.Messages.PagedSearchTermQuerySpecification : object {
    private int _totalRecordsInSource;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetrieveTotalRecordsInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeElapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private QuerySearchTerm[] <SearchTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private QuerySortSpecification[] <SortSpecifications>k__BackingField;
    [DataMemberAttribute]
public int PageIndex { get; public set; }
    [DataMemberAttribute]
public int PageSize { get; public set; }
    [DataMemberAttribute]
public bool RetrieveTotalRecordsInSource { get; private set; }
    public int TotalRecordsInSource { get; public set; }
    public TimeSpan TimeElapsed { get; public set; }
    [DataMemberAttribute]
public QuerySearchTerm[] SearchTerms { get; public set; }
    [DataMemberAttribute]
public QuerySortSpecification[] SortSpecifications { get; public set; }
    public PagedSearchTermQuerySpecification(QuerySearchTerm[] searchTerms, QuerySortSpecification[] sortSpecifications, int pageIndex, int pageSize, bool retrieveTotalRecords);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RetrieveTotalRecordsInSource();
    [CompilerGeneratedAttribute]
private void set_RetrieveTotalRecordsInSource(bool value);
    public sealed virtual int get_TotalRecordsInSource();
    public sealed virtual void set_TotalRecordsInSource(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeElapsed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeElapsed(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual QuerySearchTerm[] get_SearchTerms();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SearchTerms(QuerySearchTerm[] value);
    [CompilerGeneratedAttribute]
public sealed virtual QuerySortSpecification[] get_SortSpecifications();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortSpecifications(QuerySortSpecification[] value);
    public virtual string ToString();
    [OnDeserializingAttribute]
public void OnDeserializing(StreamingContext streamingContext);
}
[DataContractAttribute]
public class XAct.Messages.QuerySearchTerm : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Equality <Equality>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public Equality Equality { get; public set; }
    public object Value { get; public set; }
    public QuerySearchTerm(string term, Equality equality);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Equality get_Equality();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Equality(Equality value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [OnDeserializingAttribute]
public void OnDeserializing(StreamingContext streamingContext);
    public virtual string ToString();
}
[DataContractAttribute]
public class XAct.Messages.QuerySortSpecification : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Direction>k__BackingField;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public SortDirection Direction { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(SortDirection value);
}
[DataContractAttribute]
public class XAct.Messages.RecursiveTextAndTitle : RecursiveTextAndTitleBase`1<RecursiveTextAndTitle> {
}
[DataContractAttribute]
public abstract class XAct.Messages.RecursiveTextAndTitleBase`1 : object {
    [DataMemberAttribute]
private ICollection`1<T> _children;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    public ICollection`1<T> Children { get; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    public sealed virtual ICollection`1<T> get_Children();
    [OnDeserializingAttribute]
private void OnDeserializing(StreamingContext streamingContext);
}
[DataContractAttribute]
public abstract class XAct.Messages.ReferenceDataBase`1 : object {
    [CompilerGeneratedAttribute]
private TId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [DataMemberAttribute]
public TId Id { get; public set; }
    [DataMemberAttribute]
public bool Enabled { get; public set; }
    [DataMemberAttribute]
public int Order { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string ResourceFilter { get; public set; }
    [DataMemberAttribute]
public string Filter { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TId get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(TId value);
    [CompilerGeneratedAttribute]
public virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    [CompilerGeneratedAttribute]
public virtual void set_Order(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ResourceFilter();
    [CompilerGeneratedAttribute]
public virtual void set_ResourceFilter(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Filter();
    [CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
}
[DataContractAttribute]
public abstract class XAct.Messages.ReferenceDataCodedBase`1 : ReferenceDataBase`1<TId> {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [DataMemberAttribute]
public string Code { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
}
[DataContractAttribute]
public abstract class XAct.Messages.ReferenceDataGuidIdBase : ReferenceDataBase`1<Guid> {
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
}
[DataContractAttribute]
public abstract class XAct.Messages.ReferenceDataGuidIdCodedBase : ReferenceDataGuidIdBase {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [DataMemberAttribute]
public string Code { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
}
[DataContractAttribute]
public class XAct.Messages.ReferenceDataIOModel : object {
    [DataMemberAttribute]
private ICollection`1<Metadata> _metadata;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [DataMemberAttribute]
public string Filter { get; public set; }
    public ICollection`1<Metadata> Metadata { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Filter();
    [CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
    public virtual ICollection`1<Metadata> get_Metadata();
    [OnDeserializingAttribute]
private void OnDeserializing(StreamingContext streamingContext);
}
[DataContractAttribute]
public class XAct.Messages.Request`1 : object {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [DataMemberAttribute]
public T Data { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(T value);
}
[DataContractAttribute]
public class XAct.Messages.Response : object {
    private static Severity[] _noSuccess;
    [DataMemberAttribute]
private bool _success;
    [DataMemberAttribute]
private List`1<Message> _messages;
    [DataMemberAttribute]
private List`1<Metadata> _metadata;
    private static Func`2<IResponse, bool> _successMethod;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeElapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IResponse, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [DataMemberAttribute]
public TimeSpan TimeElapsed { get; public set; }
    public bool Success { get; }
    public List`1<Message> Messages { get; }
    public List`1<Metadata> Metadata { get; }
    public static Func`2<IResponse, bool> SuccessMethod { get; public set; }
    private static Response();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeElapsed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeElapsed(TimeSpan value);
    public sealed virtual bool get_Success();
    public sealed virtual List`1<Message> get_Messages();
    public sealed virtual List`1<Metadata> get_Metadata();
    [OnSerializedAttribute]
private void OnSerialized(StreamingContext context);
    [OnDeserializingAttribute]
public void OnDeserializing(StreamingContext streamingContext);
    public bool AddMessage(MessageCode messageCode, String[] arguments);
    public static Func`2<IResponse, bool> get_SuccessMethod();
    public static void set_SuccessMethod(Func`2<IResponse, bool> value);
    [CompilerGeneratedAttribute]
private static bool <OnSerialized>b__0(Message m);
    [CompilerGeneratedAttribute]
private static bool <get_SuccessMethod>b__2(IResponse x);
    [CompilerGeneratedAttribute]
private static bool <get_SuccessMethod>b__3(Message m);
}
[DataContractAttribute]
public class XAct.Messages.Response`1 : object {
    private static Severity[] _noSuccess;
    [DataMemberAttribute]
private bool _success;
    [DataMemberAttribute]
private List`1<Message> _messages;
    [DataMemberAttribute]
private bool _hasData;
    [DataMemberAttribute]
private List`1<Metadata> _metadata;
    [CompilerGeneratedAttribute]
private TData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeElapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool Success { get; }
    public List`1<Message> Messages { get; }
    public bool HasData { get; }
    [DataMemberAttribute]
public TData Data { get; public set; }
    [DataMemberAttribute]
public TimeSpan TimeElapsed { get; public set; }
    public List`1<Metadata> Metadata { get; }
    public Response`1(TData data);
    private static Response`1();
    public sealed virtual bool get_Success();
    public sealed virtual List`1<Message> get_Messages();
    public sealed virtual bool get_HasData();
    [CompilerGeneratedAttribute]
public sealed virtual TData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(TData value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeElapsed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeElapsed(TimeSpan value);
    public sealed virtual List`1<Metadata> get_Metadata();
    [OnSerializedAttribute]
private void OnSerialized(StreamingContext context);
    [OnDeserializingAttribute]
public void OnDeserializing(StreamingContext streamingContext);
    public bool AddMessage(MessageCode messageCode, String[] arguments);
    [CompilerGeneratedAttribute]
private static bool <OnSerialized>b__0(Message m);
}
public interface XAct.Messages.Services.Configuration.ICultureSpecificMessageServiceConfiguration {
    public string ResourceFilter { get; public set; }
    public string ResourceKeyFormat { get; public set; }
    public string AdditionalInformationResourceKeyFormat { get; public set; }
    public string AdditionalInformationUrlFormat { get; public set; }
    public abstract virtual string get_ResourceFilter();
    public abstract virtual void set_ResourceFilter(string value);
    public abstract virtual string get_ResourceKeyFormat();
    public abstract virtual void set_ResourceKeyFormat(string value);
    public abstract virtual string get_AdditionalInformationResourceKeyFormat();
    public abstract virtual void set_AdditionalInformationResourceKeyFormat(string value);
    public abstract virtual string get_AdditionalInformationUrlFormat();
    public abstract virtual void set_AdditionalInformationUrlFormat(string value);
}
public interface XAct.Messages.Services.Configuration.IMessageCodeMetadataServiceConfiguration {
    public Type[] ScannedContainerTypes { get; }
    public abstract virtual Type[] get_ScannedContainerTypes();
    public abstract virtual void Scan(Type[] containerTypes);
    public abstract virtual bool TryGetMessageCodeMetadata(MessageCode messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
    public abstract virtual bool TryGetMessageCode(string messageCodeIdentifier, MessageCode& messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
}
public class XAct.Messages.Services.Configuration.Implementations.CultureSpecificMessageServiceConfiguration : object {
    private string _resourceKeyFormat;
    private string _additionalInformationResourceKeyFormat;
    private string _additionalInformationUrlFormat;
    [CompilerGeneratedAttribute]
private string <ResourceFilter>k__BackingField;
    public string ResourceFilter { get; public set; }
    public string ResourceKeyFormat { get; public set; }
    public string AdditionalInformationResourceKeyFormat { get; public set; }
    public string AdditionalInformationUrlFormat { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResourceFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResourceFilter(string value);
    public sealed virtual string get_ResourceKeyFormat();
    public sealed virtual void set_ResourceKeyFormat(string value);
    public sealed virtual string get_AdditionalInformationResourceKeyFormat();
    public sealed virtual void set_AdditionalInformationResourceKeyFormat(string value);
    public sealed virtual string get_AdditionalInformationUrlFormat();
    public sealed virtual void set_AdditionalInformationUrlFormat(string value);
}
public class XAct.Messages.Services.Configuration.Implementations.MessageCodeMetadataServiceConfiguration : object {
    private List`1<Type> _types;
    private Dictionary`2<MessageCode, MessageCodeMetadataAttribute> _cachedMessageCodesToMetadata;
    private Dictionary`2<string, MessageCode> _cachedMessageCodeIdentifiersToMessageCode;
    private List`1<string> _messageCodeIdentifiersThatWillNotBeFound;
    public Type[] ScannedContainerTypes { get; }
    public sealed virtual Type[] get_ScannedContainerTypes();
    public sealed virtual void Scan(Type[] containerTypes);
    public sealed virtual bool TryGetMessageCodeMetadata(MessageCode messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
    private bool TryGetMessageCode(string messageCodeIdentifier, MessageCode& messageCode);
    public sealed virtual bool TryGetMessageCode(string messageCodeIdentifier, MessageCode& messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
}
public class XAct.Messages.Services.Implementations.MessageCodeMetadataService : object {
    private IMessageCodeMetadataServiceConfiguration _messageCodeServiceConfiguration;
    public IMessageCodeMetadataServiceConfiguration Configuration { get; }
    public MessageCodeMetadataService(IMessageCodeMetadataServiceConfiguration messageCodeServiceConfiguration);
    public sealed virtual IMessageCodeMetadataServiceConfiguration get_Configuration();
    public sealed virtual void Scan(Type[] classesContainingStaticPropertiesOfTypeMessageCode);
    public sealed virtual bool TryGet(MessageCode messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
    public sealed virtual bool TryGet(string messageCodeIdentifier, MessageCode& messageCode, MessageCodeMetadataAttribute& messageCodeMetadataAttribute);
}
[ExtensionAttribute]
public static class XAct.MethodInfoExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate4;
    [ExtensionAttribute]
public static string ToStringSignature(MethodInfo methodInfo, bool includeClassName);
    [ExtensionAttribute]
public static TAttribute GetAttributeRecursively(MethodInfo methodInfo, bool recurse);
    [ExtensionAttribute]
public static Attribute GetCustomAttribute(MethodInfo methodInfo, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static Attribute[] GetCustomAttributes(MethodInfo methodInfo, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static Attribute GetAttributeRecursively(MethodInfo methodInfo, Type attributeType, bool recurse);
    [ExtensionAttribute]
public static TAttribute[] GetAttributesRecursively(MethodInfo methodInfo, bool recurse);
    [ExtensionAttribute]
public static Attribute[] GetAttributesRecursively(MethodInfo methodInfo, Type attributeType, bool recurse);
    [ExtensionAttribute]
public static bool IsPropertyAccessor(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsPublic(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsInternal(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsProtected(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsPrivate(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsAbstract(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsPublicAbstract(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
private static string <ToStringSignature>b__0(ParameterInfo p);
    [CompilerGeneratedAttribute]
private static Type <GetAttributesRecursively>b__2(ParameterInfo p);
}
[DataContractAttribute]
public class XAct.NameStringValue : NameValue`1<string> {
}
[DataContractAttribute]
public class XAct.NameValue`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public TValue Value { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TValue get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(TValue value);
}
public interface XAct.Net.Messaging.ISimpleMessageService {
    public abstract virtual void Send(SimpleMessage userIdentityMessage);
}
[DataContractAttribute]
public class XAct.Net.Messaging.PersistedFile : object {
    [DataMemberAttribute]
private int _size;
    [DataMemberAttribute]
private string _name;
    [DataMemberAttribute]
private ICollection`1<PersistedFileMetadata> _metadata;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ApplicationTennantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModifiedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public Guid ApplicationTennantId { get; public set; }
    public int Size { get; protected set; }
    [DataMemberAttribute]
public string ContentType { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> DeletedOnUtc { get; public set; }
    public string Name { get; public set; }
    [DataMemberAttribute]
public string ContentId { get; public set; }
    [DataMemberAttribute]
public Byte[] Value { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    public ICollection`1<PersistedFileMetadata> Metadata { get; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_ApplicationTennantId();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationTennantId(Guid value);
    public virtual int get_Size();
    protected virtual void set_Size(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_DeletedOnUtc(Nullable`1<DateTime> value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContentId();
    [CompilerGeneratedAttribute]
public virtual void set_ContentId(string value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    public virtual ICollection`1<PersistedFileMetadata> get_Metadata();
}
[DataContractAttribute]
public class XAct.Net.Messaging.PersistedFileMetadata : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OwnerFK>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModifiedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public Guid OwnerFK { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public string CreatedBy { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    [DataMemberAttribute]
public string LastModifiedBy { get; public set; }
    [DataMemberAttribute]
public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_OwnerFK();
    [CompilerGeneratedAttribute]
public virtual void set_OwnerFK(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_LastModifiedBy();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedBy(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tag();
    [CompilerGeneratedAttribute]
public virtual void set_Tag(string value);
}
public class XAct.Net.Messaging.Services.Implementations.NullSimpleMessageService : XActLibServiceBase {
    public NullSimpleMessageService(ITracingService tracingService);
    public sealed virtual void Send(SimpleMessage simpleMessage);
}
[DataContractAttribute]
public class XAct.Net.Messaging.SimpleMessage : object {
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [DataMemberAttribute]
public string Destination { get; public set; }
    [DataMemberAttribute]
public string Subject { get; public set; }
    [DataMemberAttribute]
public string Body { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Destination();
    [CompilerGeneratedAttribute]
public virtual void set_Destination(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Subject();
    [CompilerGeneratedAttribute]
public virtual void set_Subject(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Body();
    [CompilerGeneratedAttribute]
public virtual void set_Body(string value);
}
public interface XAct.Net.Services.IJsonRequestService {
    public abstract virtual TResponse MakeRequest(string requestUrl);
}
public class XAct.NoteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    public string Category { get; private set; }
    public string Note { get; private set; }
    public NoteAttribute(string note, string category);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Note();
    [CompilerGeneratedAttribute]
private void set_Note(string value);
}
public class XAct.NullDependencyResolver : object {
    public object GetInstance(Type type);
    public object GetInstance(Type type, string tag);
    public IEnumerable`1<object> GetInstances(Type type);
}
[ExtensionAttribute]
public static class XAct.ObjectEnumEnumerableExtensions : object {
    [ExtensionAttribute]
public static void EnumDefined(object value, Type enumType, string argumentName);
    [ExtensionAttribute]
public static int GetEnumValue(TEnum name, bool throwArgumentIfNotFound);
    [ExtensionAttribute]
public static bool IsEnum(object value);
    [ExtensionAttribute]
public static void ValidateIsEnum(object value, string argumentName);
}
[ExtensionAttribute]
public static class XAct.ObjectExtensions : object {
    private static Dictionary`2<int, WeakReference> _dynamicPropertiesCache;
    private static Dictionary`2<WeakReference, Dictionary`2<string, object>> _dynamicPropertiesCache2;
    private static CultureInfo _invariantCulture;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<int, WeakReference>, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static IConversionService ConversionService { get; }
    private static ObjectExtensions();
    private static void ValidateIsNotWrappedObject(object o);
    [ExtensionAttribute]
public static WrappedObject Xtensions(object o);
    [ExtensionAttribute]
public static void ValidateIsRightTypeOrSubClassThereof(object o, Type expectedType);
    [ExtensionAttribute]
public static bool IsSubClassOfEx(object childClassInstance, Type parentSuperClass);
    [ExtensionAttribute]
public static string ToXmlString(object objectToSerialize);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetDynamicAttributes(object target);
    [ExtensionAttribute]
public static void SetValues(TObject o, IDictionary`2<string, object> values);
    public static void GetValues(TObject o, IDictionary`2<string, object> values);
    [ExtensionAttribute]
public static int MakeUniqueIdentifier(object dataObject);
    [ExtensionAttribute]
public static T TestWCFSerialization(T message);
    [ExtensionAttribute]
public static void ToDataContractStream(T objectToSerialize, Stream streamToSerializeInto);
    [ExtensionAttribute]
public static string ToDataContractString(object objectToSerialize);
    [ExtensionAttribute]
public static string ToJSON(T objToSerialize, Encoding encoding);
    [ExtensionAttribute]
public static string ToJSON(object objToSerialize, Type type, Encoding encoding);
    private static IConversionService get_ConversionService();
    [ExtensionAttribute]
public static bool IsNull(object value);
    [ExtensionAttribute]
public static bool IsDefault(T value);
    [ExtensionAttribute]
public static void ValidateIsNotDefault(object value, string argName, string errorMessage);
    [ExtensionAttribute]
public static void ValidateIsNotDefaultOrNotInitialized(object value, string argName, string errorMessage);
    [ExtensionAttribute]
[DebuggerHiddenAttribute]
public static bool IsDefaultOrNotInitialized(object argument);
    [ExtensionAttribute]
public static TOut ConvertTo(TIn value, IConversionService conversionService);
    [ExtensionAttribute]
public static TDestination ConvertTo(object value, IConversionService conversionService);
    [ExtensionAttribute]
public static object ConvertTo(object value, Type destinationType, IConversionService conversionService);
    [ExtensionAttribute]
public static bool EqualsSafely(object source, object target);
    [ExtensionAttribute]
public static string ToStringSafely(object o);
    [ExtensionAttribute]
public static object InvokeGenericMethod(object target, string methodName, Type[] genericTypes, Object[] methodArguments, Type objecttType);
    [ExtensionAttribute]
public static IEnumerable`1<T> ToIEnumarable(T item);
    [CompilerGeneratedAttribute]
private static bool <GetDynamicAttributes>b__0(KeyValuePair`2<int, WeakReference> p);
}
public interface XAct.ObjectMapping.ITypeMap {
    public Type SourceType { get; }
    public Type TargetType { get; }
    public abstract virtual Type get_SourceType();
    public abstract virtual Type get_TargetType();
}
public interface XAct.ObjectMapping.ITypeMap`2 {
}
[AttributeUsageAttribute("4")]
public class XAct.ObjectMapping.ObjectMapAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ZoneTag>k__BackingField;
    public string ZoneTag { get; public set; }
    public ObjectMapAttribute(string zoneTag);
    [CompilerGeneratedAttribute]
public string get_ZoneTag();
    [CompilerGeneratedAttribute]
public void set_ZoneTag(string value);
}
[ExtensionAttribute]
public static class XAct.ObjectReflectionExtensions : object {
    private static CultureInfo _invariantCulture;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, string> CS$<>9__CachedAnonymousMethodDelegate2;
    private static ObjectReflectionExtensions();
    [ExtensionAttribute]
public static void SetMemberValue(object objectInstance, string name, object value);
    [ExtensionAttribute]
public static void SetMemberValue(object objectInstance, string name, object value, BindingFlags bindingFlags);
    [ExtensionAttribute]
public static object GetMemberValue(object objectInstance, string name);
    [ExtensionAttribute]
public static object GetMemberValue(object objectInstance, string name, BindingFlags bindingFlags);
    [ExtensionAttribute]
private static FieldInfo GetFieldInfo(Type type, string fieldName, BindingFlags bindingFlags);
    [ExtensionAttribute]
public static String[] EnumerateClassesInNamespace(Type classWithinNamespace);
    [ExtensionAttribute]
public static object InvokeMethod(object classInstance, string methodName, Object[] arguments);
    [ExtensionAttribute]
public static object InvokeMethod(object classInstance, string methodName, Type[] argumentTypes, Object[] arguments);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetObjectPropertyValues(object context);
    [ExtensionAttribute]
public static void SetObjectPropertyValues(object context, Dictionary`2<string, object> propertyValues);
    [ExtensionAttribute]
public static void MapPropertyValues(object source, object target, bool onlyScalarProperties);
    [ExtensionAttribute]
public static void MapPropertyValues(T source, T target, bool ignoreNull, bool updateOnlyIfNonEqual, bool onlyScalarProperties);
    [CompilerGeneratedAttribute]
private static string <GetObjectPropertyValues>b__0(PropertyInfo p);
}
public abstract class XAct.ObjectWrapperBase`1 : object {
    private bool _safeEntity;
    private object _wrappedEntity;
    protected bool SafeEntity { get; protected set; }
    protected bool get_SafeEntity();
    protected void set_SafeEntity(bool value);
    public sealed virtual TWrappedEntity2 GetInnerItem();
    public void SetInnerObject(object o);
    public virtual bool Equals(object obj);
    protected virtual bool Equals(ObjectWrapperBase`1<TWrappedEntity> other);
    public virtual int GetHashCode();
    public static bool op_Equality(ObjectWrapperBase`1<TWrappedEntity> a, object b);
    public static bool op_Inequality(ObjectWrapperBase`1<TWrappedEntity> a, object b);
}
public class XAct.PrioritizedBindingDescriptor : object {
    [CompilerGeneratedAttribute]
private Priority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindingDescriptor <BindingDescriptor>k__BackingField;
    public Priority Priority { get; private set; }
    public IBindingDescriptor BindingDescriptor { get; private set; }
    public PrioritizedBindingDescriptor(Priority priority, IBindingDescriptor bindingDescriptor);
    [CompilerGeneratedAttribute]
public Priority get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(Priority value);
    [CompilerGeneratedAttribute]
public IBindingDescriptor get_BindingDescriptor();
    [CompilerGeneratedAttribute]
private void set_BindingDescriptor(IBindingDescriptor value);
}
[DataContractAttribute]
public enum XAct.Priority : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Priority Critical;
    [EnumMemberAttribute]
public static Priority Urgent;
    [EnumMemberAttribute]
public static Priority High;
    [EnumMemberAttribute]
public static Priority Normal;
    [EnumMemberAttribute]
public static Priority Low;
    [EnumMemberAttribute]
public static Priority VeryLow;
}
[DataContractAttribute]
public enum XAct.Progress : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Progress Fail;
    [EnumMemberAttribute]
public static Progress Warn;
    [EnumMemberAttribute]
public static Progress Success;
    [EnumMemberAttribute]
public static Progress Pending;
    [EnumMemberAttribute]
public static Progress Error;
    [EnumMemberAttribute]
public static Progress Paused;
    [EnumMemberAttribute]
public static Progress InProgress;
    [EnumMemberAttribute]
public static Progress Completed;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class XAct.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string EnumValueNotFound { get; }
    internal static string ErrMsgArgumentCannotBeNull { get; }
    internal static string ErrMsgArgumentCannotBeNullOrEmpty { get; }
    internal static string ErrMsgArgumentEnumValueCannotBeUndefined { get; }
    internal static string ErrMsgItemIsNotOfRightType { get; }
    internal static string Exception_LengthMustByLargerThanZero { get; }
    internal static string StringLengthMustBeLargerThanX { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_EnumValueNotFound();
    internal static string get_ErrMsgArgumentCannotBeNull();
    internal static string get_ErrMsgArgumentCannotBeNullOrEmpty();
    internal static string get_ErrMsgArgumentEnumValueCannotBeUndefined();
    internal static string get_ErrMsgItemIsNotOfRightType();
    internal static string get_Exception_LengthMustByLargerThanZero();
    internal static string get_StringLengthMustBeLargerThanX();
}
[ExtensionAttribute]
public static class XAct.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static TAttribute GetAttributeOrDefault(PropertyInfo propertyInfo, TAttribute defaultAttribute, bool inherit);
    [ExtensionAttribute]
public static TAttribute GetAttributeRecursively(PropertyInfo propertyInfo, bool recurse);
    [ExtensionAttribute]
public static Attribute GetCustomAttribute(PropertyInfo propertyInfo, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static Attribute GetAttributeRecursively(PropertyInfo propertyInfo, Type attributeType, bool recurse);
    [ExtensionAttribute]
public static Attribute[] GetAttributesRecursively(PropertyInfo propertyInfo, Type attributeType, bool recurse, bool allowDescendents);
    [ExtensionAttribute]
public static bool IsGetterPublic(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsGetterInternal(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsGetterProtected(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsGetterPrivate(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsGetterAbstract(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsGetterPublicAbstract(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsSetterPublic(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsSetterInternal(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsSetterProtected(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsSetterPrivate(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsSetterAbstract(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsSetterPublicAbstract(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsPublicAbstract(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsPublic(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
public static class XAct.QuerySearchTermExtensions : object {
    [ExtensionAttribute]
public static void TryParse(IQuerySearchTerm querySearchTerm, T defaultValue);
    [ExtensionAttribute]
public static void ConvertTo(IQuerySearchTerm querySearchTerm);
}
[ExtensionAttribute]
public static class XAct.RandomExtensions : object {
    [ExtensionAttribute]
public static int Random(Random random, int maximum);
    [ExtensionAttribute]
public static int Random(Random random, int minimum, int maximum);
}
public class XAct.Reflection.NodeTypeWrapper : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Display>k__BackingField;
    public Type Type { get; public set; }
    public bool Display { get; public set; }
    public NodeTypeWrapper(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public bool get_Display();
    [CompilerGeneratedAttribute]
public void set_Display(bool value);
    public virtual string ToString();
}
public interface XAct.Resources.ICultureSpecificResponseService {
    public ICultureSpecificMessageServiceConfiguration Configuration { get; }
    public abstract virtual ICultureSpecificMessageServiceConfiguration get_Configuration();
    public abstract virtual void SetPresentationAttributes(IResponse response, CultureInfo cultureInfo);
    public abstract virtual void SetPresentationAttributes(Message message, CultureInfo cultureInfo);
}
public interface XAct.Resources.IResource {
    public string Key { get; public set; }
    public string CultureCode { get; public set; }
    public string Value { get; public set; }
    public abstract virtual string get_Key();
    public abstract virtual void set_Key(string value);
    public abstract virtual string get_CultureCode();
    public abstract virtual void set_CultureCode(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
public interface XAct.Resources.IResourceService {
    public abstract virtual string GetString(string name, CultureInfo cultureInfo);
    public abstract virtual string GetString(string filter, string name, CultureInfo cultureInfo);
    public abstract virtual Dictionary`2<string, string> GetAllStrings(string filter, CultureInfo cultureInfo);
    public abstract virtual Dictionary`2<string, Dictionary`2<string, string>> GetAllStrings(CultureInfo cultureInfo, String[] filters);
}
public class XAct.Resources.Resource : object {
    private string _filter;
    private string _key;
    private string _cultureCode;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    public string Filter { get; public set; }
    public string Key { get; public set; }
    public string CultureCode { get; public set; }
    public string Value { get; public set; }
    public string Description { get; public set; }
    public Resource(Guid id, string filter, string key, string value, CultureInfo cultureInfo);
    public Resource(Guid id, string filter, string key, string value, string cultureCode);
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual string get_Key();
    public virtual void set_Key(string value);
    public virtual string get_CultureCode();
    public virtual void set_CultureCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
}
[DataContractAttribute]
public enum XAct.ResultStatus : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ResultStatus Undefined;
    [EnumMemberAttribute]
public static ResultStatus Aborted;
    [EnumMemberAttribute]
public static ResultStatus Undetermined;
    [EnumMemberAttribute]
public static ResultStatus Fail;
    [EnumMemberAttribute]
public static ResultStatus Warn;
    [EnumMemberAttribute]
public static ResultStatus Success;
}
[AttributeUsageAttribute("68")]
public class XAct.Security.AllowAnonymousAttribute : Attribute {
}
[AttributeUsageAttribute("1476")]
public class XAct.Security.AuthorizationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Roles>k__BackingField;
    public bool Enabled { get; public set; }
    public string Name { get; public set; }
    public bool Excluded { get; public set; }
    public string Roles { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Excluded();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Excluded(bool value);
    [CompilerGeneratedAttribute]
public string get_Roles();
    [CompilerGeneratedAttribute]
public void set_Roles(string value);
}
[DataContractAttribute]
public enum XAct.Security.AuthorizationResult : Enum {
    public int value__;
    [EnumMemberAttribute]
public static AuthorizationResult Undefined;
    [EnumMemberAttribute]
public static AuthorizationResult AnonymousPermitted;
    [EnumMemberAttribute]
public static AuthorizationResult Authorized;
    [EnumMemberAttribute]
public static AuthorizationResult NotAuthenticated;
    [EnumMemberAttribute]
public static AuthorizationResult NotAuthorized;
}
public interface XAct.Security.IHasReadWriteAuthorization {
    public bool IsReadAuthorized { get; }
    public bool IsWriteAuthorized { get; }
    public abstract virtual bool get_IsReadAuthorized();
    public abstract virtual bool get_IsWriteAuthorized();
}
public interface XAct.Security.IReadWriteAccessRoleNames {
    public string ReadAccessRoleNames { get; }
    public string WriteAccessRoleNames { get; }
    public abstract virtual string get_ReadAccessRoleNames();
    public abstract virtual string get_WriteAccessRoleNames();
}
public class XAct.Security.NotAuthenticatedException : Exception {
    public NotAuthenticatedException(string message);
    public NotAuthenticatedException(string message, Exception innerException);
}
public class XAct.Security.NotAuthorizedException : Exception {
    public NotAuthorizedException(string message);
    public NotAuthorizedException(string message, Exception innerException);
}
public class XAct.Security.SessionExpiredNotAuthorizedException : NotAuthorizedException {
    public SessionExpiredNotAuthorizedException(string message);
    public SessionExpiredNotAuthorizedException(string message, Exception innerException);
}
public class XAct.Security.StrongPasswordGenerator : object {
    private static string PasswordCharsLcase;
    private static string PasswordCharsUcase;
    private static string PasswordCharsNumeric;
    private static string PasswordCharsSpecial;
    private static Random _random;
    private Char[] _passwordCharsLcaseArray;
    private Char[] _passwordCharsNumericArray;
    private Char[] _passwordCharsSpecialArray;
    private Char[] _passwordCharsUcaseArray;
    public string GeneratePassword(int minLength, int maxLength, bool requireSpecialCharacters);
    public string GeneratePassword(int minLength, int maxLength, bool requireSpecialCharacters, Char[] specialCharsAllowed);
}
[DataContractAttribute]
public enum XAct.SerializationMethod : Enum {
    public int value__;
    [EnumMemberAttribute]
public static SerializationMethod Undefined;
    [EnumMemberAttribute]
public static SerializationMethod String;
    [EnumMemberAttribute]
public static SerializationMethod Json;
    [EnumMemberAttribute]
public static SerializationMethod Xml;
    [EnumMemberAttribute]
public static SerializationMethod Base64Binary;
}
public class XAct.ServiceLocatorDependencyResolver : object {
    private Type _locatorType;
    private Func`2<Type, object> _getInstanceDelegate;
    private Func`3<Type, string, object> _getInstance2Delegate;
    private Func`2<Type, IEnumerable`1<object>> _getAllInstancesDelegate;
    private bool _initialized;
    public sealed virtual void SetInternal(object o);
    public sealed virtual T GetInstance(bool throwExceptionIfNotFound);
    public sealed virtual object GetInstance(Type type, bool throwExceptionIfNotFound);
    public sealed virtual T GetInstance(string tag, bool throwExceptionIfNotFound);
    public sealed virtual object GetInstance(Type type, string tag, bool throwExceptionIfNotFound);
    public sealed virtual IEnumerable`1<T> GetInstances();
    public sealed virtual IEnumerable`1<object> GetInstances(Type type);
    private void Initialize();
    [CompilerGeneratedAttribute]
private static T <GetInstances>b__0(object o);
}
[ExtensionAttribute]
public static class XAct.ServiceLocatorServiceExtensions : object {
    [ExtensionAttribute]
public static void RegisterServiceBindingInIoC(IDependencyResolver dependencyResolver, BindingLifetimeType serviceLifetimeType);
    [ExtensionAttribute]
public static void RegisterServiceBindingInIoC(IDependencyResolver dependencyResolver, IBindingDescriptor serviceRegistrationDescriptor);
    [ExtensionAttribute]
public static bool IsServiceRegistered(IDependencyResolver dependencyResolver, Type serviceInterfaceType);
}
public class XAct.Services.BindingDescriptor : object {
    [CompilerGeneratedAttribute]
private BindingType <BindingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <InterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingLifetimeType <ServiceLifeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public BindingType BindingType { get; public set; }
    public Type InterfaceType { get; public set; }
    public Type ImplementationType { get; public set; }
    public BindingLifetimeType ServiceLifeType { get; public set; }
    public string Tag { get; public set; }
    public BindingDescriptor(BindingType bindingType, Type interfaceType, Type implementationType, BindingLifetimeType serviceLifetimeType, string tag);
    [CompilerGeneratedAttribute]
public sealed virtual BindingType get_BindingType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindingType(BindingType value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_InterfaceType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InterfaceType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ImplementationType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual BindingLifetimeType get_ServiceLifeType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceLifeType(BindingLifetimeType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tag(string value);
    public BindingDescriptor Initialize(BindingLifetimeType serviceLifetimeType, string tag);
    public virtual string ToString();
}
public class XAct.Services.BindingDescriptor`2 : BindingDescriptor {
    public BindingDescriptor`2(BindingType bindingType, BindingLifetimeType serviceLifetimeType, string tag);
}
public class XAct.Services.BindingDescriptorGroup : object {
    private List`1<IBindingDescriptorBase> _serviceBindings;
    public List`1<IBindingDescriptorBase> ServiceBindings { get; }
    public BindingDescriptorGroup(IBindingDescriptorBase[] serviceBindingDescriptors);
    public sealed virtual List`1<IBindingDescriptorBase> get_ServiceBindings();
    public virtual string ToString();
}
public class XAct.Services.BindingDescriptorResult : object {
    [CompilerGeneratedAttribute]
private IBindingDescriptor <BindingDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Skipped>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowException>k__BackingField;
    public IBindingDescriptor BindingDescriptor { get; private set; }
    public bool Skipped { get; private set; }
    public Exception Exception { get; private set; }
    public bool ThrowException { get; private set; }
    public BindingDescriptorResult(IBindingDescriptor bindingDescriptor, bool skipped, Exception exception, bool throwException);
    [CompilerGeneratedAttribute]
public sealed virtual IBindingDescriptor get_BindingDescriptor();
    [CompilerGeneratedAttribute]
private void set_BindingDescriptor(IBindingDescriptor value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Skipped();
    [CompilerGeneratedAttribute]
private void set_Skipped(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowException();
    [CompilerGeneratedAttribute]
private void set_ThrowException(bool value);
}
[DataContractAttribute]
public enum XAct.Services.BindingLifetimeType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static BindingLifetimeType Undefined;
    [EnumMemberAttribute]
public static BindingLifetimeType TransientScope;
    [EnumMemberAttribute]
public static BindingLifetimeType SingletonScope;
    [EnumMemberAttribute]
public static BindingLifetimeType SingletonPerThreadScope;
    [EnumMemberAttribute]
public static BindingLifetimeType SingletonPerWebRequestScope;
}
[DataContractAttribute]
public enum XAct.Services.BindingType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static BindingType Undefined;
    [EnumMemberAttribute]
public static BindingType Custom;
    [EnumMemberAttribute]
public static BindingType Attribute;
    [EnumMemberAttribute]
public static BindingType Interface;
}
public interface XAct.Services.Comm.ServiceModel.IHasPing {
    public abstract virtual string Ping();
}
[AttributeUsageAttribute("4")]
public class XAct.Services.DefaultBindingImplementationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ServiceInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingLifetimeType <LifeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private Priority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public Type ServiceInterface { get; private set; }
    public BindingLifetimeType LifeSpan { get; private set; }
    public Priority Priority { get; private set; }
    public string Tag { get; private set; }
    public DefaultBindingImplementationAttribute(Type serviceInterface, BindingLifetimeType lifeSpan, Priority priority, string tag);
    [CompilerGeneratedAttribute]
public Type get_ServiceInterface();
    [CompilerGeneratedAttribute]
private void set_ServiceInterface(Type value);
    [CompilerGeneratedAttribute]
public BindingLifetimeType get_LifeSpan();
    [CompilerGeneratedAttribute]
private void set_LifeSpan(BindingLifetimeType value);
    [CompilerGeneratedAttribute]
public sealed virtual Priority get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(Priority value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(string value);
}
public interface XAct.Services.IBindingDescriptor {
    public BindingType BindingType { get; public set; }
    public Type InterfaceType { get; public set; }
    public Type ImplementationType { get; public set; }
    public BindingLifetimeType ServiceLifeType { get; public set; }
    public string Tag { get; public set; }
    public abstract virtual BindingType get_BindingType();
    public abstract virtual void set_BindingType(BindingType value);
    public abstract virtual Type get_InterfaceType();
    public abstract virtual void set_InterfaceType(Type value);
    public abstract virtual Type get_ImplementationType();
    public abstract virtual void set_ImplementationType(Type value);
    public abstract virtual BindingLifetimeType get_ServiceLifeType();
    public abstract virtual void set_ServiceLifeType(BindingLifetimeType value);
    public abstract virtual string get_Tag();
    public abstract virtual void set_Tag(string value);
}
public interface XAct.Services.IBindingDescriptorBase {
    public abstract virtual string ToString();
}
public interface XAct.Services.IBindingDescriptorGroup {
    public List`1<IBindingDescriptorBase> ServiceBindings { get; }
    public abstract virtual List`1<IBindingDescriptorBase> get_ServiceBindings();
}
public interface XAct.Services.IBindingDescriptorResult {
    public IBindingDescriptor BindingDescriptor { get; }
    public bool Skipped { get; }
    public Exception Exception { get; }
    public bool ThrowException { get; }
    public abstract virtual IBindingDescriptor get_BindingDescriptor();
    public abstract virtual bool get_Skipped();
    public abstract virtual Exception get_Exception();
    public abstract virtual bool get_ThrowException();
}
public interface XAct.Services.IConversionService {
    public abstract virtual TTarget Convert(object source);
    public abstract virtual object Convert(object source, Type targetType);
}
public interface XAct.Services.IInstanceBindingDescriptor {
    public Type InterfaceType { get; public set; }
    public object Instance { get; public set; }
    public BindingLifetimeType ServiceLifeType { get; public set; }
    public abstract virtual Type get_InterfaceType();
    public abstract virtual void set_InterfaceType(Type value);
    public abstract virtual object get_Instance();
    public abstract virtual void set_Instance(object value);
    public abstract virtual BindingLifetimeType get_ServiceLifeType();
    public abstract virtual void set_ServiceLifeType(BindingLifetimeType value);
}
public class XAct.Services.Implementations.ConversionService : object {
    public sealed virtual TTarget Convert(object source);
    public sealed virtual object Convert(object source, Type targetType);
}
public class XAct.Services.InstanceBindingDescriptor : object {
    private object _instance;
    private Func`1<object> _instanceBuilder;
    [CompilerGeneratedAttribute]
private Type <InterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingLifetimeType <ServiceLifeType>k__BackingField;
    public Type InterfaceType { get; public set; }
    public object Instance { get; public set; }
    public BindingLifetimeType ServiceLifeType { get; public set; }
    public InstanceBindingDescriptor(Type type, object instance, BindingLifetimeType serviceLifeType);
    public InstanceBindingDescriptor(Type type, Func`1<object> instanceBuilder, BindingLifetimeType serviceLifeType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_InterfaceType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InterfaceType(Type value);
    public sealed virtual object get_Instance();
    public sealed virtual void set_Instance(object value);
    [CompilerGeneratedAttribute]
public sealed virtual BindingLifetimeType get_ServiceLifeType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceLifeType(BindingLifetimeType value);
}
public class XAct.Services.IoC.Initialization.BindingScanResults : object {
    [CompilerGeneratedAttribute]
private bool <HadPermissionsToScanDir>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AssemblySearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeToLoadFilesElapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AssemblyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeToScanElapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindingDescriptor[] <BindingDescriptors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsedTempAppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <InstanceTypesNotBound>k__BackingField;
    public bool HadPermissionsToScanDir { get; public set; }
    public String[] AssemblySearchPaths { get; public set; }
    public TimeSpan TimeToLoadFilesElapsed { get; public set; }
    public String[] AssemblyNames { get; public set; }
    public TimeSpan TimeToScanElapsed { get; public set; }
    public IBindingDescriptor[] BindingDescriptors { get; public set; }
    public bool UsedTempAppDomain { get; public set; }
    public String[] InstanceTypesNotBound { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HadPermissionsToScanDir();
    [CompilerGeneratedAttribute]
public void set_HadPermissionsToScanDir(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AssemblySearchPaths();
    [CompilerGeneratedAttribute]
public void set_AssemblySearchPaths(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeToLoadFilesElapsed();
    [CompilerGeneratedAttribute]
public void set_TimeToLoadFilesElapsed(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AssemblyNames();
    [CompilerGeneratedAttribute]
public void set_AssemblyNames(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeToScanElapsed();
    [CompilerGeneratedAttribute]
public void set_TimeToScanElapsed(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindingDescriptor[] get_BindingDescriptors();
    [CompilerGeneratedAttribute]
public void set_BindingDescriptors(IBindingDescriptor[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UsedTempAppDomain();
    [CompilerGeneratedAttribute]
public void set_UsedTempAppDomain(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_InstanceTypesNotBound();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InstanceTypesNotBound(String[] value);
}
public interface XAct.Services.IoC.Initialization.IBindingScanResults {
    public bool UsedTempAppDomain { get; }
    public TimeSpan TimeToLoadFilesElapsed { get; }
    public TimeSpan TimeToScanElapsed { get; }
    public bool HadPermissionsToScanDir { get; }
    public String[] AssemblySearchPaths { get; }
    public String[] AssemblyNames { get; }
    public IBindingDescriptor[] BindingDescriptors { get; }
    public String[] InstanceTypesNotBound { get; public set; }
    public abstract virtual bool get_UsedTempAppDomain();
    public abstract virtual TimeSpan get_TimeToLoadFilesElapsed();
    public abstract virtual TimeSpan get_TimeToScanElapsed();
    public abstract virtual bool get_HadPermissionsToScanDir();
    public abstract virtual String[] get_AssemblySearchPaths();
    public abstract virtual String[] get_AssemblyNames();
    public abstract virtual IBindingDescriptor[] get_BindingDescriptors();
    public abstract virtual String[] get_InstanceTypesNotBound();
    public abstract virtual void set_InstanceTypesNotBound(String[] value);
}
public interface XAct.Services.IoC.Initialization.IInitializeLibraryBindingsResults {
    public BindingScanResults BindingScanResults { get; }
    public bool IsInitialized { get; public set; }
    public TimeSpan TimeToRegisterElapsed { get; public set; }
    public TimeSpan TotalTimeElapsed { get; public set; }
    public IBindingDescriptor[] ServiceBindingsRegistered { get; public set; }
    public IBindingDescriptor[] ServiceBindingsSkipped { get; public set; }
    public abstract virtual BindingScanResults get_BindingScanResults();
    public abstract virtual bool get_IsInitialized();
    public abstract virtual void set_IsInitialized(bool value);
    public abstract virtual TimeSpan get_TimeToRegisterElapsed();
    public abstract virtual void set_TimeToRegisterElapsed(TimeSpan value);
    public abstract virtual TimeSpan get_TotalTimeElapsed();
    public abstract virtual void set_TotalTimeElapsed(TimeSpan value);
    public abstract virtual IBindingDescriptor[] get_ServiceBindingsRegistered();
    public abstract virtual void set_ServiceBindingsRegistered(IBindingDescriptor[] value);
    public abstract virtual IBindingDescriptor[] get_ServiceBindingsSkipped();
    public abstract virtual void set_ServiceBindingsSkipped(IBindingDescriptor[] value);
    public abstract virtual String[] CreateBindingReport();
}
public class XAct.Services.IoC.Initialization.InitializeLibraryBindingsResults : object {
    private BindingScanResults _bindingScanResults;
    private bool _isInitialized;
    private TimeSpan _timeToRegisterElapsed;
    private TimeSpan _timeElapsed;
    private IBindingDescriptor[] _serviceBindingsRegistered;
    private IBindingDescriptor[] _serviceBindingsSkipped;
    private IBindingDescriptor[] _instanceTypesNotBound;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IBindingDescriptor, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IBindingDescriptor, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegateb;
    public BindingScanResults BindingScanResults { get; }
    public bool IsInitialized { get; public set; }
    public TimeSpan TimeToRegisterElapsed { get; public set; }
    public TimeSpan TotalTimeElapsed { get; public set; }
    public IBindingDescriptor[] ServiceBindingsRegistered { get; public set; }
    public IBindingDescriptor[] ServiceBindingsSkipped { get; public set; }
    public IBindingDescriptor[] InstanceTypesNotBound { get; public set; }
    public sealed virtual BindingScanResults get_BindingScanResults();
    public sealed virtual bool get_IsInitialized();
    public sealed virtual void set_IsInitialized(bool value);
    public sealed virtual TimeSpan get_TimeToRegisterElapsed();
    public sealed virtual void set_TimeToRegisterElapsed(TimeSpan value);
    public sealed virtual TimeSpan get_TotalTimeElapsed();
    public sealed virtual void set_TotalTimeElapsed(TimeSpan value);
    public sealed virtual IBindingDescriptor[] get_ServiceBindingsRegistered();
    public sealed virtual void set_ServiceBindingsRegistered(IBindingDescriptor[] value);
    public sealed virtual IBindingDescriptor[] get_ServiceBindingsSkipped();
    public sealed virtual void set_ServiceBindingsSkipped(IBindingDescriptor[] value);
    public IBindingDescriptor[] get_InstanceTypesNotBound();
    public void set_InstanceTypesNotBound(IBindingDescriptor[] value);
    public void TraceBindingReport(ITracingService tracingService);
    public sealed virtual String[] CreateBindingReport();
    private void VerifyIsLocked();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <CreateBindingReport>b__0(string searchPath);
    [CompilerGeneratedAttribute]
private static string <CreateBindingReport>b__1(string n);
    [CompilerGeneratedAttribute]
private static string <CreateBindingReport>b__2(string loadedPath);
    [CompilerGeneratedAttribute]
private static string <CreateBindingReport>b__3(IBindingDescriptor bindingDescriptor);
    [CompilerGeneratedAttribute]
private static string <CreateBindingReport>b__4(IBindingDescriptor bindingDescriptor);
    [CompilerGeneratedAttribute]
private static string <CreateBindingReport>b__5(string s);
}
public abstract class XAct.Services.ServiceBase : object {
    protected ITracingService _tracingService;
    protected string _typeName;
    protected ServiceBase(ITracingService tracingService);
}
public abstract class XAct.Services.XActLibServiceBase : ServiceBase {
    protected XActLibServiceBase(ITracingService tracingService);
}
public interface XAct.Settings.IHostSettingsService {
    public IHostSettingsServiceConfiguration Configuration { get; }
    public abstract virtual IHostSettingsServiceConfiguration get_Configuration();
}
public interface XAct.Settings.IHostSettingsServiceConfiguration {
}
public interface XAct.Settings.IKeySettingsService {
    public abstract virtual TValue Get(string key, bool throwExceptionOnConversionException);
    public abstract virtual TValue Get(string key, TValue defaultValue, bool throwExceptionOnConversionException);
}
[DataContractAttribute]
public enum XAct.Severity : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static Severity Undefined;
    [EnumMemberAttribute]
public static Severity Error;
    [EnumMemberAttribute]
public static Severity BlockingWarning;
    [EnumMemberAttribute]
public static Severity NonBlockingWarning;
    [EnumMemberAttribute]
public static Severity Info;
    [EnumMemberAttribute]
public static Severity SystemInfo;
}
public static class XAct.Shortcuts : object {
    public static T ActivateEx(Type t);
    public static void Trace(TraceLevel traceLevel, string message, Object[] args);
    public static void TraceException(TraceLevel traceLevel, Exception exception, string message, Object[] args);
    public static TInterface ServiceLocate(string tag, bool raiseExceptionIfNotFound);
    public static object ServiceLocate(Type interfaceType, string tag, bool raiseExceptionIfNotFound);
}
public class XAct.Singleton`1 : object {
    private static TContext _singleton;
    public static TContext Instance { get; }
    public static TContext get_Instance();
}
[ExtensionAttribute]
public static class XAct.StackExtensions : object {
    [ExtensionAttribute]
public static string StackToString(Stack`1<T> stack);
}
[DefaultMemberAttribute("Item")]
public interface XAct.State.IApplicationStateService {
    public object Item { get; public set; }
    public int Count { get; }
    public ICollection Keys { get; }
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    public abstract virtual int get_Count();
    public abstract virtual ICollection get_Keys();
    public abstract virtual void Add(string key, object value);
    public abstract virtual void Clear();
    public abstract virtual void Remove(string key);
    public abstract virtual void RemoveAll();
    public abstract virtual void CopyTo(Array array, int index);
}
public interface XAct.State.IContextStateService {
    public IDictionary Items { get; }
    public abstract virtual IDictionary get_Items();
}
public class XAct.State.Implementations.ApplicationStateService : SessionState {
    public ApplicationStateService(IEnvironmentService environmentService);
}
[DefaultBindingImplementationAttribute("XAct.State.Implementations.IContextPerThread", "3", "-1", "")]
public class XAct.State.Implementations.ContextPerThread : Dictionary`2<object, object> {
}
[DefaultBindingImplementationAttribute("XAct.State.IContextStateService", "4", "-1", "")]
public class XAct.State.Implementations.ContextStateService : object {
    private IEnvironmentService _environmentService;
    private IDictionary _items;
    public IDictionary Items { get; }
    public ContextStateService(IEnvironmentService environmentService);
    public sealed virtual IDictionary get_Items();
}
public interface XAct.State.Implementations.IContextPerThread {
}
public class XAct.State.Implementations.SessionStateService : SessionState {
    public SessionStateService(IEnvironmentService environmentService);
}
[DefaultMemberAttribute("Item")]
public interface XAct.State.ISessionStateService {
    public object Item { get; public set; }
    public int Count { get; }
    public ICollection Keys { get; }
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    public abstract virtual int get_Count();
    public abstract virtual ICollection get_Keys();
    public abstract virtual void Add(string key, object value);
    public abstract virtual void Clear();
    public abstract virtual void Remove(string key);
    public abstract virtual void RemoveAll();
    public abstract virtual void CopyTo(Array array, int index);
}
public enum XAct.State.ProxyContextCollectionType : Enum {
    public int value__;
    public static ProxyContextCollectionType Application;
    public static ProxyContextCollectionType Session;
}
[DefaultMemberAttribute("Item")]
public class XAct.State.SessionState : object {
    private IDictionary`2<string, object> _proxyHashTable;
    private ProxyContextCollectionType _proxyContextCollectionType;
    private IEnvironmentService _environmentService;
    private object _httpSession;
    private object HttpSession { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public ICollection Keys { get; }
    public SessionState(IEnvironmentService environmentService, ProxyContextCollectionType proxyContextCollectionType);
    private object get_HttpSession();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual int get_Count();
    public sealed virtual ICollection get_Keys();
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    public sealed virtual void Remove(string key);
    public sealed virtual void RemoveAll();
    public sealed virtual void CopyTo(Array array, int index);
}
public static class XAct.StatusQueryResponseExtensions : object {
}
public static class XAct.StatusQueryResponseStatusExtensions : object {
}
[ExtensionAttribute]
public static class XAct.StatusServiceConnectorBaseExtensions : object {
    [ExtensionAttribute]
public static void ConfigureBasicInformation(StatusServiceConnectorBase statusServiceConnector, string name, string title, string description);
}
[ExtensionAttribute]
public static class XAct.StreamExtensions : object {
    [ExtensionAttribute]
public static long CopyStreamFrom(Stream output, Stream input);
    [ExtensionAttribute]
public static StreamReader CreateStreamReader(Stream stream);
    [ExtensionAttribute]
public static StreamWriter CreateStreamWriter(Stream stream, Encoding encoding);
    [ExtensionAttribute]
public static IEnumerable`1<string> ReadLines(Stream stream);
    [ExtensionAttribute]
public static string ReadToEnd(Stream stream);
    [ExtensionAttribute]
public static void AppendAllText(Stream stream, string contents, bool leaveOpen);
    [ExtensionAttribute]
public static void AppendAllText(Stream stream, String[] contents, bool leaveOpen);
    [ExtensionAttribute]
public static void Serialize(Stream stream, object objectToSerialize);
    [ExtensionAttribute]
public static Byte[] ReadAllBytes(Stream stream);
    [ExtensionAttribute]
public static bool ContainsXmlElements(Stream stream);
}
[ExtensionAttribute]
public static class XAct.StreamReaderExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> ReadLines(StreamReader streamReader);
}
public static class XAct.StreamWriterExtensions : object {
    public static void WriteLines(TextWriter streamOrTextWriter, IEnumerable enumerableList);
}
[ExtensionAttribute]
public static class XAct.StringArrayExtensions : object {
    [ExtensionAttribute]
public static void StringArrayNotNullOrEmpty(String[] argumentArray, string argumentName);
    [ExtensionAttribute]
public static void IsNotNullOrEmpty(String[] argumentArray, string argumentName, int minArrayLength, int maxStringLength);
    [ExtensionAttribute]
public static string JoinSafely(String[] stringArray, string separator);
    [ExtensionAttribute]
public static string JoinSafely(IEnumerable`1<string> strings, string separator);
}
[ExtensionAttribute]
public static class XAct.StringExtensions : object {
    private static CultureInfo _invariantCulture;
    [CompilerGeneratedAttribute]
private static Func`2<Match, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static MatchEvaluator CS$<>9__CachedAnonymousMethodDelegate3;
    private static StringExtensions();
    [ExtensionAttribute]
public static string EncodePassword(string text, string salt);
    [ExtensionAttribute]
public static TValue ConvertTo(string text);
    [ExtensionAttribute]
public static TValue ConvertTo(string text, TValue defaultValue);
    [ExtensionAttribute]
public static string CalculateHash(string text, Encoding encoding, string hashType);
    [ExtensionAttribute]
public static string Format(string text, CultureInfo cultureInfo, Object[] args);
    [ExtensionAttribute]
public static string Format(string text, Culture culture, Object[] args);
    [ExtensionAttribute]
public static string FormatStringExceptionCulture(string text, Object[] args);
    [ExtensionAttribute]
public static string FormatStringInvariantCulture(string text, Object[] args);
    [ExtensionAttribute]
public static string FormatStringCurrentCulture(string text, Object[] args);
    [ExtensionAttribute]
public static string FormatStringCurrentUICulture(string text, Object[] args);
    [ExtensionAttribute]
public static string FormatStringCurrencyCulture(string text, CultureInfo cultureInfo, Object[] args);
    [ExtensionAttribute]
public static string SafeString(string text, int leaveVisibleFirstNChars, bool obfuscateLengthAsWell);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string argument);
    [ExtensionAttribute]
public static void ValidateIsNotNullOrEmpty(string argument, string argumentName, string errorMessage);
    [ExtensionAttribute]
public static string ValidateIsNotNullOrEmpty(string argument, string argumentName, int minStringLength, int maxStringLength, bool suppressErrorIfOverLength);
    [ExtensionAttribute]
public static string ValidateIsNotNullOrEmptyOrTooLong(string argument, string argumentName, int maxLength, bool suppressErrorIfOverLength);
    [ExtensionAttribute]
public static Guid ToGuid(string text);
    [ExtensionAttribute]
public static DateTime ToDateTime(string dateTime, string cultureCode);
    [ExtensionAttribute]
public static string DecodeFromBase64(string base64String);
    [ExtensionAttribute]
public static Byte[] Base64ToByteArray(string base64String);
    [ExtensionAttribute]
public static string ToBase64(string stringToEncode);
    [ExtensionAttribute]
public static object StringToEnum(string text, Type type);
    [ExtensionAttribute]
public static bool IsNumeric(string text);
    [ExtensionAttribute]
public static bool ToBool(string text);
    [ExtensionAttribute]
public static Char[] ToCharArray(string text);
    [ExtensionAttribute]
public static Byte[] ToByteArray(string text, Encoding encoding);
    [ExtensionAttribute]
public static int ToIntegerFromHexString(string hexNumberString);
    [ExtensionAttribute]
public static string Left(string text, int length);
    [ExtensionAttribute]
public static string Right(string text, int length);
    [ExtensionAttribute]
public static bool EndsWith(string text, string substituteText, bool caseSensitive);
    [ExtensionAttribute]
public static bool StartsWith(string text, string pattern, bool caseSensitive);
    [ExtensionAttribute]
public static bool CompareWildcard(string text, string wildcardPattern, bool emptyWildvardIsSameAsMatchAll, RegexOptions regexOptions);
    [ExtensionAttribute]
public static bool Contains(string source, string pattern, StringComparison comp);
    [ExtensionAttribute]
public static bool IsControlChar(string text, int index);
    [ExtensionAttribute]
public static bool IsDigitChar(string text, int index);
    [ExtensionAttribute]
public static bool IsLetterChar(string text, int index);
    [ExtensionAttribute]
public static bool IsPunctuationChar(string text, int index);
    [ExtensionAttribute]
public static bool IsLowerCaseChar(string text, int index);
    [ExtensionAttribute]
public static bool IsUpperCaseChar(string text, int index);
    [ExtensionAttribute]
public static bool IsSymbolChar(string text, int index);
    [ExtensionAttribute]
public static bool IsWhiteSpaceChar(string text, int index);
    [ExtensionAttribute]
public static bool IsSame(string text, string textToComareAgainst, StringComparison stringComparison);
    [ExtensionAttribute]
public static string ToSingleString(IEnumerable`1<string> textEnumerable, string separator);
    [ExtensionAttribute]
public static string ToSingleString(IEnumerable`1<string> textEnumerable, string separator, bool ignoreNullOrEmpty);
    [ExtensionAttribute]
public static string ReplaceMultipleTokens(string text, string replacement, String[] findMe);
    [ExtensionAttribute]
public static string Replace(string str, string oldValue, string newValue, StringComparison comparison);
    [ExtensionAttribute]
public static string RegexReplace(string text, string pattern, string replacementText);
    [ExtensionAttribute]
public static string RegexReplace(string text, string pattern, MatchEvaluator matchEvaluator);
    [ExtensionAttribute]
public static string RegexReplace(string text, string pattern, string replacementText, RegexOptions options);
    [ExtensionAttribute]
public static string RegexReplace(string text, string pattern, MatchEvaluator matchEvaluator, RegexOptions options);
    [ExtensionAttribute]
public static bool IsUri(string input);
    [ExtensionAttribute]
public static string FastReplace(string original, string pattern, string replacement, StringComparison comparisonType);
    [ExtensionAttribute]
public static string SafeTrim(string value, bool returnNullIfSourceIsNull);
    [ExtensionAttribute]
public static string SafeReplace(string value, string oldValue, string newValue, bool returnNullIfSourceIsNull);
    [ExtensionAttribute]
public static String[] SafeSplit(string value, StringSplitOptions stringSplitOptions, Char[] dividers);
    [ExtensionAttribute]
public static String[] SafeSplit(string value, StringSplitOptions stringSplitOptions, String[] dividers);
    [ExtensionAttribute]
public static string Truncate(string text, int maxLength, bool useSingleChar);
    [ExtensionAttribute]
public static string Join(String[] values, string joinText);
    [ExtensionAttribute]
public static string With(string format, Object[] args);
    [ExtensionAttribute]
public static string PrettyCase(string text);
    [ExtensionAttribute]
public static string DeCamelCase(string text);
    public static string PCase(string text, string separationChars);
    [ExtensionAttribute]
public static int FindPositionOfNthChar(string text, char singleChar, int occurence);
    [ExtensionAttribute]
public static IEnumerable`1<string> FindLabeledPlaceHolders(string source, bool extended);
    [ExtensionAttribute]
public static bool HasLabeledPlaceHolders(string source);
    [ExtensionAttribute]
public static string FormatStringEx(string source, Dictionary`2<string, string> dictionary, string paramPlaceHolder, Object[] args);
    [ExtensionAttribute]
public static string Reverse(string text, int chunkSize);
    [ExtensionAttribute]
public static String[] SplitEx(string text, string divChar);
    public static string Strip(string text, string charactersToStrip, bool caseSensitive);
    [ExtensionAttribute]
public static string LastPart(string value, char splitChar);
    [ExtensionAttribute]
public static string SafeSubstring(string text, int start, int length, bool returnNullIfSourceIsNull);
    [ExtensionAttribute]
public static int ToInt32(string text);
    [ExtensionAttribute]
public static int ToInt16(string text);
    [ExtensionAttribute]
public static int LengthSafe(string text);
    [ExtensionAttribute]
public static String[] SplitPath(string text, char divChar);
    [ExtensionAttribute]
public static string EnsureLastSlashIsNotEscapeChar(string fileName);
    [ExtensionAttribute]
public static string First(string text, string divChar);
    [ExtensionAttribute]
public static string Last(string text, string divChar);
    [ExtensionAttribute]
public static string MakeSafeForForFilename(string text, string replaceChar, string spaceReplace, string dotReplace);
    [ExtensionAttribute]
public static string SplitPCase(string pcaseText);
    [ExtensionAttribute]
public static Dictionary`2<string, string> SplitIntoKeyValues(string text, bool caseInSensitive);
    [ExtensionAttribute]
public static string Repeat(string textToRepeat, int numberOfTimesToRepeat);
    [ExtensionAttribute]
public static string ToCamelCase(string text);
    [ExtensionAttribute]
public static string ToTitleCase(string text, bool keepSpaces);
    [ExtensionAttribute]
public static T DeserializeFromDataContractSerializedString(string xml);
    [ExtensionAttribute]
public static object DeserializeFromDataContractSerializedString(string xml, Type toType);
    [ExtensionAttribute]
public static T DeserialiseFromJSON(string json, Encoding encoding);
    [ExtensionAttribute]
public static object DeserialiseFromJSON(string json, Type type, Encoding encoding);
    [ExtensionAttribute]
public static string ToSentenceCase(string text);
    [CompilerGeneratedAttribute]
private static string <FindLabeledPlaceHolders>b__0(Match match);
    [CompilerGeneratedAttribute]
private static string <ToSentenceCase>b__2(Match s);
}
[ExtensionAttribute]
public static class XAct.StringRegexExtensions : object {
    [ExtensionAttribute]
public static string Replace(string text, string pattern, string replacementText);
    [ExtensionAttribute]
public static bool MatchMulti(string text, string pattern, int matchGroupNumber, String[]& results);
    [ExtensionAttribute]
public static Match FindMatches(string text, string pattern);
    [ExtensionAttribute]
public static string WildcardPatternToRegexPattern(string pattern);
    [ExtensionAttribute]
public static bool IsInRegexList(string source, String[] patterns, RegexOptions regexOptions);
    [ExtensionAttribute]
public static bool RegexMatch(string source, string pattern, RegexOptions regexOptions);
    [ExtensionAttribute]
public static bool IsAMatch(string source, string pattern);
    public static bool IsValidDate(string source);
    public static bool IsValidInteger(string source);
    public static bool IsValidUnsignedInteger(string source);
    public static bool IsValidVariableName(string source);
}
[ExtensionAttribute]
public static class XAct.TaskExtensions : object {
    [ExtensionAttribute]
public static TResult WaitAndGetResult(Task`1<TResult> task, int timeOutMilliseconds);
}
public static class XAct.Text.RegularExpressions.CommonRegularExpressionPatterns : object {
}
public class XAct.TextAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
[ExtensionAttribute]
public static class XAct.TextReaderExtensions : object {
    [ExtensionAttribute]
public static char DetectCSVSeparator(TextReader reader, int rowCount, IList`1<char> separators);
}
[ExtensionAttribute]
public static class XAct.TextWriterExtensions : object {
    [ExtensionAttribute]
public static void Serialize(TextWriter writer, object objectToSerialize);
}
public static class XAct.ThreadExtensions : object {
}
public interface XAct.Threading.IPrioritizedSpoolProcessor {
}
public interface XAct.Threading.ISpoolProcessor {
}
public static class XAct.Threading.TaskConstants`1 : object {
    [CompilerGeneratedAttribute]
private static Task`1<TResult> <NotImplemented>k__BackingField;
    public static Task`1<TResult> NotImplemented { get; private set; }
    private static TaskConstants`1();
    [CompilerGeneratedAttribute]
public static Task`1<TResult> get_NotImplemented();
    [CompilerGeneratedAttribute]
private static void set_NotImplemented(Task`1<TResult> value);
}
public class XAct.Threading.WorkerThread`1 : object {
    private EventHandler`1<GenericCancelEventArgs`1<WorkerThreadConfiguration`1<TItem>>> Processing;
    private EventHandler`1<GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>>> ProcessingCancelled;
    private EventHandler`1<GenericExceptionEventArgs`1<WorkerThreadConfiguration`1<TItem>>> ProcessingError;
    private EventHandler`1<GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>>> ProcessingComplete;
    private ITracingService _tracingService;
    private WorkerThreadConfiguration`1<TItem> _workerThreadConfiguration;
    private DateTime _processStartDateTime;
    public WorkerThreadConfiguration`1<TItem> WorkerThreadConfiguration { get; }
    public WorkerThread`1(ITracingService tracingService);
    public void add_Processing(EventHandler`1<GenericCancelEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public void remove_Processing(EventHandler`1<GenericCancelEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public void add_ProcessingCancelled(EventHandler`1<GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public void remove_ProcessingCancelled(EventHandler`1<GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public void add_ProcessingError(EventHandler`1<GenericExceptionEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public void remove_ProcessingError(EventHandler`1<GenericExceptionEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public void add_ProcessingComplete(EventHandler`1<GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public void remove_ProcessingComplete(EventHandler`1<GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>>> value);
    public WorkerThreadConfiguration`1<TItem> get_WorkerThreadConfiguration();
    public void Start(WorkerThreadConfiguration`1<TItem> workerThreadConfiguration);
    private void Process(object stateInformation);
    private void OnProcessing(GenericCancelEventArgs`1<WorkerThreadConfiguration`1<TItem>> e);
    private void OnProcessingCancelled(GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>> e);
    private void OnError(GenericExceptionEventArgs`1<WorkerThreadConfiguration`1<TItem>> e);
    private void OnProcessingComplete(GenericEventArgs`1<WorkerThreadConfiguration`1<TItem>> e);
}
public class XAct.Threading.WorkerThreadConfiguration`1 : object {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TItem, bool> <ProcessingFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkerThreadProcessingSummary`1<TItem> <Results>k__BackingField;
    public string Tag { get; private set; }
    public TItem Item { get; private set; }
    public Func`2<TItem, bool> ProcessingFunction { get; private set; }
    public WorkerThreadProcessingSummary`1<TItem> Results { get; public set; }
    public WorkerThreadConfiguration`1(TItem item, Func`2<TItem, bool> processingFunction, string tag);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(TItem value);
    [CompilerGeneratedAttribute]
public Func`2<TItem, bool> get_ProcessingFunction();
    [CompilerGeneratedAttribute]
private void set_ProcessingFunction(Func`2<TItem, bool> value);
    [CompilerGeneratedAttribute]
public WorkerThreadProcessingSummary`1<TItem> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(WorkerThreadProcessingSummary`1<TItem> value);
}
public class XAct.Threading.WorkerThreadProcessingSummary : object {
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ProcessSucessful>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public DateTime Started { get; public set; }
    public TimeSpan Duration { get; public set; }
    public bool ProcessStarted { get; public set; }
    public bool ProcessCancelled { get; public set; }
    public bool ProcessComplete { get; public set; }
    public Nullable`1<bool> ProcessSucessful { get; public set; }
    public Exception Error { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Started();
    [CompilerGeneratedAttribute]
public void set_Started(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_ProcessStarted();
    [CompilerGeneratedAttribute]
public void set_ProcessStarted(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcessCancelled();
    [CompilerGeneratedAttribute]
public void set_ProcessCancelled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcessComplete();
    [CompilerGeneratedAttribute]
public void set_ProcessComplete(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProcessSucessful();
    [CompilerGeneratedAttribute]
public void set_ProcessSucessful(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
}
public class XAct.Threading.WorkerThreadProcessingSummary`1 : WorkerThreadProcessingSummary {
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    public TItem Item { get; public set; }
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(TItem value);
}
public class XAct.TimedScope : object {
    private DateTime _start;
    public TimeSpan Elapsed { get; }
    public TimeSpan get_Elapsed();
    public sealed virtual void Dispose();
}
[DataContractAttribute]
public enum XAct.TimeInterval : Enum {
    public int value__;
    [EnumMemberAttribute]
public static TimeInterval Undefined;
    [EnumMemberAttribute]
public static TimeInterval Tick;
    [EnumMemberAttribute]
public static TimeInterval Millisecond;
    [EnumMemberAttribute]
public static TimeInterval Second;
    [EnumMemberAttribute]
public static TimeInterval Minute;
    [EnumMemberAttribute]
public static TimeInterval Hour;
    [EnumMemberAttribute]
public static TimeInterval ThreeHours;
    [EnumMemberAttribute]
public static TimeInterval SixHours;
    [EnumMemberAttribute]
public static TimeInterval TwelveHours;
    [EnumMemberAttribute]
public static TimeInterval Day;
    [EnumMemberAttribute]
public static TimeInterval Week;
    [EnumMemberAttribute]
public static TimeInterval Month;
    [EnumMemberAttribute]
public static TimeInterval Quarter;
    [EnumMemberAttribute]
public static TimeInterval Year;
    [EnumMemberAttribute]
public static TimeInterval Decade;
    [EnumMemberAttribute]
public static TimeInterval Century;
    [EnumMemberAttribute]
public static TimeInterval Millenium;
    [EnumMemberAttribute]
public static TimeInterval Megaannum;
    [EnumMemberAttribute]
public static TimeInterval Gigaannum;
    [EnumMemberAttribute]
public static TimeInterval Teraannum;
    [EnumMemberAttribute]
public static TimeInterval Eternity;
}
[ExtensionAttribute]
public static class XAct.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static TimeSpan AddRandonmess(TimeSpan timeSpan, int fraction);
}
[ExtensionAttribute]
public static class XAct.TreeNodeExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Values(IEnumerable`1<TreeNode`1<T>> nodes);
    [CompilerGeneratedAttribute]
private static T <Values>b__0(TreeNode`1<T> n);
}
[ExtensionAttribute]
public static class XAct.TypeExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Type, IEnumerable`1<Type>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`3<ConstructorInfo, ConstructorInfo, ConstructorInfo> CS$<>9__CachedAnonymousMethodDelegateb;
    private static IConversionService ConversionService { get; }
    private static IConversionService get_ConversionService();
    [ExtensionAttribute]
public static bool EnsureAllPublicMethodsAreMarkedVirtual(Type type);
    [ExtensionAttribute]
public static bool IsEnumerable(Type entityType);
    [ExtensionAttribute]
public static Type GetTypeWithoutNullability(Type type);
    [ExtensionAttribute]
public static TObject Create(Type type, Object[] args);
    [ExtensionAttribute]
public static void AssignableFrom(Type assignee, Type providedType);
    [ExtensionAttribute]
public static bool IsUnitialized(object argument);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetProperties2(Type thisEntityType, BindingFlags bindingFlags);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetMethods2(Type thisEntityType, BindingFlags bindingFlags);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesWithAttribute(Type thisEntityType, Type attributeType);
    public static bool GetReferencedPropertyValue(string fullPropertyName, T& result);
    [ExtensionAttribute]
public static bool IsSubClassOfEx(Type childSubClassType, Type parentBaseClass);
    [ExtensionAttribute]
public static object GetDefault(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsStatic(Type type);
    [ExtensionAttribute]
public static TAttribute GetFirstAttribute(Type type, bool inherit);
    [ExtensionAttribute]
public static string FullNameHack(Type type);
    [ExtensionAttribute]
public static bool IsAnonymous(Type type);
    [ExtensionAttribute]
public static T TryParse(string stringVal, T defaultValue);
    [ExtensionAttribute]
public static Nullable`1<decimal> TryParseAsdecimal(string decimalString, Nullable`1<decimal> defaultValue);
    [ExtensionAttribute]
public static Nullable`1<int> TryParseAsInt(string intString, Nullable`1<int> defaultValue);
    [ExtensionAttribute]
public static Nullable`1<DateTime> TryParseAsDateTime(string dateTimeString, Nullable`1<DateTime> defaultValue);
    [ExtensionAttribute]
public static bool IsDefault(Type type, object value);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetParentTypes(Type type, bool sort);
    [ExtensionAttribute]
public static TAttribute GetCustomAttribute(Type type, bool inherit);
    [ExtensionAttribute]
public static Attribute GetCustomAttribute(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static TAttribute GetAttributeRecursively(Type type, bool recurse);
    [ExtensionAttribute]
public static TAttribute[] GetAttributesRecursively(Type type, bool recurse);
    [ExtensionAttribute]
public static IEnumerable`1<Type> FindSubClassesOf(Type baseType, Assembly assembly);
    [ExtensionAttribute]
public static T ActivateEx(Type t);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetInterfaces(Type type, bool includeInherited);
    [ExtensionAttribute]
public static bool IsNotDefaultString(Type type, string propertyName, string value);
    [ExtensionAttribute]
public static void ToDataContractStream(Type type, object objectToSerialize, Stream streamToSerializeInto);
    [ExtensionAttribute]
public static string ToDataContractString(Type type, object objectToSerialize);
    [ExtensionAttribute]
public static object TestWCFSerialization(Type type, object message);
    [ExtensionAttribute]
public static string Serialize(Type valueType, object value, SerializationMethod& serializationMethod);
    [ExtensionAttribute]
public static object DeSerialize(Type valueType, string serializedValue, SerializationMethod serializationMethod);
    public static object ConvertType(object value, Type dependencyType);
    [ExtensionAttribute]
public static MethodInfo GetGenericMethod(Type objectType, string methodName, Type[] genericTypes);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetImmediateInterfaces(Type type);
    [ExtensionAttribute]
public static Type[] GetSubclasses(Type type, Type[] exclude);
    [ExtensionAttribute]
public static TreeNode`1<NodeTypeWrapper> GetSubclassesAndInterfaces(Type type, bool trimInterfaces, Type[] exclude);
    [ExtensionAttribute]
private static bool GetSubclassesAndInterfaces(TreeNode`1<NodeTypeWrapper> sourceNode, TreeNode`1<NodeTypeWrapper> rootNode, List`1& exclude, List`1& alreadyAdded, bool trimInterfaces);
    [ExtensionAttribute]
public static TreeNode`1[] GetInterfaceInheritence(Type type);
    [ExtensionAttribute]
public static string GetName(Type type, bool keepFullNames);
    [ExtensionAttribute]
public static ConstructorInfo GetConstructorWithMostArguments(Type type, BindingFlags bindingFlags);
    [CompilerGeneratedAttribute]
private static bool <EnsureAllPublicMethodsAreMarkedVirtual>b__0(MethodInfo mi);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Type> <GetParentTypes>b__5(Type x);
    [CompilerGeneratedAttribute]
private static ConstructorInfo <GetConstructorWithMostArguments>b__a(ConstructorInfo i1, ConstructorInfo i2);
}
public interface XAct.UI.ISelectableItem {
}
public interface XAct.UI.ISelectableItem`1 {
}
public interface XAct.UI.Views.IViewModeContext {
}
public interface XAct.UI.Views.IViewModeService {
    public IViewModeContext CurrentContext { get; }
    public abstract virtual IViewModeContext get_CurrentContext();
    public abstract virtual ViewMode GetViewMode(Type viewModel, string viewPropertyName, string tag);
    public abstract virtual ViewMode GetViewMode(string viewModelFullName, string viewPropertyName, string tag);
    public abstract virtual ViewMode GetViewMode(string viewModeCaseName, Type viewModel, string viewPropertyName, string tag);
    public abstract virtual ViewMode GetViewMode(string viewModeCaseName, string viewModelFullName, string viewPropertyName, string tag);
}
public enum XAct.UI.Views.ViewMode : Enum {
    public int value__;
    public static ViewMode Undefined;
    public static ViewMode Rule;
    public static ViewMode Skipped;
    public static ViewMode Hidden;
    public static ViewMode Display;
    public static ViewMode Disabled;
    public static ViewMode ReadOnly;
    public static ViewMode Editable;
}
[ExtensionAttribute]
public static class XAct.UpdateLogExtensions : object {
    [ExtensionAttribute]
public static bool IsValidEnvironment(DataStoreUpdateLog updateLog, string environmentIdentifier);
}
[ExtensionAttribute]
public static class XAct.UriExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static Dictionary`2<string, string> Parameters(Uri self);
    [CompilerGeneratedAttribute]
private static string <Parameters>b__0(string p);
    [CompilerGeneratedAttribute]
private static string <Parameters>b__1(string p);
}
public class XAct.Users.User : UserBase`1<User> {
}
[DataContractAttribute]
public abstract class XAct.Users.UserBase`1 : object {
    [DataMemberAttribute]
private ICollection`1<UserProperty> _properties;
    [DataMemberAttribute]
private ICollection`1<UserClaim> _claims;
    [DataMemberAttribute]
private ICollection`1<TUser> _delegates;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModifiedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletedBy>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public bool Enabled { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    public ICollection`1<UserProperty> Properties { get; }
    public ICollection`1<UserClaim> Claims { get; }
    public ICollection`1<TUser> AllowedDelegates { get; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public string CreatedBy { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    [DataMemberAttribute]
public string LastModifiedBy { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> DeletedOnUtc { get; public set; }
    [DataMemberAttribute]
public string DeletedBy { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    public virtual ICollection`1<UserProperty> get_Properties();
    public virtual ICollection`1<UserClaim> get_Claims();
    public virtual ICollection`1<TUser> get_AllowedDelegates();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_LastModifiedBy();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedBy(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_DeletedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_DeletedBy();
    [CompilerGeneratedAttribute]
public virtual void set_DeletedBy(string value);
}
[DataContractAttribute]
public class XAct.Users.UserClaim : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserFK>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializationMethod <SerializationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializedValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModifiedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastModifiedBy>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public Guid UserFK { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public string Authority { get; public set; }
    [DataMemberAttribute]
public SerializationMethod SerializationMethod { get; public set; }
    [DataMemberAttribute]
public string SerializedValueType { get; public set; }
    [DataMemberAttribute]
public string SerializedValue { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public string CreatedBy { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    [DataMemberAttribute]
public string LastModifiedBy { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserFK();
    [CompilerGeneratedAttribute]
public virtual void set_UserFK(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Authority();
    [CompilerGeneratedAttribute]
public virtual void set_Authority(string value);
    [CompilerGeneratedAttribute]
public virtual SerializationMethod get_SerializationMethod();
    [CompilerGeneratedAttribute]
public virtual void set_SerializationMethod(SerializationMethod value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValueType();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValueType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValue();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValue(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_LastModifiedBy();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedBy(string value);
}
[DataContractAttribute]
public class XAct.Users.UserProperty : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserFK>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializationMethod <SerializationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializedValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModifiedOnUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastModifiedBy>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public Byte[] Timestamp { get; public set; }
    [DataMemberAttribute]
public Guid UserFK { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public SerializationMethod SerializationMethod { get; public set; }
    [DataMemberAttribute]
public string SerializedValueType { get; public set; }
    [DataMemberAttribute]
public string SerializedValue { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedOnUtc { get; public set; }
    [DataMemberAttribute]
public string CreatedBy { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastModifiedOnUtc { get; public set; }
    [DataMemberAttribute]
public string LastModifiedBy { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Timestamp();
    [CompilerGeneratedAttribute]
public virtual void set_Timestamp(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserFK();
    [CompilerGeneratedAttribute]
public virtual void set_UserFK(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual SerializationMethod get_SerializationMethod();
    [CompilerGeneratedAttribute]
public virtual void set_SerializationMethod(SerializationMethod value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValueType();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValueType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SerializedValue();
    [CompilerGeneratedAttribute]
public virtual void set_SerializedValue(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_CreatedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_CreatedBy();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModifiedOnUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedOnUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_LastModifiedBy();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedBy(string value);
}
public static class XAct.Utils.Uri : object {
    public static string Combine(string uri1, string uri2);
}
public class XAct.ValidatedNotNullAttribute : Attribute {
}
public interface XAct.Validation.IValidationService`1 {
    public abstract virtual bool Validate(TData entityToValidate, IResponse`1<Message> response);
    public abstract virtual bool Validate(TData entityToValidate, IList`1<Message> responseMessages);
}
public abstract class XAct.WebThreadSpecificContextManagementServiceBase`1 : object {
    protected string _cacheKey;
    protected ITracingService _tracingService;
    protected IContextStateService _stateService;
    public TContext Current { get; }
    protected WebThreadSpecificContextManagementServiceBase`1(ITracingService tracingService, IContextStateService contextStateService);
    public sealed virtual TContext get_Current();
    protected virtual TContext EnsureThreadSpecificInstance();
    public virtual TContext Create();
    protected virtual TContext CreateNewSourceInstance();
}
public class XAct.WellKnownNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public WellKnownNameAttribute(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
}
public class XAct.WrappedObject : object {
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public object Item { get; private set; }
    public WrappedObject(object innerItem);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
}
[ExtensionAttribute]
public static class XAct.XDocumentExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<XElement, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static void UpdateOrCreate(XElement xElement, Queue`1<string> nodeNames, string value);
    [ExtensionAttribute]
public static T Deserialize(XDocument xDocument);
    [ExtensionAttribute]
public static XDocument SerializeAsXDocument(T value);
    [ExtensionAttribute]
public static void ForceOpenCloseTags(XDocument document);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> GetDescendentLeafNodes(XDocument xDocument);
    [ExtensionAttribute]
public static void ToStreamWithDeclaration(XDocument xDocument, Stream stream, Encoding encoding, bool closeStream);
    [ExtensionAttribute]
public static void ToStreamWithDeclaration(XDocument xDocument, Stream stream, XmlWriterSettings settings);
    [ExtensionAttribute]
public static string ToStringWithDeclaration(XDocument xDocument, Encoding encoding);
    [CompilerGeneratedAttribute]
private static bool <ForceOpenCloseTags>b__0(XElement xElement);
    [CompilerGeneratedAttribute]
private static bool <GetDescendentLeafNodes>b__2(XElement x);
}
[ExtensionAttribute]
public static class XAct.XElementExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<XElement, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [ExtensionAttribute]
public static bool GetDescendentValue(XElement xElement, string childName, String& result);
    [ExtensionAttribute]
public static bool GetDescendent(XElement xElement, string childName, XElement& childElement);
    [ExtensionAttribute]
public static T Deserialize(XElement xElement);
    [ExtensionAttribute]
public static XElement SerializeAsXElement(T value, string elementName);
    [ExtensionAttribute]
public static XElement SerializeAsXElement_InProgress(T value, string elementName);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> GetDescendentLeafNodes(XElement xElement);
    [ExtensionAttribute]
public static string GetAbsoluteXPath(XElement element);
    [ExtensionAttribute]
public static int IndexPosition(XElement element);
    [CompilerGeneratedAttribute]
private static bool <GetDescendentLeafNodes>b__1(XElement x);
    [CompilerGeneratedAttribute]
private static string <GetAbsoluteXPath>b__3(XElement e);
}
[ExtensionAttribute]
public static class XAct.XmlWriterExtensions : object {
    [ExtensionAttribute]
public static void Serialize(XmlWriter writer, object objectToSerialize);
}
public abstract class XSystem.Security.Cryptography.HashAlgorithm : object {
    protected internal Byte[] HashValue;
    protected int HashSizeValue;
    protected int State;
    private bool disposed;
    public bool CanTransformMultipleBlocks { get; }
    public bool CanReuseTransform { get; }
    public Byte[] Hash { get; }
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual bool get_CanReuseTransform();
    public void Clear();
    public Byte[] ComputeHash(Byte[] buffer);
    public Byte[] ComputeHash(Byte[] buffer, int offset, int count);
    public Byte[] ComputeHash(Stream inputStream);
    public static HashAlgorithm Create();
    public static HashAlgorithm Create(string hashName);
    public virtual Byte[] get_Hash();
    protected abstract virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected abstract virtual Byte[] HashFinal();
    public virtual int get_HashSize();
    public abstract virtual void Initialize();
    protected virtual void Dispose(bool disposing);
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public interface XSystem.Security.Cryptography.ICryptoTransform {
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public abstract virtual bool get_CanReuseTransform();
    public abstract virtual bool get_CanTransformMultipleBlocks();
    public abstract virtual int get_InputBlockSize();
    public abstract virtual int get_OutputBlockSize();
    public abstract virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public static class XSystem.Security.Cryptography.Locale : object {
    public static string GetText(string text);
}
public abstract class XSystem.Security.Cryptography.MD5 : HashAlgorithm {
    public static MD5 Create();
    public static MD5 Create(string algName);
}
public class XSystem.Security.Cryptography.MD5CryptoServiceProvider : MD5 {
    private static int BLOCK_SIZE_BYTES;
    private UInt32[] _H;
    private UInt32[] buff;
    private ulong count;
    private Byte[] _ProcessingBuffer;
    private int _ProcessingBufferCount;
    private static UInt32[] K;
    private static MD5CryptoServiceProvider();
    protected virtual void Finalize();
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    private void ProcessBlock(Byte[] inputBuffer, int inputOffset);
    private void ProcessFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    internal void AddLength(ulong length, Byte[] buffer, int position);
}
public abstract class XSystem.Security.Cryptography.SHA1 : HashAlgorithm {
    public static SHA1 Create();
    public static SHA1 Create(string hashName);
}
public class XSystem.Security.Cryptography.SHA1CryptoServiceProvider : SHA1 {
    private SHA1Internal sha;
    protected virtual void Finalize();
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
internal class XSystem.Security.Cryptography.SHA1Internal : object {
    private static int BLOCK_SIZE_BYTES;
    private UInt32[] _H;
    private ulong count;
    private Byte[] _ProcessingBuffer;
    private int _ProcessingBufferCount;
    private UInt32[] buff;
    public void HashCore(Byte[] rgb, int ibStart, int cbSize);
    public Byte[] HashFinal();
    public void Initialize();
    private void ProcessBlock(Byte[] inputBuffer, UInt32 inputOffset);
    private static void InitialiseBuff(UInt32[] buff, Byte[] input, UInt32 inputOffset);
    private static void FillBuff(UInt32[] buff);
    private void ProcessFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    internal void AddLength(ulong length, Byte[] buffer, int position);
}
public class XSystem.Security.Cryptography.SHA1Managed : SHA1 {
    private SHA1Internal sha;
    protected virtual void HashCore(Byte[] rgb, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public abstract class XSystem.Security.Cryptography.SHA256 : HashAlgorithm {
    public static SHA256 Create();
    public static SHA256 Create(string hashName);
}
public class XSystem.Security.Cryptography.SHA256Managed : SHA256 {
    private static int BLOCK_SIZE_BYTES;
    private UInt32[] _H;
    private ulong count;
    private Byte[] _ProcessingBuffer;
    private int _ProcessingBufferCount;
    private UInt32[] buff;
    protected virtual void HashCore(Byte[] rgb, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    private void ProcessBlock(Byte[] inputBuffer, int inputOffset);
    private void ProcessFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    internal void AddLength(ulong length, Byte[] buffer, int position);
}
public abstract class XSystem.Security.Cryptography.SHA512 : HashAlgorithm {
    public static SHA512 Create();
    public static SHA512 Create(string hashName);
}
public class XSystem.Security.Cryptography.SHA512Managed : SHA512 {
    private Byte[] xBuf;
    private int xBufOff;
    private ulong byteCount1;
    private ulong byteCount2;
    private ulong H1;
    private ulong H2;
    private ulong H3;
    private ulong H4;
    private ulong H5;
    private ulong H6;
    private ulong H7;
    private ulong H8;
    private UInt64[] W;
    private int wOff;
    private void Initialize(bool reuse);
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] rgb, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private void update(byte input);
    private void processWord(Byte[] input, int inOff);
    private void unpackWord(ulong word, Byte[] output, int outOff);
    private void adjustByteCounts();
    private void processLength(ulong lowW, ulong hiW);
    private void processBlock();
    private ulong rotateRight(ulong x, int n);
    private ulong Ch(ulong x, ulong y, ulong z);
    private ulong Maj(ulong x, ulong y, ulong z);
    private ulong Sum0(ulong x);
    private ulong Sum1(ulong x);
    private ulong Sigma0(ulong x);
    private ulong Sigma1(ulong x);
}
internal static class XSystem.Security.Cryptography.SHAConstants : object {
    public static UInt32[] K1;
    public static UInt64[] K2;
    private static SHAConstants();
}
