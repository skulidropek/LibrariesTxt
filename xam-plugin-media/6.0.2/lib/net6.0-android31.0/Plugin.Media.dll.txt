[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Plugin.Media.Abstractions.CameraDevice : Enum {
    public int value__;
    public static CameraDevice Rear;
    public static CameraDevice Front;
}
public interface Plugin.Media.Abstractions.IMedia {
    public bool IsCameraAvailable { get; }
    public bool IsTakePhotoSupported { get; }
    public bool IsPickPhotoSupported { get; }
    public bool IsTakeVideoSupported { get; }
    public bool IsPickVideoSupported { get; }
    public abstract virtual Task`1<bool> Initialize();
    public abstract virtual bool get_IsCameraAvailable();
    public abstract virtual bool get_IsTakePhotoSupported();
    public abstract virtual bool get_IsPickPhotoSupported();
    public abstract virtual bool get_IsTakeVideoSupported();
    public abstract virtual bool get_IsPickVideoSupported();
    public abstract virtual Task`1<MediaFile> PickPhotoAsync(PickMediaOptions options, CancellationToken token);
    public abstract virtual Task`1<List`1<MediaFile>> PickPhotosAsync(PickMediaOptions options, MultiPickerOptions pickerOptions, CancellationToken token);
    public abstract virtual Task`1<MediaFile> TakePhotoAsync(StoreCameraMediaOptions options, CancellationToken token);
    public abstract virtual Task`1<MediaFile> PickVideoAsync(CancellationToken token);
    public abstract virtual Task`1<MediaFile> TakeVideoAsync(StoreVideoOptions options, CancellationToken token);
}
public class Plugin.Media.Abstractions.Location : object {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Altitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Speed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public double Altitude { get; public set; }
    public double HorizontalAccuracy { get; public set; }
    public double Speed { get; public set; }
    public double Direction { get; public set; }
    public DateTime Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public double get_Altitude();
    [CompilerGeneratedAttribute]
public void set_Altitude(double value);
    [CompilerGeneratedAttribute]
public double get_HorizontalAccuracy();
    [CompilerGeneratedAttribute]
public void set_HorizontalAccuracy(double value);
    [CompilerGeneratedAttribute]
public double get_Speed();
    [CompilerGeneratedAttribute]
public void set_Speed(double value);
    [CompilerGeneratedAttribute]
public double get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(double value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
}
[ExtensionAttribute]
public static class Plugin.Media.Abstractions.MediaExtensions : object {
    [ExtensionAttribute]
public static void VerifyOptions(StoreMediaOptions self);
    [ExtensionAttribute]
public static string GetFilePath(StoreMediaOptions self, string rootPath);
    [ExtensionAttribute]
public static string GetUniqueFilepath(StoreMediaOptions self, string rootPath, Func`2<string, bool> checkExists);
}
public class Plugin.Media.Abstractions.MediaFile : object {
    private bool isDisposed;
    private Func`1<Stream> streamGetter;
    private Func`1<Stream> streamGetterForExternalStorage;
    private string originalFilename;
    private string path;
    private string albumPath;
    public string OriginalFilename { get; }
    public string Path { get; }
    public string AlbumPath { get; public set; }
    public MediaFile(string path, Func`1<Stream> streamGetter, Func`1<Stream> streamGetterForExternalStorage, string albumPath, string originalFilename);
    public string get_OriginalFilename();
    public string get_Path();
    public string get_AlbumPath();
    public void set_AlbumPath(string value);
    public Stream GetStream();
    public Stream GetStreamWithImageRotatedForExternalStorage();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Plugin.Media.Abstractions.MediaFileNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; private set; }
    public MediaFileNotFoundException(string path);
    public MediaFileNotFoundException(string path, Exception innerException);
    protected MediaFileNotFoundException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
public class Plugin.Media.Abstractions.MediaPermissionException : Exception {
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    public String[] Permissions { get; }
    public string Message { get; }
    public MediaPermissionException(String[] permissions);
    [CompilerGeneratedAttribute]
public String[] get_Permissions();
    public virtual string get_Message();
}
public enum Plugin.Media.Abstractions.MediaPickerModalPresentationStyle : Enum {
    public int value__;
    public static MediaPickerModalPresentationStyle FullScreen;
    public static MediaPickerModalPresentationStyle OverFullScreen;
}
public enum Plugin.Media.Abstractions.MultiPickerBarStyle : Enum {
    public int value__;
    public static MultiPickerBarStyle Default;
    public static MultiPickerBarStyle Black;
    public static MultiPickerBarStyle BlackOpaque;
    public static MultiPickerBarStyle BlackTranslucent;
}
public class Plugin.Media.Abstractions.MultiPickerOptions : object {
    [CompilerGeneratedAttribute]
private int <MaximumImagesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiPickerBarStyle <BarStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathToOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlbumSelectTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhotoSelectTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DoneButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoadingTitle>k__BackingField;
    public int MaximumImagesCount { get; public set; }
    public MultiPickerBarStyle BarStyle { get; public set; }
    public string PathToOverlay { get; public set; }
    public string AlbumSelectTitle { get; public set; }
    public string PhotoSelectTitle { get; public set; }
    public string BackButtonTitle { get; public set; }
    public string DoneButtonTitle { get; public set; }
    public string LoadingTitle { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaximumImagesCount();
    [CompilerGeneratedAttribute]
public void set_MaximumImagesCount(int value);
    [CompilerGeneratedAttribute]
public MultiPickerBarStyle get_BarStyle();
    [CompilerGeneratedAttribute]
public void set_BarStyle(MultiPickerBarStyle value);
    [CompilerGeneratedAttribute]
public string get_PathToOverlay();
    [CompilerGeneratedAttribute]
public void set_PathToOverlay(string value);
    [CompilerGeneratedAttribute]
public string get_AlbumSelectTitle();
    [CompilerGeneratedAttribute]
public void set_AlbumSelectTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PhotoSelectTitle();
    [CompilerGeneratedAttribute]
public void set_PhotoSelectTitle(string value);
    [CompilerGeneratedAttribute]
public string get_BackButtonTitle();
    [CompilerGeneratedAttribute]
public void set_BackButtonTitle(string value);
    [CompilerGeneratedAttribute]
public string get_DoneButtonTitle();
    [CompilerGeneratedAttribute]
public void set_DoneButtonTitle(string value);
    [CompilerGeneratedAttribute]
public string get_LoadingTitle();
    [CompilerGeneratedAttribute]
public void set_LoadingTitle(string value);
}
public enum Plugin.Media.Abstractions.PhotoSize : Enum {
    public int value__;
    public static PhotoSize Small;
    public static PhotoSize Medium;
    public static PhotoSize Large;
    public static PhotoSize Full;
    public static PhotoSize Custom;
    public static PhotoSize MaxWidthHeight;
}
public class Plugin.Media.Abstractions.PickMediaOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxWidthHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private PhotoSize <PhotoSize>k__BackingField;
    private int customPhotoSize;
    private int quality;
    private bool rotateImage;
    private bool saveMetaData;
    [CompilerGeneratedAttribute]
private MediaPickerModalPresentationStyle <ModalPresentationStyle>k__BackingField;
    public Nullable`1<int> MaxWidthHeight { get; public set; }
    public PhotoSize PhotoSize { get; public set; }
    public int CustomPhotoSize { get; public set; }
    public int CompressionQuality { get; public set; }
    public bool RotateImage { get; public set; }
    public bool SaveMetaData { get; public set; }
    public MediaPickerModalPresentationStyle ModalPresentationStyle { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxWidthHeight();
    [CompilerGeneratedAttribute]
public void set_MaxWidthHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public PhotoSize get_PhotoSize();
    [CompilerGeneratedAttribute]
public void set_PhotoSize(PhotoSize value);
    public int get_CustomPhotoSize();
    public void set_CustomPhotoSize(int value);
    public int get_CompressionQuality();
    public void set_CompressionQuality(int value);
    public bool get_RotateImage();
    public void set_RotateImage(bool value);
    public bool get_SaveMetaData();
    public void set_SaveMetaData(bool value);
    [CompilerGeneratedAttribute]
public MediaPickerModalPresentationStyle get_ModalPresentationStyle();
    [CompilerGeneratedAttribute]
public void set_ModalPresentationStyle(MediaPickerModalPresentationStyle value);
}
public class Plugin.Media.Abstractions.StoreCameraMediaOptions : StoreMediaOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowCropping>k__BackingField;
    [CompilerGeneratedAttribute]
private CameraDevice <DefaultCamera>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxWidthHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<object> <OverlayViewProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveToAlbum>k__BackingField;
    [CompilerGeneratedAttribute]
private PhotoSize <PhotoSize>k__BackingField;
    private int customPhotoSize;
    private int quality;
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    private bool rotateImage;
    private bool saveMetaData;
    [CompilerGeneratedAttribute]
private MediaPickerModalPresentationStyle <ModalPresentationStyle>k__BackingField;
    public Nullable`1<bool> AllowCropping { get; public set; }
    public CameraDevice DefaultCamera { get; public set; }
    public Nullable`1<int> MaxWidthHeight { get; public set; }
    public Func`1<object> OverlayViewProvider { get; public set; }
    public bool SaveToAlbum { get; public set; }
    public PhotoSize PhotoSize { get; public set; }
    public int CustomPhotoSize { get; public set; }
    public int CompressionQuality { get; public set; }
    public Location Location { get; public set; }
    public bool RotateImage { get; public set; }
    public bool SaveMetaData { get; public set; }
    public MediaPickerModalPresentationStyle ModalPresentationStyle { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowCropping();
    [CompilerGeneratedAttribute]
public void set_AllowCropping(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public CameraDevice get_DefaultCamera();
    [CompilerGeneratedAttribute]
public void set_DefaultCamera(CameraDevice value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxWidthHeight();
    [CompilerGeneratedAttribute]
public void set_MaxWidthHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<object> get_OverlayViewProvider();
    [CompilerGeneratedAttribute]
public void set_OverlayViewProvider(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_SaveToAlbum();
    [CompilerGeneratedAttribute]
public void set_SaveToAlbum(bool value);
    [CompilerGeneratedAttribute]
public PhotoSize get_PhotoSize();
    [CompilerGeneratedAttribute]
public void set_PhotoSize(PhotoSize value);
    public int get_CustomPhotoSize();
    public void set_CustomPhotoSize(int value);
    public int get_CompressionQuality();
    public void set_CompressionQuality(int value);
    [CompilerGeneratedAttribute]
public Location get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(Location value);
    public bool get_RotateImage();
    public void set_RotateImage(bool value);
    public bool get_SaveMetaData();
    public void set_SaveMetaData(bool value);
    [CompilerGeneratedAttribute]
public MediaPickerModalPresentationStyle get_ModalPresentationStyle();
    [CompilerGeneratedAttribute]
public void set_ModalPresentationStyle(MediaPickerModalPresentationStyle value);
}
public class Plugin.Media.Abstractions.StoreMediaOptions : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Directory { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Plugin.Media.Abstractions.StorePickerMediaOptions : StoreMediaOptions {
    [CompilerGeneratedAttribute]
private bool <MultiPicker>k__BackingField;
    public bool MultiPicker { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_MultiPicker();
    [CompilerGeneratedAttribute]
public void set_MultiPicker(bool value);
}
public class Plugin.Media.Abstractions.StoreVideoOptions : StoreCameraMediaOptions {
    [CompilerGeneratedAttribute]
private TimeSpan <DesiredLength>k__BackingField;
    [CompilerGeneratedAttribute]
private VideoQuality <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DesiredSize>k__BackingField;
    public TimeSpan DesiredLength { get; public set; }
    public VideoQuality Quality { get; public set; }
    public long DesiredSize { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_DesiredLength();
    [CompilerGeneratedAttribute]
public void set_DesiredLength(TimeSpan value);
    [CompilerGeneratedAttribute]
public VideoQuality get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(VideoQuality value);
    [CompilerGeneratedAttribute]
public long get_DesiredSize();
    [CompilerGeneratedAttribute]
public void set_DesiredSize(long value);
}
public enum Plugin.Media.Abstractions.VideoQuality : Enum {
    public int value__;
    public static VideoQuality Low;
    public static VideoQuality Medium;
    public static VideoQuality High;
}
public class Plugin.Media.CrossMedia : object {
    private static Lazy`1<IMedia> implementation;
    public static bool FlagsSet;
    private static IReadOnlyList`1<string> flags;
    public static bool IsSupported { get; }
    public static IMedia Current { get; }
    public static IReadOnlyList`1<string> Flags { get; }
    private static CrossMedia();
    public static bool get_IsSupported();
    public static IMedia get_Current();
    private static IMedia CreateMedia();
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    internal static Exception NotImplementedInReferenceAssembly();
}
internal static class Plugin.Media.FeatureFlags : object {
}
[ExtensionAttribute]
internal static class Plugin.Media.IntentExtraExtensions : object {
    private static string extraFrontPre25;
    private static string extraFrontPost25;
    private static string extraBackPost25;
    private static string extraUserFront;
    [ExtensionAttribute]
public static void UseFrontCamera(Intent intent);
    [ExtensionAttribute]
public static void UseBackCamera(Intent intent);
}
[ExtensionAttribute]
[PreserveAttribute]
public static class Plugin.Media.MediaFileExtensions : object {
    [ExtensionAttribute]
public static Task`1<MediaFile> GetMediaFileExtraAsync(Intent self, Context context);
}
[PreserveAttribute]
public class Plugin.Media.MediaImplementation : object {
    private static string pixelXDimens;
    private static string pixelYDimens;
    [CompilerGeneratedAttribute]
private static EventHandler CancelRequested;
    [CompilerGeneratedAttribute]
private bool <IsCameraAvailable>k__BackingField;
    private Context context;
    private int requestId;
    internal static TaskCompletionSource`1<MediaFile> CompletionSource;
    internal static TaskCompletionSource`1<List`1<MediaFile>> CompletionSourceMulti;
    private IList`1<string> requestedPermissions;
    private static string illegalCharacters;
    public bool IsCameraAvailable { get; }
    public bool IsTakePhotoSupported { get; }
    public bool IsPickPhotoSupported { get; }
    public bool IsTakeVideoSupported { get; }
    public bool IsPickVideoSupported { get; }
    [CompilerGeneratedAttribute]
internal static void add_CancelRequested(EventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_CancelRequested(EventHandler value);
    public sealed virtual Task`1<bool> Initialize();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCameraAvailable();
    public sealed virtual bool get_IsTakePhotoSupported();
    public sealed virtual bool get_IsPickPhotoSupported();
    public sealed virtual bool get_IsTakeVideoSupported();
    public sealed virtual bool get_IsPickVideoSupported();
    private bool IsValidExif(ExifInterface exif);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<PickPhotoAsync>d__19")]
public sealed virtual Task`1<MediaFile> PickPhotoAsync(PickMediaOptions options, CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<PickPhotosAsync>d__20")]
public sealed virtual Task`1<List`1<MediaFile>> PickPhotosAsync(PickMediaOptions options, MultiPickerOptions pickerOptions, CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<FixOrientationAndResize>d__21")]
private Task FixOrientationAndResize(PickMediaOptions options, MediaFile media);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<TakePhotoAsync>d__22")]
public sealed virtual Task`1<MediaFile> TakePhotoAsync(StoreCameraMediaOptions options, CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<PickVideoAsync>d__23")]
public sealed virtual Task`1<MediaFile> PickVideoAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<TakeVideoAsync>d__24")]
public sealed virtual Task`1<MediaFile> TakeVideoAsync(StoreVideoOptions options, CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<RequestCameraPermissions>d__29")]
private Task`1<bool> RequestCameraPermissions();
    private bool HasPermissionInManifest(string permission);
    private void VerifyOptions(StoreMediaOptions options);
    private Intent CreateMediaIntent(int id, string type, string action, StoreMediaOptions options, bool tasked);
    private int GetRequestId();
    private Task`1<MediaFile> TakeMediaAsync(string type, string action, StoreMediaOptions options, CancellationToken token);
    private Task`1<List`1<MediaFile>> TakeMediasAsync(string type, string action, StoreMediaOptions options, CancellationToken token);
    public Task`1<bool> FixOrientationAndResizeAsync(string filePath, PickMediaOptions mediaOptions, ExifInterface exif);
    public Task`1<bool> FixOrientationAndResizeAsync(string filePath, StoreCameraMediaOptions mediaOptions, ExifInterface exif);
    private int CalculateInSampleSize(Options options, int reqWidth, int reqHeight);
    public Task`1<bool> ResizeAsync(string filePath, PickMediaOptions mediaOptions, ExifInterface exif);
    public Task`1<bool> ResizeAsync(string filePath, StoreCameraMediaOptions mediaOptions, ExifInterface exif);
    private void SetMissingMetadata(ExifInterface exif, Location location);
    private string CoordinateToRational(double coord);
    private static int GetRotation(ExifInterface exif);
}
internal class Plugin.Media.MediaPickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MediaFile> <Media>k__BackingField;
    public int RequestId { get; private set; }
    public bool IsCanceled { get; private set; }
    public Exception Error { get; private set; }
    public List`1<MediaFile> Media { get; private set; }
    public MediaPickedEventArgs(int id, Exception error);
    public MediaPickedEventArgs(int id, bool isCanceled, MediaFile media);
    public MediaPickedEventArgs(int id, bool isCanceled, List`1<MediaFile> medias);
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
private void set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public List`1<MediaFile> get_Media();
    [CompilerGeneratedAttribute]
private void set_Media(List`1<MediaFile> value);
    public Task`1<MediaFile> ToTask();
}
[ActivityAttribute]
public class Plugin.Media.MediaPickerActivity : Activity {
    internal static string ExtraPath;
    internal static string ExtraLocation;
    internal static string ExtraType;
    internal static string ExtraId;
    internal static string ExtraAction;
    internal static string ExtraTasked;
    internal static string ExtraMultiSelect;
    internal static string ExtraSaveToAlbum;
    internal static string ExtraFront;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MediaPickedEventArgs> MediaPicked;
    private int id;
    private int front;
    private string title;
    private string description;
    private string type;
    private Uri path;
    private bool isPhoto;
    private bool saveToAlbum;
    private string action;
    private bool multiSelect;
    private int seconds;
    private long size;
    private VideoQuality quality;
    private bool tasked;
    private static string huaweiManufacturer;
    private bool completed;
    [CompilerGeneratedAttribute]
internal static void add_MediaPicked(EventHandler`1<MediaPickedEventArgs> value);
    [CompilerGeneratedAttribute]
internal static void remove_MediaPicked(EventHandler`1<MediaPickedEventArgs> value);
    protected virtual void OnSaveInstanceState(Bundle outState);
    protected virtual void OnCreate(Bundle savedInstanceState);
    private void CancellationRequested(object sender, EventArgs e);
    private void Touch();
    private void DeleteOutputFile();
    private void GrantUriPermissionsForIntent(Intent intent, Uri uri);
    internal static Task`1<MediaPickedEventArgs> GetMediaFileAsync(Context context, int requestCode, string action, bool isPhoto, Uri& path, Uri data, bool saveToAlbum);
    [AsyncStateMachineAttribute("Plugin.Media.MediaPickerActivity/<OnActivityResult>d__35")]
protected virtual void OnActivityResult(int requestCode, Result resultCode, Intent data);
    private static Task`1<bool> TryMoveFileAsync(Context context, Uri url, Uri path, bool isPhoto, bool saveToAlbum);
    private static int GetVideoQuality(VideoQuality videoQuality);
    private static string GetUniquePath(string folder, string name, bool isPhoto);
    public static Uri GetOutputMediaFile(Context context, string subdir, string name, bool isPhoto, bool saveToAlbum);
    internal static Task`1<Tuple`3<string, string, bool>> GetFileForUriAsync(Context context, Uri uri, bool isPhoto, bool saveToAlbum);
    private static string GetLocalPath(Uri uri);
    private static Task`1<T> TaskFromResult(T result);
    private static void OnMediaPicked(MediaPickedEventArgs e);
    public sealed virtual void OnScanCompleted(string path, Uri uri);
    protected virtual void OnDestroy();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(int requestCode, Result resultCode, Intent data);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "12.3.99.109")]
public class Plugin.Media.Resource : object {
    private static Resource();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
