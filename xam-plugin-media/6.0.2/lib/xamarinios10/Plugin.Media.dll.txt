[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Plugin.Media.Abstractions.CameraDevice : Enum {
    public int value__;
    public static CameraDevice Rear;
    public static CameraDevice Front;
}
public interface Plugin.Media.Abstractions.IMedia {
    public bool IsCameraAvailable { get; }
    public bool IsTakePhotoSupported { get; }
    public bool IsPickPhotoSupported { get; }
    public bool IsTakeVideoSupported { get; }
    public bool IsPickVideoSupported { get; }
    public abstract virtual Task`1<bool> Initialize();
    public abstract virtual bool get_IsCameraAvailable();
    public abstract virtual bool get_IsTakePhotoSupported();
    public abstract virtual bool get_IsPickPhotoSupported();
    public abstract virtual bool get_IsTakeVideoSupported();
    public abstract virtual bool get_IsPickVideoSupported();
    public abstract virtual Task`1<MediaFile> PickPhotoAsync(PickMediaOptions options, CancellationToken token);
    public abstract virtual Task`1<List`1<MediaFile>> PickPhotosAsync(PickMediaOptions options, MultiPickerOptions pickerOptions, CancellationToken token);
    public abstract virtual Task`1<MediaFile> TakePhotoAsync(StoreCameraMediaOptions options, CancellationToken token);
    public abstract virtual Task`1<MediaFile> PickVideoAsync(CancellationToken token);
    public abstract virtual Task`1<MediaFile> TakeVideoAsync(StoreVideoOptions options, CancellationToken token);
}
public class Plugin.Media.Abstractions.Location : object {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Altitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Speed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public double Altitude { get; public set; }
    public double HorizontalAccuracy { get; public set; }
    public double Speed { get; public set; }
    public double Direction { get; public set; }
    public DateTime Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public double get_Altitude();
    [CompilerGeneratedAttribute]
public void set_Altitude(double value);
    [CompilerGeneratedAttribute]
public double get_HorizontalAccuracy();
    [CompilerGeneratedAttribute]
public void set_HorizontalAccuracy(double value);
    [CompilerGeneratedAttribute]
public double get_Speed();
    [CompilerGeneratedAttribute]
public void set_Speed(double value);
    [CompilerGeneratedAttribute]
public double get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(double value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
}
[ExtensionAttribute]
public static class Plugin.Media.Abstractions.MediaExtensions : object {
    [ExtensionAttribute]
public static void VerifyOptions(StoreMediaOptions self);
    [ExtensionAttribute]
public static string GetFilePath(StoreMediaOptions self, string rootPath);
    [ExtensionAttribute]
public static string GetUniqueFilepath(StoreMediaOptions self, string rootPath, Func`2<string, bool> checkExists);
}
public class Plugin.Media.Abstractions.MediaFile : object {
    private bool isDisposed;
    private Func`1<Stream> streamGetter;
    private Func`1<Stream> streamGetterForExternalStorage;
    private string originalFilename;
    private string path;
    private string albumPath;
    public string OriginalFilename { get; }
    public string Path { get; }
    public string AlbumPath { get; public set; }
    public MediaFile(string path, Func`1<Stream> streamGetter, Func`1<Stream> streamGetterForExternalStorage, string albumPath, string originalFilename);
    public string get_OriginalFilename();
    public string get_Path();
    public string get_AlbumPath();
    public void set_AlbumPath(string value);
    public Stream GetStream();
    public Stream GetStreamWithImageRotatedForExternalStorage();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Plugin.Media.Abstractions.MediaFileNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; private set; }
    public MediaFileNotFoundException(string path);
    public MediaFileNotFoundException(string path, Exception innerException);
    protected MediaFileNotFoundException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
public class Plugin.Media.Abstractions.MediaPermissionException : Exception {
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    public String[] Permissions { get; }
    public string Message { get; }
    public MediaPermissionException(String[] permissions);
    [CompilerGeneratedAttribute]
public String[] get_Permissions();
    public virtual string get_Message();
}
public enum Plugin.Media.Abstractions.MediaPickerModalPresentationStyle : Enum {
    public int value__;
    public static MediaPickerModalPresentationStyle FullScreen;
    public static MediaPickerModalPresentationStyle OverFullScreen;
}
public enum Plugin.Media.Abstractions.MultiPickerBarStyle : Enum {
    public int value__;
    public static MultiPickerBarStyle Default;
    public static MultiPickerBarStyle Black;
    public static MultiPickerBarStyle BlackOpaque;
    public static MultiPickerBarStyle BlackTranslucent;
}
public class Plugin.Media.Abstractions.MultiPickerOptions : object {
    [CompilerGeneratedAttribute]
private int <MaximumImagesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiPickerBarStyle <BarStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathToOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlbumSelectTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhotoSelectTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DoneButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoadingTitle>k__BackingField;
    public int MaximumImagesCount { get; public set; }
    public MultiPickerBarStyle BarStyle { get; public set; }
    public string PathToOverlay { get; public set; }
    public string AlbumSelectTitle { get; public set; }
    public string PhotoSelectTitle { get; public set; }
    public string BackButtonTitle { get; public set; }
    public string DoneButtonTitle { get; public set; }
    public string LoadingTitle { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaximumImagesCount();
    [CompilerGeneratedAttribute]
public void set_MaximumImagesCount(int value);
    [CompilerGeneratedAttribute]
public MultiPickerBarStyle get_BarStyle();
    [CompilerGeneratedAttribute]
public void set_BarStyle(MultiPickerBarStyle value);
    [CompilerGeneratedAttribute]
public string get_PathToOverlay();
    [CompilerGeneratedAttribute]
public void set_PathToOverlay(string value);
    [CompilerGeneratedAttribute]
public string get_AlbumSelectTitle();
    [CompilerGeneratedAttribute]
public void set_AlbumSelectTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PhotoSelectTitle();
    [CompilerGeneratedAttribute]
public void set_PhotoSelectTitle(string value);
    [CompilerGeneratedAttribute]
public string get_BackButtonTitle();
    [CompilerGeneratedAttribute]
public void set_BackButtonTitle(string value);
    [CompilerGeneratedAttribute]
public string get_DoneButtonTitle();
    [CompilerGeneratedAttribute]
public void set_DoneButtonTitle(string value);
    [CompilerGeneratedAttribute]
public string get_LoadingTitle();
    [CompilerGeneratedAttribute]
public void set_LoadingTitle(string value);
}
public enum Plugin.Media.Abstractions.PhotoSize : Enum {
    public int value__;
    public static PhotoSize Small;
    public static PhotoSize Medium;
    public static PhotoSize Large;
    public static PhotoSize Full;
    public static PhotoSize Custom;
    public static PhotoSize MaxWidthHeight;
}
public class Plugin.Media.Abstractions.PickMediaOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxWidthHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private PhotoSize <PhotoSize>k__BackingField;
    private int customPhotoSize;
    private int quality;
    private bool rotateImage;
    private bool saveMetaData;
    [CompilerGeneratedAttribute]
private MediaPickerModalPresentationStyle <ModalPresentationStyle>k__BackingField;
    public Nullable`1<int> MaxWidthHeight { get; public set; }
    public PhotoSize PhotoSize { get; public set; }
    public int CustomPhotoSize { get; public set; }
    public int CompressionQuality { get; public set; }
    public bool RotateImage { get; public set; }
    public bool SaveMetaData { get; public set; }
    public MediaPickerModalPresentationStyle ModalPresentationStyle { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxWidthHeight();
    [CompilerGeneratedAttribute]
public void set_MaxWidthHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public PhotoSize get_PhotoSize();
    [CompilerGeneratedAttribute]
public void set_PhotoSize(PhotoSize value);
    public int get_CustomPhotoSize();
    public void set_CustomPhotoSize(int value);
    public int get_CompressionQuality();
    public void set_CompressionQuality(int value);
    public bool get_RotateImage();
    public void set_RotateImage(bool value);
    public bool get_SaveMetaData();
    public void set_SaveMetaData(bool value);
    [CompilerGeneratedAttribute]
public MediaPickerModalPresentationStyle get_ModalPresentationStyle();
    [CompilerGeneratedAttribute]
public void set_ModalPresentationStyle(MediaPickerModalPresentationStyle value);
}
public class Plugin.Media.Abstractions.StoreCameraMediaOptions : StoreMediaOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowCropping>k__BackingField;
    [CompilerGeneratedAttribute]
private CameraDevice <DefaultCamera>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxWidthHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<object> <OverlayViewProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveToAlbum>k__BackingField;
    [CompilerGeneratedAttribute]
private PhotoSize <PhotoSize>k__BackingField;
    private int customPhotoSize;
    private int quality;
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    private bool rotateImage;
    private bool saveMetaData;
    [CompilerGeneratedAttribute]
private MediaPickerModalPresentationStyle <ModalPresentationStyle>k__BackingField;
    public Nullable`1<bool> AllowCropping { get; public set; }
    public CameraDevice DefaultCamera { get; public set; }
    public Nullable`1<int> MaxWidthHeight { get; public set; }
    public Func`1<object> OverlayViewProvider { get; public set; }
    public bool SaveToAlbum { get; public set; }
    public PhotoSize PhotoSize { get; public set; }
    public int CustomPhotoSize { get; public set; }
    public int CompressionQuality { get; public set; }
    public Location Location { get; public set; }
    public bool RotateImage { get; public set; }
    public bool SaveMetaData { get; public set; }
    public MediaPickerModalPresentationStyle ModalPresentationStyle { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowCropping();
    [CompilerGeneratedAttribute]
public void set_AllowCropping(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public CameraDevice get_DefaultCamera();
    [CompilerGeneratedAttribute]
public void set_DefaultCamera(CameraDevice value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxWidthHeight();
    [CompilerGeneratedAttribute]
public void set_MaxWidthHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<object> get_OverlayViewProvider();
    [CompilerGeneratedAttribute]
public void set_OverlayViewProvider(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_SaveToAlbum();
    [CompilerGeneratedAttribute]
public void set_SaveToAlbum(bool value);
    [CompilerGeneratedAttribute]
public PhotoSize get_PhotoSize();
    [CompilerGeneratedAttribute]
public void set_PhotoSize(PhotoSize value);
    public int get_CustomPhotoSize();
    public void set_CustomPhotoSize(int value);
    public int get_CompressionQuality();
    public void set_CompressionQuality(int value);
    [CompilerGeneratedAttribute]
public Location get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(Location value);
    public bool get_RotateImage();
    public void set_RotateImage(bool value);
    public bool get_SaveMetaData();
    public void set_SaveMetaData(bool value);
    [CompilerGeneratedAttribute]
public MediaPickerModalPresentationStyle get_ModalPresentationStyle();
    [CompilerGeneratedAttribute]
public void set_ModalPresentationStyle(MediaPickerModalPresentationStyle value);
}
public class Plugin.Media.Abstractions.StoreMediaOptions : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Directory { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Plugin.Media.Abstractions.StorePickerMediaOptions : StoreMediaOptions {
    [CompilerGeneratedAttribute]
private bool <MultiPicker>k__BackingField;
    public bool MultiPicker { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_MultiPicker();
    [CompilerGeneratedAttribute]
public void set_MultiPicker(bool value);
}
public class Plugin.Media.Abstractions.StoreVideoOptions : StoreCameraMediaOptions {
    [CompilerGeneratedAttribute]
private TimeSpan <DesiredLength>k__BackingField;
    [CompilerGeneratedAttribute]
private VideoQuality <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DesiredSize>k__BackingField;
    public TimeSpan DesiredLength { get; public set; }
    public VideoQuality Quality { get; public set; }
    public long DesiredSize { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_DesiredLength();
    [CompilerGeneratedAttribute]
public void set_DesiredLength(TimeSpan value);
    [CompilerGeneratedAttribute]
public VideoQuality get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(VideoQuality value);
    [CompilerGeneratedAttribute]
public long get_DesiredSize();
    [CompilerGeneratedAttribute]
public void set_DesiredSize(long value);
}
public enum Plugin.Media.Abstractions.VideoQuality : Enum {
    public int value__;
    public static VideoQuality Low;
    public static VideoQuality Medium;
    public static VideoQuality High;
}
public class Plugin.Media.AssetResult : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UIImage <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Name { get; public set; }
    public UIImage Image { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public UIImage get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(UIImage value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public enum Plugin.Media.CheckMarkStyle : Enum {
    public int value__;
    public static CheckMarkStyle OpenCircle;
    public static CheckMarkStyle GrayedOut;
}
public class Plugin.Media.CheckMarkView : UIView {
    private bool _checked;
    private CheckMarkStyle _checkMarkStyle;
    public bool Checked { get; public set; }
    public CheckMarkStyle CheckMarkStyle { get; public set; }
    public bool get_Checked();
    public void set_Checked(bool value);
    public CheckMarkStyle get_CheckMarkStyle();
    public void set_CheckMarkStyle(CheckMarkStyle value);
    public virtual void Draw(CGRect rect);
    private void DrawRectChecked(CGRect rect);
    private void DrawRectGrayedOut(CGRect rect);
    private void DrawRectOpenCircle(CGRect rect);
}
public class Plugin.Media.CrossMedia : object {
    private static Lazy`1<IMedia> implementation;
    public static bool FlagsSet;
    private static IReadOnlyList`1<string> flags;
    public static bool IsSupported { get; }
    public static IMedia Current { get; }
    public static IReadOnlyList`1<string> Flags { get; }
    private static CrossMedia();
    public static bool get_IsSupported();
    public static IMedia get_Current();
    private static IMedia CreateMedia();
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    internal static Exception NotImplementedInReferenceAssembly();
}
public class Plugin.Media.ELCImagePickerViewController : UINavigationController {
    [CompilerGeneratedAttribute]
private int <MaximumImagesCount>k__BackingField;
    private StoreCameraMediaOptions options;
    private TaskCompletionSource`1<List`1<MediaFile>> taskCompletionSource;
    public int MaximumImagesCount { get; public set; }
    public Task`1<List`1<MediaFile>> Completion { get; }
    private ELCImagePickerViewController(UIViewController rootController, StoreCameraMediaOptions options);
    [CompilerGeneratedAttribute]
public int get_MaximumImagesCount();
    [CompilerGeneratedAttribute]
public void set_MaximumImagesCount(int value);
    public Task`1<List`1<MediaFile>> get_Completion();
    public static ELCImagePickerViewController Create(StoreCameraMediaOptions options, int maxImages, string selectAlbumTitle, string pickPhotosTitle, string backBattonTitle, string pickPhotoTitle, string doneButtonTitle, string loadingtitle, string pathToOverlay);
    private static string AssetTitle(int maximumImages, string singularTitle, string pluralTitle);
    public virtual void ViewWillDisappear(bool animated);
    public static ELCImagePickerViewController Create(StoreCameraMediaOptions options, MultiPickerOptions pickerOptions);
    private void SelectedMediaFiles(List`1<MediaFile> mediaFiles);
    private MediaFile GetPictureMediaFile(ALAsset asset, long index);
    private void CancelledPicker();
    private bool ShouldSelectAsset(ALAsset asset, int previousCount);
}
internal static class Plugin.Media.FeatureFlags : object {
}
public class Plugin.Media.MediaImplementation : object {
    [CompilerGeneratedAttribute]
private static UIStatusBarStyle <StatusBarStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCameraAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTakePhotoSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPickPhotoSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTakeVideoSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPickVideoSupported>k__BackingField;
    private UIPopoverController popover;
    private UIImagePickerControllerDelegate pickerDelegate;
    public static string TypeImage;
    public static string TypeMovie;
    private static string cameraDescription;
    private static string photoDescription;
    private static string photoAddDescription;
    private static string microphoneDescription;
    public static UIStatusBarStyle StatusBarStyle { get; public set; }
    public bool IsCameraAvailable { get; }
    public bool IsTakePhotoSupported { get; }
    public bool IsPickPhotoSupported { get; }
    public bool IsTakeVideoSupported { get; }
    public bool IsPickVideoSupported { get; }
    [CompilerGeneratedAttribute]
public static UIStatusBarStyle get_StatusBarStyle();
    [CompilerGeneratedAttribute]
public static void set_StatusBarStyle(UIStatusBarStyle value);
    public sealed virtual Task`1<bool> Initialize();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCameraAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTakePhotoSupported();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPickPhotoSupported();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTakeVideoSupported();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPickVideoSupported();
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<PickPhotoAsync>d__21")]
public sealed virtual Task`1<MediaFile> PickPhotoAsync(PickMediaOptions options, CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<PickPhotosAsync>d__22")]
public sealed virtual Task`1<List`1<MediaFile>> PickPhotosAsync(PickMediaOptions options, MultiPickerOptions pickerOptions, CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<TakePhotoAsync>d__23")]
public sealed virtual Task`1<MediaFile> TakePhotoAsync(StoreCameraMediaOptions options, CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<PickVideoAsync>d__24")]
public sealed virtual Task`1<MediaFile> PickVideoAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<TakeVideoAsync>d__25")]
public sealed virtual Task`1<MediaFile> TakeVideoAsync(StoreVideoOptions options, CancellationToken token);
    private void VerifyOptions(StoreMediaOptions options);
    private void VerifyCameraOptions(StoreCameraMediaOptions options);
    private static MediaPickerController SetupController(MediaPickerDelegate mpDelegate, UIImagePickerControllerSourceType sourceType, string mediaType, StoreCameraMediaOptions options);
    private Task`1<MediaFile> GetMediaAsync(UIImagePickerControllerSourceType sourceType, string mediaType, StoreCameraMediaOptions options, CancellationToken token);
    private Task`1<List`1<MediaFile>> GetMediasAsync(UIImagePickerControllerSourceType sourceType, string mediaType, StoreCameraMediaOptions options, MultiPickerOptions pickerOptions, CancellationToken token);
    private static void ResizeAndCompressImage(StoreCameraMediaOptions options, MediaFile mediaFile, string pathExtension);
    private void Dismiss(UIPopoverController popover, UIViewController picker);
    private static UIViewController GetHostViewController();
    private static UIImagePickerControllerCameraDevice GetUICameraDevice(CameraDevice device);
    private static UIImagePickerControllerQualityType GetQuailty(VideoQuality quality);
    [AsyncStateMachineAttribute("Plugin.Media.MediaImplementation/<CheckPermissions>d__40")]
private static Task CheckPermissions(String[] permissions);
    private void CheckUsageDescription(String[] descriptionNames);
}
public class Plugin.Media.MediaPickerController : UIImagePickerController {
    private bool disposed;
    public NSObject Delegate { get; public set; }
    internal MediaPickerController(MediaPickerDelegate mpDelegate);
    public virtual NSObject get_Delegate();
    public virtual void set_Delegate(NSObject value);
    public Task`1<List`1<MediaFile>> GetResultAsync();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <Dispose>b__6_0();
}
internal class Plugin.Media.MediaPickerDelegate : UIImagePickerControllerDelegate {
    [CompilerGeneratedAttribute]
private UIPopoverController <Popover>k__BackingField;
    private Nullable`1<UIDeviceOrientation> orientation;
    private NSObject observer;
    private object observerDisposeLock;
    private UIViewController viewController;
    private UIImagePickerControllerSourceType source;
    private TaskCompletionSource`1<List`1<MediaFile>> tcs;
    private StoreCameraMediaOptions options;
    public UIPopoverController Popover { get; public set; }
    public UIView View { get; }
    public Task`1<List`1<MediaFile>> Task { get; }
    private bool IsCaptured { get; }
    internal MediaPickerDelegate(UIViewController viewController, UIImagePickerControllerSourceType sourceType, StoreCameraMediaOptions options, CancellationToken token);
    [CompilerGeneratedAttribute]
public UIPopoverController get_Popover();
    [CompilerGeneratedAttribute]
public void set_Popover(UIPopoverController value);
    public void CancelTask();
    public UIView get_View();
    public Task`1<List`1<MediaFile>> get_Task();
    [AsyncStateMachineAttribute("Plugin.Media.MediaPickerDelegate/<FinishedPickingMedia>d__10")]
public virtual void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info);
    public void Canceled(UINavigationController picker);
    public virtual void Canceled(UIImagePickerController picker);
    public void DisplayPopover(bool hideFirst);
    private bool get_IsCaptured();
    private void Dismiss(UINavigationController picker, Action onDismiss);
    private void RemoveOrientationChangeObserverAndNotifications();
    private void DidRotate(NSNotification notice);
    private bool GetShouldRotate(UIDeviceOrientation orientation);
    private bool GetShouldRotate6(UIDeviceOrientation orientation);
    [AsyncStateMachineAttribute("Plugin.Media.MediaPickerDelegate/<GetPictureMediaFile>d__28")]
private Task`1<MediaFile> GetPictureMediaFile(NSDictionary info);
    internal static NSDictionary SetGpsLocation(NSDictionary meta, Location location);
    internal static bool SaveImageWithMetadataiOS13(UIImage image, float quality, NSDictionary meta, string path, string pathExtension);
    internal static bool SaveImageWithMetadata(UIImage image, float quality, NSDictionary meta, string path, string pathExtension);
    [AsyncStateMachineAttribute("Plugin.Media.MediaPickerDelegate/<GetMovieMediaFile>d__32")]
private Task`1<MediaFile> GetMovieMediaFile(NSDictionary info);
    private static string GetUniquePath(string type, string path, string name, string pathExtension);
    internal static string GetOutputPath(string type, string path, string name, string extension, long index);
    private static bool IsValidInterfaceOrientation(UIDeviceOrientation self);
    private static bool IsSameOrientationKind(UIDeviceOrientation o1, UIDeviceOrientation o2);
    private static UIDeviceOrientation GetDeviceOrientation(UIInterfaceOrientation self);
    public static Stream RotateImage(UIImage image, int compressionQuality, string pathExtension);
    [CompilerGeneratedAttribute]
private void <Canceled>b__11_0();
    [CompilerGeneratedAttribute]
private void <Canceled>b__12_0();
}
internal class Plugin.Media.MediaPickerPopoverDelegate : UIPopoverControllerDelegate {
    private MediaPickerDelegate pickerDelegate;
    private UINavigationController picker;
    internal MediaPickerPopoverDelegate(MediaPickerDelegate pickerDelegate, UINavigationController picker);
    public virtual bool ShouldDismiss(UIPopoverController popoverController);
    public virtual void DidDismiss(UIPopoverController popoverController);
}
internal class Plugin.Media.NSDataStream : Stream {
    private NSData theData;
    private UInt32 pos;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NSDataStream(NSData data);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
public static class Plugin.Media.PhotoLibraryAccess : object {
    public static NSDictionary GetPhotoLibraryMetadata(NSUrl url);
}
[ExtensionAttribute]
public static class Plugin.Media.UIImageExtensions : object {
    [ExtensionAttribute]
public static UIImage ResizeImageWithAspectRatio(UIImage imageSource, float scale);
    [ExtensionAttribute]
public static UIImage ResizeImageWithAspectRatio(UIImage sourceImage, float maxWidth, float maxHeight);
    [ExtensionAttribute]
public static UIImage ResizeImage(UIImage sourceImage, float width, float height);
    [ExtensionAttribute]
public static UIImage CropImage(UIImage sourceImage, int crop_x, int crop_y, int width, int height);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
