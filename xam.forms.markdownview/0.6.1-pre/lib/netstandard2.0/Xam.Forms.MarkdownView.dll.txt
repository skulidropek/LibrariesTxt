public class Xam.Forms.Markdown.DarkMarkdownTheme : MarkdownTheme {
    public static Color DefaultBackgroundColor;
    public static Color DefaultAccentColor;
    public static Color DefaultTextColor;
    public static Color DefaultCodeBackground;
    public static Color DefaultSeparatorColor;
    public static Color DefaultQuoteTextColor;
    public static Color DefaultQuoteBorderColor;
    private static DarkMarkdownTheme();
}
[ExtensionAttribute]
public static class Xam.Forms.Markdown.Extensions.ImageExtensions : object {
    [ExtensionAttribute]
public static void RenderSvg(Image view, string uri);
}
public static class Xam.Forms.Markdown.GithubExtensions : object {
    private static Regex GithubRepoRegex;
    private static string GithubReadmeUrl;
    private static GithubExtensions();
    public static bool TryExtractGithubRawMarkdownUrl(string url, String& readmeUrl);
}
public class Xam.Forms.Markdown.LightMarkdownTheme : MarkdownTheme {
    public static Color DefaultBackgroundColor;
    public static Color DefaultAccentColor;
    public static Color DefaultTextColor;
    public static Color DefaultCodeBackground;
    public static Color DefaultSeparatorColor;
    public static Color DefaultQuoteTextColor;
    public static Color DefaultQuoteBorderColor;
    private static LightMarkdownTheme();
}
public class Xam.Forms.Markdown.MarkdownStyle : object {
    [CompilerGeneratedAttribute]
private FontAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BorderSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    public FontAttributes Attributes { get; public set; }
    public float FontSize { get; public set; }
    public Color ForegroundColor { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color BorderColor { get; public set; }
    public float BorderSize { get; public set; }
    public string FontFamily { get; public set; }
    [CompilerGeneratedAttribute]
public FontAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(FontAttributes value);
    [CompilerGeneratedAttribute]
public float get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(float value);
    [CompilerGeneratedAttribute]
public Color get_ForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ForegroundColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_BorderColor();
    [CompilerGeneratedAttribute]
public void set_BorderColor(Color value);
    [CompilerGeneratedAttribute]
public float get_BorderSize();
    [CompilerGeneratedAttribute]
public void set_BorderSize(float value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
}
public class Xam.Forms.Markdown.MarkdownTheme : object {
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Paragraph>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Heading1>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Heading2>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Heading3>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Heading4>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Heading5>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Heading6>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Quote>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkdownStyle <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Margin>k__BackingField;
    public Color BackgroundColor { get; public set; }
    public MarkdownStyle Paragraph { get; public set; }
    public MarkdownStyle Heading1 { get; public set; }
    public MarkdownStyle Heading2 { get; public set; }
    public MarkdownStyle Heading3 { get; public set; }
    public MarkdownStyle Heading4 { get; public set; }
    public MarkdownStyle Heading5 { get; public set; }
    public MarkdownStyle Heading6 { get; public set; }
    public MarkdownStyle Quote { get; public set; }
    public MarkdownStyle Separator { get; public set; }
    public MarkdownStyle Link { get; public set; }
    public MarkdownStyle Code { get; public set; }
    public float Margin { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Paragraph();
    [CompilerGeneratedAttribute]
public void set_Paragraph(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Heading1();
    [CompilerGeneratedAttribute]
public void set_Heading1(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Heading2();
    [CompilerGeneratedAttribute]
public void set_Heading2(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Heading3();
    [CompilerGeneratedAttribute]
public void set_Heading3(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Heading4();
    [CompilerGeneratedAttribute]
public void set_Heading4(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Heading5();
    [CompilerGeneratedAttribute]
public void set_Heading5(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Heading6();
    [CompilerGeneratedAttribute]
public void set_Heading6(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Quote();
    [CompilerGeneratedAttribute]
public void set_Quote(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public MarkdownStyle get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(MarkdownStyle value);
    [CompilerGeneratedAttribute]
public float get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(float value);
}
public class Xam.Forms.Markdown.MarkdownView : ContentView {
    [CompilerGeneratedAttribute]
private Action`1<string> <NavigateToLink>k__BackingField;
    public static MarkdownTheme Global;
    public static BindableProperty MarkdownProperty;
    public static BindableProperty RelativeUrlHostProperty;
    public static BindableProperty ThemeProperty;
    private bool isQuoted;
    private List`1<View> queuedViews;
    private StackLayout stack;
    private List`1<KeyValuePair`2<string, string>> links;
    private int listScope;
    public Action`1<string> NavigateToLink { get; public set; }
    public string Markdown { get; public set; }
    public string RelativeUrlHost { get; public set; }
    public MarkdownTheme Theme { get; public set; }
    private static MarkdownView();
    [CompilerGeneratedAttribute]
public Action`1<string> get_NavigateToLink();
    [CompilerGeneratedAttribute]
public void set_NavigateToLink(Action`1<string> value);
    public string get_Markdown();
    public void set_Markdown(string value);
    public string get_RelativeUrlHost();
    public void set_RelativeUrlHost(string value);
    public MarkdownTheme get_Theme();
    public void set_Theme(MarkdownTheme value);
    private static void OnMarkdownChanged(BindableObject bindable, object oldValue, object newValue);
    private void RenderMarkdown();
    private void Render(IEnumerable`1<Block> blocks);
    private void AttachLinks(View view);
    private void Render(Block block);
    private void Render(ThematicBreakBlock block);
    private void Render(ListBlock block);
    private void Render(ListBlock parent, int index, ListItemBlock block);
    private void Render(HeadingBlock block);
    private void Render(ParagraphBlock block);
    private void Render(HtmlBlock block);
    private void Render(QuoteBlock block);
    private void Render(CodeBlock block);
    private FormattedString CreateFormatted(ContainerInline inlines, string family, FontAttributes attributes, Color foregroundColor, Color backgroundColor, float size);
    private Span[] CreateSpans(Inline inline, string family, FontAttributes attributes, Color foregroundColor, Color backgroundColor, float size);
}
