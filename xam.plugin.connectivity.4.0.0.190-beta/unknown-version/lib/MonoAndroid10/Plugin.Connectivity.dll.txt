[BroadcastReceiverAttribute]
[PreserveAttribute]
public class Plugin.Connectivity.ConnectivityChangeBroadcastReceiver : BroadcastReceiver {
    public static Action`1<ConnectivityChangedEventArgs> ConnectionChanged;
    public static Action`1<ConnectivityTypeChangedEventArgs> ConnectionTypeChanged;
    private bool isConnected;
    private ConnectivityManager connectivityManager;
    private ConnectivityManager ConnectivityManager { get; }
    private bool IsConnected { get; }
    private ConnectivityManager get_ConnectivityManager();
    private bool get_IsConnected();
    [AsyncStateMachineAttribute("Plugin.Connectivity.ConnectivityChangeBroadcastReceiver/<OnReceive>d__9")]
public virtual void OnReceive(Context context, Intent intent);
}
[PreserveAttribute]
public class Plugin.Connectivity.ConnectivityImplementation : BaseConnectivity {
    private ConnectivityChangeBroadcastReceiver receiver;
    private ConnectivityManager connectivityManager;
    private WifiManager wifiManager;
    private bool disposed;
    private ConnectivityManager ConnectivityManager { get; }
    private WifiManager WifiManager { get; }
    public bool IsConnected { get; }
    public IEnumerable`1<ConnectionType> ConnectionTypes { get; }
    public IEnumerable`1<ulong> Bandwidths { get; }
    private ConnectivityManager get_ConnectivityManager();
    private WifiManager get_WifiManager();
    public static bool GetIsConnected(ConnectivityManager manager);
    public virtual bool get_IsConnected();
    public virtual Task`1<bool> IsReachable(string host, TimeSpan timespan);
    public virtual Task`1<bool> IsRemoteReachable(Uri uri, TimeSpan timeout);
    public virtual IEnumerable`1<ConnectionType> get_ConnectionTypes();
    [IteratorStateMachineAttribute("Plugin.Connectivity.ConnectivityImplementation/<GetConnectionTypes>d__15")]
public static IEnumerable`1<ConnectionType> GetConnectionTypes(ConnectivityManager manager);
    public static ConnectionType GetConnectionType(ConnectivityType connectivityType, string typeName);
    public virtual IEnumerable`1<ulong> get_Bandwidths();
    public virtual void Dispose(bool disposing);
}
public class Plugin.Connectivity.CrossConnectivity : object {
    private static Lazy`1<IConnectivity> implementation;
    public static bool IsSupported { get; }
    public static IConnectivity Current { get; }
    private static CrossConnectivity();
    public static bool get_IsSupported();
    public static IConnectivity get_Current();
    private static IConnectivity CreateConnectivity();
    internal static Exception NotImplementedInReferenceAssembly();
    public static void Dispose();
}
