public abstract class Plugin.Connectivity.Abstractions.BaseConnectivity : object {
    [CompilerGeneratedAttribute]
private ConnectivityChangedEventHandler ConnectivityChanged;
    [CompilerGeneratedAttribute]
private ConnectivityTypeChangedEventHandler ConnectivityTypeChanged;
    private bool disposed;
    public bool IsConnected { get; }
    public IEnumerable`1<ConnectionType> ConnectionTypes { get; }
    public IEnumerable`1<ulong> Bandwidths { get; }
    public abstract virtual bool get_IsConnected();
    public sealed virtual Task`1<bool> IsReachable(string host, int msTimeout);
    public abstract virtual Task`1<bool> IsReachable(string host, TimeSpan timeout);
    [ObsoleteAttribute("This method is now obsolete and replaced with IsRemoteReachable that take in a full Uri. This method now ignores the port and acts like a full Uri.")]
public sealed virtual Task`1<bool> IsRemoteReachable(string uri, int port, int msTimeout);
    public sealed virtual Task`1<bool> IsRemoteReachable(string uri, TimeSpan timeout);
    public abstract virtual Task`1<bool> IsRemoteReachable(Uri uri, TimeSpan timeout);
    public abstract virtual IEnumerable`1<ConnectionType> get_ConnectionTypes();
    public abstract virtual IEnumerable`1<ulong> get_Bandwidths();
    protected virtual void OnConnectivityChanged(ConnectivityChangedEventArgs e);
    protected virtual void OnConnectivityTypeChanged(ConnectivityTypeChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectivityChanged(ConnectivityChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectivityChanged(ConnectivityChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectivityTypeChanged(ConnectivityTypeChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectivityTypeChanged(ConnectivityTypeChangedEventHandler value);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public virtual void Dispose(bool disposing);
}
public enum Plugin.Connectivity.Abstractions.ConnectionType : Enum {
    public int value__;
    public static ConnectionType Cellular;
    public static ConnectionType WiFi;
    public static ConnectionType Desktop;
    public static ConnectionType Wimax;
    public static ConnectionType Other;
    public static ConnectionType Bluetooth;
}
public class Plugin.Connectivity.Abstractions.ConnectivityChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    public bool IsConnected { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsConnected();
    [CompilerGeneratedAttribute]
public void set_IsConnected(bool value);
}
public class Plugin.Connectivity.Abstractions.ConnectivityChangedEventHandler : MulticastDelegate {
    public ConnectivityChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectivityChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectivityChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Plugin.Connectivity.Abstractions.ConnectivityTypeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ConnectionType> <ConnectionTypes>k__BackingField;
    public bool IsConnected { get; public set; }
    public IEnumerable`1<ConnectionType> ConnectionTypes { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsConnected();
    [CompilerGeneratedAttribute]
public void set_IsConnected(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ConnectionType> get_ConnectionTypes();
    [CompilerGeneratedAttribute]
public void set_ConnectionTypes(IEnumerable`1<ConnectionType> value);
}
public class Plugin.Connectivity.Abstractions.ConnectivityTypeChangedEventHandler : MulticastDelegate {
    public ConnectivityTypeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectivityTypeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectivityTypeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface Plugin.Connectivity.Abstractions.IConnectivity {
    public bool IsConnected { get; }
    public IEnumerable`1<ConnectionType> ConnectionTypes { get; }
    public IEnumerable`1<ulong> Bandwidths { get; }
    public abstract virtual bool get_IsConnected();
    public abstract virtual Task`1<bool> IsReachable(string host, int msTimeout);
    public abstract virtual Task`1<bool> IsReachable(string host, TimeSpan timeout);
    [ObsoleteAttribute("This method is now obsolete and replaced with IsRemoteReachable that take in a full Uri. This method will be removed in future revisions.")]
public abstract virtual Task`1<bool> IsRemoteReachable(string uri, int port, int msTimeout);
    public abstract virtual Task`1<bool> IsRemoteReachable(string uri, TimeSpan timeout);
    public abstract virtual Task`1<bool> IsRemoteReachable(Uri uri, TimeSpan timeout);
    public abstract virtual IEnumerable`1<ConnectionType> get_ConnectionTypes();
    public abstract virtual IEnumerable`1<ulong> get_Bandwidths();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectivityChanged(ConnectivityChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectivityChanged(ConnectivityChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectivityTypeChanged(ConnectivityTypeChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectivityTypeChanged(ConnectivityTypeChangedEventHandler value);
}
