public class Plugin.Connectivity.ConnectivityImplementation : BaseConnectivity {
    private IList`1<ConnectionType> connectionTypes;
    private IList`1<ulong> bandwidths;
    private bool isConnected;
    private IEnumerable`1<NetworkInterface> Adapters { get; }
    public IEnumerable`1<ulong> Bandwidths { get; }
    public IEnumerable`1<ConnectionType> ConnectionTypes { get; }
    public bool IsConnected { get; }
    private IEnumerable`1<NetworkInterface> get_Adapters();
    private void UpdateIsConnected();
    private void NetworkChange_NetworkAvailabilityChanged(object sender, NetworkAvailabilityEventArgs e);
    private void NetworkChangeOnNetworkAddressChanged(object sender, EventArgs eventArgs);
    private void ResetConnections();
    private ConnectionType ToConnectionTypes(NetworkInterface networkInterface);
    public virtual IEnumerable`1<ulong> get_Bandwidths();
    public virtual IEnumerable`1<ConnectionType> get_ConnectionTypes();
    public virtual bool get_IsConnected();
    [AsyncStateMachineAttribute("Plugin.Connectivity.ConnectivityImplementation/<IsReachable>d__17")]
public virtual Task`1<bool> IsReachable(string host, TimeSpan timeout);
    public virtual Task`1<bool> IsRemoteReachable(Uri uri, TimeSpan timeout);
    public virtual void Dispose(bool disposing);
}
public class Plugin.Connectivity.CrossConnectivity : object {
    private static Lazy`1<IConnectivity> implementation;
    public static bool IsSupported { get; }
    public static IConnectivity Current { get; }
    private static CrossConnectivity();
    public static bool get_IsSupported();
    public static IConnectivity get_Current();
    private static IConnectivity CreateConnectivity();
    internal static Exception NotImplementedInReferenceAssembly();
    public static void Dispose();
}
