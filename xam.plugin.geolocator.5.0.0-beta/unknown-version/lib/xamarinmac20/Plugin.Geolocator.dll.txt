public enum Plugin.Geolocator.Abstractions.ActivityType : Enum {
    public int value__;
    public static ActivityType Other;
    public static ActivityType AutomotiveNavigation;
    public static ActivityType Fitness;
    public static ActivityType OtherNavigation;
}
public class Plugin.Geolocator.Abstractions.Address : object {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubLocality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Thoroughfare>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubThoroughfare>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminArea>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubAdminArea>k__BackingField;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public string CountryCode { get; public set; }
    public string CountryName { get; public set; }
    public string FeatureName { get; public set; }
    public string PostalCode { get; public set; }
    public string SubLocality { get; public set; }
    public string Thoroughfare { get; public set; }
    public string SubThoroughfare { get; public set; }
    public string Locality { get; public set; }
    public string AdminArea { get; public set; }
    public string SubAdminArea { get; public set; }
    public Address(Address address);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public string get_CountryCode();
    [CompilerGeneratedAttribute]
public void set_CountryCode(string value);
    [CompilerGeneratedAttribute]
public string get_CountryName();
    [CompilerGeneratedAttribute]
public void set_CountryName(string value);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public void set_FeatureName(string value);
    [CompilerGeneratedAttribute]
public string get_PostalCode();
    [CompilerGeneratedAttribute]
public void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public string get_SubLocality();
    [CompilerGeneratedAttribute]
public void set_SubLocality(string value);
    [CompilerGeneratedAttribute]
public string get_Thoroughfare();
    [CompilerGeneratedAttribute]
public void set_Thoroughfare(string value);
    [CompilerGeneratedAttribute]
public string get_SubThoroughfare();
    [CompilerGeneratedAttribute]
public void set_SubThoroughfare(string value);
    [CompilerGeneratedAttribute]
public string get_Locality();
    [CompilerGeneratedAttribute]
public void set_Locality(string value);
    [CompilerGeneratedAttribute]
public string get_AdminArea();
    [CompilerGeneratedAttribute]
public void set_AdminArea(string value);
    [CompilerGeneratedAttribute]
public string get_SubAdminArea();
    [CompilerGeneratedAttribute]
public void set_SubAdminArea(string value);
}
public enum Plugin.Geolocator.Abstractions.GeolocationError : Enum {
    public int value__;
    public static GeolocationError PositionUnavailable;
    public static GeolocationError Unauthorized;
}
public class Plugin.Geolocator.Abstractions.GeolocationException : Exception {
    [CompilerGeneratedAttribute]
private GeolocationError <Error>k__BackingField;
    public GeolocationError Error { get; private set; }
    public GeolocationException(GeolocationError error);
    public GeolocationException(GeolocationError error, Exception innerException);
    [CompilerGeneratedAttribute]
public GeolocationError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(GeolocationError value);
}
[ExtensionAttribute]
public static class Plugin.Geolocator.Abstractions.GeolocatorUtils : object {
    public static double CalculateDistance(double latitudeStart, double longitudeStart, double latitudeEnd, double longitudeEnd, DistanceUnits units);
    [ExtensionAttribute]
public static double CalculateDistance(Position positionStart, Position positionEnd, DistanceUnits units);
    public static double MilesToKilometers(double miles);
    public static double KilometersToMiles(double kilometers);
}
public interface Plugin.Geolocator.Abstractions.IGeolocator {
    public double DesiredAccuracy { get; public set; }
    public bool IsListening { get; }
    public bool SupportsHeading { get; }
    public bool IsGeolocationAvailable { get; }
    public bool IsGeolocationEnabled { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PositionChanged(EventHandler`1<PositionEventArgs> value);
    public abstract virtual double get_DesiredAccuracy();
    public abstract virtual void set_DesiredAccuracy(double value);
    public abstract virtual bool get_IsListening();
    public abstract virtual bool get_SupportsHeading();
    public abstract virtual bool get_IsGeolocationAvailable();
    public abstract virtual bool get_IsGeolocationEnabled();
    public abstract virtual Task`1<Position> GetLastKnownLocationAsync();
    public abstract virtual Task`1<Position> GetPositionAsync(Nullable`1<TimeSpan> timeout, Nullable`1<CancellationToken> token, bool includeHeading);
    public abstract virtual Task`1<IEnumerable`1<Address>> GetAddressesForPositionAsync(Position position, string mapKey);
    public abstract virtual Task`1<IEnumerable`1<Position>> GetPositionsForAddressAsync(string address, string mapKey);
    public abstract virtual Task`1<bool> StartListeningAsync(TimeSpan minimumTime, double minimumDistance, bool includeHeading, ListenerSettings listenerSettings);
    public abstract virtual Task`1<bool> StopListeningAsync();
}
public class Plugin.Geolocator.Abstractions.ListenerSettings : object {
    [CompilerGeneratedAttribute]
private bool <AllowBackgroundUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PauseLocationUpdatesAutomatically>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityType <ActivityType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ListenForSignificantChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeferLocationUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DeferralDistanceMeters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeferralTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowsBackgroundLocationIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLocationAlwaysPermission>k__BackingField;
    public bool AllowBackgroundUpdates { get; public set; }
    public bool PauseLocationUpdatesAutomatically { get; public set; }
    public ActivityType ActivityType { get; public set; }
    public bool ListenForSignificantChanges { get; public set; }
    public bool DeferLocationUpdates { get; public set; }
    public Nullable`1<double> DeferralDistanceMeters { get; public set; }
    public Nullable`1<TimeSpan> DeferralTime { get; public set; }
    public bool ShowsBackgroundLocationIndicator { get; public set; }
    public bool RequireLocationAlwaysPermission { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowBackgroundUpdates();
    [CompilerGeneratedAttribute]
public void set_AllowBackgroundUpdates(bool value);
    [CompilerGeneratedAttribute]
public bool get_PauseLocationUpdatesAutomatically();
    [CompilerGeneratedAttribute]
public void set_PauseLocationUpdatesAutomatically(bool value);
    [CompilerGeneratedAttribute]
public ActivityType get_ActivityType();
    [CompilerGeneratedAttribute]
public void set_ActivityType(ActivityType value);
    [CompilerGeneratedAttribute]
public bool get_ListenForSignificantChanges();
    [CompilerGeneratedAttribute]
public void set_ListenForSignificantChanges(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeferLocationUpdates();
    [CompilerGeneratedAttribute]
public void set_DeferLocationUpdates(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DeferralDistanceMeters();
    [CompilerGeneratedAttribute]
public void set_DeferralDistanceMeters(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeferralTime();
    [CompilerGeneratedAttribute]
public void set_DeferralTime(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_ShowsBackgroundLocationIndicator();
    [CompilerGeneratedAttribute]
public void set_ShowsBackgroundLocationIndicator(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireLocationAlwaysPermission();
    [CompilerGeneratedAttribute]
public void set_RequireLocationAlwaysPermission(bool value);
}
public class Plugin.Geolocator.Abstractions.Position : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasLatitudeLongitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAltitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Altitude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Accuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AltitudeAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasHeading>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Heading>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Speed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromMockProvider>k__BackingField;
    public DateTimeOffset Timestamp { get; public set; }
    public bool HasLatitudeLongitude { get; public set; }
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public bool HasAltitude { get; public set; }
    public double Altitude { get; public set; }
    public bool HasAccuracy { get; public set; }
    public double Accuracy { get; public set; }
    public double AltitudeAccuracy { get; public set; }
    public bool HasHeading { get; public set; }
    public double Heading { get; public set; }
    public bool HasSpeed { get; public set; }
    public double Speed { get; public set; }
    public bool IsFromMockProvider { get; public set; }
    public Position(double latitude, double longitude);
    public Position(Position position);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_HasLatitudeLongitude();
    [CompilerGeneratedAttribute]
public void set_HasLatitudeLongitude(bool value);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public bool get_HasAltitude();
    [CompilerGeneratedAttribute]
public void set_HasAltitude(bool value);
    [CompilerGeneratedAttribute]
public double get_Altitude();
    [CompilerGeneratedAttribute]
public void set_Altitude(double value);
    [CompilerGeneratedAttribute]
public bool get_HasAccuracy();
    [CompilerGeneratedAttribute]
public void set_HasAccuracy(bool value);
    [CompilerGeneratedAttribute]
public double get_Accuracy();
    [CompilerGeneratedAttribute]
public void set_Accuracy(double value);
    [CompilerGeneratedAttribute]
public double get_AltitudeAccuracy();
    [CompilerGeneratedAttribute]
public void set_AltitudeAccuracy(double value);
    [CompilerGeneratedAttribute]
public bool get_HasHeading();
    [CompilerGeneratedAttribute]
public void set_HasHeading(bool value);
    [CompilerGeneratedAttribute]
public double get_Heading();
    [CompilerGeneratedAttribute]
public void set_Heading(double value);
    [CompilerGeneratedAttribute]
public bool get_HasSpeed();
    [CompilerGeneratedAttribute]
public void set_HasSpeed(bool value);
    [CompilerGeneratedAttribute]
public double get_Speed();
    [CompilerGeneratedAttribute]
public void set_Speed(double value);
    [CompilerGeneratedAttribute]
public bool get_IsFromMockProvider();
    [CompilerGeneratedAttribute]
public void set_IsFromMockProvider(bool value);
}
public class Plugin.Geolocator.Abstractions.PositionErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private GeolocationError <Error>k__BackingField;
    public GeolocationError Error { get; private set; }
    public PositionErrorEventArgs(GeolocationError error);
    [CompilerGeneratedAttribute]
public GeolocationError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(GeolocationError value);
}
public class Plugin.Geolocator.Abstractions.PositionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    public Position Position { get; private set; }
    public PositionEventArgs(Position position);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(Position value);
}
public class Plugin.Geolocator.CrossGeolocator : object {
    private static Lazy`1<IGeolocator> implementation;
    public static bool IsSupported { get; }
    public static IGeolocator Current { get; }
    private static CrossGeolocator();
    public static bool get_IsSupported();
    public static IGeolocator get_Current();
    private static IGeolocator CreateGeolocator();
    internal static Exception NotImplementedInReferenceAssembly();
}
[PreserveAttribute]
internal class Plugin.Geolocator.GeolocationSingleUpdateDelegate : CLLocationManagerDelegate {
    private bool haveLocation;
    private Position position;
    private double desiredAccuracy;
    private bool includeHeading;
    private TaskCompletionSource`1<Position> tcs;
    private CLLocationManager manager;
    public Task`1<Position> Task { get; }
    public GeolocationSingleUpdateDelegate(CLLocationManager manager, double desiredAccuracy, bool includeHeading, int timeout, CancellationToken cancelToken);
    public Task`1<Position> get_Task();
    public virtual void AuthorizationChanged(CLLocationManager manager, CLAuthorizationStatus status);
    public virtual void Failed(CLLocationManager manager, NSError error);
    public virtual void UpdatedLocation(CLLocationManager manager, CLLocation newLocation, CLLocation oldLocation);
    private void StopListening();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
[ExtensionAttribute]
public static class Plugin.Geolocator.GeolocationUtils : object {
    [ExtensionAttribute]
internal static IEnumerable`1<Address> ToAddresses(IEnumerable`1<CLPlacemark> addresses);
    [ExtensionAttribute]
public static DateTime ToDateTime(NSDate date);
}
[PreserveAttribute]
public class Plugin.Geolocator.GeolocatorImplementation : object {
    private bool deferringUpdates;
    private CLLocationManager manager;
    private bool includeHeading;
    private bool isListening;
    private Position lastPosition;
    private ListenerSettings listenerSettings;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionErrorEventArgs> PositionError;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionEventArgs> PositionChanged;
    [CompilerGeneratedAttribute]
private double <DesiredAccuracy>k__BackingField;
    private bool CanDeferLocationUpdate { get; }
    public double DesiredAccuracy { get; public set; }
    public bool IsListening { get; }
    public bool SupportsHeading { get; }
    public bool IsGeolocationAvailable { get; }
    public bool IsGeolocationEnabled { get; }
    private void OnDeferredUpdatedFinished(object sender, NSErrorEventArgs e);
    private bool get_CanDeferLocationUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_DesiredAccuracy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DesiredAccuracy(double value);
    public sealed virtual bool get_IsListening();
    public sealed virtual bool get_SupportsHeading();
    public sealed virtual bool get_IsGeolocationAvailable();
    public sealed virtual bool get_IsGeolocationEnabled();
    private void RequestAuthorization();
    [AsyncStateMachineAttribute("Plugin.Geolocator.GeolocatorImplementation/<GetLastKnownLocationAsync>d__29")]
public sealed virtual Task`1<Position> GetLastKnownLocationAsync();
    [AsyncStateMachineAttribute("Plugin.Geolocator.GeolocatorImplementation/<GetPositionAsync>d__30")]
public sealed virtual Task`1<Position> GetPositionAsync(Nullable`1<TimeSpan> timeout, Nullable`1<CancellationToken> cancelToken, bool includeHeading);
    [AsyncStateMachineAttribute("Plugin.Geolocator.GeolocatorImplementation/<GetPositionsForAddressAsync>d__31")]
public sealed virtual Task`1<IEnumerable`1<Position>> GetPositionsForAddressAsync(string address, string mapKey);
    [AsyncStateMachineAttribute("Plugin.Geolocator.GeolocatorImplementation/<GetAddressesForPositionAsync>d__32")]
public sealed virtual Task`1<IEnumerable`1<Address>> GetAddressesForPositionAsync(Position position, string mapKey);
    [AsyncStateMachineAttribute("Plugin.Geolocator.GeolocatorImplementation/<StartListeningAsync>d__33")]
public sealed virtual Task`1<bool> StartListeningAsync(TimeSpan minimumTime, double minimumDistance, bool includeHeading, ListenerSettings listenerSettings);
    public sealed virtual Task`1<bool> StopListeningAsync();
    private CLLocationManager GetManager();
    private void OnLocationsUpdated(object sender, CLLocationsUpdatedEventArgs e);
    private void OnUpdatedLocation(object sender, CLLocationUpdatedEventArgs e);
    private void UpdatePosition(CLLocation location);
    private void OnPositionChanged(PositionEventArgs e);
    [AsyncStateMachineAttribute("Plugin.Geolocator.GeolocatorImplementation/<OnPositionError>d__40")]
private void OnPositionError(PositionErrorEventArgs e);
    private void OnFailed(object sender, NSErrorEventArgs e);
    private void OnAuthorizationChanged(object sender, CLAuthorizationChangedEventArgs e);
}
