[RegisterAttribute("android/arch/core/BuildConfig")]
public class Android.Arch.Core.BuildConfig : Object {
    [RegisterAttribute("APPLICATION_ID")]
public static string ApplicationId;
    [RegisterAttribute("BUILD_TYPE")]
public static string BuildType;
    [RegisterAttribute("DEBUG")]
public static bool Debug;
    [RegisterAttribute("FLAVOR")]
public static string Flavor;
    [RegisterAttribute("VERSION_CODE")]
public static int VersionCode;
    [RegisterAttribute("VERSION_NAME")]
public static string VersionName;
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    internal BuildConfig(IntPtr javaReference, JniHandleOwnership transfer);
    private static BuildConfig();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/arch/core/executor/ArchTaskExecutor")]
public class Android.Arch.Core.Executor.ArchTaskExecutor : TaskExecutor {
    internal static JniPeerMembers _members;
    private static Delegate cb_isMainThread;
    private static Delegate cb_executeOnDiskIO_Ljava_lang_Runnable_;
    private static Delegate cb_postToMainThread_Ljava_lang_Runnable_;
    private static Delegate cb_setDelegate_Landroid_arch_core_executor_TaskExecutor_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public static IExecutor IOThreadExecutor { get; }
    public static ArchTaskExecutor Instance { get; }
    public bool IsMainThread { get; }
    public static IExecutor MainThreadExecutor { get; }
    protected ArchTaskExecutor(IntPtr javaReference, JniHandleOwnership transfer);
    private static ArchTaskExecutor();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getIOThreadExecutor", "()Ljava/util/concurrent/Executor;", "GetGetIOThreadExecutorHandler")]
public static IExecutor get_IOThreadExecutor();
    [RegisterAttribute("getInstance", "()Landroid/arch/core/executor/ArchTaskExecutor;", "GetGetInstanceHandler")]
public static ArchTaskExecutor get_Instance();
    private static Delegate GetIsMainThreadHandler();
    private static bool n_IsMainThread(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isMainThread", "()Z", "GetIsMainThreadHandler")]
public virtual bool get_IsMainThread();
    [RegisterAttribute("getMainThreadExecutor", "()Ljava/util/concurrent/Executor;", "GetGetMainThreadExecutorHandler")]
public static IExecutor get_MainThreadExecutor();
    private static Delegate GetExecuteOnDiskIO_Ljava_lang_Runnable_Handler();
    private static void n_ExecuteOnDiskIO_Ljava_lang_Runnable_(IntPtr jnienv, IntPtr native__this, IntPtr native_runnable);
    [RegisterAttribute("executeOnDiskIO", "(Ljava/lang/Runnable;)V", "GetExecuteOnDiskIO_Ljava_lang_Runnable_Handler")]
public virtual void ExecuteOnDiskIO(IRunnable runnable);
    private static Delegate GetPostToMainThread_Ljava_lang_Runnable_Handler();
    private static void n_PostToMainThread_Ljava_lang_Runnable_(IntPtr jnienv, IntPtr native__this, IntPtr native_runnable);
    [RegisterAttribute("postToMainThread", "(Ljava/lang/Runnable;)V", "GetPostToMainThread_Ljava_lang_Runnable_Handler")]
public virtual void PostToMainThread(IRunnable runnable);
    private static Delegate GetSetDelegate_Landroid_arch_core_executor_TaskExecutor_Handler();
    private static void n_SetDelegate_Landroid_arch_core_executor_TaskExecutor_(IntPtr jnienv, IntPtr native__this, IntPtr native_taskExecutor);
    [RegisterAttribute("setDelegate", "(Landroid/arch/core/executor/TaskExecutor;)V", "GetSetDelegate_Landroid_arch_core_executor_TaskExecutor_Handler")]
public virtual void SetDelegate(TaskExecutor taskExecutor);
}
[RegisterAttribute("android/arch/core/executor/DefaultTaskExecutor")]
public class Android.Arch.Core.Executor.DefaultTaskExecutor : TaskExecutor {
    internal static JniPeerMembers _members;
    private static Delegate cb_isMainThread;
    private static Delegate cb_executeOnDiskIO_Ljava_lang_Runnable_;
    private static Delegate cb_postToMainThread_Ljava_lang_Runnable_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool IsMainThread { get; }
    protected DefaultTaskExecutor(IntPtr javaReference, JniHandleOwnership transfer);
    private static DefaultTaskExecutor();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetIsMainThreadHandler();
    private static bool n_IsMainThread(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isMainThread", "()Z", "GetIsMainThreadHandler")]
public virtual bool get_IsMainThread();
    private static Delegate GetExecuteOnDiskIO_Ljava_lang_Runnable_Handler();
    private static void n_ExecuteOnDiskIO_Ljava_lang_Runnable_(IntPtr jnienv, IntPtr native__this, IntPtr native_runnable);
    [RegisterAttribute("executeOnDiskIO", "(Ljava/lang/Runnable;)V", "GetExecuteOnDiskIO_Ljava_lang_Runnable_Handler")]
public virtual void ExecuteOnDiskIO(IRunnable runnable);
    private static Delegate GetPostToMainThread_Ljava_lang_Runnable_Handler();
    private static void n_PostToMainThread_Ljava_lang_Runnable_(IntPtr jnienv, IntPtr native__this, IntPtr native_runnable);
    [RegisterAttribute("postToMainThread", "(Ljava/lang/Runnable;)V", "GetPostToMainThread_Ljava_lang_Runnable_Handler")]
public virtual void PostToMainThread(IRunnable runnable);
}
[RegisterAttribute("android/arch/core/executor/TaskExecutor")]
public abstract class Android.Arch.Core.Executor.TaskExecutor : Object {
    internal static JniPeerMembers _members;
    private static Delegate cb_isMainThread;
    private static Delegate cb_executeOnDiskIO_Ljava_lang_Runnable_;
    private static Delegate cb_executeOnMainThread_Ljava_lang_Runnable_;
    private static Delegate cb_postToMainThread_Ljava_lang_Runnable_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool IsMainThread { get; }
    protected TaskExecutor(IntPtr javaReference, JniHandleOwnership transfer);
    private static TaskExecutor();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetIsMainThreadHandler();
    private static bool n_IsMainThread(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isMainThread", "()Z", "GetIsMainThreadHandler")]
public abstract virtual bool get_IsMainThread();
    private static Delegate GetExecuteOnDiskIO_Ljava_lang_Runnable_Handler();
    private static void n_ExecuteOnDiskIO_Ljava_lang_Runnable_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    [RegisterAttribute("executeOnDiskIO", "(Ljava/lang/Runnable;)V", "GetExecuteOnDiskIO_Ljava_lang_Runnable_Handler")]
public abstract virtual void ExecuteOnDiskIO(IRunnable p0);
    private static Delegate GetExecuteOnMainThread_Ljava_lang_Runnable_Handler();
    private static void n_ExecuteOnMainThread_Ljava_lang_Runnable_(IntPtr jnienv, IntPtr native__this, IntPtr native_runnable);
    [RegisterAttribute("executeOnMainThread", "(Ljava/lang/Runnable;)V", "GetExecuteOnMainThread_Ljava_lang_Runnable_Handler")]
public virtual void ExecuteOnMainThread(IRunnable runnable);
    private static Delegate GetPostToMainThread_Ljava_lang_Runnable_Handler();
    private static void n_PostToMainThread_Ljava_lang_Runnable_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    [RegisterAttribute("postToMainThread", "(Ljava/lang/Runnable;)V", "GetPostToMainThread_Ljava_lang_Runnable_Handler")]
public abstract virtual void PostToMainThread(IRunnable p0);
}
[RegisterAttribute("android/arch/core/executor/TaskExecutor")]
internal class Android.Arch.Core.Executor.TaskExecutorInvoker : TaskExecutor {
    internal static JniPeerMembers _members;
    public JniPeerMembers JniPeerMembers { get; }
    protected Type ThresholdType { get; }
    public bool IsMainThread { get; }
    public TaskExecutorInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static TaskExecutorInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("isMainThread", "()Z", "GetIsMainThreadHandler")]
public virtual bool get_IsMainThread();
    [RegisterAttribute("executeOnDiskIO", "(Ljava/lang/Runnable;)V", "GetExecuteOnDiskIO_Ljava_lang_Runnable_Handler")]
public virtual void ExecuteOnDiskIO(IRunnable p0);
    [RegisterAttribute("postToMainThread", "(Ljava/lang/Runnable;)V", "GetPostToMainThread_Ljava_lang_Runnable_Handler")]
public virtual void PostToMainThread(IRunnable p0);
}
[RegisterAttribute("android/arch/core/util/Function", "", "Android.Arch.Core.Util.IFunctionInvoker")]
[JavaTypeParametersAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public interface Android.Arch.Core.Util.IFunction {
    [RegisterAttribute("apply", "(Ljava/lang/Object;)Ljava/lang/Object;", "GetApply_Ljava_lang_Object_Handler:Android.Arch.Core.Util.IFunctionInvoker, Xamarin.Android.Arch.Core.Runtime")]
public abstract virtual Object Apply(Object p0);
}
[RegisterAttribute("android/arch/core/util/Function")]
internal class Android.Arch.Core.Util.IFunctionInvoker : Object {
    internal static JniPeerMembers _members;
    private IntPtr class_ref;
    private static Delegate cb_apply_Ljava_lang_Object_;
    private IntPtr id_apply_Ljava_lang_Object_;
    private static IntPtr java_class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public IFunctionInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static IFunctionInvoker();
    private static IntPtr get_java_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    public static IFunction GetObject(IntPtr handle, JniHandleOwnership transfer);
    private static IntPtr Validate(IntPtr handle);
    protected virtual void Dispose(bool disposing);
    private static Delegate GetApply_Ljava_lang_Object_Handler();
    private static IntPtr n_Apply_Ljava_lang_Object_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    public sealed virtual Object Apply(Object p0);
}
internal class Java.Interop.__TypeRegistrations : object {
    public static void RegisterPackages();
    private static Type Lookup(String[] mappings, string javaType);
}
