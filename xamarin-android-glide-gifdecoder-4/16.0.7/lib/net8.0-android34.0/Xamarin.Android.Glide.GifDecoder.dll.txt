internal class _JniMarshal_PP_I : MulticastDelegate {
    public _JniMarshal_PP_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_L : MulticastDelegate {
    public _JniMarshal_PP_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_V : MulticastDelegate {
    public _JniMarshal_PP_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_Z : MulticastDelegate {
    public _JniMarshal_PP_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPI_I : MulticastDelegate {
    public _JniMarshal_PPI_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass, int p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPI_L : MulticastDelegate {
    public _JniMarshal_PPI_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass, int p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPIIL_L : MulticastDelegate {
    public _JniMarshal_PPIIL_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass, int p0, int p1, IntPtr p2);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, int p1, IntPtr p2, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPL_I : MulticastDelegate {
    public _JniMarshal_PPL_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPL_L : MulticastDelegate {
    public _JniMarshal_PPL_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPL_V : MulticastDelegate {
    public _JniMarshal_PPL_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPL_Z : MulticastDelegate {
    public _JniMarshal_PPL_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLI_I : MulticastDelegate {
    public _JniMarshal_PPLI_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLL_V : MulticastDelegate {
    public _JniMarshal_PPLL_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, IntPtr p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, IntPtr p1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLLI_V : MulticastDelegate {
    public _JniMarshal_PPLLI_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, IntPtr p1, int p2);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, IntPtr p1, int p2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder")]
public abstract class Bumptech.Glide.GifDecoder.GifDecoder : Object {
    [RegisterAttribute("STATUS_FORMAT_ERROR")]
public static int StatusFormatError;
    [RegisterAttribute("STATUS_OK")]
public static int StatusOk;
    [RegisterAttribute("STATUS_OPEN_ERROR")]
public static int StatusOpenError;
    [RegisterAttribute("STATUS_PARTIAL_DECODE")]
public static int StatusPartialDecode;
    [RegisterAttribute("TOTAL_ITERATION_COUNT_FOREVER")]
public static int TotalIterationCountForever;
}
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder")]
[ObsoleteAttribute("Use the 'GifDecoder' type. This type will be removed in a future release.", "True")]
public abstract class Bumptech.Glide.GifDecoder.GifDecoderConsts : GifDecoder {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifHeader")]
public class Bumptech.Glide.GifDecoder.GifHeader : Object {
    [RegisterAttribute("NETSCAPE_LOOP_COUNT_DOES_NOT_EXIST")]
public static int NetscapeLoopCountDoesNotExist;
    [RegisterAttribute("NETSCAPE_LOOP_COUNT_FOREVER")]
public static int NetscapeLoopCountForever;
    private static JniPeerMembers _members;
    [NullableAttribute("2")]
private static Delegate cb_getHeight;
    [NullableAttribute("2")]
private static Delegate cb_getNumFrames;
    [NullableAttribute("2")]
private static Delegate cb_getStatus;
    [NullableAttribute("2")]
private static Delegate cb_getWidth;
    internal static IntPtr class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public int Height { get; }
    public int NumFrames { get; }
    public int Status { get; }
    public int Width { get; }
    protected GifHeader(IntPtr javaReference, JniHandleOwnership transfer);
    private static GifHeader();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetHeightHandler();
    private static int n_GetHeight(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getHeight", "()I", "GetGetHeightHandler")]
public virtual int get_Height();
    private static Delegate GetGetNumFramesHandler();
    private static int n_GetNumFrames(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getNumFrames", "()I", "GetGetNumFramesHandler")]
public virtual int get_NumFrames();
    private static Delegate GetGetStatusHandler();
    private static int n_GetStatus(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getStatus", "()I", "GetGetStatusHandler")]
public virtual int get_Status();
    private static Delegate GetGetWidthHandler();
    private static int n_GetWidth(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getWidth", "()I", "GetGetWidthHandler")]
public virtual int get_Width();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifHeaderParser")]
public class Bumptech.Glide.GifDecoder.GifHeaderParser : Object {
    private static JniPeerMembers _members;
    [NullableAttribute("2")]
private static Delegate cb_isAnimated;
    [NullableAttribute("2")]
private static Delegate cb_clear;
    [NullableAttribute("2")]
private static Delegate cb_parseHeader;
    [NullableAttribute("2")]
private static Delegate cb_setData_arrayB;
    [NullableAttribute("2")]
private static Delegate cb_setData_Ljava_nio_ByteBuffer_;
    internal static IntPtr class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public bool IsAnimated { get; }
    protected GifHeaderParser(IntPtr javaReference, JniHandleOwnership transfer);
    private static GifHeaderParser();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetIsAnimatedHandler();
    private static bool n_IsAnimated(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isAnimated", "()Z", "GetIsAnimatedHandler")]
public virtual bool get_IsAnimated();
    private static Delegate GetClearHandler();
    private static void n_Clear(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("clear", "()V", "GetClearHandler")]
public virtual void Clear();
    private static Delegate GetParseHeaderHandler();
    private static IntPtr n_ParseHeader(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("parseHeader", "()Lcom/bumptech/glide/gifdecoder/GifHeader;", "GetParseHeaderHandler")]
public virtual GifHeader ParseHeader();
    private static Delegate GetSetData_arrayBHandler();
    private static IntPtr n_SetData_arrayB(IntPtr jnienv, IntPtr native__this, IntPtr native_data);
    [NullableContextAttribute("2")]
[RegisterAttribute("setData", "([B)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;", "GetSetData_arrayBHandler")]
public virtual GifHeaderParser SetData(Byte[] data);
    private static Delegate GetSetData_Ljava_nio_ByteBuffer_Handler();
    private static IntPtr n_SetData_Ljava_nio_ByteBuffer_(IntPtr jnienv, IntPtr native__this, IntPtr native_data);
    [RegisterAttribute("setData", "(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;", "GetSetData_Ljava_nio_ByteBuffer_Handler")]
public virtual GifHeaderParser SetData(ByteBuffer data);
}
[NullableContextAttribute("1")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder", "", "Bumptech.Glide.GifDecoder.IGifDecoderInvoker")]
public interface Bumptech.Glide.GifDecoder.IGifDecoder {
    public int ByteSize { get; }
    public int CurrentFrameIndex { get; }
    public ByteBuffer Data { get; }
    public int FrameCount { get; }
    public int Height { get; }
    public int LoopCount { get; }
    public int NetscapeLoopCount { get; }
    public int NextDelay { get; }
    [NullableAttribute("2")]
public Bitmap NextFrame { get; }
    public int Status { get; }
    public int TotalIterationCount { get; }
    public int Width { get; }
    [RegisterAttribute("getByteSize", "()I", "GetGetByteSizeHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_ByteSize();
    [RegisterAttribute("getCurrentFrameIndex", "()I", "GetGetCurrentFrameIndexHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_CurrentFrameIndex();
    [RegisterAttribute("getData", "()Ljava/nio/ByteBuffer;", "GetGetDataHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual ByteBuffer get_Data();
    [RegisterAttribute("getFrameCount", "()I", "GetGetFrameCountHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_FrameCount();
    [RegisterAttribute("getHeight", "()I", "GetGetHeightHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_Height();
    [RegisterAttribute("getLoopCount", "()I", "GetGetLoopCountHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_LoopCount();
    [RegisterAttribute("getNetscapeLoopCount", "()I", "GetGetNetscapeLoopCountHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_NetscapeLoopCount();
    [RegisterAttribute("getNextDelay", "()I", "GetGetNextDelayHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_NextDelay();
    [NullableContextAttribute("2")]
[RegisterAttribute("getNextFrame", "()Landroid/graphics/Bitmap;", "GetGetNextFrameHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual Bitmap get_NextFrame();
    [RegisterAttribute("getStatus", "()I", "GetGetStatusHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_Status();
    [RegisterAttribute("getTotalIterationCount", "()I", "GetGetTotalIterationCountHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_TotalIterationCount();
    [RegisterAttribute("getWidth", "()I", "GetGetWidthHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int get_Width();
    [RegisterAttribute("advance", "()V", "GetAdvanceHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void Advance();
    [RegisterAttribute("clear", "()V", "GetClearHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void Clear();
    [RegisterAttribute("getDelay", "(I)I", "GetGetDelay_IHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int GetDelay(int p0);
    [NullableContextAttribute("2")]
[RegisterAttribute("read", "([B)I", "GetRead_arrayBHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int Read(Byte[] p0);
    [NullableContextAttribute("2")]
[RegisterAttribute("read", "(Ljava/io/InputStream;I)I", "GetRead_Ljava_io_InputStream_IHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual int Read(Stream p0, int p1);
    [RegisterAttribute("resetFrameIndex", "()V", "GetResetFrameIndexHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void ResetFrameIndex();
    [RegisterAttribute("setData", "(Lcom/bumptech/glide/gifdecoder/GifHeader;[B)V", "GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayBHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void SetData(GifHeader p0, Byte[] p1);
    [RegisterAttribute("setData", "(Lcom/bumptech/glide/gifdecoder/GifHeader;Ljava/nio/ByteBuffer;)V", "GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_Handler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void SetData(GifHeader p0, ByteBuffer p1);
    [RegisterAttribute("setData", "(Lcom/bumptech/glide/gifdecoder/GifHeader;Ljava/nio/ByteBuffer;I)V", "GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_IHandler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void SetData(GifHeader p0, ByteBuffer p1, int p2);
    [RegisterAttribute("setDefaultBitmapConfig", "(Landroid/graphics/Bitmap$Config;)V", "GetSetDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_Handler:Bumptech.Glide.GifDecoder.IGifDecoderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void SetDefaultBitmapConfig(Config p0);
}
[NullableContextAttribute("1")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder$BitmapProvider", "", "Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker")]
public interface Bumptech.Glide.GifDecoder.IGifDecoderBitmapProvider {
    [RegisterAttribute("obtain", "(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;", "GetObtain_IILandroid_graphics_Bitmap_Config_Handler:Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual Bitmap Obtain(int p0, int p1, Config p2);
    [RegisterAttribute("obtainByteArray", "(I)[B", "GetObtainByteArray_IHandler:Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual Byte[] ObtainByteArray(int p0);
    [RegisterAttribute("obtainIntArray", "(I)[I", "GetObtainIntArray_IHandler:Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual Int32[] ObtainIntArray(int p0);
    [RegisterAttribute("release", "(Landroid/graphics/Bitmap;)V", "GetRelease_Landroid_graphics_Bitmap_Handler:Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void Release(Bitmap p0);
    [RegisterAttribute("release", "([B)V", "GetRelease_arrayBHandler:Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void Release(Byte[] p0);
    [RegisterAttribute("release", "([I)V", "GetRelease_arrayIHandler:Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker, Xamarin.Android.Glide.GifDecoder")]
public abstract virtual void Release(Int32[] p0);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder$BitmapProvider")]
internal class Bumptech.Glide.GifDecoder.IGifDecoderBitmapProviderInvoker : Object {
    private static JniPeerMembers _members;
    private IntPtr class_ref;
    [NullableAttribute("2")]
private static Delegate cb_obtain_IILandroid_graphics_Bitmap_Config_;
    private IntPtr id_obtain_IILandroid_graphics_Bitmap_Config_;
    [NullableAttribute("2")]
private static Delegate cb_obtainByteArray_I;
    private IntPtr id_obtainByteArray_I;
    [NullableAttribute("2")]
private static Delegate cb_obtainIntArray_I;
    private IntPtr id_obtainIntArray_I;
    [NullableAttribute("2")]
private static Delegate cb_release_Landroid_graphics_Bitmap_;
    private IntPtr id_release_Landroid_graphics_Bitmap_;
    [NullableAttribute("2")]
private static Delegate cb_release_arrayB;
    private IntPtr id_release_arrayB;
    [NullableAttribute("2")]
private static Delegate cb_release_arrayI;
    private IntPtr id_release_arrayI;
    private static IntPtr java_class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public IGifDecoderBitmapProviderInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static IGifDecoderBitmapProviderInvoker();
    private static IntPtr get_java_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [NullableContextAttribute("2")]
public static IGifDecoderBitmapProvider GetObject(IntPtr handle, JniHandleOwnership transfer);
    private static IntPtr Validate(IntPtr handle);
    protected virtual void Dispose(bool disposing);
    private static Delegate GetObtain_IILandroid_graphics_Bitmap_Config_Handler();
    private static IntPtr n_Obtain_IILandroid_graphics_Bitmap_Config_(IntPtr jnienv, IntPtr native__this, int p0, int p1, IntPtr native_p2);
    public sealed virtual Bitmap Obtain(int p0, int p1, Config p2);
    private static Delegate GetObtainByteArray_IHandler();
    private static IntPtr n_ObtainByteArray_I(IntPtr jnienv, IntPtr native__this, int p0);
    public sealed virtual Byte[] ObtainByteArray(int p0);
    private static Delegate GetObtainIntArray_IHandler();
    private static IntPtr n_ObtainIntArray_I(IntPtr jnienv, IntPtr native__this, int p0);
    public sealed virtual Int32[] ObtainIntArray(int p0);
    private static Delegate GetRelease_Landroid_graphics_Bitmap_Handler();
    private static void n_Release_Landroid_graphics_Bitmap_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    public sealed virtual void Release(Bitmap p0);
    private static Delegate GetRelease_arrayBHandler();
    private static void n_Release_arrayB(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    public sealed virtual void Release(Byte[] p0);
    private static Delegate GetRelease_arrayIHandler();
    private static void n_Release_arrayI(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    public sealed virtual void Release(Int32[] p0);
}
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder$GifDecodeStatus", "", "Bumptech.Glide.GifDecoder.IGifDecoderGifDecodeStatusInvoker")]
public interface Bumptech.Glide.GifDecoder.IGifDecoderGifDecodeStatus {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder$GifDecodeStatus")]
internal class Bumptech.Glide.GifDecoder.IGifDecoderGifDecodeStatusInvoker : Object {
    private static JniPeerMembers _members;
    private IntPtr class_ref;
    [NullableAttribute("2")]
private static Delegate cb_annotationType;
    private IntPtr id_annotationType;
    [NullableAttribute("2")]
private static Delegate cb_equals_Ljava_lang_Object_;
    private IntPtr id_equals_Ljava_lang_Object_;
    [NullableAttribute("2")]
private static Delegate cb_hashCode;
    private IntPtr id_hashCode;
    [NullableAttribute("2")]
private static Delegate cb_toString;
    private IntPtr id_toString;
    private static IntPtr java_class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public IGifDecoderGifDecodeStatusInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static IGifDecoderGifDecodeStatusInvoker();
    private static IntPtr get_java_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [NullableContextAttribute("2")]
public static IGifDecoderGifDecodeStatus GetObject(IntPtr handle, JniHandleOwnership transfer);
    private static IntPtr Validate(IntPtr handle);
    protected virtual void Dispose(bool disposing);
    private static Delegate GetAnnotationTypeHandler();
    private static IntPtr n_AnnotationType(IntPtr jnienv, IntPtr native__this);
    [NullableContextAttribute("2")]
public sealed virtual Class AnnotationType();
    private static Delegate GetEquals_Ljava_lang_Object_Handler();
    private static bool n_Equals_Ljava_lang_Object_(IntPtr jnienv, IntPtr native__this, IntPtr native_obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Object obj);
    private static Delegate GetGetHashCodeHandler();
    private static int n_GetHashCode(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int GetHashCode();
    private static Delegate GetToStringHandler();
    private static IntPtr n_ToString(IntPtr jnienv, IntPtr native__this);
    [NullableContextAttribute("2")]
public sealed virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/GifDecoder")]
internal class Bumptech.Glide.GifDecoder.IGifDecoderInvoker : Object {
    private static JniPeerMembers _members;
    private IntPtr class_ref;
    [NullableAttribute("2")]
private static Delegate cb_getByteSize;
    private IntPtr id_getByteSize;
    [NullableAttribute("2")]
private static Delegate cb_getCurrentFrameIndex;
    private IntPtr id_getCurrentFrameIndex;
    [NullableAttribute("2")]
private static Delegate cb_getData;
    private IntPtr id_getData;
    [NullableAttribute("2")]
private static Delegate cb_getFrameCount;
    private IntPtr id_getFrameCount;
    [NullableAttribute("2")]
private static Delegate cb_getHeight;
    private IntPtr id_getHeight;
    [NullableAttribute("2")]
private static Delegate cb_getLoopCount;
    private IntPtr id_getLoopCount;
    [NullableAttribute("2")]
private static Delegate cb_getNetscapeLoopCount;
    private IntPtr id_getNetscapeLoopCount;
    [NullableAttribute("2")]
private static Delegate cb_getNextDelay;
    private IntPtr id_getNextDelay;
    [NullableAttribute("2")]
private static Delegate cb_getNextFrame;
    private IntPtr id_getNextFrame;
    [NullableAttribute("2")]
private static Delegate cb_getStatus;
    private IntPtr id_getStatus;
    [NullableAttribute("2")]
private static Delegate cb_getTotalIterationCount;
    private IntPtr id_getTotalIterationCount;
    [NullableAttribute("2")]
private static Delegate cb_getWidth;
    private IntPtr id_getWidth;
    [NullableAttribute("2")]
private static Delegate cb_advance;
    private IntPtr id_advance;
    [NullableAttribute("2")]
private static Delegate cb_clear;
    private IntPtr id_clear;
    [NullableAttribute("2")]
private static Delegate cb_getDelay_I;
    private IntPtr id_getDelay_I;
    [NullableAttribute("2")]
private static Delegate cb_read_arrayB;
    private IntPtr id_read_arrayB;
    [NullableAttribute("2")]
private static Delegate cb_read_Ljava_io_InputStream_I;
    private IntPtr id_read_Ljava_io_InputStream_I;
    [NullableAttribute("2")]
private static Delegate cb_resetFrameIndex;
    private IntPtr id_resetFrameIndex;
    [NullableAttribute("2")]
private static Delegate cb_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayB;
    private IntPtr id_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayB;
    [NullableAttribute("2")]
private static Delegate cb_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_;
    private IntPtr id_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_;
    [NullableAttribute("2")]
private static Delegate cb_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_I;
    private IntPtr id_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_I;
    [NullableAttribute("2")]
private static Delegate cb_setDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_;
    private IntPtr id_setDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_;
    private static IntPtr java_class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public int ByteSize { get; }
    public int CurrentFrameIndex { get; }
    public ByteBuffer Data { get; }
    public int FrameCount { get; }
    public int Height { get; }
    public int LoopCount { get; }
    public int NetscapeLoopCount { get; }
    public int NextDelay { get; }
    [NullableAttribute("2")]
public Bitmap NextFrame { get; }
    public int Status { get; }
    public int TotalIterationCount { get; }
    public int Width { get; }
    public IGifDecoderInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static IGifDecoderInvoker();
    private static IntPtr get_java_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [NullableContextAttribute("2")]
public static IGifDecoder GetObject(IntPtr handle, JniHandleOwnership transfer);
    private static IntPtr Validate(IntPtr handle);
    protected virtual void Dispose(bool disposing);
    private static Delegate GetGetByteSizeHandler();
    private static int n_GetByteSize(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_ByteSize();
    private static Delegate GetGetCurrentFrameIndexHandler();
    private static int n_GetCurrentFrameIndex(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_CurrentFrameIndex();
    private static Delegate GetGetDataHandler();
    private static IntPtr n_GetData(IntPtr jnienv, IntPtr native__this);
    public sealed virtual ByteBuffer get_Data();
    private static Delegate GetGetFrameCountHandler();
    private static int n_GetFrameCount(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_FrameCount();
    private static Delegate GetGetHeightHandler();
    private static int n_GetHeight(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_Height();
    [ObsoleteAttribute]
private static Delegate GetGetLoopCountHandler();
    [ObsoleteAttribute]
private static int n_GetLoopCount(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_LoopCount();
    private static Delegate GetGetNetscapeLoopCountHandler();
    private static int n_GetNetscapeLoopCount(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_NetscapeLoopCount();
    private static Delegate GetGetNextDelayHandler();
    private static int n_GetNextDelay(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_NextDelay();
    private static Delegate GetGetNextFrameHandler();
    private static IntPtr n_GetNextFrame(IntPtr jnienv, IntPtr native__this);
    [NullableContextAttribute("2")]
public sealed virtual Bitmap get_NextFrame();
    private static Delegate GetGetStatusHandler();
    private static int n_GetStatus(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_Status();
    private static Delegate GetGetTotalIterationCountHandler();
    private static int n_GetTotalIterationCount(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_TotalIterationCount();
    private static Delegate GetGetWidthHandler();
    private static int n_GetWidth(IntPtr jnienv, IntPtr native__this);
    public sealed virtual int get_Width();
    private static Delegate GetAdvanceHandler();
    private static void n_Advance(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void Advance();
    private static Delegate GetClearHandler();
    private static void n_Clear(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void Clear();
    private static Delegate GetGetDelay_IHandler();
    private static int n_GetDelay_I(IntPtr jnienv, IntPtr native__this, int p0);
    public sealed virtual int GetDelay(int p0);
    private static Delegate GetRead_arrayBHandler();
    private static int n_Read_arrayB(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    [NullableContextAttribute("2")]
public sealed virtual int Read(Byte[] p0);
    private static Delegate GetRead_Ljava_io_InputStream_IHandler();
    private static int n_Read_Ljava_io_InputStream_I(IntPtr jnienv, IntPtr native__this, IntPtr native_p0, int p1);
    [NullableContextAttribute("2")]
public sealed virtual int Read(Stream p0, int p1);
    private static Delegate GetResetFrameIndexHandler();
    private static void n_ResetFrameIndex(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void ResetFrameIndex();
    private static Delegate GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayBHandler();
    private static void n_SetData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayB(IntPtr jnienv, IntPtr native__this, IntPtr native_p0, IntPtr native_p1);
    public sealed virtual void SetData(GifHeader p0, Byte[] p1);
    private static Delegate GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_Handler();
    private static void n_SetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0, IntPtr native_p1);
    public sealed virtual void SetData(GifHeader p0, ByteBuffer p1);
    private static Delegate GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_IHandler();
    private static void n_SetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_I(IntPtr jnienv, IntPtr native__this, IntPtr native_p0, IntPtr native_p1, int p2);
    public sealed virtual void SetData(GifHeader p0, ByteBuffer p1, int p2);
    private static Delegate GetSetDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_Handler();
    private static void n_SetDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    public sealed virtual void SetDefaultBitmapConfig(Config p0);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("com/bumptech/glide/gifdecoder/StandardGifDecoder")]
public class Bumptech.Glide.GifDecoder.StandardGifDecoder : Object {
    private static JniPeerMembers _members;
    [NullableAttribute("2")]
private static Delegate cb_getByteSize;
    [NullableAttribute("2")]
private static Delegate cb_getCurrentFrameIndex;
    [NullableAttribute("2")]
private static Delegate cb_getData;
    [NullableAttribute("2")]
private static Delegate cb_getFrameCount;
    [NullableAttribute("2")]
private static Delegate cb_getHeight;
    [NullableAttribute("2")]
private static Delegate cb_getLoopCount;
    [NullableAttribute("2")]
private static Delegate cb_getNetscapeLoopCount;
    [NullableAttribute("2")]
private static Delegate cb_getNextDelay;
    [NullableAttribute("2")]
private static Delegate cb_getNextFrame;
    [NullableAttribute("2")]
private static Delegate cb_getStatus;
    [NullableAttribute("2")]
private static Delegate cb_getTotalIterationCount;
    [NullableAttribute("2")]
private static Delegate cb_getWidth;
    [NullableAttribute("2")]
private static Delegate cb_advance;
    [NullableAttribute("2")]
private static Delegate cb_clear;
    [NullableAttribute("2")]
private static Delegate cb_getDelay_I;
    [NullableAttribute("2")]
private static Delegate cb_read_arrayB;
    [NullableAttribute("2")]
private static Delegate cb_read_Ljava_io_InputStream_I;
    [NullableAttribute("2")]
private static Delegate cb_resetFrameIndex;
    [NullableAttribute("2")]
private static Delegate cb_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayB;
    [NullableAttribute("2")]
private static Delegate cb_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_;
    [NullableAttribute("2")]
private static Delegate cb_setData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_I;
    [NullableAttribute("2")]
private static Delegate cb_setDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_;
    internal static IntPtr class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public int ByteSize { get; }
    public int CurrentFrameIndex { get; }
    public ByteBuffer Data { get; }
    public int FrameCount { get; }
    public int Height { get; }
    [ObsoleteAttribute("deprecated")]
public int LoopCount { get; }
    public int NetscapeLoopCount { get; }
    public int NextDelay { get; }
    [NullableAttribute("2")]
public Bitmap NextFrame { get; }
    public int Status { get; }
    public int TotalIterationCount { get; }
    public int Width { get; }
    protected StandardGifDecoder(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Lcom/bumptech/glide/gifdecoder/GifDecoder$BitmapProvider;)V", "")]
public StandardGifDecoder(IGifDecoderBitmapProvider provider);
    [NullableContextAttribute("2")]
[RegisterAttribute(".ctor", "(Lcom/bumptech/glide/gifdecoder/GifDecoder$BitmapProvider;Lcom/bumptech/glide/gifdecoder/GifHeader;Ljava/nio/ByteBuffer;)V", "")]
public StandardGifDecoder(IGifDecoderBitmapProvider provider, GifHeader gifHeader, ByteBuffer rawData);
    [NullableContextAttribute("2")]
[RegisterAttribute(".ctor", "(Lcom/bumptech/glide/gifdecoder/GifDecoder$BitmapProvider;Lcom/bumptech/glide/gifdecoder/GifHeader;Ljava/nio/ByteBuffer;I)V", "")]
public StandardGifDecoder(IGifDecoderBitmapProvider provider, GifHeader gifHeader, ByteBuffer rawData, int sampleSize);
    private static StandardGifDecoder();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetByteSizeHandler();
    private static int n_GetByteSize(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getByteSize", "()I", "GetGetByteSizeHandler")]
public virtual int get_ByteSize();
    private static Delegate GetGetCurrentFrameIndexHandler();
    private static int n_GetCurrentFrameIndex(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getCurrentFrameIndex", "()I", "GetGetCurrentFrameIndexHandler")]
public virtual int get_CurrentFrameIndex();
    private static Delegate GetGetDataHandler();
    private static IntPtr n_GetData(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getData", "()Ljava/nio/ByteBuffer;", "GetGetDataHandler")]
public virtual ByteBuffer get_Data();
    private static Delegate GetGetFrameCountHandler();
    private static int n_GetFrameCount(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getFrameCount", "()I", "GetGetFrameCountHandler")]
public virtual int get_FrameCount();
    private static Delegate GetGetHeightHandler();
    private static int n_GetHeight(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getHeight", "()I", "GetGetHeightHandler")]
public virtual int get_Height();
    [ObsoleteAttribute]
private static Delegate GetGetLoopCountHandler();
    [ObsoleteAttribute]
private static int n_GetLoopCount(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getLoopCount", "()I", "GetGetLoopCountHandler")]
public virtual int get_LoopCount();
    private static Delegate GetGetNetscapeLoopCountHandler();
    private static int n_GetNetscapeLoopCount(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getNetscapeLoopCount", "()I", "GetGetNetscapeLoopCountHandler")]
public virtual int get_NetscapeLoopCount();
    private static Delegate GetGetNextDelayHandler();
    private static int n_GetNextDelay(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getNextDelay", "()I", "GetGetNextDelayHandler")]
public virtual int get_NextDelay();
    private static Delegate GetGetNextFrameHandler();
    private static IntPtr n_GetNextFrame(IntPtr jnienv, IntPtr native__this);
    [NullableContextAttribute("2")]
[RegisterAttribute("getNextFrame", "()Landroid/graphics/Bitmap;", "GetGetNextFrameHandler")]
public virtual Bitmap get_NextFrame();
    private static Delegate GetGetStatusHandler();
    private static int n_GetStatus(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getStatus", "()I", "GetGetStatusHandler")]
public virtual int get_Status();
    private static Delegate GetGetTotalIterationCountHandler();
    private static int n_GetTotalIterationCount(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getTotalIterationCount", "()I", "GetGetTotalIterationCountHandler")]
public virtual int get_TotalIterationCount();
    private static Delegate GetGetWidthHandler();
    private static int n_GetWidth(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getWidth", "()I", "GetGetWidthHandler")]
public virtual int get_Width();
    private static Delegate GetAdvanceHandler();
    private static void n_Advance(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("advance", "()V", "GetAdvanceHandler")]
public virtual void Advance();
    private static Delegate GetClearHandler();
    private static void n_Clear(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("clear", "()V", "GetClearHandler")]
public virtual void Clear();
    private static Delegate GetGetDelay_IHandler();
    private static int n_GetDelay_I(IntPtr jnienv, IntPtr native__this, int n);
    [RegisterAttribute("getDelay", "(I)I", "GetGetDelay_IHandler")]
public virtual int GetDelay(int n);
    private static Delegate GetRead_arrayBHandler();
    private static int n_Read_arrayB(IntPtr jnienv, IntPtr native__this, IntPtr native_data);
    [NullableContextAttribute("2")]
[RegisterAttribute("read", "([B)I", "GetRead_arrayBHandler")]
public virtual int Read(Byte[] data);
    private static Delegate GetRead_Ljava_io_InputStream_IHandler();
    private static int n_Read_Ljava_io_InputStream_I(IntPtr jnienv, IntPtr native__this, IntPtr native__is, int contentLength);
    [NullableContextAttribute("2")]
[RegisterAttribute("read", "(Ljava/io/InputStream;I)I", "GetRead_Ljava_io_InputStream_IHandler")]
public virtual int Read(Stream is, int contentLength);
    private static Delegate GetResetFrameIndexHandler();
    private static void n_ResetFrameIndex(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("resetFrameIndex", "()V", "GetResetFrameIndexHandler")]
public virtual void ResetFrameIndex();
    private static Delegate GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayBHandler();
    private static void n_SetData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayB(IntPtr jnienv, IntPtr native__this, IntPtr native_header, IntPtr native_data);
    [RegisterAttribute("setData", "(Lcom/bumptech/glide/gifdecoder/GifHeader;[B)V", "GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_arrayBHandler")]
public virtual void SetData(GifHeader header, Byte[] data);
    private static Delegate GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_Handler();
    private static void n_SetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_(IntPtr jnienv, IntPtr native__this, IntPtr native_header, IntPtr native_buffer);
    [RegisterAttribute("setData", "(Lcom/bumptech/glide/gifdecoder/GifHeader;Ljava/nio/ByteBuffer;)V", "GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_Handler")]
public virtual void SetData(GifHeader header, ByteBuffer buffer);
    private static Delegate GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_IHandler();
    private static void n_SetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_I(IntPtr jnienv, IntPtr native__this, IntPtr native_header, IntPtr native_buffer, int sampleSize);
    [RegisterAttribute("setData", "(Lcom/bumptech/glide/gifdecoder/GifHeader;Ljava/nio/ByteBuffer;I)V", "GetSetData_Lcom_bumptech_glide_gifdecoder_GifHeader_Ljava_nio_ByteBuffer_IHandler")]
public virtual void SetData(GifHeader header, ByteBuffer buffer, int sampleSize);
    private static Delegate GetSetDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_Handler();
    private static void n_SetDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_(IntPtr jnienv, IntPtr native__this, IntPtr native_config);
    [RegisterAttribute("setDefaultBitmapConfig", "(Landroid/graphics/Bitmap$Config;)V", "GetSetDefaultBitmapConfig_Landroid_graphics_Bitmap_Config_Handler")]
public virtual void SetDefaultBitmapConfig(Config config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Java.Interop.__TypeRegistrations : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] package_com_bumptech_glide_gifdecoder_mappings;
    public static void RegisterPackages();
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2057")]
private static Type Lookup(String[] mappings, string javaType);
    private static Type lookup_com_bumptech_glide_gifdecoder_package(string klass);
}
