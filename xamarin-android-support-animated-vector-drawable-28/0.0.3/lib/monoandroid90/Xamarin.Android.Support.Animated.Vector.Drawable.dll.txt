[RegisterAttribute("android/support/graphics/drawable/Animatable2Compat$AnimationCallback")]
public abstract class Android.Support.Graphics.Drawable.Animatable2CompatAnimationCallback : Object {
    internal static JniPeerMembers _members;
    private static Delegate cb_onAnimationEnd_Landroid_graphics_drawable_Drawable_;
    private static Delegate cb_onAnimationStart_Landroid_graphics_drawable_Drawable_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    protected Animatable2CompatAnimationCallback(IntPtr javaReference, JniHandleOwnership transfer);
    private static Animatable2CompatAnimationCallback();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetOnAnimationEnd_Landroid_graphics_drawable_Drawable_Handler();
    private static void n_OnAnimationEnd_Landroid_graphics_drawable_Drawable_(IntPtr jnienv, IntPtr native__this, IntPtr native_drawable);
    [RegisterAttribute("onAnimationEnd", "(Landroid/graphics/drawable/Drawable;)V", "GetOnAnimationEnd_Landroid_graphics_drawable_Drawable_Handler")]
public virtual void OnAnimationEnd(Drawable drawable);
    private static Delegate GetOnAnimationStart_Landroid_graphics_drawable_Drawable_Handler();
    private static void n_OnAnimationStart_Landroid_graphics_drawable_Drawable_(IntPtr jnienv, IntPtr native__this, IntPtr native_drawable);
    [RegisterAttribute("onAnimationStart", "(Landroid/graphics/drawable/Drawable;)V", "GetOnAnimationStart_Landroid_graphics_drawable_Drawable_Handler")]
public virtual void OnAnimationStart(Drawable drawable);
}
[RegisterAttribute("android/support/graphics/drawable/Animatable2Compat$AnimationCallback")]
internal class Android.Support.Graphics.Drawable.Animatable2CompatAnimationCallbackInvoker : Animatable2CompatAnimationCallback {
    internal static JniPeerMembers _members;
    public JniPeerMembers JniPeerMembers { get; }
    protected Type ThresholdType { get; }
    public Animatable2CompatAnimationCallbackInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static Animatable2CompatAnimationCallbackInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/graphics/drawable/AnimatedVectorDrawableCompat")]
public class Android.Support.Graphics.Drawable.AnimatedVectorDrawableCompat : VectorDrawableCommon {
    internal static JniPeerMembers _members;
    private static Delegate cb_isRunning;
    private static Delegate cb_getOpacity;
    private static Delegate cb_clearAnimationCallbacks;
    private static Delegate cb_draw_Landroid_graphics_Canvas_;
    private static Delegate cb_registerAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_;
    private static Delegate cb_setAlpha_I;
    private static Delegate cb_setColorFilter_Landroid_graphics_ColorFilter_;
    private static Delegate cb_start;
    private static Delegate cb_stop;
    private static Delegate cb_unregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool IsRunning { get; }
    public int Opacity { get; }
    protected AnimatedVectorDrawableCompat(IntPtr javaReference, JniHandleOwnership transfer);
    private static AnimatedVectorDrawableCompat();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetIsRunningHandler();
    private static bool n_IsRunning(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isRunning", "()Z", "GetIsRunningHandler")]
public virtual bool get_IsRunning();
    private static Delegate GetGetOpacityHandler();
    private static int n_GetOpacity(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getOpacity", "()I", "GetGetOpacityHandler")]
public virtual int get_Opacity();
    private static Delegate GetClearAnimationCallbacksHandler();
    private static void n_ClearAnimationCallbacks(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("clearAnimationCallbacks", "()V", "GetClearAnimationCallbacksHandler")]
public virtual void ClearAnimationCallbacks();
    [RegisterAttribute("clearAnimationCallbacks", "(Landroid/graphics/drawable/Drawable;)V", "")]
public static void ClearAnimationCallbacks(Drawable dr);
    [RegisterAttribute("create", "(Landroid/content/Context;I)Landroid/support/graphics/drawable/AnimatedVectorDrawableCompat;", "")]
public static AnimatedVectorDrawableCompat Create(Context context, int resId);
    [RegisterAttribute("createFromXmlInner", "(Landroid/content/Context;Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)Landroid/support/graphics/drawable/AnimatedVectorDrawableCompat;", "")]
public static AnimatedVectorDrawableCompat CreateFromXmlInner(Context context, Resources r, XmlReader parser, IAttributeSet attrs, Theme theme);
    private static Delegate GetDraw_Landroid_graphics_Canvas_Handler();
    private static void n_Draw_Landroid_graphics_Canvas_(IntPtr jnienv, IntPtr native__this, IntPtr native_canvas);
    [RegisterAttribute("draw", "(Landroid/graphics/Canvas;)V", "GetDraw_Landroid_graphics_Canvas_Handler")]
public virtual void Draw(Canvas canvas);
    [RegisterAttribute("registerAnimationCallback", "(Landroid/graphics/drawable/Drawable;Landroid/support/graphics/drawable/Animatable2Compat$AnimationCallback;)V", "")]
public static void RegisterAnimationCallback(Drawable dr, Animatable2CompatAnimationCallback callback);
    private static Delegate GetRegisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler();
    private static void n_RegisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native__callback);
    [RegisterAttribute("registerAnimationCallback", "(Landroid/support/graphics/drawable/Animatable2Compat$AnimationCallback;)V", "GetRegisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler")]
public virtual void RegisterAnimationCallback(Animatable2CompatAnimationCallback callback);
    private static Delegate GetSetAlpha_IHandler();
    private static void n_SetAlpha_I(IntPtr jnienv, IntPtr native__this, int alpha);
    [RegisterAttribute("setAlpha", "(I)V", "GetSetAlpha_IHandler")]
public virtual void SetAlpha(int alpha);
    private static Delegate GetSetColorFilter_Landroid_graphics_ColorFilter_Handler();
    private static void n_SetColorFilter_Landroid_graphics_ColorFilter_(IntPtr jnienv, IntPtr native__this, IntPtr native_colorFilter);
    [RegisterAttribute("setColorFilter", "(Landroid/graphics/ColorFilter;)V", "GetSetColorFilter_Landroid_graphics_ColorFilter_Handler")]
public virtual void SetColorFilter(ColorFilter colorFilter);
    private static Delegate GetStartHandler();
    private static void n_Start(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("start", "()V", "GetStartHandler")]
public virtual void Start();
    private static Delegate GetStopHandler();
    private static void n_Stop(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("stop", "()V", "GetStopHandler")]
public virtual void Stop();
    [RegisterAttribute("unregisterAnimationCallback", "(Landroid/graphics/drawable/Drawable;Landroid/support/graphics/drawable/Animatable2Compat$AnimationCallback;)Z", "")]
public static bool UnregisterAnimationCallback(Drawable dr, Animatable2CompatAnimationCallback callback);
    private static Delegate GetUnregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler();
    private static bool n_UnregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native__callback);
    [RegisterAttribute("unregisterAnimationCallback", "(Landroid/support/graphics/drawable/Animatable2Compat$AnimationCallback;)Z", "GetUnregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler")]
public virtual bool UnregisterAnimationCallback(Animatable2CompatAnimationCallback callback);
}
[RegisterAttribute("android/support/graphics/drawable/AnimationUtilsCompat")]
public class Android.Support.Graphics.Drawable.AnimationUtilsCompat : Object {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    protected AnimationUtilsCompat(IntPtr javaReference, JniHandleOwnership transfer);
    private static AnimationUtilsCompat();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("loadInterpolator", "(Landroid/content/Context;I)Landroid/view/animation/Interpolator;", "")]
public static IInterpolator LoadInterpolator(Context context, int id);
}
[RegisterAttribute("android/support/graphics/drawable/AnimatorInflaterCompat")]
public class Android.Support.Graphics.Drawable.AnimatorInflaterCompat : Object {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    protected AnimatorInflaterCompat(IntPtr javaReference, JniHandleOwnership transfer);
    private static AnimatorInflaterCompat();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("loadAnimator", "(Landroid/content/Context;Landroid/content/res/Resources;Landroid/content/res/Resources$Theme;I)Landroid/animation/Animator;", "")]
public static Animator LoadAnimator(Context context, Resources resources, Theme theme, int id);
    [RegisterAttribute("loadAnimator", "(Landroid/content/Context;Landroid/content/res/Resources;Landroid/content/res/Resources$Theme;IF)Landroid/animation/Animator;", "")]
public static Animator LoadAnimator(Context context, Resources resources, Theme theme, int id, float pathErrorScale);
    [RegisterAttribute("loadAnimator", "(Landroid/content/Context;I)Landroid/animation/Animator;", "")]
public static Animator LoadAnimator(Context context, int id);
}
[RegisterAttribute("android/support/graphics/drawable/ArgbEvaluator")]
public class Android.Support.Graphics.Drawable.ArgbEvaluator : Object {
    internal static JniPeerMembers _members;
    private static Delegate cb_evaluate_FLjava_lang_Object_Ljava_lang_Object_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public static ArgbEvaluator Instance { get; }
    protected ArgbEvaluator(IntPtr javaReference, JniHandleOwnership transfer);
    private static ArgbEvaluator();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getInstance", "()Landroid/support/graphics/drawable/ArgbEvaluator;", "GetGetInstanceHandler")]
public static ArgbEvaluator get_Instance();
    private static Delegate GetEvaluate_FLjava_lang_Object_Ljava_lang_Object_Handler();
    private static IntPtr n_Evaluate_FLjava_lang_Object_Ljava_lang_Object_(IntPtr jnienv, IntPtr native__this, float fraction, IntPtr native_startValue, IntPtr native_endValue);
    [RegisterAttribute("evaluate", "(FLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "GetEvaluate_FLjava_lang_Object_Ljava_lang_Object_Handler")]
public virtual Object Evaluate(float fraction, Object startValue, Object endValue);
}
[RegisterAttribute("android/support/graphics/drawable/Animatable2Compat", "", "Android.Support.Graphics.Drawable.IAnimatable2CompatInvoker")]
public interface Android.Support.Graphics.Drawable.IAnimatable2Compat {
    [RegisterAttribute("clearAnimationCallbacks", "()V", "GetClearAnimationCallbacksHandler:Android.Support.Graphics.Drawable.IAnimatable2CompatInvoker, Xamarin.Android.Support.Animated.Vector.Drawable")]
public abstract virtual void ClearAnimationCallbacks();
    [RegisterAttribute("registerAnimationCallback", "(Landroid/support/graphics/drawable/Animatable2Compat$AnimationCallback;)V", "GetRegisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler:Android.Support.Graphics.Drawable.IAnimatable2CompatInvoker, Xamarin.Android.Support.Animated.Vector.Drawable")]
public abstract virtual void RegisterAnimationCallback(Animatable2CompatAnimationCallback callback);
    [RegisterAttribute("unregisterAnimationCallback", "(Landroid/support/graphics/drawable/Animatable2Compat$AnimationCallback;)Z", "GetUnregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler:Android.Support.Graphics.Drawable.IAnimatable2CompatInvoker, Xamarin.Android.Support.Animated.Vector.Drawable")]
public abstract virtual bool UnregisterAnimationCallback(Animatable2CompatAnimationCallback callback);
}
[RegisterAttribute("android/support/graphics/drawable/Animatable2Compat")]
internal class Android.Support.Graphics.Drawable.IAnimatable2CompatInvoker : Object {
    internal static JniPeerMembers _members;
    private IntPtr class_ref;
    private static Delegate cb_clearAnimationCallbacks;
    private IntPtr id_clearAnimationCallbacks;
    private static Delegate cb_registerAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_;
    private IntPtr id_registerAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_;
    private static Delegate cb_unregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_;
    private IntPtr id_unregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_;
    private static Delegate cb_isRunning;
    private IntPtr id_isRunning;
    private static Delegate cb_start;
    private IntPtr id_start;
    private static Delegate cb_stop;
    private IntPtr id_stop;
    private static IntPtr java_class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool IsRunning { get; }
    public IAnimatable2CompatInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static IAnimatable2CompatInvoker();
    private static IntPtr get_java_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    public static IAnimatable2Compat GetObject(IntPtr handle, JniHandleOwnership transfer);
    private static IntPtr Validate(IntPtr handle);
    protected virtual void Dispose(bool disposing);
    private static Delegate GetClearAnimationCallbacksHandler();
    private static void n_ClearAnimationCallbacks(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void ClearAnimationCallbacks();
    private static Delegate GetRegisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler();
    private static void n_RegisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_callback);
    public sealed virtual void RegisterAnimationCallback(Animatable2CompatAnimationCallback callback);
    private static Delegate GetUnregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_Handler();
    private static bool n_UnregisterAnimationCallback_Landroid_support_graphics_drawable_Animatable2Compat_AnimationCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_callback);
    public sealed virtual bool UnregisterAnimationCallback(Animatable2CompatAnimationCallback callback);
    private static Delegate GetIsRunningHandler();
    private static bool n_IsRunning(IntPtr jnienv, IntPtr native__this);
    public sealed virtual bool get_IsRunning();
    private static Delegate GetStartHandler();
    private static void n_Start(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void Start();
    private static Delegate GetStopHandler();
    private static void n_Stop(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void Stop();
}
[RegisterAttribute("android/support/graphics/drawable/PathInterpolatorCompat")]
public class Android.Support.Graphics.Drawable.PathInterpolatorCompat : Object {
    [RegisterAttribute("EPSILON")]
public static double Epsilon;
    [RegisterAttribute("MAX_NUM_POINTS")]
public static int MaxNumPoints;
    internal static JniPeerMembers _members;
    private static Delegate cb_getInterpolation_F;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    protected PathInterpolatorCompat(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;Lorg/xmlpull/v1/XmlPullParser;)V", "")]
public PathInterpolatorCompat(Context context, IAttributeSet attrs, XmlReader parser);
    [RegisterAttribute(".ctor", "(Landroid/content/res/Resources;Landroid/content/res/Resources$Theme;Landroid/util/AttributeSet;Lorg/xmlpull/v1/XmlPullParser;)V", "")]
public PathInterpolatorCompat(Resources res, Theme theme, IAttributeSet attrs, XmlReader parser);
    private static PathInterpolatorCompat();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetInterpolation_FHandler();
    private static float n_GetInterpolation_F(IntPtr jnienv, IntPtr native__this, float t);
    [RegisterAttribute("getInterpolation", "(F)F", "GetGetInterpolation_FHandler")]
public virtual float GetInterpolation(float t);
}
internal class Java.Interop.__TypeRegistrations : object {
    private static String[] package_android_support_graphics_drawable_mappings;
    public static void RegisterPackages();
    private static Type Lookup(String[] mappings, string javaType);
    private static Type lookup_android_support_graphics_drawable_package(string klass);
}
