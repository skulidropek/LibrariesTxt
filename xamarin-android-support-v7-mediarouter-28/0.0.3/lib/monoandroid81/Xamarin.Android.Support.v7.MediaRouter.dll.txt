[RegisterAttribute("android/support/v7/app/MediaRouteActionProvider")]
public class Android.Support.V7.App.MediaRouteActionProvider : ActionProvider {
    internal static JniPeerMembers _members;
    private static Delegate cb_getDialogFactory;
    private static Delegate cb_setDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_;
    private static Delegate cb_getMediaRouteButton;
    private static Delegate cb_getRouteSelector;
    private static Delegate cb_setRouteSelector_Landroid_support_v7_media_MediaRouteSelector_;
    private static Delegate cb_onCreateActionView;
    private static Delegate cb_onCreateMediaRouteButton;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public MediaRouteDialogFactory DialogFactory { get; public set; }
    public MediaRouteButton MediaRouteButton { get; }
    public MediaRouteSelector RouteSelector { get; public set; }
    protected MediaRouteActionProvider(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;)V", "")]
public MediaRouteActionProvider(Context context);
    private static MediaRouteActionProvider();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetDialogFactoryHandler();
    private static IntPtr n_GetDialogFactory(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_Handler();
    private static void n_SetDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_(IntPtr jnienv, IntPtr native__this, IntPtr native_factory);
    [RegisterAttribute("getDialogFactory", "()Landroid/support/v7/app/MediaRouteDialogFactory;", "GetGetDialogFactoryHandler")]
public virtual MediaRouteDialogFactory get_DialogFactory();
    [RegisterAttribute("setDialogFactory", "(Landroid/support/v7/app/MediaRouteDialogFactory;)V", "GetSetDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_Handler")]
public virtual void set_DialogFactory(MediaRouteDialogFactory value);
    private static Delegate GetGetMediaRouteButtonHandler();
    private static IntPtr n_GetMediaRouteButton(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getMediaRouteButton", "()Landroid/support/v7/app/MediaRouteButton;", "GetGetMediaRouteButtonHandler")]
public virtual MediaRouteButton get_MediaRouteButton();
    private static Delegate GetGetRouteSelectorHandler();
    private static IntPtr n_GetRouteSelector(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler();
    private static void n_SetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_(IntPtr jnienv, IntPtr native__this, IntPtr native_selector);
    [RegisterAttribute("getRouteSelector", "()Landroid/support/v7/media/MediaRouteSelector;", "GetGetRouteSelectorHandler")]
public virtual MediaRouteSelector get_RouteSelector();
    [RegisterAttribute("setRouteSelector", "(Landroid/support/v7/media/MediaRouteSelector;)V", "GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler")]
public virtual void set_RouteSelector(MediaRouteSelector value);
    private static Delegate GetOnCreateActionViewHandler();
    private static IntPtr n_OnCreateActionView(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onCreateActionView", "()Landroid/view/View;", "GetOnCreateActionViewHandler")]
public virtual View OnCreateActionView();
    private static Delegate GetOnCreateMediaRouteButtonHandler();
    private static IntPtr n_OnCreateMediaRouteButton(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onCreateMediaRouteButton", "()Landroid/support/v7/app/MediaRouteButton;", "GetOnCreateMediaRouteButtonHandler")]
public virtual MediaRouteButton OnCreateMediaRouteButton();
}
[RegisterAttribute("android/support/v7/app/MediaRouteButton")]
public class Android.Support.V7.App.MediaRouteButton : View {
    internal static JniPeerMembers _members;
    private static Delegate cb_getDialogFactory;
    private static Delegate cb_setDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_;
    private static Delegate cb_getRouteSelector;
    private static Delegate cb_setRouteSelector_Landroid_support_v7_media_MediaRouteSelector_;
    private static Delegate cb_onAttachedToWindow;
    private static Delegate cb_onDetachedFromWindow;
    private static Delegate cb_setRemoteIndicatorDrawable_Landroid_graphics_drawable_Drawable_;
    private static Delegate cb_showDialog;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public MediaRouteDialogFactory DialogFactory { get; public set; }
    public MediaRouteSelector RouteSelector { get; public set; }
    protected MediaRouteButton(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;)V", "")]
public MediaRouteButton(Context context);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")]
public MediaRouteButton(Context context, IAttributeSet attrs);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V", "")]
public MediaRouteButton(Context context, IAttributeSet attrs, int defStyleAttr);
    private static MediaRouteButton();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetDialogFactoryHandler();
    private static IntPtr n_GetDialogFactory(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_Handler();
    private static void n_SetDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_(IntPtr jnienv, IntPtr native__this, IntPtr native_factory);
    [RegisterAttribute("getDialogFactory", "()Landroid/support/v7/app/MediaRouteDialogFactory;", "GetGetDialogFactoryHandler")]
public virtual MediaRouteDialogFactory get_DialogFactory();
    [RegisterAttribute("setDialogFactory", "(Landroid/support/v7/app/MediaRouteDialogFactory;)V", "GetSetDialogFactory_Landroid_support_v7_app_MediaRouteDialogFactory_Handler")]
public virtual void set_DialogFactory(MediaRouteDialogFactory value);
    private static Delegate GetGetRouteSelectorHandler();
    private static IntPtr n_GetRouteSelector(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler();
    private static void n_SetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_(IntPtr jnienv, IntPtr native__this, IntPtr native_selector);
    [RegisterAttribute("getRouteSelector", "()Landroid/support/v7/media/MediaRouteSelector;", "GetGetRouteSelectorHandler")]
public virtual MediaRouteSelector get_RouteSelector();
    [RegisterAttribute("setRouteSelector", "(Landroid/support/v7/media/MediaRouteSelector;)V", "GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler")]
public virtual void set_RouteSelector(MediaRouteSelector value);
    private static Delegate GetOnAttachedToWindowHandler();
    private static void n_OnAttachedToWindow(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onAttachedToWindow", "()V", "GetOnAttachedToWindowHandler")]
public virtual void OnAttachedToWindow();
    private static Delegate GetOnDetachedFromWindowHandler();
    private static void n_OnDetachedFromWindow(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onDetachedFromWindow", "()V", "GetOnDetachedFromWindowHandler")]
public virtual void OnDetachedFromWindow();
    private static Delegate GetSetRemoteIndicatorDrawable_Landroid_graphics_drawable_Drawable_Handler();
    private static void n_SetRemoteIndicatorDrawable_Landroid_graphics_drawable_Drawable_(IntPtr jnienv, IntPtr native__this, IntPtr native_d);
    [RegisterAttribute("setRemoteIndicatorDrawable", "(Landroid/graphics/drawable/Drawable;)V", "GetSetRemoteIndicatorDrawable_Landroid_graphics_drawable_Drawable_Handler")]
public virtual void SetRemoteIndicatorDrawable(Drawable d);
    private static Delegate GetShowDialogHandler();
    private static bool n_ShowDialog(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("showDialog", "()Z", "GetShowDialogHandler")]
public virtual bool ShowDialog();
}
[RegisterAttribute("android/support/v7/app/MediaRouteChooserDialogFragment")]
public class Android.Support.V7.App.MediaRouteChooserDialogFragment : DialogFragment {
    internal static JniPeerMembers _members;
    private static Delegate cb_getRouteSelector;
    private static Delegate cb_setRouteSelector_Landroid_support_v7_media_MediaRouteSelector_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public MediaRouteSelector RouteSelector { get; public set; }
    protected MediaRouteChooserDialogFragment(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteChooserDialogFragment();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetRouteSelectorHandler();
    private static IntPtr n_GetRouteSelector(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler();
    private static void n_SetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_(IntPtr jnienv, IntPtr native__this, IntPtr native_selector);
    [RegisterAttribute("getRouteSelector", "()Landroid/support/v7/media/MediaRouteSelector;", "GetGetRouteSelectorHandler")]
public virtual MediaRouteSelector get_RouteSelector();
    [RegisterAttribute("setRouteSelector", "(Landroid/support/v7/media/MediaRouteSelector;)V", "GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler")]
public virtual void set_RouteSelector(MediaRouteSelector value);
}
[RegisterAttribute("android/support/v7/app/MediaRouteControllerDialogFragment")]
public class Android.Support.V7.App.MediaRouteControllerDialogFragment : DialogFragment {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    protected MediaRouteControllerDialogFragment(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteControllerDialogFragment();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/v7/app/MediaRouteDialogFactory")]
public class Android.Support.V7.App.MediaRouteDialogFactory : Object {
    internal static JniPeerMembers _members;
    private static Delegate cb_onCreateChooserDialogFragment;
    private static Delegate cb_onCreateControllerDialogFragment;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public static MediaRouteDialogFactory Default { get; }
    protected MediaRouteDialogFactory(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteDialogFactory();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getDefault", "()Landroid/support/v7/app/MediaRouteDialogFactory;", "GetGetDefaultHandler")]
public static MediaRouteDialogFactory get_Default();
    private static Delegate GetOnCreateChooserDialogFragmentHandler();
    private static IntPtr n_OnCreateChooserDialogFragment(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onCreateChooserDialogFragment", "()Landroid/support/v7/app/MediaRouteChooserDialogFragment;", "GetOnCreateChooserDialogFragmentHandler")]
public virtual MediaRouteChooserDialogFragment OnCreateChooserDialogFragment();
    private static Delegate GetOnCreateControllerDialogFragmentHandler();
    private static IntPtr n_OnCreateControllerDialogFragment(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onCreateControllerDialogFragment", "()Landroid/support/v7/app/MediaRouteControllerDialogFragment;", "GetOnCreateControllerDialogFragmentHandler")]
public virtual MediaRouteControllerDialogFragment OnCreateControllerDialogFragment();
}
[RegisterAttribute("android/support/v7/app/MediaRouteDiscoveryFragment")]
public class Android.Support.V7.App.MediaRouteDiscoveryFragment : Fragment {
    internal static JniPeerMembers _members;
    private static Delegate cb_getMediaRouter;
    private static Delegate cb_getRouteSelector;
    private static Delegate cb_setRouteSelector_Landroid_support_v7_media_MediaRouteSelector_;
    private static Delegate cb_onCreateCallback;
    private static Delegate cb_onPrepareCallbackFlags;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public MediaRouter MediaRouter { get; }
    public MediaRouteSelector RouteSelector { get; public set; }
    protected MediaRouteDiscoveryFragment(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteDiscoveryFragment();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetMediaRouterHandler();
    private static IntPtr n_GetMediaRouter(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getMediaRouter", "()Landroid/support/v7/media/MediaRouter;", "GetGetMediaRouterHandler")]
public virtual MediaRouter get_MediaRouter();
    private static Delegate GetGetRouteSelectorHandler();
    private static IntPtr n_GetRouteSelector(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler();
    private static void n_SetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_(IntPtr jnienv, IntPtr native__this, IntPtr native_selector);
    [RegisterAttribute("getRouteSelector", "()Landroid/support/v7/media/MediaRouteSelector;", "GetGetRouteSelectorHandler")]
public virtual MediaRouteSelector get_RouteSelector();
    [RegisterAttribute("setRouteSelector", "(Landroid/support/v7/media/MediaRouteSelector;)V", "GetSetRouteSelector_Landroid_support_v7_media_MediaRouteSelector_Handler")]
public virtual void set_RouteSelector(MediaRouteSelector value);
    private static Delegate GetOnCreateCallbackHandler();
    private static IntPtr n_OnCreateCallback(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onCreateCallback", "()Landroid/support/v7/media/MediaRouter$Callback;", "GetOnCreateCallbackHandler")]
public virtual Callback OnCreateCallback();
    private static Delegate GetOnPrepareCallbackFlagsHandler();
    private static int n_OnPrepareCallbackFlags(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onPrepareCallbackFlags", "()I", "GetOnPrepareCallbackFlagsHandler")]
public virtual int OnPrepareCallbackFlags();
}
[RegisterAttribute("android/support/v7/media/MediaControlIntent")]
public class Android.Support.V7.Media.MediaControlIntent : Object {
    [RegisterAttribute("ACTION_END_SESSION")]
public static string ActionEndSession;
    [RegisterAttribute("ACTION_ENQUEUE")]
public static string ActionEnqueue;
    [RegisterAttribute("ACTION_GET_SESSION_STATUS")]
public static string ActionGetSessionStatus;
    [RegisterAttribute("ACTION_GET_STATUS")]
public static string ActionGetStatus;
    [RegisterAttribute("ACTION_PAUSE")]
public static string ActionPause;
    [RegisterAttribute("ACTION_PLAY")]
public static string ActionPlay;
    [RegisterAttribute("ACTION_REMOVE")]
public static string ActionRemove;
    [RegisterAttribute("ACTION_RESUME")]
public static string ActionResume;
    [RegisterAttribute("ACTION_SEEK")]
public static string ActionSeek;
    [RegisterAttribute("ACTION_SEND_MESSAGE")]
public static string ActionSendMessage;
    [RegisterAttribute("ACTION_START_SESSION")]
public static string ActionStartSession;
    [RegisterAttribute("ACTION_STOP")]
public static string ActionStop;
    [RegisterAttribute("CATEGORY_LIVE_AUDIO")]
public static string CategoryLiveAudio;
    [RegisterAttribute("CATEGORY_LIVE_VIDEO")]
public static string CategoryLiveVideo;
    [RegisterAttribute("CATEGORY_REMOTE_PLAYBACK")]
public static string CategoryRemotePlayback;
    [RegisterAttribute("ERROR_INVALID_ITEM_ID")]
public static int ErrorInvalidItemId;
    [RegisterAttribute("ERROR_INVALID_SESSION_ID")]
public static int ErrorInvalidSessionId;
    [RegisterAttribute("ERROR_UNKNOWN")]
public static int ErrorUnknown;
    [RegisterAttribute("ERROR_UNSUPPORTED_OPERATION")]
public static int ErrorUnsupportedOperation;
    [RegisterAttribute("EXTRA_ERROR_CODE")]
public static string ExtraErrorCode;
    [RegisterAttribute("EXTRA_ITEM_CONTENT_POSITION")]
public static string ExtraItemContentPosition;
    [RegisterAttribute("EXTRA_ITEM_HTTP_HEADERS")]
public static string ExtraItemHttpHeaders;
    [RegisterAttribute("EXTRA_ITEM_ID")]
public static string ExtraItemId;
    [RegisterAttribute("EXTRA_ITEM_METADATA")]
public static string ExtraItemMetadata;
    [RegisterAttribute("EXTRA_ITEM_STATUS")]
public static string ExtraItemStatus;
    [RegisterAttribute("EXTRA_ITEM_STATUS_UPDATE_RECEIVER")]
public static string ExtraItemStatusUpdateReceiver;
    [RegisterAttribute("EXTRA_MESSAGE")]
public static string ExtraMessage;
    [RegisterAttribute("EXTRA_MESSAGE_RECEIVER")]
public static string ExtraMessageReceiver;
    [RegisterAttribute("EXTRA_SESSION_ID")]
public static string ExtraSessionId;
    [RegisterAttribute("EXTRA_SESSION_STATUS")]
public static string ExtraSessionStatus;
    [RegisterAttribute("EXTRA_SESSION_STATUS_UPDATE_RECEIVER")]
public static string ExtraSessionStatusUpdateReceiver;
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    internal MediaControlIntent(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaControlIntent();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/v7/media/MediaItemMetadata")]
public class Android.Support.V7.Media.MediaItemMetadata : Object {
    [RegisterAttribute("KEY_ALBUM_ARTIST")]
public static string KeyAlbumArtist;
    [RegisterAttribute("KEY_ALBUM_TITLE")]
public static string KeyAlbumTitle;
    [RegisterAttribute("KEY_ARTIST")]
public static string KeyArtist;
    [RegisterAttribute("KEY_ARTWORK_URI")]
public static string KeyArtworkUri;
    [RegisterAttribute("KEY_AUTHOR")]
public static string KeyAuthor;
    [RegisterAttribute("KEY_COMPOSER")]
public static string KeyComposer;
    [RegisterAttribute("KEY_DISC_NUMBER")]
public static string KeyDiscNumber;
    [RegisterAttribute("KEY_DURATION")]
public static string KeyDuration;
    [RegisterAttribute("KEY_TITLE")]
public static string KeyTitle;
    [RegisterAttribute("KEY_TRACK_NUMBER")]
public static string KeyTrackNumber;
    [RegisterAttribute("KEY_YEAR")]
public static string KeyYear;
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    internal MediaItemMetadata(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaItemMetadata();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/v7/media/MediaItemStatus")]
public class Android.Support.V7.Media.MediaItemStatus : Object {
    [RegisterAttribute("EXTRA_HTTP_RESPONSE_HEADERS")]
public static string ExtraHttpResponseHeaders;
    [RegisterAttribute("EXTRA_HTTP_STATUS_CODE")]
public static string ExtraHttpStatusCode;
    [RegisterAttribute("PLAYBACK_STATE_BUFFERING")]
public static int PlaybackStateBuffering;
    [RegisterAttribute("PLAYBACK_STATE_CANCELED")]
public static int PlaybackStateCanceled;
    [RegisterAttribute("PLAYBACK_STATE_ERROR")]
public static int PlaybackStateError;
    [RegisterAttribute("PLAYBACK_STATE_FINISHED")]
public static int PlaybackStateFinished;
    [RegisterAttribute("PLAYBACK_STATE_INVALIDATED")]
public static int PlaybackStateInvalidated;
    [RegisterAttribute("PLAYBACK_STATE_PAUSED")]
public static int PlaybackStatePaused;
    [RegisterAttribute("PLAYBACK_STATE_PENDING")]
public static int PlaybackStatePending;
    [RegisterAttribute("PLAYBACK_STATE_PLAYING")]
public static int PlaybackStatePlaying;
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public long ContentDuration { get; }
    public long ContentPosition { get; }
    public Bundle Extras { get; }
    public int PlaybackState { get; }
    public long Timestamp { get; }
    internal MediaItemStatus(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaItemStatus();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getContentDuration", "()J", "GetGetContentDurationHandler")]
public long get_ContentDuration();
    [RegisterAttribute("getContentPosition", "()J", "GetGetContentPositionHandler")]
public long get_ContentPosition();
    [RegisterAttribute("getExtras", "()Landroid/os/Bundle;", "GetGetExtrasHandler")]
public Bundle get_Extras();
    [RegisterAttribute("getPlaybackState", "()I", "GetGetPlaybackStateHandler")]
public int get_PlaybackState();
    [RegisterAttribute("getTimestamp", "()J", "GetGetTimestampHandler")]
public long get_Timestamp();
    [RegisterAttribute("asBundle", "()Landroid/os/Bundle;", "")]
public Bundle AsBundle();
    [RegisterAttribute("fromBundle", "(Landroid/os/Bundle;)Landroid/support/v7/media/MediaItemStatus;", "")]
public static MediaItemStatus FromBundle(Bundle bundle);
}
[RegisterAttribute("android/support/v7/media/MediaRouteDescriptor")]
public class Android.Support.V7.Media.MediaRouteDescriptor : Object {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public int ConnectionState { get; }
    public IList`1<IntentFilter> ControlFilters { get; }
    public string Description { get; }
    public int DeviceType { get; }
    public Bundle Extras { get; }
    public IList`1<string> GroupMemberIds { get; }
    public Uri IconUri { get; }
    public string Id { get; }
    [ObsoleteAttribute("deprecated")]
public bool IsConnecting { get; }
    public bool IsEnabled { get; }
    public bool IsValid { get; }
    public int MaxClientVersion { get; }
    public int MinClientVersion { get; }
    public string Name { get; }
    public int PlaybackStream { get; }
    public int PlaybackType { get; }
    public int PresentationDisplayId { get; }
    public IntentSender SettingsActivity { get; }
    public int Volume { get; }
    public int VolumeHandling { get; }
    public int VolumeMax { get; }
    internal MediaRouteDescriptor(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteDescriptor();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getConnectionState", "()I", "GetGetConnectionStateHandler")]
public int get_ConnectionState();
    [RegisterAttribute("getControlFilters", "()Ljava/util/List;", "GetGetControlFiltersHandler")]
public IList`1<IntentFilter> get_ControlFilters();
    [RegisterAttribute("getDescription", "()Ljava/lang/String;", "GetGetDescriptionHandler")]
public string get_Description();
    [RegisterAttribute("getDeviceType", "()I", "GetGetDeviceTypeHandler")]
public int get_DeviceType();
    [RegisterAttribute("getExtras", "()Landroid/os/Bundle;", "GetGetExtrasHandler")]
public Bundle get_Extras();
    [RegisterAttribute("getGroupMemberIds", "()Ljava/util/List;", "GetGetGroupMemberIdsHandler")]
public IList`1<string> get_GroupMemberIds();
    [RegisterAttribute("getIconUri", "()Landroid/net/Uri;", "GetGetIconUriHandler")]
public Uri get_IconUri();
    [RegisterAttribute("getId", "()Ljava/lang/String;", "GetGetIdHandler")]
public string get_Id();
    [RegisterAttribute("isConnecting", "()Z", "GetIsConnectingHandler")]
public bool get_IsConnecting();
    [RegisterAttribute("isEnabled", "()Z", "GetIsEnabledHandler")]
public bool get_IsEnabled();
    [RegisterAttribute("isValid", "()Z", "GetIsValidHandler")]
public bool get_IsValid();
    [RegisterAttribute("getMaxClientVersion", "()I", "GetGetMaxClientVersionHandler")]
public int get_MaxClientVersion();
    [RegisterAttribute("getMinClientVersion", "()I", "GetGetMinClientVersionHandler")]
public int get_MinClientVersion();
    [RegisterAttribute("getName", "()Ljava/lang/String;", "GetGetNameHandler")]
public string get_Name();
    [RegisterAttribute("getPlaybackStream", "()I", "GetGetPlaybackStreamHandler")]
public int get_PlaybackStream();
    [RegisterAttribute("getPlaybackType", "()I", "GetGetPlaybackTypeHandler")]
public int get_PlaybackType();
    [RegisterAttribute("getPresentationDisplayId", "()I", "GetGetPresentationDisplayIdHandler")]
public int get_PresentationDisplayId();
    [RegisterAttribute("getSettingsActivity", "()Landroid/content/IntentSender;", "GetGetSettingsActivityHandler")]
public IntentSender get_SettingsActivity();
    [RegisterAttribute("getVolume", "()I", "GetGetVolumeHandler")]
public int get_Volume();
    [RegisterAttribute("getVolumeHandling", "()I", "GetGetVolumeHandlingHandler")]
public int get_VolumeHandling();
    [RegisterAttribute("getVolumeMax", "()I", "GetGetVolumeMaxHandler")]
public int get_VolumeMax();
    [RegisterAttribute("asBundle", "()Landroid/os/Bundle;", "")]
public Bundle AsBundle();
    [RegisterAttribute("canDisconnectAndKeepPlaying", "()Z", "")]
public bool CanDisconnectAndKeepPlaying();
    [RegisterAttribute("fromBundle", "(Landroid/os/Bundle;)Landroid/support/v7/media/MediaRouteDescriptor;", "")]
public static MediaRouteDescriptor FromBundle(Bundle bundle);
}
[RegisterAttribute("android/support/v7/media/MediaRouteDiscoveryRequest")]
public class Android.Support.V7.Media.MediaRouteDiscoveryRequest : Object {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool IsActiveScan { get; }
    public bool IsValid { get; }
    public MediaRouteSelector Selector { get; }
    internal MediaRouteDiscoveryRequest(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/support/v7/media/MediaRouteSelector;Z)V", "")]
public MediaRouteDiscoveryRequest(MediaRouteSelector selector, bool activeScan);
    private static MediaRouteDiscoveryRequest();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("isActiveScan", "()Z", "GetIsActiveScanHandler")]
public bool get_IsActiveScan();
    [RegisterAttribute("isValid", "()Z", "GetIsValidHandler")]
public bool get_IsValid();
    [RegisterAttribute("getSelector", "()Landroid/support/v7/media/MediaRouteSelector;", "GetGetSelectorHandler")]
public MediaRouteSelector get_Selector();
    [RegisterAttribute("asBundle", "()Landroid/os/Bundle;", "")]
public Bundle AsBundle();
    [RegisterAttribute("fromBundle", "(Landroid/os/Bundle;)Landroid/support/v7/media/MediaRouteDiscoveryRequest;", "")]
public static MediaRouteDiscoveryRequest FromBundle(Bundle bundle);
}
[RegisterAttribute("android/support/v7/media/MediaRouteProvider")]
public abstract class Android.Support.V7.Media.MediaRouteProvider : Object {
    internal static JniPeerMembers _members;
    private static Delegate cb_onCreateRouteController_Ljava_lang_String_;
    private static Delegate cb_onCreateRouteController_Ljava_lang_String_Ljava_lang_String_;
    private static Delegate cb_onDiscoveryRequestChanged_Landroid_support_v7_media_MediaRouteDiscoveryRequest_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public Context Context { get; }
    public MediaRouteProviderDescriptor Descriptor { get; public set; }
    public MediaRouteDiscoveryRequest DiscoveryRequest { get; public set; }
    public Handler Handler { get; }
    public ProviderMetadata Metadata { get; }
    protected MediaRouteProvider(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;)V", "")]
public MediaRouteProvider(Context context);
    private static MediaRouteProvider();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getContext", "()Landroid/content/Context;", "GetGetContextHandler")]
public Context get_Context();
    [RegisterAttribute("getDescriptor", "()Landroid/support/v7/media/MediaRouteProviderDescriptor;", "GetGetDescriptorHandler")]
public MediaRouteProviderDescriptor get_Descriptor();
    [RegisterAttribute("setDescriptor", "(Landroid/support/v7/media/MediaRouteProviderDescriptor;)V", "GetSetDescriptor_Landroid_support_v7_media_MediaRouteProviderDescriptor_Handler")]
public void set_Descriptor(MediaRouteProviderDescriptor value);
    [RegisterAttribute("getDiscoveryRequest", "()Landroid/support/v7/media/MediaRouteDiscoveryRequest;", "GetGetDiscoveryRequestHandler")]
public MediaRouteDiscoveryRequest get_DiscoveryRequest();
    [RegisterAttribute("setDiscoveryRequest", "(Landroid/support/v7/media/MediaRouteDiscoveryRequest;)V", "GetSetDiscoveryRequest_Landroid_support_v7_media_MediaRouteDiscoveryRequest_Handler")]
public void set_DiscoveryRequest(MediaRouteDiscoveryRequest value);
    [RegisterAttribute("getHandler", "()Landroid/os/Handler;", "GetGetHandlerHandler")]
public Handler get_Handler();
    [RegisterAttribute("getMetadata", "()Landroid/support/v7/media/MediaRouteProvider$ProviderMetadata;", "GetGetMetadataHandler")]
public ProviderMetadata get_Metadata();
    private static Delegate GetOnCreateRouteController_Ljava_lang_String_Handler();
    private static IntPtr n_OnCreateRouteController_Ljava_lang_String_(IntPtr jnienv, IntPtr native__this, IntPtr native_routeId);
    [RegisterAttribute("onCreateRouteController", "(Ljava/lang/String;)Landroid/support/v7/media/MediaRouteProvider$RouteController;", "GetOnCreateRouteController_Ljava_lang_String_Handler")]
public virtual RouteController OnCreateRouteController(string routeId);
    private static Delegate GetOnCreateRouteController_Ljava_lang_String_Ljava_lang_String_Handler();
    private static IntPtr n_OnCreateRouteController_Ljava_lang_String_Ljava_lang_String_(IntPtr jnienv, IntPtr native__this, IntPtr native_routeId, IntPtr native_routeGroupId);
    [RegisterAttribute("onCreateRouteController", "(Ljava/lang/String;Ljava/lang/String;)Landroid/support/v7/media/MediaRouteProvider$RouteController;", "GetOnCreateRouteController_Ljava_lang_String_Ljava_lang_String_Handler")]
public virtual RouteController OnCreateRouteController(string routeId, string routeGroupId);
    private static Delegate GetOnDiscoveryRequestChanged_Landroid_support_v7_media_MediaRouteDiscoveryRequest_Handler();
    private static void n_OnDiscoveryRequestChanged_Landroid_support_v7_media_MediaRouteDiscoveryRequest_(IntPtr jnienv, IntPtr native__this, IntPtr native_request);
    [RegisterAttribute("onDiscoveryRequestChanged", "(Landroid/support/v7/media/MediaRouteDiscoveryRequest;)V", "GetOnDiscoveryRequestChanged_Landroid_support_v7_media_MediaRouteDiscoveryRequest_Handler")]
public virtual void OnDiscoveryRequestChanged(MediaRouteDiscoveryRequest request);
    [RegisterAttribute("setCallback", "(Landroid/support/v7/media/MediaRouteProvider$Callback;)V", "")]
public void SetCallback(Callback callback);
}
[RegisterAttribute("android/support/v7/media/MediaRouteProviderDescriptor")]
public class Android.Support.V7.Media.MediaRouteProviderDescriptor : Object {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool IsValid { get; }
    public IList`1<MediaRouteDescriptor> Routes { get; }
    internal MediaRouteProviderDescriptor(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteProviderDescriptor();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("isValid", "()Z", "GetIsValidHandler")]
public bool get_IsValid();
    [RegisterAttribute("getRoutes", "()Ljava/util/List;", "GetGetRoutesHandler")]
public IList`1<MediaRouteDescriptor> get_Routes();
    [RegisterAttribute("asBundle", "()Landroid/os/Bundle;", "")]
public Bundle AsBundle();
    [RegisterAttribute("fromBundle", "(Landroid/os/Bundle;)Landroid/support/v7/media/MediaRouteProviderDescriptor;", "")]
public static MediaRouteProviderDescriptor FromBundle(Bundle bundle);
}
[RegisterAttribute("android/support/v7/media/MediaRouteProvider")]
internal class Android.Support.V7.Media.MediaRouteProviderInvoker : MediaRouteProvider {
    internal static JniPeerMembers _members;
    public JniPeerMembers JniPeerMembers { get; }
    protected Type ThresholdType { get; }
    public MediaRouteProviderInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static MediaRouteProviderInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/v7/media/MediaRouteProviderService")]
public abstract class Android.Support.V7.Media.MediaRouteProviderService : Service {
    [RegisterAttribute("SERVICE_INTERFACE")]
public static string ServiceInterface;
    internal static JniPeerMembers _members;
    private static Delegate cb_getMediaRouteProvider;
    private static Delegate cb_onBind_Landroid_content_Intent_;
    private static Delegate cb_onCreateMediaRouteProvider;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public MediaRouteProvider MediaRouteProvider { get; }
    protected MediaRouteProviderService(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteProviderService();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetMediaRouteProviderHandler();
    private static IntPtr n_GetMediaRouteProvider(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getMediaRouteProvider", "()Landroid/support/v7/media/MediaRouteProvider;", "GetGetMediaRouteProviderHandler")]
public virtual MediaRouteProvider get_MediaRouteProvider();
    private static Delegate GetOnBind_Landroid_content_Intent_Handler();
    private static IntPtr n_OnBind_Landroid_content_Intent_(IntPtr jnienv, IntPtr native__this, IntPtr native_intent);
    [RegisterAttribute("onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;", "GetOnBind_Landroid_content_Intent_Handler")]
public virtual IBinder OnBind(Intent intent);
    private static Delegate GetOnCreateMediaRouteProviderHandler();
    private static IntPtr n_OnCreateMediaRouteProvider(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("onCreateMediaRouteProvider", "()Landroid/support/v7/media/MediaRouteProvider;", "GetOnCreateMediaRouteProviderHandler")]
public abstract virtual MediaRouteProvider OnCreateMediaRouteProvider();
}
[RegisterAttribute("android/support/v7/media/MediaRouteProviderService")]
internal class Android.Support.V7.Media.MediaRouteProviderServiceInvoker : MediaRouteProviderService {
    internal static JniPeerMembers _members;
    public JniPeerMembers JniPeerMembers { get; }
    protected Type ThresholdType { get; }
    public MediaRouteProviderServiceInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static MediaRouteProviderServiceInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("onCreateMediaRouteProvider", "()Landroid/support/v7/media/MediaRouteProvider;", "GetOnCreateMediaRouteProviderHandler")]
public virtual MediaRouteProvider OnCreateMediaRouteProvider();
}
[RegisterAttribute("android/support/v7/media/MediaRouter")]
public class Android.Support.V7.Media.MediaRouter : Object {
    [RegisterAttribute("AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE")]
public static int AvailabilityFlagIgnoreDefaultRoute;
    [RegisterAttribute("AVAILABILITY_FLAG_REQUIRE_MATCH")]
public static int AvailabilityFlagRequireMatch;
    [RegisterAttribute("CALLBACK_FLAG_FORCE_DISCOVERY")]
public static int CallbackFlagForceDiscovery;
    [RegisterAttribute("CALLBACK_FLAG_PERFORM_ACTIVE_SCAN")]
public static int CallbackFlagPerformActiveScan;
    [RegisterAttribute("CALLBACK_FLAG_REQUEST_DISCOVERY")]
public static int CallbackFlagRequestDiscovery;
    [RegisterAttribute("CALLBACK_FLAG_UNFILTERED_EVENTS")]
public static int CallbackFlagUnfilteredEvents;
    [RegisterAttribute("UNSELECT_REASON_DISCONNECTED")]
public static int UnselectReasonDisconnected;
    [RegisterAttribute("UNSELECT_REASON_ROUTE_CHANGED")]
public static int UnselectReasonRouteChanged;
    [RegisterAttribute("UNSELECT_REASON_STOPPED")]
public static int UnselectReasonStopped;
    [RegisterAttribute("UNSELECT_REASON_UNKNOWN")]
public static int UnselectReasonUnknown;
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public RouteInfo BluetoothRoute { get; }
    public RouteInfo DefaultRoute { get; }
    public Token MediaSessionToken { get; }
    public IList`1<ProviderInfo> Providers { get; }
    public IList`1<RouteInfo> Routes { get; }
    public RouteInfo SelectedRoute { get; }
    internal MediaRouter(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouter();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getBluetoothRoute", "()Landroid/support/v7/media/MediaRouter$RouteInfo;", "GetGetBluetoothRouteHandler")]
public RouteInfo get_BluetoothRoute();
    [RegisterAttribute("getDefaultRoute", "()Landroid/support/v7/media/MediaRouter$RouteInfo;", "GetGetDefaultRouteHandler")]
public RouteInfo get_DefaultRoute();
    [RegisterAttribute("getMediaSessionToken", "()Landroid/support/v4/media/session/MediaSessionCompat$Token;", "GetGetMediaSessionTokenHandler")]
public Token get_MediaSessionToken();
    [RegisterAttribute("getProviders", "()Ljava/util/List;", "GetGetProvidersHandler")]
public IList`1<ProviderInfo> get_Providers();
    [RegisterAttribute("getRoutes", "()Ljava/util/List;", "GetGetRoutesHandler")]
public IList`1<RouteInfo> get_Routes();
    [RegisterAttribute("getSelectedRoute", "()Landroid/support/v7/media/MediaRouter$RouteInfo;", "GetGetSelectedRouteHandler")]
public RouteInfo get_SelectedRoute();
    [RegisterAttribute("addCallback", "(Landroid/support/v7/media/MediaRouteSelector;Landroid/support/v7/media/MediaRouter$Callback;)V", "")]
public void AddCallback(MediaRouteSelector selector, Callback callback);
    [RegisterAttribute("addCallback", "(Landroid/support/v7/media/MediaRouteSelector;Landroid/support/v7/media/MediaRouter$Callback;I)V", "")]
public void AddCallback(MediaRouteSelector selector, Callback callback, int flags);
    [RegisterAttribute("addProvider", "(Landroid/support/v7/media/MediaRouteProvider;)V", "")]
public void AddProvider(MediaRouteProvider providerInstance);
    [RegisterAttribute("addRemoteControlClient", "(Ljava/lang/Object;)V", "")]
public void AddRemoteControlClient(Object remoteControlClient);
    [RegisterAttribute("getInstance", "(Landroid/content/Context;)Landroid/support/v7/media/MediaRouter;", "")]
public static MediaRouter GetInstance(Context context);
    [RegisterAttribute("isRouteAvailable", "(Landroid/support/v7/media/MediaRouteSelector;I)Z", "")]
public bool IsRouteAvailable(MediaRouteSelector selector, int flags);
    [RegisterAttribute("removeCallback", "(Landroid/support/v7/media/MediaRouter$Callback;)V", "")]
public void RemoveCallback(Callback callback);
    [RegisterAttribute("removeProvider", "(Landroid/support/v7/media/MediaRouteProvider;)V", "")]
public void RemoveProvider(MediaRouteProvider providerInstance);
    [RegisterAttribute("removeRemoteControlClient", "(Ljava/lang/Object;)V", "")]
public void RemoveRemoteControlClient(Object remoteControlClient);
    [RegisterAttribute("selectRoute", "(Landroid/support/v7/media/MediaRouter$RouteInfo;)V", "")]
public void SelectRoute(RouteInfo route);
    [RegisterAttribute("setMediaSession", "(Ljava/lang/Object;)V", "")]
public void SetMediaSession(Object mediaSession);
    [RegisterAttribute("setMediaSessionCompat", "(Landroid/support/v4/media/session/MediaSessionCompat;)V", "")]
public void SetMediaSessionCompat(MediaSessionCompat mediaSession);
    [RegisterAttribute("unselect", "(I)V", "")]
public void Unselect(int reason);
    [RegisterAttribute("updateSelectedRoute", "(Landroid/support/v7/media/MediaRouteSelector;)Landroid/support/v7/media/MediaRouter$RouteInfo;", "")]
public RouteInfo UpdateSelectedRoute(MediaRouteSelector selector);
}
[RegisterAttribute("android/support/v7/media/MediaRouteSelector")]
public class Android.Support.V7.Media.MediaRouteSelector : Object {
    internal static JniPeerMembers _members;
    [RegisterAttribute("EMPTY")]
public static MediaRouteSelector Empty { get; }
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public IList`1<string> ControlCategories { get; }
    public bool IsEmpty { get; }
    public bool IsValid { get; }
    internal MediaRouteSelector(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaRouteSelector();
    public static MediaRouteSelector get_Empty();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getControlCategories", "()Ljava/util/List;", "GetGetControlCategoriesHandler")]
public IList`1<string> get_ControlCategories();
    [RegisterAttribute("isEmpty", "()Z", "GetIsEmptyHandler")]
public bool get_IsEmpty();
    [RegisterAttribute("isValid", "()Z", "GetIsValidHandler")]
public bool get_IsValid();
    [RegisterAttribute("asBundle", "()Landroid/os/Bundle;", "")]
public Bundle AsBundle();
    [RegisterAttribute("contains", "(Landroid/support/v7/media/MediaRouteSelector;)Z", "")]
public bool Contains(MediaRouteSelector selector);
    [RegisterAttribute("fromBundle", "(Landroid/os/Bundle;)Landroid/support/v7/media/MediaRouteSelector;", "")]
public static MediaRouteSelector FromBundle(Bundle bundle);
    [RegisterAttribute("hasControlCategory", "(Ljava/lang/String;)Z", "")]
public bool HasControlCategory(string category);
    [RegisterAttribute("matchesControlFilters", "(Ljava/util/List;)Z", "")]
public bool MatchesControlFilters(IList`1<IntentFilter> filters);
}
[RegisterAttribute("android/support/v7/media/MediaSessionStatus")]
public class Android.Support.V7.Media.MediaSessionStatus : Object {
    [RegisterAttribute("SESSION_STATE_ACTIVE")]
public static int SessionStateActive;
    [RegisterAttribute("SESSION_STATE_ENDED")]
public static int SessionStateEnded;
    [RegisterAttribute("SESSION_STATE_INVALIDATED")]
public static int SessionStateInvalidated;
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public Bundle Extras { get; }
    public bool IsQueuePaused { get; }
    public int SessionState { get; }
    public long Timestamp { get; }
    internal MediaSessionStatus(IntPtr javaReference, JniHandleOwnership transfer);
    private static MediaSessionStatus();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getExtras", "()Landroid/os/Bundle;", "GetGetExtrasHandler")]
public Bundle get_Extras();
    [RegisterAttribute("isQueuePaused", "()Z", "GetIsQueuePausedHandler")]
public bool get_IsQueuePaused();
    [RegisterAttribute("getSessionState", "()I", "GetGetSessionStateHandler")]
public int get_SessionState();
    [RegisterAttribute("getTimestamp", "()J", "GetGetTimestampHandler")]
public long get_Timestamp();
    [RegisterAttribute("asBundle", "()Landroid/os/Bundle;", "")]
public Bundle AsBundle();
    [RegisterAttribute("fromBundle", "(Landroid/os/Bundle;)Landroid/support/v7/media/MediaSessionStatus;", "")]
public static MediaSessionStatus FromBundle(Bundle bundle);
}
[RegisterAttribute("android/support/v7/media/RegisteredMediaRouteProviderWatcher")]
public class Android.Support.V7.Media.RegisteredMediaRouteProviderWatcher : Object {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    internal RegisteredMediaRouteProviderWatcher(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;Landroid/support/v7/media/RegisteredMediaRouteProviderWatcher$Callback;)V", "")]
public RegisteredMediaRouteProviderWatcher(Context context, ICallback callback);
    private static RegisteredMediaRouteProviderWatcher();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("start", "()V", "")]
public void Start();
    [RegisterAttribute("stop", "()V", "")]
public void Stop();
}
[RegisterAttribute("android/support/v7/media/RemoteControlClientCompat")]
public abstract class Android.Support.V7.Media.RemoteControlClientCompat : Object {
    internal static JniPeerMembers _members;
    private static Delegate cb_getRemoteControlClient;
    private static Delegate cb_setPlaybackInfo_Landroid_support_v7_media_RemoteControlClientCompat_PlaybackInfo_;
    private static Delegate cb_setVolumeCallback_Landroid_support_v7_media_RemoteControlClientCompat_VolumeCallback_;
    [RegisterAttribute("mContext")]
protected Context MContext { get; protected set; }
    [RegisterAttribute("mRcc")]
protected Object MRcc { get; protected set; }
    [RegisterAttribute("mVolumeCallback")]
protected IVolumeCallback MVolumeCallback { get; protected set; }
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public Object RemoteControlClient { get; }
    protected RemoteControlClientCompat(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;Ljava/lang/Object;)V", "")]
protected RemoteControlClientCompat(Context context, Object rcc);
    private static RemoteControlClientCompat();
    protected Context get_MContext();
    protected void set_MContext(Context value);
    protected Object get_MRcc();
    protected void set_MRcc(Object value);
    protected IVolumeCallback get_MVolumeCallback();
    protected void set_MVolumeCallback(IVolumeCallback value);
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetRemoteControlClientHandler();
    private static IntPtr n_GetRemoteControlClient(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getRemoteControlClient", "()Ljava/lang/Object;", "GetGetRemoteControlClientHandler")]
public virtual Object get_RemoteControlClient();
    [RegisterAttribute("obtain", "(Landroid/content/Context;Ljava/lang/Object;)Ljava/lang/Object;", "")]
public static Object Obtain(Context context, Object rcc);
    private static Delegate GetSetPlaybackInfo_Landroid_support_v7_media_RemoteControlClientCompat_PlaybackInfo_Handler();
    private static void n_SetPlaybackInfo_Landroid_support_v7_media_RemoteControlClientCompat_PlaybackInfo_(IntPtr jnienv, IntPtr native__this, IntPtr native_info);
    [RegisterAttribute("setPlaybackInfo", "(Landroid/support/v7/media/RemoteControlClientCompat$PlaybackInfo;)V", "GetSetPlaybackInfo_Landroid_support_v7_media_RemoteControlClientCompat_PlaybackInfo_Handler")]
public virtual void SetPlaybackInfo(PlaybackInfo info);
    private static Delegate GetSetVolumeCallback_Landroid_support_v7_media_RemoteControlClientCompat_VolumeCallback_Handler();
    private static void n_SetVolumeCallback_Landroid_support_v7_media_RemoteControlClientCompat_VolumeCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native__callback);
    [RegisterAttribute("setVolumeCallback", "(Landroid/support/v7/media/RemoteControlClientCompat$VolumeCallback;)V", "GetSetVolumeCallback_Landroid_support_v7_media_RemoteControlClientCompat_VolumeCallback_Handler")]
public virtual void SetVolumeCallback(IVolumeCallback callback);
}
[RegisterAttribute("android/support/v7/media/RemoteControlClientCompat")]
internal class Android.Support.V7.Media.RemoteControlClientCompatInvoker : RemoteControlClientCompat {
    internal static JniPeerMembers _members;
    public JniPeerMembers JniPeerMembers { get; }
    protected Type ThresholdType { get; }
    public RemoteControlClientCompatInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static RemoteControlClientCompatInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/v7/media/RemotePlaybackClient")]
public class Android.Support.V7.Media.RemotePlaybackClient : Object {
    internal static JniPeerMembers _members;
    private static Delegate cb_hasSession;
    private static Delegate cb_isMessagingSupported;
    private static Delegate cb_isQueuingSupported;
    private static Delegate cb_isRemotePlaybackSupported;
    private static Delegate cb_isSessionManagementSupported;
    private static Delegate cb_getSessionId;
    private static Delegate cb_setSessionId_Ljava_lang_String_;
    private static Delegate cb_endSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_;
    private static Delegate cb_enqueue_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_;
    private static Delegate cb_getSessionStatus_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_;
    private static Delegate cb_getStatus_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_;
    private static Delegate cb_pause_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_;
    private static Delegate cb_play_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_;
    private static Delegate cb_release;
    private static Delegate cb_remove_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_;
    private static Delegate cb_resume_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_;
    private static Delegate cb_seek_Ljava_lang_String_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_;
    private static Delegate cb_sendMessage_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_;
    private static Delegate cb_setOnMessageReceivedListener_Landroid_support_v7_media_RemotePlaybackClient_OnMessageReceivedListener_;
    private static Delegate cb_setStatusCallback_Landroid_support_v7_media_RemotePlaybackClient_StatusCallback_;
    private static Delegate cb_startSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_;
    private static Delegate cb_stop_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_;
    private WeakReference weak_implementor_SetOnMessageReceivedListener;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool HasSession { get; }
    public bool IsMessagingSupported { get; }
    public bool IsQueuingSupported { get; }
    public bool IsRemotePlaybackSupported { get; }
    public bool IsSessionManagementSupported { get; }
    public string SessionId { get; public set; }
    protected RemotePlaybackClient(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;Landroid/support/v7/media/MediaRouter$RouteInfo;)V", "")]
public RemotePlaybackClient(Context context, RouteInfo route);
    private static RemotePlaybackClient();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetHasSessionHandler();
    private static bool n_HasSession(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("hasSession", "()Z", "GetHasSessionHandler")]
public virtual bool get_HasSession();
    private static Delegate GetIsMessagingSupportedHandler();
    private static bool n_IsMessagingSupported(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isMessagingSupported", "()Z", "GetIsMessagingSupportedHandler")]
public virtual bool get_IsMessagingSupported();
    private static Delegate GetIsQueuingSupportedHandler();
    private static bool n_IsQueuingSupported(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isQueuingSupported", "()Z", "GetIsQueuingSupportedHandler")]
public virtual bool get_IsQueuingSupported();
    private static Delegate GetIsRemotePlaybackSupportedHandler();
    private static bool n_IsRemotePlaybackSupported(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isRemotePlaybackSupported", "()Z", "GetIsRemotePlaybackSupportedHandler")]
public virtual bool get_IsRemotePlaybackSupported();
    private static Delegate GetIsSessionManagementSupportedHandler();
    private static bool n_IsSessionManagementSupported(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("isSessionManagementSupported", "()Z", "GetIsSessionManagementSupportedHandler")]
public virtual bool get_IsSessionManagementSupported();
    private static Delegate GetGetSessionIdHandler();
    private static IntPtr n_GetSessionId(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetSessionId_Ljava_lang_String_Handler();
    private static void n_SetSessionId_Ljava_lang_String_(IntPtr jnienv, IntPtr native__this, IntPtr native_sessionId);
    [RegisterAttribute("getSessionId", "()Ljava/lang/String;", "GetGetSessionIdHandler")]
public virtual string get_SessionId();
    [RegisterAttribute("setSessionId", "(Ljava/lang/String;)V", "GetSetSessionId_Ljava_lang_String_Handler")]
public virtual void set_SessionId(string value);
    private static Delegate GetEndSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler();
    private static void n_EndSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("endSession", "(Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$SessionActionCallback;)V", "GetEndSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler")]
public virtual void EndSession(Bundle extras, SessionActionCallback callback);
    private static Delegate GetEnqueue_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler();
    private static void n_Enqueue_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_contentUri, IntPtr native_mimeType, IntPtr native_metadata, long positionMillis, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("enqueue", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;JLandroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$ItemActionCallback;)V", "GetEnqueue_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler")]
public virtual void Enqueue(Uri contentUri, string mimeType, Bundle metadata, long positionMillis, Bundle extras, ItemActionCallback callback);
    private static Delegate GetGetSessionStatus_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler();
    private static void n_GetSessionStatus_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("getSessionStatus", "(Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$SessionActionCallback;)V", "GetGetSessionStatus_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler")]
public virtual void GetSessionStatus(Bundle extras, SessionActionCallback callback);
    private static Delegate GetGetStatus_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler();
    private static void n_GetStatus_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_itemId, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("getStatus", "(Ljava/lang/String;Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$ItemActionCallback;)V", "GetGetStatus_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler")]
public virtual void GetStatus(string itemId, Bundle extras, ItemActionCallback callback);
    private static Delegate GetPause_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler();
    private static void n_Pause_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("pause", "(Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$SessionActionCallback;)V", "GetPause_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler")]
public virtual void Pause(Bundle extras, SessionActionCallback callback);
    private static Delegate GetPlay_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler();
    private static void n_Play_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_contentUri, IntPtr native_mimeType, IntPtr native_metadata, long positionMillis, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("play", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;JLandroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$ItemActionCallback;)V", "GetPlay_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler")]
public virtual void Play(Uri contentUri, string mimeType, Bundle metadata, long positionMillis, Bundle extras, ItemActionCallback callback);
    private static Delegate GetReleaseHandler();
    private static void n_Release(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("release", "()V", "GetReleaseHandler")]
public virtual void Release();
    private static Delegate GetRemove_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler();
    private static void n_Remove_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_itemId, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("remove", "(Ljava/lang/String;Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$ItemActionCallback;)V", "GetRemove_Ljava_lang_String_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler")]
public virtual void Remove(string itemId, Bundle extras, ItemActionCallback callback);
    private static Delegate GetResume_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler();
    private static void n_Resume_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("resume", "(Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$SessionActionCallback;)V", "GetResume_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler")]
public virtual void Resume(Bundle extras, SessionActionCallback callback);
    private static Delegate GetSeek_Ljava_lang_String_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler();
    private static void n_Seek_Ljava_lang_String_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_itemId, long positionMillis, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("seek", "(Ljava/lang/String;JLandroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$ItemActionCallback;)V", "GetSeek_Ljava_lang_String_JLandroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_ItemActionCallback_Handler")]
public virtual void Seek(string itemId, long positionMillis, Bundle extras, ItemActionCallback callback);
    private static Delegate GetSendMessage_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler();
    private static void n_SendMessage_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_message, IntPtr native_callback);
    [RegisterAttribute("sendMessage", "(Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$SessionActionCallback;)V", "GetSendMessage_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler")]
public virtual void SendMessage(Bundle message, SessionActionCallback callback);
    private static Delegate GetSetOnMessageReceivedListener_Landroid_support_v7_media_RemotePlaybackClient_OnMessageReceivedListener_Handler();
    private static void n_SetOnMessageReceivedListener_Landroid_support_v7_media_RemotePlaybackClient_OnMessageReceivedListener_(IntPtr jnienv, IntPtr native__this, IntPtr native_listener);
    [RegisterAttribute("setOnMessageReceivedListener", "(Landroid/support/v7/media/RemotePlaybackClient$OnMessageReceivedListener;)V", "GetSetOnMessageReceivedListener_Landroid_support_v7_media_RemotePlaybackClient_OnMessageReceivedListener_Handler")]
public virtual void SetOnMessageReceivedListener(IOnMessageReceivedListener listener);
    private static Delegate GetSetStatusCallback_Landroid_support_v7_media_RemotePlaybackClient_StatusCallback_Handler();
    private static void n_SetStatusCallback_Landroid_support_v7_media_RemotePlaybackClient_StatusCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_callback);
    [RegisterAttribute("setStatusCallback", "(Landroid/support/v7/media/RemotePlaybackClient$StatusCallback;)V", "GetSetStatusCallback_Landroid_support_v7_media_RemotePlaybackClient_StatusCallback_Handler")]
public virtual void SetStatusCallback(StatusCallback callback);
    private static Delegate GetStartSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler();
    private static void n_StartSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("startSession", "(Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$SessionActionCallback;)V", "GetStartSession_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler")]
public virtual void StartSession(Bundle extras, SessionActionCallback callback);
    private static Delegate GetStop_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler();
    private static void n_Stop_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_(IntPtr jnienv, IntPtr native__this, IntPtr native_extras, IntPtr native_callback);
    [RegisterAttribute("stop", "(Landroid/os/Bundle;Landroid/support/v7/media/RemotePlaybackClient$SessionActionCallback;)V", "GetStop_Landroid_os_Bundle_Landroid_support_v7_media_RemotePlaybackClient_SessionActionCallback_Handler")]
public virtual void Stop(Bundle extras, SessionActionCallback callback);
    public void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    public void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    private IOnMessageReceivedListenerImplementor __CreateIOnMessageReceivedListenerImplementor();
}
[RegisterAttribute("android/support/v7/media/SystemMediaRouteProvider")]
public abstract class Android.Support.V7.Media.SystemMediaRouteProvider : MediaRouteProvider {
    [RegisterAttribute("DEFAULT_ROUTE_ID")]
public static string DefaultRouteId;
    [RegisterAttribute("PACKAGE_NAME")]
public static string PackageName;
    internal static JniPeerMembers _members;
    private static Delegate cb_getDefaultRoute;
    private static Delegate cb_getSystemRoute_Landroid_support_v7_media_MediaRouter_RouteInfo_;
    private static Delegate cb_onSyncRouteAdded_Landroid_support_v7_media_MediaRouter_RouteInfo_;
    private static Delegate cb_onSyncRouteChanged_Landroid_support_v7_media_MediaRouter_RouteInfo_;
    private static Delegate cb_onSyncRouteRemoved_Landroid_support_v7_media_MediaRouter_RouteInfo_;
    private static Delegate cb_onSyncRouteSelected_Landroid_support_v7_media_MediaRouter_RouteInfo_;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    protected Object DefaultRoute { get; }
    protected SystemMediaRouteProvider(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/content/Context;)V", "")]
protected SystemMediaRouteProvider(Context context);
    private static SystemMediaRouteProvider();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetDefaultRouteHandler();
    private static IntPtr n_GetDefaultRoute(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getDefaultRoute", "()Ljava/lang/Object;", "GetGetDefaultRouteHandler")]
protected virtual Object get_DefaultRoute();
    private static Delegate GetGetSystemRoute_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler();
    private static IntPtr n_GetSystemRoute_Landroid_support_v7_media_MediaRouter_RouteInfo_(IntPtr jnienv, IntPtr native__this, IntPtr native_route);
    [RegisterAttribute("getSystemRoute", "(Landroid/support/v7/media/MediaRouter$RouteInfo;)Ljava/lang/Object;", "GetGetSystemRoute_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler")]
protected virtual Object GetSystemRoute(RouteInfo route);
    [RegisterAttribute("obtain", "(Landroid/content/Context;Landroid/support/v7/media/SystemMediaRouteProvider$SyncCallback;)Landroid/support/v7/media/MediaRouteProvider;", "")]
public static MediaRouteProvider Obtain(Context context, ISyncCallback syncCallback);
    private static Delegate GetOnSyncRouteAdded_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler();
    private static void n_OnSyncRouteAdded_Landroid_support_v7_media_MediaRouter_RouteInfo_(IntPtr jnienv, IntPtr native__this, IntPtr native_route);
    [RegisterAttribute("onSyncRouteAdded", "(Landroid/support/v7/media/MediaRouter$RouteInfo;)V", "GetOnSyncRouteAdded_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler")]
public virtual void OnSyncRouteAdded(RouteInfo route);
    private static Delegate GetOnSyncRouteChanged_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler();
    private static void n_OnSyncRouteChanged_Landroid_support_v7_media_MediaRouter_RouteInfo_(IntPtr jnienv, IntPtr native__this, IntPtr native_route);
    [RegisterAttribute("onSyncRouteChanged", "(Landroid/support/v7/media/MediaRouter$RouteInfo;)V", "GetOnSyncRouteChanged_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler")]
public virtual void OnSyncRouteChanged(RouteInfo route);
    private static Delegate GetOnSyncRouteRemoved_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler();
    private static void n_OnSyncRouteRemoved_Landroid_support_v7_media_MediaRouter_RouteInfo_(IntPtr jnienv, IntPtr native__this, IntPtr native_route);
    [RegisterAttribute("onSyncRouteRemoved", "(Landroid/support/v7/media/MediaRouter$RouteInfo;)V", "GetOnSyncRouteRemoved_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler")]
public virtual void OnSyncRouteRemoved(RouteInfo route);
    private static Delegate GetOnSyncRouteSelected_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler();
    private static void n_OnSyncRouteSelected_Landroid_support_v7_media_MediaRouter_RouteInfo_(IntPtr jnienv, IntPtr native__this, IntPtr native_route);
    [RegisterAttribute("onSyncRouteSelected", "(Landroid/support/v7/media/MediaRouter$RouteInfo;)V", "GetOnSyncRouteSelected_Landroid_support_v7_media_MediaRouter_RouteInfo_Handler")]
public virtual void OnSyncRouteSelected(RouteInfo route);
}
[RegisterAttribute("android/support/v7/media/SystemMediaRouteProvider")]
internal class Android.Support.V7.Media.SystemMediaRouteProviderInvoker : SystemMediaRouteProvider {
    internal static JniPeerMembers _members;
    public JniPeerMembers JniPeerMembers { get; }
    protected Type ThresholdType { get; }
    public SystemMediaRouteProviderInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static SystemMediaRouteProviderInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/v7/mediarouter/BuildConfig")]
public class Android.Support.V7.Mediarouter.BuildConfig : Object {
    [RegisterAttribute("APPLICATION_ID")]
public static string ApplicationId;
    [RegisterAttribute("BUILD_TYPE")]
public static string BuildType;
    [RegisterAttribute("DEBUG")]
public static bool Debug;
    [RegisterAttribute("FLAVOR")]
public static string Flavor;
    [RegisterAttribute("VERSION_CODE")]
public static int VersionCode;
    [RegisterAttribute("VERSION_NAME")]
public static string VersionName;
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    internal BuildConfig(IntPtr javaReference, JniHandleOwnership transfer);
    private static BuildConfig();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
}
internal class Java.Interop.__TypeRegistrations : object {
    public static void RegisterPackages();
    private static Type Lookup(String[] mappings, string javaType);
}
