internal static class __Consts : object {
    public static string PackageName;
    public static string AarPath;
}
internal static class __SupportConsts : object {
    public static string Url;
    public static string Version;
    public static string AarVersion;
}
[RegisterAttribute("android/support/v7/graphics/Palette")]
public class Android.Support.V7.Graphics.Palette : Object {
    internal static IntPtr java_class_handle;
    private static IntPtr id_getDarkMutedSwatch;
    private static IntPtr id_getDarkVibrantSwatch;
    private static IntPtr id_getLightMutedSwatch;
    private static IntPtr id_getLightVibrantSwatch;
    private static IntPtr id_getMutedSwatch;
    private static IntPtr id_getSwatches;
    private static IntPtr id_getTargets;
    private static IntPtr id_getVibrantSwatch;
    private static IntPtr id_from_Landroid_graphics_Bitmap_;
    private static IntPtr id_from_Ljava_util_List_;
    private static IntPtr id_generate_Landroid_graphics_Bitmap_;
    private static IntPtr id_generate_Landroid_graphics_Bitmap_I;
    private static IntPtr id_generateAsync_Landroid_graphics_Bitmap_Landroid_support_v7_graphics_Palette_PaletteAsyncListener_;
    private static IntPtr id_generateAsync_Landroid_graphics_Bitmap_ILandroid_support_v7_graphics_Palette_PaletteAsyncListener_;
    private static IntPtr id_getColorForTarget_Landroid_support_v7_graphics_Target_I;
    private static IntPtr id_getDarkMutedColor_I;
    private static IntPtr id_getDarkVibrantColor_I;
    private static IntPtr id_getLightMutedColor_I;
    private static IntPtr id_getLightVibrantColor_I;
    private static IntPtr id_getMutedColor_I;
    private static IntPtr id_getSwatchForTarget_Landroid_support_v7_graphics_Target_;
    private static IntPtr id_getVibrantColor_I;
    internal static IntPtr class_ref { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public Swatch DarkMutedSwatch { get; }
    public Swatch DarkVibrantSwatch { get; }
    public Swatch LightMutedSwatch { get; }
    public Swatch LightVibrantSwatch { get; }
    public Swatch MutedSwatch { get; }
    public IList`1<Swatch> Swatches { get; }
    public IList`1<Target> Targets { get; }
    public Swatch VibrantSwatch { get; }
    internal Palette(IntPtr javaReference, JniHandleOwnership transfer);
    internal static IntPtr get_class_ref();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getDarkMutedSwatch", "()Landroid/support/v7/graphics/Palette$Swatch;", "GetGetDarkMutedSwatchHandler")]
public Swatch get_DarkMutedSwatch();
    [RegisterAttribute("getDarkVibrantSwatch", "()Landroid/support/v7/graphics/Palette$Swatch;", "GetGetDarkVibrantSwatchHandler")]
public Swatch get_DarkVibrantSwatch();
    [RegisterAttribute("getLightMutedSwatch", "()Landroid/support/v7/graphics/Palette$Swatch;", "GetGetLightMutedSwatchHandler")]
public Swatch get_LightMutedSwatch();
    [RegisterAttribute("getLightVibrantSwatch", "()Landroid/support/v7/graphics/Palette$Swatch;", "GetGetLightVibrantSwatchHandler")]
public Swatch get_LightVibrantSwatch();
    [RegisterAttribute("getMutedSwatch", "()Landroid/support/v7/graphics/Palette$Swatch;", "GetGetMutedSwatchHandler")]
public Swatch get_MutedSwatch();
    [RegisterAttribute("getSwatches", "()Ljava/util/List;", "GetGetSwatchesHandler")]
public IList`1<Swatch> get_Swatches();
    [RegisterAttribute("getTargets", "()Ljava/util/List;", "GetGetTargetsHandler")]
public IList`1<Target> get_Targets();
    [RegisterAttribute("getVibrantSwatch", "()Landroid/support/v7/graphics/Palette$Swatch;", "GetGetVibrantSwatchHandler")]
public Swatch get_VibrantSwatch();
    [RegisterAttribute("from", "(Landroid/graphics/Bitmap;)Landroid/support/v7/graphics/Palette$Builder;", "")]
public static Builder From(Bitmap bitmap);
    [RegisterAttribute("from", "(Ljava/util/List;)Landroid/support/v7/graphics/Palette;", "")]
public static Palette From(IList`1<Swatch> swatches);
    [ObsoleteAttribute("deprecated")]
[RegisterAttribute("generate", "(Landroid/graphics/Bitmap;)Landroid/support/v7/graphics/Palette;", "")]
public static Palette Generate(Bitmap bitmap);
    [ObsoleteAttribute("deprecated")]
[RegisterAttribute("generate", "(Landroid/graphics/Bitmap;I)Landroid/support/v7/graphics/Palette;", "")]
public static Palette Generate(Bitmap bitmap, int numColors);
    [ObsoleteAttribute("deprecated")]
[RegisterAttribute("generateAsync", "(Landroid/graphics/Bitmap;Landroid/support/v7/graphics/Palette$PaletteAsyncListener;)Landroid/os/AsyncTask;", "")]
public static AsyncTask GenerateAsync(Bitmap bitmap, IPaletteAsyncListener listener);
    [ObsoleteAttribute("deprecated")]
[RegisterAttribute("generateAsync", "(Landroid/graphics/Bitmap;ILandroid/support/v7/graphics/Palette$PaletteAsyncListener;)Landroid/os/AsyncTask;", "")]
public static AsyncTask GenerateAsync(Bitmap bitmap, int numColors, IPaletteAsyncListener listener);
    [RegisterAttribute("getColorForTarget", "(Landroid/support/v7/graphics/Target;I)I", "")]
public int GetColorForTarget(Target target, int defaultColor);
    [RegisterAttribute("getDarkMutedColor", "(I)I", "")]
public int GetDarkMutedColor(int defaultColor);
    [RegisterAttribute("getDarkVibrantColor", "(I)I", "")]
public int GetDarkVibrantColor(int defaultColor);
    [RegisterAttribute("getLightMutedColor", "(I)I", "")]
public int GetLightMutedColor(int defaultColor);
    [RegisterAttribute("getLightVibrantColor", "(I)I", "")]
public int GetLightVibrantColor(int defaultColor);
    [RegisterAttribute("getMutedColor", "(I)I", "")]
public int GetMutedColor(int defaultColor);
    [RegisterAttribute("getSwatchForTarget", "(Landroid/support/v7/graphics/Target;)Landroid/support/v7/graphics/Palette$Swatch;", "")]
public Swatch GetSwatchForTarget(Target target);
    [RegisterAttribute("getVibrantColor", "(I)I", "")]
public int GetVibrantColor(int defaultColor);
}
[RegisterAttribute("android/support/v7/graphics/Target")]
public class Android.Support.V7.Graphics.Target : Object {
    private static IntPtr DARK_MUTED_jfieldId;
    private static IntPtr DARK_VIBRANT_jfieldId;
    private static IntPtr LIGHT_MUTED_jfieldId;
    private static IntPtr LIGHT_VIBRANT_jfieldId;
    private static IntPtr MUTED_jfieldId;
    private static IntPtr VIBRANT_jfieldId;
    internal static IntPtr java_class_handle;
    private static IntPtr id_isExclusive;
    private static IntPtr id_getLightnessWeight;
    private static IntPtr id_getMaximumLightness;
    private static IntPtr id_getMaximumSaturation;
    private static IntPtr id_getMinimumLightness;
    private static IntPtr id_getMinimumSaturation;
    private static IntPtr id_getPopulationWeight;
    private static IntPtr id_getSaturationWeight;
    private static IntPtr id_getTargetLightness;
    private static IntPtr id_getTargetSaturation;
    [RegisterAttribute("DARK_MUTED")]
public static Target DarkMuted { get; }
    [RegisterAttribute("DARK_VIBRANT")]
public static Target DarkVibrant { get; }
    [RegisterAttribute("LIGHT_MUTED")]
public static Target LightMuted { get; }
    [RegisterAttribute("LIGHT_VIBRANT")]
public static Target LightVibrant { get; }
    [RegisterAttribute("MUTED")]
public static Target Muted { get; }
    [RegisterAttribute("VIBRANT")]
public static Target Vibrant { get; }
    internal static IntPtr class_ref { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public bool IsExclusive { get; }
    public float LightnessWeight { get; }
    public float MaximumLightness { get; }
    public float MaximumSaturation { get; }
    public float MinimumLightness { get; }
    public float MinimumSaturation { get; }
    public float PopulationWeight { get; }
    public float SaturationWeight { get; }
    public float TargetLightness { get; }
    public float TargetSaturation { get; }
    internal Target(IntPtr javaReference, JniHandleOwnership transfer);
    public static Target get_DarkMuted();
    public static Target get_DarkVibrant();
    public static Target get_LightMuted();
    public static Target get_LightVibrant();
    public static Target get_Muted();
    public static Target get_Vibrant();
    internal static IntPtr get_class_ref();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("isExclusive", "()Z", "GetIsExclusiveHandler")]
public bool get_IsExclusive();
    [RegisterAttribute("getLightnessWeight", "()F", "GetGetLightnessWeightHandler")]
public float get_LightnessWeight();
    [RegisterAttribute("getMaximumLightness", "()F", "GetGetMaximumLightnessHandler")]
public float get_MaximumLightness();
    [RegisterAttribute("getMaximumSaturation", "()F", "GetGetMaximumSaturationHandler")]
public float get_MaximumSaturation();
    [RegisterAttribute("getMinimumLightness", "()F", "GetGetMinimumLightnessHandler")]
public float get_MinimumLightness();
    [RegisterAttribute("getMinimumSaturation", "()F", "GetGetMinimumSaturationHandler")]
public float get_MinimumSaturation();
    [RegisterAttribute("getPopulationWeight", "()F", "GetGetPopulationWeightHandler")]
public float get_PopulationWeight();
    [RegisterAttribute("getSaturationWeight", "()F", "GetGetSaturationWeightHandler")]
public float get_SaturationWeight();
    [RegisterAttribute("getTargetLightness", "()F", "GetGetTargetLightnessHandler")]
public float get_TargetLightness();
    [RegisterAttribute("getTargetSaturation", "()F", "GetGetTargetSaturationHandler")]
public float get_TargetSaturation();
}
[RegisterAttribute("android/support/v7/palette/BuildConfig")]
public class Android.Support.V7.Palette.BuildConfig : Object {
    [RegisterAttribute("APPLICATION_ID")]
public static string ApplicationId;
    [RegisterAttribute("BUILD_TYPE")]
public static string BuildType;
    [RegisterAttribute("DEBUG")]
public static bool Debug;
    [RegisterAttribute("FLAVOR")]
public static string Flavor;
    [RegisterAttribute("VERSION_CODE")]
public static int VersionCode;
    [RegisterAttribute("VERSION_NAME")]
public static string VersionName;
    internal static IntPtr java_class_handle;
    private static IntPtr id_ctor;
    internal static IntPtr class_ref { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    internal BuildConfig(IntPtr javaReference, JniHandleOwnership transfer);
    internal static IntPtr get_class_ref();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
}
internal class Java.Interop.__TypeRegistrations : object {
    public static void RegisterPackages();
    private static Type Lookup(String[] mappings, string javaType);
}
