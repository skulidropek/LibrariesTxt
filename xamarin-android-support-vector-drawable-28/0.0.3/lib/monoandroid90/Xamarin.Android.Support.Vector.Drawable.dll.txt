[RegisterAttribute("android/support/graphics/drawable/VectorDrawableCommon")]
public abstract class Android.Support.Graphics.Drawable.VectorDrawableCommon : Drawable {
    internal static JniPeerMembers _members;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    protected VectorDrawableCommon(IntPtr javaReference, JniHandleOwnership transfer);
    private static VectorDrawableCommon();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
}
[RegisterAttribute("android/support/graphics/drawable/VectorDrawableCommon")]
internal class Android.Support.Graphics.Drawable.VectorDrawableCommonInvoker : VectorDrawableCommon {
    internal static JniPeerMembers _members;
    public JniPeerMembers JniPeerMembers { get; }
    protected Type ThresholdType { get; }
    public int Opacity { get; }
    public VectorDrawableCommonInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static VectorDrawableCommonInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getOpacity", "()I", "GetGetOpacityHandler")]
public virtual int get_Opacity();
    [RegisterAttribute("draw", "(Landroid/graphics/Canvas;)V", "GetDraw_Landroid_graphics_Canvas_Handler")]
public virtual void Draw(Canvas canvas);
    [RegisterAttribute("setAlpha", "(I)V", "GetSetAlpha_IHandler")]
public virtual void SetAlpha(int alpha);
    [RegisterAttribute("setColorFilter", "(Landroid/graphics/ColorFilter;)V", "GetSetColorFilter_Landroid_graphics_ColorFilter_Handler")]
public virtual void SetColorFilter(ColorFilter colorFilter);
}
[RegisterAttribute("android/support/graphics/drawable/VectorDrawableCompat")]
public class Android.Support.Graphics.Drawable.VectorDrawableCompat : VectorDrawableCommon {
    internal static JniPeerMembers _members;
    private static Delegate cb_getColorFilter;
    private static Delegate cb_getCurrent;
    private static Delegate cb_getMinimumHeight;
    private static Delegate cb_getMinimumWidth;
    private static Delegate cb_getOpacity;
    private static Delegate cb_getPixelSize;
    private static Delegate cb_getTransparentRegion;
    private static Delegate cb_applyTheme_Landroid_content_res_Resources_Theme_;
    private static Delegate cb_clearColorFilter;
    private static Delegate cb_draw_Landroid_graphics_Canvas_;
    private static Delegate cb_getPadding_Landroid_graphics_Rect_;
    private static Delegate cb_getState;
    private static Delegate cb_jumpToCurrentState;
    private static Delegate cb_onBoundsChange_Landroid_graphics_Rect_;
    private static Delegate cb_setAlpha_I;
    private static Delegate cb_setColorFilter_Landroid_graphics_ColorFilter_;
    private static Delegate cb_setFilterBitmap_Z;
    private static Delegate cb_setHotspot_FF;
    private static Delegate cb_setHotspotBounds_IIII;
    private static Delegate cb_setState_arrayI;
    internal static IntPtr class_ref { get; }
    public JniPeerMembers JniPeerMembers { get; }
    protected IntPtr ThresholdClass { get; }
    protected Type ThresholdType { get; }
    public ColorFilter ColorFilter { get; }
    public Drawable Current { get; }
    public int MinimumHeight { get; }
    public int MinimumWidth { get; }
    public int Opacity { get; }
    public float PixelSize { get; }
    public Region TransparentRegion { get; }
    protected VectorDrawableCompat(IntPtr javaReference, JniHandleOwnership transfer);
    private static VectorDrawableCompat();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetColorFilterHandler();
    private static IntPtr n_GetColorFilter(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getColorFilter", "()Landroid/graphics/ColorFilter;", "GetGetColorFilterHandler")]
public virtual ColorFilter get_ColorFilter();
    private static Delegate GetGetCurrentHandler();
    private static IntPtr n_GetCurrent(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getCurrent", "()Landroid/graphics/drawable/Drawable;", "GetGetCurrentHandler")]
public virtual Drawable get_Current();
    private static Delegate GetGetMinimumHeightHandler();
    private static int n_GetMinimumHeight(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getMinimumHeight", "()I", "GetGetMinimumHeightHandler")]
public virtual int get_MinimumHeight();
    private static Delegate GetGetMinimumWidthHandler();
    private static int n_GetMinimumWidth(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getMinimumWidth", "()I", "GetGetMinimumWidthHandler")]
public virtual int get_MinimumWidth();
    private static Delegate GetGetOpacityHandler();
    private static int n_GetOpacity(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getOpacity", "()I", "GetGetOpacityHandler")]
public virtual int get_Opacity();
    private static Delegate GetGetPixelSizeHandler();
    private static float n_GetPixelSize(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getPixelSize", "()F", "GetGetPixelSizeHandler")]
public virtual float get_PixelSize();
    private static Delegate GetGetTransparentRegionHandler();
    private static IntPtr n_GetTransparentRegion(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getTransparentRegion", "()Landroid/graphics/Region;", "GetGetTransparentRegionHandler")]
public virtual Region get_TransparentRegion();
    private static Delegate GetApplyTheme_Landroid_content_res_Resources_Theme_Handler();
    private static void n_ApplyTheme_Landroid_content_res_Resources_Theme_(IntPtr jnienv, IntPtr native__this, IntPtr native_t);
    [RegisterAttribute("applyTheme", "(Landroid/content/res/Resources$Theme;)V", "GetApplyTheme_Landroid_content_res_Resources_Theme_Handler")]
public virtual void ApplyTheme(Theme t);
    private static Delegate GetClearColorFilterHandler();
    private static void n_ClearColorFilter(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("clearColorFilter", "()V", "GetClearColorFilterHandler")]
public virtual void ClearColorFilter();
    [RegisterAttribute("create", "(Landroid/content/res/Resources;ILandroid/content/res/Resources$Theme;)Landroid/support/graphics/drawable/VectorDrawableCompat;", "")]
public static VectorDrawableCompat Create(Resources res, int resId, Theme theme);
    [RegisterAttribute("createFromXmlInner", "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)Landroid/support/graphics/drawable/VectorDrawableCompat;", "")]
public static VectorDrawableCompat CreateFromXmlInner(Resources r, XmlReader parser, IAttributeSet attrs, Theme theme);
    private static Delegate GetDraw_Landroid_graphics_Canvas_Handler();
    private static void n_Draw_Landroid_graphics_Canvas_(IntPtr jnienv, IntPtr native__this, IntPtr native_canvas);
    [RegisterAttribute("draw", "(Landroid/graphics/Canvas;)V", "GetDraw_Landroid_graphics_Canvas_Handler")]
public virtual void Draw(Canvas canvas);
    private static Delegate GetGetPadding_Landroid_graphics_Rect_Handler();
    private static bool n_GetPadding_Landroid_graphics_Rect_(IntPtr jnienv, IntPtr native__this, IntPtr native_padding);
    [RegisterAttribute("getPadding", "(Landroid/graphics/Rect;)Z", "GetGetPadding_Landroid_graphics_Rect_Handler")]
public virtual bool GetPadding(Rect padding);
    private static Delegate GetGetStateHandler();
    private static IntPtr n_GetState(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getState", "()[I", "GetGetStateHandler")]
public virtual Int32[] GetState();
    private static Delegate GetJumpToCurrentStateHandler();
    private static void n_JumpToCurrentState(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("jumpToCurrentState", "()V", "GetJumpToCurrentStateHandler")]
public virtual void JumpToCurrentState();
    private static Delegate GetOnBoundsChange_Landroid_graphics_Rect_Handler();
    private static void n_OnBoundsChange_Landroid_graphics_Rect_(IntPtr jnienv, IntPtr native__this, IntPtr native_bounds);
    [RegisterAttribute("onBoundsChange", "(Landroid/graphics/Rect;)V", "GetOnBoundsChange_Landroid_graphics_Rect_Handler")]
protected virtual void OnBoundsChange(Rect bounds);
    private static Delegate GetSetAlpha_IHandler();
    private static void n_SetAlpha_I(IntPtr jnienv, IntPtr native__this, int alpha);
    [RegisterAttribute("setAlpha", "(I)V", "GetSetAlpha_IHandler")]
public virtual void SetAlpha(int alpha);
    private static Delegate GetSetColorFilter_Landroid_graphics_ColorFilter_Handler();
    private static void n_SetColorFilter_Landroid_graphics_ColorFilter_(IntPtr jnienv, IntPtr native__this, IntPtr native_colorFilter);
    [RegisterAttribute("setColorFilter", "(Landroid/graphics/ColorFilter;)V", "GetSetColorFilter_Landroid_graphics_ColorFilter_Handler")]
public virtual void SetColorFilter(ColorFilter colorFilter);
    private static Delegate GetSetFilterBitmap_ZHandler();
    private static void n_SetFilterBitmap_Z(IntPtr jnienv, IntPtr native__this, bool filter);
    [RegisterAttribute("setFilterBitmap", "(Z)V", "GetSetFilterBitmap_ZHandler")]
public virtual void SetFilterBitmap(bool filter);
    private static Delegate GetSetHotspot_FFHandler();
    private static void n_SetHotspot_FF(IntPtr jnienv, IntPtr native__this, float x, float y);
    [RegisterAttribute("setHotspot", "(FF)V", "GetSetHotspot_FFHandler")]
public virtual void SetHotspot(float x, float y);
    private static Delegate GetSetHotspotBounds_IIIIHandler();
    private static void n_SetHotspotBounds_IIII(IntPtr jnienv, IntPtr native__this, int left, int top, int right, int bottom);
    [RegisterAttribute("setHotspotBounds", "(IIII)V", "GetSetHotspotBounds_IIIIHandler")]
public virtual void SetHotspotBounds(int left, int top, int right, int bottom);
    private static Delegate GetSetState_arrayIHandler();
    private static bool n_SetState_arrayI(IntPtr jnienv, IntPtr native__this, IntPtr native_stateSet);
    [RegisterAttribute("setState", "([I)Z", "GetSetState_arrayIHandler")]
public virtual bool SetState(Int32[] stateSet);
}
internal class Java.Interop.__TypeRegistrations : object {
    public static void RegisterPackages();
    private static Type Lookup(String[] mappings, string javaType);
}
