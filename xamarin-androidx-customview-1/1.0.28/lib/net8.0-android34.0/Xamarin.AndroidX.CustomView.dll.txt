internal class _JniMarshal_PP_F : MulticastDelegate {
    public _JniMarshal_PP_F(object object, IntPtr method);
    public virtual float Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual float EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_I : MulticastDelegate {
    public _JniMarshal_PP_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_L : MulticastDelegate {
    public _JniMarshal_PP_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_V : MulticastDelegate {
    public _JniMarshal_PP_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_Z : MulticastDelegate {
    public _JniMarshal_PP_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPF_V : MulticastDelegate {
    public _JniMarshal_PPF_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, float p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, float p0, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPFF_I : MulticastDelegate {
    public _JniMarshal_PPFF_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass, float p0, float p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, float p0, float p1, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPI_I : MulticastDelegate {
    public _JniMarshal_PPI_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass, int p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPI_V : MulticastDelegate {
    public _JniMarshal_PPI_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, int p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPI_Z : MulticastDelegate {
    public _JniMarshal_PPI_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, int p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPII_L : MulticastDelegate {
    public _JniMarshal_PPII_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass, int p0, int p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, int p1, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPII_V : MulticastDelegate {
    public _JniMarshal_PPII_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, int p0, int p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, int p1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPII_Z : MulticastDelegate {
    public _JniMarshal_PPII_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, int p0, int p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, int p1, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPIIII_V : MulticastDelegate {
    public _JniMarshal_PPIIII_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, int p0, int p1, int p2, int p3);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, int p1, int p2, int p3, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPIIL_Z : MulticastDelegate {
    public _JniMarshal_PPIIL_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, int p0, int p1, IntPtr p2);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, int p1, IntPtr p2, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPIL_V : MulticastDelegate {
    public _JniMarshal_PPIL_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, int p0, IntPtr p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, IntPtr p1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPIZ_V : MulticastDelegate {
    public _JniMarshal_PPIZ_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, int p0, bool p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, int p0, bool p1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPL_I : MulticastDelegate {
    public _JniMarshal_PPL_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPL_V : MulticastDelegate {
    public _JniMarshal_PPL_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPL_Z : MulticastDelegate {
    public _JniMarshal_PPL_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLFF_V : MulticastDelegate {
    public _JniMarshal_PPLFF_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, float p1, float p2);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, float p1, float p2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLI_V : MulticastDelegate {
    public _JniMarshal_PPLI_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLI_Z : MulticastDelegate {
    public _JniMarshal_PPLI_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLII_I : MulticastDelegate {
    public _JniMarshal_PPLII_I(object object, IntPtr method);
    public virtual int Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, int p2);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, int p2, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLII_Z : MulticastDelegate {
    public _JniMarshal_PPLII_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, int p2);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, int p2, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLIIII_V : MulticastDelegate {
    public _JniMarshal_PPLIIII_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, int p2, int p3, int p4);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, int p1, int p2, int p3, int p4, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLZIIII_Z : MulticastDelegate {
    public _JniMarshal_PPLZIIII_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, bool p1, int p2, int p3, int p4, int p5);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, bool p1, int p2, int p3, int p4, int p5, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPZ_Z : MulticastDelegate {
    public _JniMarshal_PPZ_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, bool p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, bool p0, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("androidx/customview/view/AbsSavedState")]
public abstract class AndroidX.CustomView.View.AbsSavedState : Object {
    private static JniPeerMembers _members;
    [NullableAttribute("2")]
private static Delegate cb_describeContents;
    [NullableAttribute("2")]
private static Delegate cb_writeToParcel_Landroid_os_Parcel_I;
    [NullableAttribute("2")]
[RegisterAttribute("CREATOR")]
public static IParcelableCreator Creator { get; }
    [NullableAttribute("2")]
[RegisterAttribute("EMPTY_STATE")]
public static AbsSavedState EmptyState { get; }
    internal static IntPtr class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    [NullableAttribute("2")]
public IParcelable SuperState { get; }
    protected AbsSavedState(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/os/Parcel;)V", "")]
protected AbsSavedState(Parcel source);
    [RegisterAttribute(".ctor", "(Landroid/os/Parcel;Ljava/lang/ClassLoader;)V", "")]
protected AbsSavedState(Parcel source, ClassLoader loader);
    [RegisterAttribute(".ctor", "(Landroid/os/Parcelable;)V", "")]
protected AbsSavedState(IParcelable superState);
    private static AbsSavedState();
    [NullableContextAttribute("2")]
public static IParcelableCreator get_Creator();
    [NullableContextAttribute("2")]
public static AbsSavedState get_EmptyState();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [NullableContextAttribute("2")]
[RegisterAttribute("getSuperState", "()Landroid/os/Parcelable;", "")]
public IParcelable get_SuperState();
    private static Delegate GetDescribeContentsHandler();
    private static int n_DescribeContents(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("describeContents", "()I", "GetDescribeContentsHandler")]
public virtual int DescribeContents();
    private static Delegate GetWriteToParcel_Landroid_os_Parcel_IHandler();
    private static void n_WriteToParcel_Landroid_os_Parcel_I(IntPtr jnienv, IntPtr native__this, IntPtr native_dest, int native_flags);
    [NullableContextAttribute("2")]
[RegisterAttribute("writeToParcel", "(Landroid/os/Parcel;I)V", "GetWriteToParcel_Landroid_os_Parcel_IHandler")]
public virtual void WriteToParcel(Parcel dest, ParcelableWriteFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("androidx/customview/view/AbsSavedState")]
internal class AndroidX.CustomView.View.AbsSavedStateInvoker : AbsSavedState {
    private static JniPeerMembers _members;
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public AbsSavedStateInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static AbsSavedStateInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("androidx/customview/widget/ExploreByTouchHelper")]
public abstract class AndroidX.CustomView.Widget.ExploreByTouchHelper : AccessibilityDelegateCompat {
    [RegisterAttribute("HOST_ID")]
public static int HostId;
    [RegisterAttribute("INVALID_ID")]
public static int InvalidId;
    private static JniPeerMembers _members;
    [NullableAttribute("2")]
private static Delegate cb_getFocusedVirtualView;
    [NullableAttribute("2")]
private static Delegate cb_getVirtualViewAt_FF;
    [NullableAttribute("2")]
private static Delegate cb_getVisibleVirtualViews_Ljava_util_List_;
    [NullableAttribute("2")]
private static Delegate cb_onPerformActionForVirtualView_IILandroid_os_Bundle_;
    [NullableAttribute("2")]
private static Delegate cb_onPopulateEventForHost_Landroid_view_accessibility_AccessibilityEvent_;
    [NullableAttribute("2")]
private static Delegate cb_onPopulateEventForVirtualView_ILandroid_view_accessibility_AccessibilityEvent_;
    [NullableAttribute("2")]
private static Delegate cb_onPopulateNodeForHost_Landroidx_core_view_accessibility_AccessibilityNodeInfoCompat_;
    [NullableAttribute("2")]
private static Delegate cb_onPopulateNodeForVirtualView_ILandroidx_core_view_accessibility_AccessibilityNodeInfoCompat_;
    [NullableAttribute("2")]
private static Delegate cb_onVirtualViewKeyboardFocusChanged_IZ;
    internal static IntPtr class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public int AccessibilityFocusedVirtualViewId { get; }
    [ObsoleteAttribute("deprecated")]
public int FocusedVirtualView { get; }
    public int KeyboardFocusedVirtualViewId { get; }
    protected ExploreByTouchHelper(IntPtr javaReference, JniHandleOwnership transfer);
    [RegisterAttribute(".ctor", "(Landroid/view/View;)V", "")]
public ExploreByTouchHelper(View host);
    private static ExploreByTouchHelper();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getAccessibilityFocusedVirtualViewId", "()I", "")]
public int get_AccessibilityFocusedVirtualViewId();
    [ObsoleteAttribute]
private static Delegate GetGetFocusedVirtualViewHandler();
    [ObsoleteAttribute]
private static int n_GetFocusedVirtualView(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getFocusedVirtualView", "()I", "GetGetFocusedVirtualViewHandler")]
public virtual int get_FocusedVirtualView();
    [RegisterAttribute("getKeyboardFocusedVirtualViewId", "()I", "")]
public int get_KeyboardFocusedVirtualViewId();
    [RegisterAttribute("clearKeyboardFocusForVirtualView", "(I)Z", "")]
public bool ClearKeyboardFocusForVirtualView(int virtualViewId);
    [RegisterAttribute("dispatchHoverEvent", "(Landroid/view/MotionEvent;)Z", "")]
public bool DispatchHoverEvent(MotionEvent e);
    [RegisterAttribute("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", "")]
public bool DispatchKeyEvent(KeyEvent e);
    private static Delegate GetGetVirtualViewAt_FFHandler();
    private static int n_GetVirtualViewAt_FF(IntPtr jnienv, IntPtr native__this, float p0, float p1);
    [RegisterAttribute("getVirtualViewAt", "(FF)I", "GetGetVirtualViewAt_FFHandler")]
protected abstract virtual int GetVirtualViewAt(float p0, float p1);
    private static Delegate GetGetVisibleVirtualViews_Ljava_util_List_Handler();
    private static void n_GetVisibleVirtualViews_Ljava_util_List_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0);
    [RegisterAttribute("getVisibleVirtualViews", "(Ljava/util/List;)V", "GetGetVisibleVirtualViews_Ljava_util_List_Handler")]
protected abstract virtual void GetVisibleVirtualViews(IList`1<Integer> p0);
    [RegisterAttribute("invalidateRoot", "()V", "")]
public void InvalidateRoot();
    [RegisterAttribute("invalidateVirtualView", "(I)V", "")]
public void InvalidateVirtualView(int virtualViewId);
    [RegisterAttribute("invalidateVirtualView", "(II)V", "")]
public void InvalidateVirtualView(int virtualViewId, int changeTypes);
    [NullableContextAttribute("2")]
[RegisterAttribute("onFocusChanged", "(ZILandroid/graphics/Rect;)V", "")]
public void OnFocusChanged(bool gainFocus, int direction, Rect previouslyFocusedRect);
    private static Delegate GetOnPerformActionForVirtualView_IILandroid_os_Bundle_Handler();
    private static bool n_OnPerformActionForVirtualView_IILandroid_os_Bundle_(IntPtr jnienv, IntPtr native__this, int p0, int p1, IntPtr native_p2);
    [NullableContextAttribute("2")]
[RegisterAttribute("onPerformActionForVirtualView", "(IILandroid/os/Bundle;)Z", "GetOnPerformActionForVirtualView_IILandroid_os_Bundle_Handler")]
protected abstract virtual bool OnPerformActionForVirtualView(int p0, int p1, Bundle p2);
    private static Delegate GetOnPopulateEventForHost_Landroid_view_accessibility_AccessibilityEvent_Handler();
    private static void n_OnPopulateEventForHost_Landroid_view_accessibility_AccessibilityEvent_(IntPtr jnienv, IntPtr native__this, IntPtr native_e);
    [RegisterAttribute("onPopulateEventForHost", "(Landroid/view/accessibility/AccessibilityEvent;)V", "GetOnPopulateEventForHost_Landroid_view_accessibility_AccessibilityEvent_Handler")]
protected virtual void OnPopulateEventForHost(AccessibilityEvent e);
    private static Delegate GetOnPopulateEventForVirtualView_ILandroid_view_accessibility_AccessibilityEvent_Handler();
    private static void n_OnPopulateEventForVirtualView_ILandroid_view_accessibility_AccessibilityEvent_(IntPtr jnienv, IntPtr native__this, int virtualViewId, IntPtr native_e);
    [RegisterAttribute("onPopulateEventForVirtualView", "(ILandroid/view/accessibility/AccessibilityEvent;)V", "GetOnPopulateEventForVirtualView_ILandroid_view_accessibility_AccessibilityEvent_Handler")]
protected virtual void OnPopulateEventForVirtualView(int virtualViewId, AccessibilityEvent e);
    private static Delegate GetOnPopulateNodeForHost_Landroidx_core_view_accessibility_AccessibilityNodeInfoCompat_Handler();
    private static void n_OnPopulateNodeForHost_Landroidx_core_view_accessibility_AccessibilityNodeInfoCompat_(IntPtr jnienv, IntPtr native__this, IntPtr native_node);
    [RegisterAttribute("onPopulateNodeForHost", "(Landroidx/core/view/accessibility/AccessibilityNodeInfoCompat;)V", "GetOnPopulateNodeForHost_Landroidx_core_view_accessibility_AccessibilityNodeInfoCompat_Handler")]
protected virtual void OnPopulateNodeForHost(AccessibilityNodeInfoCompat node);
    private static Delegate GetOnPopulateNodeForVirtualView_ILandroidx_core_view_accessibility_AccessibilityNodeInfoCompat_Handler();
    private static void n_OnPopulateNodeForVirtualView_ILandroidx_core_view_accessibility_AccessibilityNodeInfoCompat_(IntPtr jnienv, IntPtr native__this, int p0, IntPtr native_p1);
    [RegisterAttribute("onPopulateNodeForVirtualView", "(ILandroidx/core/view/accessibility/AccessibilityNodeInfoCompat;)V", "GetOnPopulateNodeForVirtualView_ILandroidx_core_view_accessibility_AccessibilityNodeInfoCompat_Handler")]
protected abstract virtual void OnPopulateNodeForVirtualView(int p0, AccessibilityNodeInfoCompat p1);
    private static Delegate GetOnVirtualViewKeyboardFocusChanged_IZHandler();
    private static void n_OnVirtualViewKeyboardFocusChanged_IZ(IntPtr jnienv, IntPtr native__this, int virtualViewId, bool hasFocus);
    [RegisterAttribute("onVirtualViewKeyboardFocusChanged", "(IZ)V", "GetOnVirtualViewKeyboardFocusChanged_IZHandler")]
protected virtual void OnVirtualViewKeyboardFocusChanged(int virtualViewId, bool hasFocus);
    [RegisterAttribute("requestKeyboardFocusForVirtualView", "(I)Z", "")]
public bool RequestKeyboardFocusForVirtualView(int virtualViewId);
    [RegisterAttribute("sendEventForVirtualView", "(II)Z", "")]
public bool SendEventForVirtualView(int virtualViewId, int eventType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("androidx/customview/widget/ExploreByTouchHelper")]
internal class AndroidX.CustomView.Widget.ExploreByTouchHelperInvoker : ExploreByTouchHelper {
    private static JniPeerMembers _members;
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public ExploreByTouchHelperInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static ExploreByTouchHelperInvoker();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual Type get_ThresholdType();
    [RegisterAttribute("getVirtualViewAt", "(FF)I", "GetGetVirtualViewAt_FFHandler")]
protected virtual int GetVirtualViewAt(float p0, float p1);
    [RegisterAttribute("getVisibleVirtualViews", "(Ljava/util/List;)V", "GetGetVisibleVirtualViews_Ljava_util_List_Handler")]
protected virtual void GetVisibleVirtualViews(IList`1<Integer> p0);
    [NullableContextAttribute("2")]
[RegisterAttribute("onPerformActionForVirtualView", "(IILandroid/os/Bundle;)Z", "GetOnPerformActionForVirtualView_IILandroid_os_Bundle_Handler")]
protected virtual bool OnPerformActionForVirtualView(int p0, int p1, Bundle p2);
    [RegisterAttribute("onPopulateNodeForVirtualView", "(ILandroidx/core/view/accessibility/AccessibilityNodeInfoCompat;)V", "GetOnPopulateNodeForVirtualView_ILandroidx_core_view_accessibility_AccessibilityNodeInfoCompat_Handler")]
protected virtual void OnPopulateNodeForVirtualView(int p0, AccessibilityNodeInfoCompat p1);
}
[RegisterAttribute("androidx/customview/widget/Openable", "", "AndroidX.CustomView.Widget.IOpenableInvoker")]
public interface AndroidX.CustomView.Widget.IOpenable {
    public bool IsOpen { get; }
    [RegisterAttribute("isOpen", "()Z", "GetIsOpenHandler:AndroidX.CustomView.Widget.IOpenableInvoker, Xamarin.AndroidX.CustomView")]
public abstract virtual bool get_IsOpen();
    [RegisterAttribute("close", "()V", "GetCloseHandler:AndroidX.CustomView.Widget.IOpenableInvoker, Xamarin.AndroidX.CustomView")]
public abstract virtual void Close();
    [RegisterAttribute("open", "()V", "GetOpenHandler:AndroidX.CustomView.Widget.IOpenableInvoker, Xamarin.AndroidX.CustomView")]
public abstract virtual void Open();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("androidx/customview/widget/Openable")]
internal class AndroidX.CustomView.Widget.IOpenableInvoker : Object {
    private static JniPeerMembers _members;
    private IntPtr class_ref;
    [NullableAttribute("2")]
private static Delegate cb_isOpen;
    private IntPtr id_isOpen;
    [NullableAttribute("2")]
private static Delegate cb_close;
    private IntPtr id_close;
    [NullableAttribute("2")]
private static Delegate cb_open;
    private IntPtr id_open;
    private static IntPtr java_class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public bool IsOpen { get; }
    public IOpenableInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static IOpenableInvoker();
    private static IntPtr get_java_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [NullableContextAttribute("2")]
public static IOpenable GetObject(IntPtr handle, JniHandleOwnership transfer);
    private static IntPtr Validate(IntPtr handle);
    protected virtual void Dispose(bool disposing);
    private static Delegate GetIsOpenHandler();
    private static bool n_IsOpen(IntPtr jnienv, IntPtr native__this);
    public sealed virtual bool get_IsOpen();
    private static Delegate GetCloseHandler();
    private static void n_Close(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void Close();
    private static Delegate GetOpenHandler();
    private static void n_Open(IntPtr jnienv, IntPtr native__this);
    public sealed virtual void Open();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("androidx/customview/widget/ViewDragHelper")]
public class AndroidX.CustomView.Widget.ViewDragHelper : Object {
    [RegisterAttribute("DIRECTION_ALL")]
public static int DirectionAll;
    [RegisterAttribute("DIRECTION_HORIZONTAL")]
public static int DirectionHorizontal;
    [RegisterAttribute("DIRECTION_VERTICAL")]
public static int DirectionVertical;
    [RegisterAttribute("EDGE_ALL")]
public static int EdgeAll;
    [RegisterAttribute("EDGE_BOTTOM")]
public static int EdgeBottom;
    [RegisterAttribute("EDGE_LEFT")]
public static int EdgeLeft;
    [RegisterAttribute("EDGE_RIGHT")]
public static int EdgeRight;
    [RegisterAttribute("EDGE_TOP")]
public static int EdgeTop;
    [RegisterAttribute("INVALID_POINTER")]
public static int InvalidPointer;
    [RegisterAttribute("STATE_DRAGGING")]
public static int StateDragging;
    [RegisterAttribute("STATE_IDLE")]
public static int StateIdle;
    [RegisterAttribute("STATE_SETTLING")]
public static int StateSettling;
    private static JniPeerMembers _members;
    [NullableAttribute("2")]
private static Delegate cb_getActivePointerId;
    [NullableAttribute("2")]
private static Delegate cb_getCapturedView;
    [NullableAttribute("2")]
private static Delegate cb_getDefaultEdgeSize;
    [NullableAttribute("2")]
private static Delegate cb_getEdgeSize;
    [NullableAttribute("2")]
private static Delegate cb_setEdgeSize_I;
    [NullableAttribute("2")]
private static Delegate cb_getMinVelocity;
    [NullableAttribute("2")]
private static Delegate cb_setMinVelocity_F;
    [NullableAttribute("2")]
private static Delegate cb_getTouchSlop;
    [NullableAttribute("2")]
private static Delegate cb_getViewDragState;
    [NullableAttribute("2")]
private static Delegate cb_abort;
    [NullableAttribute("2")]
private static Delegate cb_canScroll_Landroid_view_View_ZIIII;
    [NullableAttribute("2")]
private static Delegate cb_cancel;
    [NullableAttribute("2")]
private static Delegate cb_captureChildView_Landroid_view_View_I;
    [NullableAttribute("2")]
private static Delegate cb_checkTouchSlop_I;
    [NullableAttribute("2")]
private static Delegate cb_checkTouchSlop_II;
    [NullableAttribute("2")]
private static Delegate cb_continueSettling_Z;
    [NullableAttribute("2")]
private static Delegate cb_findTopChildUnder_II;
    [NullableAttribute("2")]
private static Delegate cb_flingCapturedView_IIII;
    [NullableAttribute("2")]
private static Delegate cb_isCapturedViewUnder_II;
    [NullableAttribute("2")]
private static Delegate cb_isEdgeTouched_I;
    [NullableAttribute("2")]
private static Delegate cb_isEdgeTouched_II;
    [NullableAttribute("2")]
private static Delegate cb_isPointerDown_I;
    [NullableAttribute("2")]
private static Delegate cb_isViewUnder_Landroid_view_View_II;
    [NullableAttribute("2")]
private static Delegate cb_processTouchEvent_Landroid_view_MotionEvent_;
    [NullableAttribute("2")]
private static Delegate cb_setEdgeTrackingEnabled_I;
    [NullableAttribute("2")]
private static Delegate cb_settleCapturedViewAt_II;
    [NullableAttribute("2")]
private static Delegate cb_shouldInterceptTouchEvent_Landroid_view_MotionEvent_;
    [NullableAttribute("2")]
private static Delegate cb_smoothSlideViewTo_Landroid_view_View_II;
    internal static IntPtr class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public int ActivePointerId { get; }
    [NullableAttribute("2")]
public View CapturedView { get; }
    public int DefaultEdgeSize { get; }
    public int EdgeSize { get; public set; }
    public float MinVelocity { get; public set; }
    public int TouchSlop { get; }
    public int ViewDragState { get; }
    protected ViewDragHelper(IntPtr javaReference, JniHandleOwnership transfer);
    private static ViewDragHelper();
    internal static IntPtr get_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    private static Delegate GetGetActivePointerIdHandler();
    private static int n_GetActivePointerId(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getActivePointerId", "()I", "GetGetActivePointerIdHandler")]
public virtual int get_ActivePointerId();
    private static Delegate GetGetCapturedViewHandler();
    private static IntPtr n_GetCapturedView(IntPtr jnienv, IntPtr native__this);
    [NullableContextAttribute("2")]
[RegisterAttribute("getCapturedView", "()Landroid/view/View;", "GetGetCapturedViewHandler")]
public virtual View get_CapturedView();
    private static Delegate GetGetDefaultEdgeSizeHandler();
    private static int n_GetDefaultEdgeSize(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getDefaultEdgeSize", "()I", "GetGetDefaultEdgeSizeHandler")]
public virtual int get_DefaultEdgeSize();
    private static Delegate GetGetEdgeSizeHandler();
    private static int n_GetEdgeSize(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetEdgeSize_IHandler();
    private static void n_SetEdgeSize_I(IntPtr jnienv, IntPtr native__this, int size);
    [RegisterAttribute("getEdgeSize", "()I", "GetGetEdgeSizeHandler")]
public virtual int get_EdgeSize();
    [RegisterAttribute("setEdgeSize", "(I)V", "GetSetEdgeSize_IHandler")]
public virtual void set_EdgeSize(int value);
    private static Delegate GetGetMinVelocityHandler();
    private static float n_GetMinVelocity(IntPtr jnienv, IntPtr native__this);
    private static Delegate GetSetMinVelocity_FHandler();
    private static void n_SetMinVelocity_F(IntPtr jnienv, IntPtr native__this, float minVel);
    [RegisterAttribute("getMinVelocity", "()F", "GetGetMinVelocityHandler")]
public virtual float get_MinVelocity();
    [RegisterAttribute("setMinVelocity", "(F)V", "GetSetMinVelocity_FHandler")]
public virtual void set_MinVelocity(float value);
    private static Delegate GetGetTouchSlopHandler();
    private static int n_GetTouchSlop(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getTouchSlop", "()I", "GetGetTouchSlopHandler")]
public virtual int get_TouchSlop();
    private static Delegate GetGetViewDragStateHandler();
    private static int n_GetViewDragState(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("getViewDragState", "()I", "GetGetViewDragStateHandler")]
public virtual int get_ViewDragState();
    private static Delegate GetAbortHandler();
    private static void n_Abort(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("abort", "()V", "GetAbortHandler")]
public virtual void Abort();
    private static Delegate GetCanScroll_Landroid_view_View_ZIIIIHandler();
    private static bool n_CanScroll_Landroid_view_View_ZIIII(IntPtr jnienv, IntPtr native__this, IntPtr native_v, bool checkV, int dx, int dy, int x, int y);
    [RegisterAttribute("canScroll", "(Landroid/view/View;ZIIII)Z", "GetCanScroll_Landroid_view_View_ZIIIIHandler")]
protected virtual bool CanScroll(View v, bool checkV, int dx, int dy, int x, int y);
    private static Delegate GetCancelHandler();
    private static void n_Cancel(IntPtr jnienv, IntPtr native__this);
    [RegisterAttribute("cancel", "()V", "GetCancelHandler")]
public virtual void Cancel();
    private static Delegate GetCaptureChildView_Landroid_view_View_IHandler();
    private static void n_CaptureChildView_Landroid_view_View_I(IntPtr jnienv, IntPtr native__this, IntPtr native_childView, int activePointerId);
    [RegisterAttribute("captureChildView", "(Landroid/view/View;I)V", "GetCaptureChildView_Landroid_view_View_IHandler")]
public virtual void CaptureChildView(View childView, int activePointerId);
    private static Delegate GetCheckTouchSlop_IHandler();
    private static bool n_CheckTouchSlop_I(IntPtr jnienv, IntPtr native__this, int directions);
    [RegisterAttribute("checkTouchSlop", "(I)Z", "GetCheckTouchSlop_IHandler")]
public virtual bool CheckTouchSlop(int directions);
    private static Delegate GetCheckTouchSlop_IIHandler();
    private static bool n_CheckTouchSlop_II(IntPtr jnienv, IntPtr native__this, int directions, int pointerId);
    [RegisterAttribute("checkTouchSlop", "(II)Z", "GetCheckTouchSlop_IIHandler")]
public virtual bool CheckTouchSlop(int directions, int pointerId);
    private static Delegate GetContinueSettling_ZHandler();
    private static bool n_ContinueSettling_Z(IntPtr jnienv, IntPtr native__this, bool deferCallbacks);
    [RegisterAttribute("continueSettling", "(Z)Z", "GetContinueSettling_ZHandler")]
public virtual bool ContinueSettling(bool deferCallbacks);
    [RegisterAttribute("create", "(Landroid/view/ViewGroup;Landroidx/customview/widget/ViewDragHelper$Callback;)Landroidx/customview/widget/ViewDragHelper;", "")]
public static ViewDragHelper Create(ViewGroup forParent, Callback cb);
    [RegisterAttribute("create", "(Landroid/view/ViewGroup;FLandroidx/customview/widget/ViewDragHelper$Callback;)Landroidx/customview/widget/ViewDragHelper;", "")]
public static ViewDragHelper Create(ViewGroup forParent, float sensitivity, Callback cb);
    private static Delegate GetFindTopChildUnder_IIHandler();
    private static IntPtr n_FindTopChildUnder_II(IntPtr jnienv, IntPtr native__this, int x, int y);
    [NullableContextAttribute("2")]
[RegisterAttribute("findTopChildUnder", "(II)Landroid/view/View;", "GetFindTopChildUnder_IIHandler")]
public virtual View FindTopChildUnder(int x, int y);
    private static Delegate GetFlingCapturedView_IIIIHandler();
    private static void n_FlingCapturedView_IIII(IntPtr jnienv, IntPtr native__this, int minLeft, int minTop, int maxLeft, int maxTop);
    [RegisterAttribute("flingCapturedView", "(IIII)V", "GetFlingCapturedView_IIIIHandler")]
public virtual void FlingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop);
    private static Delegate GetIsCapturedViewUnder_IIHandler();
    private static bool n_IsCapturedViewUnder_II(IntPtr jnienv, IntPtr native__this, int x, int y);
    [RegisterAttribute("isCapturedViewUnder", "(II)Z", "GetIsCapturedViewUnder_IIHandler")]
public virtual bool IsCapturedViewUnder(int x, int y);
    private static Delegate GetIsEdgeTouched_IHandler();
    private static bool n_IsEdgeTouched_I(IntPtr jnienv, IntPtr native__this, int edges);
    [RegisterAttribute("isEdgeTouched", "(I)Z", "GetIsEdgeTouched_IHandler")]
public virtual bool IsEdgeTouched(int edges);
    private static Delegate GetIsEdgeTouched_IIHandler();
    private static bool n_IsEdgeTouched_II(IntPtr jnienv, IntPtr native__this, int edges, int pointerId);
    [RegisterAttribute("isEdgeTouched", "(II)Z", "GetIsEdgeTouched_IIHandler")]
public virtual bool IsEdgeTouched(int edges, int pointerId);
    private static Delegate GetIsPointerDown_IHandler();
    private static bool n_IsPointerDown_I(IntPtr jnienv, IntPtr native__this, int pointerId);
    [RegisterAttribute("isPointerDown", "(I)Z", "GetIsPointerDown_IHandler")]
public virtual bool IsPointerDown(int pointerId);
    private static Delegate GetIsViewUnder_Landroid_view_View_IIHandler();
    private static bool n_IsViewUnder_Landroid_view_View_II(IntPtr jnienv, IntPtr native__this, IntPtr native_view, int x, int y);
    [NullableContextAttribute("2")]
[RegisterAttribute("isViewUnder", "(Landroid/view/View;II)Z", "GetIsViewUnder_Landroid_view_View_IIHandler")]
public virtual bool IsViewUnder(View view, int x, int y);
    private static Delegate GetProcessTouchEvent_Landroid_view_MotionEvent_Handler();
    private static void n_ProcessTouchEvent_Landroid_view_MotionEvent_(IntPtr jnienv, IntPtr native__this, IntPtr native_ev);
    [RegisterAttribute("processTouchEvent", "(Landroid/view/MotionEvent;)V", "GetProcessTouchEvent_Landroid_view_MotionEvent_Handler")]
public virtual void ProcessTouchEvent(MotionEvent ev);
    private static Delegate GetSetEdgeTrackingEnabled_IHandler();
    private static void n_SetEdgeTrackingEnabled_I(IntPtr jnienv, IntPtr native__this, int edgeFlags);
    [RegisterAttribute("setEdgeTrackingEnabled", "(I)V", "GetSetEdgeTrackingEnabled_IHandler")]
public virtual void SetEdgeTrackingEnabled(int edgeFlags);
    private static Delegate GetSettleCapturedViewAt_IIHandler();
    private static bool n_SettleCapturedViewAt_II(IntPtr jnienv, IntPtr native__this, int finalLeft, int finalTop);
    [RegisterAttribute("settleCapturedViewAt", "(II)Z", "GetSettleCapturedViewAt_IIHandler")]
public virtual bool SettleCapturedViewAt(int finalLeft, int finalTop);
    private static Delegate GetShouldInterceptTouchEvent_Landroid_view_MotionEvent_Handler();
    private static bool n_ShouldInterceptTouchEvent_Landroid_view_MotionEvent_(IntPtr jnienv, IntPtr native__this, IntPtr native_ev);
    [RegisterAttribute("shouldInterceptTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetShouldInterceptTouchEvent_Landroid_view_MotionEvent_Handler")]
public virtual bool ShouldInterceptTouchEvent(MotionEvent ev);
    private static Delegate GetSmoothSlideViewTo_Landroid_view_View_IIHandler();
    private static bool n_SmoothSlideViewTo_Landroid_view_View_II(IntPtr jnienv, IntPtr native__this, IntPtr native_child, int finalLeft, int finalTop);
    [RegisterAttribute("smoothSlideViewTo", "(Landroid/view/View;II)Z", "GetSmoothSlideViewTo_Landroid_view_View_IIHandler")]
public virtual bool SmoothSlideViewTo(View child, int finalLeft, int finalTop);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Java.Interop.__TypeRegistrations : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] package_androidx_customview_view_mappings;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] package_androidx_customview_widget_mappings;
    public static void RegisterPackages();
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2057")]
private static Type Lookup(String[] mappings, string javaType);
    private static Type lookup_androidx_customview_view_package(string klass);
    private static Type lookup_androidx_customview_widget_package(string klass);
}
