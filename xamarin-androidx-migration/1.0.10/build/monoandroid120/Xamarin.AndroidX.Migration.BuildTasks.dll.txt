public class Xamarin.AndroidX.Migration.BuildTasks.CecilfyFiles : MigrationToolTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEmbeddedResources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    public ITaskItem[] References { get; public set; }
    public bool SkipEmbeddedResources { get; public set; }
    public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_SkipEmbeddedResources();
    [CompilerGeneratedAttribute]
public void set_SkipEmbeddedResources(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    public virtual bool Execute();
    [CompilerGeneratedAttribute]
private void <Execute>b__16_1(object sender, MessageLoggedEventArgs e);
}
public class Xamarin.AndroidX.Migration.BuildTasks.CollectAllFiles : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Directories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputFiles>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Directories { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputFiles { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Directories();
    [CompilerGeneratedAttribute]
public void set_Directories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputFiles();
    [CompilerGeneratedAttribute]
public void set_OutputFiles(ITaskItem[] value);
    public virtual bool Execute();
}
public class Xamarin.AndroidX.Migration.BuildTasks.JetifyFiles : MigrationToolTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JetifiedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JetifiedDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dejetify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStrict>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRebuildTopOfTree>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldStripSignatures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProGuard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseIntermediateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFilePath>k__BackingField;
    public ITaskItem[] Files { get; public set; }
    public ITaskItem[] JetifiedFiles { get; public set; }
    public string JetifiedDirectory { get; public set; }
    public string JavaPath { get; public set; }
    public string ConfigurationPath { get; public set; }
    public bool Verbose { get; public set; }
    public bool Dejetify { get; public set; }
    public bool IsStrict { get; public set; }
    public bool ShouldRebuildTopOfTree { get; public set; }
    public bool ShouldStripSignatures { get; public set; }
    public bool IsProGuard { get; public set; }
    public bool Parallel { get; public set; }
    public bool UseIntermediateFile { get; public set; }
    public string IntermediateFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JetifiedFiles();
    [CompilerGeneratedAttribute]
public void set_JetifiedFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_JetifiedDirectory();
    [CompilerGeneratedAttribute]
public void set_JetifiedDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_JavaPath();
    [CompilerGeneratedAttribute]
public void set_JavaPath(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationPath();
    [CompilerGeneratedAttribute]
public void set_ConfigurationPath(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dejetify();
    [CompilerGeneratedAttribute]
public void set_Dejetify(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStrict();
    [CompilerGeneratedAttribute]
public void set_IsStrict(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldRebuildTopOfTree();
    [CompilerGeneratedAttribute]
public void set_ShouldRebuildTopOfTree(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldStripSignatures();
    [CompilerGeneratedAttribute]
public void set_ShouldStripSignatures(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsProGuard();
    [CompilerGeneratedAttribute]
public void set_IsProGuard(bool value);
    [CompilerGeneratedAttribute]
public bool get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseIntermediateFile();
    [CompilerGeneratedAttribute]
public void set_UseIntermediateFile(bool value);
    [CompilerGeneratedAttribute]
public string get_IntermediateFilePath();
    [CompilerGeneratedAttribute]
public void set_IntermediateFilePath(string value);
    public virtual bool Execute();
    [IteratorStateMachineAttribute("Xamarin.AndroidX.Migration.BuildTasks.JetifyFiles/<CreateMigrationPairs>d__57")]
private IEnumerable`1<MigrationPair> CreateMigrationPairs();
    private string GetOutputFile(int index);
    [CompilerGeneratedAttribute]
private void <Execute>b__56_0(object sender, MessageLoggedEventArgs e);
}
public abstract class Xamarin.AndroidX.Migration.BuildTasks.MigrationToolTask : Task {
    protected void LogToolMessage(MessageLoggedEventArgs e);
}
public class Xamarin.AndroidX.Migration.BuildTasks.RemoveSkippedEmbeddedFiles : Task {
    [CompilerGeneratedAttribute]
private string <AssemblyIdentityMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ContainersToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputImportDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputFiles>k__BackingField;
    [RequiredAttribute]
public string AssemblyIdentityMapFile { get; public set; }
    public ITaskItem[] Files { get; public set; }
    public ITaskItem[] ContainersToSkip { get; public set; }
    public string OutputImportDirectory { get; public set; }
    public bool Verbose { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyIdentityMapFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyIdentityMapFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ContainersToSkip();
    [CompilerGeneratedAttribute]
public void set_ContainersToSkip(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputImportDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputImportDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputFiles();
    [CompilerGeneratedAttribute]
public void set_OutputFiles(ITaskItem[] value);
    public virtual bool Execute();
    [IteratorStateMachineAttribute("Xamarin.AndroidX.Migration.BuildTasks.RemoveSkippedEmbeddedFiles/<GetIncludedFiles>d__25")]
private IEnumerable`1<ITaskItem> GetIncludedFiles();
    [CompilerGeneratedAttribute]
private bool <GetIncludedFiles>g__ShouldSkip|25_1(ITaskItem file, String& container, <>c__DisplayClass25_0& );
}
public class Xamarin.AndroidX.Migration.BuildTasks.ResolveEmbeddedFiles : Task {
    private String[] containers;
    private String[] mapCache;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputImportDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyIdentityMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ContainersToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputFiles>k__BackingField;
    public ITaskItem[] ResourceDirectories { get; public set; }
    public ITaskItem[] JavaLibraries { get; public set; }
    public ITaskItem[] Resources { get; public set; }
    public string OutputImportDirectory { get; public set; }
    public string AssemblyIdentityMapFile { get; public set; }
    public ITaskItem[] ContainersToSkip { get; public set; }
    public bool Verbose { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputFiles { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibraries();
    [CompilerGeneratedAttribute]
public void set_JavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputImportDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputImportDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyIdentityMapFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyIdentityMapFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ContainersToSkip();
    [CompilerGeneratedAttribute]
public void set_ContainersToSkip(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputFiles();
    [CompilerGeneratedAttribute]
public void set_OutputFiles(ITaskItem[] value);
    public virtual bool Execute();
    [IteratorStateMachineAttribute("Xamarin.AndroidX.Migration.BuildTasks.ResolveEmbeddedFiles/<GetExtractedResources>d__35")]
private IEnumerable`1<ITaskItem> GetExtractedResources();
    private bool ShouldSkipResource(string path, String& container);
}
public class Xamarin.AndroidX.Migration.BuildTasks.ValidateAndroidXPackages : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseWarningsInsteadOfErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsSupportAssemblies>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    public bool Verbose { get; public set; }
    public bool UseWarningsInsteadOfErrors { get; public set; }
    [OutputAttribute]
public bool ContainsSupportAssemblies { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseWarningsInsteadOfErrors();
    [CompilerGeneratedAttribute]
public void set_UseWarningsInsteadOfErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContainsSupportAssemblies();
    [CompilerGeneratedAttribute]
public void set_ContainsSupportAssemblies(bool value);
    public virtual bool Execute();
}
