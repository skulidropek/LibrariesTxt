[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
public class Xamarin.AndroidX.Migration.AndroidXAssembliesCsvMapping : CsvMapping {
    private SortedDictionary`2<string, string> assemblyMapping;
    private SortedDictionary`2<string, string> packageMapping;
    private SortedDictionary`2<string, string> versionMapping;
    public AndroidXAssembliesCsvMapping(string mappingFile);
    public AndroidXAssembliesCsvMapping(Stream csv);
    protected virtual void OnLoadRecord(String[] record);
    public bool TryGetAndroidXAssembly(string supportAssembly, String& xAssembly);
    public bool TryGetAndroidXPackage(string xAssembly, String& xPackage);
    public bool TryGetAndroidXVersion(string xAssembly, String& xVersion);
    public bool ContainsSupportAssembly(string supportAssembly);
}
public class Xamarin.AndroidX.Migration.AndroidXTypesCsvMapping : CsvMapping {
    private SortedDictionary`2<string, FullType> mapping;
    private SortedDictionary`2<string, FullType> reverseMapping;
    private SortedDictionary`2<string, FullType> javaMapping;
    public AndroidXTypesCsvMapping(string mappingFile);
    public AndroidXTypesCsvMapping(Stream csv);
    protected virtual void OnLoadRecord(String[] record);
    public bool TryGetAndroidXType(string supportFullName, FullType& androidxType);
    public bool TryGetAndroidXClass(string supportJavaFullName, FullType& androidxClass);
    public bool TryGetSupportType(string androidxFullName, FullType& supportType);
    public bool ContainsSupportType(string supportFullName);
    public bool ContainsSupportClass(string supportJavaFullName);
    public bool ContainsAndroidXType(string androidxFullName);
}
public class Xamarin.AndroidX.Migration.ArchivesPair : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Archives>k__BackingField;
    public string Source { get; private set; }
    public IEnumerable`1<string> Archives { get; private set; }
    public ArchivesPair(string source, IEnumerable`1<string> archives);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Archives();
    [CompilerGeneratedAttribute]
private void set_Archives(IEnumerable`1<string> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(String& source, IEnumerable`1& archives);
    public static ValueTuple`2<string, IEnumerable`1<string>> op_Implicit(ArchivesPair value);
    public static ArchivesPair op_Implicit(ValueTuple`2<string, IEnumerable`1<string>> value);
}
public class Xamarin.AndroidX.Migration.AssemblyMerger : MigrationTool {
    private static string InjectedAttributeNamespace;
    private static string InjectedAttributeTypeName;
    private static string InjectedAttributeFullName;
    [CompilerGeneratedAttribute]
private List`1<string> <SearchDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InjectAssemblyNames>k__BackingField;
    public List`1<string> SearchDirectories { get; public set; }
    public bool InjectAssemblyNames { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_SearchDirectories();
    [CompilerGeneratedAttribute]
public void set_SearchDirectories(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_InjectAssemblyNames();
    [CompilerGeneratedAttribute]
public void set_InjectAssemblyNames(bool value);
    public void Merge(IEnumerable`1<string> assemblies, string outputPath);
    private void InjectAssemblyName(IAssemblyResolver assemblyResolver, string assemblyPath, string outputPath);
    [CompilerGeneratedAttribute]
internal static TypeDefinition <InjectAssemblyName>g__ResolveSystemAttribute|12_0(ModuleDefinition module, <>c__DisplayClass12_0& );
}
[IsReadOnlyAttribute]
public class Xamarin.AndroidX.Migration.BindingType : ValueType {
    public static BindingType Empty;
    public FullType NetType;
    public FullType JavaType;
    public BindingType(FullType netType, FullType javaType);
    private static BindingType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(FullType& netType, FullType& javaType);
    public static ValueTuple`2<FullType, FullType> op_Implicit(BindingType value);
    public static BindingType op_Implicit(ValueTuple`2<FullType, FullType> value);
}
[FlagsAttribute]
public enum Xamarin.AndroidX.Migration.CecilMigrationResult : Enum {
    public int value__;
    public static CecilMigrationResult Skipped;
    public static CecilMigrationResult ContainedSupport;
    public static CecilMigrationResult PotentialJni;
    public static CecilMigrationResult ContainedJni;
    public static CecilMigrationResult PotentialJavaArtifacts;
    public static CecilMigrationResult ContainedJavaArtifacts;
}
public class Xamarin.AndroidX.Migration.CecilMigrator : MigrationTool {
    private static string RegisterAttributeFullName;
    private static string StringFullName;
    private static string EmbeddedAarName;
    private static string EmbeddedJarExtension;
    [CompilerGeneratedAttribute]
private AndroidXTypesCsvMapping <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEmbeddedResources>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenameTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPath>k__BackingField;
    public AndroidXTypesCsvMapping Mapping { get; }
    public bool SkipEmbeddedResources { get; public set; }
    public List`1<string> References { get; public set; }
    public bool RenameTypes { get; public set; }
    public string JavaPath { get; public set; }
    public CecilMigrator(Stream stream);
    public CecilMigrator(AndroidXTypesCsvMapping mapping);
    [CompilerGeneratedAttribute]
public AndroidXTypesCsvMapping get_Mapping();
    [CompilerGeneratedAttribute]
public bool get_SkipEmbeddedResources();
    [CompilerGeneratedAttribute]
public void set_SkipEmbeddedResources(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_References();
    [CompilerGeneratedAttribute]
public void set_References(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_RenameTypes();
    [CompilerGeneratedAttribute]
public void set_RenameTypes(bool value);
    [CompilerGeneratedAttribute]
public string get_JavaPath();
    [CompilerGeneratedAttribute]
public void set_JavaPath(string value);
    public CecilMigrationResult Migrate(IEnumerable`1<MigrationPair> assemblies);
    public CecilMigrationResult Migrate(MigrationPair assemblies);
    public CecilMigrationResult Migrate(string source, string destination);
    public bool MigrateJniString(string jniString, String& newJniString);
    private CecilMigrationResult MigrateAssembly(AssemblyDefinition assembly);
    private CecilMigrationResult MigrateActualTypes(AssemblyDefinition assembly);
    private CecilMigrationResult MigrateEmbeddedResources(AssemblyDefinition assembly);
    private CecilMigrationResult MigrateNetTypes(AssemblyDefinition assembly);
    private CecilMigrationResult MigrateJniStrings(AssemblyDefinition assembly);
    private bool MigrateRegisterAttribute(CustomAttribute registerAttribute);
    private bool MigrateMethodBody(MethodDefinition method);
    private CustomAttribute GetRegisterAttribute(IList`1<CustomAttribute> attributes);
    private bool TryMapJavaClass(string javaClass, String& newJavaClass);
    private bool GetNewJniPart(string javaFullName, String& newJavaFullName);
    private MethodTypeSignature ParseMethodSignature(string support, String& name);
    private bool CopyFile(string src, string dst);
    private AssemblyDefinition ReadAssembly(AssemblyResolver resolver, string path);
    [CompilerGeneratedAttribute]
private void <MigrateEmbeddedResources>b__32_1(object sender, MessageLoggedEventArgs e);
    [CompilerGeneratedAttribute]
internal static bool <MigrateEmbeddedResources>g__ShouldJetifyResource|32_0(Resource resource);
    [CompilerGeneratedAttribute]
internal static MethodTypeSignature <ParseMethodSignature>g__TryCreate|40_0(string jni);
}
public abstract class Xamarin.AndroidX.Migration.CsvMapping : object {
    protected CsvMapping(string mappingFile);
    protected CsvMapping(Stream csv);
    protected void LoadMapping(string mappingFile);
    protected void LoadMapping(Stream csv);
    protected void LoadMapping(TextReader reader);
    protected abstract virtual void OnLoadRecord(String[] record);
}
[IsReadOnlyAttribute]
public class Xamarin.AndroidX.Migration.FullType : ValueType {
    public static FullType Empty;
    public string Assembly;
    public string Namespace;
    public string Name;
    public string FullName { get; }
    public string JavaFullName { get; }
    public bool IsEmpty { get; }
    public FullType(string ns, string n);
    public FullType(string assembly, string ns, string n);
    private static FullType();
    public string get_FullName();
    public string get_JavaFullName();
    public bool get_IsEmpty();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public FullType WithName(string name);
    public FullType WithNamespace(string ns);
    public void Deconstruct(String& c, String& ns, String& n);
    public static ValueTuple`3<string, string, string> op_Implicit(FullType value);
    public static FullType op_Implicit(ValueTuple`3<string, string, string> value);
}
public class Xamarin.AndroidX.Migration.Jetifier : MigrationTool {
    [CompilerGeneratedAttribute]
private string <ConfigurationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dejetify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStrict>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRebuildTopOfTree>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldStripSignatures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProGuard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseIntermediateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JetifierWrapperPath>k__BackingField;
    public string ConfigurationPath { get; public set; }
    public bool Dejetify { get; public set; }
    public bool IsStrict { get; public set; }
    public bool ShouldRebuildTopOfTree { get; public set; }
    public bool ShouldStripSignatures { get; public set; }
    public bool IsProGuard { get; public set; }
    public bool Parallel { get; public set; }
    public bool UseIntermediateFile { get; public set; }
    public string IntermediateFilePath { get; public set; }
    public string JavaPath { get; public set; }
    public string JetifierWrapperPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConfigurationPath();
    [CompilerGeneratedAttribute]
public void set_ConfigurationPath(string value);
    [CompilerGeneratedAttribute]
public bool get_Dejetify();
    [CompilerGeneratedAttribute]
public void set_Dejetify(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStrict();
    [CompilerGeneratedAttribute]
public void set_IsStrict(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldRebuildTopOfTree();
    [CompilerGeneratedAttribute]
public void set_ShouldRebuildTopOfTree(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldStripSignatures();
    [CompilerGeneratedAttribute]
public void set_ShouldStripSignatures(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsProGuard();
    [CompilerGeneratedAttribute]
public void set_IsProGuard(bool value);
    [CompilerGeneratedAttribute]
public bool get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseIntermediateFile();
    [CompilerGeneratedAttribute]
public void set_UseIntermediateFile(bool value);
    [CompilerGeneratedAttribute]
public string get_IntermediateFilePath();
    [CompilerGeneratedAttribute]
public void set_IntermediateFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_JavaPath();
    [CompilerGeneratedAttribute]
public void set_JavaPath(string value);
    [CompilerGeneratedAttribute]
public string get_JetifierWrapperPath();
    [CompilerGeneratedAttribute]
public void set_JetifierWrapperPath(string value);
    public bool Jetify(MigrationPair archives);
    public bool Jetify(string source, string destination);
    public bool Jetify(IEnumerable`1<MigrationPair> archives);
}
public class Xamarin.AndroidX.Migration.MappingGenerator : MigrationTool {
    private List`1<TypeMapping> typeMappings;
    [CompilerGeneratedAttribute]
private string <OverridesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaMappingPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeWarnings>k__BackingField;
    public string OverridesPath { get; public set; }
    public string JavaMappingPath { get; public set; }
    public bool IncludeWarnings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OverridesPath();
    [CompilerGeneratedAttribute]
public void set_OverridesPath(string value);
    [CompilerGeneratedAttribute]
public string get_JavaMappingPath();
    [CompilerGeneratedAttribute]
public void set_JavaMappingPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeWarnings();
    [CompilerGeneratedAttribute]
public void set_IncludeWarnings(bool value);
    public void Generate(string supportAssemblyPath, string androidXAssemblyPath, TextWriter writer);
    private static FullType GetJavaFullType(string javaFullName);
    private static void WriteRecord(TextWriter writer, string message);
    private static void WriteRecord(TextWriter writer, BindingType supportType, BindingType androidXType, string message);
    private bool TryGetExactMatch(IEnumerable`1<BindingType> xTypes, BindingType supportType, BindingType& exactMatch);
    private bool TryGetMapping(Dictionary`2<string, string> mappings, FullType type, String& androidx);
    private Dictionary`2<string, string> LoadMapping(string mapping);
    private List`1<BindingType> GetAllTypes(string assemblyPath);
    private bool IsValidType(TypeDefinition typeDefinition);
    private BindingType GetFullType(TypeDefinition typeDefinition);
    private static string GetAttributeValue(TypeDefinition typeDefinition, string attributeType, int index);
    private FullType GetJavaType(TypeDefinition typeDefinition);
}
public class Xamarin.AndroidX.Migration.MessageLoggedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Message { get; }
    public bool IsError { get; }
    public bool IsVerbose { get; }
    public Exception Exception { get; }
    public MessageLoggedEventArgs(string message, bool isError, bool isVerbose, Exception exception);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class Xamarin.AndroidX.Migration.MigrationPair : ValueType {
    public string Source;
    public string Destination;
    public MigrationPair(string source, string destination);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(String& source, String& destination);
    public static ValueTuple`2<string, string> op_Implicit(MigrationPair value);
    public static MigrationPair op_Implicit(ValueTuple`2<string, string> value);
}
public class Xamarin.AndroidX.Migration.MigrationTool : object {
    [CompilerGeneratedAttribute]
private bool <HasLoggedErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageLoggedEventArgs> MessageLogged;
    public bool HasLoggedErrors { get; private set; }
    public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasLoggedErrors();
    [CompilerGeneratedAttribute]
private void set_HasLoggedErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public void add_MessageLogged(EventHandler`1<MessageLoggedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MessageLogged(EventHandler`1<MessageLoggedEventArgs> value);
    protected virtual void LogMessage(string message);
    protected virtual void LogVerboseMessage(string message);
    protected virtual void LogError(string message);
    protected virtual void LogError(Exception ex);
    protected virtual void Log(MessageLoggedEventArgs e);
    protected bool ExecuteExternalProcess(string command, string arguments, string workingDirectory, CancellationToken cancellationToken);
}
[DataContractAttribute]
public class Xamarin.AndroidX.Migration.Package : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Dependencies>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public List`1<string> Dependencies { get; public set; }
    public Package(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(List`1<string> value);
    public virtual string ToString();
}
public class Xamarin.AndroidX.Migration.PackageDependencyTree : object {
    private Dictionary`2<string, Package> tree;
    public List`1<Package> Packages { get; }
    public List`1<Package> get_Packages();
    public Package GetOrCreate(string id);
    public IEnumerable`1<string> Reduce(IEnumerable`1<string> ids);
    public IEnumerable`1<string> Flatten(IEnumerable`1<string> ids, bool includeTopLevel);
    public IEnumerable`1<string> Flatten(string id, bool includeTopLevel);
    public void Save(string jsonPath);
    public void Save(Stream stream);
    public static PackageDependencyTree Load();
    public static PackageDependencyTree Load(string dependenciesFile);
    public static PackageDependencyTree Load(Stream json);
    private void Deserialize(string jsonPath);
    private void Deserialize(Stream stream);
}
public static class Xamarin.AndroidX.Migration.Resources : object {
    private static Assembly assembly;
    private static string assemblyMapping;
    private static string typeMapping;
    private static string javaMapping;
    private static string mappingOverrides;
    private static string dependencies;
    private static string jetiferRoot;
    public static string AssembliesMappingPath;
    public static string TypesMappingFilePath;
    public static string JavaClassMappingPath;
    public static string MappingOverridesPath;
    public static string DependenciesPath;
    public static string JetifierWrapperDirectory;
    public static string JetifierWrapperJarPath;
    public static string JetifierWrapperMain;
    private static Resources();
    public static string GetFullPath(string path);
}
public class Xamarin.AndroidX.Migration.TypeMapping : ValueType {
    public BindingType SupportType;
    public BindingType AndroidXType;
    public TypeMapping(BindingType supportType, BindingType androidXType);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(BindingType& supportType, BindingType& androidXType);
    public static ValueTuple`2<BindingType, BindingType> op_Implicit(TypeMapping value);
    public static TypeMapping op_Implicit(ValueTuple`2<BindingType, BindingType> value);
}
