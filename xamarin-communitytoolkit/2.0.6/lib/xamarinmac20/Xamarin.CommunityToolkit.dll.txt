[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Xamarin.CommunityToolkit.Behaviors.AnimationBase : AnimationBase`1<View> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.Behaviors.AnimationBase`1 : BindableObject {
    public static BindableProperty DurationProperty;
    public static BindableProperty EasingTypeProperty;
    public UInt32 Duration { get; public set; }
    public Easing Easing { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static AnimationBase`1();
    public UInt32 get_Duration();
    public void set_Duration(UInt32 value);
    public Easing get_Easing();
    public void set_Easing(Easing value);
    private static object GetDefaultDurationProperty(BindableObject bindable);
    protected abstract virtual UInt32 get_DefaultDuration();
    protected abstract virtual void set_DefaultDuration(UInt32 value);
    public abstract virtual Task Animate(TView view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.AnimationBehavior : EventToCommandBehavior {
    public static BindableProperty AnimationTypeProperty;
    internal static BindablePropertyKey AnimateCommandPropertyKey;
    public static BindableProperty AnimateCommandProperty;
    private bool isAnimating;
    [NullableAttribute("2")]
private TapGestureRecognizer tapGestureRecognizer;
    [NullableAttribute("2")]
public AnimationBase AnimationType { get; public set; }
    public ICommand AnimateCommand { get; }
    private static AnimationBehavior();
    [NullableContextAttribute("2")]
public AnimationBase get_AnimationType();
    [NullableContextAttribute("2")]
public void set_AnimationType(AnimationBase value);
    public ICommand get_AnimateCommand();
    protected virtual void OnAttachedTo(VisualElement bindable);
    protected virtual void OnDetachingFrom(VisualElement bindable);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.AnimationBehavior/<OnTriggerHandled>d__12")]
protected virtual void OnTriggerHandled(object sender, object eventArgs);
    private static object CreateAnimateCommand(BindableObject bindable);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.AnimationBehavior/<OnAnimate>d__14")]
private Task OnAnimate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object sender, object eventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.Behaviors.AnimationWrapper : object {
    private Easing easing;
    private UInt32 length;
    private Action`2<double, bool> onFinished;
    private Animation animation;
    private IAnimatable owner;
    private UInt32 rate;
    private Func`1<bool> shouldRepeat;
    private string name;
    public bool IsRunning { get; }
    public AnimationWrapper(Animation animation, string name, IAnimatable owner, UInt32 rate, UInt32 length, Easing easing, Action`2<double, bool> onFinished, Func`1<bool> shouldRepeat);
    public bool Abort();
    public void Commit();
    public bool get_IsRunning();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior : TextValidationBehavior {
    private List`1<Predicate`1<char>> characterPredicates;
    public static BindableProperty CharacterTypeProperty;
    public static BindableProperty MinimumCharacterCountProperty;
    public static BindableProperty MaximumCharacterCountProperty;
    public CharacterType CharacterType { get; public set; }
    public int MinimumCharacterCount { get; public set; }
    public int MaximumCharacterCount { get; public set; }
    private static CharactersValidationBehavior();
    public CharacterType get_CharacterType();
    public void set_CharacterType(CharacterType value);
    public int get_MinimumCharacterCount();
    public void set_MinimumCharacterCount(int value);
    public int get_MaximumCharacterCount();
    public void set_MaximumCharacterCount(int value);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior/<ValidateAsync>d__14")]
protected virtual ValueTask`1<bool> ValidateAsync(object value, CancellationToken token);
    private static void OnCharacterTypePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [IteratorStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior/<GetCharacterPredicates>d__16")]
private static IEnumerable`1<Predicate`1<char>> GetCharacterPredicates(CharacterType characterType);
    private void OnCharacterTypePropertyChanged();
    [NullableContextAttribute("2")]
private bool Validate(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<bool> <>n__0(object value, CancellationToken token);
    [CompilerGeneratedAttribute]
private bool <Validate>b__18_0(char character);
}
[FlagsAttribute]
public enum Xamarin.CommunityToolkit.Behaviors.CharacterType : Enum {
    public int value__;
    public static CharacterType LowercaseLetter;
    public static CharacterType UppercaseLetter;
    public static CharacterType Letter;
    public static CharacterType Digit;
    public static CharacterType Alphanumeric;
    public static CharacterType Whitespace;
    public static CharacterType NonAlphanumericSymbol;
    public static CharacterType LowercaseLatinLetter;
    public static CharacterType UppercaseLatinLetter;
    public static CharacterType LatinLetter;
    public static CharacterType Any;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase : AnimationBase {
    public static BindableProperty IsRepeatedProperty;
    public bool IsRepeated { get; public set; }
    private static CompoundAnimationBase();
    public bool get_IsRepeated();
    public void set_IsRepeated(bool value);
    public virtual Task Animate(View view);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase/<Animate>d__5")]
public Task Animate(Nullable`1<CancellationToken> cancellationToken, View[] views);
    private AnimationWrapper CreateAnimation(UInt32 rate, Action`2<double, bool> onFinished, Func`1<bool> shouldRepeat, View[] views);
    protected abstract virtual Animation CreateAnimation(View[] views);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.EmailValidationBehavior : TextValidationBehavior {
    private Regex normalizerRegex;
    protected string DefaultRegexPattern { get; }
    protected RegexOptions DefaultRegexOptions { get; }
    protected virtual string get_DefaultRegexPattern();
    protected virtual RegexOptions get_DefaultRegexOptions();
    [NullableContextAttribute("2")]
protected virtual object Decorate(object value);
    [CompilerGeneratedAttribute]
internal static string <Decorate>g__DomainMapper|5_0(Match match);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior : BaseBehavior`1<VisualElement> {
    [NullableAttribute("1")]
public static BindableProperty EventNameProperty;
    [NullableAttribute("1")]
public static BindableProperty CommandProperty;
    [NullableAttribute("1")]
public static BindableProperty CommandParameterProperty;
    [NullableAttribute("1")]
public static BindableProperty EventArgsConverterProperty;
    [NullableAttribute("1")]
private MethodInfo eventHandlerMethodInfo;
    private Delegate eventHandler;
    private EventInfo eventInfo;
    public string EventName { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    [NullableAttribute("1")]
public IValueConverter EventArgsConverter { get; public set; }
    private static EventToCommandBehavior();
    public string get_EventName();
    public void set_EventName(string value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    [NullableContextAttribute("1")]
public IValueConverter get_EventArgsConverter();
    [NullableContextAttribute("1")]
public void set_EventArgsConverter(IValueConverter value);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedTo(VisualElement bindable);
    [NullableContextAttribute("1")]
protected virtual void OnDetachingFrom(VisualElement bindable);
    [NullableContextAttribute("1")]
private static void OnEventNamePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void RegisterEvent();
    private void UnregisterEvent();
    [PreserveAttribute]
protected virtual void OnTriggerHandled(object sender, object eventArgs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior`1 : EventToCommandBehavior {
    protected virtual void OnTriggerHandled(object sender, object eventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.FadeAnimation : AnimationBase {
    public static BindableProperty FadeProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    public double Fade { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static FadeAnimation();
    public double get_Fade();
    public void set_Fade(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.FadeAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
public class Xamarin.CommunityToolkit.Behaviors.FlipHorizontalAnimation : RotateAnimation {
    [CompilerGeneratedAttribute]
private double <DefaultRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    protected double DefaultRotation { get; protected set; }
    protected UInt32 DefaultDuration { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual double get_DefaultRotation();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultRotation(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.FlipHorizontalAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
public class Xamarin.CommunityToolkit.Behaviors.FlipVerticalAnimation : RotateAnimation {
    [CompilerGeneratedAttribute]
private double <DefaultRotation>k__BackingField;
    protected double DefaultRotation { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual double get_DefaultRotation();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultRotation(double value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.FlipVerticalAnimation/<Animate>d__4")]
public virtual Task Animate(View view);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Behaviors.ImpliedOrderGridBehavior : BaseBehavior`1<Grid> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Boolean[][] usedMatrix;
    private int rowCount;
    private int columnCount;
    [CompilerGeneratedAttribute]
private bool <ThrowOnLayoutWarning>k__BackingField;
    public bool ThrowOnLayoutWarning { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ThrowOnLayoutWarning();
    [CompilerGeneratedAttribute]
public void set_ThrowOnLayoutWarning(bool value);
    protected virtual void OnAttachedTo(Grid bindable);
    protected virtual void OnDetachingFrom(Grid bindable);
    private void OnInternalGridChildAdded(object sender, ElementEventArgs e);
    private void LogWarning(string warning);
    private Boolean[][] InitMatrix();
    private void FindNextCell(Int32& rowIndex, Int32& columnIndex);
    private void UpdateUsedCells(int row, int column, int rowSpan, int columnSpan);
    private void ProcessElement(BindableObject view);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Xamarin.CommunityToolkit.Behaviors.Internals.BaseBehavior`1 : Behavior`1<TView> {
    private static MethodInfo getContextMethod;
    private static FieldInfo bindingField;
    private BindingBase defaultBindingContextBinding;
    [CompilerGeneratedAttribute]
private TView <View>k__BackingField;
    protected TView View { get; private set; }
    private static BaseBehavior`1();
    [CompilerGeneratedAttribute]
protected TView get_View();
    [CompilerGeneratedAttribute]
private void set_View(TView value);
    [NullableContextAttribute("1")]
internal bool TrySetBindingContext(Binding binding);
    internal bool TryRemoveBindingContext();
    [NullableContextAttribute("1")]
protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedTo(TView bindable);
    [NullableContextAttribute("1")]
protected virtual void OnDetachingFrom(TView bindable);
    [NullableContextAttribute("1")]
protected bool IsBound(BindableProperty property, BindingBase defaultBinding);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior : BaseBehavior`1<VisualElement> {
    public static string ValidVisualState;
    public static string InvalidVisualState;
    public static BindableProperty IsNotValidProperty;
    public static BindableProperty IsValidProperty;
    public static BindableProperty IsRunningProperty;
    public static BindableProperty ValidStyleProperty;
    public static BindableProperty InvalidStyleProperty;
    public static BindableProperty FlagsProperty;
    public static BindableProperty ValueProperty;
    public static BindableProperty ValuePropertyNameProperty;
    public static BindableProperty ForceValidateCommandProperty;
    private ValidationFlags currentStatus;
    private bool isAttaching;
    [NullableAttribute("2")]
private BindingBase defaultValueBinding;
    [NullableAttribute("2")]
private CancellationTokenSource validationTokenSource;
    [CompilerGeneratedAttribute]
private ICommand <DefaultForceValidateCommand>k__BackingField;
    public bool IsValid { get; public set; }
    public bool IsRunning { get; public set; }
    public bool IsNotValid { get; public set; }
    public Style ValidStyle { get; public set; }
    public Style InvalidStyle { get; public set; }
    public ValidationFlags Flags { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    [NullableAttribute("2")]
public string ValuePropertyName { get; public set; }
    [NullableAttribute("2")]
public ICommand ForceValidateCommand { get; public set; }
    protected string DefaultValuePropertyName { get; }
    protected ICommand DefaultForceValidateCommand { get; }
    private static ValidationBehavior();
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public bool get_IsRunning();
    public void set_IsRunning(bool value);
    public bool get_IsNotValid();
    public void set_IsNotValid(bool value);
    public Style get_ValidStyle();
    public void set_ValidStyle(Style value);
    public Style get_InvalidStyle();
    public void set_InvalidStyle(Style value);
    public ValidationFlags get_Flags();
    public void set_Flags(ValidationFlags value);
    [NullableContextAttribute("2")]
public object get_Value();
    [NullableContextAttribute("2")]
public void set_Value(object value);
    [NullableContextAttribute("2")]
public string get_ValuePropertyName();
    [NullableContextAttribute("2")]
public void set_ValuePropertyName(string value);
    [NullableContextAttribute("2")]
public ICommand get_ForceValidateCommand();
    [NullableContextAttribute("2")]
public void set_ForceValidateCommand(ICommand value);
    protected virtual string get_DefaultValuePropertyName();
    [CompilerGeneratedAttribute]
protected virtual ICommand get_DefaultForceValidateCommand();
    public ValueTask ForceValidate();
    internal ValueTask ValidateNestedAsync(CancellationToken token);
    [NullableContextAttribute("2")]
protected virtual object Decorate(object value);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> ValidateAsync(object value, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior/<OnAttachedTo>d__52")]
protected virtual void OnAttachedTo(VisualElement bindable);
    protected virtual void OnDetachingFrom(VisualElement bindable);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior/<OnViewPropertyChanged>d__54")]
protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior/<OnValidationPropertyChanged>d__55")]
protected static void OnValidationPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnIsValidPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnValuePropertyNamePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object GetDefaultForceValidateCommand(BindableObject bindable);
    private static object GetDefaultValuePropertyName(BindableObject bindable);
    private void OnIsValidPropertyChanged();
    private void OnValuePropertyChanged();
    private void OnValuePropertyNamePropertyChanged();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior/<UpdateStateAsync>d__64")]
private ValueTask UpdateStateAsync(bool isForced, Nullable`1<CancellationToken> parentToken);
    private void UpdateStyle();
    [NullableContextAttribute("2")]
private void ResetValidationTokenSource(CancellationTokenSource newTokenSource);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(VisualElement bindable);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Behaviors.MaskedBehavior : BaseBehavior`1<InputView> {
    public static BindableProperty MaskProperty;
    public static BindableProperty UnMaskedCharacterProperty;
    [NullableAttribute("2")]
private IDictionary`2<int, char> positions;
    private bool applyingMask;
    [NullableAttribute("2")]
public string Mask { get; public set; }
    public char UnMaskedCharacter { get; public set; }
    private static MaskedBehavior();
    [NullableContextAttribute("2")]
public string get_Mask();
    [NullableContextAttribute("2")]
public void set_Mask(string value);
    public char get_UnMaskedCharacter();
    public void set_UnMaskedCharacter(char value);
    private static void OnMaskPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnUnMaskedCharacterPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTextPropertyChanged();
    private void SetPositions();
    private void OnMaskChanged();
    [NullableContextAttribute("2")]
private string RemoveMaskNullableString(string text);
    private string RemoveMask(string text);
    [NullableContextAttribute("2")]
private void ApplyMask(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior : BaseBehavior`1<InputView> {
    public static BindableProperty CommandProperty;
    public static BindableProperty ShouldDismissKeyboardAutomaticallyProperty;
    private WeakEventManager`1<MaxLengthReachedEventArgs> maxLengthReachedEventManager;
    [NullableAttribute("2")]
public ICommand Command { get; public set; }
    public bool ShouldDismissKeyboardAutomatically { get; public set; }
    private static MaxLengthReachedBehavior();
    [NullableContextAttribute("2")]
public ICommand get_Command();
    [NullableContextAttribute("2")]
public void set_Command(ICommand value);
    public bool get_ShouldDismissKeyboardAutomatically();
    public void set_ShouldDismissKeyboardAutomatically(bool value);
    public void add_MaxLengthReached(EventHandler`1<MaxLengthReachedEventArgs> value);
    public void remove_MaxLengthReached(EventHandler`1<MaxLengthReachedEventArgs> value);
    protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTextPropertyChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public MaxLengthReachedEventArgs(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContentPropertyAttribute("Children")]
public class Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior : ValidationBehavior {
    public static BindableProperty ErrorsProperty;
    public static BindableProperty ErrorProperty;
    private ObservableCollection`1<ValidationBehavior> children;
    [NullableAttribute("2")]
public List`1<object> Errors { get; public set; }
    public IList`1<ValidationBehavior> Children { get; }
    private static MultiValidationBehavior();
    [NullableContextAttribute("2")]
public List`1<object> get_Errors();
    [NullableContextAttribute("2")]
public void set_Errors(List`1<object> value);
    public IList`1<ValidationBehavior> get_Children();
    public static object GetError(BindableObject bindable);
    public static void SetError(BindableObject bindable, object value);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior/<ValidateAsync>d__11")]
protected virtual ValueTask`1<bool> ValidateAsync(object value, CancellationToken token);
    private void OnChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior : ValidationBehavior {
    public static BindableProperty MinimumValueProperty;
    public static BindableProperty MaximumValueProperty;
    public static BindableProperty MinimumDecimalPlacesProperty;
    public static BindableProperty MaximumDecimalPlacesProperty;
    public double MinimumValue { get; public set; }
    public double MaximumValue { get; public set; }
    public int MinimumDecimalPlaces { get; public set; }
    public int MaximumDecimalPlaces { get; public set; }
    private static NumericValidationBehavior();
    public double get_MinimumValue();
    public void set_MinimumValue(double value);
    public double get_MaximumValue();
    public void set_MaximumValue(double value);
    public int get_MinimumDecimalPlaces();
    public void set_MinimumDecimalPlaces(int value);
    public int get_MaximumDecimalPlaces();
    public void set_MaximumDecimalPlaces(int value);
    [NullableContextAttribute("2")]
protected virtual object Decorate(object value);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> ValidateAsync(object value, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Behaviors.ProgressBarAnimationBehavior : BaseBehavior`1<ProgressBar> {
    public static BindableProperty AnimateProgressProperty;
    public double AnimateProgress { get; public set; }
    private static ProgressBarAnimationBehavior();
    public double get_AnimateProgress();
    public void set_AnimateProgress(double value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.ProgressBarAnimationBehavior/<OnAnimateProgressPropertyChanged>d__4")]
private static void OnAnimateProgressPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.ProgressBarAnimationBehavior/<Animate>d__5")]
private Task Animate();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.RequiredStringValidationBehavior : ValidationBehavior {
    [NullableAttribute("1")]
public static BindableProperty RequiredStringProperty;
    public string RequiredString { get; public set; }
    private static RequiredStringValidationBehavior();
    public string get_RequiredString();
    public void set_RequiredString(string value);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> ValidateAsync(object value, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.RotateAnimation : AnimationBase {
    public static BindableProperty RotationProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultRotation>k__BackingField;
    public double Rotation { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    protected double DefaultRotation { get; protected set; }
    private static RotateAnimation();
    public double get_Rotation();
    public void set_Rotation(double value);
    private static object GetDefaulRotationProperty(BindableObject bindable);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [CompilerGeneratedAttribute]
protected virtual double get_DefaultRotation();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultRotation(double value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.RotateAnimation/<Animate>d__13")]
public virtual Task Animate(View view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.RubberBandAnimation : CompoundAnimationBase {
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    protected UInt32 DefaultDuration { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    protected virtual Animation CreateAnimation(View[] views);
    private static Animation Create(View[] views);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.ScaleAnimation : AnimationBase {
    public static BindableProperty ScaleProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    public double Scale { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static ScaleAnimation();
    public double get_Scale();
    public void set_Scale(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.ScaleAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior : BaseBehavior`1<VisualElement> {
    public static BindableProperty NextElementProperty;
    private static SetFocusOnEntryCompletedBehavior();
    public static VisualElement GetNextElement(BindableObject view);
    public static void SetNextElement(BindableObject view, VisualElement value);
    private static void OnNextElementChanged(BindableObject bindable, object oldValue, object newValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.ShakeAnimation : AnimationBase {
    public static BindableProperty StartFactorProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    public double StartFactor { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static ShakeAnimation();
    public double get_StartFactor();
    public void set_StartFactor(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.ShakeAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.TadaAnimation : CompoundAnimationBase {
    public static BindableProperty MaximumScaleProperty;
    public static BindableProperty MinimumScaleProperty;
    public static BindableProperty RotationAngleProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    public double MaximumScale { get; public set; }
    public double MinimumScale { get; public set; }
    public double RotationAngle { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static TadaAnimation();
    public double get_MaximumScale();
    public void set_MaximumScale(double value);
    public double get_MinimumScale();
    public void set_MinimumScale(double value);
    public double get_RotationAngle();
    public void set_RotationAngle(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    protected virtual Animation CreateAnimation(View[] views);
    private static Animation Create(double rotationAngle, double minimumScale, double maximumScale, View[] views);
}
[FlagsAttribute]
public enum Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags : Enum {
    public int value__;
    public static TextDecorationFlags None;
    public static TextDecorationFlags TrimStart;
    public static TextDecorationFlags TrimEnd;
    public static TextDecorationFlags Trim;
    public static TextDecorationFlags NullToEmpty;
    public static TextDecorationFlags NormalizeWhiteSpace;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior : ValidationBehavior {
    public static BindableProperty MinimumLengthProperty;
    public static BindableProperty MaximumLengthProperty;
    public static BindableProperty DecorationFlagsProperty;
    public static BindableProperty RegexPatternProperty;
    public static BindableProperty RegexOptionsProperty;
    [NullableAttribute("2")]
private Regex regex;
    public int MinimumLength { get; public set; }
    public int MaximumLength { get; public set; }
    public TextDecorationFlags DecorationFlags { get; public set; }
    [NullableAttribute("2")]
public string RegexPattern { get; public set; }
    public RegexOptions RegexOptions { get; public set; }
    protected string DefaultRegexPattern { get; }
    protected RegexOptions DefaultRegexOptions { get; }
    private static TextValidationBehavior();
    public int get_MinimumLength();
    public void set_MinimumLength(int value);
    public int get_MaximumLength();
    public void set_MaximumLength(int value);
    public TextDecorationFlags get_DecorationFlags();
    public void set_DecorationFlags(TextDecorationFlags value);
    [NullableContextAttribute("2")]
public string get_RegexPattern();
    [NullableContextAttribute("2")]
public void set_RegexPattern(string value);
    public RegexOptions get_RegexOptions();
    public void set_RegexOptions(RegexOptions value);
    protected virtual string get_DefaultRegexPattern();
    protected virtual RegexOptions get_DefaultRegexOptions();
    [NullableContextAttribute("2")]
protected virtual object Decorate(object value);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> ValidateAsync(object value, CancellationToken token);
    private static void OnRegexPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object GetDefaultRegexPattern(BindableObject bindable);
    private static object GetDefaultRegexOptions(BindableObject bindable);
    private void OnRegexPropertyChanged();
    private string NormalizeWhiteSpace(string value);
}
public class Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior : TextValidationBehavior {
    [NullableAttribute("1")]
public static BindableProperty UriKindProperty;
    public UriKind UriKind { get; public set; }
    private static UriValidationBehavior();
    public UriKind get_UriKind();
    public void set_UriKind(UriKind value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior/<ValidateAsync>d__4")]
protected virtual ValueTask`1<bool> ValidateAsync(object value, CancellationToken token);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<bool> <>n__0(object value, CancellationToken token);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior : BaseBehavior`1<InputView> {
    [NullableAttribute("1")]
public static BindableProperty CommandProperty;
    [NullableAttribute("1")]
public static BindableProperty CommandParameterProperty;
    [NullableAttribute("1")]
public static BindableProperty StoppedTypingTimeThresholdProperty;
    [NullableAttribute("1")]
public static BindableProperty MinimumLengthThresholdProperty;
    [NullableAttribute("1")]
public static BindableProperty ShouldDismissKeyboardAutomaticallyProperty;
    private CancellationTokenSource tokenSource;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public int StoppedTypingTimeThreshold { get; public set; }
    public int MinimumLengthThreshold { get; public set; }
    public bool ShouldDismissKeyboardAutomatically { get; public set; }
    private static UserStoppedTypingBehavior();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public int get_StoppedTypingTimeThreshold();
    public void set_StoppedTypingTimeThreshold(int value);
    public int get_MinimumLengthThreshold();
    public void set_MinimumLengthThreshold(int value);
    public bool get_ShouldDismissKeyboardAutomatically();
    public void set_ShouldDismissKeyboardAutomatically(bool value);
    [NullableContextAttribute("1")]
protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTextPropertyChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnTextPropertyChanged>b__22_0(Task task);
}
[FlagsAttribute]
public enum Xamarin.CommunityToolkit.Behaviors.ValidationFlags : Enum {
    public int value__;
    public static ValidationFlags None;
    public static ValidationFlags ValidateOnAttaching;
    public static ValidationFlags ValidateOnFocusing;
    public static ValidationFlags ValidateOnUnfocusing;
    public static ValidationFlags ValidateOnValueChanging;
    public static ValidationFlags ForceMakeValidWhenFocused;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Xamarin.CommunityToolkit.Converters.BaseConverter`2 : BaseConverterOneWay`2<TFrom, TTo> {
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual TFrom ConvertBackTo(TTo value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.Converters.BaseConverterOneWay`2 : ValueConverterExtension {
    public abstract virtual TTo ConvertFrom(TFrom value);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
private sealed virtual override object Xamarin.Forms.IValueConverter.Convert(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Xamarin.CommunityToolkit.Converters.BaseNullableConverter`2 : BaseNullableConverterOneWay`2<TFrom, TTo> {
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual TFrom ConvertBackTo(TTo value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.Converters.BaseNullableConverterOneWay`2 : ValueConverterExtension {
    public abstract virtual TTo ConvertFrom(TFrom value);
    [NullableContextAttribute("1")]
public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private sealed virtual override object Xamarin.Forms.IValueConverter.Convert(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.BoolToObjectConverter : BoolToObjectConverter`1<object> {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1 : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private TObject <TrueObject>k__BackingField;
    [CompilerGeneratedAttribute]
private TObject <FalseObject>k__BackingField;
    public TObject TrueObject { get; public set; }
    public TObject FalseObject { get; public set; }
    [CompilerGeneratedAttribute]
public TObject get_TrueObject();
    [CompilerGeneratedAttribute]
public void set_TrueObject(TObject value);
    [CompilerGeneratedAttribute]
public TObject get_FalseObject();
    [CompilerGeneratedAttribute]
public void set_FalseObject(TObject value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ByteArrayToImageSourceConverter : BaseNullableConverter`2<Byte[], ImageSource> {
    public virtual Byte[] ConvertBackTo(ImageSource value);
    public virtual ImageSource ConvertFrom(Byte[] value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToBlackKeyConverter : BaseConverterOneWay`2<Color, double> {
    public virtual double ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToBlackOrWhiteConverter : BaseConverterOneWay`2<Color, Color> {
    public virtual Color ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToByteAlphaConverter : BaseConverterOneWay`2<Color, byte> {
    public virtual byte ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToByteBlueConverter : BaseConverterOneWay`2<Color, byte> {
    public virtual byte ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToByteGreenConverter : BaseConverterOneWay`2<Color, byte> {
    public virtual byte ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToByteRedConverter : BaseConverterOneWay`2<Color, byte> {
    public virtual byte ConvertFrom(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToCmykaStringConverter : BaseConverterOneWay`2<Color, string> {
    public virtual string ConvertFrom(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToCmykStringConverter : BaseConverterOneWay`2<Color, string> {
    public virtual string ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToColorForTextConverter : BaseConverterOneWay`2<Color, Color> {
    public virtual Color ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToDegreeHueConverter : BaseConverterOneWay`2<Color, double> {
    public virtual double ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToGrayScaleColorConverter : BaseConverterOneWay`2<Color, Color> {
    public virtual Color ConvertFrom(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToHexRgbaStringConverter : BaseConverter`2<Color, string> {
    public virtual string ConvertFrom(Color value);
    public virtual Color ConvertBackTo(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToHexRgbStringConverter : BaseConverter`2<Color, string> {
    public virtual string ConvertFrom(Color value);
    public virtual Color ConvertBackTo(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToHslaStringConverter : BaseConverterOneWay`2<Color, string> {
    public virtual string ConvertFrom(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToHslStringConverter : BaseConverterOneWay`2<Color, string> {
    public virtual string ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToInverseColorConverter : BaseConverterOneWay`2<Color, Color> {
    public virtual Color ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToPercentCyanConverter : BaseConverterOneWay`2<Color, double> {
    public virtual double ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToPercentMagentaConverter : BaseConverterOneWay`2<Color, double> {
    public virtual double ConvertFrom(Color value);
}
public class Xamarin.CommunityToolkit.Converters.ColorToPercentYellowConverter : BaseConverterOneWay`2<Color, double> {
    public virtual double ConvertFrom(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToRgbaStringConverter : BaseConverterOneWay`2<Color, string> {
    public virtual string ConvertFrom(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ColorToRgbStringConverter : BaseConverterOneWay`2<Color, string> {
    public virtual string ConvertFrom(Color value);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.CompareConverter : CompareConverter`1<object> {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.Converters.CompareConverter`1 : ValueConverterExtension {
    [NullableAttribute("0")]
private Modes<TObject> mode;
    [CompilerGeneratedAttribute]
private IComparable <ComparingValue>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private OperatorType<TObject> <ComparisonOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private TObject <TrueObject>k__BackingField;
    [CompilerGeneratedAttribute]
private TObject <FalseObject>k__BackingField;
    public IComparable ComparingValue { get; public set; }
    [NullableAttribute("0")]
public OperatorType<TObject> ComparisonOperator { get; public set; }
    public TObject TrueObject { get; public set; }
    public TObject FalseObject { get; public set; }
    [CompilerGeneratedAttribute]
public IComparable get_ComparingValue();
    [CompilerGeneratedAttribute]
public void set_ComparingValue(IComparable value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public OperatorType<TObject> get_ComparisonOperator();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ComparisonOperator(OperatorType<TObject> value);
    [CompilerGeneratedAttribute]
public TObject get_TrueObject();
    [CompilerGeneratedAttribute]
public void set_TrueObject(TObject value);
    [CompilerGeneratedAttribute]
public TObject get_FalseObject();
    [CompilerGeneratedAttribute]
public void set_FalseObject(TObject value);
    [NullableContextAttribute("1")]
public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
private object EvaluateCondition(bool comparaisonResult);
    [NullableContextAttribute("1")]
public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.DateTimeOffsetConverter : BaseConverter`2<DateTimeOffset, DateTime> {
    public virtual DateTimeOffset ConvertBackTo(DateTime value);
    public virtual DateTime ConvertFrom(DateTimeOffset value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ContentPropertyAttribute("Ratio")]
public class Xamarin.CommunityToolkit.Converters.DoubleToIntConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private double <Ratio>k__BackingField;
    public double Ratio { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Ratio();
    [CompilerGeneratedAttribute]
public void set_Ratio(double value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private double GetParameter(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.EnumToBoolConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private IList`1<Enum> <TrueValues>k__BackingField;
    public IList`1<Enum> TrueValues { get; }
    [CompilerGeneratedAttribute]
public IList`1<Enum> get_TrueValues();
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    [CompilerGeneratedAttribute]
internal static bool <Convert>g__CompareTwoEnums|3_1(Enum valueToCheck, object referenceValue);
}
public class Xamarin.CommunityToolkit.Converters.EnumToIntConverter : ValueConverterExtension {
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.EqualConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    internal static bool ConvertInternal(object value, object parameter);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ImageResourceConverter : BaseNullableConverterOneWay`2<string, ImageSource> {
    public virtual ImageSource ConvertFrom(string value);
}
public class Xamarin.CommunityToolkit.Converters.IndexToArrayItemConverter : ValueConverterExtension {
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.IntToBoolConverter : BaseConverter`2<int, bool> {
    public virtual int ConvertBackTo(bool value);
    public virtual bool ConvertFrom(int value);
}
public class Xamarin.CommunityToolkit.Converters.InvertedBoolConverter : BaseConverter`2<bool, bool> {
    public virtual bool ConvertBackTo(bool value);
    public virtual bool ConvertFrom(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.IsInRangeConverter : BaseConverterOneWay`2<IComparable, bool> {
    public static BindableProperty MinValueProperty;
    public static BindableProperty MaxValueProperty;
    public object MinValue { get; public set; }
    public object MaxValue { get; public set; }
    private static IsInRangeConverter();
    public object get_MinValue();
    public void set_MinValue(object value);
    public object get_MaxValue();
    public void set_MaxValue(object value);
    public virtual bool ConvertFrom(IComparable value);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.IsNotNullOrEmptyConverter : BaseNullableConverterOneWay`2<object, bool> {
    public virtual bool ConvertFrom(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.IsNullOrEmptyConverter : BaseNullableConverterOneWay`2<object, bool> {
    public virtual bool ConvertFrom(object value);
    internal static bool ConvertInternal(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ItemSelectedEventArgsConverter : BaseNullableConverterOneWay`2<SelectedItemChangedEventArgs, object> {
    public virtual object ConvertFrom(SelectedItemChangedEventArgs value);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ItemTappedEventArgsConverter : BaseNullableConverterOneWay`2<ItemTappedEventArgs, object> {
    public virtual object ConvertFrom(ItemTappedEventArgs value);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ListIsNotNullOrEmptyConverter : BaseNullableConverterOneWay`2<IEnumerable, bool> {
    public virtual bool ConvertFrom(IEnumerable value);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.ListIsNullOrEmptyConverter : BaseNullableConverterOneWay`2<IEnumerable, bool> {
    public virtual bool ConvertFrom(IEnumerable value);
    internal static bool ConvertInternal(IEnumerable value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.ListToStringConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    public string Separator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.Converters.MathExpression : object {
    private static string regexPattern;
    private static NumberStyles numberStyle;
    private static IFormatProvider formatProvider;
    private IReadOnlyList`1<MathOperator> operators;
    private IReadOnlyList`1<double> arguments;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    internal string Expression { get; }
    internal MathExpression(string expression, IEnumerable`1<double> arguments);
    private static MathExpression();
    [CompilerGeneratedAttribute]
internal string get_Expression();
    public double Calculate();
    private IEnumerable`1<string> GetReversePolishNotation(string expression);
    [CompilerGeneratedAttribute]
private double <.ctor>b__8_0(Double[] _);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.MathExpressionConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    public string Expression { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.Converters.MathOperator : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumericCount>k__BackingField;
    [CompilerGeneratedAttribute]
private MathOperatorPrecedence <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Double[], double> <CalculateFunc>k__BackingField;
    public string Name { get; }
    public int NumericCount { get; }
    public MathOperatorPrecedence Precedence { get; }
    public Func`2<Double[], double> CalculateFunc { get; }
    public MathOperator(string name, int numericCount, MathOperatorPrecedence precedence, Func`2<Double[], double> calculateFunc);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_NumericCount();
    [CompilerGeneratedAttribute]
public MathOperatorPrecedence get_Precedence();
    [CompilerGeneratedAttribute]
public Func`2<Double[], double> get_CalculateFunc();
}
internal enum Xamarin.CommunityToolkit.Converters.MathOperatorPrecedence : Enum {
    public int value__;
    public static MathOperatorPrecedence Lowest;
    public static MathOperatorPrecedence Low;
    public static MathOperatorPrecedence Medium;
    public static MathOperatorPrecedence High;
    public static MathOperatorPrecedence Constant;
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.Converters.MultiConverter : List`1<IValueConverter> {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.MultiConverterParameter : BindableObject {
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Type ConverterType { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public void set_ConverterType(Type value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.MultiMathExpressionConverter : MultiValueConverterExtension {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    public string Expression { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.NotEqualConverter : ValueConverterExtension {
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.StateToBooleanConverter : object {
    [CompilerGeneratedAttribute]
private LayoutState <StateToCompare>k__BackingField;
    public LayoutState StateToCompare { get; public set; }
    [CompilerGeneratedAttribute]
public LayoutState get_StateToCompare();
    [CompilerGeneratedAttribute]
public void set_StateToCompare(LayoutState value);
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.StringToListConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Separators>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSplitOptions <SplitOptions>k__BackingField;
    public string Separator { get; public set; }
    public IList`1<string> Separators { get; }
    public StringSplitOptions SplitOptions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Separators();
    [CompilerGeneratedAttribute]
public StringSplitOptions get_SplitOptions();
    [CompilerGeneratedAttribute]
public void set_SplitOptions(StringSplitOptions value);
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    private String[] Split(string valueToSplit, String[] separators);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ContentPropertyAttribute("Type")]
public class Xamarin.CommunityToolkit.Converters.TextCaseConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private TextCaseType <Type>k__BackingField;
    public TextCaseType Type { get; public set; }
    [CompilerGeneratedAttribute]
public TextCaseType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TextCaseType value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private TextCaseType GetParameter(object parameter);
}
public enum Xamarin.CommunityToolkit.Converters.TextCaseType : Enum {
    public int value__;
    public static TextCaseType None;
    public static TextCaseType Upper;
    public static TextCaseType Lower;
    public static TextCaseType FirstUpperRestLower;
}
public class Xamarin.CommunityToolkit.Converters.TimeSpanToDoubleConverter : object {
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Converters.UtcDateTimeToLocalStringConverter : ValueConverterExtension {
    public static BindableProperty DateTimeFormatProperty;
    public string DateTimeFormat { get; public set; }
    private static UtcDateTimeToLocalStringConverter();
    public string get_DateTimeFormat();
    public void set_DateTimeFormat(string value);
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private bool IsValidDateFormat(string dateFormat);
}
public class Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter : MultiValueConverterExtension {
    [CompilerGeneratedAttribute]
private MultiBindingCondition <ConditionType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public MultiBindingCondition ConditionType { get; public set; }
    public int Count { get; public set; }
    [CompilerGeneratedAttribute]
public MultiBindingCondition get_ConditionType();
    [CompilerGeneratedAttribute]
public void set_ConditionType(MultiBindingCondition value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [NullableContextAttribute("1")]
public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    [CompilerGeneratedAttribute]
private bool <ConvertBack>b__9_1(Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("Xamarin.CommunityToolkit.Core.FileMediaSourceConverter")]
public class Xamarin.CommunityToolkit.Core.FileMediaSource : MediaSource {
    public static BindableProperty FileProperty;
    [NullableAttribute("2")]
public string File { get; public set; }
    private static FileMediaSource();
    [NullableContextAttribute("2")]
public string get_File();
    [NullableContextAttribute("2")]
public void set_File(string value);
    public virtual string ToString();
    public static FileMediaSource op_Implicit(string file);
    [NullableContextAttribute("2")]
public static string op_Implicit(FileMediaSource file);
    private static void OnFileMediaSourceChanged(BindableObject bindable, object oldValue, object newValue);
}
[TypeConversionAttribute("Xamarin.CommunityToolkit.Core.FileMediaSource")]
public class Xamarin.CommunityToolkit.Core.FileMediaSourceConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromInvariantString(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConversionAttribute("Xamarin.CommunityToolkit.Core.MediaSourceConverter")]
public abstract class Xamarin.CommunityToolkit.Core.MediaSource : Element {
    private WeakEventManager weakEventManager;
    public static MediaSource FromFile(string file);
    [NullableContextAttribute("2")]
public static MediaSource FromUri(Uri uri);
    public static MediaSource FromUri(string uri);
    [NullableContextAttribute("2")]
[PreserveAttribute]
public static MediaSource op_Implicit(string source);
    [NullableContextAttribute("2")]
[PreserveAttribute]
public static MediaSource op_Implicit(Uri uri);
    protected void OnSourceChanged();
    internal void add_SourceChanged(EventHandler value);
    internal void remove_SourceChanged(EventHandler value);
}
public class Xamarin.CommunityToolkit.Core.MediaSourceConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromInvariantString(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Core.StreamMediaSource : MediaSource {
    [NullableAttribute("1")]
private object synchandle;
    private CancellationTokenSource cancellationTokenSource;
    private TaskCompletionSource`1<bool> completionSource;
    [NullableAttribute("1")]
public static BindableProperty StreamProperty;
    protected CancellationTokenSource CancellationTokenSource { get; private set; }
    private bool IsLoading { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<CancellationToken, Task`1<Stream>> Stream { get; public set; }
    private static StreamMediaSource();
    protected CancellationTokenSource get_CancellationTokenSource();
    private void set_CancellationTokenSource(CancellationTokenSource value);
    private bool get_IsLoading();
    public virtual Func`2<CancellationToken, Task`1<Stream>> get_Stream();
    public virtual void set_Stream(Func`2<CancellationToken, Task`1<Stream>> value);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(string propertyName);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Core.StreamMediaSource/<Xamarin-Forms-IStreamImageSource-GetStreamAsync>d__13")]
private sealed virtual override Task`1<Stream> Xamarin.Forms.IStreamImageSource.GetStreamAsync(CancellationToken userToken);
    protected void OnLoadingCompleted(bool cancelled);
    protected void OnLoadingStarted();
    [NullableContextAttribute("1")]
public virtual Task`1<bool> Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Core.UriMediaSource : MediaSource {
    public static BindableProperty UriProperty;
    [NullableAttribute("2")]
[TypeConverterAttribute("Xamarin.Forms.UriTypeConverter")]
public Uri Uri { get; public set; }
    private static UriMediaSource();
    private static bool UriValueValidator(BindableObject bindable, object value);
    private static void OnUriSourceChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public Uri get_Uri();
    [NullableContextAttribute("2")]
public void set_Uri(Uri value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.CornerRadiusEffect : object {
    public static BindableProperty CornerRadiusProperty;
    private static CornerRadiusEffect();
    private static void OnCornerRadiusPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void ElementViewSizeChanged(object sender, EventArgs e);
    [NullableContextAttribute("2")]
public static CornerRadius GetCornerRadius(BindableObject bindable);
    [NullableContextAttribute("2")]
public static void SetCornerRadius(BindableObject bindable, CornerRadius value);
    private static void UpdateClip(VisualElement elementView);
    private static CornerRadius GetCornerRadius(Rect rect, VisualElement elementView);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.Effects.EffectIds : object {
    private static string effectResolutionGroupName;
    public static string RemoveBorder { get; }
    public static string SelectAllText { get; }
    public static string SafeArea { get; }
    public static string IconTintColor { get; }
    public static string VisualFeedback { get; }
    public static string TouchEffect { get; }
    public static string LifeCycleEffect { get; }
    public static string ShadowEffect { get; }
    public static string Semantic { get; }
    public static string StatusBar { get; }
    public static string NavigationBar { get; }
    private static EffectIds();
    public static string get_RemoveBorder();
    public static string get_SelectAllText();
    public static string get_SafeArea();
    public static string get_IconTintColor();
    public static string get_VisualFeedback();
    public static string get_TouchEffect();
    public static string get_LifeCycleEffect();
    public static string get_ShadowEffect();
    public static string get_Semantic();
    public static string get_StatusBar();
    public static string get_NavigationBar();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.Effects.GestureManager : object {
    private static int animationProgressDelay;
    private Color defaultBackgroundColor;
    [NullableAttribute("2")]
private CancellationTokenSource longPressTokenSource;
    [NullableAttribute("2")]
private CancellationTokenSource animationTokenSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`7<TouchEffect, TouchState, HoverState, int, Easing, CancellationToken, Task> animationTaskFactory;
    private Nullable`1<double> durationMultiplier;
    private double animationProgress;
    private TouchState animationState;
    internal void HandleTouch(TouchEffect sender, TouchStatus status);
    internal void HandleUserInteraction(TouchEffect sender, TouchInteractionStatus interactionStatus);
    internal void HandleHover(TouchEffect sender, HoverStatus status);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Effects.GestureManager/<ChangeStateAsync>d__11")]
internal Task ChangeStateAsync(TouchEffect sender, bool animated);
    internal void HandleLongPress(TouchEffect sender);
    internal void SetCustomAnimationTask(Func`7<TouchEffect, TouchState, HoverState, int, Easing, CancellationToken, Task> animationTaskFactory);
    internal void Reset();
    internal void OnTapped(TouchEffect sender);
    private void HandleCollectionViewSelection(TouchEffect sender);
    internal void AbortAnimations(TouchEffect sender);
    private void UpdateStatusAndState(TouchEffect sender, TouchStatus status, TouchState state);
    private void UpdateVisualState(VisualElement visualElement, TouchState touchState, HoverState hoverState);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Effects.GestureManager/<SetBackgroundImageAsync>d__20")]
private Task SetBackgroundImageAsync(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, CancellationToken token);
    private Task SetBackgroundColor(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, Easing easing);
    private Task SetOpacity(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, Easing easing);
    private Task SetScale(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, Easing easing);
    private Task SetTranslation(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, Easing easing);
    private Task SetRotation(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, Easing easing);
    private Task SetRotationX(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, Easing easing);
    private Task SetRotationY(TouchEffect sender, TouchState touchState, HoverState hoverState, int duration, Easing easing);
    private Color GetBackgroundColor(Color color);
    private Task RunAnimationTask(TouchEffect sender, TouchState touchState, HoverState hoverState, CancellationToken token, Nullable`1<double> durationMultiplier);
}
public enum Xamarin.CommunityToolkit.Effects.HoverState : Enum {
    public int value__;
    public static HoverState Normal;
    public static HoverState Hovered;
}
public class Xamarin.CommunityToolkit.Effects.HoverStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private HoverState <State>k__BackingField;
    public HoverState State { get; }
    internal HoverStateChangedEventArgs(HoverState state);
    [CompilerGeneratedAttribute]
public HoverState get_State();
}
public enum Xamarin.CommunityToolkit.Effects.HoverStatus : Enum {
    public int value__;
    public static HoverStatus Entered;
    public static HoverStatus Exited;
}
public class Xamarin.CommunityToolkit.Effects.HoverStatusChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private HoverStatus <Status>k__BackingField;
    public HoverStatus Status { get; }
    internal HoverStatusChangedEventArgs(HoverStatus status);
    [CompilerGeneratedAttribute]
public HoverStatus get_Status();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.IconTintColorEffect : object {
    public static BindableProperty TintColorProperty;
    private static IconTintColorEffect();
    public static Color GetTintColor(BindableObject view);
    public static void SetTintColor(BindableObject view, Color value);
    private static void OnTintColorChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.CommunityToolkit.Effects.IconTintColorEffectRouter : RoutingEffect {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.LifecycleEffect : RoutingEffect {
    private WeakEventManager eventManager;
    public void add_Loaded(EventHandler value);
    public void remove_Loaded(EventHandler value);
    public void add_Unloaded(EventHandler value);
    public void remove_Unloaded(EventHandler value);
    internal void RaiseLoadedEvent(Element element);
    internal void RaiseUnloadedEvent(Element element);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.LongPressCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Parameter>k__BackingField;
    public object Parameter { get; }
    internal LongPressCompletedEventArgs(object parameter);
    [CompilerGeneratedAttribute]
public object get_Parameter();
}
public class Xamarin.CommunityToolkit.Effects.RemoveBorderEffect : RoutingEffect {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xamarin.CommunityToolkit.Effects.SafeAreaEffect : object {
    public static BindableProperty SafeAreaProperty;
    private static SafeAreaEffect();
    public static SafeArea GetSafeArea(BindableObject view);
    public static void SetSafeArea(BindableObject view, SafeArea value);
    private static void OnSafeAreaChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.CommunityToolkit.Effects.SafeAreaEffectRouter : RoutingEffect {
}
public class Xamarin.CommunityToolkit.Effects.SelectAllTextEffect : RoutingEffect {
}
public enum Xamarin.CommunityToolkit.Effects.Semantic.HeadingLevel : Enum {
    public int value__;
    public static HeadingLevel None;
    public static HeadingLevel Level1;
    public static HeadingLevel Level2;
    public static HeadingLevel Level3;
    public static HeadingLevel Level4;
    public static HeadingLevel Level5;
    public static HeadingLevel Level6;
    public static HeadingLevel Level7;
    public static HeadingLevel Level8;
    public static HeadingLevel Level9;
}
public enum Xamarin.CommunityToolkit.Effects.Semantic.SemanticInclusion : Enum {
    public int value__;
    public static SemanticInclusion Default;
    public static SemanticInclusion Include;
    public static SemanticInclusion Exclude;
    public static SemanticInclusion ExcludeWithChildren;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xamarin.CommunityToolkit.Effects.SemanticEffect : object {
    public static BindableProperty HeadingLevelProperty;
    public static BindableProperty SemanticInclusionProperty;
    public static BindableProperty DescriptionProperty;
    public static BindableProperty HintProperty;
    private static SemanticEffect();
    public static HeadingLevel GetHeadingLevel(BindableObject view);
    public static void SetHeadingLevel(BindableObject view, HeadingLevel value);
    public static SemanticInclusion GetSemanticInclusion(BindableObject view);
    public static void SetSemanticInclusion(BindableObject view, SemanticInclusion value);
    public static string GetDescription(BindableObject bindable);
    public static void SetDescription(BindableObject bindable, string value);
    public static string GetHint(BindableObject bindable);
    public static void SetHint(BindableObject bindable, string value);
    private static void OnPropertyChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.CommunityToolkit.Effects.SemanticEffectRouter : RoutingEffect {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.ShadowEffect : RoutingEffect {
    internal static string ColorPropertyName;
    internal static string OpacityPropertyName;
    internal static string RadiusPropertyName;
    internal static string OffsetXPropertyName;
    internal static string OffsetYPropertyName;
    public static BindableProperty ColorProperty;
    public static BindableProperty OpacityProperty;
    public static BindableProperty RadiusProperty;
    public static BindableProperty OffsetXProperty;
    public static BindableProperty OffsetYProperty;
    private static ShadowEffect();
    public static Color GetColor(BindableObject bindable);
    public static void SetColor(BindableObject bindable, Color value);
    public static double GetOpacity(BindableObject bindable);
    public static void SetOpacity(BindableObject bindable, double value);
    public static double GetRadius(BindableObject bindable);
    public static void SetRadius(BindableObject bindable, double value);
    public static double GetOffsetX(BindableObject bindable);
    public static void SetOffsetX(BindableObject bindable, double value);
    public static double GetOffsetY(BindableObject bindable);
    public static void SetOffsetY(BindableObject bindable, double value);
    private static void TryGenerateEffect(BindableObject bindable, object oldValue, object newValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.StatusBarEffect : RoutingEffect {
    public static BindableProperty ColorProperty;
    public static BindableProperty StyleProperty;
    private static StatusBarEffect();
    public static Color GetColor(BindableObject bindable);
    public static StatusBarStyle GetStyle(BindableObject bindable);
    private static void TryGenerateEffect(BindableObject bindable, object oldValue, object newValue);
}
public enum Xamarin.CommunityToolkit.Effects.StatusBarStyle : Enum {
    public int value__;
    public static StatusBarStyle Default;
    public static StatusBarStyle LightContent;
    public static StatusBarStyle DarkContent;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.TouchCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Parameter>k__BackingField;
    public object Parameter { get; }
    internal TouchCompletedEventArgs(object parameter);
    [CompilerGeneratedAttribute]
public object get_Parameter();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.TouchEffect : RoutingEffect {
    [NullableAttribute("1")]
public static string UnpressedVisualState;
    [NullableAttribute("1")]
public static string PressedVisualState;
    [NullableAttribute("1")]
public static string HoveredVisualState;
    [NullableAttribute("1")]
public static BindableProperty IsAvailableProperty;
    [NullableAttribute("1")]
public static BindableProperty ShouldMakeChildrenInputTransparentProperty;
    [NullableAttribute("1")]
public static BindableProperty CommandProperty;
    [NullableAttribute("1")]
public static BindableProperty LongPressCommandProperty;
    [NullableAttribute("1")]
public static BindableProperty CommandParameterProperty;
    [NullableAttribute("1")]
public static BindableProperty LongPressCommandParameterProperty;
    [NullableAttribute("1")]
public static BindableProperty LongPressDurationProperty;
    [NullableAttribute("1")]
public static BindableProperty StatusProperty;
    [NullableAttribute("1")]
public static BindableProperty StateProperty;
    [NullableAttribute("1")]
public static BindableProperty InteractionStatusProperty;
    [NullableAttribute("1")]
public static BindableProperty HoverStatusProperty;
    [NullableAttribute("1")]
public static BindableProperty HoverStateProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalBackgroundColorProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredBackgroundColorProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedBackgroundColorProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalOpacityProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredOpacityProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedOpacityProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalScaleProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredScaleProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedScaleProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalTranslationXProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredTranslationXProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedTranslationXProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalTranslationYProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredTranslationYProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedTranslationYProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalRotationProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredRotationProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedRotationProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalRotationXProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredRotationXProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedRotationXProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalRotationYProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredRotationYProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedRotationYProperty;
    [NullableAttribute("1")]
public static BindableProperty AnimationDurationProperty;
    [NullableAttribute("1")]
public static BindableProperty AnimationEasingProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedAnimationDurationProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedAnimationEasingProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalAnimationDurationProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalAnimationEasingProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredAnimationDurationProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredAnimationEasingProperty;
    [NullableAttribute("1")]
public static BindableProperty PulseCountProperty;
    [NullableAttribute("1")]
public static BindableProperty IsToggledProperty;
    [NullableAttribute("1")]
public static BindableProperty DisallowTouchThresholdProperty;
    [NullableAttribute("1")]
public static BindableProperty NativeAnimationProperty;
    [NullableAttribute("1")]
public static BindableProperty NativeAnimationColorProperty;
    [NullableAttribute("1")]
public static BindableProperty NativeAnimationRadiusProperty;
    [NullableAttribute("1")]
public static BindableProperty NativeAnimationShadowRadiusProperty;
    [NullableAttribute("1")]
public static BindableProperty NativeAnimationBorderlessProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalBackgroundImageSourceProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredBackgroundImageSourceProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedBackgroundImageSourceProperty;
    [NullableAttribute("1")]
public static BindableProperty BackgroundImageAspectProperty;
    [NullableAttribute("1")]
public static BindableProperty NormalBackgroundImageAspectProperty;
    [NullableAttribute("1")]
public static BindableProperty HoveredBackgroundImageAspectProperty;
    [NullableAttribute("1")]
public static BindableProperty PressedBackgroundImageAspectProperty;
    [NullableAttribute("1")]
public static BindableProperty ShouldSetImageOnAnimationEndProperty;
    [NullableAttribute("1")]
private GestureManager gestureManager;
    [NullableAttribute("1")]
private WeakEventManager weakEventManager;
    private VisualElement element;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoGenerated>k__BackingField;
    internal bool IsDisabled { get; internal set; }
    internal bool IsUsed { get; internal set; }
    internal bool IsAutoGenerated { get; internal set; }
    public bool IsAvailable { get; }
    public bool ShouldMakeChildrenInputTransparent { get; }
    public ICommand Command { get; }
    public ICommand LongPressCommand { get; }
    public object CommandParameter { get; }
    public object LongPressCommandParameter { get; }
    public int LongPressDuration { get; }
    public TouchStatus Status { get; internal set; }
    public TouchState State { get; internal set; }
    public TouchInteractionStatus InteractionStatus { get; internal set; }
    public HoverStatus HoverStatus { get; internal set; }
    public HoverState HoverState { get; internal set; }
    public int DisallowTouchThreshold { get; }
    public bool NativeAnimation { get; }
    public Color NativeAnimationColor { get; }
    public int NativeAnimationRadius { get; }
    public int NativeAnimationShadowRadius { get; }
    public bool NativeAnimationBorderless { get; }
    public Color NormalBackgroundColor { get; }
    public Color HoveredBackgroundColor { get; }
    public Color PressedBackgroundColor { get; }
    public double NormalOpacity { get; }
    public double HoveredOpacity { get; }
    public double PressedOpacity { get; }
    public double NormalScale { get; }
    public double HoveredScale { get; }
    public double PressedScale { get; }
    public double NormalTranslationX { get; }
    public double HoveredTranslationX { get; }
    public double PressedTranslationX { get; }
    public double NormalTranslationY { get; }
    public double HoveredTranslationY { get; }
    public double PressedTranslationY { get; }
    public double NormalRotation { get; }
    public double HoveredRotation { get; }
    public double PressedRotation { get; }
    public double NormalRotationX { get; }
    public double HoveredRotationX { get; }
    public double PressedRotationX { get; }
    public double NormalRotationY { get; }
    public double HoveredRotationY { get; }
    public double PressedRotationY { get; }
    public int AnimationDuration { get; }
    public Easing AnimationEasing { get; }
    public int PressedAnimationDuration { get; }
    public Easing PressedAnimationEasing { get; }
    public int NormalAnimationDuration { get; }
    public Easing NormalAnimationEasing { get; }
    public int HoveredAnimationDuration { get; }
    public Easing HoveredAnimationEasing { get; }
    public int PulseCount { get; }
    public Nullable`1<bool> IsToggled { get; internal set; }
    public ImageSource NormalBackgroundImageSource { get; }
    public ImageSource HoveredBackgroundImageSource { get; }
    public ImageSource PressedBackgroundImageSource { get; }
    public Aspect BackgroundImageAspect { get; }
    public Aspect NormalBackgroundImageAspect { get; }
    public Aspect HoveredBackgroundImageAspect { get; }
    public Aspect PressedBackgroundImageAspect { get; }
    public bool ShouldSetImageOnAnimationEnd { get; }
    internal bool CanExecute { get; }
    internal VisualElement Element { get; internal set; }
    private static TouchEffect();
    [NullableContextAttribute("1")]
public void add_StatusChanged(EventHandler`1<TouchStatusChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_StatusChanged(EventHandler`1<TouchStatusChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void add_StateChanged(EventHandler`1<TouchStateChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_StateChanged(EventHandler`1<TouchStateChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void add_InteractionStatusChanged(EventHandler`1<TouchInteractionStatusChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_InteractionStatusChanged(EventHandler`1<TouchInteractionStatusChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void add_HoverStatusChanged(EventHandler`1<HoverStatusChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_HoverStatusChanged(EventHandler`1<HoverStatusChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void add_HoverStateChanged(EventHandler`1<HoverStateChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_HoverStateChanged(EventHandler`1<HoverStateChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void add_Completed(EventHandler`1<TouchCompletedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_Completed(EventHandler`1<TouchCompletedEventArgs> value);
    [NullableContextAttribute("1")]
public void add_LongPressCompleted(EventHandler`1<LongPressCompletedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_LongPressCompleted(EventHandler`1<LongPressCompletedEventArgs> value);
    public static bool GetIsAvailable(BindableObject bindable);
    public static void SetIsAvailable(BindableObject bindable, bool value);
    public static bool GetShouldMakeChildrenInputTransparent(BindableObject bindable);
    public static void SetShouldMakeChildrenInputTransparent(BindableObject bindable, bool value);
    public static ICommand GetCommand(BindableObject bindable);
    [NullableContextAttribute("1")]
public static void SetCommand(BindableObject bindable, ICommand value);
    public static ICommand GetLongPressCommand(BindableObject bindable);
    [NullableContextAttribute("1")]
public static void SetLongPressCommand(BindableObject bindable, ICommand value);
    public static object GetCommandParameter(BindableObject bindable);
    [NullableContextAttribute("1")]
public static void SetCommandParameter(BindableObject bindable, object value);
    public static object GetLongPressCommandParameter(BindableObject bindable);
    [NullableContextAttribute("1")]
public static void SetLongPressCommandParameter(BindableObject bindable, object value);
    public static int GetLongPressDuration(BindableObject bindable);
    public static void SetLongPressDuration(BindableObject bindable, int value);
    public static TouchStatus GetStatus(BindableObject bindable);
    public static void SetStatus(BindableObject bindable, TouchStatus value);
    public static TouchState GetState(BindableObject bindable);
    public static void SetState(BindableObject bindable, TouchState value);
    public static TouchInteractionStatus GetInteractionStatus(BindableObject bindable);
    public static void SetInteractionStatus(BindableObject bindable, TouchInteractionStatus value);
    public static HoverStatus GetHoverStatus(BindableObject bindable);
    public static void SetHoverStatus(BindableObject bindable, HoverStatus value);
    public static HoverState GetHoverState(BindableObject bindable);
    public static void SetHoverState(BindableObject bindable, HoverState value);
    public static Color GetNormalBackgroundColor(BindableObject bindable);
    public static void SetNormalBackgroundColor(BindableObject bindable, Color value);
    public static Color GetHoveredBackgroundColor(BindableObject bindable);
    public static void SetHoveredBackgroundColor(BindableObject bindable, Color value);
    public static Color GetPressedBackgroundColor(BindableObject bindable);
    public static void SetPressedBackgroundColor(BindableObject bindable, Color value);
    public static double GetNormalOpacity(BindableObject bindable);
    public static void SetNormalOpacity(BindableObject bindable, double value);
    public static double GetHoveredOpacity(BindableObject bindable);
    public static void SetHoveredOpacity(BindableObject bindable, double value);
    public static double GetPressedOpacity(BindableObject bindable);
    public static void SetPressedOpacity(BindableObject bindable, double value);
    public static double GetNormalScale(BindableObject bindable);
    public static void SetNormalScale(BindableObject bindable, double value);
    public static double GetHoveredScale(BindableObject bindable);
    public static void SetHoveredScale(BindableObject bindable, double value);
    public static double GetPressedScale(BindableObject bindable);
    public static void SetPressedScale(BindableObject bindable, double value);
    public static double GetNormalTranslationX(BindableObject bindable);
    public static void SetNormalTranslationX(BindableObject bindable, double value);
    public static double GetHoveredTranslationX(BindableObject bindable);
    public static void SetHoveredTranslationX(BindableObject bindable, double value);
    public static double GetPressedTranslationX(BindableObject bindable);
    public static void SetPressedTranslationX(BindableObject bindable, double value);
    public static double GetNormalTranslationY(BindableObject bindable);
    public static void SetNormalTranslationY(BindableObject bindable, double value);
    public static double GetHoveredTranslationY(BindableObject bindable);
    public static void SetHoveredTranslationY(BindableObject bindable, double value);
    public static double GetPressedTranslationY(BindableObject bindable);
    public static void SetPressedTranslationY(BindableObject bindable, double value);
    public static double GetNormalRotation(BindableObject bindable);
    public static void SetNormalRotation(BindableObject bindable, double value);
    public static double GetHoveredRotation(BindableObject bindable);
    public static void SetHoveredRotation(BindableObject bindable, double value);
    public static double GetPressedRotation(BindableObject bindable);
    public static void SetPressedRotation(BindableObject bindable, double value);
    public static double GetNormalRotationX(BindableObject bindable);
    public static void SetNormalRotationX(BindableObject bindable, double value);
    public static double GetHoveredRotationX(BindableObject bindable);
    public static void SetHoveredRotationX(BindableObject bindable, double value);
    public static double GetPressedRotationX(BindableObject bindable);
    public static void SetPressedRotationX(BindableObject bindable, double value);
    public static double GetNormalRotationY(BindableObject bindable);
    public static void SetNormalRotationY(BindableObject bindable, double value);
    public static double GetHoveredRotationY(BindableObject bindable);
    public static void SetHoveredRotationY(BindableObject bindable, double value);
    public static double GetPressedRotationY(BindableObject bindable);
    public static void SetPressedRotationY(BindableObject bindable, double value);
    public static int GetAnimationDuration(BindableObject bindable);
    public static void SetAnimationDuration(BindableObject bindable, int value);
    public static Easing GetAnimationEasing(BindableObject bindable);
    public static void SetAnimationEasing(BindableObject bindable, Easing value);
    public static int GetPressedAnimationDuration(BindableObject bindable);
    public static void SetPressedAnimationDuration(BindableObject bindable, int value);
    public static Easing GetPressedAnimationEasing(BindableObject bindable);
    public static void SetPressedAnimationEasing(BindableObject bindable, Easing value);
    public static int GetNormalAnimationDuration(BindableObject bindable);
    public static void SetNormalAnimationDuration(BindableObject bindable, int value);
    public static Easing GetNormalAnimationEasing(BindableObject bindable);
    public static void SetNormalAnimationEasing(BindableObject bindable, Easing value);
    public static int GetHoveredAnimationDuration(BindableObject bindable);
    public static void SetHoveredAnimationDuration(BindableObject bindable, int value);
    public static Easing GetHoveredAnimationEasing(BindableObject bindable);
    public static void SetHoveredAnimationEasing(BindableObject bindable, Easing value);
    public static int GetPulseCount(BindableObject bindable);
    public static void SetPulseCount(BindableObject bindable, int value);
    public static Nullable`1<bool> GetIsToggled(BindableObject bindable);
    public static void SetIsToggled(BindableObject bindable, Nullable`1<bool> value);
    public static int GetDisallowTouchThreshold(BindableObject bindable);
    public static void SetDisallowTouchThreshold(BindableObject bindable, int value);
    public static bool GetNativeAnimation(BindableObject bindable);
    public static void SetNativeAnimation(BindableObject bindable, bool value);
    public static Color GetNativeAnimationColor(BindableObject bindable);
    public static void SetNativeAnimationColor(BindableObject bindable, Color value);
    public static int GetNativeAnimationRadius(BindableObject bindable);
    public static void SetNativeAnimationRadius(BindableObject bindable, int value);
    public static int GetNativeAnimationShadowRadius(BindableObject bindable);
    public static void SetNativeAnimationShadowRadius(BindableObject bindable, int value);
    public static bool GetNativeAnimationBorderless(BindableObject bindable);
    public static void SetNativeAnimationBorderless(BindableObject bindable, bool value);
    public static ImageSource GetNormalBackgroundImageSource(BindableObject bindable);
    [NullableContextAttribute("1")]
public static void SetNormalBackgroundImageSource(BindableObject bindable, ImageSource value);
    public static ImageSource GetHoveredBackgroundImageSource(BindableObject bindable);
    [NullableContextAttribute("1")]
public static void SetHoveredBackgroundImageSource(BindableObject bindable, ImageSource value);
    public static ImageSource GetPressedBackgroundImageSource(BindableObject bindable);
    [NullableContextAttribute("1")]
public static void SetPressedBackgroundImageSource(BindableObject bindable, ImageSource value);
    public static Aspect GetBackgroundImageAspect(BindableObject bindable);
    public static void SetBackgroundImageAspect(BindableObject bindable, Aspect value);
    public static Aspect GetNormalBackgroundImageAspect(BindableObject bindable);
    public static void SetNormalBackgroundImageAspect(BindableObject bindable, Aspect value);
    public static Aspect GetHoveredBackgroundImageAspect(BindableObject bindable);
    public static void SetHoveredBackgroundImageAspect(BindableObject bindable, Aspect value);
    public static Aspect GetPressedBackgroundImageAspect(BindableObject bindable);
    public static void SetPressedBackgroundImageAspect(BindableObject bindable, Aspect value);
    public static bool GetShouldSetImageOnAnimationEnd(BindableObject bindable);
    public static void SetShouldSetImageOnAnimationEnd(BindableObject bindable, bool value);
    [NullableContextAttribute("1")]
private static void TryGenerateEffect(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("1")]
private static void ForceUpdateStateAndTryGenerateEffect(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("1")]
private static void ForceUpdateStateWithoutAnimationAndTryGenerateEffect(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("1")]
private static void SetChildrenInputTransparentAndTryGenerateEffect(BindableObject bindable, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
internal bool get_IsDisabled();
    [CompilerGeneratedAttribute]
internal void set_IsDisabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsUsed();
    [CompilerGeneratedAttribute]
internal void set_IsUsed(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAutoGenerated();
    [CompilerGeneratedAttribute]
internal void set_IsAutoGenerated(bool value);
    public bool get_IsAvailable();
    public bool get_ShouldMakeChildrenInputTransparent();
    public ICommand get_Command();
    public ICommand get_LongPressCommand();
    public object get_CommandParameter();
    public object get_LongPressCommandParameter();
    public int get_LongPressDuration();
    public TouchStatus get_Status();
    internal void set_Status(TouchStatus value);
    public TouchState get_State();
    internal void set_State(TouchState value);
    public TouchInteractionStatus get_InteractionStatus();
    internal void set_InteractionStatus(TouchInteractionStatus value);
    public HoverStatus get_HoverStatus();
    internal void set_HoverStatus(HoverStatus value);
    public HoverState get_HoverState();
    internal void set_HoverState(HoverState value);
    public int get_DisallowTouchThreshold();
    public bool get_NativeAnimation();
    public Color get_NativeAnimationColor();
    public int get_NativeAnimationRadius();
    public int get_NativeAnimationShadowRadius();
    public bool get_NativeAnimationBorderless();
    public Color get_NormalBackgroundColor();
    public Color get_HoveredBackgroundColor();
    public Color get_PressedBackgroundColor();
    public double get_NormalOpacity();
    public double get_HoveredOpacity();
    public double get_PressedOpacity();
    public double get_NormalScale();
    public double get_HoveredScale();
    public double get_PressedScale();
    public double get_NormalTranslationX();
    public double get_HoveredTranslationX();
    public double get_PressedTranslationX();
    public double get_NormalTranslationY();
    public double get_HoveredTranslationY();
    public double get_PressedTranslationY();
    public double get_NormalRotation();
    public double get_HoveredRotation();
    public double get_PressedRotation();
    public double get_NormalRotationX();
    public double get_HoveredRotationX();
    public double get_PressedRotationX();
    public double get_NormalRotationY();
    public double get_HoveredRotationY();
    public double get_PressedRotationY();
    public int get_AnimationDuration();
    public Easing get_AnimationEasing();
    public int get_PressedAnimationDuration();
    public Easing get_PressedAnimationEasing();
    public int get_NormalAnimationDuration();
    public Easing get_NormalAnimationEasing();
    public int get_HoveredAnimationDuration();
    public Easing get_HoveredAnimationEasing();
    public int get_PulseCount();
    public Nullable`1<bool> get_IsToggled();
    internal void set_IsToggled(Nullable`1<bool> value);
    public ImageSource get_NormalBackgroundImageSource();
    public ImageSource get_HoveredBackgroundImageSource();
    public ImageSource get_PressedBackgroundImageSource();
    public Aspect get_BackgroundImageAspect();
    public Aspect get_NormalBackgroundImageAspect();
    public Aspect get_HoveredBackgroundImageAspect();
    public Aspect get_PressedBackgroundImageAspect();
    public bool get_ShouldSetImageOnAnimationEnd();
    internal bool get_CanExecute();
    internal VisualElement get_Element();
    internal void set_Element(VisualElement value);
    internal static TouchEffect GetFrom(BindableObject bindable);
    internal static TouchEffect PickFrom(BindableObject bindable);
    internal void HandleTouch(TouchStatus status);
    internal void HandleUserInteraction(TouchInteractionStatus interactionStatus);
    internal void HandleHover(HoverStatus status);
    internal void RaiseStateChanged();
    internal void RaiseInteractionStatusChanged();
    internal void RaiseStatusChanged();
    internal void RaiseHoverStateChanged();
    internal void RaiseHoverStatusChanged();
    internal void RaiseCompleted();
    internal void RaiseLongPressCompleted();
    internal void ForceUpdateState(bool animated);
    internal void HandleLongPress();
    private void SetChildrenInputTransparent(bool value);
    [NullableContextAttribute("1")]
private void OnLayoutChildAdded(object sender, ElementEventArgs e);
}
public enum Xamarin.CommunityToolkit.Effects.TouchInteractionStatus : Enum {
    public int value__;
    public static TouchInteractionStatus Started;
    public static TouchInteractionStatus Completed;
}
public class Xamarin.CommunityToolkit.Effects.TouchInteractionStatusChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TouchInteractionStatus <TouchInteractionStatus>k__BackingField;
    public TouchInteractionStatus TouchInteractionStatus { get; }
    internal TouchInteractionStatusChangedEventArgs(TouchInteractionStatus touchInteractionStatus);
    [CompilerGeneratedAttribute]
public TouchInteractionStatus get_TouchInteractionStatus();
}
public enum Xamarin.CommunityToolkit.Effects.TouchState : Enum {
    public int value__;
    public static TouchState Normal;
    public static TouchState Pressed;
}
public class Xamarin.CommunityToolkit.Effects.TouchStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TouchState <State>k__BackingField;
    public TouchState State { get; }
    internal TouchStateChangedEventArgs(TouchState state);
    [CompilerGeneratedAttribute]
public TouchState get_State();
}
public enum Xamarin.CommunityToolkit.Effects.TouchStatus : Enum {
    public int value__;
    public static TouchStatus Started;
    public static TouchStatus Completed;
    public static TouchStatus Canceled;
}
public class Xamarin.CommunityToolkit.Effects.TouchStatusChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TouchStatus <Status>k__BackingField;
    public TouchStatus Status { get; }
    internal TouchStatusChangedEventArgs(TouchStatus status);
    [CompilerGeneratedAttribute]
public TouchStatus get_Status();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Effects.VisualFeedbackEffect : RoutingEffect {
    public static BindableProperty FeedbackColorProperty;
    private static VisualFeedbackEffect();
    public static Color GetFeedbackColor(BindableObject view);
    public static void SetFeedbackColor(BindableObject view, Color value);
    public static bool IsFeedbackColorSet(BindableObject element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException : Exception {
    public InvalidCommandParameterException(Type expectedType, Type actualType, Exception innerException);
    public InvalidCommandParameterException(Type expectedType, Type actualType);
    public InvalidCommandParameterException(Type expectedType, Exception innerException);
    public InvalidCommandParameterException(Type expectedType);
    private static string CreateErrorMessage(Type expectedType);
    private static string CreateErrorMessage(Type expectedType, Type actualType);
}
public class Xamarin.CommunityToolkit.Exceptions.InvalidHandleEventException : Exception {
    [NullableContextAttribute("1")]
public InvalidHandleEventException(string message, TargetParameterCountException targetParameterCountException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.Extensions.ColorExtension : object {
    [ExtensionAttribute]
public static string ToRgbString(Color c);
    [ExtensionAttribute]
public static string ToRgbaString(Color c);
    [ExtensionAttribute]
public static string ToHexRgbString(Color c);
    [ExtensionAttribute]
public static string ToHexRgbaString(Color c);
    [ExtensionAttribute]
public static string ToCmykString(Color c);
    [ExtensionAttribute]
public static string ToCmykaString(Color c);
    [ExtensionAttribute]
public static string ToHslString(Color c);
    [ExtensionAttribute]
public static string ToHslaString(Color c);
    [ExtensionAttribute]
public static Color WithRed(Color baseColor, double newR);
    [ExtensionAttribute]
public static Color WithGreen(Color baseColor, double newG);
    [ExtensionAttribute]
public static Color WithBlue(Color baseColor, double newB);
    [ExtensionAttribute]
public static Color WithAlpha(Color baseColor, double newA);
    [ExtensionAttribute]
public static Color WithRed(Color baseColor, byte newR);
    [ExtensionAttribute]
public static Color WithGreen(Color baseColor, byte newG);
    [ExtensionAttribute]
public static Color WithBlue(Color baseColor, byte newB);
    [ExtensionAttribute]
public static Color WithAlpha(Color baseColor, byte newA);
    [ExtensionAttribute]
public static Color WithCyan(Color baseColor, double newC);
    [ExtensionAttribute]
public static Color WithMagenta(Color baseColor, double newM);
    [ExtensionAttribute]
public static Color WithYellow(Color baseColor, double newY);
    [ExtensionAttribute]
public static Color WithBlackKey(Color baseColor, double newK);
    [ExtensionAttribute]
public static byte GetByteRed(Color c);
    [ExtensionAttribute]
public static byte GetByteGreen(Color c);
    [ExtensionAttribute]
public static byte GetByteBlue(Color c);
    [ExtensionAttribute]
public static byte GetByteAlpha(Color c);
    [ExtensionAttribute]
public static double GetDegreeHue(Color c);
    [ExtensionAttribute]
public static double GetPercentBlackKey(Color c);
    [ExtensionAttribute]
public static double GetPercentCyan(Color c);
    [ExtensionAttribute]
public static double GetPercentMagenta(Color c);
    [ExtensionAttribute]
public static double GetPercentYellow(Color c);
    [ExtensionAttribute]
public static Color ToInverseColor(Color baseColor);
    [ExtensionAttribute]
public static Color ToBlackOrWhite(Color baseColor);
    [ExtensionAttribute]
public static Color ToBlackOrWhiteForText(Color baseColor);
    [ExtensionAttribute]
public static Color ToGrayScale(Color baseColor);
    [ExtensionAttribute]
public static bool IsDarkForTheEye(Color c);
    [ExtensionAttribute]
public static bool IsDark(Color c);
    private static byte ToByte(double input);
}
[ContentPropertyAttribute("Email")]
public class Xamarin.CommunityToolkit.Extensions.GravatarImageExtension : GravatarImageSource {
    [NullableContextAttribute("1")]
public sealed virtual GravatarImageSource ProvideValue(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ContentPropertyAttribute("Id")]
public class Xamarin.CommunityToolkit.Extensions.ImageResourceExtension : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [NullableContextAttribute("1")]
public sealed virtual ImageSource ProvideValue(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
public class Xamarin.CommunityToolkit.Extensions.Internals.MultiValueConverterExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual IMultiValueConverter ProvideValue(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
public abstract class Xamarin.CommunityToolkit.Extensions.Internals.ValueConverterExtension : BindableObject {
    [NullableContextAttribute("1")]
public sealed virtual IValueConverter ProvideValue(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.Extensions.NavigableElementExtensions : object {
    [ExtensionAttribute]
public static void ShowPopup(NavigableElement element, BasePopup popup);
    [ExtensionAttribute]
public static Task`1<T> ShowPopupAsync(NavigableElement element, Popup`1<T> popup);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.Extensions.NavigationExtensions : object {
    [ExtensionAttribute]
public static void ShowPopup(INavigation navigation, BasePopup popup);
    [ExtensionAttribute]
public static Task`1<T> ShowPopupAsync(INavigation navigation, Popup`1<T> popup);
    private static void PlatformShowPopup(BasePopup popup);
    private static Task`1<T> PlatformShowPopupAsync(Popup`1<T> popup);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.Extensions.SemanticExtensions : object {
    [ExtensionAttribute]
public static void SetSemanticFocus(VisualElement element);
    public static void Announce(string text);
    [ExtensionAttribute]
private static void PlatformSetSemanticFocus(VisualElement element);
    private static void PlatformAnnounce(string text);
}
[ExtensionAttribute]
internal static class Xamarin.CommunityToolkit.Extensions.TaskExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task WhenCanceled(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContentPropertyAttribute("Text")]
public class Xamarin.CommunityToolkit.Extensions.TranslateExtension : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <StringFormat>k__BackingField;
    public string Text { get; public set; }
    [NullableAttribute("2")]
public string StringFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_StringFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_StringFormat(string value);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual BindingBase ProvideValue(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.Extensions.VisualElementExtension : object {
    [ExtensionAttribute]
public static Task`1<bool> ColorTo(VisualElement element, Color color, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static void AbortAnimations(VisualElement element, String[] otherAnimationNames);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Extensions.VisualElementExtension/<DisplayToastAsync>d__2")]
[ExtensionAttribute]
public static Task DisplayToastAsync(VisualElement visualElement, string message, int durationMilliseconds);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Extensions.VisualElementExtension/<DisplayToastAsync>d__3")]
[ExtensionAttribute]
public static Task DisplayToastAsync(VisualElement visualElement, ToastOptions toastOptions);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Extensions.VisualElementExtension/<DisplaySnackBarAsync>d__4")]
[ExtensionAttribute]
public static Task`1<bool> DisplaySnackBarAsync(VisualElement visualElement, string message, string actionButtonText, Func`1<Task> action, Nullable`1<TimeSpan> duration);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Extensions.VisualElementExtension/<DisplaySnackBarAsync>d__5")]
[ExtensionAttribute]
public static Task`1<bool> DisplaySnackBarAsync(VisualElement visualElement, SnackBarOptions snackBarOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool TryFindParentElementWithParentOfType(VisualElement element, VisualElement& result, T& parent);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool TryFindParentOfType(VisualElement element, T& parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager : object {
    private Dictionary`2<string, List`1<Subscription>> eventHandlers;
    public void AddEventHandler(Delegate handler, string eventName);
    public void RemoveEventHandler(Delegate handler, string eventName);
    public void HandleEvent(object sender, object eventArgs, string eventName);
    public void HandleEvent(string eventName);
    public void RaiseEvent(object sender, object eventArgs, string eventName);
    public void RaiseEvent(string eventName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Xamarin.CommunityToolkit.Helpers.EventManagerService : object {
    internal static void AddEventHandler(String& eventName, Object& handlerTarget, MethodInfo& methodInfo, Dictionary`2& eventHandlers);
    internal static void RemoveEventHandler(String& eventName, Object& handlerTarget, MemberInfo& methodInfo, Dictionary`2& eventHandlers);
    internal static void HandleEvent(String& eventName, Object& sender, Object& eventArgs, Dictionary`2& eventHandlers);
    internal static void HandleEvent(String& eventName, Object& actionEventArgs, Dictionary`2& eventHandlers);
    internal static void HandleEvent(String& eventName, Dictionary`2& eventHandlers);
    private static void AddRemoveEvents(String& eventName, Dictionary`2& eventHandlers, List`1& toRaise);
    private static DynamicMethod TryGetDynamicMethod(MethodInfo& rtDynamicMethod);
    [ExtensionAttribute]
private static bool IsLightweightMethod(MethodBase method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Xamarin.CommunityToolkit.Helpers.LocalizationResourceManager : ObservableObject {
    private static Lazy`1<LocalizationResourceManager> currentHolder;
    [NullableAttribute("2")]
private ResourceManager resourceManager;
    private CultureInfo currentCulture;
    public static LocalizationResourceManager Current { get; }
    public string Item { get; }
    public CultureInfo CurrentCulture { get; public set; }
    private static LocalizationResourceManager();
    public static LocalizationResourceManager get_Current();
    public void Init(ResourceManager resource);
    public void Init(ResourceManager resource, CultureInfo initialCulture);
    public string GetValue(string text);
    public string get_Item(string text);
    [ObsoleteAttribute("Please, use CurrentCulture to set culture")]
[EditorBrowsableAttribute("1")]
public void SetCulture(CultureInfo language);
    public CultureInfo get_CurrentCulture();
    public void set_CurrentCulture(CultureInfo value);
    [ObsoleteAttribute("This method is no longer needed with new implementation of LocalizationResourceManager. Please, remove all references to it.")]
[EditorBrowsableAttribute("1")]
public void Invalidate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Helpers.LocalizedString : ObservableObject {
    private Func`1<string> generator;
    [PreserveAttribute]
public string Localized { get; }
    public LocalizedString(Func`1<string> generator);
    public LocalizedString(LocalizationResourceManager localizationManager, Func`1<string> generator);
    public string get_Localized();
    [PreserveAttribute]
public static LocalizedString op_Implicit(Func`1<string> func);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__2_0(object sender, PropertyChangedEventArgs e);
}
public enum Xamarin.CommunityToolkit.Helpers.MultiBindingCondition : Enum {
    public int value__;
    public static MultiBindingCondition None;
    public static MultiBindingCondition All;
    public static MultiBindingCondition Any;
    public static MultiBindingCondition Exact;
    public static MultiBindingCondition GreaterThan;
    public static MultiBindingCondition LessThan;
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("1")]
public class Xamarin.CommunityToolkit.Helpers.PreserveToolkitAttribute : Attribute {
}
[TypeConverterAttribute("Xamarin.CommunityToolkit.Helpers.SafeAreaTypeConverter")]
public class Xamarin.CommunityToolkit.Helpers.SafeArea : ValueType {
    private bool isParameterized;
    [CompilerGeneratedAttribute]
private bool <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bottom>k__BackingField;
    public bool Left { get; }
    public bool Top { get; }
    public bool Right { get; }
    public bool Bottom { get; }
    public bool IsEmpty { get; }
    public SafeArea(bool uniformSafeArea);
    public SafeArea(bool horizontal, bool vertical);
    public SafeArea(bool left, bool top, bool right, bool bottom);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Left();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Top();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Right();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Bottom();
    public bool get_IsEmpty();
    public static SafeArea op_Implicit(bool uniformSafeArea);
    private bool Equals(SafeArea other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SafeArea left, SafeArea right);
    public static bool op_Inequality(SafeArea left, SafeArea right);
    public void Deconstruct(Boolean& left, Boolean& top, Boolean& right, Boolean& bottom);
}
[TypeConversionAttribute("Xamarin.CommunityToolkit.Helpers.SafeArea")]
public class Xamarin.CommunityToolkit.Helpers.SafeAreaTypeConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual object ConvertFromInvariantString(string value);
}
[ExtensionAttribute]
internal static class Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions : object {
    [ExtensionAttribute]
internal static void SafeFireAndForget(ValueTask task, Action`1& onException, Boolean& continueOnCapturedContext);
    [ExtensionAttribute]
internal static void SafeFireAndForget(ValueTask task, Action`1& onException, Boolean& continueOnCapturedContext);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void SafeFireAndForget(Task task, Action`1& onException, Boolean& continueOnCapturedContext);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void SafeFireAndForget(Task task, Action`1& onException, Boolean& continueOnCapturedContext);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions/<HandleSafeFireAndForget>d__4`1")]
private static void HandleSafeFireAndForget(ValueTask valueTask, bool continueOnCapturedContext, Action`1<TException> onException);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions/<HandleSafeFireAndForget>d__5`1")]
private static void HandleSafeFireAndForget(Task task, bool continueOnCapturedContext, Action`1<TException> onException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.Helpers.Subscription : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private WeakReference <Subscriber>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Handler>k__BackingField;
    [NullableAttribute("2")]
public WeakReference Subscriber { get; }
    public MethodInfo Handler { get; }
    public Subscription(WeakReference subscriber, MethodInfo handler);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public WeakReference get_Subscriber();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MethodInfo get_Handler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.Helpers.WeakEventManager`1 : object {
    private Dictionary`2<string, List`1<Subscription>> eventHandlers;
    public void AddEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void AddEventHandler(Action`1<TEventArgs> action, string eventName);
    public void RemoveEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void RemoveEventHandler(Action`1<TEventArgs> action, string eventName);
    public void HandleEvent(object sender, TEventArgs eventArgs, string eventName);
    public void HandleEvent(TEventArgs eventArgs, string eventName);
    public void RaiseEvent(object sender, TEventArgs eventArgs, string eventName);
    public void RaiseEvent(TEventArgs eventArgs, string eventName);
}
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.Helpers.WeakEventManagerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RaiseEvent(WeakEventManager weakEventManager, object sender, object eventArgs, string eventName);
}
public static class Xamarin.CommunityToolkit.Helpers.XCT : object {
    public static void Init();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.macOS.Effects.MouseTrackingView : NSView {
    [NullableAttribute("2")]
private NSTrackingArea trackingArea;
    [NullableAttribute("2")]
private TouchEffect effect;
    public MouseTrackingView(TouchEffect effect);
    public virtual void UpdateTrackingAreas();
    public virtual void MouseEntered(NSEvent theEvent);
    public virtual void MouseExited(NSEvent theEvent);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.macOS.Effects.PlatformShadowEffect : PlatformEffect {
    private static float defaultRadius;
    private static float defaultOpacity;
    [NullableAttribute("2")]
private NSView View { get; }
    [NullableContextAttribute("2")]
private NSView get_View();
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    protected virtual void OnElementPropertyChanged(PropertyChangedEventArgs args);
    private void UpdateColor(NSView& view);
    private void UpdateOpacity(NSView& view);
    private void UpdateRadius(NSView& view);
    private void UpdateOffset(NSView& view);
    private void Update(NSView& view);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.macOS.Effects.PlatformTouchEffect : PlatformEffect {
    private NSGestureRecognizer gesture;
    private TouchEffect effect;
    private MouseTrackingView mouseTrackingView;
    protected virtual void OnAttached();
    protected virtual void OnDetached();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.macOS.Effects.TouchNSClickGestureRecognizer : NSGestureRecognizer {
    [NullableAttribute("2")]
private TouchEffect effect;
    [NullableAttribute("2")]
private NSView container;
    private Rectangle ViewRect { get; }
    public TouchNSClickGestureRecognizer(TouchEffect effect, NSView container);
    private Rectangle get_ViewRect();
    public virtual void MouseDown(NSEvent mouseEvent);
    public virtual void MouseUp(NSEvent mouseEvent);
    public virtual void MouseDragged(NSEvent mouseEvent);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.AsyncCommand : BaseAsyncCommand`2<object, object> {
    public AsyncCommand(Func`1<Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public AsyncCommand(Func`1<Task> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual Task ExecuteAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`1 : BaseAsyncCommand`2<T, object> {
    [NullableContextAttribute("2")]
public AsyncCommand`1(Func`2<T, Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public AsyncCommand`1(Func`2<T, Task> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual Task ExecuteAsync(T parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`2 : BaseAsyncCommand`2<TExecute, TCanExecute> {
    public AsyncCommand`2(Func`2<TExecute, Task> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteAsync(TExecute parameter);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand : BaseAsyncValueCommand`2<object, object> {
    [NullableContextAttribute("1")]
public AsyncValueCommand(Func`1<ValueTask> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [NullableContextAttribute("1")]
public AsyncValueCommand(Func`1<ValueTask> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual ValueTask ExecuteAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`1 : BaseAsyncValueCommand`2<T, object> {
    [NullableContextAttribute("2")]
public AsyncValueCommand`1(Func`2<T, ValueTask> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public AsyncValueCommand`1(Func`2<T, ValueTask> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual ValueTask ExecuteAsync(T parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`2 : BaseAsyncValueCommand`2<TExecute, TCanExecute> {
    public AsyncValueCommand`2(Func`2<TExecute, ValueTask> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask ExecuteAsync(TExecute parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xamarin.CommunityToolkit.ObjectModel.CommandFactory : object {
    public static Command Create(Action execute);
    public static Command Create(Action execute, Func`1<bool> canExecute);
    public static Command Create(Action`1<object> execute);
    public static Command Create(Action`1<object> execute, Func`2<object, bool> canExecute);
    public static Command`1<T> Create(Action`1<T> execute);
    public static Command`1<T> Create(Action`1<T> execute, Func`2<T, bool> canExecute);
    public static IAsyncCommand Create(Func`1<Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public static IAsyncCommand Create(Func`1<Task> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [NullableContextAttribute("2")]
public static IAsyncCommand`1<TExecute> Create(Func`2<TExecute, Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public static IAsyncCommand`1<TExecute> Create(Func`2<TExecute, Task> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [NullableContextAttribute("2")]
public static IAsyncCommand`2<TExecute, TCanExecute> Create(Func`2<TExecute, Task> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public static IAsyncCommand Create(Func`1<Task> execute);
    public static IAsyncCommand Create(Func`1<Task> execute, Func`2<object, bool> canExecute);
    public static IAsyncCommand Create(Func`1<Task> execute, Func`1<bool> canExecute);
    public static IAsyncCommand`1<TExecute> Create(Func`2<TExecute, Task> execute);
    public static IAsyncCommand`1<TExecute> Create(Func`2<TExecute, Task> execute, Func`2<object, bool> canExecute);
    public static IAsyncCommand`1<TExecute> Create(Func`2<TExecute, Task> execute, Func`1<bool> canExecute);
    [NullableContextAttribute("2")]
public static IAsyncCommand`2<TExecute, TCanExecute> Create(Func`2<TExecute, Task> execute, Func`2<TCanExecute, bool> canExecute);
    public static IAsyncValueCommand Create(Func`1<ValueTask> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public static IAsyncValueCommand Create(Func`1<ValueTask> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [NullableContextAttribute("2")]
public static IAsyncValueCommand`1<TExecute> Create(Func`2<TExecute, ValueTask> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public static IAsyncValueCommand`1<TExecute> Create(Func`2<TExecute, ValueTask> execute, Func`1<bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [NullableContextAttribute("2")]
public static IAsyncValueCommand`2<TExecute, TCanExecute> Create(Func`2<TExecute, ValueTask> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
}
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.ObjectModel.Extensions.INotifyPropertyChangedExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is deprecated due to high probability of misuse. Use WeakEventManager instead.")]
public static void WeakSubscribe(INotifyPropertyChanged target, T subscriber, Action`3<T, object, PropertyChangedEventArgs> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.Grouping`2 : ObservableRangeCollection`1<TItem> {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public TKey Key { get; }
    public IList`1<TItem> Items { get; }
    public Grouping`2(TKey key, IEnumerable`1<TItem> items);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    public IList`1<TItem> get_Items();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.Grouping`3 : ObservableRangeCollection`1<TItem> {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TSubKey <SubKey>k__BackingField;
    public TKey Key { get; }
    public TSubKey SubKey { get; }
    public IList`1<TItem> Items { get; }
    public Grouping`3(TKey key, TSubKey subkey, IEnumerable`1<TItem> items);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public TSubKey get_SubKey();
    public IList`1<TItem> get_Items();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync();
    public abstract virtual void RaiseCanExecuteChanged();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`1 {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(T parameter);
    public abstract virtual void RaiseCanExecuteChanged();
}
[NullableContextAttribute("2")]
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`2 {
    [NullableContextAttribute("1")]
public abstract virtual bool CanExecute(TCanExecute parameter);
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    public abstract virtual ValueTask ExecuteAsync();
    public abstract virtual void RaiseCanExecuteChanged();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`1 {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    [NullableContextAttribute("1")]
public abstract virtual ValueTask ExecuteAsync(T parameter);
    public abstract virtual void RaiseCanExecuteChanged();
}
[NullableContextAttribute("2")]
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`2 {
    [NullableContextAttribute("1")]
public abstract virtual bool CanExecute(TCanExecute parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EditorBrowsableAttribute("1")]
public class Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncCommand`2 : BaseCommand`1<TCanExecute> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TExecute, Task> execute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> onException;
    private bool continueOnCapturedContext;
    private protected BaseAsyncCommand`2(Func`2<TExecute, Task> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    private protected static Func`2<object, Task> ConvertExecute(Func`1<Task> execute);
    private protected static Func`2<object, bool> ConvertCanExecute(Func`1<bool> canExecute);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncCommand`2/<ExecuteAsync>d__6")]
private protected Task ExecuteAsync(TExecute parameter);
    [NullableContextAttribute("1")]
private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncValueCommand`2 : BaseCommand`1<TCanExecute> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TExecute, ValueTask> execute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> onException;
    private bool continueOnCapturedContext;
    private protected BaseAsyncValueCommand`2(Func`2<TExecute, ValueTask> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    private protected static Func`2<object, ValueTask> ConvertExecute(Func`1<ValueTask> execute);
    private protected static Func`2<object, bool> ConvertCanExecute(Func`1<bool> canExecute);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncValueCommand`2/<ExecuteAsync>d__6")]
private protected ValueTask ExecuteAsync(TExecute parameter);
    [NullableContextAttribute("1")]
private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TCanExecute, bool> canExecute;
    private DelegateWeakEventManager weakEventManager;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) executionCount;
    [CompilerGeneratedAttribute]
private bool <AllowsMultipleExecutions>k__BackingField;
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    protected int ExecutionCount { get; protected set; }
    private static bool IsMainThread { get; }
    [NullableContextAttribute("2")]
private protected BaseCommand`1(Func`2<TCanExecute, bool> canExecute, bool allowsMultipleExecutions);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool get_IsExecuting();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowsMultipleExecutions();
    protected int get_ExecutionCount();
    protected void set_ExecutionCount(int value);
    [NullableContextAttribute("2")]
public sealed virtual bool CanExecute(TCanExecute parameter);
    public sealed virtual void RaiseCanExecuteChanged();
    [EditorBrowsableAttribute("1")]
public void ChangeCanExecute();
    [NullableContextAttribute("2")]
protected static bool IsNullable();
    private static bool get_IsMainThread();
    private static void BeginInvokeOnMainThread(Action action);
    [CompilerGeneratedAttribute]
private void <RaiseCanExecuteChanged>b__16_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.ObjectModel.ObservableObject : object {
    [NullableAttribute("1")]
private DelegateWeakEventManager weakEventManager;
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual bool SetProperty(T& backingStore, T value, string propertyName, Action onChanging, Action onChanged, Func`3<T, T, bool> validateValue);
    protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1 : ObservableCollection`1<T> {
    public ObservableRangeCollection`1(IEnumerable`1<T> collection);
    public void AddRange(IEnumerable`1<T> collection, NotifyCollectionChangedAction notificationMode);
    public void RemoveRange(IEnumerable`1<T> collection, NotifyCollectionChangedAction notificationMode);
    public void Replace(T item);
    public void ReplaceRange(IEnumerable`1<T> collection);
    private bool AddArrangeCore(IEnumerable`1<T> collection);
    private void RaiseChangeNotificationEvents(NotifyCollectionChangedAction action, List`1<T> changedItems, int startingIndex);
}
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollectionExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void Add(ObservableRangeCollection`1<T> source, IEnumerable`1<T> collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PreserveAttribute]
public static class Xamarin.CommunityToolkit.PlatformConfiguration.AndroidSpecific.NavigationBarEffect : object {
    public static BindableProperty ColorProperty;
    public static BindableProperty StyleProperty;
    private static NavigationBarEffect();
    public static Color GetColor(BindableObject bindable);
    public static void SetColor(BindableObject bindable, Color value);
    public static NavigationBarStyle GetStyle(BindableObject bindable);
    public static void SetStyle(BindableObject bindable, NavigationBarStyle value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Page> SetNavigationBarColor(IPlatformElementConfiguration`2<Android, Page> config, Color color);
    [ExtensionAttribute]
public static Color GetNavigationBarColor(IPlatformElementConfiguration`2<Android, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Page> SetNavigationBarStyle(IPlatformElementConfiguration`2<Android, Page> config, NavigationBarStyle style);
    [ExtensionAttribute]
public static NavigationBarStyle GetNavigationBarStyle(IPlatformElementConfiguration`2<Android, Page> config);
    private static void TryGenerateEffect(BindableObject bindable, object oldValue, object newValue);
    private static void AttachEffect(Page element);
    private static void DetachEffect(Page element);
}
public enum Xamarin.CommunityToolkit.PlatformConfiguration.AndroidSpecific.NavigationBarStyle : Enum {
    public int value__;
    public static NavigationBarStyle Default;
    public static NavigationBarStyle LightContent;
    public static NavigationBarStyle DarkContent;
}
public enum Xamarin.CommunityToolkit.PlatformConfiguration.iOSSpecific.PopoverArrowDirection : Enum {
    public int value__;
    public static PopoverArrowDirection None;
    public static PopoverArrowDirection Up;
    public static PopoverArrowDirection Down;
    public static PopoverArrowDirection Left;
    public static PopoverArrowDirection Right;
    public static PopoverArrowDirection Any;
    public static PopoverArrowDirection Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.PlatformConfiguration.iOSSpecific.PopUp : object {
    public static BindableProperty ArrowDirectionProperty;
    private static PopUp();
    public static void SetArrowDirection(BindableObject element, PopoverArrowDirection color);
    public static PopoverArrowDirection GetArrowDirection(BindableObject element);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, BasePopup> UseArrowDirection(IPlatformElementConfiguration`2<iOS, BasePopup> config, PopoverArrowDirection value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.PlatformConfiguration.WindowsSpecific.PopUp : object {
    public static BindableProperty BorderColorProperty;
    private static PopUp();
    public static void SetBorderColor(BindableObject element, Color color);
    public static Color GetBorderColor(BindableObject element);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, BasePopup> SetBorderColor(IPlatformElementConfiguration`2<Windows, BasePopup> config, Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.AvatarView : BaseTemplatedView`1<Frame> {
    private static string emptyText;
    private static IImageSourceValidator imageSourceValidator;
    private SemaphoreSlim imageSourceSemaphore;
    [NullableAttribute("2")]
private CancellationTokenSource imageLoadingTokenSource;
    [NullableAttribute("2")]
private object sourceBindingContext;
    private int isWaitingForSourceUpdateValue;
    public static BindableProperty AspectProperty;
    public static BindableProperty SizeProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty ColorProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty ColorThemeProperty;
    [CompilerGeneratedAttribute]
private Image <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private AbsoluteLayout <MainLayout>k__BackingField;
    public Aspect Aspect { get; public set; }
    public double Size { get; public set; }
    public double CornerRadius { get; public set; }
    public Color BorderColor { get; public set; }
    public Color Color { get; public set; }
    [NullableAttribute("2")]
public ImageSource Source { get; public set; }
    [NullableAttribute("2")]
public string Text { get; public set; }
    public Color TextColor { get; public set; }
    [NullableAttribute("2")]
public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public IColorTheme ColorTheme { get; public set; }
    private Image Image { get; }
    private Label Label { get; }
    private AbsoluteLayout MainLayout { get; }
    private static AvatarView();
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public double get_Size();
    public void set_Size(double value);
    public double get_CornerRadius();
    public void set_CornerRadius(double value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_Color();
    public void set_Color(Color value);
    [NullableContextAttribute("2")]
public ImageSource get_Source();
    [NullableContextAttribute("2")]
public void set_Source(ImageSource value);
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    [NullableContextAttribute("2")]
public string get_FontFamily();
    [NullableContextAttribute("2")]
public void set_FontFamily(string value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public IColorTheme get_ColorTheme();
    public void set_ColorTheme(IColorTheme value);
    [CompilerGeneratedAttribute]
private Image get_Image();
    [CompilerGeneratedAttribute]
private Label get_Label();
    [CompilerGeneratedAttribute]
private AbsoluteLayout get_MainLayout();
    protected virtual void OnControlInitialized(Frame control);
    protected virtual void OnBindingContextChanged();
    protected virtual void OnSizeAllocated(double width, double height);
    private static void OnSizePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnSourcePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnSizePropertyChanged();
    private void OnValuePropertyChanged();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.AvatarView/<OnSourcePropertyChanged>d__71")]
private void OnSourcePropertyChanged(bool isBindingContextChanged);
    private double CalculateFontSize();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.AvatarView/<<OnSourcePropertyChanged>g__getStreamAsync|71_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<Stream> <OnSourcePropertyChanged>g__getStreamAsync|71_0(UriImageSource uriSource, CancellationToken token);
}
public class Xamarin.CommunityToolkit.UI.Views.BadgeAnimation : object {
    [CompilerGeneratedAttribute]
private UInt32 <AnimationLength>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    private Nullable`1<double> translationY;
    protected UInt32 AnimationLength { get; }
    protected UInt32 Offset { get; }
    [CompilerGeneratedAttribute]
protected UInt32 get_AnimationLength();
    [CompilerGeneratedAttribute]
protected UInt32 get_Offset();
    [NullableContextAttribute("1")]
public sealed virtual Task OnAppearing(View badgeView);
    [NullableContextAttribute("1")]
public sealed virtual Task OnDisappering(View badgeView);
}
public enum Xamarin.CommunityToolkit.UI.Views.BadgePosition : Enum {
    public int value__;
    public static BadgePosition TopLeft;
    public static BadgePosition TopRight;
    public static BadgePosition BottomLeft;
    public static BadgePosition BottomRight;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContentPropertyAttribute("Content")]
public class Xamarin.CommunityToolkit.UI.Views.BadgeView : BaseTemplatedView`1<Grid> {
    private bool isVisible;
    private bool placementDone;
    public static BindableProperty ContentProperty;
    public static BindableProperty BadgePositionProperty;
    public static BindableProperty AutoHideProperty;
    public static BindableProperty IsAnimatedProperty;
    public static BindableProperty BadgeAnimationProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty HasShadowProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontAttributesProperty;
    [CompilerGeneratedAttribute]
private ContentPresenter <BadgeContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <BadgeIndicatorContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <BadgeIndicatorBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <BadgeText>k__BackingField;
    [NullableAttribute("2")]
public View Content { get; public set; }
    public BadgePosition BadgePosition { get; public set; }
    public bool AutoHide { get; public set; }
    public bool IsAnimated { get; public set; }
    [NullableAttribute("2")]
public IBadgeAnimation BadgeAnimation { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color BorderColor { get; public set; }
    public float CornerRadius { get; public set; }
    public bool HasShadow { get; public set; }
    public Color TextColor { get; public set; }
    public string Text { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    private ContentPresenter BadgeContent { get; }
    private Grid BadgeIndicatorContainer { get; }
    private Frame BadgeIndicatorBackground { get; }
    private Label BadgeText { get; }
    private static BadgeView();
    private static void OnLayoutPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public View get_Content();
    [NullableContextAttribute("2")]
public void set_Content(View value);
    public BadgePosition get_BadgePosition();
    public void set_BadgePosition(BadgePosition value);
    private static void OnBadgePositionChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_AutoHide();
    public void set_AutoHide(bool value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.BadgeView/<OnAutoHideChanged>d__16")]
private static void OnAutoHideChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsAnimated();
    public void set_IsAnimated(bool value);
    [NullableContextAttribute("2")]
public IBadgeAnimation get_BadgeAnimation();
    [NullableContextAttribute("2")]
public void set_BadgeAnimation(IBadgeAnimation value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public float get_CornerRadius();
    public void set_CornerRadius(float value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public string get_Text();
    public void set_Text(string value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.BadgeView/<OnTextChanged>d__49")]
private static void OnTextChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFontChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_FontSize();
    public void set_FontSize(double value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    [CompilerGeneratedAttribute]
private ContentPresenter get_BadgeContent();
    [CompilerGeneratedAttribute]
private Grid get_BadgeIndicatorContainer();
    [CompilerGeneratedAttribute]
private Frame get_BadgeIndicatorBackground();
    [CompilerGeneratedAttribute]
private Label get_BadgeText();
    protected virtual void OnControlInitialized(Grid control);
    private static ContentPresenter CreateContentElement();
    private static Grid CreateIndicatorContainerElement();
    private static Frame CreateIndicatorBackgroundElement();
    private static Label CreateTextElement();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
    private void UpdateFont();
    private void UpdateBadgeViewPlacement(bool force);
    [NullableContextAttribute("0")]
private ValueTuple`2<Thickness, Thickness> GetMargins(double size);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.BadgeView/<UpdateVisibilityAsync>d__86")]
private Task UpdateVisibilityAsync();
    private void OnBadgeTextSizeChanged(object sender, EventArgs e);
    private void OnBadgeIndicatorContainerPropertyChanged(object sender, PropertyChangedEventArgs e);
}
[PreserveAttribute]
public abstract class Xamarin.CommunityToolkit.UI.Views.BaseLazyView : ContentView {
    [NullableAttribute("1")]
internal static BindablePropertyKey IsLoadedPropertyKey;
    [NullableAttribute("1")]
public static BindableProperty IsLoadedProperty;
    public bool IsLoaded { get; }
    private static BaseLazyView();
    public bool get_IsLoaded();
    protected void SetIsLoaded(bool isLoaded);
    public abstract virtual ValueTask LoadViewAsync();
    public sealed virtual void Dispose();
    protected virtual void OnBindingContextChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContentPropertyAttribute("Content")]
public abstract class Xamarin.CommunityToolkit.UI.Views.BasePopup : VisualElement {
    private WeakEventManager`1<PopupDismissedEventArgs> dismissWeakEventManager;
    private WeakEventManager`1<PopupOpenedEventArgs> openedWeakEventManager;
    private Lazy`1<PlatformConfigurationRegistry`1<BasePopup>> platformConfigurationRegistry;
    public static BindableProperty ContentProperty;
    public static BindableProperty ColorProperty;
    public static BindableProperty SizeProperty;
    public static BindableProperty VerticalOptionsProperty;
    public static BindableProperty HorizontalOptionsProperty;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private View <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLightDismissEnabled>k__BackingField;
    [NullableAttribute("2")]
public View Content { get; public set; }
    public Color Color { get; public set; }
    public LayoutOptions VerticalOptions { get; public set; }
    public LayoutOptions HorizontalOptions { get; public set; }
    [NullableAttribute("2")]
public View Anchor { get; public set; }
    public Size Size { get; public set; }
    public bool IsLightDismissEnabled { get; public set; }
    private static BasePopup();
    public sealed virtual IPlatformElementConfiguration`2<T, BasePopup> On();
    [NullableContextAttribute("2")]
public virtual View get_Content();
    [NullableContextAttribute("2")]
public virtual void set_Content(View value);
    public Color get_Color();
    public void set_Color(Color value);
    public LayoutOptions get_VerticalOptions();
    public void set_VerticalOptions(LayoutOptions value);
    public LayoutOptions get_HorizontalOptions();
    public void set_HorizontalOptions(LayoutOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public View get_Anchor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Anchor(View value);
    public Size get_Size();
    public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_IsLightDismissEnabled();
    [CompilerGeneratedAttribute]
public void set_IsLightDismissEnabled(bool value);
    public void add_Dismissed(EventHandler`1<PopupDismissedEventArgs> value);
    public void remove_Dismissed(EventHandler`1<PopupDismissedEventArgs> value);
    public void add_Opened(EventHandler`1<PopupOpenedEventArgs> value);
    public void remove_Opened(EventHandler`1<PopupOpenedEventArgs> value);
    [NullableContextAttribute("2")]
protected void OnDismissed(object result);
    internal virtual void OnOpened();
    protected internal virtual void LightDismiss();
    protected virtual void OnBindingContextChanged();
    private static void OnContentChanged(BindableObject bindable, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<BasePopup> <.ctor>b__2_0();
}
public enum Xamarin.CommunityToolkit.UI.Views.CameraCaptureMode : Enum {
    public int value__;
    public static CameraCaptureMode Default;
    public static CameraCaptureMode Photo;
    public static CameraCaptureMode Video;
}
public enum Xamarin.CommunityToolkit.UI.Views.CameraFlashMode : Enum {
    public int value__;
    public static CameraFlashMode Off;
    public static CameraFlashMode On;
    public static CameraFlashMode Auto;
    public static CameraFlashMode Torch;
}
public enum Xamarin.CommunityToolkit.UI.Views.CameraOptions : Enum {
    public int value__;
    public static CameraOptions Default;
    public static CameraOptions Front;
    public static CameraOptions Back;
    public static CameraOptions External;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.CameraView : View {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MediaCapturedEventArgs> MediaCaptured;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<string> MediaCaptureFailed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler`1<bool> OnAvailable;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ShutterClicked;
    internal static BindablePropertyKey ShutterCommandPropertyKey;
    public static BindableProperty ShutterCommandProperty;
    public static BindableProperty IsBusyProperty;
    public static BindableProperty IsAvailableProperty;
    public static BindableProperty CameraOptionsProperty;
    public static BindableProperty CaptureModeProperty;
    public static BindableProperty VideoStabilizationProperty;
    public static BindableProperty FlashModeProperty;
    public static BindableProperty ZoomProperty;
    public static BindableProperty MaxZoomProperty;
    [NullableAttribute("2")]
[PreserveAttribute]
public ICommand ShutterCommand { get; }
    public bool IsBusy { get; public set; }
    public bool IsAvailable { get; public set; }
    public CameraOptions CameraOptions { get; public set; }
    public CameraCaptureMode CaptureMode { get; public set; }
    public bool VideoStabilization { get; public set; }
    public CameraFlashMode FlashMode { get; public set; }
    public double Zoom { get; public set; }
    public double MaxZoom { get; public set; }
    private static CameraView();
    [CompilerGeneratedAttribute]
public void add_MediaCaptured(EventHandler`1<MediaCapturedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MediaCaptured(EventHandler`1<MediaCapturedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MediaCaptureFailed(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_MediaCaptureFailed(EventHandler`1<string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_OnAvailable(EventHandler`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_OnAvailable(EventHandler`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_ShutterClicked(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_ShutterClicked(EventHandler value);
    [NullableContextAttribute("2")]
public ICommand get_ShutterCommand();
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    public bool get_IsAvailable();
    public void set_IsAvailable(bool value);
    public CameraOptions get_CameraOptions();
    public void set_CameraOptions(CameraOptions value);
    public CameraCaptureMode get_CaptureMode();
    public void set_CaptureMode(CameraCaptureMode value);
    public bool get_VideoStabilization();
    public void set_VideoStabilization(bool value);
    public CameraFlashMode get_FlashMode();
    public void set_FlashMode(CameraFlashMode value);
    public double get_Zoom();
    public void set_Zoom(double value);
    public double get_MaxZoom();
    public void set_MaxZoom(double value);
    internal void RaiseMediaCaptured(MediaCapturedEventArgs args);
    internal void RaiseMediaCaptureFailed(string message);
    public void Shutter();
    [NullableContextAttribute("2")]
private static object ShutterCommandValueCreator(BindableObject b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.ColorTheme : object {
    private Color[] backgroundColors;
    private Color[] foregroundColors;
    public static IColorTheme Default;
    public static IColorTheme Jungle;
    public static IColorTheme Desert;
    public static IColorTheme Ocean;
    public static IColorTheme Volcano;
    public ColorTheme(Color[] foregroundColors, Color[] backgroundColors);
    private static ColorTheme();
    public sealed virtual Color GetForegroundColor(string text);
    public sealed virtual Color GetBackgroundColor(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PreserveAttribute]
internal class Xamarin.CommunityToolkit.UI.Views.CupertinoTabViewItemTemplate : Grid {
    private VisualFeedbackEffect visualFeedback;
    private Image icon;
    private Label text;
    private TabBadgeView badge;
    protected virtual void OnParentSet();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
}
public enum Xamarin.CommunityToolkit.UI.Views.DefaultGravatar : Enum {
    public int value__;
    public static DefaultGravatar FileNotFound;
    public static DefaultGravatar MysteryPerson;
    public static DefaultGravatar Identicon;
    public static DefaultGravatar MonsterId;
    public static DefaultGravatar Wavatar;
    public static DefaultGravatar Retro;
    public static DefaultGravatar Robohash;
    public static DefaultGravatar Blank;
}
public enum Xamarin.CommunityToolkit.UI.Views.Dock : Enum {
    public int value__;
    public static Dock Left;
    public static Dock Top;
    public static Dock Right;
    public static Dock Bottom;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.DockLayout : Layout`1<View> {
    public static BindableProperty DockProperty;
    public static BindableProperty LastChildFillProperty;
    public Dock Dock { get; public set; }
    public bool LastChildFill { get; public set; }
    private static DockLayout();
    public Dock get_Dock();
    public void set_Dock(Dock value);
    public static Dock GetDock(BindableObject bindable);
    public static void SetDock(BindableObject bindable, Dock value);
    public bool get_LastChildFill();
    public void set_LastChildFill(bool value);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.DrawingLineCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Line <Line>k__BackingField;
    public Line Line { get; }
    public DrawingLineCompletedEventArgs(Line line);
    [CompilerGeneratedAttribute]
public Line get_Line();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.DrawingView : View {
    public static BindableProperty ClearOnFinishProperty;
    public static BindableProperty MultiLineModeProperty;
    public static BindableProperty LinesProperty;
    public static BindableProperty DrawingLineCompletedCommandProperty;
    public static BindableProperty DefaultLineColorProperty;
    public static BindableProperty DefaultLineWidthProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<DrawingLineCompletedEventArgs> DrawingLineCompleted;
    public Color DefaultLineColor { get; public set; }
    public float DefaultLineWidth { get; public set; }
    [NullableAttribute("2")]
public ICommand DrawingLineCompletedCommand { get; public set; }
    public ObservableCollection`1<Line> Lines { get; public set; }
    public bool MultiLineMode { get; public set; }
    public bool ClearOnFinish { get; public set; }
    private static DrawingView();
    [CompilerGeneratedAttribute]
public void add_DrawingLineCompleted(EventHandler`1<DrawingLineCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DrawingLineCompleted(EventHandler`1<DrawingLineCompletedEventArgs> value);
    public Color get_DefaultLineColor();
    public void set_DefaultLineColor(Color value);
    public float get_DefaultLineWidth();
    public void set_DefaultLineWidth(float value);
    [NullableContextAttribute("2")]
public ICommand get_DrawingLineCompletedCommand();
    [NullableContextAttribute("2")]
public void set_DrawingLineCompletedCommand(ICommand value);
    public ObservableCollection`1<Line> get_Lines();
    public void set_Lines(ObservableCollection`1<Line> value);
    public bool get_MultiLineMode();
    public void set_MultiLineMode(bool value);
    public bool get_ClearOnFinish();
    public void set_ClearOnFinish(bool value);
    public Stream GetImageStream(double imageSizeWidth, double imageSizeHeight);
    public static Stream GetImageStream(IEnumerable`1<Line> lines, Size imageSize, Color backgroundColor);
    [NullableContextAttribute("2")]
internal void OnDrawingLineCompleted(Line lastDrawingLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.DrawingViewRenderer : ViewRenderer`2<DrawingView, NSView> {
    private NSBezierPath currentPath;
    private bool disposed;
    [NullableAttribute("2")]
private NSColor lineColor;
    private CGPoint previousPoint;
    [NullableAttribute("2")]
private Line currentLine;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DrawingView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLinesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual void MouseDown(NSEvent theEvent);
    public virtual void MouseUp(NSEvent theEvent);
    public virtual void MouseDragged(NSEvent theEvent);
    public virtual void DrawRect(CGRect dirtyRect);
    private void AddPointToPath(CGPoint currentPoint);
    private void LoadPoints();
    private void UpdateDisplay();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xamarin.CommunityToolkit.UI.Views.DrawingViewService : object {
    public static Stream GetImageStream(IList`1<Line> lines, Size imageSize, Color backgroundColor);
    public static Stream GetImageStream(IList`1<Point> points, Size imageSize, float lineWidth, Color strokeColor, Color backgroundColor);
    private static NSImage GetImageInternal(IList`1<Point> points, float lineWidth, Color strokeColor, Color backgroundColor);
    private static NSImage GetImageInternal(IList`1<Line> lines, Color backgroundColor);
}
public enum Xamarin.CommunityToolkit.UI.Views.ExpandDirection : Enum {
    public int value__;
    public static ExpandDirection Down;
    public static ExpandDirection Up;
    public static ExpandDirection Left;
    public static ExpandDirection Right;
}
[ExtensionAttribute]
internal static class Xamarin.CommunityToolkit.UI.Views.ExpandDirectionExtensions : object {
    [ExtensionAttribute]
public static bool IsVertical(ExpandDirection orientation);
    [ExtensionAttribute]
public static bool IsRegularOrder(ExpandDirection orientation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContentPropertyAttribute("Content")]
public class Xamarin.CommunityToolkit.UI.Views.Expander : BaseTemplatedView`1<StackLayout> {
    private static string expandAnimationName;
    private static UInt32 defaultAnimationLength;
    private WeakEventManager tappedEventManager;
    [NullableAttribute("2")]
private ContentView contentHolder;
    [NullableAttribute("2")]
private GestureRecognizer headerTapGestureRecognizer;
    [NullableAttribute("2")]
private DataTemplate previousTemplate;
    private double lastVisibleSize;
    private Size previousSize;
    private bool shouldIgnoreContentSetting;
    private object contentSetLocker;
    public static BindableProperty HeaderProperty;
    public static BindableProperty ContentProperty;
    public static BindableProperty ContentTemplateProperty;
    public static BindableProperty IsExpandedProperty;
    public static BindableProperty DirectionProperty;
    public static BindableProperty TouchCaptureViewProperty;
    public static BindableProperty AnimationLengthProperty;
    public static BindableProperty ExpandAnimationLengthProperty;
    public static BindableProperty CollapseAnimationLengthProperty;
    public static BindableProperty AnimationEasingProperty;
    public static BindableProperty ExpandAnimationEasingProperty;
    public static BindableProperty CollapseAnimationEasingProperty;
    public static BindableProperty StateProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty ForceUpdateSizeCommandProperty;
    private double Size { get; }
    private double ContentSize { get; }
    private double ContentSizeRequest { get; private set; }
    private double MeasuredContentSize { get; }
    [NullableAttribute("2")]
public View Header { get; public set; }
    public View Content { get; public set; }
    [NullableAttribute("2")]
public DataTemplate ContentTemplate { get; public set; }
    public bool IsExpanded { get; public set; }
    public ExpandDirection Direction { get; public set; }
    [NullableAttribute("2")]
public View TouchCaptureView { get; public set; }
    public UInt32 AnimationLength { get; public set; }
    public UInt32 ExpandAnimationLength { get; public set; }
    public UInt32 CollapseAnimationLength { get; public set; }
    public Easing AnimationEasing { get; public set; }
    public Easing ExpandAnimationEasing { get; public set; }
    public Easing CollapseAnimationEasing { get; public set; }
    public ExpandState State { get; public set; }
    [NullableAttribute("2")]
public object CommandParameter { get; public set; }
    [NullableAttribute("2")]
public ICommand Command { get; public set; }
    public ICommand ForceUpdateSizeCommand { get; public set; }
    private static Expander();
    public void add_Tapped(EventHandler value);
    public void remove_Tapped(EventHandler value);
    private double get_Size();
    private double get_ContentSize();
    private double get_ContentSizeRequest();
    private void set_ContentSizeRequest(double value);
    private double get_MeasuredContentSize();
    [NullableContextAttribute("2")]
public View get_Header();
    [NullableContextAttribute("2")]
public void set_Header(View value);
    public View get_Content();
    public void set_Content(View value);
    [NullableContextAttribute("2")]
public DataTemplate get_ContentTemplate();
    [NullableContextAttribute("2")]
public void set_ContentTemplate(DataTemplate value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public ExpandDirection get_Direction();
    public void set_Direction(ExpandDirection value);
    [NullableContextAttribute("2")]
public View get_TouchCaptureView();
    [NullableContextAttribute("2")]
public void set_TouchCaptureView(View value);
    public UInt32 get_AnimationLength();
    public void set_AnimationLength(UInt32 value);
    public UInt32 get_ExpandAnimationLength();
    public void set_ExpandAnimationLength(UInt32 value);
    public UInt32 get_CollapseAnimationLength();
    public void set_CollapseAnimationLength(UInt32 value);
    public Easing get_AnimationEasing();
    public void set_AnimationEasing(Easing value);
    public Easing get_ExpandAnimationEasing();
    public void set_ExpandAnimationEasing(Easing value);
    public Easing get_CollapseAnimationEasing();
    public void set_CollapseAnimationEasing(Easing value);
    public ExpandState get_State();
    public void set_State(ExpandState value);
    [NullableContextAttribute("2")]
public object get_CommandParameter();
    [NullableContextAttribute("2")]
public void set_CommandParameter(object value);
    [NullableContextAttribute("2")]
public ICommand get_Command();
    [NullableContextAttribute("2")]
public void set_Command(ICommand value);
    public ICommand get_ForceUpdateSizeCommand();
    public void set_ForceUpdateSizeCommand(ICommand value);
    public void ForceUpdateSize();
    protected virtual void OnControlInitialized(StackLayout control);
    protected virtual void OnBindingContextChanged();
    protected virtual void OnSizeAllocated(double width, double height);
    private static void OnHeaderPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnContentPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnContentTemplatePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnIsExpandedPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnDirectionPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnTouchCaptureViewPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object GetDefaultForceUpdateSizeCommand(BindableObject bindable);
    private void OnHeaderPropertyChanged(View oldView);
    private void OnContentPropertyChanged();
    private void OnContentTemplatePropertyChanged();
    private void OnIsExpandedPropertyChanged();
    private void OnDirectionPropertyChanged(ExpandDirection oldDirection);
    [NullableContextAttribute("2")]
private void OnTouchCaptureViewPropertyChanged(View oldView);
    private void OnIsExpandedChanged(bool shouldIgnoreAnimation);
    [NullableContextAttribute("2")]
private void SetHeader(View oldHeader);
    private void SetContent(bool isForceUpdate, bool shouldIgnoreAnimation, bool isForceContentReset);
    private void SetContent();
    [NullableContextAttribute("2")]
private View CreateContent();
    private void SetDirection(ExpandDirection oldDirection);
    [NullableContextAttribute("2")]
private void SetTouchCaptureView(View oldView);
    private void InvokeAnimation(double startSize, double endSize, bool shouldIgnoreAnimation);
    private void OnTapped();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnControlInitialized>b__87_0(object parameter);
    [CompilerGeneratedAttribute]
private void <InvokeAnimation>b__110_0(double v);
    [CompilerGeneratedAttribute]
private void <InvokeAnimation>b__110_1(double value, bool isInterrupted);
}
public enum Xamarin.CommunityToolkit.UI.Views.ExpandState : Enum {
    public int value__;
    public static ExpandState Expanding;
    public static ExpandState Expanded;
    public static ExpandState Collapsing;
    public static ExpandState Collapsed;
}
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.UI.Views.Extensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ObservableCollection`1<Point> SmoothedPathWithGranularity(ObservableCollection`1<Point> currentPoints, int granularity);
    private static Point GetIntermediatePoint(Point p0, Point p1, Point p2, Point p3, Single& t, Single& tt, Single& ttt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.GravatarImageSource : ImageSource {
    public static BindableProperty EmailProperty;
    public static BindableProperty SizeProperty;
    public static BindableProperty DefaultProperty;
    public static BindableProperty CachingEnabledProperty;
    public static BindableProperty CacheValidityProperty;
    [NullableAttribute("2")]
public string Email { get; public set; }
    public int Size { get; public set; }
    public DefaultGravatar Default { get; public set; }
    public bool CachingEnabled { get; public set; }
    public TimeSpan CacheValidity { get; public set; }
    private static GravatarImageSource();
    private static void OnGravatarPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public string get_Email();
    [NullableContextAttribute("2")]
public void set_Email(string value);
    public int get_Size();
    public void set_Size(int value);
    public DefaultGravatar get_Default();
    public void set_Default(DefaultGravatar value);
    public bool get_CachingEnabled();
    public void set_CachingEnabled(bool value);
    public TimeSpan get_CacheValidity();
    public void set_CacheValidity(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler : object {
    private static string requestUriFormat;
    private static Lazy`1<HttpClient> lazyHttp;
    private static SemaphoreSlim semaphore;
    private static GravatarImageSourceHandler();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<NSImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
    private static string GetCacheDirectory();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<LoadInternal>d__5")]
public static Task`1<FileInfo> LoadInternal(ImageSource imageSource, float scale, string cacheDirectory);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<SaveImage>d__6")]
private static Task SaveImage(FileInfo cacheFileInfo, Byte[] imageBytes);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<UseCacheFile>d__7")]
private static Task`1<bool> UseCacheFile(bool cachingEnabled, TimeSpan cacheValidity, FileInfo file);
    private static string CacheFileName(GravatarImageSource gis, float scale);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<GetGravatarAsync>d__9")]
private static Task`1<Byte[]> GetGravatarAsync(string email, int size, float scale, DefaultGravatar defaultGravatar);
    private static string GetGravatarUri(string email, int size, float scale, DefaultGravatar defaultGravatar);
    private static string DefaultGravatarName(DefaultGravatar defaultGravatar);
    private static string GetMd5Hash(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Xamarin.CommunityToolkit.UI.Views.Helpers.macOS.Extensions.NSBezierPathExtensions : object {
    [ExtensionAttribute]
public static void AddLineTo(NSBezierPath bezierPath, CGPoint point);
    [ExtensionAttribute]
public static void AddArc(NSBezierPath bezierPath, CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);
    [ExtensionAttribute]
public static CGPath ToCGPath(NSBezierPath bezierPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.UI.Views.Helpers.macOS.NativeSnackBarAppearance : object {
    [CompilerGeneratedAttribute]
private NSColor <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private NSColor <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private NSFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private NSTextAlignment <TextAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private static NSColor <DefaultColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static NSFont <DefaultFont>k__BackingField;
    public NSColor Background { get; public set; }
    public NSColor Foreground { get; public set; }
    public NSFont Font { get; public set; }
    public NSTextAlignment TextAlignment { get; public set; }
    public static NSColor DefaultColor { get; }
    public static NSFont DefaultFont { get; }
    private static NativeSnackBarAppearance();
    [CompilerGeneratedAttribute]
public NSColor get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(NSColor value);
    [CompilerGeneratedAttribute]
public NSColor get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(NSColor value);
    [CompilerGeneratedAttribute]
public NSFont get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(NSFont value);
    [CompilerGeneratedAttribute]
public NSTextAlignment get_TextAlignment();
    [CompilerGeneratedAttribute]
public void set_TextAlignment(NSTextAlignment value);
    [CompilerGeneratedAttribute]
public static NSColor get_DefaultColor();
    [CompilerGeneratedAttribute]
public static NSFont get_DefaultFont();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xamarin.CommunityToolkit.UI.Views.Helpers.macOS.NativeSnackButtonAppearance : object {
    [CompilerGeneratedAttribute]
private static NSLineBreakMode <LineBreakMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static NSColor <DefaultColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static NSFont <DefaultFont>k__BackingField;
    public static NSLineBreakMode LineBreakMode { get; public set; }
    public static NSColor DefaultColor { get; }
    public static NSFont DefaultFont { get; }
    private static NativeSnackButtonAppearance();
    [CompilerGeneratedAttribute]
public static NSLineBreakMode get_LineBreakMode();
    [CompilerGeneratedAttribute]
public static void set_LineBreakMode(NSLineBreakMode value);
    [CompilerGeneratedAttribute]
public static NSColor get_DefaultColor();
    [CompilerGeneratedAttribute]
public static NSFont get_DefaultFont();
}
internal class Xamarin.CommunityToolkit.UI.Views.Helpers.macOS.SnackBarViews.ActionMessageSnackBarView : MessageSnackBarView {
    [NullableContextAttribute("1")]
public ActionMessageSnackBarView(NativeSnackBar snackBar);
    protected virtual void Initialize(CGRect cornerRadius);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Xamarin.CommunityToolkit.UI.Views.Helpers.macOS.SnackBarViews.BaseSnackBarView : NSView {
    [CompilerGeneratedAttribute]
private NSView <AnchorView>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private NativeSnackBar <SnackBar>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeRoundedStackView <StackView>k__BackingField;
    public NSView AnchorView { get; public set; }
    public NSView ParentView { get; }
    [NullableAttribute("1")]
protected NativeSnackBar SnackBar { get; }
    protected NativeRoundedStackView StackView { get; protected set; }
    [NullableContextAttribute("1")]
protected BaseSnackBarView(NativeSnackBar snackBar);
    [CompilerGeneratedAttribute]
public NSView get_AnchorView();
    [CompilerGeneratedAttribute]
public void set_AnchorView(NSView value);
    public NSView get_ParentView();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected NativeSnackBar get_SnackBar();
    [CompilerGeneratedAttribute]
protected NativeRoundedStackView get_StackView();
    [CompilerGeneratedAttribute]
protected void set_StackView(NativeRoundedStackView value);
    public void Dismiss();
    public void Setup(CGRect cornerRadius);
    private void ConstraintInParent();
    protected virtual void Initialize(CGRect cornerRadius);
}
internal class Xamarin.CommunityToolkit.UI.Views.Helpers.macOS.SnackBarViews.MessageSnackBarView : BaseSnackBarView {
    [NullableContextAttribute("1")]
public MessageSnackBarView(NativeSnackBar snackBar);
    protected virtual void Initialize(CGRect cornerRadius);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.UI.Views.Helpers.NativeSnackBar : object {
    [NullableAttribute("2")]
private NSTimer timer;
    [CompilerGeneratedAttribute]
private List`1<NativeSnackButton> <Actions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<Task> <TimeoutAction>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeSnackBarAppearance <Appearance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private SnackBarLayout <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NSView <Anchor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BaseSnackBarView <SnackBarView>k__BackingField;
    [CompilerGeneratedAttribute]
private CGRect <CornerRadius>k__BackingField;
    public List`1<NativeSnackButton> Actions { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task> TimeoutAction { get; protected set; }
    public NativeSnackBarAppearance Appearance { get; protected set; }
    public TimeSpan Duration { get; protected set; }
    public SnackBarLayout Layout { get; }
    public string Message { get; protected set; }
    [NullableAttribute("2")]
public NSView Anchor { get; protected set; }
    [NullableAttribute("2")]
protected BaseSnackBarView SnackBarView { get; protected set; }
    public CGRect CornerRadius { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<NativeSnackButton> get_Actions();
    [CompilerGeneratedAttribute]
protected void set_Actions(List`1<NativeSnackButton> value);
    [CompilerGeneratedAttribute]
public Func`1<Task> get_TimeoutAction();
    [CompilerGeneratedAttribute]
protected void set_TimeoutAction(Func`1<Task> value);
    [CompilerGeneratedAttribute]
public NativeSnackBarAppearance get_Appearance();
    [CompilerGeneratedAttribute]
protected void set_Appearance(NativeSnackBarAppearance value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
protected void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public SnackBarLayout get_Layout();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NSView get_Anchor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_Anchor(NSView value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected BaseSnackBarView get_SnackBarView();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_SnackBarView(BaseSnackBarView value);
    [CompilerGeneratedAttribute]
public CGRect get_CornerRadius();
    [CompilerGeneratedAttribute]
public void set_CornerRadius(CGRect value);
    public void Dismiss();
    public static NativeSnackBar MakeSnackBar(string message);
    public NativeSnackBar SetTimeoutAction(Func`1<Task> action);
    public NativeSnackBar SetDuration(TimeSpan duration);
    public NativeSnackBar SetAnchor(NSView anchor);
    public NativeSnackBar SetCornerRadius(Thickness cornerRadius);
    public NativeSnackBar Show();
    private BaseSnackBarView GetSnackBarView();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.Helpers.NativeSnackBar/<<Show>b__42_0>d")]
[CompilerGeneratedAttribute]
private void <Show>b__42_0(NSTimer t);
}
internal class Xamarin.CommunityToolkit.UI.Views.Helpers.PaddedLabel : NSTextField {
    [CompilerGeneratedAttribute]
private nfloat <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <Bottom>k__BackingField;
    public nfloat Left { get; }
    public nfloat Top { get; }
    public nfloat Right { get; }
    public nfloat Bottom { get; }
    public CGSize IntrinsicContentSize { get; }
    public PaddedLabel(nfloat left, nfloat top, nfloat right, nfloat bottom);
    [CompilerGeneratedAttribute]
public nfloat get_Left();
    [CompilerGeneratedAttribute]
public nfloat get_Top();
    [CompilerGeneratedAttribute]
public nfloat get_Right();
    [CompilerGeneratedAttribute]
public nfloat get_Bottom();
    public virtual CGSize get_IntrinsicContentSize();
}
internal class Xamarin.CommunityToolkit.UI.Views.Helpers.SnackBarLayout : object {
    [CompilerGeneratedAttribute]
private nfloat <MarginBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <MarginLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <MarginTop>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <MarginRight>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <PaddingBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <PaddingLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <PaddingTop>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <PaddingRight>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <Spacing>k__BackingField;
    public nfloat MarginBottom { get; public set; }
    public nfloat MarginLeft { get; public set; }
    public nfloat MarginTop { get; public set; }
    public nfloat MarginRight { get; public set; }
    public nfloat PaddingBottom { get; public set; }
    public nfloat PaddingLeft { get; public set; }
    public nfloat PaddingTop { get; public set; }
    public nfloat PaddingRight { get; public set; }
    public nfloat Spacing { get; public set; }
    [CompilerGeneratedAttribute]
public nfloat get_MarginBottom();
    [CompilerGeneratedAttribute]
public void set_MarginBottom(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_MarginLeft();
    [CompilerGeneratedAttribute]
public void set_MarginLeft(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_MarginTop();
    [CompilerGeneratedAttribute]
public void set_MarginTop(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_MarginRight();
    [CompilerGeneratedAttribute]
public void set_MarginRight(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_PaddingBottom();
    [CompilerGeneratedAttribute]
public void set_PaddingBottom(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_PaddingLeft();
    [CompilerGeneratedAttribute]
public void set_PaddingLeft(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_PaddingTop();
    [CompilerGeneratedAttribute]
public void set_PaddingTop(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_PaddingRight();
    [CompilerGeneratedAttribute]
public void set_PaddingRight(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(nfloat value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.HexLayout : Layout`1<View> {
    public static BindableProperty OrientationProperty;
    public static BindableProperty ColumnCountProperty;
    public static BindableProperty RowCountProperty;
    public static BindableProperty ColumnProperty;
    public static BindableProperty RowProperty;
    public HexOrientation Orientation { get; public set; }
    public int ColumnCount { get; public set; }
    public int RowCount { get; public set; }
    public int Column { get; public set; }
    public int Row { get; public set; }
    private static HexLayout();
    public HexOrientation get_Orientation();
    public void set_Orientation(HexOrientation value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public int get_RowCount();
    public void set_RowCount(int value);
    public int get_Column();
    public void set_Column(int value);
    private int GetColumn(VisualElement e);
    public int get_Row();
    public void set_Row(int value);
    private int GetRow(VisualElement e);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    private void LayoutChild(VisualElement element, Size hexSize, double columnWidth, double rowHeight, bool shift);
    private void HasShift(Boolean& first, Boolean& last);
    private void HasRowShift(Boolean& firstRow, Boolean& lastRow);
    private void HasColumnShift(Boolean& firstColumn, Boolean& lastColumn);
    private Size GetHexSize(Size gridSize);
    private Size GetPossibleSize(Size gridSize);
    private Size GetPossibleSizeVertical(Size gridSize, bool first, bool last);
    private Size GetPossibleSizeHorizontal(Size gridSize, bool first, bool last);
}
public enum Xamarin.CommunityToolkit.UI.Views.HexOrientation : Enum {
    public int value__;
    public static HexOrientation Vertical;
    public static HexOrientation Horizontal;
}
[NullableContextAttribute("1")]
public interface Xamarin.CommunityToolkit.UI.Views.IBadgeAnimation {
    public abstract virtual Task OnAppearing(View badgeView);
    public abstract virtual Task OnDisappering(View badgeView);
}
[NullableContextAttribute("1")]
public interface Xamarin.CommunityToolkit.UI.Views.IColorTheme {
    public abstract virtual Color GetForegroundColor(string text);
    public abstract virtual Color GetBackgroundColor(string text);
}
[NullableContextAttribute("1")]
internal interface Xamarin.CommunityToolkit.UI.Views.IImageSourceValidator {
    public abstract virtual Task`1<bool> IsImageSourceValidAsync(ImageSource source);
}
internal class Xamarin.CommunityToolkit.UI.Views.ImageSourceValidator : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.ImageSourceValidator/<IsImageSourceValidAsync>d__0")]
public sealed virtual Task`1<bool> IsImageSourceValidAsync(ImageSource source);
    [NullableContextAttribute("2")]
private IImageSourceHandler GetHandler(ImageSource source);
}
internal class Xamarin.CommunityToolkit.UI.Views.ImageSwitcher : Image {
    [NullableAttribute("1")]
public static BindableProperty TransitionDurationProperty;
    [NullableAttribute("1")]
public static BindableProperty TransitionTypeProperty;
    public UInt32 TransitionDuration { get; public set; }
    public TransitionType TransitionType { get; public set; }
    private static ImageSwitcher();
    public sealed virtual UInt32 get_TransitionDuration();
    public sealed virtual void set_TransitionDuration(UInt32 value);
    public sealed virtual TransitionType get_TransitionType();
    public sealed virtual void set_TransitionType(TransitionType value);
}
public interface Xamarin.CommunityToolkit.UI.Views.IMediaElementController {
    public double BufferingProgress { get; public set; }
    public MediaElementState CurrentState { get; public set; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public TimeSpan Position { get; public set; }
    public int VideoHeight { get; public set; }
    public int VideoWidth { get; public set; }
    public double Volume { get; public set; }
    public abstract virtual double get_BufferingProgress();
    public abstract virtual void set_BufferingProgress(double value);
    public abstract virtual MediaElementState get_CurrentState();
    public abstract virtual void set_CurrentState(MediaElementState value);
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    public abstract virtual void set_Duration(Nullable`1<TimeSpan> value);
    public abstract virtual TimeSpan get_Position();
    public abstract virtual void set_Position(TimeSpan value);
    public abstract virtual int get_VideoHeight();
    public abstract virtual void set_VideoHeight(int value);
    public abstract virtual int get_VideoWidth();
    public abstract virtual void set_VideoWidth(int value);
    public abstract virtual double get_Volume();
    public abstract virtual void set_Volume(double value);
    public abstract virtual void OnMediaEnded();
    public abstract virtual void OnMediaFailed();
    public abstract virtual void OnMediaOpened();
    public abstract virtual void OnSeekCompleted();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.UI.Views.Internals.BaseTemplatedView`1 : TemplatedView {
    [CompilerGeneratedAttribute]
private TControl <Control>k__BackingField;
    protected TControl Control { get; private set; }
    [CompilerGeneratedAttribute]
protected TControl get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(TControl value);
    protected virtual void OnBindingContextChanged();
    [NullableContextAttribute("1")]
protected virtual void OnChildAdded(Element child);
    [NullableContextAttribute("1")]
protected abstract virtual void OnControlInitialized(TControl control);
}
[NullableContextAttribute("1")]
public interface Xamarin.CommunityToolkit.UI.Views.ISideMenuList`1 {
    public abstract virtual void Add(View view, SideMenuPosition position);
    public abstract virtual void Add(View view, SideMenuPosition position, double menuWidthPercentage);
    public abstract virtual void AddMainView(View view);
    public abstract virtual void AddMainView(View view, double menuWidthPercentage);
    public abstract virtual void AddLeftMenu(View view);
    public abstract virtual void AddLeftMenu(View view, double menuWidthPercentage);
    public abstract virtual void AddRightMenu(View view);
    public abstract virtual void AddRightMenu(View view, double menuWidthPercentage);
}
[NullableContextAttribute("1")]
public interface Xamarin.CommunityToolkit.UI.Views.ITabBadgeAnimation {
    public abstract virtual Task OnAppearing(TabBadgeView badgeView);
    public abstract virtual Task OnDisappering(TabBadgeView badgeView);
}
[NullableContextAttribute("1")]
public interface Xamarin.CommunityToolkit.UI.Views.ITabViewItemAnimation {
    public abstract virtual Task OnSelected(View tabViewItem);
    public abstract virtual Task OnDeSelected(View tabViewItem);
}
internal interface Xamarin.CommunityToolkit.UI.Views.IViewSwitcher {
    public UInt32 TransitionDuration { get; public set; }
    public TransitionType TransitionType { get; public set; }
    public abstract virtual UInt32 get_TransitionDuration();
    public abstract virtual void set_TransitionDuration(UInt32 value);
    public abstract virtual TransitionType get_TransitionType();
    public abstract virtual void set_TransitionType(TransitionType value);
}
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.UI.Views.LayoutExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IReadOnlyList`1<Element> GetChildren(ILayoutController source);
}
public enum Xamarin.CommunityToolkit.UI.Views.LayoutState : Enum {
    public int value__;
    public static LayoutState None;
    public static LayoutState Loading;
    public static LayoutState Saving;
    public static LayoutState Success;
    public static LayoutState Error;
    public static LayoutState Empty;
    public static LayoutState Custom;
}
public class Xamarin.CommunityToolkit.UI.Views.LazyView`1 : BaseLazyView {
    public virtual ValueTask LoadViewAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.Line : BindableObject {
    private static int minValueGranularity;
    public static BindableProperty GranularityProperty;
    public static BindableProperty EnableSmoothedPathProperty;
    public static BindableProperty PointsProperty;
    public static BindableProperty LineColorProperty;
    public static BindableProperty LineWidthProperty;
    public Color LineColor { get; public set; }
    public float LineWidth { get; public set; }
    public ObservableCollection`1<Point> Points { get; public set; }
    public int Granularity { get; public set; }
    public bool EnableSmoothedPath { get; public set; }
    private static Line();
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public float get_LineWidth();
    public void set_LineWidth(float value);
    public ObservableCollection`1<Point> get_Points();
    public void set_Points(ObservableCollection`1<Point> value);
    public int get_Granularity();
    public void set_Granularity(int value);
    public bool get_EnableSmoothedPath();
    public void set_EnableSmoothedPath(bool value);
    private static object CoerceValue(BindableObject bindable, object value);
    private int CoerceValue(int value);
    public Stream GetImageStream(double imageSizeWidth, double imageSizeHeight, Color backgroundColor);
    public static Stream GetImageStream(IEnumerable`1<Point> points, Size imageSize, float lineWidth, Color strokeColor, Color backgroundColor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.UI.Views.macOS.Extensions : object {
    [ExtensionAttribute]
public static void MoveTo(NSBezierPath path, double x, double y);
    [ExtensionAttribute]
public static void LineTo(NSBezierPath path, double x, double y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PreserveAttribute]
internal class Xamarin.CommunityToolkit.UI.Views.MaterialTabViewItemTemplate : Grid {
    private VisualFeedbackEffect visualFeedback;
    private Image icon;
    private Label text;
    private TabBadgeView badge;
    protected virtual void OnParentSet();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
    private void UpdateBadgePosition();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.MediaCapturedEventArgs : EventArgs {
    private string path;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ImageSource> imageSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<FileMediaSource> mediaSource;
    [CompilerGeneratedAttribute]
private Byte[] <ImageData>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Rotation>k__BackingField;
    public Byte[] ImageData { get; }
    public double Rotation { get; }
    public ImageSource Image { get; }
    public FileMediaSource Video { get; }
    internal MediaCapturedEventArgs(string path, Byte[] imageData, double rotation);
    [CompilerGeneratedAttribute]
public Byte[] get_ImageData();
    [CompilerGeneratedAttribute]
public double get_Rotation();
    public ImageSource get_Image();
    public FileMediaSource get_Video();
    private ImageSource GetImageSource();
    private FileMediaSource GetMediaSource();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Stream <GetImageSource>b__14_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.MediaElement : View {
    public static BindableProperty AspectProperty;
    public static BindableProperty AutoPlayProperty;
    public static BindableProperty BufferingProgressProperty;
    public static BindableProperty CurrentStateProperty;
    public static BindableProperty DurationProperty;
    public static BindableProperty IsLoopingProperty;
    public static BindableProperty KeepScreenOnProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty ShowsPlaybackControlsProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty VideoHeightProperty;
    public static BindableProperty VideoWidthProperty;
    public static BindableProperty VolumeProperty;
    public static BindableProperty SpeedProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SeekRequested> SeekRequested;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StateRequested> StateRequested;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler PositionRequested;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler MediaEnded;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler MediaFailed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler MediaOpened;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler SeekCompleted;
    private bool isSeeking;
    public Aspect Aspect { get; public set; }
    public bool AutoPlay { get; public set; }
    public double BufferingProgress { get; }
    public bool CanSeek { get; }
    public MediaElementState CurrentState { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public bool IsLooping { get; public set; }
    public bool KeepScreenOn { get; public set; }
    public bool ShowsPlaybackControls { get; public set; }
    public TimeSpan Position { get; public set; }
    [NullableAttribute("2")]
[TypeConverterAttribute("Xamarin.CommunityToolkit.Core.MediaSourceConverter")]
public MediaSource Source { get; public set; }
    public int VideoHeight { get; }
    public int VideoWidth { get; }
    public double Volume { get; public set; }
    public double Speed { get; public set; }
    private double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.BufferingProgress { get; private set; }
    private MediaElementState Xamarin.CommunityToolkit.UI.Views.IMediaElementController.CurrentState { get; private set; }
    private Nullable`1<TimeSpan> Xamarin.CommunityToolkit.UI.Views.IMediaElementController.Duration { get; private set; }
    private TimeSpan Xamarin.CommunityToolkit.UI.Views.IMediaElementController.Position { get; private set; }
    private int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.VideoHeight { get; private set; }
    private int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.VideoWidth { get; private set; }
    private double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.Volume { get; private set; }
    private static MediaElement();
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public bool get_AutoPlay();
    public void set_AutoPlay(bool value);
    public double get_BufferingProgress();
    public bool get_CanSeek();
    public MediaElementState get_CurrentState();
    public Nullable`1<TimeSpan> get_Duration();
    public bool get_IsLooping();
    public void set_IsLooping(bool value);
    public bool get_KeepScreenOn();
    public void set_KeepScreenOn(bool value);
    public bool get_ShowsPlaybackControls();
    public void set_ShowsPlaybackControls(bool value);
    public TimeSpan get_Position();
    public void set_Position(TimeSpan value);
    [NullableContextAttribute("2")]
public MediaSource get_Source();
    [NullableContextAttribute("2")]
public void set_Source(MediaSource value);
    public int get_VideoHeight();
    public int get_VideoWidth();
    public double get_Volume();
    public void set_Volume(double value);
    public double get_Speed();
    public void set_Speed(double value);
    [CompilerGeneratedAttribute]
internal void add_SeekRequested(EventHandler`1<SeekRequested> value);
    [CompilerGeneratedAttribute]
internal void remove_SeekRequested(EventHandler`1<SeekRequested> value);
    [CompilerGeneratedAttribute]
internal void add_StateRequested(EventHandler`1<StateRequested> value);
    [CompilerGeneratedAttribute]
internal void remove_StateRequested(EventHandler`1<StateRequested> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_PositionRequested(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_PositionRequested(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_MediaEnded(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_MediaEnded(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_MediaFailed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_MediaFailed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_MediaOpened(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_MediaOpened(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_SeekCompleted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_SeekCompleted(EventHandler value);
    public void Play();
    public void Pause();
    public void Stop();
    private sealed virtual override double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_BufferingProgress();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_BufferingProgress(double value);
    private sealed virtual override MediaElementState Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_CurrentState();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_CurrentState(MediaElementState value);
    private sealed virtual override Nullable`1<TimeSpan> Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_Duration();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_Duration(Nullable`1<TimeSpan> value);
    private sealed virtual override TimeSpan Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_Position();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_Position(TimeSpan value);
    private sealed virtual override int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_VideoHeight();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_VideoHeight(int value);
    private sealed virtual override int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_VideoWidth();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_VideoWidth(int value);
    private sealed virtual override double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_Volume();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_Volume(double value);
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnMediaEnded();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnMediaFailed();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnMediaOpened();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnSeekCompleted();
    private void RequestSeek(TimeSpan newPosition);
    protected virtual void OnBindingContextChanged();
    private void OnSourceChanged(object sender, EventArgs eventArgs);
    private static void OnSourcePropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private void OnSourcePropertyChanged(MediaSource newvalue);
    private static void OnSourcePropertyChanging(BindableObject bindable, object oldvalue, object newvalue);
    private void OnSourcePropertyChanging(MediaSource oldvalue);
    private static void CurrentStateChanged(BindableObject bindable, object oldValue, object newValue);
    private static void PositionChanged(BindableObject bindable, object oldValue, object newValue);
    private static bool ValidateVolume(BindableObject o, object newValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.MediaElementRenderer : ViewRenderer`2<MediaElement, NSView> {
    protected AVPlayerView avPlayerView;
    [NullableAttribute("2")]
protected NSObject playedToEndObserver;
    [NullableAttribute("2")]
protected IDisposable statusObserver;
    [NullableAttribute("2")]
protected IDisposable rateObserver;
    [NullableAttribute("2")]
protected IDisposable volumeObserver;
    private bool idleTimerDisabled;
    [NullableAttribute("2")]
private AVPlayerItem playerItem;
    [NullableAttribute("2")]
private AVPlayerLayer playerLayer;
    private IMediaElementController Controller { get; }
    private TimeSpan Position { get; }
    private IMediaElementController get_Controller();
    protected virtual void SetKeepScreenOn(bool value);
    protected virtual void UpdateSource();
    protected string ResolveMsAppDataUri(Uri uri);
    protected virtual void ObserveRate(NSObservedChange e);
    private void ObserveVolume(NSObservedChange e);
    protected void ObserveStatus(NSObservedChange e);
    private TimeSpan get_Position();
    private void PlayedToEnd(NSNotification notification);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void MediaElementSeekRequested(object sender, SeekRequested e);
    protected virtual void Play();
    private void UpdateVolume();
    private void MediaElementStateRequested(object sender, StateRequested e);
    private static AVLayerVideoGravity AspectToGravity(Aspect aspect);
    private void SeekComplete(bool finished);
    private void MediaElementPositionRequested(object sender, EventArgs e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<MediaElement> e);
    [NullableContextAttribute("2")]
protected void DisposeObservers(IDisposable& disposable);
    [NullableContextAttribute("2")]
protected void DisposeObservers(NSObject& disposable);
    private void AddVolumeObserver();
    private void AddRateObserver();
    private void AddStatusObserver();
    private void AddPlayedToEndObserver();
    private void DestroyVolumeObserver();
    private void DestroyRateObserver();
    private void DestroyStatusObserver();
    private void DestroyPlayedToEndObserver();
}
public enum Xamarin.CommunityToolkit.UI.Views.MediaElementState : Enum {
    public int value__;
    public static MediaElementState Closed;
    public static MediaElementState Opening;
    public static MediaElementState Buffering;
    public static MediaElementState Playing;
    public static MediaElementState Paused;
    public static MediaElementState Stopped;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.Options.MessageOptions : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private static Font <DefaultFont>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultForeground>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private static Thickness <DefaultPadding>k__BackingField;
    public string Message { get; public set; }
    public static string DefaultMessage { get; public set; }
    public Font Font { get; public set; }
    public static Font DefaultFont { get; public set; }
    public Color Foreground { get; public set; }
    public static Color DefaultForeground { get; public set; }
    public Thickness Padding { get; public set; }
    public static Thickness DefaultPadding { get; public set; }
    private static MessageOptions();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultMessage(string value);
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(Font value);
    [CompilerGeneratedAttribute]
public static Font get_DefaultFont();
    [CompilerGeneratedAttribute]
public static void set_DefaultFont(Font value);
    [CompilerGeneratedAttribute]
public Color get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultForeground();
    [CompilerGeneratedAttribute]
public static void set_DefaultForeground(Color value);
    [CompilerGeneratedAttribute]
public Thickness get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(Thickness value);
    [CompilerGeneratedAttribute]
public static Thickness get_DefaultPadding();
    [CompilerGeneratedAttribute]
public static void set_DefaultPadding(Thickness value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<Task> <Action>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`1<Task> <DefaultAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultText>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private static Font <DefaultFont>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private static Thickness <DefaultPadding>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task> Action { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`1<Task> DefaultAction { get; public set; }
    public string Text { get; public set; }
    public static string DefaultText { get; public set; }
    public Font Font { get; public set; }
    public static Font DefaultFont { get; public set; }
    public Color BackgroundColor { get; public set; }
    public static Color DefaultBackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public static Color DefaultForegroundColor { get; public set; }
    public Thickness Padding { get; public set; }
    public static Thickness DefaultPadding { get; public set; }
    private static SnackBarActionOptions();
    [CompilerGeneratedAttribute]
public Func`1<Task> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Func`1<Task> value);
    [CompilerGeneratedAttribute]
public static Func`1<Task> get_DefaultAction();
    [CompilerGeneratedAttribute]
public static void set_DefaultAction(Func`1<Task> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultText();
    [CompilerGeneratedAttribute]
public static void set_DefaultText(string value);
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(Font value);
    [CompilerGeneratedAttribute]
public static Font get_DefaultFont();
    [CompilerGeneratedAttribute]
public static void set_DefaultFont(Font value);
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultBackgroundColor();
    [CompilerGeneratedAttribute]
public static void set_DefaultBackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_ForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ForegroundColor(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultForegroundColor();
    [CompilerGeneratedAttribute]
public static void set_DefaultForegroundColor(Color value);
    [CompilerGeneratedAttribute]
public Thickness get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(Thickness value);
    [CompilerGeneratedAttribute]
public static Thickness get_DefaultPadding();
    [CompilerGeneratedAttribute]
public static void set_DefaultPadding(Thickness value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.Options.SnackBarOptions : ToastOptions {
    [CompilerGeneratedAttribute]
private IEnumerable`1<SnackBarActionOptions> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEnumerable`1<SnackBarActionOptions> <DefaultActions>k__BackingField;
    public IEnumerable`1<SnackBarActionOptions> Actions { get; public set; }
    public static IEnumerable`1<SnackBarActionOptions> DefaultActions { get; public set; }
    private static SnackBarOptions();
    [CompilerGeneratedAttribute]
public IEnumerable`1<SnackBarActionOptions> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IEnumerable`1<SnackBarActionOptions> value);
    [CompilerGeneratedAttribute]
public static IEnumerable`1<SnackBarActionOptions> get_DefaultActions();
    [CompilerGeneratedAttribute]
public static void set_DefaultActions(IEnumerable`1<SnackBarActionOptions> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions : object {
    [CompilerGeneratedAttribute]
private MessageOptions <MessageOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static MessageOptions <DefaultMessageOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <CornerRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private static Thickness <DefaultCornerRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRtl>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DefaultIsRtl>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <DefaultDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <Result>k__BackingField;
    public MessageOptions MessageOptions { get; public set; }
    public static MessageOptions DefaultMessageOptions { get; public set; }
    public Color BackgroundColor { get; public set; }
    public static Color DefaultBackgroundColor { get; public set; }
    public Thickness CornerRadius { get; public set; }
    public static Thickness DefaultCornerRadius { get; public set; }
    public bool IsRtl { get; public set; }
    public static bool DefaultIsRtl { get; public set; }
    public TimeSpan Duration { get; public set; }
    public static TimeSpan DefaultDuration { get; public set; }
    public TaskCompletionSource`1<bool> Result { get; }
    private static ToastOptions();
    [CompilerGeneratedAttribute]
public MessageOptions get_MessageOptions();
    [CompilerGeneratedAttribute]
public void set_MessageOptions(MessageOptions value);
    [CompilerGeneratedAttribute]
public static MessageOptions get_DefaultMessageOptions();
    [CompilerGeneratedAttribute]
public static void set_DefaultMessageOptions(MessageOptions value);
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultBackgroundColor();
    [CompilerGeneratedAttribute]
public static void set_DefaultBackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public Thickness get_CornerRadius();
    [CompilerGeneratedAttribute]
public void set_CornerRadius(Thickness value);
    [CompilerGeneratedAttribute]
public static Thickness get_DefaultCornerRadius();
    [CompilerGeneratedAttribute]
public static void set_DefaultCornerRadius(Thickness value);
    [CompilerGeneratedAttribute]
public bool get_IsRtl();
    [CompilerGeneratedAttribute]
public void set_IsRtl(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DefaultIsRtl();
    [CompilerGeneratedAttribute]
public static void set_DefaultIsRtl(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_DefaultDuration();
    [CompilerGeneratedAttribute]
public static void set_DefaultDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<bool> get_Result();
    internal bool SetResult(bool result);
    internal bool SetException(Exception exception);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.Popup : Popup`1<object> {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.UI.Views.Popup`1 : BasePopup {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<T> taskCompletionSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Task`1<T> Result { get; }
    public void Reset();
    public void Dismiss(T result);
    public Task`1<T> get_Result();
    protected internal virtual void LightDismiss();
    protected virtual T GetLightDismissResult();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs : PopupDismissedEventArgs`1<object> {
    public PopupDismissedEventArgs(object result, bool isLightDismissed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLightDismissed>k__BackingField;
    public T Result { get; }
    public bool IsLightDismissed { get; }
    public PopupDismissedEventArgs`1(T result, bool isLightDismissed);
    [CompilerGeneratedAttribute]
public T get_Result();
    [CompilerGeneratedAttribute]
public bool get_IsLightDismissed();
}
public class Xamarin.CommunityToolkit.UI.Views.PopupOpenedEventArgs : EventArgs {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.RangeSlider : BaseTemplatedView`1<AbsoluteLayout> {
    private static double enabledOpacity;
    private static double disabledOpacity;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler LowerValueChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler UpperValueChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler DragStarted;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler LowerDragStarted;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler UpperDragStarted;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler DragCompleted;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler LowerDragCompleted;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler UpperDragCompleted;
    public static BindableProperty MinimumValueProperty;
    public static BindableProperty MaximumValueProperty;
    public static BindableProperty StepValueProperty;
    public static BindableProperty LowerValueProperty;
    public static BindableProperty UpperValueProperty;
    public static BindableProperty ThumbSizeProperty;
    public static BindableProperty LowerThumbSizeProperty;
    public static BindableProperty UpperThumbSizeProperty;
    public static BindableProperty TrackSizeProperty;
    public static BindableProperty ThumbColorProperty;
    public static BindableProperty LowerThumbColorProperty;
    public static BindableProperty UpperThumbColorProperty;
    public static BindableProperty TrackColorProperty;
    public static BindableProperty TrackHighlightColorProperty;
    public static BindableProperty ThumbBorderColorProperty;
    public static BindableProperty LowerThumbBorderColorProperty;
    public static BindableProperty UpperThumbBorderColorProperty;
    public static BindableProperty TrackBorderColorProperty;
    public static BindableProperty TrackHighlightBorderColorProperty;
    public static BindableProperty ValueLabelStyleProperty;
    public static BindableProperty LowerValueLabelStyleProperty;
    public static BindableProperty UpperValueLabelStyleProperty;
    public static BindableProperty ValueLabelStringFormatProperty;
    public static BindableProperty LowerThumbViewProperty;
    public static BindableProperty UpperThumbViewProperty;
    public static BindableProperty ValueLabelSpacingProperty;
    public static BindableProperty ThumbRadiusProperty;
    public static BindableProperty LowerThumbRadiusProperty;
    public static BindableProperty UpperThumbRadiusProperty;
    public static BindableProperty TrackRadiusProperty;
    private Dictionary`2<View, double> thumbPositionMap;
    private PanGestureRecognizer lowerThumbGestureRecognizer;
    private PanGestureRecognizer upperThumbGestureRecognizer;
    private Size allocatedSize;
    private double labelMaxHeight;
    private double lowerTranslation;
    private double upperTranslation;
    private int dragCount;
    [CompilerGeneratedAttribute]
private Frame <Track>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <TrackHighlight>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <LowerThumb>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <UpperThumb>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <LowerValueLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <UpperValueLabel>k__BackingField;
    public double MinimumValue { get; public set; }
    public double MaximumValue { get; public set; }
    public double StepValue { get; public set; }
    public double LowerValue { get; public set; }
    public double UpperValue { get; public set; }
    public double ThumbSize { get; public set; }
    public double LowerThumbSize { get; public set; }
    public double UpperThumbSize { get; public set; }
    public double TrackSize { get; public set; }
    public Color ThumbColor { get; public set; }
    public Color LowerThumbColor { get; public set; }
    public Color UpperThumbColor { get; public set; }
    public Color TrackColor { get; public set; }
    public Color TrackHighlightColor { get; public set; }
    public Color ThumbBorderColor { get; public set; }
    public Color LowerThumbBorderColor { get; public set; }
    public Color UpperThumbBorderColor { get; public set; }
    public Color TrackBorderColor { get; public set; }
    public Color TrackHighlightBorderColor { get; public set; }
    public Style ValueLabelStyle { get; public set; }
    public Style LowerValueLabelStyle { get; public set; }
    public Style UpperValueLabelStyle { get; public set; }
    public string ValueLabelStringFormat { get; public set; }
    [NullableAttribute("2")]
public View LowerThumbView { get; public set; }
    [NullableAttribute("2")]
public View UpperThumbView { get; public set; }
    public double ValueLabelSpacing { get; public set; }
    public double ThumbRadius { get; public set; }
    public double LowerThumbRadius { get; public set; }
    public double UpperThumbRadius { get; public set; }
    public double TrackRadius { get; public set; }
    private static bool IsThumbShadowSupported { get; }
    private Frame Track { get; }
    private Frame TrackHighlight { get; }
    private Frame LowerThumb { get; }
    private Frame UpperThumb { get; }
    private Label LowerValueLabel { get; }
    private Label UpperValueLabel { get; }
    private double TrackWidth { get; }
    private static RangeSlider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_LowerValueChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_LowerValueChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_UpperValueChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_UpperValueChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_DragStarted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_DragStarted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_LowerDragStarted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_LowerDragStarted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_UpperDragStarted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_UpperDragStarted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_DragCompleted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_DragCompleted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_LowerDragCompleted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_LowerDragCompleted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_UpperDragCompleted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_UpperDragCompleted(EventHandler value);
    public double get_MinimumValue();
    public void set_MinimumValue(double value);
    public double get_MaximumValue();
    public void set_MaximumValue(double value);
    public double get_StepValue();
    public void set_StepValue(double value);
    public double get_LowerValue();
    public void set_LowerValue(double value);
    public double get_UpperValue();
    public void set_UpperValue(double value);
    public double get_ThumbSize();
    public void set_ThumbSize(double value);
    public double get_LowerThumbSize();
    public void set_LowerThumbSize(double value);
    public double get_UpperThumbSize();
    public void set_UpperThumbSize(double value);
    public double get_TrackSize();
    public void set_TrackSize(double value);
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
    public Color get_LowerThumbColor();
    public void set_LowerThumbColor(Color value);
    public Color get_UpperThumbColor();
    public void set_UpperThumbColor(Color value);
    public Color get_TrackColor();
    public void set_TrackColor(Color value);
    public Color get_TrackHighlightColor();
    public void set_TrackHighlightColor(Color value);
    public Color get_ThumbBorderColor();
    public void set_ThumbBorderColor(Color value);
    public Color get_LowerThumbBorderColor();
    public void set_LowerThumbBorderColor(Color value);
    public Color get_UpperThumbBorderColor();
    public void set_UpperThumbBorderColor(Color value);
    public Color get_TrackBorderColor();
    public void set_TrackBorderColor(Color value);
    public Color get_TrackHighlightBorderColor();
    public void set_TrackHighlightBorderColor(Color value);
    public Style get_ValueLabelStyle();
    public void set_ValueLabelStyle(Style value);
    public Style get_LowerValueLabelStyle();
    public void set_LowerValueLabelStyle(Style value);
    public Style get_UpperValueLabelStyle();
    public void set_UpperValueLabelStyle(Style value);
    public string get_ValueLabelStringFormat();
    public void set_ValueLabelStringFormat(string value);
    [NullableContextAttribute("2")]
public View get_LowerThumbView();
    [NullableContextAttribute("2")]
public void set_LowerThumbView(View value);
    [NullableContextAttribute("2")]
public View get_UpperThumbView();
    [NullableContextAttribute("2")]
public void set_UpperThumbView(View value);
    public double get_ValueLabelSpacing();
    public void set_ValueLabelSpacing(double value);
    public double get_ThumbRadius();
    public void set_ThumbRadius(double value);
    public double get_LowerThumbRadius();
    public void set_LowerThumbRadius(double value);
    public double get_UpperThumbRadius();
    public void set_UpperThumbRadius(double value);
    public double get_TrackRadius();
    public void set_TrackRadius(double value);
    private static bool get_IsThumbShadowSupported();
    [CompilerGeneratedAttribute]
private Frame get_Track();
    [CompilerGeneratedAttribute]
private Frame get_TrackHighlight();
    [CompilerGeneratedAttribute]
private Frame get_LowerThumb();
    [CompilerGeneratedAttribute]
private Frame get_UpperThumb();
    [CompilerGeneratedAttribute]
private Label get_LowerValueLabel();
    [CompilerGeneratedAttribute]
private Label get_UpperValueLabel();
    private double get_TrackWidth();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnSizeAllocated(double width, double height);
    protected virtual void OnControlInitialized(AbsoluteLayout control);
    private static Frame CreateFrameElement(bool hasShadow);
    private static Label CreateLabelElement();
    private static object CoerceValue(BindableObject bindable, object value);
    private static void OnMinimumMaximumValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnLowerUpperValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnLayoutPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnIsEnabledChanged();
    private double CoerceValue(double value);
    private void OnMinimumMaximumValuePropertyChanged();
    private void OnLowerUpperValuePropertyChanged();
    private void OnValueLabelTranslationChanged();
    private void OnLayoutPropertyChanged();
    private void OnViewSizeChanged(object sender, EventArgs e);
    private void OnPanUpdated(object sender, PanUpdatedEventArgs e);
    private void OnPanStarted(View view);
    private void OnPanRunning(View view, double value);
    private void OnPanCompleted(View view);
    private void UpdateValue(View view, double value);
    private double GetPanShiftValue(View view);
    private void SetValueLabelBinding(Label label, BindableProperty bindableProperty);
    private void AddGestureRecognizer(View view, PanGestureRecognizer gestureRecognizer);
    private Color GetColorOrDefault(Color color, Color defaultColor);
    private double GetDoubleOrDefault(double value, double defaultSize);
    [NullableContextAttribute("2")]
private void RaiseEvent(EventHandler eventHandler);
}
internal class Xamarin.CommunityToolkit.UI.Views.SeekRequested : EventArgs {
    [CompilerGeneratedAttribute]
private TimeSpan <Position>k__BackingField;
    public TimeSpan Position { get; }
    public SeekRequested(TimeSpan position);
    [CompilerGeneratedAttribute]
public TimeSpan get_Position();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.SemanticOrderView : ContentView {
    public static BindableProperty ViewOrderProperty;
    public IEnumerable ViewOrder { get; public set; }
    private static SemanticOrderView();
    public IEnumerable get_ViewOrder();
    public void set_ViewOrder(IEnumerable value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.Shield : BaseTemplatedView`1<Frame> {
    public static BindableProperty SubjectProperty;
    public static BindableProperty SubjectBackgroundColorProperty;
    [ObsoleteAttribute("TextColor is obsolete. Please use StatusTextColor instead")]
[EditorBrowsableAttribute("1")]
public static BindableProperty TextColorProperty;
    public static BindableProperty SubjectTextColorProperty;
    public static BindableProperty StatusProperty;
    [ObsoleteAttribute("Color is obsolete. Please use StatusBackgroundColor instead")]
[EditorBrowsableAttribute("1")]
public static BindableProperty ColorProperty;
    public static BindableProperty StatusBackgroundColorProperty;
    public static BindableProperty StatusTextColorProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Tapped;
    [CompilerGeneratedAttribute]
private Grid <ShieldSubjectContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <ShieldSubject>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <ShieldStatusContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <ShieldStatus>k__BackingField;
    [NullableAttribute("2")]
public string Subject { get; public set; }
    public Color SubjectBackgroundColor { get; public set; }
    [ObsoleteAttribute("TextColor is obsolete. Please use StatusTextColor instead")]
[EditorBrowsableAttribute("1")]
public Color TextColor { get; public set; }
    public Color SubjectTextColor { get; public set; }
    [NullableAttribute("2")]
public string Status { get; public set; }
    [ObsoleteAttribute("Color is obsolete. Please use StatusBackgroundColor instead")]
[EditorBrowsableAttribute("1")]
public Color Color { get; public set; }
    public Color StatusBackgroundColor { get; public set; }
    public Color StatusTextColor { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    [NullableAttribute("2")]
public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    [NullableAttribute("2")]
public ICommand Command { get; public set; }
    [NullableAttribute("2")]
public object CommandParameter { get; public set; }
    private Grid ShieldSubjectContainer { get; }
    private Label ShieldSubject { get; }
    private Grid ShieldStatusContainer { get; }
    private Label ShieldStatus { get; }
    private static Shield();
    private static void OnSubjectChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public string get_Subject();
    [NullableContextAttribute("2")]
public void set_Subject(string value);
    private static void OnSubjectBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_SubjectBackgroundColor();
    public void set_SubjectBackgroundColor(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    private static void OnTextColorChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnSubjectTextColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_SubjectTextColor();
    public void set_SubjectTextColor(Color value);
    private static void OnStatusChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public string get_Status();
    [NullableContextAttribute("2")]
public void set_Status(string value);
    private static void OnColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_Color();
    public void set_Color(Color value);
    private static void OnStatusBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_StatusBackgroundColor();
    public void set_StatusBackgroundColor(Color value);
    private static void OnStatusTextColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_StatusTextColor();
    public void set_StatusTextColor(Color value);
    private static void OnFontChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_FontSize();
    public void set_FontSize(double value);
    [NullableContextAttribute("2")]
public string get_FontFamily();
    [NullableContextAttribute("2")]
public void set_FontFamily(string value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    [NullableContextAttribute("2")]
public ICommand get_Command();
    [NullableContextAttribute("2")]
public void set_Command(ICommand value);
    [NullableContextAttribute("2")]
public object get_CommandParameter();
    [NullableContextAttribute("2")]
public void set_CommandParameter(object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Tapped(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Tapped(EventHandler value);
    [CompilerGeneratedAttribute]
private Grid get_ShieldSubjectContainer();
    [CompilerGeneratedAttribute]
private Label get_ShieldSubject();
    [CompilerGeneratedAttribute]
private Grid get_ShieldStatusContainer();
    [CompilerGeneratedAttribute]
private Label get_ShieldStatus();
    private static Grid CreateSubjectContainerElement();
    private static Label CreateSubjectElement();
    private static Grid CreateStatusContainerElement();
    private static Label CreateStatusElement();
    protected virtual void OnControlInitialized(Frame control);
    protected virtual void OnPropertyChanged(string propertyName);
    private void UpdateSubject();
    private void UpdateStatus();
    private void UpdateSubjectColor();
    private void UpdateColor();
    private void UpdateStatusBackgroundColor();
    private void UpdateSubjectTextColor();
    private void UpdateStatusTextColor();
    private void UpdateFont();
    private void UpdateIsEnabled();
    [CompilerGeneratedAttribute]
private void <UpdateIsEnabled>g__OnCloseButtonTapped|90_0(object sender, EventArgs e);
}
public enum Xamarin.CommunityToolkit.UI.Views.SideMenuAppearanceType : Enum {
    public int value__;
    public static SideMenuAppearanceType SlideOut;
    public static SideMenuAppearanceType SlideIn;
    public static SideMenuAppearanceType SlideInOut;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Xamarin.CommunityToolkit.UI.Views.SideMenuElementCollection : ObservableCollection`1<View> {
    public sealed virtual void Add(View view, SideMenuPosition position);
    public sealed virtual void Add(View view, SideMenuPosition position, double menuWidthPercentage);
    public sealed virtual void AddMainView(View view);
    public sealed virtual void AddMainView(View view, double menuWidthPercentage);
    public sealed virtual void AddLeftMenu(View view);
    public sealed virtual void AddLeftMenu(View view, double menuWidthPercentage);
    public sealed virtual void AddRightMenu(View view);
    public sealed virtual void AddRightMenu(View view, double menuWidthPercentage);
}
public enum Xamarin.CommunityToolkit.UI.Views.SideMenuPosition : Enum {
    public int value__;
    public static SideMenuPosition LeftMenu;
    public static SideMenuPosition MainView;
    public static SideMenuPosition RightMenu;
}
public enum Xamarin.CommunityToolkit.UI.Views.SideMenuState : Enum {
    public int value__;
    public static SideMenuState LeftMenuShown;
    public static SideMenuState MainViewShown;
    public static SideMenuState RightMenuShown;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContentPropertyAttribute("Children")]
public class Xamarin.CommunityToolkit.UI.Views.SideMenuView : BaseTemplatedView`1<AbsoluteLayout> {
    private static string animationName;
    private static UInt32 animationRate;
    private static UInt32 animationLength;
    private static int maxTimeShiftItemsCount;
    private static int minSwipeTimeShiftItemsCount;
    private static double swipeThresholdDistance;
    private static double acceptMoveThresholdPercentage;
    private static UInt32 swipeAnimationAccelerationFactor;
    private static Easing animationEasing;
    private static TimeSpan swipeThresholdTime;
    private List`1<TimeShiftItem> timeShiftItems;
    private SideMenuElementCollection children;
    [NullableAttribute("2")]
private View overlayView;
    [NullableAttribute("2")]
private View mainView;
    [NullableAttribute("2")]
private View leftMenu;
    [NullableAttribute("2")]
private View rightMenu;
    [NullableAttribute("2")]
private View activeMenu;
    [NullableAttribute("2")]
private View inactiveMenu;
    private double zeroShift;
    private bool isGestureStarted;
    private bool isGestureDirectionResolved;
    private bool isSwipe;
    private double previousShift;
    public static BindableProperty ShiftProperty;
    public static BindableProperty CurrentGestureShiftProperty;
    public static BindableProperty GestureThresholdProperty;
    public static BindableProperty CancelVerticalGestureThresholdProperty;
    public static BindableProperty StateProperty;
    public static BindableProperty CurrentGestureStateProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty MenuWidthPercentageProperty;
    public static BindableProperty MenuGestureEnabledProperty;
    public static BindableProperty MainViewScaleFactorProperty;
    public static BindableProperty MainViewOpacityFactorProperty;
    public static BindableProperty MenuAppearanceTypeProperty;
    public static BindableProperty ParallaxValueProperty;
    public ISideMenuList`1<View> Children { get; }
    public double Shift { get; public set; }
    public double CurrentGestureShift { get; public set; }
    public double GestureThreshold { get; public set; }
    public double CancelVerticalGestureThreshold { get; public set; }
    public SideMenuState State { get; public set; }
    public SideMenuState CurrentGestureState { get; public set; }
    private static SideMenuView();
    public ISideMenuList`1<View> get_Children();
    public double get_Shift();
    public void set_Shift(double value);
    public double get_CurrentGestureShift();
    public void set_CurrentGestureShift(double value);
    public double get_GestureThreshold();
    public void set_GestureThreshold(double value);
    public double get_CancelVerticalGestureThreshold();
    public void set_CancelVerticalGestureThreshold(double value);
    public SideMenuState get_State();
    public void set_State(SideMenuState value);
    public SideMenuState get_CurrentGestureState();
    public void set_CurrentGestureState(SideMenuState value);
    public static SideMenuPosition GetPosition(BindableObject bindable);
    public static void SetPosition(BindableObject bindable, SideMenuPosition value);
    public static double GetMenuWidthPercentage(BindableObject bindable);
    public static void SetMenuWidthPercentage(BindableObject bindable, double value);
    public static bool GetMenuGestureEnabled(BindableObject bindable);
    public static void SetMenuGestureEnabled(BindableObject bindable, bool value);
    public static double GetMainViewScaleFactor(BindableObject bindable);
    public static void SetMainViewScaleFactor(BindableObject bindable, double value);
    public static double GetMainViewOpacityFactor(BindableObject bindable);
    public static void SetMainViewOpacityFactor(BindableObject bindable, double value);
    public static SideMenuAppearanceType GetMenuAppearanceType(BindableObject bindable);
    public static void SetMenuAppearanceType(BindableObject bindable, SideMenuAppearanceType value);
    public static double GetParallaxValue(BindableObject bindable);
    public static void SetParallaxValue(BindableObject bindable, double value);
    internal void OnPanUpdated(object sender, PanUpdatedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.SideMenuView/<OnSwiped>d__72")]
internal void OnSwiped(SwipeDirection swipeDirection);
    internal bool CheckGestureEnabled(SideMenuPosition menuPosition);
    protected virtual void OnControlInitialized(AbsoluteLayout control);
    protected virtual void OnSizeAllocated(double width, double height);
    private static View SetupMainViewLayout(View view);
    private static View SetupMenuLayout(View view, bool isLeft);
    private static void OnStatePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnStatePropertyChanged();
    private void OnTouchStarted();
    private void OnTouchChanged(double shift, double verticalShift);
    private void OnTouchEnded();
    private void PerformUpdate(bool isAnimated);
    private void SetOverlayViewInputTransparent(SideMenuState state);
    private SideMenuState ResolveSwipeState(bool isRightSwipe);
    private bool TryUpdateShift(double shift, bool isUserInteraction);
    private void SetCurrentGestureState(double shift);
    private void UpdateState(SideMenuState state, bool isSwipe);
    private void SetActiveView(bool isLeft);
    private bool CheckMenuGestureEnabled(SideMenuState state);
    private bool TryResolveFlingGesture(SideMenuState& state);
    private void PopulateTimeShiftItems(double shift);
    private void CleanTimeShiftItems();
    private void OnChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void HandleChildren(IList items, Action`1<View> action);
    private void AddChild(View view);
    private void RemoveChild(View view);
    [NullableContextAttribute("2")]
private void RaiseMenuIfNeeded(View menuView);
    private void OnLayoutChanged(object sender, EventArgs e);
    [NullableContextAttribute("2")]
private bool CheckMenuGestureEnabled(View menuView);
    [CompilerGeneratedAttribute]
private void <OnControlInitialized>b__74_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.UI.Views.SnackBar : object {
    internal ValueTask Show(VisualElement sender, SnackBarOptions arguments);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.SnackBar/<OnActionClick>d__1")]
private Task OnActionClick(SnackBarActionOptions action, SnackBarOptions arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xamarin.CommunityToolkit.UI.Views.StateLayout : object {
    internal static BindablePropertyKey StateViewsPropertyKey;
    public static BindableProperty StateViewsProperty;
    internal static BindableProperty LayoutControllerProperty;
    public static BindableProperty CurrentStateProperty;
    public static BindableProperty CurrentCustomStateKeyProperty;
    public static BindableProperty AnimateStateChangesProperty;
    private static StateLayout();
    internal static StateLayoutController GetLayoutController(BindableObject b);
    public static IList`1<StateView> GetStateViews(BindableObject b);
    public static void SetCurrentState(BindableObject b, LayoutState value);
    public static LayoutState GetCurrentState(BindableObject b);
    public static void SetCurrentCustomStateKey(BindableObject b, string value);
    public static string GetCurrentCustomStateKey(BindableObject b);
    public static void SetAnimateStateChanges(BindableObject b, bool value);
    public static bool GetAnimateStateChanges(BindableObject b);
    private static void OnCurrentStateChanged(BindableObject bindable, LayoutState oldValue, LayoutState newValue);
    private static void OnCurrentCustomStateKeyChanged(BindableObject bindable, string oldValue, string newValue);
    private static object LayoutControllerCreator(BindableObject bindable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.StateLayoutController : object {
    private WeakReference`1<Layout`1<View>> layoutWeakReference;
    private bool layoutIsGrid;
    private LayoutState previousState;
    private IList`1<View> originalContent;
    [NullableAttribute("2")]
private CancellationTokenSource animationTokenSource;
    [CompilerGeneratedAttribute]
private IList`1<StateView> <StateViews>k__BackingField;
    public IList`1<StateView> StateViews { get; public set; }
    public StateLayoutController(Layout`1<View> layout);
    [CompilerGeneratedAttribute]
public IList`1<StateView> get_StateViews();
    [CompilerGeneratedAttribute]
public void set_StateViews(IList`1<StateView> value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.StateLayoutController/<SwitchToContent>d__10")]
public void SwitchToContent(bool animate);
    public void SwitchToTemplate(string customState, bool animate);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.StateLayoutController/<SwitchToTemplate>d__12")]
public void SwitchToTemplate(LayoutState state, string customState, bool animate);
    private StateView GetViewForState(LayoutState state, string customState);
    [NullableContextAttribute("2")]
private int GetRepeatCount(LayoutState state, string customState);
    [NullableContextAttribute("2")]
private DataTemplate GetTemplate(LayoutState state, string customState);
    private View CreateItemView(LayoutState state, string customState);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.StateLayoutController/<ChildrenFadeTo>d__17")]
private Task ChildrenFadeTo(Layout`1<View> layout, bool animate, bool isHide);
    private CancellationToken RebuildAnimationTokenSource(Layout`1<View> layout);
}
internal class Xamarin.CommunityToolkit.UI.Views.StateRequested : EventArgs {
    [CompilerGeneratedAttribute]
private MediaElementState <State>k__BackingField;
    public MediaElementState State { get; }
    public StateRequested(MediaElementState state);
    [CompilerGeneratedAttribute]
public MediaElementState get_State();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xamarin.CommunityToolkit.UI.Views.StateView : ContentView {
    [NullableAttribute("1")]
public static BindableProperty StateKeyProperty;
    [NullableAttribute("1")]
public static BindableProperty CustomStateKeyProperty;
    [NullableAttribute("1")]
public static BindableProperty RepeatCountProperty;
    [NullableAttribute("1")]
public static BindableProperty TemplateProperty;
    public LayoutState StateKey { get; public set; }
    public string CustomStateKey { get; public set; }
    public int RepeatCount { get; public set; }
    public DataTemplate Template { get; public set; }
    private static StateView();
    public LayoutState get_StateKey();
    public void set_StateKey(LayoutState value);
    public string get_CustomStateKey();
    public void set_CustomStateKey(string value);
    public int get_RepeatCount();
    public void set_RepeatCount(int value);
    public DataTemplate get_Template();
    public void set_Template(DataTemplate value);
}
public class Xamarin.CommunityToolkit.UI.Views.TabBadgeAnimation : object {
    [CompilerGeneratedAttribute]
private UInt32 <AnimationLength>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    private Nullable`1<double> translationY;
    protected UInt32 AnimationLength { get; }
    protected UInt32 Offset { get; }
    [CompilerGeneratedAttribute]
protected UInt32 get_AnimationLength();
    [CompilerGeneratedAttribute]
protected UInt32 get_Offset();
    [NullableContextAttribute("1")]
public sealed virtual Task OnAppearing(TabBadgeView badgeView);
    [NullableContextAttribute("1")]
public sealed virtual Task OnDisappering(TabBadgeView badgeView);
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.UI.Views.TabBadgeTemplate : Grid {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PreserveAttribute]
public class Xamarin.CommunityToolkit.UI.Views.TabBadgeView : TemplatedView {
    internal static string ElementBorder;
    internal static string ElementText;
    [NullableAttribute("2")]
private Frame badgeBorder;
    [NullableAttribute("2")]
private Label badgeText;
    private bool isVisible;
    public static BindableProperty PlacementTargetProperty;
    public static BindableProperty AutoHideProperty;
    public static BindableProperty IsAnimatedProperty;
    public static BindableProperty BadgeAnimationProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TextProperty;
    [NullableAttribute("2")]
public View PlacementTarget { get; public set; }
    public bool AutoHide { get; public set; }
    public bool IsAnimated { get; public set; }
    [NullableAttribute("2")]
public IBadgeAnimation BadgeAnimation { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color BorderColor { get; public set; }
    public Color TextColor { get; public set; }
    public string Text { get; public set; }
    private static TabBadgeView();
    [NullableContextAttribute("2")]
public View get_PlacementTarget();
    [NullableContextAttribute("2")]
public void set_PlacementTarget(View value);
    public bool get_AutoHide();
    public void set_AutoHide(bool value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabBadgeView/<OnAutoHideChanged>d__14")]
private static void OnAutoHideChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsAnimated();
    public void set_IsAnimated(bool value);
    [NullableContextAttribute("2")]
public IBadgeAnimation get_BadgeAnimation();
    [NullableContextAttribute("2")]
public void set_BadgeAnimation(IBadgeAnimation value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    private static void OnBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    private static void OnBorderColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    private static void OnTextColorChanged(BindableObject bindable, object oldValue, object newValue);
    public string get_Text();
    public void set_Text(string value);
    private static void OnTextChanged(BindableObject bindable, object oldValue, object newValue);
    protected virtual void OnApplyTemplate();
    protected virtual void OnPropertyChanged(string propertyName);
    private void UpdateIsEnabled(Label& badgeText);
    private void OnBadgeTextPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateSize();
    private void UpdatePosition(Frame badgeBorder);
    private void UpdateBackgroundColor(Color backgroundColor);
    private void UpdateBorderColor(Color borderColor);
    private void UpdateTextColor(Color textColor);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabBadgeView/<UpdateText>d__52")]
private void UpdateText(string text);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabBadgeView/<UpdateVisibilityAsync>d__53")]
private Task UpdateVisibilityAsync();
}
public enum Xamarin.CommunityToolkit.UI.Views.TabIndicatorPlacement : Enum {
    public int value__;
    public static TabIndicatorPlacement Top;
    public static TabIndicatorPlacement Center;
    public static TabIndicatorPlacement Bottom;
}
public class Xamarin.CommunityToolkit.UI.Views.TabSelectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <NewPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldPosition>k__BackingField;
    public int NewPosition { get; public set; }
    public int OldPosition { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NewPosition();
    [CompilerGeneratedAttribute]
public void set_NewPosition(int value);
    [CompilerGeneratedAttribute]
public int get_OldPosition();
    [CompilerGeneratedAttribute]
public void set_OldPosition(int value);
}
public enum Xamarin.CommunityToolkit.UI.Views.TabStripPlacement : Enum {
    public int value__;
    public static TabStripPlacement Top;
    public static TabStripPlacement Bottom;
}
public class Xamarin.CommunityToolkit.UI.Views.TabTappedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    public TabTappedEventArgs(int position);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PreserveAttribute]
[ContentPropertyAttribute("TabItems")]
public class Xamarin.CommunityToolkit.UI.Views.TabView : ContentView {
    private static UInt32 tabIndicatorAnimationDuration;
    private Grid mainContainer;
    private Grid tabStripContainer;
    private Grid tabStripBackground;
    private BoxView tabStripBorder;
    private ScrollView tabStripContainerScroll;
    private Grid tabStripIndicator;
    private Grid tabStripContent;
    private Grid tabStripContentContainer;
    private CarouselView contentContainer;
    private List`1<double> contentWidthCollection;
    [NullableAttribute("2")]
private IList tabItemsSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObservableCollection`1<TabViewItem> contentTabItems;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<TabViewItem> <TabItems>k__BackingField;
    public static BindableProperty TabItemsSourceProperty;
    public static BindableProperty TabViewItemDataTemplateProperty;
    public static BindableProperty TabContentDataTemplateProperty;
    public static BindableProperty SelectedIndexProperty;
    public static BindableProperty TabStripPlacementProperty;
    public static BindableProperty TabStripBackgroundColorProperty;
    public static BindableProperty TabStripBackgroundViewProperty;
    public static BindableProperty TabStripBorderColorProperty;
    public static BindableProperty TabContentBackgroundColorProperty;
    public static BindableProperty TabStripHeightProperty;
    public static BindableProperty IsTabStripVisibleProperty;
    public static BindableProperty TabContentHeightProperty;
    public static BindableProperty TabIndicatorColorProperty;
    public static BindableProperty TabIndicatorHeightProperty;
    public static BindableProperty TabIndicatorWidthProperty;
    public static BindableProperty TabIndicatorViewProperty;
    public static BindableProperty TabIndicatorPlacementProperty;
    public static BindableProperty IsTabTransitionEnabledProperty;
    public static BindableProperty IsSwipeEnabledProperty;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TabSelectionChangedEventHandler SelectionChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TabViewScrolledEventHandler Scrolled;
    public ObservableCollection`1<TabViewItem> TabItems { get; public set; }
    [NullableAttribute("2")]
public IList TabItemsSource { get; public set; }
    [NullableAttribute("2")]
public DataTemplate TabViewItemDataTemplate { get; public set; }
    [NullableAttribute("2")]
public DataTemplate TabContentDataTemplate { get; public set; }
    public int SelectedIndex { get; public set; }
    public TabStripPlacement TabStripPlacement { get; public set; }
    public Color TabStripBackgroundColor { get; public set; }
    [NullableAttribute("2")]
public View TabStripBackgroundView { get; public set; }
    public Color TabStripBorderColor { get; public set; }
    public Color TabContentBackgroundColor { get; public set; }
    public double TabStripHeight { get; public set; }
    public bool IsTabStripVisible { get; public set; }
    public double TabContentHeight { get; public set; }
    public Color TabIndicatorColor { get; public set; }
    public double TabIndicatorHeight { get; public set; }
    public double TabIndicatorWidth { get; public set; }
    [NullableAttribute("2")]
public View TabIndicatorView { get; public set; }
    public TabIndicatorPlacement TabIndicatorPlacement { get; public set; }
    public bool IsTabTransitionEnabled { get; public set; }
    public bool IsSwipeEnabled { get; public set; }
    private static TabView();
    private void DisableLoop();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<TabViewItem> get_TabItems();
    [CompilerGeneratedAttribute]
public void set_TabItems(ObservableCollection`1<TabViewItem> value);
    [NullableContextAttribute("2")]
public IList get_TabItemsSource();
    [NullableContextAttribute("2")]
public void set_TabItemsSource(IList value);
    private static void OnTabItemsSourceChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public DataTemplate get_TabViewItemDataTemplate();
    [NullableContextAttribute("2")]
public void set_TabViewItemDataTemplate(DataTemplate value);
    [NullableContextAttribute("2")]
public DataTemplate get_TabContentDataTemplate();
    [NullableContextAttribute("2")]
public void set_TabContentDataTemplate(DataTemplate value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    private static void OnSelectedIndexChanged(BindableObject bindable, object oldValue, object newValue);
    public TabStripPlacement get_TabStripPlacement();
    public void set_TabStripPlacement(TabStripPlacement value);
    private static void OnTabStripPlacementChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabStripBackgroundColor();
    public void set_TabStripBackgroundColor(Color value);
    private static void OnTabStripBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public View get_TabStripBackgroundView();
    [NullableContextAttribute("2")]
public void set_TabStripBackgroundView(View value);
    private static void OnTabStripBackgroundViewChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabStripBorderColor();
    public void set_TabStripBorderColor(Color value);
    private static void OnTabStripBorderColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabContentBackgroundColor();
    public void set_TabContentBackgroundColor(Color value);
    private static void OnTabContentBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabStripHeight();
    public void set_TabStripHeight(double value);
    private static void OnTabStripHeightChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsTabStripVisible();
    public void set_IsTabStripVisible(bool value);
    private static void OnIsTabStripVisibleChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabContentHeight();
    public void set_TabContentHeight(double value);
    private static void OnTabContentHeightChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabIndicatorColor();
    public void set_TabIndicatorColor(Color value);
    private static void OnTabIndicatorColorChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabIndicatorHeight();
    public void set_TabIndicatorHeight(double value);
    private static void OnTabIndicatorHeightChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabIndicatorWidth();
    public void set_TabIndicatorWidth(double value);
    private static void OnTabIndicatorWidthChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public View get_TabIndicatorView();
    [NullableContextAttribute("2")]
public void set_TabIndicatorView(View value);
    private static void OnTabIndicatorViewChanged(BindableObject bindable, object oldValue, object newValue);
    public TabIndicatorPlacement get_TabIndicatorPlacement();
    public void set_TabIndicatorPlacement(TabIndicatorPlacement value);
    private static void OnTabIndicatorPlacementChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsTabTransitionEnabled();
    public void set_IsTabTransitionEnabled(bool value);
    private static void OnIsTabTransitionEnabledChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsSwipeEnabled();
    public void set_IsSwipeEnabled(bool value);
    private static void OnIsSwipeEnabledChanged(BindableObject bindable, object oldValue, object newValue);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_SelectionChanged(TabSelectionChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_SelectionChanged(TabSelectionChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Scrolled(TabViewScrolledEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Scrolled(TabViewScrolledEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnBindingContextChanged();
    private void OnTabViewItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTabItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnContentContainerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnContentContainerScrolled(object sender, ItemsViewScrolledEventArgs args);
    private void ClearTabStrip();
    private void ClearTabViewItem(TabViewItem tabViewItem);
    private void AddTabViewItem(TabViewItem tabViewItem, int index);
    private void UpdateTabStripSize();
    private void UpdateTabContentSize();
    [NullableContextAttribute("2")]
private void AddTabViewItemFromTemplate(object item, int index);
    private void UpdateTabViewItemBindingContext(TabViewItem tabViewItem);
    private void AddSelectionTapRecognizer(View view);
    private void AddTabViewItemToTabStrip(View item, int index);
    [NullableContextAttribute("2")]
private void AddTabViewItemFromTemplateToTabStrip(object item, int index);
    private void UpdateIsEnabled();
    [NullableContextAttribute("2")]
private void UpdateTabViewItemTabWidth(TabViewItem tabViewItem);
    private void UpdateTabItemsSource();
    private void OnTabItemsSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateItemsSource(IEnumerable items);
    private bool CanUpdateSelectedIndex(int selectedIndex);
    private void UpdateSelectedIndex(int position, bool hasCurrentItem);
    private void OnCurrentTabItemSizeChanged(object sender, EventArgs e);
    private void UpdateTabStripPlacement(TabStripPlacement tabStripPlacement);
    private void UpdateTabContentLayout();
    private void UpdateTabStripBackgroundColor(Color tabStripBackgroundColor);
    private void UpdateTabStripBackgroundView(View tabStripBackgroundView);
    private void UpdateTabStripBorderColor(Color tabStripBorderColor);
    private void UpdateTabIndicatorMargin();
    private void UpdateTabContentBackgroundColor(Color tabContentBackgroundColor);
    private void UpdateTabStripHeight(double tabStripHeight);
    private void UpdateIsTabStripVisible(bool isTabStripVisible);
    private void UpdateTabContentHeight(double tabContentHeight);
    private void UpdateTabIndicatorColor(Color tabIndicatorColor);
    private void UpdateTabIndicatorHeight(double tabIndicatorHeight);
    private void UpdateTabIndicatorWidth(double tabIndicatorWidth);
    private void UpdateTabIndicatorView(View tabIndicatorView);
    private void UpdateTabIndicatorPlacement(TabIndicatorPlacement tabIndicatorPlacement);
    private void UpdateIsSwipeEnabled(bool isSwipeEnabled);
    private void UpdateIsTabTransitionEnabled(bool isTabTransitionEnabled);
    private void UpdateTabIndicatorPosition(int tabViewItemIndex);
    private void UpdateTabIndicatorPosition(ItemsViewScrolledEventArgs args);
    private void UpdateTabIndicatorPosition(View currentTabViewItem);
    internal virtual void OnTabSelectionChanged(TabSelectionChangedEventArgs e);
    internal virtual void OnTabViewScrolled(ItemsViewScrolledEventArgs e);
    [CompilerGeneratedAttribute]
private void <AddSelectionTapRecognizer>b__134_0(object sender, EventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PreserveAttribute]
[ContentPropertyAttribute("Content")]
public class Xamarin.CommunityToolkit.UI.Views.TabViewItem : TemplatedView {
    public static string SelectedVisualState;
    public static string UnselectedVisualState;
    private bool isOnScreen;
    public static BindableProperty TextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TextColorSelectedProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontSizeSelectedProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontFamilySelectedProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty FontAttributesSelectedProperty;
    public static BindableProperty ContentProperty;
    public static BindableProperty IconProperty;
    public static BindableProperty IconSelectedProperty;
    public static BindableProperty IsSelectedProperty;
    public static BindableProperty BadgeTextProperty;
    public static BindableProperty TabWidthProperty;
    public static BindableProperty TabAnimationProperty;
    public static BindableProperty BadgeTextColorProperty;
    public static BindableProperty BadgeBackgroundColorProperty;
    public static BindableProperty BadgeBackgroundColorSelectedProperty;
    public static BindableProperty BadgeBorderColorProperty;
    public static BindableProperty BadgeBorderColorSelectedProperty;
    public static BindableProperty TapCommandProperty;
    internal static BindablePropertyKey CurrentTextColorPropertyKey;
    public static BindableProperty CurrentTextColorProperty;
    internal static BindablePropertyKey CurrentFontSizePropertyKey;
    public static BindableProperty CurrentFontSizeProperty;
    internal static BindablePropertyKey CurrentIconPropertyKey;
    public static BindableProperty CurrentIconProperty;
    internal static BindablePropertyKey CurrentFontFamilyPropertyKey;
    public static BindableProperty CurrentFontFamilyProperty;
    internal static BindablePropertyKey CurrentFontAttributesPropertyKey;
    public static BindableProperty CurrentFontAttributesProperty;
    internal static BindablePropertyKey CurrentBadgeBackgroundColorPropertyKey;
    public static BindableProperty CurrentBadgeBackgroundColorProperty;
    internal static BindablePropertyKey CurrentBadgeBorderColorPropertyKey;
    public static BindableProperty CurrentBadgeBorderColorProperty;
    internal static BindablePropertyKey CurrentContentPropertyKey;
    public static BindableProperty CurrentContentProperty;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TabTappedEventHandler TabTapped;
    [NullableAttribute("2")]
public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextColorSelected { get; public set; }
    public double FontSize { get; public set; }
    public double FontSizeSelected { get; public set; }
    public string FontFamily { get; public set; }
    public string FontFamilySelected { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public FontAttributes FontAttributesSelected { get; public set; }
    [NullableAttribute("2")]
public View Content { get; public set; }
    [NullableAttribute("2")]
public ImageSource Icon { get; public set; }
    [NullableAttribute("2")]
public ImageSource IconSelected { get; public set; }
    public bool IsSelected { get; public set; }
    public double TabWidth { get; public set; }
    [NullableAttribute("2")]
public ITabViewItemAnimation TabAnimation { get; public set; }
    public string BadgeText { get; public set; }
    public Color BadgeTextColor { get; public set; }
    public Color BadgeBackgroundColor { get; public set; }
    public Color BadgeBackgroundColorSelected { get; public set; }
    public Color BadgeBorderColor { get; public set; }
    public Color BadgeBorderColorSelected { get; public set; }
    public ICommand TapCommand { get; public set; }
    public Color CurrentTextColor { get; private set; }
    public double CurrentFontSize { get; private set; }
    [NullableAttribute("2")]
public ImageSource CurrentIcon { get; private set; }
    public string CurrentFontFamily { get; private set; }
    public FontAttributes CurrentFontAttributes { get; private set; }
    public Color CurrentBadgeBackgroundColor { get; private set; }
    public Color CurrentBadgeBorderColor { get; private set; }
    [NullableAttribute("2")]
public View CurrentContent { get; private set; }
    private static TabViewItem();
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Color get_TextColorSelected();
    public void set_TextColorSelected(Color value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public double get_FontSizeSelected();
    public void set_FontSizeSelected(double value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_FontFamilySelected();
    public void set_FontFamilySelected(string value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public FontAttributes get_FontAttributesSelected();
    public void set_FontAttributesSelected(FontAttributes value);
    [NullableContextAttribute("2")]
public View get_Content();
    [NullableContextAttribute("2")]
public void set_Content(View value);
    [NullableContextAttribute("2")]
public ImageSource get_Icon();
    [NullableContextAttribute("2")]
public void set_Icon(ImageSource value);
    [NullableContextAttribute("2")]
public ImageSource get_IconSelected();
    [NullableContextAttribute("2")]
public void set_IconSelected(ImageSource value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabViewItem/<OnIsSelectedChanged>d__55")]
private static void OnIsSelectedChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabWidth();
    public void set_TabWidth(double value);
    [NullableContextAttribute("2")]
public ITabViewItemAnimation get_TabAnimation();
    [NullableContextAttribute("2")]
public void set_TabAnimation(ITabViewItemAnimation value);
    public string get_BadgeText();
    public void set_BadgeText(string value);
    public Color get_BadgeTextColor();
    public void set_BadgeTextColor(Color value);
    public Color get_BadgeBackgroundColor();
    public void set_BadgeBackgroundColor(Color value);
    public Color get_BadgeBackgroundColorSelected();
    public void set_BadgeBackgroundColorSelected(Color value);
    public Color get_BadgeBorderColor();
    public void set_BadgeBorderColor(Color value);
    public Color get_BadgeBorderColorSelected();
    public void set_BadgeBorderColorSelected(Color value);
    public ICommand get_TapCommand();
    public void set_TapCommand(ICommand value);
    private static void OnTabViewItemPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_CurrentTextColor();
    private void set_CurrentTextColor(Color value);
    public double get_CurrentFontSize();
    private void set_CurrentFontSize(double value);
    [NullableContextAttribute("2")]
public ImageSource get_CurrentIcon();
    [NullableContextAttribute("2")]
private void set_CurrentIcon(ImageSource value);
    public string get_CurrentFontFamily();
    private void set_CurrentFontFamily(string value);
    public FontAttributes get_CurrentFontAttributes();
    private void set_CurrentFontAttributes(FontAttributes value);
    public Color get_CurrentBadgeBackgroundColor();
    private void set_CurrentBadgeBackgroundColor(Color value);
    public Color get_CurrentBadgeBorderColor();
    private void set_CurrentBadgeBorderColor(Color value);
    [NullableContextAttribute("2")]
public View get_CurrentContent();
    [NullableContextAttribute("2")]
private void set_CurrentContent(View value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_TabTapped(TabTappedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_TabTapped(TabTappedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    internal virtual void OnTabTapped(TabTappedEventArgs e);
    internal void UpdateCurrentContent(bool isOnScreen);
    private void UpdateCurrent();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabViewItem/<UpdateTabAnimationAsync>d__141")]
private Task UpdateTabAnimationAsync();
    private void ApplyIsSelectedState();
}
public class Xamarin.CommunityToolkit.UI.Views.TextSwitcher : Label {
    [NullableAttribute("1")]
public static BindableProperty TransitionDurationProperty;
    [NullableAttribute("1")]
public static BindableProperty TransitionTypeProperty;
    public UInt32 TransitionDuration { get; public set; }
    public TransitionType TransitionType { get; public set; }
    private static TextSwitcher();
    public sealed virtual UInt32 get_TransitionDuration();
    public sealed virtual void set_TransitionDuration(UInt32 value);
    public sealed virtual TransitionType get_TransitionType();
    public sealed virtual void set_TransitionType(TransitionType value);
}
internal class Xamarin.CommunityToolkit.UI.Views.ThumbFrame : Frame {
}
internal class Xamarin.CommunityToolkit.UI.Views.TimeShiftItem : ValueType {
    [CompilerGeneratedAttribute]
private DateTime <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Shift>k__BackingField;
    public DateTime Time { get; public set; }
    public double Shift { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTime get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(DateTime value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Shift();
    [CompilerGeneratedAttribute]
public void set_Shift(double value);
}
public enum Xamarin.CommunityToolkit.UI.Views.TransitionType : Enum {
    public int value__;
    public static TransitionType Fade;
    public static TransitionType MoveInFromLeft;
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.UI.Views.UniformGrid : Layout`1<View> {
    private double childWidth;
    private double childHeight;
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    private int GetColumnsCount(int visibleChildrenCount, double widthConstraint, double maxChildWidth);
    private int GetRowsCount(int visibleChildrenCount, int columnsCount);
}
[TypeConversionAttribute("System.Uri")]
public class Xamarin.CommunityToolkit.UI.Views.UriTypeConverter : TypeConverter {
    [NullableContextAttribute("2")]
public virtual object ConvertFromInvariantString(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xamarin.CommunityToolkit.UI.Views.ViewSwitcher : object {
    internal static BindableProperty TransitionDurationProperty;
    internal static BindableProperty TransitionTypeProperty;
    private static ViewSwitcher();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PreserveAttribute]
internal class Xamarin.CommunityToolkit.UI.Views.WindowsTabViewItemTemplate : Grid {
    private Image icon;
    private Label text;
    private TabBadgeView badge;
    protected virtual void OnParentSet();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
    private void UpdateBadgePosition();
}
internal class Xamarin.CommunityToolkit.Views.Snackbar.Helpers.NativeRoundedStackView : NSStackView {
    [CompilerGeneratedAttribute]
private nfloat <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <Bottom>k__BackingField;
    public nfloat Left { get; }
    public nfloat Top { get; }
    public nfloat Right { get; }
    public nfloat Bottom { get; }
    public NativeRoundedStackView(nfloat left, nfloat top, nfloat right, nfloat bottom);
    [CompilerGeneratedAttribute]
public nfloat get_Left();
    [CompilerGeneratedAttribute]
public nfloat get_Top();
    [CompilerGeneratedAttribute]
public nfloat get_Right();
    [CompilerGeneratedAttribute]
public nfloat get_Bottom();
    public virtual void DrawRect(CGRect rect);
    [NullableContextAttribute("2")]
private CGPath GetRoundedPath(CGRect rect, nfloat left, nfloat top, nfloat right, nfloat bottom);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.CommunityToolkit.Views.Snackbar.Helpers.NativeSnackButton : NSButton {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<Task> <SnackButtonAction>k__BackingField;
    public CGSize IntrinsicContentSize { get; }
    public double Left { get; }
    public double Top { get; }
    public double Right { get; }
    public double Bottom { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task> SnackButtonAction { get; protected set; }
    public NativeSnackButton(double left, double top, double right, double bottom);
    public virtual CGSize get_IntrinsicContentSize();
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
public double get_Right();
    [CompilerGeneratedAttribute]
public double get_Bottom();
    [CompilerGeneratedAttribute]
public Func`1<Task> get_SnackButtonAction();
    [CompilerGeneratedAttribute]
protected void set_SnackButtonAction(Func`1<Task> value);
    public NativeSnackButton SetAction(Func`1<Task> action);
    public NativeSnackButton SetActionButtonText(string title);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Views.Snackbar.Helpers.NativeSnackButton/<<-ctor>b__0_0>d")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object s, EventArgs e);
}
