public class FFImageLoading.Cache.ImageCache : object {
    private NSCache _cache;
    private static IMemoryCache`1<NSImage> _instance;
    private ConcurrentDictionary`2<string, ImageInformation> _imageInformations;
    private IMiniLogger _logger;
    private object _lock;
    public static IMemoryCache`1<NSImage> Instance { get; }
    public ImageCache(int maxCacheSize, IMiniLogger logger);
    public static IMemoryCache`1<NSImage> get_Instance();
    public sealed virtual ImageInformation GetInfo(string key);
    public sealed virtual Tuple`2<NSImage, ImageInformation> Get(string key);
    public sealed virtual void Add(string key, ImageInformation imageInformation, NSImage value);
    public sealed virtual void Remove(string key);
    private void Remove(string key, bool log);
    public sealed virtual void RemoveSimilar(string baseKey);
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(NSNotification notif);
}
public class FFImageLoading.Cache.SimpleDiskCache : object {
    private static int BufferSize;
    private string _cachePath;
    private ConcurrentDictionary`2<string, byte> _fileWritePendingTasks;
    private SemaphoreSlim _currentWriteLock;
    private Task _currentWrite;
    private ConcurrentDictionary`2<string, CacheEntry> _entries;
    [CompilerGeneratedAttribute]
private Configuration <Configuration>k__BackingField;
    protected Configuration Configuration { get; private set; }
    protected IMiniLogger Logger { get; }
    public SimpleDiskCache(string cachePath, Configuration configuration);
    [CompilerGeneratedAttribute]
protected Configuration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(Configuration value);
    protected IMiniLogger get_Logger();
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<AddToSavingQueueIfNotExistsAsync>d__13")]
public virtual Task AddToSavingQueueIfNotExistsAsync(string key, Byte[] bytes, TimeSpan duration, Action writeFinished);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<RemoveAsync>d__14")]
public virtual Task RemoveAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<ClearAsync>d__15")]
public virtual Task ClearAsync();
    public virtual Task`1<bool> ExistsAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<TryGetStreamAsync>d__17")]
public virtual Task`1<Stream> TryGetStreamAsync(string key);
    public virtual Task`1<string> GetFilePathAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<WaitForPendingWriteIfExists>d__19")]
protected Task WaitForPendingWriteIfExists(string key);
    protected void InitializeEntries();
    protected TimeSpan GetDuration(string text);
    protected virtual void CleanCallback(object state);
}
[ExtensionAttribute]
public static class FFImageLoading.ColorExtensions : object {
    [ExtensionAttribute]
public static NSColor ToUIColor(string hexColor);
}
public class FFImageLoading.DataResolvers.BundleDataResolver : object {
    private String[] _fileTypes;
    [AsyncStateMachineAttribute("FFImageLoading.DataResolvers.BundleDataResolver/<Resolve>d__1")]
public virtual Task`1<DataResolverResult> Resolve(string identifier, TaskParameter parameters, CancellationToken token);
    private Task`1<DataResolverResult> ResolveFromBundlesAsync(string fileName, string identifier, TaskParameter parameters, CancellationToken token);
    [AsyncStateMachineAttribute("FFImageLoading.DataResolvers.BundleDataResolver/<ResolveFromAssetCatalogAsync>d__3")]
private Task`1<DataResolverResult> ResolveFromAssetCatalogAsync(string fileName, string identifier, TaskParameter parameters, CancellationToken token);
    [AsyncStateMachineAttribute("FFImageLoading.DataResolvers.BundleDataResolver/<ResolveFromNamedResourceAsync>d__4")]
private Task`1<DataResolverResult> ResolveFromNamedResourceAsync(string fileName, string identifier, TaskParameter parameters, CancellationToken token);
}
public class FFImageLoading.DataResolvers.DataResolverFactory : object {
    public virtual IDataResolver GetResolver(string identifier, ImageSource source, TaskParameter parameters, Configuration configuration);
}
public class FFImageLoading.DataResolvers.FileDataResolver : object {
    public virtual Task`1<DataResolverResult> Resolve(string identifier, TaskParameter parameters, CancellationToken token);
}
public class FFImageLoading.Decoders.BaseDecoder : GifDecoder {
}
public class FFImageLoading.Decoders.GifDecoder : object {
    private static SemaphoreSlim _gifLock;
    public Configuration Configuration { get; }
    public IMiniLogger Logger { get; }
    private static GifDecoder();
    [AsyncStateMachineAttribute("FFImageLoading.Decoders.GifDecoder/<DecodeAsync>d__1")]
public sealed virtual Task`1<IDecodedImage`1<NSImage>> DecodeAsync(Stream stream, string path, ImageSource source, ImageInformation imageInformation, TaskParameter parameters);
    [AsyncStateMachineAttribute("FFImageLoading.Decoders.GifDecoder/<SourceRegfToDecodedImageAsync>d__2")]
public static Task`1<IDecodedImage`1<NSImage>> SourceRegfToDecodedImageAsync(NSData nsdata, CGSize destSize, nfloat destScale, Configuration config, TaskParameter parameters, RCTResizeMode resizeMode, ImageInformation imageinformation, bool allowUpscale);
    public Configuration get_Configuration();
    public IMiniLogger get_Logger();
    private static List`1<int> GetDelays(CGImageSource source);
    private static CGSize RCTTargetSize(CGSize sourceSize, nfloat sourceScale, CGSize destSize, nfloat destScale, RCTResizeMode resizeMode, bool allowUpscaling);
    private static CGSize RCTSizeInPixels(CGSize pointSize, nfloat scale);
    private static CGSize RCTCeilSize(CGSize size, nfloat scale);
    private static nfloat RCTCeilValue(nfloat value, nfloat scale);
    private static nfloat RCTFloorValue(nfloat value, nfloat scale);
    private static CGRect RCTTargetRect(CGSize sourceSize, CGSize destSize, nfloat destScale, RCTResizeMode resizeMode);
}
public class FFImageLoading.Decoders.WebPDecoder : object {
    private WebPCodec _decoder;
    public Configuration Configuration { get; }
    public IMiniLogger Logger { get; }
    public sealed virtual Task`1<IDecodedImage`1<NSImage>> DecodeAsync(Stream stream, string path, ImageSource source, ImageInformation imageInformation, TaskParameter parameters);
    public Configuration get_Configuration();
    public IMiniLogger get_Logger();
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.NSDataExtensions : object {
    [AsyncStateMachineAttribute("FFImageLoading.Extensions.NSDataExtensions/<ToImageAsync>d__0")]
[ExtensionAttribute]
public static Task`1<NSImage> ToImageAsync(NSData data, CGSize destSize, nfloat destScale, Configuration config, TaskParameter parameters, RCTResizeMode resizeMode, ImageInformation imageinformation, bool allowUpscale);
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.PImageExtensions : object {
    [ExtensionAttribute]
public static nuint GetMemorySize(NSImage image);
    [ExtensionAttribute]
public static NSImage ResizeUIImage(NSImage image, double desiredWidth, double desiredHeight, InterpolationMode interpolationMode);
    [ExtensionAttribute]
public static Stream AsPngStream(NSImage image);
    [ExtensionAttribute]
public static Stream AsJpegStream(NSImage image, int quality);
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.UnitsExtensions : object {
    [ExtensionAttribute]
public static int DpToPixels(int dp);
    [ExtensionAttribute]
public static int DpToPixels(double dp);
    [ExtensionAttribute]
public static double PixelsToDp(int px);
    [ExtensionAttribute]
public static double PixelsToDp(double px);
}
public class FFImageLoading.Helpers.FFCALayer : CALayer {
}
public class FFImageLoading.Helpers.MainThreadDispatcher : object {
    public static void Post(Action action);
    public static T PostForResult(Func`1<T> action);
    public sealed virtual Task PostAsync(Action action);
    [AsyncStateMachineAttribute("FFImageLoading.Helpers.MainThreadDispatcher/<PostAsync>d__3")]
public sealed virtual Task PostAsync(Func`1<Task> action);
}
public class FFImageLoading.Helpers.MD5Helper : object {
    public sealed virtual string MD5(Stream stream);
    public sealed virtual string MD5(string input);
}
internal class FFImageLoading.Helpers.MiniLogger : object {
    public sealed virtual void Debug(string message);
    public sealed virtual void Error(string errorMessage);
    public sealed virtual void Error(string errorMessage, Exception ex);
}
public static class FFImageLoading.Helpers.ScaleHelper : object {
    private static Nullable`1<nfloat> _scale;
    public static nfloat Scale { get; }
    public static nfloat get_Scale();
    [AsyncStateMachineAttribute("FFImageLoading.Helpers.ScaleHelper/<InitAsync>d__3")]
public static Task InitAsync();
}
[PreserveAttribute]
public class FFImageLoading.ImageService : ImageServiceBase`1<NSImage> {
    private static ConditionalWeakTable`2<object, IImageLoaderTask> _viewsReferences;
    private static IImageService _instance;
    [CompilerGeneratedAttribute]
private static bool <EnableMockImageService>k__BackingField;
    public static IImageService Instance { get; }
    public static bool EnableMockImageService { get; public set; }
    protected IMemoryCache`1<NSImage> MemoryCache { get; }
    private static ImageService();
    public static IImageService get_Instance();
    [CompilerGeneratedAttribute]
public static bool get_EnableMockImageService();
    [CompilerGeneratedAttribute]
public static void set_EnableMockImageService(bool value);
    protected virtual IMemoryCache`1<NSImage> get_MemoryCache();
    protected virtual IMD5Helper CreatePlatformMD5HelperInstance(Configuration configuration);
    protected virtual IMiniLogger CreatePlatformLoggerInstance(Configuration configuration);
    protected virtual IPlatformPerformance CreatePlatformPerformanceInstance(Configuration configuration);
    protected virtual IMainThreadDispatcher CreateMainThreadDispatcherInstance(Configuration configuration);
    protected virtual IDataResolverFactory CreateDataResolverFactoryInstance(Configuration configuration);
    protected virtual IDiskCache CreatePlatformDiskCacheInstance(Configuration configuration);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters, ITarget`2<NSImage, TImageView> target);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters);
    protected virtual void SetTaskForTarget(IImageLoaderTask currentTask);
    public virtual void CancelWorkForView(object view);
    public virtual int DpToPixels(double dp);
    public virtual double PixelsToDp(double px);
}
internal static class FFImageLoading.IO.FileStore : object {
    private static int DefaultBufferSize;
    public static Stream GetInputStream(string path, bool asynchronous);
    public static Stream GetOutputStream(string path, bool asynchronous);
    public static bool Exists(string path);
    [AsyncStateMachineAttribute("FFImageLoading.IO.FileStore/<ReadBytesAsync>d__4")]
public static Task`1<Byte[]> ReadBytesAsync(string path, CancellationToken token);
    [AsyncStateMachineAttribute("FFImageLoading.IO.FileStore/<WriteBytesAsync>d__5")]
public static Task WriteBytesAsync(string path, Byte[] data, CancellationToken token);
}
public class FFImageLoading.PlatformPerformance : object {
    private static int KERN_SUCCESS;
    private static int MACH_TASK_BASIC_INFO;
    private IntPtr self;
    private mach_task_basic_info tbi;
    private int size;
    public sealed virtual int GetCurrentManagedThreadId();
    public sealed virtual int GetCurrentSystemThreadId();
    private static int task_info(IntPtr target_task, int flavor, mach_task_basic_info& task_info_out, Int32& task_info_outCnt);
    private Nullable`1<mach_task_basic_info> GetResidentSize();
    public sealed virtual string GetMemoryInfo();
}
public class FFImageLoading.Targets.NSImageTarget : Target`2<NSImage, NSImage> {
    private WeakReference`1<NSImage> _imageWeakReference;
    public NSImage PImage { get; }
    public virtual void Set(IImageLoaderTask task, NSImage image, bool animated);
    public NSImage get_PImage();
}
public class FFImageLoading.Targets.NSImageViewTarget : NSViewTarget`1<NSImageView> {
    public NSImageViewTarget(NSImageView control);
    public virtual void Set(IImageLoaderTask task, NSImage image, bool animated);
    private bool IsLayoutNeeded(IImageLoaderTask task);
    public virtual void SetAsEmpty(IImageLoaderTask task);
}
public class FFImageLoading.Targets.NSViewTarget`1 : Target`2<NSImage, TView> {
    protected WeakReference`1<TView> _controlWeakReference;
    public bool IsValid { get; }
    public TView Control { get; }
    protected NSViewTarget`1(TView control);
    public virtual bool get_IsValid();
    public virtual TView get_Control();
}
[ExtensionAttribute]
public static class FFImageLoading.TaskParameterExtensions : object {
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterExtensions/<InvalidateAsync>d__0")]
[ExtensionAttribute]
public static Task InvalidateAsync(TaskParameter parameters, CacheType cacheType);
    [ExtensionAttribute]
public static IImageLoaderTask Preload(TaskParameter parameters);
    [ExtensionAttribute]
public static Task PreloadAsync(TaskParameter parameters);
    [ExtensionAttribute]
public static IImageLoaderTask DownloadOnly(TaskParameter parameters);
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterExtensions/<DownloadOnlyAsync>d__4")]
[ExtensionAttribute]
public static Task DownloadOnlyAsync(TaskParameter parameters);
}
[ExtensionAttribute]
public static class FFImageLoading.TaskParameterPlatformExtensions : object {
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterPlatformExtensions/<AsPNGStreamAsync>d__0")]
[ExtensionAttribute]
public static Task`1<Stream> AsPNGStreamAsync(TaskParameter parameters);
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterPlatformExtensions/<AsJPGStreamAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Stream> AsJPGStreamAsync(TaskParameter parameters, int quality);
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, NSImageView imageView);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, NSImageView imageView);
    [ExtensionAttribute]
public static Task`1<NSImage> AsNSImageAsync(TaskParameter parameters);
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, ITarget`2<NSImage, TImageView> target);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, ITarget`2<NSImage, TImageView> target);
    [ExtensionAttribute]
private static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, Action`1<TaskParameter> into);
}
public abstract class FFImageLoading.Transformations.TransformationBase : object {
    public string Key { get; }
    public abstract virtual string get_Key();
    public sealed virtual IBitmap Transform(IBitmap bitmapHolder, string path, ImageSource source, bool isPlaceholder, string key);
    protected virtual NSImage Transform(NSImage sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
}
public class FFImageLoading.Work.BitmapHolder : object {
    [CompilerGeneratedAttribute]
private NSImage <NativeBitmap>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    internal NSImage NativeBitmap { get; private set; }
    public BitmapHolder(NSImage bitmap);
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
    [CompilerGeneratedAttribute]
internal NSImage get_NativeBitmap();
    [CompilerGeneratedAttribute]
private void set_NativeBitmap(NSImage value);
}
[ExtensionAttribute]
public static class FFImageLoading.Work.IBitmapExtensions : object {
    [ExtensionAttribute]
public static NSImage ToNative(IBitmap bitmap);
}
public class FFImageLoading.Work.PlatformImageLoaderTask`1 : ImageLoaderTask`3<NSImage, NSImage, TImageView> {
    private static IDecoder`1<NSImage> _webpDecoder;
    public PlatformImageLoaderTask`1(ITarget`2<NSImage, TImageView> target, TaskParameter parameters, IImageService imageService);
    private static PlatformImageLoaderTask`1();
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<Init>d__2")]
public virtual Task Init();
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<SetTargetAsync>d__3")]
protected virtual Task SetTargetAsync(NSImage image, bool animated);
    protected virtual int DpiToPixels(int size);
    protected virtual IDecoder`1<NSImage> ResolveDecoder(ImageType type);
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<TransformAsync>d__6")]
protected virtual Task`1<NSImage> TransformAsync(NSImage bitmap, IList`1<ITransformation> transformations, string path, ImageSource source, bool isPlaceholder);
    protected virtual Task`1<NSImage> GenerateImageFromDecoderContainerAsync(IDecodedImage`1<NSImage> decoded, ImageInformation imageInformation, bool isPlaceholder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
