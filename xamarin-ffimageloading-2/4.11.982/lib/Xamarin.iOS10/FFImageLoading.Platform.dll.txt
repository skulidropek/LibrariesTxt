public class FFImageLoading.Cache.ImageCache : object {
    private NSCache _cache;
    private static IMemoryCache`1<UIImage> _instance;
    private ConcurrentDictionary`2<string, ImageInformation> _imageInformations;
    private IMiniLogger _logger;
    private object _lock;
    public static IMemoryCache`1<UIImage> Instance { get; }
    public ImageCache(int maxCacheSize, IMiniLogger logger);
    public static IMemoryCache`1<UIImage> get_Instance();
    public sealed virtual ImageInformation GetInfo(string key);
    public sealed virtual Tuple`2<UIImage, ImageInformation> Get(string key);
    public sealed virtual void Add(string key, ImageInformation imageInformation, UIImage value);
    public sealed virtual void Remove(string key);
    private void Remove(string key, bool log);
    public sealed virtual void RemoveSimilar(string baseKey);
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(NSNotification notif);
}
public class FFImageLoading.Cache.SimpleDiskCache : object {
    private static int BufferSize;
    private string _cachePath;
    private ConcurrentDictionary`2<string, byte> _fileWritePendingTasks;
    private SemaphoreSlim _currentWriteLock;
    private Task _currentWrite;
    private ConcurrentDictionary`2<string, CacheEntry> _entries;
    [CompilerGeneratedAttribute]
private Configuration <Configuration>k__BackingField;
    protected Configuration Configuration { get; private set; }
    protected IMiniLogger Logger { get; }
    public SimpleDiskCache(string cachePath, Configuration configuration);
    [CompilerGeneratedAttribute]
protected Configuration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(Configuration value);
    protected IMiniLogger get_Logger();
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<AddToSavingQueueIfNotExistsAsync>d__13")]
public virtual Task AddToSavingQueueIfNotExistsAsync(string key, Byte[] bytes, TimeSpan duration, Action writeFinished);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<RemoveAsync>d__14")]
public virtual Task RemoveAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<ClearAsync>d__15")]
public virtual Task ClearAsync();
    public virtual Task`1<bool> ExistsAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<TryGetStreamAsync>d__17")]
public virtual Task`1<Stream> TryGetStreamAsync(string key);
    public virtual Task`1<string> GetFilePathAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<WaitForPendingWriteIfExists>d__19")]
protected Task WaitForPendingWriteIfExists(string key);
    protected void InitializeEntries();
    protected TimeSpan GetDuration(string text);
    protected virtual void CleanCallback(object state);
}
[ExtensionAttribute]
public static class FFImageLoading.ColorExtensions : object {
    [ExtensionAttribute]
public static UIColor ToUIColor(string hexColor);
}
[PreserveAttribute]
[RegisterAttribute("MvxCachedImageView")]
public class FFImageLoading.Cross.MvxCachedImageView : UIImageView {
    protected IScheduledWork _scheduledWork;
    protected ImageSourceBinding _lastImageSource;
    protected bool _isDisposed;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler IsLoadingChanged;
    private bool _isLoading;
    private int _retryCount;
    private int _retryDelay;
    private int _loadingDelay;
    private double _downsampleWidth;
    private double _downsampleHeight;
    private bool _downsampleUseDipUnits;
    private Nullable`1<TimeSpan> _cacheDuration;
    private LoadingPriority _loadingPriority;
    private Nullable`1<bool> _bitmapOptimizations;
    private Nullable`1<bool> _fadeAnimationEnabled;
    private Nullable`1<bool> _fadeAnimationForCachedImages;
    private Nullable`1<int> _fadeAnimationDuration;
    private Nullable`1<bool> _transformPlaceholders;
    private Nullable`1<CacheType> _cacheType;
    private List`1<ITransformation> _transformations;
    private Nullable`1<bool> _invalidateLayoutAfterLoaded;
    private IDataResolver _customDataResolver;
    private IDataResolver _customLoadingPlaceholderDataResolver;
    private IDataResolver _customErrorPlaceholderDataResolver;
    [CompilerGeneratedAttribute]
private EventHandler`1<SuccessEventArgs> OnSuccess;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> OnError;
    [CompilerGeneratedAttribute]
private EventHandler`1<FinishEventArgs> OnFinish;
    [CompilerGeneratedAttribute]
private EventHandler`1<DownloadStartedEventArgs> OnDownloadStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<DownloadProgressEventArgs> OnDownloadProgress;
    [CompilerGeneratedAttribute]
private EventHandler`1<FileWriteFinishedEventArgs> OnFileWriteFinished;
    private string _loadingPlaceholderPath;
    private string _errorPlaceholderPath;
    private string _imagePath;
    private string _customCacheKey;
    private Func`2<CancellationToken, Task`1<Stream>> _imageStream;
    public bool IsLoading { get; public set; }
    public int RetryCount { get; public set; }
    public int RetryDelay { get; public set; }
    public int LoadingDelay { get; public set; }
    public double DownsampleWidth { get; public set; }
    public double DownsampleHeight { get; public set; }
    public bool DownsampleUseDipUnits { get; public set; }
    public Nullable`1<TimeSpan> CacheDuration { get; public set; }
    public LoadingPriority LoadingPriority { get; public set; }
    public Nullable`1<bool> BitmapOptimizations { get; public set; }
    public Nullable`1<bool> FadeAnimationEnabled { get; public set; }
    public Nullable`1<bool> FadeAnimationForCachedImages { get; public set; }
    public Nullable`1<int> FadeAnimationDuration { get; public set; }
    public Nullable`1<bool> TransformPlaceholders { get; public set; }
    public Nullable`1<CacheType> CacheType { get; public set; }
    public List`1<ITransformation> Transformations { get; public set; }
    public Nullable`1<bool> InvalidateLayoutAfterLoaded { get; public set; }
    public IDataResolver CustomDataResolver { get; public set; }
    public IDataResolver CustomLoadingPlaceholderDataResolver { get; public set; }
    public IDataResolver CustomErrorPlaceholderDataResolver { get; public set; }
    public string LoadingPlaceholderImagePath { get; public set; }
    public string ErrorPlaceholderImagePath { get; public set; }
    public string ImagePath { get; public set; }
    public string CustomCacheKey { get; public set; }
    public Func`2<CancellationToken, Task`1<Stream>> ImageStream { get; public set; }
    public MvxCachedImageView(IntPtr handle);
    public MvxCachedImageView(CGRect frame);
    protected void Initialize();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public void add_IsLoadingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IsLoadingChanged(EventHandler value);
    public sealed virtual bool get_IsLoading();
    public void set_IsLoading(bool value);
    public sealed virtual int get_RetryCount();
    public sealed virtual void set_RetryCount(int value);
    public sealed virtual int get_RetryDelay();
    public sealed virtual void set_RetryDelay(int value);
    public sealed virtual int get_LoadingDelay();
    public sealed virtual void set_LoadingDelay(int value);
    public sealed virtual double get_DownsampleWidth();
    public sealed virtual void set_DownsampleWidth(double value);
    public sealed virtual double get_DownsampleHeight();
    public sealed virtual void set_DownsampleHeight(double value);
    public sealed virtual bool get_DownsampleUseDipUnits();
    public sealed virtual void set_DownsampleUseDipUnits(bool value);
    public sealed virtual Nullable`1<TimeSpan> get_CacheDuration();
    public sealed virtual void set_CacheDuration(Nullable`1<TimeSpan> value);
    public sealed virtual LoadingPriority get_LoadingPriority();
    public sealed virtual void set_LoadingPriority(LoadingPriority value);
    public sealed virtual Nullable`1<bool> get_BitmapOptimizations();
    public sealed virtual void set_BitmapOptimizations(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_FadeAnimationEnabled();
    public sealed virtual void set_FadeAnimationEnabled(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_FadeAnimationForCachedImages();
    public sealed virtual void set_FadeAnimationForCachedImages(Nullable`1<bool> value);
    public sealed virtual Nullable`1<int> get_FadeAnimationDuration();
    public sealed virtual void set_FadeAnimationDuration(Nullable`1<int> value);
    public sealed virtual Nullable`1<bool> get_TransformPlaceholders();
    public sealed virtual void set_TransformPlaceholders(Nullable`1<bool> value);
    public sealed virtual Nullable`1<CacheType> get_CacheType();
    public sealed virtual void set_CacheType(Nullable`1<CacheType> value);
    public sealed virtual List`1<ITransformation> get_Transformations();
    public sealed virtual void set_Transformations(List`1<ITransformation> value);
    public sealed virtual Nullable`1<bool> get_InvalidateLayoutAfterLoaded();
    public sealed virtual void set_InvalidateLayoutAfterLoaded(Nullable`1<bool> value);
    public sealed virtual IDataResolver get_CustomDataResolver();
    public sealed virtual void set_CustomDataResolver(IDataResolver value);
    public sealed virtual IDataResolver get_CustomLoadingPlaceholderDataResolver();
    public sealed virtual void set_CustomLoadingPlaceholderDataResolver(IDataResolver value);
    public sealed virtual IDataResolver get_CustomErrorPlaceholderDataResolver();
    public sealed virtual void set_CustomErrorPlaceholderDataResolver(IDataResolver value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnSuccess(EventHandler`1<SuccessEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnSuccess(EventHandler`1<SuccessEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnError(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnError(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnFinish(EventHandler`1<FinishEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnFinish(EventHandler`1<FinishEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnDownloadStarted(EventHandler`1<DownloadStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnDownloadStarted(EventHandler`1<DownloadStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnDownloadProgress(EventHandler`1<DownloadProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnDownloadProgress(EventHandler`1<DownloadProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnFileWriteFinished(EventHandler`1<FileWriteFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnFileWriteFinished(EventHandler`1<FileWriteFinishedEventArgs> value);
    public string get_LoadingPlaceholderImagePath();
    public void set_LoadingPlaceholderImagePath(string value);
    public string get_ErrorPlaceholderImagePath();
    public void set_ErrorPlaceholderImagePath(string value);
    public string get_ImagePath();
    public void set_ImagePath(string value);
    public string get_CustomCacheKey();
    public void set_CustomCacheKey(string value);
    public Func`2<CancellationToken, Task`1<Stream>> get_ImageStream();
    public void set_ImageStream(Func`2<CancellationToken, Task`1<Stream>> value);
    public void Cancel();
    public void Reload();
    protected virtual void UpdateImageLoadingTask();
    protected virtual void SetupOnBeforeImageLoading(TaskParameter imageLoader);
    protected virtual ImageSourceBinding GetImageSourceBinding(string imagePath, Func`2<CancellationToken, Task`1<Stream>> imageStream);
    protected virtual void Dispose(bool disposing);
}
public class FFImageLoading.DataResolvers.BundleDataResolver : object {
    private String[] _fileTypes;
    [AsyncStateMachineAttribute("FFImageLoading.DataResolvers.BundleDataResolver/<Resolve>d__1")]
public virtual Task`1<DataResolverResult> Resolve(string identifier, TaskParameter parameters, CancellationToken token);
    private Task`1<DataResolverResult> ResolveFromBundlesAsync(string fileName, string identifier, TaskParameter parameters, CancellationToken token);
    [AsyncStateMachineAttribute("FFImageLoading.DataResolvers.BundleDataResolver/<ResolveFromAssetCatalogAsync>d__3")]
private Task`1<DataResolverResult> ResolveFromAssetCatalogAsync(string fileName, string identifier, TaskParameter parameters, CancellationToken token);
    [AsyncStateMachineAttribute("FFImageLoading.DataResolvers.BundleDataResolver/<ResolveFromNamedResourceAsync>d__4")]
private Task`1<DataResolverResult> ResolveFromNamedResourceAsync(string fileName, string identifier, TaskParameter parameters, CancellationToken token);
}
public class FFImageLoading.DataResolvers.DataResolverFactory : object {
    public virtual IDataResolver GetResolver(string identifier, ImageSource source, TaskParameter parameters, Configuration configuration);
}
public class FFImageLoading.DataResolvers.FileDataResolver : object {
    public virtual Task`1<DataResolverResult> Resolve(string identifier, TaskParameter parameters, CancellationToken token);
}
public class FFImageLoading.Decoders.BaseDecoder : GifDecoder {
}
public class FFImageLoading.Decoders.GifDecoder : object {
    private static SemaphoreSlim _gifLock;
    public Configuration Configuration { get; }
    public IMiniLogger Logger { get; }
    private static GifDecoder();
    [AsyncStateMachineAttribute("FFImageLoading.Decoders.GifDecoder/<DecodeAsync>d__1")]
public sealed virtual Task`1<IDecodedImage`1<UIImage>> DecodeAsync(Stream stream, string path, ImageSource source, ImageInformation imageInformation, TaskParameter parameters);
    [AsyncStateMachineAttribute("FFImageLoading.Decoders.GifDecoder/<SourceRegfToDecodedImageAsync>d__2")]
public static Task`1<IDecodedImage`1<UIImage>> SourceRegfToDecodedImageAsync(NSData nsdata, CGSize destSize, nfloat destScale, Configuration config, TaskParameter parameters, RCTResizeMode resizeMode, ImageInformation imageinformation, bool allowUpscale);
    public Configuration get_Configuration();
    public IMiniLogger get_Logger();
    private static List`1<int> GetDelays(CGImageSource source);
    private static CGSize RCTTargetSize(CGSize sourceSize, nfloat sourceScale, CGSize destSize, nfloat destScale, RCTResizeMode resizeMode, bool allowUpscaling);
    private static CGSize RCTSizeInPixels(CGSize pointSize, nfloat scale);
    private static CGSize RCTCeilSize(CGSize size, nfloat scale);
    private static nfloat RCTCeilValue(nfloat value, nfloat scale);
    private static nfloat RCTFloorValue(nfloat value, nfloat scale);
    private static CGRect RCTTargetRect(CGSize sourceSize, CGSize destSize, nfloat destScale, RCTResizeMode resizeMode);
    private static CGImage[] GetFrames(CGImageSource source, CGImageThumbnailOptions options);
    private static UIImage[] AdjustFramesToSpoofDurations(CGImage[] images, nfloat scale, List`1<int> delays, int totalDuration);
    private static int GetGCD(List`1<int> delays);
    private static int PairGCD(int a, int b);
}
public class FFImageLoading.Decoders.WebPDecoder : object {
    private WebPCodec _decoder;
    public Configuration Configuration { get; }
    public IMiniLogger Logger { get; }
    public sealed virtual Task`1<IDecodedImage`1<UIImage>> DecodeAsync(Stream stream, string path, ImageSource source, ImageInformation imageInformation, TaskParameter parameters);
    public Configuration get_Configuration();
    public IMiniLogger get_Logger();
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.NSDataExtensions : object {
    [AsyncStateMachineAttribute("FFImageLoading.Extensions.NSDataExtensions/<ToImageAsync>d__0")]
[ExtensionAttribute]
public static Task`1<UIImage> ToImageAsync(NSData data, CGSize destSize, nfloat destScale, Configuration config, TaskParameter parameters, RCTResizeMode resizeMode, ImageInformation imageinformation, bool allowUpscale);
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.PImageExtensions : object {
    [ExtensionAttribute]
public static nuint GetMemorySize(UIImage image);
    [ExtensionAttribute]
public static UIImage ResizeUIImage(UIImage image, double desiredWidth, double desiredHeight, InterpolationMode interpolationMode);
    [ExtensionAttribute]
public static Stream AsPngStream(UIImage image);
    [ExtensionAttribute]
public static Stream AsJpegStream(UIImage image, int quality);
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.UnitsExtensions : object {
    [ExtensionAttribute]
public static int DpToPixels(int dp);
    [ExtensionAttribute]
public static int DpToPixels(double dp);
    [ExtensionAttribute]
public static double PixelsToDp(int px);
    [ExtensionAttribute]
public static double PixelsToDp(double px);
}
public class FFImageLoading.Helpers.MainThreadDispatcher : object {
    public static void Post(Action action);
    public static T PostForResult(Func`1<T> action);
    public sealed virtual Task PostAsync(Action action);
    [AsyncStateMachineAttribute("FFImageLoading.Helpers.MainThreadDispatcher/<PostAsync>d__3")]
public sealed virtual Task PostAsync(Func`1<Task> action);
}
public class FFImageLoading.Helpers.MD5Helper : object {
    public sealed virtual string MD5(Stream stream);
    public sealed virtual string MD5(string input);
}
internal class FFImageLoading.Helpers.MiniLogger : object {
    public sealed virtual void Debug(string message);
    public sealed virtual void Error(string errorMessage);
    public sealed virtual void Error(string errorMessage, Exception ex);
}
public static class FFImageLoading.Helpers.ScaleHelper : object {
    private static Nullable`1<nfloat> _scale;
    public static nfloat Scale { get; }
    public static nfloat get_Scale();
    [AsyncStateMachineAttribute("FFImageLoading.Helpers.ScaleHelper/<InitAsync>d__3")]
public static Task InitAsync();
}
[PreserveAttribute]
public class FFImageLoading.ImageService : ImageServiceBase`1<UIImage> {
    private static ConditionalWeakTable`2<object, IImageLoaderTask> _viewsReferences;
    private static IImageService _instance;
    [CompilerGeneratedAttribute]
private static bool <EnableMockImageService>k__BackingField;
    public static IImageService Instance { get; }
    public static bool EnableMockImageService { get; public set; }
    protected IMemoryCache`1<UIImage> MemoryCache { get; }
    private static ImageService();
    public static IImageService get_Instance();
    [CompilerGeneratedAttribute]
public static bool get_EnableMockImageService();
    [CompilerGeneratedAttribute]
public static void set_EnableMockImageService(bool value);
    protected virtual IMemoryCache`1<UIImage> get_MemoryCache();
    protected virtual IMD5Helper CreatePlatformMD5HelperInstance(Configuration configuration);
    protected virtual IMiniLogger CreatePlatformLoggerInstance(Configuration configuration);
    protected virtual IPlatformPerformance CreatePlatformPerformanceInstance(Configuration configuration);
    protected virtual IMainThreadDispatcher CreateMainThreadDispatcherInstance(Configuration configuration);
    protected virtual IDataResolverFactory CreateDataResolverFactoryInstance(Configuration configuration);
    protected virtual IDiskCache CreatePlatformDiskCacheInstance(Configuration configuration);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters, ITarget`2<UIImage, TImageView> target);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters);
    protected virtual void SetTaskForTarget(IImageLoaderTask currentTask);
    public virtual void CancelWorkForView(object view);
    public virtual int DpToPixels(double dp);
    public virtual double PixelsToDp(double px);
}
internal static class FFImageLoading.IO.FileStore : object {
    private static int DefaultBufferSize;
    public static Stream GetInputStream(string path, bool asynchronous);
    public static Stream GetOutputStream(string path, bool asynchronous);
    public static bool Exists(string path);
    [AsyncStateMachineAttribute("FFImageLoading.IO.FileStore/<ReadBytesAsync>d__4")]
public static Task`1<Byte[]> ReadBytesAsync(string path, CancellationToken token);
    [AsyncStateMachineAttribute("FFImageLoading.IO.FileStore/<WriteBytesAsync>d__5")]
public static Task WriteBytesAsync(string path, Byte[] data, CancellationToken token);
}
public class FFImageLoading.PlatformPerformance : object {
    private static int KERN_SUCCESS;
    private static int MACH_TASK_BASIC_INFO;
    private IntPtr self;
    private mach_task_basic_info tbi;
    private int size;
    public sealed virtual int GetCurrentManagedThreadId();
    public sealed virtual int GetCurrentSystemThreadId();
    private static int task_info(IntPtr target_task, int flavor, mach_task_basic_info& task_info_out, Int32& task_info_outCnt);
    private Nullable`1<mach_task_basic_info> GetResidentSize();
    public sealed virtual string GetMemoryInfo();
}
public class FFImageLoading.Targets.UIBarItemTarget : UIViewTarget`1<UIBarItem> {
    private UIBarItem _controlStrongReference;
    public UIBarItemTarget(UIBarItem control);
    public virtual void Set(IImageLoaderTask task, UIImage image, bool animated);
    public virtual void SetAsEmpty(IImageLoaderTask task);
}
public class FFImageLoading.Targets.UIButtonTarget : UIViewTarget`1<UIButton> {
    public UIButtonTarget(UIButton control);
    public virtual void Set(IImageLoaderTask task, UIImage image, bool animated);
    public virtual void SetAsEmpty(IImageLoaderTask task);
}
public class FFImageLoading.Targets.UIImageTarget : Target`2<UIImage, UIImage> {
    private WeakReference`1<UIImage> _imageWeakReference;
    public UIImage PImage { get; }
    public virtual void Set(IImageLoaderTask task, UIImage image, bool animated);
    public UIImage get_PImage();
}
public class FFImageLoading.Targets.UIImageViewTarget : UIViewTarget`1<UIImageView> {
    public UIImageViewTarget(UIImageView control);
    public virtual void Set(IImageLoaderTask task, UIImage image, bool animated);
    private bool IsLayoutNeeded(IImageLoaderTask task, UIImage oldImage, UIImage newImage);
    public virtual void SetAsEmpty(IImageLoaderTask task);
}
public class FFImageLoading.Targets.UIViewTarget`1 : Target`2<UIImage, TView> {
    protected WeakReference`1<TView> _controlWeakReference;
    public bool IsValid { get; }
    public TView Control { get; }
    protected UIViewTarget`1(TView control);
    public virtual bool get_IsValid();
    public virtual TView get_Control();
}
[ExtensionAttribute]
public static class FFImageLoading.TaskParameterExtensions : object {
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterExtensions/<InvalidateAsync>d__0")]
[ExtensionAttribute]
public static Task InvalidateAsync(TaskParameter parameters, CacheType cacheType);
    [ExtensionAttribute]
public static IImageLoaderTask Preload(TaskParameter parameters);
    [ExtensionAttribute]
public static Task PreloadAsync(TaskParameter parameters);
    [ExtensionAttribute]
public static IImageLoaderTask DownloadOnly(TaskParameter parameters);
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterExtensions/<DownloadOnlyAsync>d__4")]
[ExtensionAttribute]
public static Task DownloadOnlyAsync(TaskParameter parameters);
}
[ExtensionAttribute]
public static class FFImageLoading.TaskParameterPlatformExtensions : object {
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterPlatformExtensions/<AsPNGStreamAsync>d__0")]
[ExtensionAttribute]
public static Task`1<Stream> AsPNGStreamAsync(TaskParameter parameters);
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterPlatformExtensions/<AsJPGStreamAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Stream> AsJPGStreamAsync(TaskParameter parameters, int quality);
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, UIImageView imageView);
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, UITabBarItem item);
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, UIButton button);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, UIImageView imageView);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, UITabBarItem item);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, UIButton button);
    [ExtensionAttribute]
public static Task`1<UIImage> AsUIImageAsync(TaskParameter parameters);
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, ITarget`2<UIImage, TImageView> target);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, ITarget`2<UIImage, TImageView> target);
    [ExtensionAttribute]
private static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, Action`1<TaskParameter> into);
}
public abstract class FFImageLoading.Transformations.TransformationBase : object {
    public string Key { get; }
    public abstract virtual string get_Key();
    public sealed virtual IBitmap Transform(IBitmap bitmapHolder, string path, ImageSource source, bool isPlaceholder, string key);
    protected virtual UIImage Transform(UIImage sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
}
public class FFImageLoading.Work.BitmapHolder : object {
    [CompilerGeneratedAttribute]
private UIImage <NativeBitmap>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    internal UIImage NativeBitmap { get; private set; }
    public BitmapHolder(UIImage bitmap);
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
    [CompilerGeneratedAttribute]
internal UIImage get_NativeBitmap();
    [CompilerGeneratedAttribute]
private void set_NativeBitmap(UIImage value);
}
[ExtensionAttribute]
public static class FFImageLoading.Work.IBitmapExtensions : object {
    [ExtensionAttribute]
public static UIImage ToNative(IBitmap bitmap);
}
public class FFImageLoading.Work.PlatformImageLoaderTask`1 : ImageLoaderTask`3<UIImage, UIImage, TImageView> {
    private static IDecoder`1<UIImage> _webpDecoder;
    public PlatformImageLoaderTask`1(ITarget`2<UIImage, TImageView> target, TaskParameter parameters, IImageService imageService);
    private static PlatformImageLoaderTask`1();
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<Init>d__2")]
public virtual Task Init();
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<SetTargetAsync>d__3")]
protected virtual Task SetTargetAsync(UIImage image, bool animated);
    protected virtual int DpiToPixels(int size);
    protected virtual IDecoder`1<UIImage> ResolveDecoder(ImageType type);
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<TransformAsync>d__6")]
protected virtual Task`1<UIImage> TransformAsync(UIImage bitmap, IList`1<ITransformation> transformations, string path, ImageSource source, bool isPlaceholder);
    protected virtual Task`1<UIImage> GenerateImageFromDecoderContainerAsync(IDecodedImage`1<UIImage> decoded, ImageInformation imageInformation, bool isPlaceholder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
