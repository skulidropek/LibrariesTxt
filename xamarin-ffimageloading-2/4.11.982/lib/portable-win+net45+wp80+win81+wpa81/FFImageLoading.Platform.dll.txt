public class FFImageLoading.Decoders.MockDecoder : object {
    public sealed virtual Task`1<IDecodedImage`1<MockBitmap>> DecodeAsync(Stream stream, string path, ImageSource source, ImageInformation imageInformation, TaskParameter parameters);
}
[PreserveAttribute]
public class FFImageLoading.ImageService : ImageServiceBase`1<MockBitmap> {
    private static string DoNotReference;
    private static IImageService _instance;
    [CompilerGeneratedAttribute]
private static bool <EnableMockImageService>k__BackingField;
    public static IImageService Instance { get; }
    public static bool EnableMockImageService { get; public set; }
    protected IMemoryCache`1<MockBitmap> MemoryCache { get; }
    public static IImageService get_Instance();
    [CompilerGeneratedAttribute]
public static bool get_EnableMockImageService();
    [CompilerGeneratedAttribute]
public static void set_EnableMockImageService(bool value);
    protected virtual IMemoryCache`1<MockBitmap> get_MemoryCache();
    protected virtual IMD5Helper CreatePlatformMD5HelperInstance(Configuration configuration);
    protected virtual IMiniLogger CreatePlatformLoggerInstance(Configuration configuration);
    protected virtual IDiskCache CreatePlatformDiskCacheInstance(Configuration configuration);
    protected virtual IPlatformPerformance CreatePlatformPerformanceInstance(Configuration configuration);
    protected virtual IDataResolverFactory CreateDataResolverFactoryInstance(Configuration configuration);
    protected virtual IMainThreadDispatcher CreateMainThreadDispatcherInstance(Configuration configuration);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters, ITarget`2<MockBitmap, TImageView> target);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters);
    protected virtual void SetTaskForTarget(IImageLoaderTask currentTask);
    public virtual void CancelWorkForView(object view);
    public virtual int DpToPixels(double dp);
    public virtual double PixelsToDp(double px);
}
public class FFImageLoading.Mock.MockBitmap : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
}
public class FFImageLoading.Mock.MockDataResolverFactory : object {
    public sealed virtual IDataResolver GetResolver(string identifier, ImageSource source, TaskParameter parameters, Configuration configuration);
}
public class FFImageLoading.Mock.MockDiskCache : object {
    private string _path;
    private Dictionary`2<string, MockFile> _cache;
    private object _lock;
    public sealed virtual Task AddToSavingQueueIfNotExistsAsync(string key, Byte[] bytes, TimeSpan duration, Action writeFinished);
    public sealed virtual Task ClearAsync();
    public sealed virtual Task`1<bool> ExistsAsync(string key);
    public sealed virtual Task`1<string> GetFilePathAsync(string key);
    public sealed virtual Task RemoveAsync(string key);
    public sealed virtual Task`1<Stream> TryGetStreamAsync(string key);
}
public class FFImageLoading.Mock.MockFile : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public Byte[] Data { get; private set; }
    public string Path { get; private set; }
    public MockFile(Byte[] data, string path);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
public class FFImageLoading.Mock.MockImageCache : object {
    private Dictionary`2<string, Tuple`2<MockBitmap, ImageInformation>> _cache;
    private object _lock;
    [CompilerGeneratedAttribute]
private static MockImageCache <Instance>k__BackingField;
    public static MockImageCache Instance { get; private set; }
    private static MockImageCache();
    [CompilerGeneratedAttribute]
public static MockImageCache get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(MockImageCache value);
    public sealed virtual void Add(string key, ImageInformation imageInformation, MockBitmap bitmap);
    public sealed virtual void Clear();
    public sealed virtual Tuple`2<MockBitmap, ImageInformation> Get(string key);
    public sealed virtual ImageInformation GetInfo(string key);
    public sealed virtual void Remove(string key);
    public sealed virtual void RemoveSimilar(string baseKey);
}
public class FFImageLoading.Mock.MockImageView : object {
}
public class FFImageLoading.Mock.MockLogger : object {
    public sealed virtual void Debug(string message);
    public sealed virtual void Error(string errorMessage);
    public sealed virtual void Error(string errorMessage, Exception ex);
}
public class FFImageLoading.Mock.MockMainThreadDispatcher : object {
    public void Post(Action action);
    public sealed virtual Task PostAsync(Action action);
    public sealed virtual Task PostAsync(Func`1<Task> action);
}
public class FFImageLoading.Mock.MockMD5Helper : object {
    public sealed virtual string MD5(string input);
    public sealed virtual string MD5(Stream stream);
}
[ExtensionAttribute]
public static class FFImageLoading.TaskParameterExtensions : object {
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterExtensions/<InvalidateAsync>d__0")]
[ExtensionAttribute]
public static Task InvalidateAsync(TaskParameter parameters, CacheType cacheType);
    [ExtensionAttribute]
public static IImageLoaderTask Preload(TaskParameter parameters);
    [ExtensionAttribute]
public static Task PreloadAsync(TaskParameter parameters);
    [ExtensionAttribute]
public static IImageLoaderTask DownloadOnly(TaskParameter parameters);
    [AsyncStateMachineAttribute("FFImageLoading.TaskParameterExtensions/<DownloadOnlyAsync>d__4")]
[ExtensionAttribute]
public static Task DownloadOnlyAsync(TaskParameter parameters);
}
[ExtensionAttribute]
public static class FFImageLoading.TaskParameterPlatformExtensions : object {
    [ExtensionAttribute]
public static Task`1<Stream> AsPNGStreamAsync(TaskParameter parameters);
    [ExtensionAttribute]
public static Task`1<Stream> AsJPGStreamAsync(TaskParameter parameters, int quality);
}
[ExtensionAttribute]
public static class FFImageLoading.UnitsExtensions : object {
    [ExtensionAttribute]
public static int DpToPixels(int dp);
    [ExtensionAttribute]
public static int DpToPixels(double dp);
    [ExtensionAttribute]
public static double PixelsToDp(int px);
    [ExtensionAttribute]
public static double PixelsToDp(double px);
}
public class FFImageLoading.Work.PlatformImageLoaderTask`1 : ImageLoaderTask`3<MockBitmap, MockBitmap, TImageView> {
    public PlatformImageLoaderTask`1(ITarget`2<MockBitmap, TImageView> target, TaskParameter parameters, IImageService imageService);
    protected virtual int DpiToPixels(int size);
    protected virtual Task`1<MockBitmap> GenerateImageFromDecoderContainerAsync(IDecodedImage`1<MockBitmap> decoded, ImageInformation imageInformation, bool isPlaceholder);
    protected virtual IDecoder`1<MockBitmap> ResolveDecoder(ImageType type);
    protected virtual Task SetTargetAsync(MockBitmap image, bool animated);
    protected virtual Task`1<MockBitmap> TransformAsync(MockBitmap bitmap, IList`1<ITransformation> transformations, string path, ImageSource source, bool isPlaceholder);
}
