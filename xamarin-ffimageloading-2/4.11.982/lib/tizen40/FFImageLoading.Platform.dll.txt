public class FFImageLoading.BitmapHolder : object {
    [CompilerGeneratedAttribute]
private SharedEvasImage <NativeBitmap>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    internal SharedEvasImage NativeBitmap { get; private set; }
    public BitmapHolder(SharedEvasImage bitmap);
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
    [CompilerGeneratedAttribute]
internal SharedEvasImage get_NativeBitmap();
    [CompilerGeneratedAttribute]
private void set_NativeBitmap(SharedEvasImage value);
}
internal class FFImageLoading.Cache.EvasImageCache : object {
    private static Lazy`1<IMemoryCache`1<SharedEvasImage>> s_instance;
    private ConcurrentDictionary`2<string, ImageInformation> _imageInformations;
    private Dictionary`2<string, SharedEvasImage> _cache;
    private LinkedList`1<string> _lruQueue;
    private IMiniLogger _logger;
    private object _lock;
    private int _maxCacheSize;
    private int _currentCacheSize;
    public static IMemoryCache`1<SharedEvasImage> Instance { get; }
    private EvasImageCache(int maxCacheSize, IMiniLogger logger);
    private static EvasImageCache();
    public static IMemoryCache`1<SharedEvasImage> get_Instance();
    public sealed virtual ImageInformation GetInfo(string key);
    public sealed virtual Tuple`2<SharedEvasImage, ImageInformation> Get(string key);
    public sealed virtual void Add(string key, ImageInformation imageInformation, SharedEvasImage value);
    public sealed virtual void Remove(string key);
    private void Remove(string key, bool log);
    public sealed virtual void RemoveSimilar(string baseKey);
    public sealed virtual void Clear();
}
public class FFImageLoading.Cache.SimpleDiskCache : object {
    private static int BufferSize;
    private string _cachePath;
    private ConcurrentDictionary`2<string, byte> _fileWritePendingTasks;
    private SemaphoreSlim _currentWriteLock;
    private Task _currentWrite;
    private ConcurrentDictionary`2<string, CacheEntry> _entries;
    [CompilerGeneratedAttribute]
private Configuration <Configuration>k__BackingField;
    protected Configuration Configuration { get; private set; }
    protected IMiniLogger Logger { get; }
    public SimpleDiskCache(string cachePath, Configuration configuration);
    [CompilerGeneratedAttribute]
protected Configuration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(Configuration value);
    protected IMiniLogger get_Logger();
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<AddToSavingQueueIfNotExistsAsync>d__13")]
public virtual Task AddToSavingQueueIfNotExistsAsync(string key, Byte[] bytes, TimeSpan duration, Action writeFinished);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<RemoveAsync>d__14")]
public virtual Task RemoveAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<ClearAsync>d__15")]
public virtual Task ClearAsync();
    public virtual Task`1<bool> ExistsAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<TryGetStreamAsync>d__17")]
public virtual Task`1<Stream> TryGetStreamAsync(string key);
    public virtual Task`1<string> GetFilePathAsync(string key);
    [AsyncStateMachineAttribute("FFImageLoading.Cache.SimpleDiskCache/<WaitForPendingWriteIfExists>d__19")]
protected Task WaitForPendingWriteIfExists(string key);
    protected void InitializeEntries();
    protected TimeSpan GetDuration(string text);
    protected virtual void CleanCallback(object state);
}
public class FFImageLoading.DataResolvers.DataResolverFactory : object {
    public virtual IDataResolver GetResolver(string identifier, ImageSource source, TaskParameter parameters, Configuration configuration);
}
public class FFImageLoading.DataResolvers.FileDataResolver : object {
    public virtual Task`1<DataResolverResult> Resolve(string identifier, TaskParameter parameters, CancellationToken token);
    private static string GetPath(string res);
}
public class FFImageLoading.Decoders.BaseDecoder : object {
    public EvasObject MainWindow { get; }
    public sealed virtual Task`1<IDecodedImage`1<SharedEvasImage>> DecodeAsync(Stream imageData, string path, ImageSource source, ImageInformation imageInformation, TaskParameter parameters);
    public EvasObject get_MainWindow();
    public static int CalculateScaleDownFactor(int originWidth, int originHeight, int reqWidth, int reqHeight);
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.TaskParameterPlatformExtensions : object {
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, EvasImageContainer imageView);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, EvasImageContainer imageView);
    [ExtensionAttribute]
public static IScheduledWork Into(TaskParameter parameters, ITarget`2<SharedEvasImage, TImageView> target);
    [ExtensionAttribute]
public static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, ITarget`2<SharedEvasImage, TImageView> target);
    [ExtensionAttribute]
private static Task`1<IScheduledWork> IntoAsync(TaskParameter parameters, Action`1<TaskParameter> into);
}
[ExtensionAttribute]
public static class FFImageLoading.Extensions.UnitsExtensions : object {
    [ExtensionAttribute]
public static int DpToPixels(int dp);
    [ExtensionAttribute]
public static int DpToPixels(double dp);
    [ExtensionAttribute]
public static double PixelsToDp(int px);
    [ExtensionAttribute]
public static double PixelsToDp(double px);
}
public class FFImageLoading.Helpers.EcoreThreadDispatcher : object {
    public sealed virtual Task PostAsync(Action action);
    [AsyncStateMachineAttribute("FFImageLoading.Helpers.EcoreThreadDispatcher/<PostAsync>d__1")]
public sealed virtual Task PostAsync(Func`1<Task> action);
}
public class FFImageLoading.Helpers.MD5Helper : object {
    public sealed virtual string MD5(Stream stream);
    public sealed virtual string MD5(string input);
}
internal class FFImageLoading.Helpers.MiniLogger : object {
    public sealed virtual void Debug(string message);
    public sealed virtual void Error(string errorMessage);
    public sealed virtual void Error(string errorMessage, Exception ex);
}
[ExtensionAttribute]
public static class FFImageLoading.IBitmapExtensions : object {
    [ExtensionAttribute]
public static SharedEvasImage ToNative(IBitmap bitmap);
}
[PreserveAttribute]
public class FFImageLoading.ImageService : ImageServiceBase`1<SharedEvasImage> {
    private static ConditionalWeakTable`2<object, IImageLoaderTask> s_viewsReferences;
    private static Lazy`1<IImageService> _instance;
    private static Lazy`1<int> s_dpi;
    [CompilerGeneratedAttribute]
private static bool <EnableMockImageService>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<EvasObject> <MainWindowProvider>k__BackingField;
    public static IImageService Instance { get; }
    public static bool EnableMockImageService { get; public set; }
    public static Func`1<EvasObject> MainWindowProvider { get; public set; }
    protected IMemoryCache`1<SharedEvasImage> MemoryCache { get; }
    private static ImageService();
    public static IImageService get_Instance();
    [CompilerGeneratedAttribute]
public static bool get_EnableMockImageService();
    [CompilerGeneratedAttribute]
public static void set_EnableMockImageService(bool value);
    [CompilerGeneratedAttribute]
public static Func`1<EvasObject> get_MainWindowProvider();
    [CompilerGeneratedAttribute]
public static void set_MainWindowProvider(Func`1<EvasObject> value);
    protected virtual IMemoryCache`1<SharedEvasImage> get_MemoryCache();
    protected virtual IMD5Helper CreatePlatformMD5HelperInstance(Configuration configuration);
    protected virtual IMiniLogger CreatePlatformLoggerInstance(Configuration configuration);
    protected virtual IPlatformPerformance CreatePlatformPerformanceInstance(Configuration configuration);
    protected virtual IMainThreadDispatcher CreateMainThreadDispatcherInstance(Configuration configuration);
    protected virtual IDataResolverFactory CreateDataResolverFactoryInstance(Configuration configuration);
    protected virtual IDiskCache CreatePlatformDiskCacheInstance(Configuration configuration);
    protected virtual void SetTaskForTarget(IImageLoaderTask currentTask);
    public virtual void CancelWorkForView(object view);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters, ITarget`2<SharedEvasImage, TImageView> target);
    internal static IImageLoaderTask CreateTask(TaskParameter parameters);
    public virtual int DpToPixels(double dp);
    public virtual double PixelsToDp(double px);
}
internal static class FFImageLoading.IO.FileStore : object {
    private static int DefaultBufferSize;
    public static Stream GetInputStream(string path, bool asynchronous);
    public static Stream GetOutputStream(string path, bool asynchronous);
    public static bool Exists(string path);
    [AsyncStateMachineAttribute("FFImageLoading.IO.FileStore/<ReadBytesAsync>d__4")]
public static Task`1<Byte[]> ReadBytesAsync(string path, CancellationToken token);
    [AsyncStateMachineAttribute("FFImageLoading.IO.FileStore/<WriteBytesAsync>d__5")]
public static Task WriteBytesAsync(string path, Byte[] data, CancellationToken token);
}
internal class FFImageLoading.Targets.EvasImageTarget : Target`2<SharedEvasImage, EvasImageContainer> {
    private WeakReference`1<EvasImageContainer> _controlWeakReference;
    public EvasImageContainer Control { get; }
    public bool IsValid { get; }
    public EvasImageTarget(EvasImageContainer control);
    public virtual EvasImageContainer get_Control();
    public virtual bool get_IsValid();
    public virtual void Set(IImageLoaderTask task, SharedEvasImage image, bool animated);
    public virtual void SetAsEmpty(IImageLoaderTask task);
}
public enum FFImageLoading.Views.EvasImageAspect : Enum {
    public int value__;
    public static EvasImageAspect AspectFit;
    public static EvasImageAspect AspectFill;
    public static EvasImageAspect Fill;
}
public class FFImageLoading.Views.EvasImageContainer : Box {
    private EvasImageAspect _aspect;
    private EvasImage _content;
    private SharedEvasImage _source;
    [CompilerGeneratedAttribute]
private EventHandler SourceUpdated;
    public EvasImageAspect Aspect { get; public set; }
    public SharedEvasImage Source { get; public set; }
    public EvasImageContainer(EvasObject parent);
    public EvasImageAspect get_Aspect();
    public void set_Aspect(EvasImageAspect value);
    [CompilerGeneratedAttribute]
public void add_SourceUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SourceUpdated(EventHandler value);
    public SharedEvasImage get_Source();
    public void set_Source(SharedEvasImage value);
    public Task`1<Byte[]> GetImageData(bool asPNG, int quality);
    protected virtual void OnUnrealize();
    private void OnLayout();
    internal static void evas_object_image_save(IntPtr obj, string file, string key, string flags);
}
[ExtensionAttribute]
internal static class FFImageLoading.Views.EvasImageDisposerEx : object {
    [ExtensionAttribute]
public static void DisposeOnMainThread(SharedEvasImage image);
}
public class FFImageLoading.Views.SharedEvasImage : EvasImage {
    private object _lock;
    private int _refCount;
    public SharedEvasImage(EvasObject parent);
    public void AddRef();
    public void RemoveRef();
}
internal static class FFImageLoading.Work.EvasInterop : object {
    internal static void evas_object_image_load_scale_down_set(IntPtr obj, int scale);
}
public class FFImageLoading.Work.PlatformImageLoaderTask`1 : ImageLoaderTask`3<SharedEvasImage, SharedEvasImage, TImageView> {
    public PlatformImageLoaderTask`1(ITarget`2<SharedEvasImage, TImageView> target, TaskParameter parameters, IImageService imageService);
    protected virtual int DpiToPixels(int size);
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<SetTargetAsync>d__2")]
protected virtual Task SetTargetAsync(SharedEvasImage image, bool animated);
    protected virtual IDecoder`1<SharedEvasImage> ResolveDecoder(ImageType type);
    [AsyncStateMachineAttribute("FFImageLoading.Work.PlatformImageLoaderTask`1/<TransformAsync>d__4")]
protected virtual Task`1<SharedEvasImage> TransformAsync(SharedEvasImage bitmap, IList`1<ITransformation> transformations, string path, ImageSource source, bool isPlaceholder);
    protected virtual Task`1<SharedEvasImage> GenerateImageFromDecoderContainerAsync(IDecodedImage`1<SharedEvasImage> decoded, ImageInformation imageInformation, bool isPlaceholder);
}
