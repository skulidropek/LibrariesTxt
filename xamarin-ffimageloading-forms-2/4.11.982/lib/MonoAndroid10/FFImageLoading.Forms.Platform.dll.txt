[PreserveAttribute]
public class FFImageLoading.Forms.Platform.CachedImageFastRenderer : CachedImageView {
    internal static Type ElementRendererType;
    private static MethodInfo _viewExtensionsMethod;
    private static MethodInfo _elementRendererTypeOnTouchEvent;
    private bool _isDisposed;
    private Nullable`1<int> _defaultLabelFor;
    private VisualElementTracker _visualElementTracker;
    private IDisposable _visualElementRenderer;
    private IScheduledWork _currentTask;
    private ImageSourceBinding _lastImageSource;
    private MotionEventHelper _motionEventHelper;
    private object _updateBitmapLock;
    [CompilerGeneratedAttribute]
private CachedImage <TypedElement>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private static Nullable`1<bool> _isLollipopOrNewer;
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private CachedImage TypedElement { get; private set; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private CachedImageView Control { get; }
    internal static bool IsLollipopOrNewer { get; }
    public CachedImageFastRenderer(IntPtr javaReference, JniHandleOwnership transfer);
    public CachedImageFastRenderer(Context context);
    public CachedImageFastRenderer(Context context, IAttributeSet attrs);
    private static CachedImageFastRenderer();
    protected virtual void Dispose(bool disposing);
    private void OnElementChanged(ElementChangedEventArgs`1<CachedImage> e);
    public virtual bool OnTouchEvent(MotionEvent e);
    private Size MinimumSize();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    [CompilerGeneratedAttribute]
private CachedImage get_TypedElement();
    [CompilerGeneratedAttribute]
private void set_TypedElement(CachedImage value);
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private CachedImageView get_Control();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetBackgroundColor(Color color);
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    private void UpdateAspect();
    private void UpdateBitmap(CachedImageView imageView, CachedImage image, CachedImage previousImage);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageFastRenderer/<ImageLoadingSizeChanged>d__48")]
private void ImageLoadingSizeChanged(CachedImage element, bool isLoading);
    private void ReloadImage();
    private void CancelIfNeeded();
    private Task`1<Byte[]> GetImageAsJpgAsync(GetImageAsJpgArgs args);
    private Task`1<Byte[]> GetImageAsPngAsync(GetImageAsPngArgs args);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageFastRenderer/<GetImageAsByteAsync>d__53")]
private Task`1<Byte[]> GetImageAsByteAsync(CompressFormat format, int quality, int desiredWidth, int desiredHeight);
    internal static bool get_IsLollipopOrNewer();
}
[PreserveAttribute]
public class FFImageLoading.Forms.Platform.CachedImageRenderer : ViewRenderer`2<CachedImage, CachedImageView> {
    private bool _isDisposed;
    private IScheduledWork _currentTask;
    private ImageSourceBinding _lastImageSource;
    private MotionEventHelper _motionEventHelper;
    private static Type _platformDefaultRendererType;
    private static MethodInfo _platformDefaultRendererTypeNotifyFakeHandling;
    private object _updateBitmapLock;
    public CachedImageRenderer(IntPtr javaReference, JniHandleOwnership transfer);
    public CachedImageRenderer(Context context);
    public CachedImageRenderer(Context context, IAttributeSet attrs);
    private static CachedImageRenderer();
    public static void Init(Nullable`1<bool> enableFastRenderer);
    public static void InitImageViewHandler();
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CachedImage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual CachedImageView CreateNativeControl();
    private void UpdateAspect();
    private void UpdateBitmap(CachedImageView imageView, CachedImage image, CachedImage previousImage);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<ImageLoadingSizeChanged>d__21")]
private void ImageLoadingSizeChanged(CachedImage element, bool isLoading);
    private void ReloadImage();
    private void CancelIfNeeded();
    private Task`1<Byte[]> GetImageAsJpgAsync(GetImageAsJpgArgs args);
    private Task`1<Byte[]> GetImageAsPngAsync(GetImageAsPngArgs args);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<GetImageAsByteAsync>d__26")]
private Task`1<Byte[]> GetImageAsByteAsync(CompressFormat format, int quality, int desiredWidth, int desiredHeight);
}
[PreserveAttribute]
public class FFImageLoading.Forms.Platform.CachedImageView : ImageView {
    private bool _skipInvalidate;
    public CachedImageView(IntPtr javaReference, JniHandleOwnership transfer);
    public CachedImageView(Context context);
    public CachedImageView(Context context, IAttributeSet attrs);
    public virtual void Invalidate();
    public void SkipInvalidate();
}
public class FFImageLoading.Forms.Platform.FFImageLoadingImageSourceHandler : HandlerBase`1<Context> {
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.FFImageLoadingImageSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<Bitmap> LoadImageAsync(ImageSource imageSource, Context context, CancellationToken cancellationToken);
    private static bool IsValid(Context context);
    protected virtual IImageLoaderTask GetImageLoaderTask(TaskParameter parameters, Context imageView);
}
[PreserveAttribute]
public class FFImageLoading.Forms.Platform.FFImageLoadingImageViewHandler : HandlerBase`1<ImageView> {
    public sealed virtual Task LoadImageAsync(ImageSource imageSource, ImageView imageView, CancellationToken cancellationToken);
    private static bool IsValid(ImageView imageView);
    protected virtual IImageLoaderTask GetImageLoaderTask(TaskParameter parameters, ImageView imageView);
}
[PreserveAttribute]
internal class FFImageLoading.Forms.Platform.ImageSourceBinding : object {
    [CompilerGeneratedAttribute]
private ImageSource <ImageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task`1<Stream>> <Stream>k__BackingField;
    public ImageSource ImageSource { get; private set; }
    public string Path { get; private set; }
    public Func`2<CancellationToken, Task`1<Stream>> Stream { get; private set; }
    public ImageSourceBinding(ImageSource imageSource, string path);
    public ImageSourceBinding(Func`2<CancellationToken, Task`1<Stream>> stream);
    [CompilerGeneratedAttribute]
public sealed virtual ImageSource get_ImageSource();
    [CompilerGeneratedAttribute]
private void set_ImageSource(ImageSource value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<CancellationToken, Task`1<Stream>> get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Func`2<CancellationToken, Task`1<Stream>> value);
    internal static ImageSourceBinding GetImageSourceBinding(ImageSource source, CachedImage element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
