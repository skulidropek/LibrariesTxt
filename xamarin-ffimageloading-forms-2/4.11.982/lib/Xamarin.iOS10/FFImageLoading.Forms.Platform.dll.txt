[PreserveAttribute]
public class FFImageLoading.Forms.Platform.CachedImageRenderer : ViewRenderer`2<CachedImage, UIImageView> {
    private bool _isDisposed;
    private IScheduledWork _currentTask;
    private ImageSourceBinding _lastImageSource;
    private object _updateBitmapLock;
    public static void Init();
    public static void InitImageSourceHandler();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CachedImage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetAspect();
    private void SetOpacity();
    private void UpdateImage(UIImageView imageView, CachedImage image, CachedImage previousImage);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<ImageLoadingSizeChanged>d__13")]
private void ImageLoadingSizeChanged(CachedImage element, bool isLoading);
    private void ReloadImage();
    private void CancelIfNeeded();
    private Task`1<Byte[]> GetImageAsJpgAsync(GetImageAsJpgArgs args);
    private Task`1<Byte[]> GetImageAsPngAsync(GetImageAsPngArgs args);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<GetImageAsByteAsync>d__18")]
private Task`1<Byte[]> GetImageAsByteAsync(bool usePNG, int quality, int desiredWidth, int desiredHeight);
}
public class FFImageLoading.Forms.Platform.FFImageLoadingImageSourceHandler : HandlerBase`1<object> {
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.FFImageLoadingImageSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imageSource, CancellationToken cancellationToken, float scale);
    protected virtual IImageLoaderTask GetImageLoaderTask(TaskParameter parameters, object imageView);
}
[PreserveAttribute]
internal class FFImageLoading.Forms.Platform.ImageSourceBinding : object {
    [CompilerGeneratedAttribute]
private ImageSource <ImageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task`1<Stream>> <Stream>k__BackingField;
    public ImageSource ImageSource { get; private set; }
    public string Path { get; private set; }
    public Func`2<CancellationToken, Task`1<Stream>> Stream { get; private set; }
    public ImageSourceBinding(ImageSource imageSource, string path);
    public ImageSourceBinding(Func`2<CancellationToken, Task`1<Stream>> stream);
    [CompilerGeneratedAttribute]
public sealed virtual ImageSource get_ImageSource();
    [CompilerGeneratedAttribute]
private void set_ImageSource(ImageSource value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<CancellationToken, Task`1<Stream>> get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Func`2<CancellationToken, Task`1<Stream>> value);
    internal static ImageSourceBinding GetImageSourceBinding(ImageSource source, CachedImage element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
