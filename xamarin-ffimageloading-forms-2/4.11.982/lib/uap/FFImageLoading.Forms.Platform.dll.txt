[PreserveAttribute]
public class FFImageLoading.Forms.Platform.CachedImageRenderer : ViewRenderer`2<CachedImage, Image> {
    private bool _measured;
    private IScheduledWork _currentTask;
    private ImageSourceBinding _lastImageSource;
    private bool _isDisposed;
    public static void Init();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CachedImage> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnImageOpened(object sender, RoutedEventArgs routedEventArgs);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<UpdateImage>d__11")]
private void UpdateImage(Image imageView, CachedImage image, CachedImage previousImage);
    private void UpdateAspect();
    private static Stretch GetStretch(Aspect aspect);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<ImageLoadingSizeChanged>d__14")]
private void ImageLoadingSizeChanged(CachedImage element, bool isLoading);
    private void ReloadImage();
    private void CancelIfNeeded();
    private Task`1<Byte[]> GetImageAsJpgAsync(GetImageAsJpgArgs args);
    private Task`1<Byte[]> GetImageAsPngAsync(GetImageAsPngArgs args);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<GetImageAsByteAsync>d__19")]
private Task`1<Byte[]> GetImageAsByteAsync(Guid format, int quality, int desiredWidth, int desiredHeight);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/<GetBytesFromBitmapAsync>d__20")]
private Task`1<Byte[]> GetBytesFromBitmapAsync(WriteableBitmap bitmap);
}
public class FFImageLoading.Forms.Platform.ImageSourceBinding : object {
    [CompilerGeneratedAttribute]
private ImageSource <ImageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task`1<Stream>> <Stream>k__BackingField;
    public ImageSource ImageSource { get; private set; }
    public string Path { get; private set; }
    public Func`2<CancellationToken, Task`1<Stream>> Stream { get; private set; }
    public ImageSourceBinding(ImageSource imageSource, string path);
    public ImageSourceBinding(Func`2<CancellationToken, Task`1<Stream>> stream);
    [CompilerGeneratedAttribute]
public sealed virtual ImageSource get_ImageSource();
    [CompilerGeneratedAttribute]
private void set_ImageSource(ImageSource value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<CancellationToken, Task`1<Stream>> get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Func`2<CancellationToken, Task`1<Stream>> value);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.Platform.ImageSourceBinding/<GetImageSourceBinding>d__14")]
internal static Task`1<ImageSourceBinding> GetImageSourceBinding(ImageSource source, CachedImage element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
