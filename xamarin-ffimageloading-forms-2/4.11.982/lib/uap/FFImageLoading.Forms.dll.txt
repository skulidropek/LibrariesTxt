public class FFImageLoading.Forms.Args.GetImageAsJpgArgs : object {
    [CompilerGeneratedAttribute]
private int <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DesiredWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DesiredHeight>k__BackingField;
    public int Quality { get; public set; }
    public int DesiredWidth { get; public set; }
    public int DesiredHeight { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(int value);
    [CompilerGeneratedAttribute]
public int get_DesiredWidth();
    [CompilerGeneratedAttribute]
public void set_DesiredWidth(int value);
    [CompilerGeneratedAttribute]
public int get_DesiredHeight();
    [CompilerGeneratedAttribute]
public void set_DesiredHeight(int value);
}
public class FFImageLoading.Forms.Args.GetImageAsPngArgs : object {
    [CompilerGeneratedAttribute]
private int <DesiredWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DesiredHeight>k__BackingField;
    public int DesiredWidth { get; public set; }
    public int DesiredHeight { get; public set; }
    [CompilerGeneratedAttribute]
public int get_DesiredWidth();
    [CompilerGeneratedAttribute]
public void set_DesiredWidth(int value);
    [CompilerGeneratedAttribute]
public int get_DesiredHeight();
    [CompilerGeneratedAttribute]
public void set_DesiredHeight(int value);
}
[PreserveAttribute]
[RenderWithAttribute("FFImageLoading.Forms.Platform.CachedImageRenderer/_CachedImageRenderer")]
public class FFImageLoading.Forms.CachedImage : View {
    private static Nullable`1<bool> _isDesignModeEnabled;
    private static PropertyInfo _visualMarkerProperty;
    private static PropertyInfo _visualProperty;
    [CompilerGeneratedAttribute]
private static bool <IsRendererInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <FixedOnMeasureBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <FixedAndroidMotionEventHandler>k__BackingField;
    private bool _reloadBecauseOfMissingSize;
    public static BindableProperty AspectProperty;
    public static BindablePropertyKey IsLoadingPropertyKey;
    public static BindableProperty IsLoadingProperty;
    public static BindableProperty IsOpaqueProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty RetryCountProperty;
    public static BindableProperty RetryDelayProperty;
    public static BindableProperty LoadingDelayProperty;
    public static BindableProperty DownsampleWidthProperty;
    public static BindableProperty DownsampleHeightProperty;
    public static BindableProperty DownsampleToViewSizeProperty;
    public static BindableProperty DownsampleUseDipUnitsProperty;
    public static BindableProperty CacheDurationProperty;
    public static BindableProperty LoadingPriorityProperty;
    public static BindableProperty BitmapOptimizationsProperty;
    public static BindableProperty FadeAnimationForCachedImagesProperty;
    public static BindableProperty FadeAnimationEnabledProperty;
    public static BindableProperty FadeAnimationDurationProperty;
    public static BindableProperty LoadingPlaceholderProperty;
    public static BindableProperty ErrorPlaceholderProperty;
    public static BindableProperty TransformPlaceholdersProperty;
    public static BindableProperty TransformationsProperty;
    public static BindableProperty InvalidateLayoutAfterLoadedProperty;
    [CompilerGeneratedAttribute]
private ICacheKeyFactory <CacheKeyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataResolver <CustomDataResolver>k__BackingField;
    internal Action InternalReloadImage;
    internal Action InternalCancel;
    internal Func`2<GetImageAsJpgArgs, Task`1<Byte[]>> InternalGetImageAsJPG;
    internal Func`2<GetImageAsPngArgs, Task`1<Byte[]>> InternalGetImageAsPNG;
    [CompilerGeneratedAttribute]
private EventHandler`1<SuccessEventArgs> Success;
    public static BindableProperty SuccessCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Error;
    public static BindableProperty ErrorCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<FinishEventArgs> Finish;
    public static BindableProperty FinishCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<DownloadStartedEventArgs> DownloadStarted;
    public static BindableProperty DownloadStartedCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<DownloadProgressEventArgs> DownloadProgress;
    public static BindableProperty DownloadProgressCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<FileWriteFinishedEventArgs> FileWriteFinished;
    public static BindableProperty FileWriteFinishedCommandProperty;
    public static BindableProperty CacheTypeProperty;
    protected static bool IsDesignModeEnabled { get; }
    internal static bool IsRendererInitialized { get; internal set; }
    [ObsoleteAttribute]
public static bool FixedOnMeasureBehavior { get; public set; }
    [ObsoleteAttribute]
public static bool FixedAndroidMotionEventHandler { get; public set; }
    public Aspect Aspect { get; public set; }
    public bool IsLoading { get; }
    public bool IsOpaque { get; public set; }
    [TypeConverterAttribute("FFImageLoading.Forms.ImageSourceConverter")]
public ImageSource Source { get; public set; }
    public int RetryCount { get; public set; }
    public int RetryDelay { get; public set; }
    public Nullable`1<int> LoadingDelay { get; public set; }
    public double DownsampleWidth { get; public set; }
    public double DownsampleHeight { get; public set; }
    public bool DownsampleToViewSize { get; public set; }
    public bool DownsampleUseDipUnits { get; public set; }
    public Nullable`1<TimeSpan> CacheDuration { get; public set; }
    public LoadingPriority LoadingPriority { get; public set; }
    public Nullable`1<bool> BitmapOptimizations { get; public set; }
    public Nullable`1<bool> FadeAnimationForCachedImages { get; public set; }
    public Nullable`1<bool> FadeAnimationEnabled { get; public set; }
    public Nullable`1<int> FadeAnimationDuration { get; public set; }
    [TypeConverterAttribute("FFImageLoading.Forms.ImageSourceConverter")]
public ImageSource LoadingPlaceholder { get; public set; }
    [TypeConverterAttribute("FFImageLoading.Forms.ImageSourceConverter")]
public ImageSource ErrorPlaceholder { get; public set; }
    public Nullable`1<bool> TransformPlaceholders { get; public set; }
    public List`1<ITransformation> Transformations { get; public set; }
    public Nullable`1<bool> InvalidateLayoutAfterLoaded { get; public set; }
    public ICacheKeyFactory CacheKeyFactory { get; public set; }
    public IDataResolver CustomDataResolver { get; public set; }
    public ICommand SuccessCommand { get; public set; }
    public ICommand ErrorCommand { get; public set; }
    public ICommand FinishCommand { get; public set; }
    public ICommand DownloadStartedCommand { get; public set; }
    public ICommand DownloadProgressCommand { get; public set; }
    public ICommand FileWriteFinishedCommand { get; public set; }
    public Nullable`1<CacheType> CacheType { get; public set; }
    private static CachedImage();
    protected static bool get_IsDesignModeEnabled();
    [CompilerGeneratedAttribute]
internal static bool get_IsRendererInitialized();
    [CompilerGeneratedAttribute]
internal static void set_IsRendererInitialized(bool value);
    [CompilerGeneratedAttribute]
public static bool get_FixedOnMeasureBehavior();
    [CompilerGeneratedAttribute]
public static void set_FixedOnMeasureBehavior(bool value);
    [CompilerGeneratedAttribute]
public static bool get_FixedAndroidMotionEventHandler();
    [CompilerGeneratedAttribute]
public static void set_FixedAndroidMotionEventHandler(bool value);
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public bool get_IsLoading();
    public bool get_IsOpaque();
    public void set_IsOpaque(bool value);
    private static object CoerceImageSource(BindableObject bindable, object newValue);
    private static void OnSourcePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    protected virtual ImageSource CoerceImageSource(object newValue);
    public ImageSource get_Source();
    public void set_Source(ImageSource value);
    public int get_RetryCount();
    public void set_RetryCount(int value);
    public int get_RetryDelay();
    public void set_RetryDelay(int value);
    public Nullable`1<int> get_LoadingDelay();
    public void set_LoadingDelay(Nullable`1<int> value);
    public double get_DownsampleWidth();
    public void set_DownsampleWidth(double value);
    public double get_DownsampleHeight();
    public void set_DownsampleHeight(double value);
    public bool get_DownsampleToViewSize();
    public void set_DownsampleToViewSize(bool value);
    public bool get_DownsampleUseDipUnits();
    public void set_DownsampleUseDipUnits(bool value);
    public Nullable`1<TimeSpan> get_CacheDuration();
    public void set_CacheDuration(Nullable`1<TimeSpan> value);
    public LoadingPriority get_LoadingPriority();
    public void set_LoadingPriority(LoadingPriority value);
    public Nullable`1<bool> get_BitmapOptimizations();
    public void set_BitmapOptimizations(Nullable`1<bool> value);
    public Nullable`1<bool> get_FadeAnimationForCachedImages();
    public void set_FadeAnimationForCachedImages(Nullable`1<bool> value);
    public Nullable`1<bool> get_FadeAnimationEnabled();
    public void set_FadeAnimationEnabled(Nullable`1<bool> value);
    public Nullable`1<int> get_FadeAnimationDuration();
    public void set_FadeAnimationDuration(Nullable`1<int> value);
    public ImageSource get_LoadingPlaceholder();
    public void set_LoadingPlaceholder(ImageSource value);
    public ImageSource get_ErrorPlaceholder();
    public void set_ErrorPlaceholder(ImageSource value);
    public Nullable`1<bool> get_TransformPlaceholders();
    public void set_TransformPlaceholders(Nullable`1<bool> value);
    public List`1<ITransformation> get_Transformations();
    public void set_Transformations(List`1<ITransformation> value);
    public Nullable`1<bool> get_InvalidateLayoutAfterLoaded();
    public void set_InvalidateLayoutAfterLoaded(Nullable`1<bool> value);
    private static void HandleTransformationsPropertyChangedDelegate(BindableObject bindable, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public ICacheKeyFactory get_CacheKeyFactory();
    [CompilerGeneratedAttribute]
public void set_CacheKeyFactory(ICacheKeyFactory value);
    [CompilerGeneratedAttribute]
public IDataResolver get_CustomDataResolver();
    [CompilerGeneratedAttribute]
public void set_CustomDataResolver(IDataResolver value);
    protected virtual void OnBindingContextChanged();
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    public void SetIsLoading(bool isLoading);
    public void ReloadImage();
    public void Cancel();
    public Task`1<Byte[]> GetImageAsJpgAsync(int quality, int desiredWidth, int desiredHeight);
    public Task`1<Byte[]> GetImageAsPngAsync(int desiredWidth, int desiredHeight);
    [AsyncStateMachineAttribute("FFImageLoading.Forms.CachedImage/<InvalidateCache>d__130")]
public static Task InvalidateCache(ImageSource source, CacheType cacheType, bool removeSimilar);
    public static Task InvalidateCache(string key, CacheType cacheType, bool removeSimilar);
    [CompilerGeneratedAttribute]
public void add_Success(EventHandler`1<SuccessEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Success(EventHandler`1<SuccessEventArgs> value);
    public ICommand get_SuccessCommand();
    public void set_SuccessCommand(ICommand value);
    internal void OnSuccess(SuccessEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Error(EventHandler`1<ErrorEventArgs> value);
    public ICommand get_ErrorCommand();
    public void set_ErrorCommand(ICommand value);
    internal void OnError(ErrorEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Finish(EventHandler`1<FinishEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Finish(EventHandler`1<FinishEventArgs> value);
    public ICommand get_FinishCommand();
    public void set_FinishCommand(ICommand value);
    internal void OnFinish(FinishEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DownloadStarted(EventHandler`1<DownloadStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DownloadStarted(EventHandler`1<DownloadStartedEventArgs> value);
    public ICommand get_DownloadStartedCommand();
    public void set_DownloadStartedCommand(ICommand value);
    internal void OnDownloadStarted(DownloadStartedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DownloadProgress(EventHandler`1<DownloadProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DownloadProgress(EventHandler`1<DownloadProgressEventArgs> value);
    public ICommand get_DownloadProgressCommand();
    public void set_DownloadProgressCommand(ICommand value);
    internal void OnDownloadProgress(DownloadProgressEventArgs e);
    [CompilerGeneratedAttribute]
public void add_FileWriteFinished(EventHandler`1<FileWriteFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FileWriteFinished(EventHandler`1<FileWriteFinishedEventArgs> value);
    public ICommand get_FileWriteFinishedCommand();
    public void set_FileWriteFinishedCommand(ICommand value);
    internal void OnFileWriteFinished(FileWriteFinishedEventArgs e);
    public Nullable`1<CacheType> get_CacheType();
    public void set_CacheType(Nullable`1<CacheType> value);
    protected internal virtual void SetupOnBeforeImageLoading(TaskParameter imageLoader);
    protected internal virtual void SetupOnBeforeImageLoading(TaskParameter& imageLoader, IImageSourceBinding source, IImageSourceBinding loadingPlaceholderSource, IImageSourceBinding errorPlaceholderSource);
    protected virtual void OnSizeAllocated(double width, double height);
    [CompilerGeneratedAttribute]
private void <SetupOnBeforeImageLoading>b__185_0(DownloadInformation downloadInformation);
    [CompilerGeneratedAttribute]
private void <SetupOnBeforeImageLoading>b__185_1(DownloadProgress progress);
    [CompilerGeneratedAttribute]
private void <SetupOnBeforeImageLoading>b__185_2(FileWriteInfo fileWriteInfo);
    [CompilerGeneratedAttribute]
private void <SetupOnBeforeImageLoading>b__185_3(Exception exception);
    [CompilerGeneratedAttribute]
private void <SetupOnBeforeImageLoading>b__185_4(IScheduledWork work);
    [CompilerGeneratedAttribute]
private void <SetupOnBeforeImageLoading>b__185_5(ImageInformation imageInformation, LoadingResult loadingResult);
}
public static class FFImageLoading.Forms.CachedImageEvents : object {
}
[ExtensionAttribute]
public static class FFImageLoading.Forms.ColorExtensions : object {
    [ExtensionAttribute]
public static Single[][] ColorToMatrix(Color color, Nullable`1<float> brightness);
}
[PreserveAttribute]
public class FFImageLoading.Forms.DataUrlImageSource : ImageSource {
    public static BindableProperty DataUrlProperty;
    public string DataUrl { get; public set; }
    public DataUrlImageSource(string dataUrl);
    private static DataUrlImageSource();
    public string get_DataUrl();
    public void set_DataUrl(string value);
    public virtual string ToString();
}
[PreserveAttribute]
public class FFImageLoading.Forms.EmbeddedResourceImageSource : ImageSource {
    private static string _cachedMainAssembly;
    public static BindableProperty UriProperty;
    public Uri Uri { get; public set; }
    public EmbeddedResourceImageSource(Uri uri);
    public EmbeddedResourceImageSource(string resourceName, Assembly assembly);
    private static EmbeddedResourceImageSource();
    public Uri get_Uri();
    public void set_Uri(Uri value);
    public virtual string ToString();
}
public abstract class FFImageLoading.Forms.Handlers.HandlerBase`1 : object {
    protected virtual Task`1<IImageLoaderTask> LoadImageAsync(IImageSourceBinding binding, ImageSource imageSource, TNativeView imageView, CancellationToken cancellationToken);
    protected abstract virtual IImageLoaderTask GetImageLoaderTask(TaskParameter parameters, TNativeView imageView);
}
internal static class FFImageLoading.Forms.Helpers.Dependency : object {
    public static void Register(Type type, Type renderer);
}
[PreserveAttribute]
public interface FFImageLoading.Forms.ICacheKeyFactory {
    public abstract virtual string GetKey(ImageSource imageSource, object bindingContext);
}
[PreserveAttribute]
public interface FFImageLoading.Forms.IImageSourceBinding {
    public ImageSource ImageSource { get; }
    public string Path { get; }
    public Func`2<CancellationToken, Task`1<Stream>> Stream { get; }
    public abstract virtual ImageSource get_ImageSource();
    public abstract virtual string get_Path();
    public abstract virtual Func`2<CancellationToken, Task`1<Stream>> get_Stream();
}
[PreserveAttribute]
public class FFImageLoading.Forms.ImageSourceConverter : TypeConverter {
    public virtual bool CanConvertFrom(Type sourceType);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertFromInvariantString(string value);
}
[PreserveAttribute]
public interface FFImageLoading.Forms.IVectorImageSource {
    public ImageSource ImageSource { get; }
    public int VectorWidth { get; public set; }
    public int VectorHeight { get; public set; }
    public bool UseDipUnits { get; public set; }
    public Dictionary`2<string, string> ReplaceStringMap { get; public set; }
    public abstract virtual IVectorDataResolver GetVectorDataResolver();
    public abstract virtual ImageSource get_ImageSource();
    public abstract virtual int get_VectorWidth();
    public abstract virtual void set_VectorWidth(int value);
    public abstract virtual int get_VectorHeight();
    public abstract virtual void set_VectorHeight(int value);
    public abstract virtual bool get_UseDipUnits();
    public abstract virtual void set_UseDipUnits(bool value);
    public abstract virtual Dictionary`2<string, string> get_ReplaceStringMap();
    public abstract virtual void set_ReplaceStringMap(Dictionary`2<string, string> value);
    public abstract virtual IVectorImageSource Clone();
}
