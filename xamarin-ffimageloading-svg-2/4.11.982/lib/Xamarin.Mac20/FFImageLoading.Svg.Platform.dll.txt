internal static class FFImageLoading.Svg.Platform.ColorHelper : object {
    private static Dictionary`2<string, string> hexValues;
    public static Dictionary`2<string, string> HexValues { get; }
    public static bool TryParse(string str, SKColor& color);
    public static Dictionary`2<string, string> get_HexValues();
}
[ExtensionAttribute]
internal static class FFImageLoading.Svg.Platform.CssHelpers : object {
    public static void ParseSelectors(string css, Dictionary`2<string, string> destination);
    [ExtensionAttribute]
private static string Minify(string css);
    public static Dictionary`2<string, string> AddFontShorthand(Dictionary`2<string, string> style, string value);
}
internal interface FFImageLoading.Svg.Platform.ISKSvgFill {
    public abstract virtual void ApplyFill(SKPaint fill, SKRect bounds);
}
[ExtensionAttribute]
internal static class FFImageLoading.Svg.Platform.SKCanvasExtensions : object {
    [ExtensionAttribute]
public static void DrawRoundRect(SKCanvas canvas, SKRoundedRect rect, SKPaint paint);
    [ExtensionAttribute]
public static void DrawOval(SKCanvas canvas, SKOval oval, SKPaint paint);
    [ExtensionAttribute]
public static void DrawCircle(SKCanvas canvas, SKCircle circle, SKPaint paint);
    [ExtensionAttribute]
public static void DrawLine(SKCanvas canvas, SKLine line, SKPaint paint);
    [ExtensionAttribute]
public static void DrawText(SKCanvas canvas, SKText text);
}
internal class FFImageLoading.Svg.Platform.SKCircle : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Radius>k__BackingField;
    public SKPoint Center { get; }
    public float Radius { get; }
    public SKCircle(SKPoint center, float radius);
    [CompilerGeneratedAttribute]
public SKPoint get_Center();
    [CompilerGeneratedAttribute]
public float get_Radius();
}
internal class FFImageLoading.Svg.Platform.SKLine : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <P1>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPoint <P2>k__BackingField;
    public SKPoint P1 { get; }
    public SKPoint P2 { get; }
    public SKLine(SKPoint p1, SKPoint p2);
    [CompilerGeneratedAttribute]
public SKPoint get_P1();
    [CompilerGeneratedAttribute]
public SKPoint get_P2();
}
internal class FFImageLoading.Svg.Platform.SKLinearGradient : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPoint <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Positions>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColor[] <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private SKMatrix <Matrix>k__BackingField;
    [CompilerGeneratedAttribute]
private SKShaderTileMode <TileMode>k__BackingField;
    public SKPoint Start { get; public set; }
    public SKPoint End { get; public set; }
    public Single[] Positions { get; public set; }
    public SKColor[] Colors { get; public set; }
    public SKMatrix Matrix { get; public set; }
    public SKShaderTileMode TileMode { get; public set; }
    public SKLinearGradient(SKPoint start, SKPoint end, Single[] positions, SKColor[] colors, SKShaderTileMode tileMode, SKMatrix matrix);
    [CompilerGeneratedAttribute]
public SKPoint get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(SKPoint value);
    [CompilerGeneratedAttribute]
public SKPoint get_End();
    [CompilerGeneratedAttribute]
public void set_End(SKPoint value);
    [CompilerGeneratedAttribute]
public Single[] get_Positions();
    [CompilerGeneratedAttribute]
public void set_Positions(Single[] value);
    [CompilerGeneratedAttribute]
public SKColor[] get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(SKColor[] value);
    [CompilerGeneratedAttribute]
public SKMatrix get_Matrix();
    [CompilerGeneratedAttribute]
public void set_Matrix(SKMatrix value);
    [CompilerGeneratedAttribute]
public SKShaderTileMode get_TileMode();
    [CompilerGeneratedAttribute]
public void set_TileMode(SKShaderTileMode value);
    public SKPoint GetStartPoint(float x, float y, float width, float height);
    public SKPoint GetEndPoint(float x, float y, float width, float height);
    public sealed virtual void ApplyFill(SKPaint fill, SKRect bounds);
}
internal class FFImageLoading.Svg.Platform.SKOval : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    public SKPoint Center { get; }
    public float RadiusX { get; }
    public float RadiusY { get; }
    public SKRect BoundingRect { get; }
    public SKOval(SKPoint center, float rx, float ry);
    [CompilerGeneratedAttribute]
public SKPoint get_Center();
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    public SKRect get_BoundingRect();
}
internal class FFImageLoading.Svg.Platform.SKRadialGradient : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Positions>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColor[] <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private SKMatrix <Matrix>k__BackingField;
    [CompilerGeneratedAttribute]
private SKShaderTileMode <TileMode>k__BackingField;
    public SKPoint Center { get; public set; }
    public float Radius { get; public set; }
    public Single[] Positions { get; public set; }
    public SKColor[] Colors { get; public set; }
    public SKMatrix Matrix { get; public set; }
    public SKShaderTileMode TileMode { get; public set; }
    public SKRadialGradient(SKPoint center, float radius, Single[] positions, SKColor[] colors, SKShaderTileMode tileMode, SKMatrix matrix);
    [CompilerGeneratedAttribute]
public SKPoint get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(SKPoint value);
    [CompilerGeneratedAttribute]
public float get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(float value);
    [CompilerGeneratedAttribute]
public Single[] get_Positions();
    [CompilerGeneratedAttribute]
public void set_Positions(Single[] value);
    [CompilerGeneratedAttribute]
public SKColor[] get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(SKColor[] value);
    [CompilerGeneratedAttribute]
public SKMatrix get_Matrix();
    [CompilerGeneratedAttribute]
public void set_Matrix(SKMatrix value);
    [CompilerGeneratedAttribute]
public SKShaderTileMode get_TileMode();
    [CompilerGeneratedAttribute]
public void set_TileMode(SKShaderTileMode value);
    public SKPoint GetCenterPoint(float x, float y, float width, float height);
    public float GetRadius(float width, float height);
    public sealed virtual void ApplyFill(SKPaint fill, SKRect bounds);
}
internal class FFImageLoading.Svg.Platform.SKRoundedRect : ValueType {
    [CompilerGeneratedAttribute]
private SKRect <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    public SKRect Rect { get; }
    public float RadiusX { get; }
    public float RadiusY { get; }
    public bool IsRounded { get; }
    public SKRoundedRect(SKRect rect, float rx, float ry);
    [CompilerGeneratedAttribute]
public SKRect get_Rect();
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    public bool get_IsRounded();
}
[PreserveAttribute]
public class FFImageLoading.Svg.Platform.SKSvg : object {
    private static float DefaultPPI;
    private static bool DefaultThrowOnUnsupportedElement;
    private static IFormatProvider icult;
    private static XNamespace xlink;
    private static XNamespace svg;
    private static Char[] WS;
    private static Regex unitRe;
    private static Regex percRe;
    private static Regex urlRe;
    private static Regex keyValueRe;
    private static Regex WSRe;
    private Dictionary`2<string, string> styles;
    private Dictionary`2<string, XElement> defs;
    private Dictionary`2<string, SKSvgMask> masks;
    private Dictionary`2<string, ISKSvgFill> fillDefs;
    private Dictionary`2<XElement, string> elementFills;
    private Dictionary`2<XElement, string> strokeElementFills;
    private XmlReaderSettings xmlReaderSettings;
    [CompilerGeneratedAttribute]
private float <PixelsPerInch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnUnsupportedElement>k__BackingField;
    [CompilerGeneratedAttribute]
private SKRect <ViewBox>k__BackingField;
    [CompilerGeneratedAttribute]
private SKSize <CanvasSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPicture <Picture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public float PixelsPerInch { get; public set; }
    public bool ThrowOnUnsupportedElement { get; public set; }
    public SKRect ViewBox { get; private set; }
    public SKSize CanvasSize { get; private set; }
    public SKPicture Picture { get; private set; }
    public string Description { get; private set; }
    public string Title { get; private set; }
    public string Version { get; private set; }
    public SKSvg(float pixelsPerInch);
    public SKSvg(SKSize canvasSize);
    public SKSvg(float pixelsPerInch, SKSize canvasSize);
    private static SKSvg();
    [CompilerGeneratedAttribute]
public float get_PixelsPerInch();
    [CompilerGeneratedAttribute]
public void set_PixelsPerInch(float value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnUnsupportedElement();
    [CompilerGeneratedAttribute]
public void set_ThrowOnUnsupportedElement(bool value);
    [CompilerGeneratedAttribute]
public SKRect get_ViewBox();
    [CompilerGeneratedAttribute]
private void set_ViewBox(SKRect value);
    [CompilerGeneratedAttribute]
public SKSize get_CanvasSize();
    [CompilerGeneratedAttribute]
private void set_CanvasSize(SKSize value);
    [CompilerGeneratedAttribute]
public SKPicture get_Picture();
    [CompilerGeneratedAttribute]
private void set_Picture(SKPicture value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    public SKPicture Load(string filename, CancellationToken token);
    public SKPicture Load(Stream stream, CancellationToken token);
    public SKPicture Load(XmlReader reader, CancellationToken token);
    private static XmlParserContext CreateSvgXmlContext();
    private SKPicture Load(XDocument xdoc, CancellationToken token);
    private void LoadElements(IEnumerable`1<XElement> elements, SKCanvas canvas, SKPaint stroke, SKPaint fill, CancellationToken token);
    private void ReadElement(XElement e, SKCanvas canvas, SKPaint stroke, SKPaint fill, bool isMask, CancellationToken token);
    private SKSvgImage ReadImage(XElement e);
    private SKPath ReadElement(XElement e, Dictionary`2<string, string> style);
    private void RenderSymbol(XElement symbol, XElement use, SKCanvas canvas, SKPaint stroke, SKPaint fill, IEnumerable`1<XAttribute> attributes);
    private static void ApplyAttributesToElement(IEnumerable`1<XAttribute> attributes, XElement e, String[] ignoreAttributes);
    private void ScaleViewBoxToSize(SKCanvas canvas, SKRect viewBox, SKSize size, string aspectRatio);
    private SKOval ReadOval(XElement e);
    private SKCircle ReadCircle(XElement e);
    private SKLine ReadLine(XElement e);
    private SKRoundedRect ReadRoundedRect(XElement e);
    private SKText ReadText(XElement e, SKPaint stroke, SKPaint fill);
    private void ReadTextElement(XElement e, SKText spans, SKTextAlign textAlign, float baselineShift, SKPaint stroke, SKPaint fill);
    private void ReadFontAttributes(Dictionary`2<string, string> style, SKPaint& stroke, SKPaint& fill);
    private static SKPathFillType ReadFillRule(Dictionary`2<string, string> style, SKPathFillType defaultFillRule);
    private static bool TryParseFontStyle(string value, SKFontStyleSlant& fontStyle, SKFontStyleSlant defaultFontStyle);
    private bool TryParseFontWidth(string value, SKFontStyleWidth& fontStretch, SKFontStyleWidth defaultFontStretch);
    private bool TryParseFontWeight(string value, SKFontStyleWeight& fontWeight, SKFontStyleWeight defaultFontWeight);
    private void LogOrThrow(string message);
    private string GetString(Dictionary`2<string, string> style, string name, string defaultValue);
    private SKSvgMask ReadMask(Dictionary`2<string, string> style);
    private string ReadId(XElement d);
    private Dictionary`2<string, string> ReadStyle(string style);
    private Dictionary`2<string, string> ReadStyle(XElement e);
    private static bool HasSvgNamespace(XName name);
    private SKPoint ReadElementXY(XElement e);
    private SKRect ReadElementViewBox(XElement e);
    private SKSize ReadElementSize(XElement e);
    private Dictionary`2<string, string> ReadPaints(XElement e, SKPaint& stroke, SKPaint& fill, bool isGroup, bool isMask);
    private void ReadPaints(Dictionary`2<string, string> style, SKPaint& strokePaint, SKPaint& fillPaint, bool isGroup, String& fillId, String& strokeFillId);
    private SKStrokeCap ReadLineCap(string strokeLineCap, SKStrokeCap def);
    private SKStrokeJoin ReadLineJoin(string strokeLineJoin, SKStrokeJoin def);
    private SKPaint CreatePaint(bool stroke);
    private SKMatrix ReadTransform(string raw, SKPoint xy);
    private SKPath ReadClipPath(string raw);
    private SKPath ReadClipPathDefinition(XElement e);
    private SKTextAlign ReadTextAlignment(XElement element);
    private float ReadBaselineShift(XElement element);
    private SKRadialGradient ReadRadialGradient(XElement e);
    private SKLinearGradient ReadLinearGradient(XElement e);
    private static SKShaderTileMode ReadSpreadMethod(XElement e);
    private XElement ReadDefinition(XElement e);
    private XElement ReadHref(XElement e);
    private static string ReadHrefString(XElement e);
    private SortedDictionary`2<float, SKColor> ReadStops(XElement e);
    private float ReadOpacity(Dictionary`2<string, string> style);
    private float ReadNumber(Dictionary`2<string, string> style, string key, float defaultValue);
    private Byte[] ReadUriBytes(string uri);
    private float ReadNumber(string raw);
    private float ReadNumber(XAttribute a, float defaultValue);
    private float ReadNumber(XAttribute a);
    private Nullable`1<float> ReadOptionalNumber(XAttribute a);
    private SKRect ReadRectangle(string s);
}
internal class FFImageLoading.Svg.Platform.SKSvgImage : ValueType {
    [CompilerGeneratedAttribute]
private SKRect <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    public SKRect Rect { get; }
    public string Uri { get; }
    public Byte[] Bytes { get; }
    public SKSvgImage(SKRect rect, string uri, Byte[] bytes);
    [CompilerGeneratedAttribute]
public SKRect get_Rect();
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
}
internal class FFImageLoading.Svg.Platform.SKSvgMask : object {
    [CompilerGeneratedAttribute]
private SKPaint <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPaint <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    public SKPaint Stroke { get; }
    public SKPaint Fill { get; }
    public XElement Element { get; }
    public SKSvgMask(SKPaint stroke, SKPaint fill, XElement element);
    [CompilerGeneratedAttribute]
public SKPaint get_Stroke();
    [CompilerGeneratedAttribute]
public SKPaint get_Fill();
    [CompilerGeneratedAttribute]
public XElement get_Element();
}
internal class FFImageLoading.Svg.Platform.SKText : object {
    private List`1<SKTextSpan> spans;
    [CompilerGeneratedAttribute]
private SKPoint <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private SKTextAlign <TextAlign>k__BackingField;
    public SKPoint Location { get; }
    public SKTextAlign TextAlign { get; }
    public SKText(SKPoint location, SKTextAlign textAlign);
    public void Append(SKTextSpan span);
    [CompilerGeneratedAttribute]
public SKPoint get_Location();
    [CompilerGeneratedAttribute]
public SKTextAlign get_TextAlign();
    public float MeasureTextWidth();
    public sealed virtual IEnumerator`1<SKTextSpan> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class FFImageLoading.Svg.Platform.SKTextSpan : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPaint <Stroke>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPaint <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <BaselineShift>k__BackingField;
    public string Text { get; }
    public SKPaint Stroke { get; }
    public SKPaint Fill { get; }
    public Nullable`1<float> X { get; }
    public Nullable`1<float> Y { get; }
    public Nullable`1<float> BaselineShift { get; }
    public SKTextSpan(string text, SKPaint stroke, SKPaint fill, Nullable`1<float> x, Nullable`1<float> y, Nullable`1<float> baselineShift);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public SKPaint get_Stroke();
    [CompilerGeneratedAttribute]
public SKPaint get_Fill();
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_X();
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Y();
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_BaselineShift();
    public float MeasureTextWidth();
}
[PreserveAttribute]
public class FFImageLoading.Svg.Platform.SvgDataResolver : object {
    private static object _encodingLock;
    private static CGColorSpace _colorSpace;
    [CompilerGeneratedAttribute]
private bool <UseDipUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VectorHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VectorWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ReplaceStringMap>k__BackingField;
    public Configuration Configuration { get; }
    public bool UseDipUnits { get; private set; }
    public int VectorHeight { get; private set; }
    public int VectorWidth { get; private set; }
    public Dictionary`2<string, string> ReplaceStringMap { get; public set; }
    public SvgDataResolver(int vectorWidth, int vectorHeight, bool useDipUnits, Dictionary`2<string, string> replaceStringMap);
    private static SvgDataResolver();
    public Configuration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseDipUnits();
    [CompilerGeneratedAttribute]
private void set_UseDipUnits(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_VectorHeight();
    [CompilerGeneratedAttribute]
private void set_VectorHeight(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_VectorWidth();
    [CompilerGeneratedAttribute]
private void set_VectorWidth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_ReplaceStringMap();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplaceStringMap(Dictionary`2<string, string> value);
    [AsyncStateMachineAttribute("FFImageLoading.Svg.Platform.SvgDataResolver/<Decode>d__21")]
private Task`1<DataResolverResult> Decode(SKPicture picture, SKBitmap bitmap, DataResolverResult resolvedData);
    [AsyncStateMachineAttribute("FFImageLoading.Svg.Platform.SvgDataResolver/<Resolve>d__22")]
public sealed virtual Task`1<DataResolverResult> Resolve(string identifier, TaskParameter parameters, CancellationToken token);
}
