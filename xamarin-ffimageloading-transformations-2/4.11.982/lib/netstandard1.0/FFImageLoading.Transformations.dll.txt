[PreserveAttribute]
public class FFImageLoading.Transformations.BlurredTransformation : object {
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public double Radius { get; public set; }
    public string Key { get; }
    public BlurredTransformation(double radius);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    public sealed virtual string get_Key();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.CircleTransformation : object {
    [CompilerGeneratedAttribute]
private double <BorderSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BorderHexColor>k__BackingField;
    public double BorderSize { get; public set; }
    public string BorderHexColor { get; public set; }
    public string Key { get; }
    public CircleTransformation(double borderSize, string borderHexColor);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    [CompilerGeneratedAttribute]
public double get_BorderSize();
    [CompilerGeneratedAttribute]
public void set_BorderSize(double value);
    [CompilerGeneratedAttribute]
public string get_BorderHexColor();
    [CompilerGeneratedAttribute]
public void set_BorderHexColor(string value);
    public sealed virtual string get_Key();
}
public class FFImageLoading.Transformations.ColorFillTransformation : object {
    [CompilerGeneratedAttribute]
private string <HexColor>k__BackingField;
    public string HexColor { get; public set; }
    public string Key { get; }
    public ColorFillTransformation(string hexColor);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    [CompilerGeneratedAttribute]
public string get_HexColor();
    [CompilerGeneratedAttribute]
public void set_HexColor(string value);
    public sealed virtual string get_Key();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.ColorSpaceTransformation : object {
    [CompilerGeneratedAttribute]
private Single[][] <RGBAWMatrix>k__BackingField;
    public Single[][] RGBAWMatrix { get; public set; }
    public string Key { get; }
    public ColorSpaceTransformation(Single[][] rgbawMatrix);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    [CompilerGeneratedAttribute]
public Single[][] get_RGBAWMatrix();
    [CompilerGeneratedAttribute]
public void set_RGBAWMatrix(Single[][] value);
    public sealed virtual string get_Key();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.CornersTransformation : object {
    [CompilerGeneratedAttribute]
private double <TopLeftCornerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TopRightCornerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BottomLeftCornerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BottomRightCornerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CropWidthRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CropHeightRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private CornerTransformType <CornersTransformType>k__BackingField;
    public double TopLeftCornerSize { get; public set; }
    public double TopRightCornerSize { get; public set; }
    public double BottomLeftCornerSize { get; public set; }
    public double BottomRightCornerSize { get; public set; }
    public double CropWidthRatio { get; public set; }
    public double CropHeightRatio { get; public set; }
    public CornerTransformType CornersTransformType { get; public set; }
    public string Key { get; }
    public CornersTransformation(double cornersSize, CornerTransformType cornersTransformType);
    public CornersTransformation(double topLeftCornerSize, double topRightCornerSize, double bottomLeftCornerSize, double bottomRightCornerSize, CornerTransformType cornersTransformType);
    public CornersTransformation(double cornersSize, CornerTransformType cornersTransformType, double cropWidthRatio, double cropHeightRatio);
    public CornersTransformation(double topLeftCornerSize, double topRightCornerSize, double bottomLeftCornerSize, double bottomRightCornerSize, CornerTransformType cornersTransformType, double cropWidthRatio, double cropHeightRatio);
    [CompilerGeneratedAttribute]
public double get_TopLeftCornerSize();
    [CompilerGeneratedAttribute]
public void set_TopLeftCornerSize(double value);
    [CompilerGeneratedAttribute]
public double get_TopRightCornerSize();
    [CompilerGeneratedAttribute]
public void set_TopRightCornerSize(double value);
    [CompilerGeneratedAttribute]
public double get_BottomLeftCornerSize();
    [CompilerGeneratedAttribute]
public void set_BottomLeftCornerSize(double value);
    [CompilerGeneratedAttribute]
public double get_BottomRightCornerSize();
    [CompilerGeneratedAttribute]
public void set_BottomRightCornerSize(double value);
    [CompilerGeneratedAttribute]
public double get_CropWidthRatio();
    [CompilerGeneratedAttribute]
public void set_CropWidthRatio(double value);
    [CompilerGeneratedAttribute]
public double get_CropHeightRatio();
    [CompilerGeneratedAttribute]
public void set_CropHeightRatio(double value);
    [CompilerGeneratedAttribute]
public CornerTransformType get_CornersTransformType();
    [CompilerGeneratedAttribute]
public void set_CornersTransformType(CornerTransformType value);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    public sealed virtual string get_Key();
}
[FlagsAttribute]
public enum FFImageLoading.Transformations.CornerTransformType : Enum {
    public int value__;
    public static CornerTransformType TopLeftCut;
    public static CornerTransformType TopRightCut;
    public static CornerTransformType BottomLeftCut;
    public static CornerTransformType BottomRightCut;
    public static CornerTransformType TopLeftRounded;
    public static CornerTransformType TopRightRounded;
    public static CornerTransformType BottomLeftRounded;
    public static CornerTransformType BottomRightRounded;
    public static CornerTransformType AllCut;
    public static CornerTransformType LeftCut;
    public static CornerTransformType RightCut;
    public static CornerTransformType TopCut;
    public static CornerTransformType BottomCut;
    public static CornerTransformType AllRounded;
    public static CornerTransformType LeftRounded;
    public static CornerTransformType RightRounded;
    public static CornerTransformType TopRounded;
    public static CornerTransformType BottomRounded;
}
[PreserveAttribute]
public class FFImageLoading.Transformations.CropTransformation : object {
    [CompilerGeneratedAttribute]
private double <ZoomFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <XOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <YOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CropWidthRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CropHeightRatio>k__BackingField;
    public double ZoomFactor { get; public set; }
    public double XOffset { get; public set; }
    public double YOffset { get; public set; }
    public double CropWidthRatio { get; public set; }
    public double CropHeightRatio { get; public set; }
    public string Key { get; }
    public CropTransformation(double zoomFactor, double xOffset, double yOffset);
    public CropTransformation(double zoomFactor, double xOffset, double yOffset, double cropWidthRatio, double cropHeightRatio);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    [CompilerGeneratedAttribute]
public double get_ZoomFactor();
    [CompilerGeneratedAttribute]
public void set_ZoomFactor(double value);
    [CompilerGeneratedAttribute]
public double get_XOffset();
    [CompilerGeneratedAttribute]
public void set_XOffset(double value);
    [CompilerGeneratedAttribute]
public double get_YOffset();
    [CompilerGeneratedAttribute]
public void set_YOffset(double value);
    [CompilerGeneratedAttribute]
public double get_CropWidthRatio();
    [CompilerGeneratedAttribute]
public void set_CropWidthRatio(double value);
    [CompilerGeneratedAttribute]
public double get_CropHeightRatio();
    [CompilerGeneratedAttribute]
public void set_CropHeightRatio(double value);
    public sealed virtual string get_Key();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.FlipTransformation : object {
    [CompilerGeneratedAttribute]
private FlipType <FlipType>k__BackingField;
    public FlipType FlipType { get; public set; }
    public string Key { get; }
    public FlipTransformation(FlipType flipType);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    [CompilerGeneratedAttribute]
public FlipType get_FlipType();
    [CompilerGeneratedAttribute]
public void set_FlipType(FlipType value);
    public sealed virtual string get_Key();
}
public enum FFImageLoading.Transformations.FlipType : Enum {
    public int value__;
    public static FlipType Horizontal;
    public static FlipType Vertical;
}
[PreserveAttribute]
public class FFImageLoading.Transformations.GrayscaleTransformation : object {
    public string Key { get; }
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    public sealed virtual string get_Key();
}
internal static class FFImageLoading.Transformations.Helpers : object {
    private static string _doNotReferenceMessage;
    public static void ThrowOrDefault();
    public static T ThrowOrDefault();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.RotateTransformation : object {
    [CompilerGeneratedAttribute]
private double <Degrees>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CCW>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resize>k__BackingField;
    public double Degrees { get; public set; }
    public bool CCW { get; public set; }
    public bool Resize { get; public set; }
    public string Key { get; }
    public RotateTransformation(double degrees);
    public RotateTransformation(double degrees, bool ccw);
    public RotateTransformation(double degrees, bool ccw, bool resize);
    [CompilerGeneratedAttribute]
public double get_Degrees();
    [CompilerGeneratedAttribute]
public void set_Degrees(double value);
    [CompilerGeneratedAttribute]
public bool get_CCW();
    [CompilerGeneratedAttribute]
public void set_CCW(bool value);
    [CompilerGeneratedAttribute]
public bool get_Resize();
    [CompilerGeneratedAttribute]
public void set_Resize(bool value);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    public sealed virtual string get_Key();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.RoundedTransformation : object {
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CropWidthRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CropHeightRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BorderSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BorderHexColor>k__BackingField;
    public double Radius { get; public set; }
    public double CropWidthRatio { get; public set; }
    public double CropHeightRatio { get; public set; }
    public double BorderSize { get; public set; }
    public string BorderHexColor { get; public set; }
    public string Key { get; }
    public RoundedTransformation(double radius);
    public RoundedTransformation(double radius, double cropWidthRatio, double cropHeightRatio);
    public RoundedTransformation(double radius, double cropWidthRatio, double cropHeightRatio, double borderSize, string borderHexColor);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public double get_CropWidthRatio();
    [CompilerGeneratedAttribute]
public void set_CropWidthRatio(double value);
    [CompilerGeneratedAttribute]
public double get_CropHeightRatio();
    [CompilerGeneratedAttribute]
public void set_CropHeightRatio(double value);
    [CompilerGeneratedAttribute]
public double get_BorderSize();
    [CompilerGeneratedAttribute]
public void set_BorderSize(double value);
    [CompilerGeneratedAttribute]
public string get_BorderHexColor();
    [CompilerGeneratedAttribute]
public void set_BorderHexColor(string value);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    public sealed virtual string get_Key();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.SepiaTransformation : object {
    public string Key { get; }
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    public sealed virtual string get_Key();
}
[PreserveAttribute]
public class FFImageLoading.Transformations.TintTransformation : object {
    [CompilerGeneratedAttribute]
private bool <EnableSolidColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HexColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <R>k__BackingField;
    [CompilerGeneratedAttribute]
private int <G>k__BackingField;
    [CompilerGeneratedAttribute]
private int <B>k__BackingField;
    [CompilerGeneratedAttribute]
private int <A>k__BackingField;
    public bool EnableSolidColor { get; public set; }
    public string HexColor { get; public set; }
    public int R { get; public set; }
    public int G { get; public set; }
    public int B { get; public set; }
    public int A { get; public set; }
    public string Key { get; }
    public TintTransformation(int r, int g, int b, int a);
    public TintTransformation(string hexColor);
    [CompilerGeneratedAttribute]
public bool get_EnableSolidColor();
    [CompilerGeneratedAttribute]
public void set_EnableSolidColor(bool value);
    [CompilerGeneratedAttribute]
public string get_HexColor();
    [CompilerGeneratedAttribute]
public void set_HexColor(string value);
    [CompilerGeneratedAttribute]
public int get_R();
    [CompilerGeneratedAttribute]
public void set_R(int value);
    [CompilerGeneratedAttribute]
public int get_G();
    [CompilerGeneratedAttribute]
public void set_G(int value);
    [CompilerGeneratedAttribute]
public int get_B();
    [CompilerGeneratedAttribute]
public void set_B(int value);
    [CompilerGeneratedAttribute]
public int get_A();
    [CompilerGeneratedAttribute]
public void set_A(int value);
    public sealed virtual IBitmap Transform(IBitmap sourceBitmap, string path, ImageSource source, bool isPlaceholder, string key);
    public sealed virtual string get_Key();
}
