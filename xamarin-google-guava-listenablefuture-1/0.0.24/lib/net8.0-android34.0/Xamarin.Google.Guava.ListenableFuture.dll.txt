internal class _JniMarshal_PP_L : MulticastDelegate {
    public _JniMarshal_PP_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PP_Z : MulticastDelegate {
    public _JniMarshal_PP_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPJL_L : MulticastDelegate {
    public _JniMarshal_PPJL_L(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr jnienv, IntPtr klass, long p0, IntPtr p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, long p0, IntPtr p1, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPLL_V : MulticastDelegate {
    public _JniMarshal_PPLL_V(object object, IntPtr method);
    public virtual void Invoke(IntPtr jnienv, IntPtr klass, IntPtr p0, IntPtr p1);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, IntPtr p0, IntPtr p1, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class _JniMarshal_PPZ_Z : MulticastDelegate {
    public _JniMarshal_PPZ_Z(object object, IntPtr method);
    public virtual bool Invoke(IntPtr jnienv, IntPtr klass, bool p0);
    public virtual IAsyncResult BeginInvoke(IntPtr jnienv, IntPtr klass, bool p0, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[RegisterAttribute("com/google/common/util/concurrent/ListenableFuture", "", "Google.Common.Util.Concurrent.IListenableFutureInvoker")]
[JavaTypeParametersAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public interface Google.Common.Util.Concurrent.IListenableFuture {
    [NullableContextAttribute("2")]
[RegisterAttribute("addListener", "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)V", "GetAddListener_Ljava_lang_Runnable_Ljava_util_concurrent_Executor_Handler:Google.Common.Util.Concurrent.IListenableFutureInvoker, Xamarin.Google.Guava.ListenableFuture")]
public abstract virtual void AddListener(IRunnable p0, IExecutor p1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("com/google/common/util/concurrent/ListenableFuture")]
internal class Google.Common.Util.Concurrent.IListenableFutureInvoker : Object {
    private static JniPeerMembers _members;
    private IntPtr class_ref;
    [NullableAttribute("2")]
private static Delegate cb_addListener_Ljava_lang_Runnable_Ljava_util_concurrent_Executor_;
    private IntPtr id_addListener_Ljava_lang_Runnable_Ljava_util_concurrent_Executor_;
    [NullableAttribute("2")]
private static Delegate cb_isCancelled;
    private IntPtr id_isCancelled;
    [NullableAttribute("2")]
private static Delegate cb_isDone;
    private IntPtr id_isDone;
    [NullableAttribute("2")]
private static Delegate cb_cancel_Z;
    private IntPtr id_cancel_Z;
    [NullableAttribute("2")]
private static Delegate cb_get;
    private IntPtr id_get;
    [NullableAttribute("2")]
private static Delegate cb_get_JLjava_util_concurrent_TimeUnit_;
    private IntPtr id_get_JLjava_util_concurrent_TimeUnit_;
    private static IntPtr java_class_ref { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
public JniPeerMembers JniPeerMembers { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected IntPtr ThresholdClass { get; }
    [DebuggerBrowsableAttribute("0")]
[EditorBrowsableAttribute("1")]
protected Type ThresholdType { get; }
    public bool IsCancelled { get; }
    public bool IsDone { get; }
    public IListenableFutureInvoker(IntPtr handle, JniHandleOwnership transfer);
    private static IListenableFutureInvoker();
    private static IntPtr get_java_class_ref();
    public virtual JniPeerMembers get_JniPeerMembers();
    protected virtual IntPtr get_ThresholdClass();
    protected virtual Type get_ThresholdType();
    [NullableContextAttribute("2")]
public static IListenableFuture GetObject(IntPtr handle, JniHandleOwnership transfer);
    private static IntPtr Validate(IntPtr handle);
    protected virtual void Dispose(bool disposing);
    private static Delegate GetAddListener_Ljava_lang_Runnable_Ljava_util_concurrent_Executor_Handler();
    private static void n_AddListener_Ljava_lang_Runnable_Ljava_util_concurrent_Executor_(IntPtr jnienv, IntPtr native__this, IntPtr native_p0, IntPtr native_p1);
    [NullableContextAttribute("2")]
public sealed virtual void AddListener(IRunnable p0, IExecutor p1);
    private static Delegate GetIsCancelledHandler();
    private static bool n_IsCancelled(IntPtr jnienv, IntPtr native__this);
    public sealed virtual bool get_IsCancelled();
    private static Delegate GetIsDoneHandler();
    private static bool n_IsDone(IntPtr jnienv, IntPtr native__this);
    public sealed virtual bool get_IsDone();
    private static Delegate GetCancel_ZHandler();
    private static bool n_Cancel_Z(IntPtr jnienv, IntPtr native__this, bool mayInterruptIfRunning);
    public sealed virtual bool Cancel(bool mayInterruptIfRunning);
    private static Delegate GetGetHandler();
    private static IntPtr n_Get(IntPtr jnienv, IntPtr native__this);
    [NullableContextAttribute("2")]
public sealed virtual Object Get();
    private static Delegate GetGet_JLjava_util_concurrent_TimeUnit_Handler();
    private static IntPtr n_Get_JLjava_util_concurrent_TimeUnit_(IntPtr jnienv, IntPtr native__this, long timeout, IntPtr native_unit);
    [NullableContextAttribute("2")]
public sealed virtual Object Get(long timeout, TimeUnit unit);
}
internal class Java.Interop.__TypeRegistrations : object {
    public static void RegisterPackages();
    [NullableContextAttribute("1")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2057")]
private static Type Lookup(String[] mappings, string javaType);
}
