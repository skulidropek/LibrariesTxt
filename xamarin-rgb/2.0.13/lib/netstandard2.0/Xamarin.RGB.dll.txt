public class Xamarin.RGB.ColouredElement : ContentView {
    private bool contentSet;
    private bool breathing;
    private Label _label;
    private Entry _entry;
    private Editor _editor;
    private Button _button;
    public double HueValue;
    public double SaturationValue;
    public double LuminosityValue;
    public double AlphaValue;
    public static BindableProperty SpeedProperty;
    public static BindableProperty HueProperty;
    public static BindableProperty SaturationProperty;
    public static BindableProperty LuminosityProperty;
    public static BindableProperty AlphaProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty PlaceholderColorProperty;
    public static BindableProperty StyleProperty;
    public int Speed { get; public set; }
    public bool Hue { get; public set; }
    public bool Saturation { get; public set; }
    public bool Luminosity { get; public set; }
    public bool Alpha { get; public set; }
    public bool BackgroundColor { get; public set; }
    public bool TextColor { get; public set; }
    public bool PlaceholderColor { get; public set; }
    public CycleStyle Style { get; public set; }
    private static ColouredElement();
    public sealed virtual int get_Speed();
    public sealed virtual void set_Speed(int value);
    public sealed virtual bool get_Hue();
    public sealed virtual void set_Hue(bool value);
    public sealed virtual bool get_Saturation();
    public sealed virtual void set_Saturation(bool value);
    public sealed virtual bool get_Luminosity();
    public sealed virtual void set_Luminosity(bool value);
    public sealed virtual bool get_Alpha();
    public sealed virtual void set_Alpha(bool value);
    public bool get_BackgroundColor();
    public void set_BackgroundColor(bool value);
    public bool get_TextColor();
    public void set_TextColor(bool value);
    public bool get_PlaceholderColor();
    public void set_PlaceholderColor(bool value);
    public sealed virtual CycleStyle get_Style();
    public sealed virtual void set_Style(CycleStyle value);
    public void CycleValues();
    public void Cycle(Double& value, CycleStyle style);
    public void UpdateBackgroundColor();
    public void UpdateTextColor();
    public void UpdatePlaceholderColor();
    public void Ctor();
    public double Offset(double value, bool shouldChange);
    [AsyncStateMachineAttribute("Xamarin.RGB.ColouredElement/<<-ctor>b__46_0>d")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task <.ctor>b__46_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__46_1();
}
public enum Xamarin.RGB.CycleStyle : Enum {
    public int value__;
    public static CycleStyle Forwards;
    public static CycleStyle Backwards;
    public static CycleStyle Breathing;
}
public interface Xamarin.RGB.IColoured {
    public int Speed { get; public set; }
    public bool Hue { get; public set; }
    public bool Saturation { get; public set; }
    public bool Luminosity { get; public set; }
    public bool Alpha { get; public set; }
    public CycleStyle Style { get; public set; }
    public abstract virtual int get_Speed();
    public abstract virtual void set_Speed(int value);
    public abstract virtual bool get_Hue();
    public abstract virtual void set_Hue(bool value);
    public abstract virtual bool get_Saturation();
    public abstract virtual void set_Saturation(bool value);
    public abstract virtual bool get_Luminosity();
    public abstract virtual void set_Luminosity(bool value);
    public abstract virtual bool get_Alpha();
    public abstract virtual void set_Alpha(bool value);
    public abstract virtual CycleStyle get_Style();
    public abstract virtual void set_Style(CycleStyle value);
}
