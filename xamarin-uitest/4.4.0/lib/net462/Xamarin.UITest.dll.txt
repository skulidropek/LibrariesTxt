[ExtensionAttribute]
internal static class System.Reflection.ReverseTypeExtender : object {
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericParameter(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
}
[ExtensionAttribute]
internal static class TinyIoC.AssemblyExtensions : object {
    [ExtensionAttribute]
public static Type[] SafeGetTypes(Assembly assembly);
}
internal enum TinyIoC.DuplicateImplementationActions : Enum {
    public int value__;
    public static DuplicateImplementationActions RegisterSingle;
    public static DuplicateImplementationActions RegisterMultiple;
    public static DuplicateImplementationActions Fail;
}
internal class TinyIoC.NamedParameterOverloads : Dictionary`2<string, object> {
    private static NamedParameterOverloads _Default;
    public static NamedParameterOverloads Default { get; }
    public NamedParameterOverloads(IDictionary`2<string, object> data);
    private static NamedParameterOverloads();
    public static NamedParameterOverloads FromIDictionary(IDictionary`2<string, object> data);
    public static NamedParameterOverloads get_Default();
}
internal enum TinyIoC.NamedResolutionFailureActions : Enum {
    public int value__;
    public static NamedResolutionFailureActions AttemptUnnamedResolution;
    public static NamedResolutionFailureActions Fail;
}
internal class TinyIoC.ResolveOptions : object {
    private static ResolveOptions _Default;
    private static ResolveOptions _FailUnregisteredAndNameNotFound;
    private static ResolveOptions _FailUnregisteredOnly;
    private static ResolveOptions _FailNameNotFoundOnly;
    private UnregisteredResolutionActions _UnregisteredResolutionAction;
    private NamedResolutionFailureActions _NamedResolutionFailureAction;
    public UnregisteredResolutionActions UnregisteredResolutionAction { get; public set; }
    public NamedResolutionFailureActions NamedResolutionFailureAction { get; public set; }
    public static ResolveOptions Default { get; }
    public static ResolveOptions FailNameNotFoundOnly { get; }
    public static ResolveOptions FailUnregisteredAndNameNotFound { get; }
    public static ResolveOptions FailUnregisteredOnly { get; }
    private static ResolveOptions();
    public UnregisteredResolutionActions get_UnregisteredResolutionAction();
    public void set_UnregisteredResolutionAction(UnregisteredResolutionActions value);
    public NamedResolutionFailureActions get_NamedResolutionFailureAction();
    public void set_NamedResolutionFailureAction(NamedResolutionFailureActions value);
    public static ResolveOptions get_Default();
    public static ResolveOptions get_FailNameNotFoundOnly();
    public static ResolveOptions get_FailUnregisteredAndNameNotFound();
    public static ResolveOptions get_FailUnregisteredOnly();
}
[DefaultMemberAttribute("Item")]
internal class TinyIoC.SafeDictionary`2 : object {
    private ReaderWriterLockSlim _padlock;
    private Dictionary`2<TKey, TValue> _Dictionary;
    unknown TValue Item {public set; }
    public IEnumerable`1<TKey> Keys { get; }
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& value);
    public bool Remove(TKey key);
    public void Clear();
    public IEnumerable`1<TKey> get_Keys();
    public sealed virtual void Dispose();
}
internal class TinyIoC.TinyIoCAutoRegistrationException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCAutoRegistrationException(Type registerType, IEnumerable`1<Type> types);
    public TinyIoCAutoRegistrationException(Type registerType, IEnumerable`1<Type> types, Exception innerException);
    private static string GetTypesString(IEnumerable`1<Type> types);
}
internal class TinyIoC.TinyIoCConstructorResolutionException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCConstructorResolutionException(Type type);
    public TinyIoCConstructorResolutionException(Type type, Exception innerException);
    public TinyIoCConstructorResolutionException(string message, Exception innerException);
    public TinyIoCConstructorResolutionException(string message);
}
internal class TinyIoC.TinyIoCContainer : object {
    private static TinyIoCContainer _Current;
    private SafeDictionary`2<TypeRegistration, ObjectFactoryBase> _RegisteredTypes;
    private static SafeDictionary`2<ConstructorInfo, ObjectConstructor> _ObjectConstructorCache;
    private TinyIoCContainer _Parent;
    private object _AutoRegisterLock;
    private bool disposed;
    public static TinyIoCContainer Current { get; }
    private static TinyIoCContainer();
    private TinyIoCContainer(TinyIoCContainer parent);
    public TinyIoCContainer GetChildContainer();
    public void AutoRegister();
    public void AutoRegister(Func`2<Type, bool> registrationPredicate);
    public void AutoRegister(DuplicateImplementationActions duplicateAction);
    public void AutoRegister(DuplicateImplementationActions duplicateAction, Func`2<Type, bool> registrationPredicate);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies, Func`2<Type, bool> registrationPredicate);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies, DuplicateImplementationActions duplicateAction);
    public void AutoRegister(IEnumerable`1<Assembly> assemblies, DuplicateImplementationActions duplicateAction, Func`2<Type, bool> registrationPredicate);
    public RegisterOptions Register(Type registerType);
    public RegisterOptions Register(Type registerType, string name);
    public RegisterOptions Register(Type registerType, Type registerImplementation);
    public RegisterOptions Register(Type registerType, Type registerImplementation, string name);
    public RegisterOptions Register(Type registerType, object instance);
    public RegisterOptions Register(Type registerType, object instance, string name);
    public RegisterOptions Register(Type registerType, Type registerImplementation, object instance);
    public RegisterOptions Register(Type registerType, Type registerImplementation, object instance, string name);
    public RegisterOptions Register(Type registerType, Func`3<TinyIoCContainer, NamedParameterOverloads, object> factory);
    public RegisterOptions Register(Type registerType, Func`3<TinyIoCContainer, NamedParameterOverloads, object> factory, string name);
    public RegisterOptions Register();
    public RegisterOptions Register(string name);
    public RegisterOptions Register();
    public RegisterOptions Register(string name);
    public RegisterOptions Register(RegisterType instance);
    public RegisterOptions Register(RegisterType instance, string name);
    public RegisterOptions Register(RegisterImplementation instance);
    public RegisterOptions Register(RegisterImplementation instance, string name);
    public RegisterOptions Register(Func`3<TinyIoCContainer, NamedParameterOverloads, RegisterType> factory);
    public RegisterOptions Register(Func`3<TinyIoCContainer, NamedParameterOverloads, RegisterType> factory, string name);
    public MultiRegisterOptions RegisterMultiple(IEnumerable`1<Type> implementationTypes);
    public MultiRegisterOptions RegisterMultiple(Type registrationType, IEnumerable`1<Type> implementationTypes);
    public object Resolve(Type resolveType);
    public object Resolve(Type resolveType, ResolveOptions options);
    public object Resolve(Type resolveType, string name);
    public object Resolve(Type resolveType, string name, ResolveOptions options);
    public object Resolve(Type resolveType, NamedParameterOverloads parameters);
    public object Resolve(Type resolveType, NamedParameterOverloads parameters, ResolveOptions options);
    public object Resolve(Type resolveType, string name, NamedParameterOverloads parameters);
    public object Resolve(Type resolveType, string name, NamedParameterOverloads parameters, ResolveOptions options);
    public ResolveType Resolve();
    public ResolveType Resolve(ResolveOptions options);
    public ResolveType Resolve(string name);
    public ResolveType Resolve(string name, ResolveOptions options);
    public ResolveType Resolve(NamedParameterOverloads parameters);
    public ResolveType Resolve(NamedParameterOverloads parameters, ResolveOptions options);
    public ResolveType Resolve(string name, NamedParameterOverloads parameters);
    public ResolveType Resolve(string name, NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve(Type resolveType);
    private bool CanResolve(Type resolveType, string name);
    public bool CanResolve(Type resolveType, ResolveOptions options);
    public bool CanResolve(Type resolveType, string name, ResolveOptions options);
    public bool CanResolve(Type resolveType, NamedParameterOverloads parameters);
    public bool CanResolve(Type resolveType, string name, NamedParameterOverloads parameters);
    public bool CanResolve(Type resolveType, NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve(Type resolveType, string name, NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve();
    public bool CanResolve(string name);
    public bool CanResolve(ResolveOptions options);
    public bool CanResolve(string name, ResolveOptions options);
    public bool CanResolve(NamedParameterOverloads parameters);
    public bool CanResolve(string name, NamedParameterOverloads parameters);
    public bool CanResolve(NamedParameterOverloads parameters, ResolveOptions options);
    public bool CanResolve(string name, NamedParameterOverloads parameters, ResolveOptions options);
    public bool TryResolve(Type resolveType, Object& resolvedType);
    public bool TryResolve(Type resolveType, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(Type resolveType, NamedParameterOverloads parameters, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, NamedParameterOverloads parameters, Object& resolvedType);
    public bool TryResolve(Type resolveType, NamedParameterOverloads parameters, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(Type resolveType, string name, NamedParameterOverloads parameters, ResolveOptions options, Object& resolvedType);
    public bool TryResolve(ResolveType& resolvedType);
    public bool TryResolve(ResolveOptions options, ResolveType& resolvedType);
    public bool TryResolve(string name, ResolveType& resolvedType);
    public bool TryResolve(string name, ResolveOptions options, ResolveType& resolvedType);
    public bool TryResolve(NamedParameterOverloads parameters, ResolveType& resolvedType);
    public bool TryResolve(string name, NamedParameterOverloads parameters, ResolveType& resolvedType);
    public bool TryResolve(NamedParameterOverloads parameters, ResolveOptions options, ResolveType& resolvedType);
    public bool TryResolve(string name, NamedParameterOverloads parameters, ResolveOptions options, ResolveType& resolvedType);
    public IEnumerable`1<object> ResolveAll(Type resolveType, bool includeUnnamed);
    public IEnumerable`1<object> ResolveAll(Type resolveType);
    public IEnumerable`1<ResolveType> ResolveAll(bool includeUnnamed);
    public IEnumerable`1<ResolveType> ResolveAll();
    public void BuildUp(object input);
    public void BuildUp(object input, ResolveOptions resolveOptions);
    public static TinyIoCContainer get_Current();
    private void AutoRegisterInternal(IEnumerable`1<Assembly> assemblies, DuplicateImplementationActions duplicateAction, Func`2<Type, bool> registrationPredicate);
    private bool IsIgnoredAssembly(Assembly assembly);
    private bool IsIgnoredType(Type type, Func`2<Type, bool> registrationPredicate);
    private void RegisterDefaultTypes();
    private ObjectFactoryBase GetCurrentFactory(TypeRegistration registration);
    private RegisterOptions RegisterInternal(Type registerType, string name, ObjectFactoryBase factory);
    private RegisterOptions AddUpdateRegistration(TypeRegistration typeRegistration, ObjectFactoryBase factory);
    private void RemoveRegistration(TypeRegistration typeRegistration);
    private ObjectFactoryBase GetDefaultObjectFactory(Type registerType, Type registerImplementation);
    private bool CanResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options);
    private bool IsIEnumerableRequest(Type type);
    private bool IsAutomaticLazyFactoryRequest(Type type);
    private ObjectFactoryBase GetParentObjectFactory(TypeRegistration registration);
    private object ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options);
    private object GetLazyAutomaticFactoryRequest(Type type);
    private object GetIEnumerableRequest(Type type);
    private bool CanConstruct(ConstructorInfo ctor, NamedParameterOverloads parameters, ResolveOptions options);
    private ConstructorInfo GetBestConstructor(Type type, NamedParameterOverloads parameters, ResolveOptions options);
    private IEnumerable`1<ConstructorInfo> GetTypeConstructors(Type type);
    private object ConstructType(Type requestedType, Type implementationType, ResolveOptions options);
    private object ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, ResolveOptions options);
    private object ConstructType(Type requestedType, Type implementationType, NamedParameterOverloads parameters, ResolveOptions options);
    private object ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options);
    private static ObjectConstructor CreateObjectConstructionDelegateWithCache(ConstructorInfo constructor);
    private void BuildUpInternal(object input, ResolveOptions resolveOptions);
    private IEnumerable`1<TypeRegistration> GetParentRegistrationsForType(Type resolveType);
    private IEnumerable`1<object> ResolveAllInternal(Type resolveType, bool includeUnnamed);
    private static bool IsValidAssignment(Type registerType, Type registerImplementation);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__3_0(Assembly a);
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__4_0(Assembly a);
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__5_0(Assembly a);
    [CompilerGeneratedAttribute]
private bool <AutoRegister>b__6_0(Assembly a);
}
internal class TinyIoC.TinyIoCRegistrationException : Exception {
    private static string CONVERT_ERROR_TEXT;
    private static string GENERIC_CONSTRAINT_ERROR_TEXT;
    public TinyIoCRegistrationException(Type type, string method);
    public TinyIoCRegistrationException(Type type, string method, Exception innerException);
    public TinyIoCRegistrationException(Type registerType, Type implementationType);
    public TinyIoCRegistrationException(Type registerType, Type implementationType, Exception innerException);
}
internal class TinyIoC.TinyIoCRegistrationTypeException : Exception {
    private static string REGISTER_ERROR_TEXT;
    public TinyIoCRegistrationTypeException(Type type, string factory);
    public TinyIoCRegistrationTypeException(Type type, string factory, Exception innerException);
}
internal class TinyIoC.TinyIoCResolutionException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCResolutionException(Type type);
    public TinyIoCResolutionException(Type type, Exception innerException);
}
internal class TinyIoC.TinyIoCWeakReferenceException : Exception {
    private static string ERROR_TEXT;
    public TinyIoCWeakReferenceException(Type type);
    public TinyIoCWeakReferenceException(Type type, Exception innerException);
}
[ExtensionAttribute]
internal static class TinyIoC.TypeExtensions : object {
    private static SafeDictionary`2<GenericMethodCacheKey, MethodInfo> _genericMethodCache;
    private static TypeExtensions();
    [ExtensionAttribute]
public static MethodInfo GetGenericMethod(Type sourceType, BindingFlags bindingFlags, string methodName, Type[] genericTypes, Type[] parameterTypes);
    private static MethodInfo GetMethod(Type sourceType, BindingFlags bindingFlags, string methodName, Type[] genericTypes, Type[] parameterTypes);
}
internal enum TinyIoC.UnregisteredResolutionActions : Enum {
    public int value__;
    public static UnregisteredResolutionActions AttemptResolve;
    public static UnregisteredResolutionActions Fail;
    public static UnregisteredResolutionActions GenericsOnly;
}
public class Xamarin.UITest.Android.AndroidApp : object {
    private WaitForHelper _waitForHelper;
    private IScreenshotTaker _screenshotTaker;
    private IExecutor _executor;
    private AndroidGestures _gestures;
    private AndroidConfig _androidConfig;
    private AndroidDevice _androidDevice;
    private ITestServer _testServer;
    private CommandAdbStartMonkey _monkeyStarter;
    private ErrorReporting _errorReporting;
    private SharedApp _sharedApp;
    public AppPrintHelper Print { get; }
    private IDevice Xamarin.UITest.IApp.Device { get; }
    public AndroidDevice Device { get; }
    public ITestServer TestServer { get; }
    public AndroidApp(IAndroidAppConfiguration appConfiguration);
    internal AndroidApp(IAndroidAppConfiguration appConfiguration, IExecutor executor);
    public sealed virtual AppResult[] Query(Func`2<AppQuery, AppQuery> query);
    public sealed virtual AppWebResult[] Query(Func`2<AppQuery, AppWebQuery> query);
    public sealed virtual T[] Query(Func`2<AppQuery, AppTypedSelector`1<T>> query);
    public sealed virtual String[] Query(Func`2<AppQuery, InvokeJSAppQuery> query);
    public sealed virtual AppResult[] Flash(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void EnterText(string text);
    public sealed virtual void EnterText(Func`2<AppQuery, AppQuery> query, string text);
    private bool IsKeyboardVisible();
    public sealed virtual void EnterText(Func`2<AppQuery, AppWebQuery> query, string text);
    private IQueryToken AddFocus(IQueryToken queryToken);
    public sealed virtual void ClearText(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void ClearText(Func`2<AppQuery, AppWebQuery> query);
    public sealed virtual void ClearText();
    public sealed virtual void Tap(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void Tap(Func`2<AppQuery, AppWebQuery> query);
    public sealed virtual void TapCoordinates(float x, float y);
    public sealed virtual void TouchAndHold(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void TouchAndHoldCoordinates(float x, float y);
    private void LogDrop(T[] fromResults, T[] toResults, ITokenContainer fromQuery, ITokenContainer toQuery, float toX, float toY, DropLocation placement);
    public sealed virtual void DragAndDrop(Func`2<AppQuery, AppQuery> from, Func`2<AppQuery, AppQuery> to);
    public sealed virtual void DragAndDrop(string from, string to);
    public void DragAndDrop(Func`2<AppQuery, AppQuery> from, Func`2<AppQuery, AppQuery> to, DropLocation placement, Nullable`1<TimeSpan> holdTime, Nullable`1<TimeSpan> hangTime, int steps, Action afterStepAction);
    private void DragAndDropInner(Func`2<AppQuery, AppQuery> from, Func`2<AppQuery, AppQuery> to, DropLocation placement, Nullable`1<TimeSpan> holdTime, Nullable`1<TimeSpan> hangTime, int steps, Action afterStepAction);
    public sealed virtual void DoubleTap(Func`2<AppQuery, AppQuery> query);
    public void DoubleTap(Func`2<AppQuery, AppWebQuery> query);
    public sealed virtual void DoubleTapCoordinates(float x, float y);
    public sealed virtual void PinchToZoomIn(Func`2<AppQuery, AppQuery> query, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomInCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomOut(Func`2<AppQuery, AppQuery> query, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomOutCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public sealed virtual void DragCoordinates(float fromX, float fromY, float toX, float toY);
    public sealed virtual void SwipeLeftToRight(double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeLeftToRight(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeLeftToRight(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeLeftToRight(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollUp(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollDown(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public void ScrollLeft(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public void ScrollRight(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollUpTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollUpTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollLeftTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollLeftTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollRightTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollRightTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollToVerticalEnd(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollToVerticalStart(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollToHorizontalEnd(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollToHorizontalStart(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollTo(Func`2<AppQuery, AppWebQuery> toQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void Back();
    public sealed virtual void PressVolumeUp();
    public sealed virtual void PressVolumeDown();
    public void PressMenu();
    public sealed virtual void PressEnter();
    public void PressUserAction(Nullable`1<UserAction> action);
    private string GetUserActionAsString(UserAction action);
    public sealed virtual void DismissKeyboard();
    public sealed virtual void SetOrientationPortrait();
    public sealed virtual void SetOrientationLandscape();
    public sealed virtual void WaitFor(Func`1<bool> predicate, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual AppResult[] WaitForElement(Func`2<AppQuery, AppQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual void WaitForNoElement(Func`2<AppQuery, AppQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual AppWebResult[] WaitForElement(Func`2<AppQuery, AppWebQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual void WaitForNoElement(Func`2<AppQuery, AppWebQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual FileInfo Screenshot(string title);
    public sealed virtual AppPrintHelper get_Print();
    public sealed virtual void Repl();
    public sealed virtual object Invoke(string methodName, object argument);
    public sealed virtual object Invoke(string methodName, Object[] arguments);
    private sealed virtual override IDevice Xamarin.UITest.IApp.get_Device();
    public AndroidDevice get_Device();
    public sealed virtual ITestServer get_TestServer();
    public sealed virtual AppResult[] Query(string marked);
    public sealed virtual AppResult[] Flash(string marked);
    public sealed virtual void EnterText(string marked, string text);
    public sealed virtual void ClearText(string marked);
    public sealed virtual void Tap(string marked);
    public sealed virtual void TouchAndHold(string marked);
    public sealed virtual void DoubleTap(string marked);
    public sealed virtual void PinchToZoomIn(string marked, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomOut(string marked, Nullable`1<TimeSpan> duration);
    public sealed virtual void WaitForNoElement(string marked, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual AppResult[] WaitForElement(string marked, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public void DragAndDrop(string fromMarked, string toMarked, DropLocation placement, Nullable`1<TimeSpan> holdTime, Nullable`1<TimeSpan> hangTime, int steps, Action afterStepAction);
    public sealed virtual void ScrollUp(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollDown(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public void ScrollLeft(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public void ScrollRight(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollUpTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollUpTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollLeftTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollLeftTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollRightTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollRightTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollToVerticalEnd(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollToVerticalStart(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollToHorizontalEnd(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollToHorizontalStart(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void SetSliderValue(string marked, double value);
    public sealed virtual void SetSliderValue(Func`2<AppQuery, AppQuery> query, double value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__11_0();
    [CompilerGeneratedAttribute]
private void <ClearText>b__24_0();
    [CompilerGeneratedAttribute]
private void <Back>b__69_0();
    [CompilerGeneratedAttribute]
private void <PressVolumeUp>b__70_0();
    [CompilerGeneratedAttribute]
private void <PressVolumeDown>b__71_0();
    [CompilerGeneratedAttribute]
private void <PressMenu>b__72_0();
    [CompilerGeneratedAttribute]
private void <PressEnter>b__73_0();
    [CompilerGeneratedAttribute]
private void <DismissKeyboard>b__76_0();
    [CompilerGeneratedAttribute]
private void <SetOrientationPortrait>b__77_0();
    [CompilerGeneratedAttribute]
private void <SetOrientationLandscape>b__78_0();
    [CompilerGeneratedAttribute]
private void <Repl>b__87_0();
}
internal class Xamarin.UITest.Android.AndroidAppInitializer : object {
    private IAndroidAppConfiguration _appConfiguration;
    private IExecutor _executor;
    private IWaitTimes _waitTimes;
    public AndroidAppInitializer(IAndroidAppConfiguration appConfiguration, IExecutor executor, IWaitTimes waitTimes);
    public void VerifyConfiguration();
    public bool ShouldCreateTestServer();
    private static bool ShouldOverrideApks();
    public AndroidDeps PrepareEnvironment();
    public TestApkFiles PrepareApkFiles(IAndroidAppConfiguration appConfiguration, ArtifactFolder artifactFolder);
    private TestApkFiles GetOverriddenApks();
    private KeyStore GetDefaultKeyStore(ArtifactFolder artifactFolder);
    private string GetDeviceSerial(IAndroidAppConfiguration appConfiguration);
    [CompilerGeneratedAttribute]
private void <GetDefaultKeyStore>b__10_0(string path);
}
public class Xamarin.UITest.Android.AndroidConfig : object {
    private Uri _deviceUri;
    private FileInfo _apkFile;
    public Uri DeviceUri { get; }
    [ObsoleteAttribute("Removed")]
public FileInfo ApkFile { get; }
    public AndroidConfig(Uri deviceUri, FileInfo apkFile);
    public Uri get_DeviceUri();
    public FileInfo get_ApkFile();
}
internal class Xamarin.UITest.Android.AndroidDeps : object {
    public AndroidGestures Gestures;
    public AndroidConfig Config;
    public IScreenshotTaker ScreenshotTaker;
    public WaitForHelper WaitForHelper;
    public ArtifactFolder ArtifactFolder;
    public AndroidAppLifeCycle AppLifeCycle;
    public IAndroidAppConfiguration AppConfiguration;
    public AndroidDevice Device;
    public SharedTestServer TestServer;
    public CommandAdbStartMonkey MonkeyStarter;
    public AndroidDeps(AndroidGestures gestures, IScreenshotTaker screenshotTaker, WaitForHelper waitForHelper, AndroidConfig config, ArtifactFolder artifactFolder, AndroidAppLifeCycle appLifeCycle, IAndroidAppConfiguration appConfiguration, SharedTestServer testServer, CommandAdbStartMonkey monkeyStarter, string deviceSerial);
}
public class Xamarin.UITest.Android.AndroidDevice : object {
    private Uri _deviceUri;
    private string _deviceIdentifier;
    private AndroidGestures _gestures;
    public Uri DeviceUri { get; }
    public string DeviceIdentifier { get; }
    internal AndroidDevice(Uri deviceUri, AndroidGestures gestures, string deviceIdentifier);
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_DeviceIdentifier();
    public sealed virtual void SetLocation(double latitude, double longitude);
}
internal class Xamarin.UITest.Android.AndroidGestures : object {
    private HttpClient _httpClient;
    private WaitForHelper _waitForHelper;
    private TimeSpan _gestureWaitTimeout;
    private TimeSpan _gestureCompletionTimeout;
    private AndroidScroll _androidScroll;
    private SharedApp _sharedApp;
    public AndroidGestures(HttpClient httpClient, WaitForHelper waitForHelper, IWaitTimes waitTimes);
    public sealed virtual AppResult[] Query(AppQuery query);
    public AppResult[] Flash(AppQuery query);
    public sealed virtual AppResult[] QueryGestureWait(AppQuery query);
    public sealed virtual void WaitForNoneAnimatingOrElapsed(Nullable`1<TimeSpan> timeout);
    public AppWebResult[] Query(AppWebQuery query);
    public sealed virtual AppWebResult[] QueryGestureWait(AppWebQuery query);
    public T[] QueryGestureWait(AppQuery query, Object[] args);
    private T[] Query(ITokenContainer query, Object[] args, string methodName);
    public T[] Query(AppTypedSelector`1<T> selector);
    public void DismissKeyboard();
    public void KeyboardEnterText(string text);
    public void SetTextWebView(string cssSelector, string text);
    public void TapCoordinates(float x, float y);
    public void DoubleTapCoordinates(float x, float y);
    public void PinchToZoomCoordinates(float x, float y, PinchDirection direction, Nullable`1<TimeSpan> duration);
    private void Pinch(Point finger1Start, Point finger2Start, Point finger1End, Point finger2End, double time);
    public sealed virtual void SwipeCoordinates(int fromX, int toX, int fromY, int toY, bool withInertia, TimeSpan duration);
    private HttpResult InvokeAction(string action, Object[] arguments);
    private static void FailIfNotSuccess(string action, JObject responseJObject, Object[] actionArgs);
    public HttpResult PerformAction(string action, Object[] arguments);
    private T PerformAction(string action, Object[] arguments);
    public ViewConfiguration ViewConfiguration(AppQuery query);
    public void Pan(AppQuery query, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia);
    public void DragViaGesture(float fromX, float fromY, float toX, float toY, int swipeSpeed, bool withInertia);
    public void ClearText();
    public TimeSpan GetScrollTimeout(Nullable`1<TimeSpan> timeout);
    public sealed virtual void Scroll(AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public void ScrollToEnd(AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public void ScrollToStart(AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollTo(AppQuery to, AppQuery within, ScrollDirection scrollDirection, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollTo(AppWebQuery to, AppQuery within, ScrollDirection scrollDirection, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    private void ScrollToInternal(Func`1<bool> toFound, IScrollInteraction interaction, ScrollDirection scrollDirection, TimeSpan timeout);
    public void ScrollTo(AppQuery toQuery, AppQuery within, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollTo(AppWebQuery toQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual TreeElement[] Dump();
    public sealed virtual TreeElement[] DumpWithDeviceAgent();
    public void PressKey(int keycode);
    public void PressKey(string keycode);
    public void PressUserAction(string action);
    public void DragCoordinates(float fromX, float fromY, float toX, float toY);
    public void DragPercentages(float fromX, float fromY, float toX, float toY, int stepCount);
    public void TouchAndHoldCoordinates(float x, float y);
    public void SetOrientationPortrait();
    public void SetOrientationLandscape();
    public string ToCodeString(ITokenContainer container);
    public string Invoke(string methodName, Object[] arguments);
    public void SetGpsCoordinates(double latitude, double longitude);
    public String[] InvokeJS(IInvokeJSAppQuery selector);
    [CompilerGeneratedAttribute]
private AppResult[] <WaitForNoneAnimatingOrElapsed>b__10_0();
}
public enum Xamarin.UITest.Android.DropLocation : Enum {
    public int value__;
    public static DropLocation OnTop;
    public static DropLocation Above;
    public static DropLocation Below;
    public static DropLocation Left;
    public static DropLocation Right;
}
internal interface Xamarin.UITest.Android.IAndroidAppInitializer {
    public abstract virtual AndroidDeps PrepareEnvironment();
    public abstract virtual void VerifyConfiguration();
    public abstract virtual TestApkFiles PrepareApkFiles(IAndroidAppConfiguration appConfiguration, ArtifactFolder artifactFolder);
}
internal class Xamarin.UITest.Android.JavaScreenshotTaker : object {
    private string _deviceSerial;
    private IExecutor _executor;
    private string _screenshotTakerJarPath;
    private int _counter;
    public JavaScreenshotTaker(ArtifactFolder artifactFolder, string deviceSerial, IExecutor executor);
    public sealed virtual FileInfo Screenshot(string title);
}
internal class Xamarin.UITest.Android.MonkeyConnection : object {
    private int _port;
    private AndroidGestures _gestures;
    public MonkeyConnection(CommandAdbStartMonkey monkeyStarter, IExecutor executor, WaitForHelper waitForHelper, AndroidGestures gestures);
    public void SendCommand(string command);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__2_0();
}
internal class Xamarin.UITest.Android.Point : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    internal float X { get; internal set; }
    internal float Y { get; internal set; }
    internal Point(float x, float y);
    [CompilerGeneratedAttribute]
internal float get_X();
    [CompilerGeneratedAttribute]
internal void set_X(float value);
    [CompilerGeneratedAttribute]
internal float get_Y();
    [CompilerGeneratedAttribute]
internal void set_Y(float value);
}
internal class Xamarin.UITest.Android.Scroll.AndroidScroll : object {
    private AndroidGestures _androidGestures;
    private WaitForHelper _waitForHelper;
    private TimeSpan _gestureWaitTimeout;
    public AndroidScroll(AndroidGestures androidGestures, WaitForHelper waitForHelper, TimeSpan gestureWaitTimeout);
    public IScrollInteraction GetScrollableInteraction(AppQuery withinQuery, ScrollStrategy strategy, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout, AppQuery toQuery);
    public IScrollInteraction GetScrollableInteraction(AppQuery withinQuery, ScrollStrategy strategy, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout, AppWebQuery toQuery);
    private AppQuery GetParentFromWebQuery(AppWebQuery targetView);
    private IScrollInteraction ProgramaticScrollInteractionFromContext(AppQuery context, ScrollDirection direction);
    private IScrollInteraction ProgrammaticScrollInteractionFromDestination(AppQuery targetView, ScrollDirection direction);
    private void ScrollToView(AppQuery query);
    private void ScrollToView(AppWebQuery query);
    private AppQuery GestureQueryFromDestination(AppQuery targetView, Nullable`1<ScrollDirection> direction);
    private IScrollInteraction GestureScrollInteractionFromDestination(AppQuery targetView, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout);
    private AppQuery GestureScrollToWithinQueryFromDestination(AppQuery targetView);
    private AppQuery QueryContext(AppQuery targetView);
    private AppQuery AsAllQuery(AppQuery query);
    private AppWebQuery AsAllQuery(AppWebQuery query);
    private void GestureScrollToView(AppQuery within, AppQuery toQuery, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout);
    private void GestureScrollToView(AppQuery within, AppWebQuery toAllQuery, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout);
    private void GestureScrollToInternal(TimeSpan timeout, Func`1<IRect> toQueryRect, IRect withinRect, ViewConfiguration viewConfig, double swipePercentage, int swipeSpeed, bool withInertia);
    private AppRect OnScreenRect(AppResult within, AppQuery withinQuery);
    private AppRect Intersection(AppRect rect, IRect appRect);
    private Segment Intersection(float start1, float extend1, float start2, float extend2);
    private float CalulateOffset(float toStart, float toSize, float withinStart, float withinSize);
    public void ScrollTo(AppQuery toQuery, AppQuery within, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout);
    public void ScrollTo(AppWebQuery toQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout);
}
internal enum Xamarin.UITest.Android.Scroll.Axis : Enum {
    public int value__;
    public static Axis Horizontal;
    public static Axis Vertical;
    public static Axis Both;
}
[ExtensionAttribute]
internal static class Xamarin.UITest.Android.Scroll.AxisExtensions : object {
    [ExtensionAttribute]
internal static bool OnAxis(Axis axis, ScrollDirection direction);
    [ExtensionAttribute]
internal static ScrollDirection Start(Axis axis);
    [ExtensionAttribute]
internal static ScrollDirection End(Axis axis);
}
internal class Xamarin.UITest.Android.Scroll.GestureInteraction : object {
    private AppQuery _query;
    private AndroidGestures _gestures;
    private TimeSpan _timeout;
    private ScrollDirection _start;
    private ScrollDirection _end;
    private double _swipePercentage;
    private int _swipeSpeed;
    private bool _withInertia;
    public GestureInteraction(AppQuery query, AndroidGestures gestures, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout, ScrollDirection direction);
    public sealed virtual AppQuery Query();
    public bool Supports(ScrollDirection direction);
    public sealed virtual bool Scroll(ScrollDirection direction);
    private void TimelimitedScroll(ScrollDirection direction);
    public sealed virtual void ScrollToStart();
    public sealed virtual void ScrollToEnd();
}
internal class Xamarin.UITest.Android.Scroll.IndexViewInteraction : object {
    private AndroidGestures _gestures;
    private AppQuery _query;
    public IndexViewInteraction(AppQuery query, AndroidGestures gestures);
    public sealed virtual bool Supports(ScrollDirection direction);
    public sealed virtual AppQuery Query();
    public sealed virtual bool Scroll(ScrollDirection direction);
    public sealed virtual void ScrollToStart();
    public sealed virtual void ScrollToEnd();
}
internal interface Xamarin.UITest.Android.Scroll.IProgramaticScrollInteraction {
    public abstract virtual bool Supports(ScrollDirection direction);
}
internal interface Xamarin.UITest.Android.Scroll.IScrollInteraction {
    public abstract virtual AppQuery Query();
    public abstract virtual bool Scroll(ScrollDirection direction);
    public abstract virtual void ScrollToStart();
    public abstract virtual void ScrollToEnd();
}
internal class Xamarin.UITest.Android.Scroll.RecyclerViewScrollInteraction : object {
    private AppQuery _query;
    private AppTypedSelector`1<object> _layoutmanager;
    private AndroidGestures _gestures;
    public RecyclerViewScrollInteraction(AppQuery query, AndroidGestures gestures);
    public sealed virtual bool Supports(ScrollDirection direction);
    public sealed virtual AppQuery Query();
    public sealed virtual bool Scroll(ScrollDirection direction);
    public sealed virtual void ScrollToStart();
    public sealed virtual void ScrollToEnd();
}
internal class Xamarin.UITest.Android.Scroll.ScrollViewInteraction : object {
    private AppQuery _query;
    private AndroidGestures _gestures;
    private Axis _supports;
    private ViewMoveHelper _moveHelper;
    public ScrollViewInteraction(AppQuery query, AndroidGestures gestures, Axis supports);
    public sealed virtual AppQuery Query();
    public sealed virtual bool Supports(ScrollDirection direction);
    private int DirectionToInt(ScrollDirection direction);
    public sealed virtual bool Scroll(ScrollDirection direction);
    public sealed virtual void ScrollToStart();
    public sealed virtual void ScrollToEnd();
}
internal class Xamarin.UITest.Android.Scroll.ViewMoveHelper : object {
    private AppQuery _query;
    private AndroidGestures _gestures;
    private int oldY;
    private int oldX;
    public ViewMoveHelper(AppQuery query, AndroidGestures gestures);
    public void PreScroll();
    public bool PostScroll();
}
internal class Xamarin.UITest.Android.Scroll.WebViewScrollInteraction : object {
    private AppQuery _query;
    private AndroidGestures _gestures;
    private ViewMoveHelper _moveHelper;
    private WaitForHelper _waitForHelper;
    public WebViewScrollInteraction(AppQuery query, AndroidGestures gestures);
    public sealed virtual AppQuery Query();
    public sealed virtual bool Supports(ScrollDirection direction);
    private string DirectionToMethodName(ScrollDirection direction);
    public sealed virtual bool Scroll(ScrollDirection direction);
    public sealed virtual void ScrollToStart();
    public sealed virtual void ScrollToEnd();
    [CompilerGeneratedAttribute]
private bool <Scroll>b__8_0();
}
internal class Xamarin.UITest.Android.TestApkFiles : object {
    private ApkFile _appApkFile;
    private ApkFile _testServerApkFile;
    public ApkFile AppApkFile { get; }
    public ApkFile TestServerApkFile { get; }
    public TestApkFiles(ApkFile appApkFile, ApkFile testServerApkFile);
    public ApkFile get_AppApkFile();
    public ApkFile get_TestServerApkFile();
}
public enum Xamarin.UITest.Android.UserAction : Enum {
    public int value__;
    public static UserAction Normal;
    public static UserAction Unspecified;
    public static UserAction None;
    public static UserAction Go;
    public static UserAction Search;
    public static UserAction Send;
    public static UserAction Next;
    public static UserAction Done;
    public static UserAction Previous;
}
internal class Xamarin.UITest.Android.ViewConfiguration : object {
    [CompilerGeneratedAttribute]
private int <ScaledTouchSlop>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TapTimeout>k__BackingField;
    public int ScaledTouchSlop { get; public set; }
    public int TapTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ScaledTouchSlop();
    [CompilerGeneratedAttribute]
public void set_ScaledTouchSlop(int value);
    [CompilerGeneratedAttribute]
public int get_TapTimeout();
    [CompilerGeneratedAttribute]
public void set_TapTimeout(int value);
}
internal class Xamarin.UITest.Configuration.AndroidAppConfiguration : object {
    private IGenericAppConfiguration _genericAppConfiguration;
    private KeyStoreInfo _keyStoreInfo;
    private FileInfo _apkFile;
    private StartAction _startAction;
    private Uri _deviceUri;
    private string _deviceSerial;
    private FileInfo _sIFile;
    private IWaitTimes _waitTimes;
    private string _launchableActivity;
    private string _installedAppPackageName;
    private AppDataMode _appDataMode;
    public bool Debug { get; }
    public bool EnableScreenshots { get; }
    public string LogDirectory { get; }
    public Uri DeviceUri { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public string DeviceSerial { get; }
    public FileInfo KeyStore { get; }
    public string KeyStorePassword { get; }
    public string KeyStoreKeyPassword { get; }
    public string KeyStoreKeyAlias { get; }
    public FileInfo ApkFile { get; }
    public string InstalledAppPackageName { get; }
    public FileInfo SIFile { get; }
    public StartAction StartAction { get; }
    public AppDataMode AppDataMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public string LaunchableActivity { get; }
    public IWaitTimes WaitTimes { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public AndroidAppConfiguration(IGenericAppConfiguration genericAppConfiguration, KeyStoreInfo keyStoreInfo, FileInfo apkFile, string deviceSerial, FileInfo sIFile, StartAction startAction, IWaitTimes waitTimes, string launchableActivity, string installedAppPackageName, AppDataMode appDataMode);
    public static Uri BuildDeviceUri(string configuredDeviceIp, Nullable`1<int> configuredDevicePort, FileInfo apkFile, string deviceSerial, string installedAppPackageName);
    public sealed virtual bool get_Debug();
    public sealed virtual bool get_EnableScreenshots();
    public sealed virtual string get_LogDirectory();
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_ConfiguredDeviceIp();
    public sealed virtual Nullable`1<int> get_ConfiguredDevicePort();
    public sealed virtual string get_DeviceSerial();
    public sealed virtual FileInfo get_KeyStore();
    public sealed virtual string get_KeyStorePassword();
    public sealed virtual string get_KeyStoreKeyPassword();
    public sealed virtual string get_KeyStoreKeyAlias();
    public sealed virtual FileInfo get_ApkFile();
    public sealed virtual string get_InstalledAppPackageName();
    public sealed virtual FileInfo get_SIFile();
    public sealed virtual StartAction get_StartAction();
    public sealed virtual AppDataMode get_AppDataMode();
    public sealed virtual bool get_DisableSpecFlowIntegration();
    public sealed virtual string get_LaunchableActivity();
    public sealed virtual void Verify();
    public sealed virtual IWaitTimes get_WaitTimes();
    public sealed virtual IdeIntegrationMode get_IdeIntegrationMode();
}
public class Xamarin.UITest.Configuration.AndroidAppConfigurator : object {
    private GenericAppConfigurator _genericAppConfigurator;
    private FileInfo _apkFile;
    private string _deviceSerial;
    private FileInfo _sIFile;
    private KeyStoreInfo _keyStore;
    private IWaitTimes _waitTimes;
    private string _launchableActivity;
    private string _installedAppPackageName;
    public AndroidAppConfigurator(GenericAppConfigurator genericAppConfigurator);
    [ObsoleteAttribute("AndroidAppConfigurator.ApiKey() is deprecated and no longer necessary.")]
public AndroidAppConfigurator ApiKey(string apiKey);
    public AndroidAppConfigurator Debug();
    public AndroidAppConfigurator EnableLocalScreenshots();
    public AndroidAppConfigurator PreferIdeSettings();
    public AndroidAppConfigurator DisableSpecFlowIntegration();
    public AndroidAppConfigurator DeviceIp(string ipAddress);
    public AndroidAppConfigurator DevicePort(int port);
    public AndroidAppConfigurator LogDirectory(string directory);
    public AndroidAppConfigurator DeviceSerial(string deviceSerial);
    public AndroidAppConfigurator KeyStore(string path, string storePassword, string keyPassword, string keyAlias);
    public AndroidAppConfigurator SigningInfoFile(string path);
    public AndroidAppConfigurator ApkFile(string path);
    public AndroidAppConfigurator InstalledApp(string packageName);
    public AndroidAppConfigurator WaitTimes(IWaitTimes waitTimes);
    public AndroidAppConfigurator LaunchableActivity(string activity);
    public AndroidApp StartApp(AppDataMode appDataMode);
    public AndroidApp ConnectToApp();
    public IAndroidAppConfiguration GetConfiguration(StartAction startAction, AppDataMode appDataMode);
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
}
public enum Xamarin.UITest.Configuration.AppDataMode : Enum {
    public int value__;
    public static AppDataMode Auto;
    public static AppDataMode Clear;
    public static AppDataMode DoNotClear;
}
internal static class Xamarin.UITest.Configuration.DefaultKeyStoreSecrets : object {
    public static string StoreName;
    public static string KeyAlias;
    public static string StorePassword;
    public static string KeyPassword;
}
internal class Xamarin.UITest.Configuration.GenericAppConfiguration : object {
    private string _deviceIp;
    private bool _debug;
    private Nullable`1<int> _devicePort;
    private bool _enableScreenshots;
    private string _logDirectory;
    private IdeIntegrationMode _ideIntegrationMode;
    private bool _disableSpecFlowIntegration;
    public bool EnableScreenshots { get; }
    public bool Debug { get; }
    public string DeviceIp { get; }
    public Nullable`1<int> DevicePort { get; }
    public string LogDirectory { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public GenericAppConfiguration(string deviceIp, bool debug, Nullable`1<int> devicePort, bool enableScreenshots, string logDirectory, IdeIntegrationMode ideIntegrationMode, bool disableSpecFlowIntegration);
    public sealed virtual bool get_EnableScreenshots();
    public sealed virtual bool get_Debug();
    public sealed virtual string get_DeviceIp();
    public sealed virtual Nullable`1<int> get_DevicePort();
    public sealed virtual string get_LogDirectory();
    public sealed virtual IdeIntegrationMode get_IdeIntegrationMode();
    public sealed virtual bool get_DisableSpecFlowIntegration();
}
public class Xamarin.UITest.Configuration.GenericAppConfigurator : object {
    private string _deviceIp;
    private bool _debug;
    private bool _enableLocalScreenshots;
    private Nullable`1<int> _devicePort;
    private string _logDirectory;
    private IdeIntegrationMode _ideIntegrationMode;
    private bool _disableSpecFlowIntegration;
    public iOSAppConfigurator iOS { get; }
    public AndroidAppConfigurator Android { get; }
    public GenericAppConfigurator Debug();
    public GenericAppConfigurator EnableLocalScreenshots();
    public GenericAppConfigurator PreferIdeSettings();
    public iOSAppConfigurator get_iOS();
    public AndroidAppConfigurator get_Android();
    public GenericAppConfigurator DeviceIp(string ipAddress);
    public GenericAppConfigurator DevicePort(int port);
    public GenericAppConfigurator LogDirectory(string directory);
    public GenericAppConfigurator DisableSpecFlowIntegration();
    public IGenericAppConfiguration GetConfiguration();
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
}
public interface Xamarin.UITest.Configuration.IAndroidAppConfiguration {
    public FileInfo KeyStore { get; }
    public string KeyStorePassword { get; }
    public string KeyStoreKeyPassword { get; }
    public string KeyStoreKeyAlias { get; }
    public FileInfo SIFile { get; }
    public FileInfo ApkFile { get; }
    public string InstalledAppPackageName { get; }
    public bool Debug { get; }
    public StartAction StartAction { get; }
    public AppDataMode AppDataMode { get; }
    public Uri DeviceUri { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public string DeviceSerial { get; }
    public bool EnableScreenshots { get; }
    public string LaunchableActivity { get; }
    public string LogDirectory { get; }
    public IWaitTimes WaitTimes { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public abstract virtual FileInfo get_KeyStore();
    public abstract virtual string get_KeyStorePassword();
    public abstract virtual string get_KeyStoreKeyPassword();
    public abstract virtual string get_KeyStoreKeyAlias();
    public abstract virtual FileInfo get_SIFile();
    public abstract virtual FileInfo get_ApkFile();
    public abstract virtual string get_InstalledAppPackageName();
    public abstract virtual bool get_Debug();
    public abstract virtual StartAction get_StartAction();
    public abstract virtual AppDataMode get_AppDataMode();
    public abstract virtual Uri get_DeviceUri();
    public abstract virtual string get_ConfiguredDeviceIp();
    public abstract virtual Nullable`1<int> get_ConfiguredDevicePort();
    public abstract virtual string get_DeviceSerial();
    public abstract virtual bool get_EnableScreenshots();
    public abstract virtual string get_LaunchableActivity();
    public abstract virtual string get_LogDirectory();
    public abstract virtual void Verify();
    public abstract virtual IWaitTimes get_WaitTimes();
    public abstract virtual IdeIntegrationMode get_IdeIntegrationMode();
    public abstract virtual bool get_DisableSpecFlowIntegration();
}
internal class Xamarin.UITest.Configuration.IdeAndroidAppConfiguration : object {
    private IAndroidAppConfiguration _appConfiguration;
    private TestRunContext _testRunContext;
    private string _installedAppPackageName;
    private string _deviceSerial;
    private FileInfo _keyStorePath;
    private string _keyStoreStorePassword;
    private string _keyStoreKeyAlias;
    private string _keyStoreKeyPassword;
    private string _logDirectory;
    private Uri _deviceUri;
    public string InstalledAppPackageName { get; }
    public FileInfo KeyStore { get; }
    public string KeyStorePassword { get; }
    public string KeyStoreKeyPassword { get; }
    public string KeyStoreKeyAlias { get; }
    public string DeviceSerial { get; }
    public string LogDirectory { get; }
    public FileInfo SIFile { get; }
    public FileInfo ApkFile { get; }
    public bool Debug { get; }
    public StartAction StartAction { get; }
    public AppDataMode AppDataMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public Uri DeviceUri { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public bool EnableScreenshots { get; }
    public string LaunchableActivity { get; }
    public IWaitTimes WaitTimes { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public IdeAndroidAppConfiguration(IAndroidAppConfiguration appConfiguration, TestRunContext testRunContext);
    public sealed virtual string get_InstalledAppPackageName();
    public sealed virtual FileInfo get_KeyStore();
    public sealed virtual string get_KeyStorePassword();
    public sealed virtual string get_KeyStoreKeyPassword();
    public sealed virtual string get_KeyStoreKeyAlias();
    public sealed virtual string get_DeviceSerial();
    public sealed virtual string get_LogDirectory();
    public sealed virtual FileInfo get_SIFile();
    public sealed virtual FileInfo get_ApkFile();
    public sealed virtual bool get_Debug();
    public sealed virtual StartAction get_StartAction();
    public sealed virtual AppDataMode get_AppDataMode();
    public sealed virtual bool get_DisableSpecFlowIntegration();
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_ConfiguredDeviceIp();
    public sealed virtual Nullable`1<int> get_ConfiguredDevicePort();
    public sealed virtual bool get_EnableScreenshots();
    public sealed virtual string get_LaunchableActivity();
    public sealed virtual void Verify();
    public sealed virtual IWaitTimes get_WaitTimes();
    public sealed virtual IdeIntegrationMode get_IdeIntegrationMode();
    public static bool OverridesImportantProperties(IAndroidAppConfiguration appConfiguration);
}
public enum Xamarin.UITest.Configuration.IdeIntegrationMode : Enum {
    public int value__;
    public static IdeIntegrationMode PreferExplicitConfiguration;
    public static IdeIntegrationMode PreferIdeSettingsIfPresent;
}
internal class Xamarin.UITest.Configuration.IdeiOSAppConfiguration : object {
    private IiOSAppConfiguration _appConfiguration;
    private string _deviceIdentifier;
    private string _installedAppBundleId;
    private string _appBundle;
    private string _logDirectory;
    public string DeviceIdentifier { get; }
    public string InstalledAppBundleId { get; }
    public bool Debug { get; }
    public bool EnableScreenshots { get; }
    public Uri DeviceUri { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public string LogDirectory { get; }
    public DirectoryInfo AppBundleDirectory { get; }
    public FileInfo AppBundleZip { get; }
    public StartAction StartAction { get; }
    public IWaitTimes WaitTimes { get; }
    public string IDBPathUserOverride { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public AppDataMode AppDataMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public IEnumerable`1<string> AutArguments { get; }
    public Dictionary`2<string, string> AutEnvironmentVars { get; }
    public string CodesignIdentityName { get; }
    public string CodesignIdentitySHA { get; }
    public string PathToProvisioningProfile { get; }
    public IdeiOSAppConfiguration(IiOSAppConfiguration appConfiguration, TestRunContext testRunContext);
    public sealed virtual string get_DeviceIdentifier();
    public sealed virtual string get_InstalledAppBundleId();
    public sealed virtual bool get_Debug();
    public sealed virtual bool get_EnableScreenshots();
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_ConfiguredDeviceIp();
    public sealed virtual Nullable`1<int> get_ConfiguredDevicePort();
    public sealed virtual string get_LogDirectory();
    public sealed virtual DirectoryInfo get_AppBundleDirectory();
    public sealed virtual FileInfo get_AppBundleZip();
    public sealed virtual StartAction get_StartAction();
    public sealed virtual void Verify();
    public sealed virtual IWaitTimes get_WaitTimes();
    public sealed virtual string get_IDBPathUserOverride();
    public sealed virtual IdeIntegrationMode get_IdeIntegrationMode();
    public sealed virtual AppDataMode get_AppDataMode();
    public sealed virtual bool get_DisableSpecFlowIntegration();
    public sealed virtual IEnumerable`1<string> get_AutArguments();
    public sealed virtual Dictionary`2<string, string> get_AutEnvironmentVars();
    public sealed virtual string get_CodesignIdentityName();
    public sealed virtual string get_CodesignIdentitySHA();
    public sealed virtual string get_PathToProvisioningProfile();
    public static bool OverridesImportantProperties(IiOSAppConfiguration appConfiguration);
}
public interface Xamarin.UITest.Configuration.IGenericAppConfiguration {
    public bool Debug { get; }
    public string DeviceIp { get; }
    public Nullable`1<int> DevicePort { get; }
    public bool EnableScreenshots { get; }
    public string LogDirectory { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public abstract virtual bool get_Debug();
    public abstract virtual string get_DeviceIp();
    public abstract virtual Nullable`1<int> get_DevicePort();
    public abstract virtual bool get_EnableScreenshots();
    public abstract virtual string get_LogDirectory();
    public abstract virtual IdeIntegrationMode get_IdeIntegrationMode();
    public abstract virtual bool get_DisableSpecFlowIntegration();
}
public interface Xamarin.UITest.Configuration.IiOSAppConfiguration {
    public bool Debug { get; }
    public bool EnableScreenshots { get; }
    public string LogDirectory { get; }
    public Uri DeviceUri { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public string DeviceIdentifier { get; }
    public string InstalledAppBundleId { get; }
    public DirectoryInfo AppBundleDirectory { get; }
    public FileInfo AppBundleZip { get; }
    public StartAction StartAction { get; }
    public IWaitTimes WaitTimes { get; }
    public string IDBPathUserOverride { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public AppDataMode AppDataMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public IEnumerable`1<string> AutArguments { get; }
    public Dictionary`2<string, string> AutEnvironmentVars { get; }
    public string CodesignIdentityName { get; }
    public string CodesignIdentitySHA { get; }
    public string PathToProvisioningProfile { get; }
    public abstract virtual bool get_Debug();
    public abstract virtual bool get_EnableScreenshots();
    public abstract virtual string get_LogDirectory();
    public abstract virtual Uri get_DeviceUri();
    public abstract virtual string get_ConfiguredDeviceIp();
    public abstract virtual Nullable`1<int> get_ConfiguredDevicePort();
    public abstract virtual string get_DeviceIdentifier();
    public abstract virtual string get_InstalledAppBundleId();
    public abstract virtual DirectoryInfo get_AppBundleDirectory();
    public abstract virtual FileInfo get_AppBundleZip();
    public abstract virtual StartAction get_StartAction();
    public abstract virtual void Verify();
    public abstract virtual IWaitTimes get_WaitTimes();
    public abstract virtual string get_IDBPathUserOverride();
    public abstract virtual IdeIntegrationMode get_IdeIntegrationMode();
    public abstract virtual AppDataMode get_AppDataMode();
    public abstract virtual bool get_DisableSpecFlowIntegration();
    public abstract virtual IEnumerable`1<string> get_AutArguments();
    public abstract virtual Dictionary`2<string, string> get_AutEnvironmentVars();
    public abstract virtual string get_CodesignIdentityName();
    public abstract virtual string get_CodesignIdentitySHA();
    public abstract virtual string get_PathToProvisioningProfile();
}
internal class Xamarin.UITest.Configuration.iOSAppConfiguration : object {
    private IGenericAppConfiguration _genericAppConfiguration;
    private DirectoryInfo _appBundleDirectory;
    private string _installedAppBundleId;
    private FileInfo _appBundleZip;
    private StartAction _startAction;
    private Uri _deviceUri;
    private string _deviceIdentifier;
    private AppDataMode _appDataMode;
    [CompilerGeneratedAttribute]
private string <IDBPathUserOverride>k__BackingField;
    private IWaitTimes _waitTimes;
    private IEnumerable`1<string> _autArguments;
    private Dictionary`2<string, string> _autEnvironment;
    [CompilerGeneratedAttribute]
private string <CodesignIdentityName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodesignIdentitySHA>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathToProvisioningProfile>k__BackingField;
    public string IDBPathUserOverride { get; }
    public string CodesignIdentityName { get; }
    public string CodesignIdentitySHA { get; }
    public string PathToProvisioningProfile { get; }
    public StartAction StartAction { get; }
    public bool Debug { get; }
    public bool EnableScreenshots { get; }
    public string LogDirectory { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public Uri DeviceUri { get; }
    public string InstalledAppBundleId { get; }
    public string DeviceIdentifier { get; }
    public DirectoryInfo AppBundleDirectory { get; }
    public FileInfo AppBundleZip { get; }
    public AppDataMode AppDataMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public IWaitTimes WaitTimes { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public IEnumerable`1<string> AutArguments { get; }
    public Dictionary`2<string, string> AutEnvironmentVars { get; }
    public iOSAppConfiguration(IGenericAppConfiguration genericAppConfiguration, DirectoryInfo appBundleDirectory, string installedAppBundleId, FileInfo appBundleZip, StartAction startAction, string deviceIdentifier, IWaitTimes waitTimes, string idbPathUserOverride, AppDataMode appDataMode, IEnumerable`1<string> autArguments, Dictionary`2<string, string> autEnvironment, string codesignIdentityName, string codesignIdentitySHA, string pathToProvisioningProfile);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IDBPathUserOverride();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodesignIdentityName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodesignIdentitySHA();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathToProvisioningProfile();
    public sealed virtual StartAction get_StartAction();
    private Uri BuildDeviceUri();
    public sealed virtual bool get_Debug();
    public sealed virtual bool get_EnableScreenshots();
    public sealed virtual string get_LogDirectory();
    public sealed virtual string get_ConfiguredDeviceIp();
    public sealed virtual Nullable`1<int> get_ConfiguredDevicePort();
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_InstalledAppBundleId();
    public sealed virtual string get_DeviceIdentifier();
    public sealed virtual DirectoryInfo get_AppBundleDirectory();
    public sealed virtual FileInfo get_AppBundleZip();
    public sealed virtual AppDataMode get_AppDataMode();
    public sealed virtual bool get_DisableSpecFlowIntegration();
    public sealed virtual void Verify();
    public sealed virtual IWaitTimes get_WaitTimes();
    public sealed virtual IdeIntegrationMode get_IdeIntegrationMode();
    public sealed virtual IEnumerable`1<string> get_AutArguments();
    public sealed virtual Dictionary`2<string, string> get_AutEnvironmentVars();
}
public class Xamarin.UITest.Configuration.iOSAppConfigurator : object {
    private GenericAppConfigurator _genericAppConfigurator;
    private DirectoryInfo _appBundleDirectory;
    private string _installedAppBundleId;
    private FileInfo _appBundleZip;
    private string _deviceIdentifier;
    private IWaitTimes _waitTimes;
    private string IDBPathOverride;
    private IEnumerable`1<string> _autArguments;
    private Dictionary`2<string, string> _autEnvironment;
    private string CodesignIdentityNameOverride;
    private string CodesignIdentitySHAOverride;
    private string ProvisioningProfilePathOverride;
    public iOSAppConfigurator(GenericAppConfigurator genericAppConfigurator);
    [ObsoleteAttribute("iOSAppConfigurator.ApiKey() is deprecated and no longer necessary.")]
public iOSAppConfigurator ApiKey(string apiKey);
    public iOSAppConfigurator Debug();
    public iOSAppConfigurator EnableLocalScreenshots();
    public iOSAppConfigurator PreferIdeSettings();
    public iOSAppConfigurator DeviceIp(string ipAddress);
    public iOSAppConfigurator DevicePort(int port);
    public iOSAppConfigurator LogDirectory(string directory);
    public iOSAppConfigurator DisableSpecFlowIntegration();
    public iOSAppConfigurator AppBundle(string path);
    public iOSAppConfigurator AppBundleZip(string path);
    public iOSAppConfigurator InstalledApp(string bundleId);
    public iOSAppConfigurator DeviceIdentifier(string deviceIdentifier);
    public iOSAppConfigurator WaitTimes(IWaitTimes waitTimes);
    public iOSAppConfigurator OverrideIDBPath(string pathToIDB);
    public iOSAppConfigurator AutArguments(IEnumerable`1<string> arguments);
    public iOSAppConfigurator AutEnvironmentVars(Dictionary`2<string, string> environmentVars);
    public iOSAppConfigurator CodesignIdentityName(string codesignIdentityName);
    public iOSAppConfigurator CodesignIdentitySHA(string codesignIdentitySHA);
    public iOSAppConfigurator ProvisioningProfile(string provisioningProfilePath);
    public iOSApp StartApp(AppDataMode appDataMode);
    public iOSApp ConnectToApp();
    public IiOSAppConfiguration GetConfiguration(StartAction startAction, AppDataMode appDataMode);
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
}
internal class Xamarin.UITest.Configuration.KeyStoreInfo : object {
    [CompilerGeneratedAttribute]
private FileInfo <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyAlias>k__BackingField;
    public FileInfo Path { get; private set; }
    public string StorePassword { get; private set; }
    public string KeyPassword { get; private set; }
    public string KeyAlias { get; private set; }
    public KeyStoreInfo(FileInfo path, string storePassword, string keyPassword, string keyAlias);
    [CompilerGeneratedAttribute]
public FileInfo get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(FileInfo value);
    [CompilerGeneratedAttribute]
public string get_StorePassword();
    [CompilerGeneratedAttribute]
private void set_StorePassword(string value);
    [CompilerGeneratedAttribute]
public string get_KeyPassword();
    [CompilerGeneratedAttribute]
private void set_KeyPassword(string value);
    [CompilerGeneratedAttribute]
public string get_KeyAlias();
    [CompilerGeneratedAttribute]
private void set_KeyAlias(string value);
}
public enum Xamarin.UITest.Configuration.StartAction : Enum {
    public int value__;
    public static StartAction LaunchApp;
    public static StartAction ConnectToApp;
}
public static class Xamarin.UITest.ConfigureApp : object {
    public static iOSAppConfigurator iOS { get; }
    public static AndroidAppConfigurator Android { get; }
    private static ConfigureApp();
    public static GenericAppConfigurator DeviceIp(string ipAddress);
    public static GenericAppConfigurator DevicePort(int port);
    public static iOSAppConfigurator get_iOS();
    public static AndroidAppConfigurator get_Android();
    public static GenericAppConfigurator Debug();
    private static void CheckForSupportedNunitVersion();
    private static void CheckForLocalNetHttp();
}
[AttributeUsageAttribute("64")]
public class Xamarin.UITest.Events.AfterAppStartedAttribute : Attribute {
}
internal static class Xamarin.UITest.Events.EventManager : object {
    public static void AfterAppStarted(IApp app);
    private static void TriggerAfterAppStarted(IApp app);
    private static IEnumerable`1<MethodInfo> GetStaticMethodsWithAttribute(Type attributeType);
}
public class Xamarin.UITest.Helpers.EnvironmentVariableForwardingHelper : object {
    private static string _forwardToTest;
    private static string _forwardToAut;
    private IEnvironmentVariableHelper _envHelper;
    public EnvironmentVariableForwardingHelper(IEnvironmentVariableHelper envHelper);
    public sealed virtual string GetVariable(string key);
    public sealed virtual Dictionary`2<string, string> MergeAutEnvironmentVariables(Dictionary`2<string, string> autEnvironmentVars);
}
public class Xamarin.UITest.Helpers.EnvironmentVariableHelper : object {
    public sealed virtual string GetEnvironmentVariable(string key);
    public sealed virtual Dictionary`2<string, string> GetEnvironmentVariables();
}
public interface Xamarin.UITest.Helpers.IEnvironmentVariableForwardingHelper {
    public abstract virtual string GetVariable(string key);
    public abstract virtual Dictionary`2<string, string> MergeAutEnvironmentVariables(Dictionary`2<string, string> autEnvironmentVars);
}
public interface Xamarin.UITest.Helpers.IEnvironmentVariableHelper {
    public abstract virtual string GetEnvironmentVariable(string key);
    public abstract virtual Dictionary`2<string, string> GetEnvironmentVariables();
}
public interface Xamarin.UITest.IApp {
    public AppPrintHelper Print { get; }
    public IDevice Device { get; }
    public ITestServer TestServer { get; }
    public abstract virtual AppResult[] Query(Func`2<AppQuery, AppQuery> query);
    public abstract virtual AppResult[] Query(string marked);
    public abstract virtual AppWebResult[] Query(Func`2<AppQuery, AppWebQuery> query);
    public abstract virtual T[] Query(Func`2<AppQuery, AppTypedSelector`1<T>> query);
    public abstract virtual String[] Query(Func`2<AppQuery, InvokeJSAppQuery> query);
    public abstract virtual AppResult[] Flash(Func`2<AppQuery, AppQuery> query);
    public abstract virtual AppResult[] Flash(string marked);
    public abstract virtual void EnterText(string text);
    public abstract virtual void EnterText(Func`2<AppQuery, AppQuery> query, string text);
    public abstract virtual void EnterText(string marked, string text);
    public abstract virtual void EnterText(Func`2<AppQuery, AppWebQuery> query, string text);
    public abstract virtual void ClearText(Func`2<AppQuery, AppQuery> query);
    public abstract virtual void ClearText(Func`2<AppQuery, AppWebQuery> query);
    public abstract virtual void ClearText(string marked);
    public abstract virtual void ClearText();
    public abstract virtual void PressEnter();
    public abstract virtual void DismissKeyboard();
    public abstract virtual void Tap(Func`2<AppQuery, AppQuery> query);
    public abstract virtual void Tap(string marked);
    public abstract virtual void Tap(Func`2<AppQuery, AppWebQuery> query);
    public abstract virtual void TapCoordinates(float x, float y);
    public abstract virtual void TouchAndHold(Func`2<AppQuery, AppQuery> query);
    public abstract virtual void TouchAndHold(string marked);
    public abstract virtual void TouchAndHoldCoordinates(float x, float y);
    public abstract virtual void DoubleTap(Func`2<AppQuery, AppQuery> query);
    public abstract virtual void DoubleTap(string marked);
    public abstract virtual void DoubleTapCoordinates(float x, float y);
    public abstract virtual void PinchToZoomIn(Func`2<AppQuery, AppQuery> query, Nullable`1<TimeSpan> duration);
    public abstract virtual void PinchToZoomIn(string marked, Nullable`1<TimeSpan> duration);
    public abstract virtual void PinchToZoomInCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public abstract virtual void PinchToZoomOut(Func`2<AppQuery, AppQuery> query, Nullable`1<TimeSpan> duration);
    public abstract virtual void PinchToZoomOut(string marked, Nullable`1<TimeSpan> duration);
    public abstract virtual void PinchToZoomOutCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public abstract virtual void WaitFor(Func`1<bool> predicate, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public abstract virtual AppResult[] WaitForElement(Func`2<AppQuery, AppQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public abstract virtual AppResult[] WaitForElement(string marked, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public abstract virtual AppWebResult[] WaitForElement(Func`2<AppQuery, AppWebQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public abstract virtual void WaitForNoElement(Func`2<AppQuery, AppQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public abstract virtual void WaitForNoElement(string marked, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public abstract virtual void WaitForNoElement(Func`2<AppQuery, AppWebQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public abstract virtual FileInfo Screenshot(string title);
    public abstract virtual void SwipeLeftToRight(double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void SwipeLeftToRight(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void SwipeRightToLeft(double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void SwipeRightToLeft(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void SwipeLeftToRight(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void SwipeLeftToRight(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void SwipeRightToLeft(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void SwipeRightToLeft(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void ScrollUp(Func`2<AppQuery, AppQuery> query, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void ScrollUp(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void ScrollDown(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void ScrollDown(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void ScrollTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollUpTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollUpTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollDownTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollDownTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollUpTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollUpTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollDownTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollDownTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void SetOrientationPortrait();
    public abstract virtual void SetOrientationLandscape();
    public abstract virtual AppPrintHelper get_Print();
    public abstract virtual void Repl();
    public abstract virtual IDevice get_Device();
    public abstract virtual void Back();
    public abstract virtual void PressVolumeUp();
    public abstract virtual void PressVolumeDown();
    public abstract virtual ITestServer get_TestServer();
    public abstract virtual object Invoke(string methodName, object argument);
    public abstract virtual object Invoke(string methodName, Object[] arguments);
    public abstract virtual void DragCoordinates(float fromX, float fromY, float toX, float toY);
    public abstract virtual void DragAndDrop(Func`2<AppQuery, AppQuery> from, Func`2<AppQuery, AppQuery> to);
    public abstract virtual void DragAndDrop(string from, string to);
    public abstract virtual void SetSliderValue(string marked, double value);
    public abstract virtual void SetSliderValue(Func`2<AppQuery, AppQuery> query, double value);
}
public interface Xamarin.UITest.IDevice {
    public Uri DeviceUri { get; }
    public string DeviceIdentifier { get; }
    public abstract virtual Uri get_DeviceUri();
    public abstract virtual string get_DeviceIdentifier();
    public abstract virtual void SetLocation(double latitude, double longitude);
}
internal interface Xamarin.UITest.IGestures {
    public abstract virtual AppResult[] Query(AppQuery query);
    public abstract virtual AppResult[] QueryGestureWait(AppQuery query);
    public abstract virtual AppWebResult[] QueryGestureWait(AppWebQuery query);
    public abstract virtual TreeElement[] Dump();
    public abstract virtual TreeElement[] DumpWithDeviceAgent();
    public abstract virtual void WaitForNoneAnimatingOrElapsed(Nullable`1<TimeSpan> timeout);
    public abstract virtual void Scroll(AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public abstract virtual void ScrollTo(AppQuery toQuery, AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void ScrollTo(AppWebQuery toQuery, AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public abstract virtual void SwipeCoordinates(int fromX, int toX, int fromY, int toY, bool withInertia, TimeSpan duration);
}
internal class Xamarin.UITest.iOS.ApplicationSigning.Entities.CodesignIdentity : object {
    public string Name;
    public string SHASum;
    public bool IsDeveloperIdentity { get; }
    public CodesignIdentity(string name, string shaSum);
    public bool get_IsDeveloperIdentity();
}
internal class Xamarin.UITest.iOS.ApplicationSigning.Entities.DeveloperCertificate : object {
    public string CommonName;
    public string SHASum;
    public DeveloperCertificate(string base64EncodedString);
    private static string ParseCommonNameFromSubject(string certificateSubject);
    public CodesignIdentity GetCodesignIdentity();
}
internal class Xamarin.UITest.iOS.ApplicationSigning.Entities.ProvisioningProfile : object {
    private IProcessService ProcessService;
    private ILoggerService LoggerService;
    public FileInfo ProvisioningProfileFile;
    public FileInfo DecodedProvisioningProfilePlistFile;
    public FileInfo ExtractedEntitlementsPlistFile;
    public List`1<DeveloperCertificate> DeveloperCertificates;
    public ProvisioningProfile(FileInfo provisioningProfileFile);
    private FileInfo DecodeProvisioningProfileToPlistFile();
    private FileInfo ExtractEntitlementsToPlistFile();
    private List`1<DeveloperCertificate> ExtractDeveloperCertificate();
    public CodesignIdentity ExtractCodesignIdentity();
}
internal static class Xamarin.UITest.iOS.ApplicationSigning.Managers.ApplicationSigningManager : object {
    private static void SignFrameworks(IProcessService processService, ILoggerService loggerService, ApplicationBundle applicationBundle, CodesignIdentity codesignIdentity, FileInfo entitlementsPlistFile);
    private static void SignXCTestFilesInPluginsDirectory(IProcessService processService, ILoggerService loggerService, ApplicationBundle applicationBundle, ProvisioningProfile provisioningProfile, CodesignIdentity codesignIdentity);
    private static void SignAppexFilesInPluginsDirectory(IProcessService processService, ILoggerService loggerService, ApplicationBundle applicationBundle, ProvisioningProfile provisioningProfile, CodesignIdentity codesignIdentity);
    private static void SignDylibFiles(IProcessService processService, ILoggerService loggerService, ApplicationBundle applicationBundle, CodesignIdentity codesignIdentity, FileInfo entitlementsPlistFile);
    private static void Sign(IProcessService processService, ILoggerService loggerService, ApplicationBundle applicationBundle, CodesignIdentity codesignIdentity, FileInfo entitlementsPlistFile);
    public static void SignBundle(IProcessService processService, ILoggerService loggerService, ApplicationBundle bundle, ProvisioningProfile provisioningProfile, CodesignIdentity codesignIdentity);
}
internal class Xamarin.UITest.iOS.CalabashHostStrategyProxy : object {
    private CancellationTokenSource cancellationTokenSource;
    private Thread _thread;
    private ManualResetEvent _threadIsListening;
    public CalabashHostStrategyProxy(string fifo, RunningProcess instruments, HttpClient calabash, Uri uri);
    public void Start();
    public void Stop();
}
internal class Xamarin.UITest.iOS.DeviceConnectionInfo : object {
    [CompilerGeneratedAttribute]
private string <DeviceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ICalabashConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXDB>k__BackingField;
    public string DeviceAddress { get; }
    public string DeviceIdentifier { get; }
    public ICalabashConnection Connection { get; }
    public bool UseXDB { get; }
    public DeviceConnectionInfo(string deviceIdentifier, ICalabashConnection connection, bool useXDB, string deviceAddress);
    [CompilerGeneratedAttribute]
public string get_DeviceAddress();
    [CompilerGeneratedAttribute]
public string get_DeviceIdentifier();
    [CompilerGeneratedAttribute]
public ICalabashConnection get_Connection();
    [CompilerGeneratedAttribute]
public bool get_UseXDB();
}
internal static class Xamarin.UITest.iOS.DeviceSelectionErrorMessage : object {
    internal static string Generate(string processOutput);
}
internal class Xamarin.UITest.iOS.EnsureVersion : object {
    private VersionNumber _currentVersion;
    private string _name;
    public EnsureVersion(VersionNumber currentVersion, string name);
    public void AtLeast(VersionNumber atLeastVersion, Action action, string optionalErrorMessage);
    public void AtLeast(string atLeastVersion, Action action, string optionalErrorMessage);
    public void LessThan(VersionNumber maxVersion, Action action, string optionalErrorMessage);
    public void LessThan(string maxVersion, Action action, string optionalErrorMessage);
    public void IfAtLeast(string atLeastVersion, Action trueAction, Action falseAction);
    public T AtLeastWithFallback(string atLeastVersion, Func`1<T> func, Func`1<T> fallbackFunc);
}
internal class Xamarin.UITest.iOS.Entities.ApplicationBundle : object {
    public DirectoryInfo AppBundle;
    private static string InfoPlistFileName;
    private static string DSStoreFileName;
    public static string EmbeddedProvisioningProfileFileName;
    private static string CodeSignatureDirectoryName;
    public FileInfo InfoPlistFile;
    public string BundleIdentifier;
    public string BundleExecutable;
    private ILoggerService LoggerService;
    public string Name { get; }
    private string InfoPlistFilePath { get; }
    private string DSStoreFilePath { get; }
    public FileInfo DSStoreFile { get; }
    private string EmbeddedProvisioningProfileFilePath { get; }
    public FileInfo EmbeddedProvisioningProfileFile { get; }
    public ApplicationBundle(string appBundlePath);
    private static ApplicationBundle();
    public string get_Name();
    private string get_InfoPlistFilePath();
    private string get_DSStoreFilePath();
    public FileInfo get_DSStoreFile();
    private string get_EmbeddedProvisioningProfileFilePath();
    public FileInfo get_EmbeddedProvisioningProfileFile();
    public FileInfo ExtractEmbeddedProvisioningProfile(string extractionPath);
    public void ReplaceEmbeddedProvisioningProfile(ProvisioningProfile newProvisioningProfile);
    public void DeleteCodeSignatureDirectory();
    public List`1<FileInfo> GetEmbeddedFrameworksBinaries();
    public List`1<DirectoryInfo> GetXCTestBundles();
    public List`1<DirectoryInfo> GetAppexBundles();
    public List`1<FileInfo> GetDylibs();
}
internal static class Xamarin.UITest.iOS.HostCalabashLogExtractor : object {
    private static Regex _beginEnd;
    private static HostCalabashLogExtractor();
    public static string Extract(int commandIndex, string output);
}
internal class Xamarin.UITest.iOS.HttpCalabashConnection : object {
    private HttpClient _httpClient;
    public HttpCalabashConnection(HttpClient httpClient);
    public sealed virtual HttpResult Map(object arguments);
    public sealed virtual HttpResult Location(object arguments);
    public sealed virtual HttpResult UIA(string command);
    public sealed virtual HttpResult Condition(object condition);
    public sealed virtual HttpResult Backdoor(object condition);
    public sealed virtual HttpResult Dump();
    public sealed virtual HttpResult Version();
    public sealed virtual HttpResult Suspend(double seconds);
    public sealed virtual HttpResult Exit();
    public sealed virtual HttpResult ClearText();
}
internal class Xamarin.UITest.iOS.HttpProxy : object {
    private RunningProcess _instruments;
    private HttpClient _calabash;
    private Uri _uri;
    private ManualResetEvent _threadIsListening;
    private FileInfo _fileInfo;
    private int _index;
    public HttpProxy(string fifo, RunningProcess instruments, HttpClient calabash, Uri uri, ManualResetEvent threadIsListening);
    private static Response WrapWebExceptionAsResponse(Func`1<Response> func);
    public void Start(object obj);
    private Response HandleUia(string jsoncommand, int index);
    private string ExtractResult(int commandIndex);
}
internal class Xamarin.UITest.iOS.iAppData : object {
    public static string CommandName;
    private IProcessRunner _processRunner;
    private string _command;
    public static Regex Pattern;
    internal iAppData(IProcessRunner processRunner, string toolPath);
    private static iAppData();
    public void ClearData(string deviceIdentifier, string bundleId);
}
internal interface Xamarin.UITest.iOS.ICalabashConnection {
    public abstract virtual HttpResult Map(object arguments);
    public abstract virtual HttpResult Location(object arguments);
    public abstract virtual HttpResult UIA(string command);
    public abstract virtual HttpResult Condition(object condition);
    public abstract virtual HttpResult Backdoor(object condition);
    public abstract virtual HttpResult Version();
    public abstract virtual HttpResult Dump();
    public abstract virtual HttpResult Suspend(double seconds);
    public abstract virtual HttpResult Exit();
    public abstract virtual HttpResult ClearText();
}
internal class Xamarin.UITest.iOS.iDeviceTools : object {
    private IProcessRunner _processRunner;
    private iProxy _iProxy;
    private iAppData _iAppData;
    public iProxy iProxy { get; }
    public iAppData iAppData { get; }
    public iDeviceTools(IProcessRunner processRunner);
    private void MakeExecutable(string command, string dir);
    public iProxy get_iProxy();
    public iAppData get_iAppData();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(string dir);
}
internal interface Xamarin.UITest.iOS.ILocationSimulation {
    public abstract virtual void SetGpsCoordinates(double lat, double lon);
}
internal class Xamarin.UITest.iOS.Instruments : object {
    private Dictionary`2<Version, List`1<Simulator>> _SimCtlSimulators;
    private ArtifactFolder _artifactFolder;
    private ResourceLoader _resourceLoader;
    private ProcessRunner _processRunner;
    private iDeviceTools _iTools;
    private Regex _instrumentsCommand;
    private Regex _simVersionRegex;
    private String[] _retryErrors;
    private static bool _xcodeSimQueriesAreSafe;
    public Instruments(ArtifactFolder artifactFolder, ResourceLoader resourceLoader, iDeviceTools iTools);
    internal void KillInstruments();
    private string GetAutomationTemplatePath();
    internal int GetMajorVersionForSimulator(string deviceIdentifier);
    private Dictionary`2<Version, List`1<Simulator>> GetSimctlSimulators();
    internal Version GetDefaultIOSVersion();
    internal string GetDefaultSimDeviceIdentifier(int xcodeVersion);
    internal void StartInstruments(string targetApplication, iOSRunType runType, string deviceId, bool clearAppData);
    internal RunningProcess StartInstrumentsHostLoop(string targetApplication, iOSRunType runType, string deviceId, string fifoPath, bool clearAppData);
    private RunningProcess StartInstrumentsInternal(string targetApplication, iOSRunType runType, string deviceId, string runLoopPath, bool clearAppData, Predicate`1<string> dropLine);
    private bool WaitForInstruments(RunningProcess instrumentsProcess);
    internal void QuitSimulator();
    private void EnsureXcodeSimQueriesAreSafe();
    public void EnsureNoOthersRunning(string deviceIdentifier);
    [CompilerGeneratedAttribute]
private bool <KillInstruments>b__12_0(ProcessInfo pi);
    [CompilerGeneratedAttribute]
private Version <GetSimctlSimulators>g__SimVersion|15_1(string simName);
    [CompilerGeneratedAttribute]
private Version <GetSimctlSimulators>b__15_2(KeyValuePair`2<string, List`1<Simulator>> s);
    [CompilerGeneratedAttribute]
private void <GetDefaultSimDeviceIdentifier>b__17_0(string path);
    [CompilerGeneratedAttribute]
private void <QuitSimulator>b__22_0(string path);
}
public class Xamarin.UITest.iOS.iOSApp : object {
    private VersionNumber _minSupportedCalabashServer;
    private ResourceLoader _resourceLoader;
    private WaitForHelper _waitForHelper;
    private DeviceConnectionInfo _deviceConnectionInfo;
    private IScreenshotTaker _screenshotTaker;
    private iOSGestures _gestures;
    private IExecutor _executor;
    private ErrorReporting _errorReporting;
    private iOSDevice _iosDevice;
    private ITestServer _testServer;
    private SharedApp _sharedApp;
    public AppPrintHelper Print { get; }
    private IDevice Xamarin.UITest.IApp.Device { get; }
    public ITestServer TestServer { get; }
    public iOSDevice Device { get; }
    public iOSApp(IiOSAppConfiguration appConfiguration);
    internal iOSApp(IiOSAppConfiguration appConfiguration, IExecutor executor);
    private iOSDevice CreateiOSDevice(IiOSAppConfiguration appConfiguration, LaunchAppResult launchResult, iOSGestures gestures, HttpClient wsClient, HttpClient xtcServiceClient);
    public sealed virtual AppResult[] Query(Func`2<AppQuery, AppQuery> query);
    public sealed virtual AppWebResult[] Query(Func`2<AppQuery, AppWebQuery> query);
    public sealed virtual T[] Query(Func`2<AppQuery, AppTypedSelector`1<T>> query);
    public sealed virtual String[] Query(Func`2<AppQuery, InvokeJSAppQuery> query);
    public sealed virtual AppResult[] Flash(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void EnterText(string text);
    public sealed virtual void EnterText(Func`2<AppQuery, AppQuery> query, string text);
    public sealed virtual void EnterText(Func`2<AppQuery, AppWebQuery> query, string text);
    public sealed virtual void ClearText(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void ClearText(Func`2<AppQuery, AppWebQuery> query);
    public sealed virtual void ClearText();
    public sealed virtual void PressEnter();
    public sealed virtual void SetOrientationPortrait();
    public sealed virtual void SetOrientationLandscape();
    public sealed virtual void Tap(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void Tap(Func`2<AppQuery, AppWebQuery> query);
    public sealed virtual void TapCoordinates(float x, float y);
    public sealed virtual void SwipeLeftToRight(double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeLeftToRight(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeLeftToRight(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeLeftToRight(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void SwipeRightToLeft(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void TouchAndHold(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void TouchAndHoldCoordinates(float x, float y);
    public sealed virtual void DoubleTap(Func`2<AppQuery, AppQuery> query);
    public sealed virtual void DoubleTapCoordinates(float x, float y);
    public void TwoFingerTap(Func`2<AppQuery, AppQuery> query);
    public void TwoFingerTapCoordinates(float x, float y);
    public void FlickCoordinates(float fromX, float fromY, float toX, float toY);
    public sealed virtual void DragCoordinates(float fromX, float fromY, float toX, float toY);
    public void DragCoordinates(float fromX, float fromY, float toX, float toY, Nullable`1<TimeSpan> duration, Nullable`1<TimeSpan> holdTime);
    public sealed virtual void PinchToZoomIn(Func`2<AppQuery, AppQuery> query, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomInCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomOut(Func`2<AppQuery, AppQuery> query, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomOutCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public sealed virtual void DismissKeyboard();
    public sealed virtual void PressVolumeUp();
    public sealed virtual void PressVolumeDown();
    public void SendAppToBackground(TimeSpan time);
    public sealed virtual void WaitFor(Func`1<bool> predicate, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual AppResult[] WaitForElement(Func`2<AppQuery, AppQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual void WaitForNoElement(Func`2<AppQuery, AppQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual AppWebResult[] WaitForElement(Func`2<AppQuery, AppWebQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual void WaitForNoElement(Func`2<AppQuery, AppWebQuery> query, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual FileInfo Screenshot(string title);
    public sealed virtual AppPrintHelper get_Print();
    public sealed virtual void Repl();
    public sealed virtual object Invoke(string methodName, object argument);
    public sealed virtual object Invoke(string methodName, Object[] arguments);
    private object InvokeInner(string methodName, Object[] arguments);
    public object InvokeUia(string script);
    public object InvokeDeviceAgentQuery(object parameters);
    public void InvokeDeviceAgentGesture(string gesture, object options, object specifiers);
    public void DismissSpringboardAlerts();
    private sealed virtual override IDevice Xamarin.UITest.IApp.get_Device();
    public sealed virtual void Back();
    public sealed virtual ITestServer get_TestServer();
    public iOSDevice get_Device();
    public sealed virtual AppResult[] Query(string marked);
    public sealed virtual AppResult[] Flash(string marked);
    public sealed virtual void EnterText(string marked, string text);
    public sealed virtual void ClearText(string marked);
    public sealed virtual void Tap(string marked);
    public sealed virtual void TouchAndHold(string marked);
    public sealed virtual void DoubleTap(string marked);
    public sealed virtual void PinchToZoomIn(string marked, Nullable`1<TimeSpan> duration);
    public sealed virtual void PinchToZoomOut(string marked, Nullable`1<TimeSpan> duration);
    public sealed virtual void WaitForNoElement(string marked, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual AppResult[] WaitForElement(string marked, string timeoutMessage, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryFrequency, Nullable`1<TimeSpan> postTimeout);
    public sealed virtual void ScrollUp(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollUp(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollDown(Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollDown(string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    public sealed virtual void ScrollUpTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollUpTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollUpTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollUpTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(Func`2<AppQuery, AppWebQuery> toQuery, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollDownTo(string toMarked, string withinMarked, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void TwoFingerTap(string marked);
    public sealed virtual void SetSliderValue(string marked, double value);
    public sealed virtual void SetSliderValue(Func`2<AppQuery, AppQuery> query, double value);
    public void SetInputViewPickerWheelValue(int pickerIndex, int wheelIndex, string value);
    public List`1<UIElement> GetPickers();
    public List`1<UIElement> GetDatePickers();
    public sealed virtual void DragAndDrop(Func`2<AppQuery, AppQuery> from, Func`2<AppQuery, AppQuery> to);
    public sealed virtual void DragAndDrop(string from, string to);
    public void DragAndDrop(Func`2<AppQuery, AppQuery> from, Func`2<AppQuery, AppQuery> to, Nullable`1<TimeSpan> duration, Nullable`1<TimeSpan> holdTime);
    private void DragAndDropInner(Func`2<AppQuery, AppQuery> from, Func`2<AppQuery, AppQuery> to, Nullable`1<TimeSpan> duration, Nullable`1<TimeSpan> holdTime);
    private void ValidateCalabashServerVersion(VersionNumber serverVersion);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
private void <ClearText>b__24_0();
    [CompilerGeneratedAttribute]
private void <PressEnter>b__25_0();
    [CompilerGeneratedAttribute]
private void <SetOrientationPortrait>b__26_0();
    [CompilerGeneratedAttribute]
private void <SetOrientationLandscape>b__27_0();
    [CompilerGeneratedAttribute]
private void <DismissKeyboard>b__53_0();
    [CompilerGeneratedAttribute]
private void <PressVolumeUp>b__54_0();
    [CompilerGeneratedAttribute]
private void <PressVolumeDown>b__55_0();
    [CompilerGeneratedAttribute]
private void <Repl>b__65_0();
    [CompilerGeneratedAttribute]
private void <DismissSpringboardAlerts>b__72_0();
    [CompilerGeneratedAttribute]
private void <Back>b__75_0();
    [CompilerGeneratedAttribute]
private List`1<UIElement> <GetPickers>b__107_0();
    [CompilerGeneratedAttribute]
private List`1<UIElement> <GetDatePickers>b__108_0();
}
internal class Xamarin.UITest.iOS.iOSAppLauncher : object {
    private IProcessRunner _processRunner;
    private IExecutor _executor;
    private ResourceLoader _resourceLoader;
    private static CalabashHostStrategyProxy _proxy;
    private iDeviceTools _iTools;
    private static int HostProxyPortOffset;
    private static int HostStrategyFromVersion;
    private static int HostStrategyForSimulatorFromVersion;
    private static int DEVICE_AGENT_PORT;
    public iOSAppLauncher(IProcessRunner processRunner, IExecutor executor, ResourceLoader resourceLoader);
    public LaunchAppResult LaunchApp(IiOSAppConfiguration appConfiguration, HttpClient httpClient, TestCloudiOSAppConfiguration testCloudAppConfiguration, HttpClient testCloudWsClient, HttpClient xtcServicesClient, bool testCloudUseDeviceAgent);
    private LaunchAppResult LaunchAppLocal(IiOSAppConfiguration appConfiguration, HttpClient httpClient, bool clearAppData);
    private void QuitSimulatorIfNecessary(bool useSim, Instruments instruments, string simId);
    private void SetXamarinStudioAppleSDKOverridePath();
    private void PrepareForDevice(IiOSAppConfiguration appConfiguration, DeviceInfo connectedDevice, bool useDeviceAgentPhysicalDevice, Instruments instruments);
    private void VerifyConfigForDevice(IiOSAppConfiguration appConfiguration, bool useDeviceAgentPhysicalDevice);
    private void SetUpPortForwarding(IiOSAppConfiguration appConfiguration, DeviceInfo connectedDevice, bool useDeviceAgentPhysicalDevice);
    private AppBundleArtifactFolder GetArtifactFolderForBundle(IiOSAppConfiguration appConfiguration);
    private Uri GetiOS8ProxyURI(Uri deviceUri);
    private void PreRunCleanup(int port);
    private bool IsValidAppBundle(string path);
    private bool ValidBundleSupportsSim(IiOSAppBundle appBundle, ArtifactFolder artifactFolder, DeviceInfo connectedDevice);
    private void VerifyWithoutDeviceAgent(IiOSAppConfiguration appConfiguration);
    private string GetOrValidateSimId(Instruments instruments, string deviceIdentifier);
    private DeviceInfo ResolveConnectediOSDevice(string deviceIdentifierConfigured);
    internal static ProvisioningProfile DetermineProvisioningProfile(string appBundlePath, string provisioningProfilePath);
    [AsyncStateMachineAttribute("Xamarin.UITest.iOS.iOSAppLauncher/<StartUsingDeviceAgentAsync>d__26")]
internal Task`1<DeviceConnectionInfo> StartUsingDeviceAgentAsync(string appBundlePath, string appBundleId, string provisioningProfilePath, string codesignIdentityName, string codesignIdentitySHA, string deviceIdentifier, bool isSim, Uri deviceUri, bool clearAppData, IEnumerable`1<string> arguments, Dictionary`2<string, string> environment, ArtifactFolder artifactFolder);
    private DeviceConnectionInfo StartUsingHostStrategy(string targetApplication, Instruments instruments, iOSRunType runType, string deviceIdentifier, HttpClient httpClient, Uri deviceUri, ArtifactFolder artifactFolder, bool clearAppData);
    private void StartOrRestartProxy(string fifo, RunningProcess instrumentsProcess, HttpClient httpClient, Uri os8ProxyUri);
    private DeviceConnectionInfo RunAppTestCloudDevice(TestCloudiOSAppConfiguration appConfiguration, HttpClient webServiceHttpClient, HttpClient xtcServicesHttpClient, HttpClient httpClient, bool clearAppData, bool useDeviceAgent);
    private void UnzipAppBundle(IiOSAppConfiguration appConfiguration, string path);
    private static iOSCalabashDevice GetCalabashDevice(ICalabashConnection connection);
    public iOSCalabashDevice EnsureCalabashRunning(ICalabashConnection connection);
    public LaunchAppResult ConnectToApp(IiOSAppConfiguration appConfiguration, HttpClient httpClient);
}
internal class Xamarin.UITest.iOS.iOSCalabashDevice : object {
    private iOSVersionInfo _versionInfo;
    private VersionNumber _calabashServerVersion;
    public bool IsIPad { get; }
    public bool IsIPhone4In { get; }
    public bool IsSimulator { get; }
    public VersionNumber iOSVersion { get; }
    public VersionNumber CalabashServerVersion { get; }
    public iOSCalabashDevice(iOSVersionInfo versionInfo, VersionNumber calabashServerVersion);
    public bool get_IsIPad();
    public bool get_IsIPhone4In();
    public bool get_IsSimulator();
    public iOSResolution GetScreenSize();
    public VersionNumber get_iOSVersion();
    public VersionNumber get_CalabashServerVersion();
}
public class Xamarin.UITest.iOS.iOSConfig : object {
    private Uri _deviceUri;
    private iOSCalabashDevice _device;
    public Uri DeviceUri { get; }
    public bool IsPhone { get; }
    public bool IsTablet { get; }
    internal iOSConfig(Uri deviceUri, iOSCalabashDevice device);
    public Uri get_DeviceUri();
    public bool get_IsPhone();
    public bool get_IsTablet();
}
public class Xamarin.UITest.iOS.iOSDevice : object {
    private Uri _deviceUri;
    private string _deviceIdentifier;
    private ILocationSimulation _locationSimulation;
    private iOSCalabashDevice _device;
    public Uri DeviceUri { get; }
    public string DeviceIdentifier { get; }
    public bool IsPhone { get; }
    public bool IsTablet { get; }
    public bool IsSimulator { get; }
    public IVersionNumber OSVersion { get; }
    internal iOSDevice(Uri deviceUri, iOSCalabashDevice device, string deviceIdentifier, ILocationSimulation locationSimulation);
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_DeviceIdentifier();
    public sealed virtual void SetLocation(double latitude, double longitude);
    public bool get_IsPhone();
    public bool get_IsTablet();
    public bool get_IsSimulator();
    public IVersionNumber get_OSVersion();
}
internal class Xamarin.UITest.iOS.iOSGestures : object {
    private ICalabashConnection _connection;
    private bool _useXDB;
    private string _deviceAddress;
    private string _deviceIdentifier;
    private iOSCalabashDevice _device;
    private WaitForHelper _waitForHelper;
    private TimeSpan _gestureWaitTimeout;
    private TimeSpan _gestureCompletionTimeout;
    private iOSRectTransformer _rectTransformer;
    private SharedApp _sharedApp;
    private IiOSDeviceAgentService _deviceAgent;
    private IiOSDeviceAgentService _DeviceAgent { get; }
    public iOSGestures(DeviceConnectionInfo deviceConnectionInfo, iOSCalabashDevice device, WaitForHelper waitForHelper, IWaitTimes waitTimes);
    private IiOSDeviceAgentService get__DeviceAgent();
    public sealed virtual AppResult[] Query(AppQuery query);
    public ScrollDirection GetHomeButtonOrientation();
    public sealed virtual TreeElement[] Dump();
    public UIElement GetApplicationUIElement();
    public sealed virtual TreeElement[] DumpWithDeviceAgent();
    private TreeElement BuildTree(AppResult element, Dictionary`2<string, AppResult[]> childrenDictionary);
    public AppResult[] Flash(AppQuery query);
    public sealed virtual AppResult[] QueryGestureWait(AppQuery query);
    public sealed virtual AppWebResult[] QueryGestureWait(AppWebQuery query);
    public AppWebResult[] Query(AppWebQuery query);
    public T[] Query(AppQuery query, Object[] args);
    public T[] Query(AppTypedSelector`1<T> typedQuery);
    private InternalResult`1<T> InternalQuery(AppQuery query, Object[] args, string methodName);
    private T[] Query(IAppTypedSelector typedSelector);
    private InternalResult`1<T> InternalQuery(AppWebQuery query, Object[] args, string methodName);
    public sealed virtual void WaitForNoneAnimatingOrElapsed(Nullable`1<TimeSpan> timeout);
    public void DismissKeyboard();
    public void SetInputViewPickerWheelValue(int pickerIndex, int wheelIndex, string value);
    public List`1<UIElement> GetPickers(string typeOfPickers);
    public void EnterText(SingleQuoteEscapedString text);
    public void ClearText(AppWebQuery query);
    public void PressEnter();
    public bool IsKeyboardVisible();
    public void TapCoordinates(float x, float y);
    public object InvokeUia(string script);
    public Task`1<object> InvokeDeviceAgentQuery(object query);
    public Task InvokeDeviceAgentGesture(string gesture, object options, object specifiers);
    public void DismissSpringboardAlerts();
    public sealed virtual void SwipeCoordinates(int fromX, int toX, int fromY, int toY, bool withInertia, TimeSpan duration);
    private void NotifyLogIfSimulatorSwipeOrScroll();
    public void ScrollTo(string marked);
    public sealed virtual void Scroll(AppQuery withQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia);
    private void ProgrammaticScroll(AppQuery withQuery, ScrollDirection direction);
    private void GestureBasedScroll(AppQuery withinQuery, ScrollDirection scrollDirection, double swipePercentage, int swipeSpeed, bool withInertia);
    public TimeSpan GetScrollTimeout(Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollTo(AppQuery toQuery, AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    public sealed virtual void ScrollTo(AppWebQuery toQuery, AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, Nullable`1<TimeSpan> timeout);
    private void ScrollToInternal(Func`1<bool> toFound, AppQuery withinQuery, ScrollDirection direction, ScrollStrategy strategy, double swipePercentage, int swipeSpeed, bool withInertia, TimeSpan timeout);
    private AppQuery FindScrollableTarget();
    public void DoubleTapCoordinates(float x, float y);
    public void TwoFingerTapCoordinates(float x, float y);
    public void TouchAndHoldCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public void FlickCoordinates(float fromX, float fromY, float toX, float toY);
    public void DragCoordinates(float fromX, float fromY, float toX, float toY, Nullable`1<TimeSpan> duration, Nullable`1<TimeSpan> holdTime);
    public void PinchToZoomInCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public void PinchToZoomOutCoordinates(float x, float y, Nullable`1<TimeSpan> duration);
    public void SetOrientationPortrait();
    public void SetOrientationLandscape();
    public void PressVolumeUp();
    public void PressVolumeDown();
    public sealed virtual void SetGpsCoordinates(double latitude, double longitude);
    private void ValidateSuccessfulCalabashResult(HttpResult result);
    private bool IsSuccessfulCalabashResult(HttpResult result);
    public String[] InvokeJS(IInvokeJSAppQuery invokeJsAppQuery);
    public void SetSliderValue(AppQuery withQuery, double value);
    public void SendAppToBackground(double seconds);
}
internal class Xamarin.UITest.iOS.iOSRectTransformer : object {
    private iOSResolution _resolution;
    private VersionNumber _osVersion;
    public iOSRectTransformer(iOSResolution resolution, VersionNumber osVersion);
    public AppRect TransformRect(AppRect rect, ScrollDirection homeButtonOrientation);
    public iOSResult TransformRect(iOSResult result, ScrollDirection homeButtonOrientation);
}
internal enum Xamarin.UITest.iOS.iOSRunType : Enum {
    public int value__;
    public static iOSRunType Device;
    public static iOSRunType Simulator;
}
internal class Xamarin.UITest.iOS.iOSVersionInfo : object {
    [CompilerGeneratedAttribute]
private string <DeviceFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Simulator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Is4Inch>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionNumber <iOSVersion>k__BackingField;
    public string DeviceFamily { get; private set; }
    public string Simulator { get; private set; }
    public bool Is4Inch { get; private set; }
    public VersionNumber iOSVersion { get; private set; }
    public iOSVersionInfo(Dictionary`2<string, object> dictionary);
    [CompilerGeneratedAttribute]
public string get_DeviceFamily();
    [CompilerGeneratedAttribute]
private void set_DeviceFamily(string value);
    [CompilerGeneratedAttribute]
public string get_Simulator();
    [CompilerGeneratedAttribute]
private void set_Simulator(string value);
    [CompilerGeneratedAttribute]
public bool get_Is4Inch();
    [CompilerGeneratedAttribute]
private void set_Is4Inch(bool value);
    [CompilerGeneratedAttribute]
public VersionNumber get_iOSVersion();
    [CompilerGeneratedAttribute]
private void set_iOSVersion(VersionNumber value);
}
internal class Xamarin.UITest.iOS.iProxy : object {
    public static string CommandName;
    private IProcessRunner _processRunner;
    private string _command;
    internal iProxy(IProcessRunner processRunner, string toolPath);
    private static iProxy();
    public void StartForward(string deviceIdentifier, int hostPort, int devicePort);
    public static void StopAllForwards(int hostPort, IProcessRunner processRunner);
    private static ProcessInfo[] FindExistingForward(int hostPort, IProcessRunner processRunner);
}
internal class Xamarin.UITest.iOS.LaunchAppResult : object {
    [CompilerGeneratedAttribute]
private ArtifactFolder <ArtifactFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceConnectionInfo <DeviceConnectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private iOSCalabashDevice <CalabashDevice>k__BackingField;
    public ArtifactFolder ArtifactFolder { get; public set; }
    public DeviceConnectionInfo DeviceConnectionInfo { get; public set; }
    public iOSCalabashDevice CalabashDevice { get; public set; }
    public LaunchAppResult(ArtifactFolder artifactFolder, DeviceConnectionInfo deviceConnectionInfo, iOSCalabashDevice calabashDevice);
    [CompilerGeneratedAttribute]
public ArtifactFolder get_ArtifactFolder();
    [CompilerGeneratedAttribute]
public void set_ArtifactFolder(ArtifactFolder value);
    [CompilerGeneratedAttribute]
public DeviceConnectionInfo get_DeviceConnectionInfo();
    [CompilerGeneratedAttribute]
public void set_DeviceConnectionInfo(DeviceConnectionInfo value);
    [CompilerGeneratedAttribute]
public iOSCalabashDevice get_CalabashDevice();
    [CompilerGeneratedAttribute]
public void set_CalabashDevice(iOSCalabashDevice value);
}
internal enum Xamarin.UITest.iOS.LinkStatus : Enum {
    public int value__;
    public static LinkStatus CheckFailed;
    public static LinkStatus NotLinked;
    public static LinkStatus Linked;
    public static LinkStatus NoExecutable;
    public static LinkStatus IncompleteBundleGeneratedByXamarinStudio;
    public static LinkStatus ExecutableExists;
}
internal class Xamarin.UITest.iOS.OTool : object {
    private IProcessRunner _processRunner;
    private Version _xcodeVersion;
    public OTool(Version xcodeVersion, IProcessRunner processRunner);
    public LinkStatus CheckForExecutable(string path);
    private LinkStatus IsExecutable(string otoolResultOutput);
}
internal class Xamarin.UITest.iOS.QueryAppHasCalabashLinked : object {
    private string _path;
    public QueryAppHasCalabashLinked(string appBundlePath);
    public sealed virtual LinkStatus Execute(IProcessRunner processRunner);
    private LinkStatus FileLinkedWithCalabash(Version xcodeVersion, IProcessRunner processRunner, string path);
    public LinkStatus AppExecutableExists(Lipo lipo);
}
internal class Xamarin.UITest.iOS.RunLoopHelper : object {
    public static string CreateRunLoop(ArtifactFolder artifactFolder, ResourceLoader resourceLoader);
    public static string CreateHostRunLoop(ArtifactFolder artifactFolder, ResourceLoader resourceLoader, string fifoPath, ProcessRunner processRunner);
    private static void SetExecutable(ProcessRunner processRunner, string fileName);
    private static void WriteLoop(ResourceLoader resourceLoader, string path, string runLoopContent);
}
internal class Xamarin.UITest.iOS.TestCloudDeviceAgentLocationSimulation : object {
    private HttpClient _xtcServicesClient;
    public TestCloudDeviceAgentLocationSimulation(HttpClient xtcServicesClient);
    public sealed virtual void SetGpsCoordinates(double lat, double lon);
}
internal class Xamarin.UITest.iOS.TestCloudiOS8CalabashConnection : object {
    private HttpClient _httpClient;
    private HttpClient _wsHttpClient;
    public TestCloudiOS8CalabashConnection(HttpClient httpClient, HttpClient wsHttpClient);
    public sealed virtual HttpResult Map(object arguments);
    public sealed virtual HttpResult Location(object arguments);
    public sealed virtual HttpResult UIA(string command);
    public sealed virtual HttpResult Condition(object condition);
    public sealed virtual HttpResult Backdoor(object condition);
    public sealed virtual HttpResult Dump();
    public sealed virtual HttpResult Version();
    public sealed virtual HttpResult Suspend(double seconds);
    public sealed virtual HttpResult Exit();
    public sealed virtual HttpResult ClearText();
}
internal class Xamarin.UITest.iOS.TestCloudLocationSimulation : object {
    private HttpClient _wsClient;
    public TestCloudLocationSimulation(HttpClient wsClient);
    public sealed virtual void SetGpsCoordinates(double lat, double lon);
}
public interface Xamarin.UITest.ITestServer {
    public abstract virtual string Post(string endpoint, object arguments);
    public abstract virtual string Put(string endpoint, Byte[] data);
    public abstract virtual string Get(string endpoint);
}
internal static class Xamarin.UITest.MacOS.Utilities.PlistBuddy : object {
    private static string ExecutablePath;
    private static string PrintEntitlementsCommand;
    private static string PrintDeveloperCertificatesCommand;
    private static string ExecuteCommand(string arguments);
    public static string PrintEntitlements(FileInfo provisioningProfileDecodedPlist);
    public static string PrintDeveloperCertificates(FileInfo provisioningProfileDecodedPlist);
}
internal static class Xamarin.UITest.MacOS.Utilities.Xcrun.Codesign : object {
    private static string ToolName;
    private static Codesign();
    public static void Sign(IProcessService processService, ILoggerService loggerService, FileSystemInfo fileToSign, CodesignIdentity identity, FileInfo entitlementsPlistFile);
}
internal static class Xamarin.UITest.MacOS.Utilities.Xcrun.Security : object {
    private static string ToolName;
    private static Security();
    public static List`1<string> FindIdentity(IProcessService processService, ILoggerService loggerService, string policy, bool showOnlyValidIdentities);
    public static FileInfo DecodeProvisioningProfileWithCMS(IProcessService processService, ILoggerService loggerService, FileInfo inputFile);
}
internal static class Xamarin.UITest.MacOS.Utilities.Xcrun.Xcrun : object {
    private static string XcrunPath;
    private static Xcrun();
    public static string RunXcrunToolCommand(IProcessService processService, ILoggerService loggerService, string toolName, string arguments);
}
public enum Xamarin.UITest.Platform : Enum {
    public int value__;
    public static Platform Android;
    public static Platform iOS;
}
public class Xamarin.UITest.Queries.AppPrintHelper : object {
    private IApp _app;
    private IGestures _gestures;
    internal AppPrintHelper(IApp app, IGestures gestures);
    public void Visible();
    public void Query(Func`2<AppQuery, AppQuery> query);
    public void Query(Func`2<AppQuery, AppWebQuery> query);
    public void Query(Func`2<AppQuery, AppTypedSelector`1<T>> typedSelector);
    public void Tree(bool console);
    public void AllElements(bool console);
    private static string ToPrettyString(object obj);
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
}
public class Xamarin.UITest.Queries.AppQuery : object {
    private QueryPlatform _queryPlatform;
    private IQueryToken[] _tokens;
    private InvokeHelper _invokeHelper;
    private IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.Tokens { get; }
    public QueryPlatform QueryPlatform { get; }
    public AppQuery(QueryPlatform queryPlatform);
    private AppQuery(QueryPlatform queryPlatform, Object[] tokens);
    public AppQuery(AppQuery appQuery, Object[] tokens);
    private sealed virtual override IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.get_Tokens();
    private List`1<IQueryToken> tokensFromObjectArray(Object[] tokens);
    public AppQuery Button(string marked);
    public AppQuery TextField(string marked);
    public AppQuery Switch(string marked);
    public AppQuery Class(string className);
    public AppQuery ClassFull(string className);
    public AppQuery Marked(string text);
    public AppQuery Id(string id);
    public AppQuery Id(int id);
    public AppQuery Sibling(string className);
    public AppQuery Sibling(int index);
    public AppQuery Descendant(string className);
    public AppQuery Descendant(int index);
    public AppQuery Parent(string className);
    public AppQuery Parent(int index);
    public AppQuery Child(string className);
    public AppQuery Child(int index);
    public AppQuery All(string className);
    public AppQuery Text(string text);
    public AppQuery Index(int index);
    private AppQuery ComposedAppQuery(AppQuery query, string codeString);
    public AppQuery WebView();
    public AppQuery WebView(int index);
    public AppQuery Raw(string calabashQuery);
    public AppTypedSelector`1<string> Raw(string calabashQuery, object arg1);
    public AppTypedSelector`1<string> Raw(string calabashQuery, object arg1, object arg2);
    public AppTypedSelector`1<string> Raw(string calabashQuery, object arg1, object arg2, object arg3);
    public AppTypedSelector`1<string> Raw(string calabashQuery, object arg1, object arg2, object arg3, object arg4);
    public AppTypedSelector`1<string> Raw(string calabashQuery, object arg1, object arg2, object arg3, object arg4, object arg5);
    public AppTypedSelector`1<string> Raw(string calabashQuery, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6);
    private AppTypedSelector`1<string> InternalRaw(string calabashQuery, Object[] args);
    private static object MapAndroidRawArguments(object argument);
    public AppTypedSelector`1<object> Invoke(string methodName);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2, object arg3);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2, object arg3, object arg4);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2, object arg3, object arg4, object arg5);
    public InvokeJSAppQuery InvokeJS(string javascript);
    public AppWebQuery Css(string cssSelector);
    public AppQuery Frame(string cssSelector);
    public AppWebQuery XPath(string xPathSelector);
    private AppQuery FrameAppQuery(CssToken token);
    private AppQuery CssAppQuery(AppQuery appQuery, CssToken token);
    private AppQuery WebViewAppQuery(AppQuery appQuery);
    private AppQuery WebViewAppQueryWithAllToken(AppQuery appQuery);
    private AppWebQuery WebViewQuery(IQueryToken token);
    public AppQuery Property(string propertyName, string value);
    public AppQuery Property(string propertyName, int value);
    public AppQuery Property(string propertyName, bool value);
    public PropertyAppQuery Property(string propertyName);
    public QueryPlatform get_QueryPlatform();
    public virtual string ToString();
    internal IEnumerable`1<string> RemoveConsecutiveDuplicatesOf(IEnumerable`1<string> tokens, string target);
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
    [CompilerGeneratedAttribute]
private string <ToString>b__61_0(IQueryToken x);
}
public class Xamarin.UITest.Queries.AppRect : object {
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CenterX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CenterY>k__BackingField;
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public float CenterX { get; public set; }
    public float CenterY { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual float get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Height(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_X();
    [CompilerGeneratedAttribute]
public sealed virtual void set_X(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Y(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_CenterX();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CenterX(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_CenterY();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CenterY(float value);
    public virtual string ToString();
}
public class Xamarin.UITest.Queries.AppResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private AppRect <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public string Id { get; public set; }
    public string Description { get; public set; }
    public AppRect Rect { get; public set; }
    public string Label { get; public set; }
    public string Text { get; public set; }
    public string Class { get; public set; }
    public bool Enabled { get; public set; }
    internal AppResult(AndroidResult result);
    internal AppResult(iOSResult result);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public AppRect get_Rect();
    [CompilerGeneratedAttribute]
public void set_Rect(AppRect value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
public class Xamarin.UITest.Queries.AppTypedSelector`1 : object {
    private AppQuery _appQuery;
    private Object[] _queryParams;
    private bool _explicitlyRequestedValue;
    private InvokeHelper _invokeHelper;
    private Object[] Xamarin.UITest.Queries.IAppTypedSelector.QueryParams { get; }
    private AppQuery Xamarin.UITest.Queries.IAppTypedSelector.AppQuery { get; }
    private IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.Tokens { get; }
    private bool Xamarin.UITest.Queries.IAppTypedSelector.ExplicitlyRequestedValue { get; }
    public AppTypedSelector`1(AppQuery appQuery, Object[] queryParams, bool explicitlyRequestedValue);
    private sealed virtual override Object[] Xamarin.UITest.Queries.IAppTypedSelector.get_QueryParams();
    private sealed virtual override AppQuery Xamarin.UITest.Queries.IAppTypedSelector.get_AppQuery();
    private sealed virtual override IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.get_Tokens();
    private sealed virtual override bool Xamarin.UITest.Queries.IAppTypedSelector.get_ExplicitlyRequestedValue();
    public virtual string ToString();
    public AppTypedSelector`1<object> Invoke(string methodName);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2, object arg3);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2, object arg3, object arg4);
    public AppTypedSelector`1<object> Invoke(string methodName, object arg1, object arg2, object arg3, object arg4, object arg5);
    public AppTypedSelector`1<TResult> Value();
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
}
public class Xamarin.UITest.Queries.AppWebQuery : object {
    private QueryPlatform _queryPlatform;
    private IQueryToken[] _tokens;
    private IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.Tokens { get; }
    public QueryPlatform Platform { get; }
    public AppWebQuery(IEnumerable`1<IQueryToken> initialTokens, QueryPlatform queryPlatform, Object[] tokens);
    private sealed virtual override IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.get_Tokens();
    public QueryPlatform get_Platform();
    public AppWebQuery Index(int index);
    public virtual string ToString();
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
    [CompilerGeneratedAttribute]
private string <ToString>b__8_0(IQueryToken x);
}
public class Xamarin.UITest.Queries.AppWebRect : object {
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CenterX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CenterY>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float CenterX { get; public set; }
    public float CenterY { get; public set; }
    public float Top { get; public set; }
    public float Bottom { get; public set; }
    public float Left { get; public set; }
    public float Right { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    protected bool Equals(AppWebRect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Height(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_CenterX();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CenterX(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_CenterY();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CenterY(float value);
    [CompilerGeneratedAttribute]
public float get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(float value);
    [CompilerGeneratedAttribute]
public float get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(float value);
    [CompilerGeneratedAttribute]
public float get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(float value);
    [CompilerGeneratedAttribute]
public float get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_X();
    [CompilerGeneratedAttribute]
public sealed virtual void set_X(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Y(float value);
}
public class Xamarin.UITest.Queries.AppWebResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebView>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextContent>k__BackingField;
    [CompilerGeneratedAttribute]
private AppWebRect <Rect>k__BackingField;
    public string Id { get; public set; }
    public string NodeType { get; public set; }
    public string NodeName { get; public set; }
    public string Class { get; public set; }
    public string Html { get; public set; }
    public string Value { get; public set; }
    public string WebView { get; public set; }
    public string TextContent { get; public set; }
    public AppWebRect Rect { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_NodeType();
    [CompilerGeneratedAttribute]
public void set_NodeType(string value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_WebView();
    [CompilerGeneratedAttribute]
public void set_WebView(string value);
    [CompilerGeneratedAttribute]
public string get_TextContent();
    [CompilerGeneratedAttribute]
public void set_TextContent(string value);
    [CompilerGeneratedAttribute]
public AppWebRect get_Rect();
    [CompilerGeneratedAttribute]
public void set_Rect(AppWebRect value);
}
public interface Xamarin.UITest.Queries.IAppTypedSelector {
    public Object[] QueryParams { get; }
    public AppQuery AppQuery { get; }
    public bool ExplicitlyRequestedValue { get; }
    public abstract virtual Object[] get_QueryParams();
    public abstract virtual AppQuery get_AppQuery();
    public abstract virtual bool get_ExplicitlyRequestedValue();
}
internal interface Xamarin.UITest.Queries.IInvokeJSAppQuery {
    public string Javascript { get; }
    public AppQuery AppQuery { get; }
    public abstract virtual string get_Javascript();
    public abstract virtual AppQuery get_AppQuery();
}
internal class Xamarin.UITest.Queries.InvokeHelper : object {
    public AppTypedSelector`1<object> Invoke(AppQuery appQuery, string methodName, Object[] arguments);
    public AppTypedSelector`1<object> Invoke(IAppTypedSelector selector, string methodName, Object[] arguments);
    private AppTypedSelector`1<object> AppTypedSelector(AppQuery appQuery, ITokenContainer tokenContainer, Object[] queryParams, string methodName, Object[] arguments, bool explicitlyRequestedValue);
}
public class Xamarin.UITest.Queries.InvokeJSAppQuery : object {
    private AppQuery _appQuery;
    private string _javascript;
    private IQueryToken[] _tokens;
    private string Xamarin.UITest.Queries.IInvokeJSAppQuery.Javascript { get; }
    private AppQuery Xamarin.UITest.Queries.IInvokeJSAppQuery.AppQuery { get; }
    private IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.Tokens { get; }
    public InvokeJSAppQuery(AppQuery appQuery, string javascript);
    private sealed virtual override string Xamarin.UITest.Queries.IInvokeJSAppQuery.get_Javascript();
    private sealed virtual override AppQuery Xamarin.UITest.Queries.IInvokeJSAppQuery.get_AppQuery();
    private sealed virtual override IQueryToken[] Xamarin.UITest.Queries.ITokenContainer.get_Tokens();
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
}
public interface Xamarin.UITest.Queries.IRect {
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public float CenterX { get; public set; }
    public float CenterY { get; public set; }
    public abstract virtual float get_Width();
    public abstract virtual void set_Width(float value);
    public abstract virtual float get_Height();
    public abstract virtual void set_Height(float value);
    public abstract virtual float get_X();
    public abstract virtual void set_X(float value);
    public abstract virtual float get_Y();
    public abstract virtual void set_Y(float value);
    public abstract virtual float get_CenterX();
    public abstract virtual void set_CenterX(float value);
    public abstract virtual float get_CenterY();
    public abstract virtual void set_CenterY(float value);
}
public interface Xamarin.UITest.Queries.ITokenContainer {
    public IQueryToken[] Tokens { get; }
    public abstract virtual IQueryToken[] get_Tokens();
}
internal class Xamarin.UITest.Queries.PlatformSpecific.AndroidResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private AppRect <Rect>k__BackingField;
    public string Id { get; public set; }
    public string ContentDescription { get; public set; }
    public string Text { get; public set; }
    public string Description { get; public set; }
    public string Class { get; public set; }
    public bool Enabled { get; public set; }
    public AppRect Rect { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ContentDescription();
    [CompilerGeneratedAttribute]
public void set_ContentDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public AppRect get_Rect();
    [CompilerGeneratedAttribute]
public void set_Rect(AppRect value);
}
internal class Xamarin.UITest.Queries.PlatformSpecific.iOSFrame : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Height { get; public set; }
    public float Width { get; public set; }
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
}
internal class Xamarin.UITest.Queries.PlatformSpecific.iOSResult : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private AppRect <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private iOSFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Id { get; public set; }
    public string Class { get; public set; }
    public string Label { get; public set; }
    public string Description { get; public set; }
    public AppRect Rect { get; public set; }
    public iOSFrame Frame { get; public set; }
    public bool Enabled { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public AppRect get_Rect();
    [CompilerGeneratedAttribute]
public void set_Rect(AppRect value);
    [CompilerGeneratedAttribute]
public iOSFrame get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(iOSFrame value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Xamarin.UITest.Queries.PropertyAppQuery : object {
    private QueryPlatform _queryPlatform;
    private AppQuery _appQuery;
    private string _propertyName;
    public QueryPlatform QueryPlatform { get; }
    public PropertyAppQuery(QueryPlatform queryPlatform, AppQuery appQuery, string propertyName);
    public AppQuery StartsWith(string text);
    public AppQuery EndsWith(string text);
    public AppQuery Contains(string text);
    public AppQuery Like(string text);
    public AppQuery Predicate(string predicate, string text);
    private AppQuery BuildPredicate(SingleQuoteEscapedString text, string predicate, string methodName);
    public AppTypedSelector`1<T> Value();
    public QueryPlatform get_QueryPlatform();
    private sealed virtual override Type Xamarin.UITest.Utils.IFluentInterface.GetType();
}
public enum Xamarin.UITest.Queries.QueryPlatform : Enum {
    public int value__;
    public static QueryPlatform Android;
    public static QueryPlatform iOS;
}
internal class Xamarin.UITest.Queries.Tokens.AllToken : object {
    internal string _className;
    public AllToken(string className);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.BoolPropertyToken : object {
    private string _propertyName;
    private bool _value;
    public BoolPropertyToken(string propertyName, bool value);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.ButtonToken : object {
    private SingleQuoteEscapedString _marked;
    public ButtonToken(SingleQuoteEscapedString marked);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.CssToken : object {
    private string _cssSelector;
    public string CssSelector { get; }
    public CssToken(string cssSelector);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
    public string get_CssSelector();
}
internal class Xamarin.UITest.Queries.Tokens.DirectionalToken : object {
    private string _className;
    private string _modifier;
    private string _codeName;
    public DirectionalToken(string className, string modifier, string codeName);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.HiddenToken : object {
    private string _rawQuery;
    public HiddenToken(string rawQuery);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.IntPropertyToken : object {
    private string _propertyName;
    private int _value;
    public IntPropertyToken(string propertyName, int value);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
public interface Xamarin.UITest.Queries.Tokens.IQueryToken {
    public abstract virtual string ToQueryString(QueryPlatform queryPlatform);
    public abstract virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.PropertyValueToken`1 : object {
    private string _propertyName;
    public PropertyValueToken`1(string propertyName);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.QueryToken : object {
    private AppQuery _query;
    private string _codeString;
    public QueryToken(AppQuery query, string codeString);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.RawToken : object {
    private string _rawQuery;
    private string _codeString;
    public RawToken(string rawQuery, string codeString);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.StringPropertyToken`1 : object {
    private string _propertyName;
    private TEscapedString _value;
    public StringPropertyToken`1(string propertyName, TEscapedString value);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal static class Xamarin.UITest.Queries.Tokens.TokenCodePrinter : object {
    public static string ToCodeString(ITokenContainer tokenContainer);
}
internal class Xamarin.UITest.Queries.Tokens.ValueToken`1 : object {
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal class Xamarin.UITest.Queries.Tokens.WrappingToken : object {
    private string _codeString;
    private IQueryToken _token;
    public WrappingToken(IQueryToken token, string codeString);
    public sealed virtual string ToQueryString(QueryPlatform queryPlatform);
    public sealed virtual string ToCodeString();
}
internal enum Xamarin.UITest.ScrollDirection : Enum {
    public int value__;
    public static ScrollDirection Up;
    public static ScrollDirection Down;
    public static ScrollDirection Left;
    public static ScrollDirection Right;
}
[ExtensionAttribute]
internal static class Xamarin.UITest.ScrollDirectionExtensions : object {
    [ExtensionAttribute]
public static ScrollDirection Opposite(ScrollDirection direction);
}
public enum Xamarin.UITest.ScrollStrategy : Enum {
    public int value__;
    public static ScrollStrategy Auto;
    public static ScrollStrategy Programmatically;
    public static ScrollStrategy Gesture;
}
internal class Xamarin.UITest.Shared.iOS.iOSSimulatorManagement : object {
    private HashHelper _hashHelper;
    private string _simulatorRootPath;
    internal void PrepareSimulator(string deviceId, string targetApplication, bool clearData);
    private void EnableSoftKeyboard(string deviceId);
    private string ExtractAppIdentifier(string appBundlePath);
    private string ExtractUUID(string deviceId);
}
internal class Xamarin.UITest.SharedApp : object {
    private QueryPlatform _platform;
    private IGestures _gestures;
    private ErrorReporting _errorReporting;
    public ErrorReporting ErrorReporting { get; }
    public SharedApp(QueryPlatform platform, IGestures gestures);
    public ErrorReporting get_ErrorReporting();
    public void LogWithWithinQuery(string message, Func`2<AppQuery, AppQuery> withinQuery);
    public void LogWithToQuery(string message, Func`2<AppQuery, AppWebQuery> toQuery);
    public void LogWithToQueryWithinQuery(string message, Func`2<AppQuery, AppQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery);
    public void LogWithToQueryWithinQuery(string message, Func`2<AppQuery, AppWebQuery> toQuery, Func`2<AppQuery, AppQuery> withinQuery);
    public string AppendToMessageIfNotNotNull(string message, string prefix, ITokenContainer container);
    public string AppendToMessageIfNotNotNull(string message, ITokenContainer container);
    public AppQuery ExpandIfNotNull(Func`2<AppQuery, AppQuery> query);
    public AppQuery Expand(Func`2<AppQuery, AppQuery> query);
    public AppWebQuery Expand(Func`2<AppQuery, AppWebQuery> query);
    public AppTypedSelector`1<T> Expand(Func`2<AppQuery, AppTypedSelector`1<T>> typedQuery);
    public string ToCodeString(ITokenContainer container);
    public Func`2<AppQuery, AppQuery> AsMarkedQuery(string marked);
    public T FirstWithLog(T[] results, ITokenContainer tokenContainer);
    public void ScrollUp(double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia);
    public void ScrollDown(double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia);
    public void ScrollLeft(double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia);
    public void ScrollRight(double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia);
    public void ScrollUpTo(Func`2<AppQuery, AppWebQuery> toQuery, double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollUpTo(Func`2<AppQuery, AppQuery> toQuery, double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollDownTo(Func`2<AppQuery, AppQuery> toQuery, double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia, Nullable`1<TimeSpan> timeout);
    public void ScrollDownTo(Func`2<AppQuery, AppWebQuery> toQuery, double swipePercentage, int swipeSpeed, Func`2<AppQuery, AppQuery> withinQuery, ScrollStrategy strategy, bool withInertia, Nullable`1<TimeSpan> timeout);
    private Func`2<AppQuery, AppQuery> WindowQuery();
    public void SwipeLeftToRight(double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeLeftToRight(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeLeftToRight(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeLeftToRight(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeRightToLeft(double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeRightToLeft(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeRightToLeft(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeRightToLeft(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeDownToUp(double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeDownToUp(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeDownToUp(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeDownToUp(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeUpToDown(double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeUpToDown(Func`2<AppQuery, AppQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeUpToDown(Func`2<AppQuery, AppWebQuery> query, double swipePercentage, int swipeSpeed, bool withInertia);
    public void SwipeUpToDown(string marked, double swipePercentage, int swipeSpeed, bool withInertia);
    public void Swipe(Func`2<AppQuery, AppQuery> query, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia);
    public void Swipe(Func`2<AppQuery, AppWebQuery> query, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia);
    private void PerformSwipe(IRect target, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia, string codeString);
    public void Swipe(AppQuery appQuery, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia);
    public void Swipe(AppWebQuery appQuery, ScrollDirection direction, double swipePercentage, int swipeSpeed, bool withInertia);
    public int CalculateDurationForSwipe(int startX, int startY, int endX, int endY, int pixelsPerSecond);
    public static void BuildLogger(bool debug, string logDirectory);
}
internal class Xamarin.UITest.TestCloud.Queries.QueryXamarinTestCloudiOSVersion : object {
    public sealed virtual VersionNumber Execute();
}
internal class Xamarin.UITest.TestCloud.TestCloudAndroidAppConfiguration : object {
    private Uri _deviceUri;
    private FileInfo _apkFile;
    private string _launchableActivity;
    private AppDataMode _appDataMode;
    private bool _disableSpecFlowIntegration;
    public Uri DeviceUri { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public string DeviceSerial { get; }
    public string LogDirectory { get; }
    public FileInfo KeyStore { get; }
    public FileInfo SIFile { get; }
    public string KeyStoreKeyPassword { get; }
    public string KeyStorePassword { get; }
    public string KeyStoreKeyAlias { get; }
    public FileInfo ApkFile { get; }
    public string InstalledAppPackageName { get; }
    public bool Debug { get; }
    public bool EnableScreenshots { get; }
    public StartAction StartAction { get; }
    public AppDataMode AppDataMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public string LaunchableActivity { get; }
    public IWaitTimes WaitTimes { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public TestCloudAndroidAppConfiguration(IAndroidAppConfiguration appConfiguration, IExecutor executor);
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_ConfiguredDeviceIp();
    public sealed virtual Nullable`1<int> get_ConfiguredDevicePort();
    public sealed virtual string get_DeviceSerial();
    public sealed virtual string get_LogDirectory();
    public sealed virtual FileInfo get_KeyStore();
    public sealed virtual FileInfo get_SIFile();
    public sealed virtual string get_KeyStoreKeyPassword();
    public sealed virtual string get_KeyStorePassword();
    public sealed virtual string get_KeyStoreKeyAlias();
    public sealed virtual FileInfo get_ApkFile();
    public sealed virtual string get_InstalledAppPackageName();
    public sealed virtual bool get_Debug();
    public sealed virtual bool get_EnableScreenshots();
    public sealed virtual StartAction get_StartAction();
    public sealed virtual AppDataMode get_AppDataMode();
    public sealed virtual bool get_DisableSpecFlowIntegration();
    public sealed virtual string get_LaunchableActivity();
    public sealed virtual void Verify();
    public sealed virtual IWaitTimes get_WaitTimes();
    public sealed virtual IdeIntegrationMode get_IdeIntegrationMode();
}
internal class Xamarin.UITest.TestCloud.TestCloudAppInfo : object {
    private FileInfo _appFile;
    private string _appId;
    public FileInfo AppFile { get; }
    public string AppId { get; }
    public TestCloudAppInfo(string appPath, string appId);
    public FileInfo get_AppFile();
    public string get_AppId();
}
internal class Xamarin.UITest.TestCloud.TestCloudiOSAppConfiguration : object {
    private Uri _deviceUri;
    private Uri _deviceWebServiceEndpointUri;
    private Uri _xtcServiceEndpointUri;
    private TestCloudAppInfo _appInfo;
    private AppDataMode _appDataMode;
    private bool _disableSpecFlowIntegration;
    private IWaitTimes _waitTimes;
    private IEnumerable`1<string> _autArguments;
    private Dictionary`2<string, string> _autEnvironmentVars;
    public Uri DeviceUri { get; }
    public string ConfiguredDeviceIp { get; }
    public Nullable`1<int> ConfiguredDevicePort { get; }
    public Uri DeviceWebServiceEndpointUri { get; }
    public Uri XtcServiceEndpointUri { get; }
    public string LogDirectory { get; }
    public string InstalledAppBundleId { get; }
    public string DeviceIdentifier { get; }
    public FileInfo AppBundleZip { get; }
    public TestCloudAppInfo TestCloudAppInfo { get; }
    public DirectoryInfo AppBundleDirectory { get; }
    public bool Debug { get; }
    public bool EnableScreenshots { get; }
    public StartAction StartAction { get; }
    public IWaitTimes WaitTimes { get; }
    public string IDBPathUserOverride { get; }
    public IdeIntegrationMode IdeIntegrationMode { get; }
    public AppDataMode AppDataMode { get; }
    public bool DisableSpecFlowIntegration { get; }
    public IEnumerable`1<string> AutArguments { get; }
    public Dictionary`2<string, string> AutEnvironmentVars { get; }
    public string CodesignIdentityName { get; }
    public string CodesignIdentitySHA { get; }
    public string PathToProvisioningProfile { get; }
    public TestCloudiOSAppConfiguration(IiOSAppConfiguration appConfiguration, IExecutor executor);
    public sealed virtual Uri get_DeviceUri();
    public sealed virtual string get_ConfiguredDeviceIp();
    public sealed virtual Nullable`1<int> get_ConfiguredDevicePort();
    public Uri get_DeviceWebServiceEndpointUri();
    public Uri get_XtcServiceEndpointUri();
    public sealed virtual string get_LogDirectory();
    public sealed virtual string get_InstalledAppBundleId();
    public sealed virtual string get_DeviceIdentifier();
    public sealed virtual FileInfo get_AppBundleZip();
    public TestCloudAppInfo get_TestCloudAppInfo();
    public sealed virtual DirectoryInfo get_AppBundleDirectory();
    public sealed virtual void Verify();
    public sealed virtual bool get_Debug();
    public sealed virtual bool get_EnableScreenshots();
    public sealed virtual StartAction get_StartAction();
    public sealed virtual IWaitTimes get_WaitTimes();
    public sealed virtual string get_IDBPathUserOverride();
    public sealed virtual IdeIntegrationMode get_IdeIntegrationMode();
    public sealed virtual AppDataMode get_AppDataMode();
    public sealed virtual bool get_DisableSpecFlowIntegration();
    public sealed virtual IEnumerable`1<string> get_AutArguments();
    public sealed virtual Dictionary`2<string, string> get_AutEnvironmentVars();
    public sealed virtual string get_CodesignIdentityName();
    public sealed virtual string get_CodesignIdentitySHA();
    public sealed virtual string get_PathToProvisioningProfile();
}
public static class Xamarin.UITest.TestEnvironment : object {
    public static TestPlatform Platform { get; }
    public static bool IsTestCloud { get; }
    public static TestPlatform get_Platform();
    public static bool get_IsTestCloud();
}
public enum Xamarin.UITest.TestPlatform : Enum {
    public int value__;
    public static TestPlatform Local;
    public static TestPlatform TestCloudAndroid;
    public static TestPlatform TestCloudiOS;
}
public static class Xamarin.UITest.UITestConstants : object {
    public static string DefaultDeviceIp;
    public static double DefaultSwipePercentage;
    public static int DefaultSwipeSpeed;
    public static string AUTArgIdentifier;
}
internal class Xamarin.UITest.Utils.ConsoleTreePrinter : object {
    public sealed virtual void PrintTreeElement(TreeElement element, int indent);
    private static void Write(string str, Nullable`1<ConsoleColor> color);
    private static void WriteLine(string str, Nullable`1<ConsoleColor> color);
}
internal class Xamarin.UITest.Utils.DefaultWaitTimes : object {
    public TimeSpan WaitForTimeout { get; }
    public TimeSpan GestureWaitTimeout { get; }
    public TimeSpan GestureCompletionTimeout { get; }
    public sealed virtual TimeSpan get_WaitForTimeout();
    public sealed virtual TimeSpan get_GestureWaitTimeout();
    public sealed virtual TimeSpan get_GestureCompletionTimeout();
}
internal class Xamarin.UITest.Utils.DumpElement : object {
    [CompilerGeneratedAttribute]
private bool <enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <visible>k__BackingField;
    [CompilerGeneratedAttribute]
private DumpElement[] <children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <el>k__BackingField;
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <value>k__BackingField;
    public bool enabled { get; public set; }
    public bool visible { get; public set; }
    public DumpElement[] children { get; public set; }
    public string label { get; public set; }
    public string type { get; public set; }
    public string id { get; public set; }
    public string el { get; public set; }
    public string name { get; public set; }
    public string value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_enabled();
    [CompilerGeneratedAttribute]
public void set_enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_visible();
    [CompilerGeneratedAttribute]
public void set_visible(bool value);
    [CompilerGeneratedAttribute]
public DumpElement[] get_children();
    [CompilerGeneratedAttribute]
public void set_children(DumpElement[] value);
    [CompilerGeneratedAttribute]
public string get_label();
    [CompilerGeneratedAttribute]
public void set_label(string value);
    [CompilerGeneratedAttribute]
public string get_type();
    [CompilerGeneratedAttribute]
public void set_type(string value);
    [CompilerGeneratedAttribute]
public string get_id();
    [CompilerGeneratedAttribute]
public void set_id(string value);
    [CompilerGeneratedAttribute]
public string get_el();
    [CompilerGeneratedAttribute]
public void set_el(string value);
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public void set_name(string value);
    [CompilerGeneratedAttribute]
public string get_value();
    [CompilerGeneratedAttribute]
public void set_value(string value);
    public TreeElement ToTreeElement(bool trimInvisibleLeaves);
    [IteratorStateMachineAttribute("Xamarin.UITest.Utils.DumpElement/<GetAllElements>d__37")]
public IEnumerable`1<DumpElement> GetAllElements();
}
internal class Xamarin.UITest.Utils.ErrorReporting : object {
    private QueryPlatform _platform;
    public ErrorReporting(QueryPlatform platform);
    internal T With(Func`1<T> func, Object[] args, string memberName);
    internal void With(Action func, Object[] args, string memberName);
    private string Format(object o);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.UITest.Utils.IFluentInterface {
    [EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object obj);
}
internal class Xamarin.UITest.Utils.Integration.IdeConnection : object {
    private IIdeHost host;
    private string sessionString;
    private NamedPipeClientStream channel;
    public bool Connect(string testAssemblyPath, Platform platform);
    public sealed virtual void Dispose();
    public TestRunContext PrepareTestApp();
}
internal class Xamarin.UITest.Utils.Integration.IdeIntegrationClient : object {
    public static Assembly TestAssembly;
    public TestRunContext TryConnect(Platform platform);
}
internal interface Xamarin.UITest.Utils.Integration.IIdeHost {
    public abstract virtual string GetHostEndPoint(string sessionString);
    public abstract virtual string PrepareTestApp(string sessionString);
}
[ExtensionAttribute]
internal static class Xamarin.UITest.Utils.Integration.RemotingUtil : object {
    public static string PipeNameEnvVar;
    public static string HostUri;
    public static string GetHostUrl(string pipeName);
    public static NamedPipeClientStream CreateClientChannel(string pipeName);
    [IteratorStateMachineAttribute("Xamarin.UITest.Utils.Integration.RemotingUtil/<ParseProperties>d__4")]
public static IEnumerable`1<KeyValuePair`2<string, string>> ParseProperties(string properties);
    public static string CreatePropertyString(string key, string value);
    [ExtensionAttribute]
public static string AppendProperty(string propertyString, string key, string value);
}
public class Xamarin.UITest.Utils.Integration.TestRunContext : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TestAppDeployed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidKeystoreLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidKeyAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidKeystorePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidKeyPassword>k__BackingField;
    public bool Success { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool TestAppDeployed { get; public set; }
    public string PackageFile { get; public set; }
    public string DeviceId { get; public set; }
    public string AppId { get; public set; }
    public string AndroidKeystoreLocation { get; public set; }
    public string AndroidKeyAlias { get; public set; }
    public string AndroidKeystorePassword { get; public set; }
    public string AndroidKeyPassword { get; public set; }
    internal TestRunContext(string properties);
    public static TestRunContext CreateError(string message);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_TestAppDeployed();
    [CompilerGeneratedAttribute]
public void set_TestAppDeployed(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageFile();
    [CompilerGeneratedAttribute]
public void set_PackageFile(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    [CompilerGeneratedAttribute]
public void set_DeviceId(string value);
    [CompilerGeneratedAttribute]
public string get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidKeystoreLocation();
    [CompilerGeneratedAttribute]
public void set_AndroidKeystoreLocation(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidKeyAlias();
    [CompilerGeneratedAttribute]
public void set_AndroidKeyAlias(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidKeystorePassword();
    [CompilerGeneratedAttribute]
public void set_AndroidKeystorePassword(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidKeyPassword();
    [CompilerGeneratedAttribute]
public void set_AndroidKeyPassword(string value);
    internal string Serialize();
}
internal interface Xamarin.UITest.Utils.ITreePrinter {
    public abstract virtual void PrintTreeElement(TreeElement element, int indent);
}
public interface Xamarin.UITest.Utils.IVersionNumber {
    public int Major { get; }
    public int Minor { get; }
    public abstract virtual int get_Major();
    public abstract virtual int get_Minor();
}
public interface Xamarin.UITest.Utils.IWaitTimes {
    public TimeSpan WaitForTimeout { get; }
    public TimeSpan GestureWaitTimeout { get; }
    public TimeSpan GestureCompletionTimeout { get; }
    public abstract virtual TimeSpan get_WaitForTimeout();
    public abstract virtual TimeSpan get_GestureWaitTimeout();
    public abstract virtual TimeSpan get_GestureCompletionTimeout();
}
internal class Xamarin.UITest.Utils.LoggerTreePrinter : object {
    public sealed virtual void PrintTreeElement(TreeElement element, int indent);
}
public class Xamarin.UITest.Utils.RawJson : object {
    private string _json;
    public string Json { get; }
    public RawJson(string json);
    public string get_Json();
}
public class Xamarin.UITest.Utils.ReplWaitTimes : object {
    public TimeSpan WaitForTimeout { get; }
    public TimeSpan GestureWaitTimeout { get; }
    public TimeSpan GestureCompletionTimeout { get; }
    public sealed virtual TimeSpan get_WaitForTimeout();
    public sealed virtual TimeSpan get_GestureWaitTimeout();
    public sealed virtual TimeSpan get_GestureCompletionTimeout();
}
internal class Xamarin.UITest.Utils.SharedTestServer : object {
    private HttpClient _httpClient;
    public SharedTestServer(HttpClient httpClient);
    public sealed virtual string Post(string endpoint, object arguments);
    public sealed virtual string Get(string endpoint);
    public sealed virtual string Put(string endpoint, Byte[] data);
}
internal static class Xamarin.UITest.Utils.SpecFlow.SpecFlowIntegrator : object {
    public static void CheckForSpecFlowAndLoadIntegration(ArtifactFolder artifactFolder);
    internal static void LoadSpecFlowArtifactsIntoAssembly(ArtifactFolder artifactFolder, String[] artifactNames);
}
internal class Xamarin.UITest.Utils.TestCloudWaitTimes : object {
    public TimeSpan WaitForTimeout { get; }
    public TimeSpan GestureWaitTimeout { get; }
    public TimeSpan GestureCompletionTimeout { get; }
    public sealed virtual TimeSpan get_WaitForTimeout();
    public sealed virtual TimeSpan get_GestureWaitTimeout();
    public sealed virtual TimeSpan get_GestureCompletionTimeout();
}
internal class Xamarin.UITest.Utils.TreeElement : object {
    private string _id;
    private string _text;
    private string _label;
    private String[] _fullTypes;
    private TreeElement[] _children;
    private bool _visible;
    public string Id { get; }
    public string Label { get; }
    public string Text { get; }
    public String[] FullTypes { get; }
    public bool Visible { get; }
    public string SimplifiedType { get; }
    public TreeElement[] Children { get; }
    public bool Condensable { get; }
    public TreeElement(string id, string label, string text, string type, TreeElement[] children, bool visible);
    public string get_Id();
    public string get_Label();
    public string get_Text();
    public String[] get_FullTypes();
    public bool get_Visible();
    public string get_SimplifiedType();
    public TreeElement[] get_Children();
    public bool get_Condensable();
    public void Condense();
}
internal class Xamarin.UITest.Utils.TreePrintHelper : object {
    private IGestures _gestures;
    public TreePrintHelper(IGestures gestures);
    public void PrintTree(ITreePrinter treePrinter);
    public void PrintTreeWithDeviceAgent(ITreePrinter treePrinter);
}
public class Xamarin.UITest.Utils.UIElement : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <HitPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UIElement> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hitable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasKeyboardFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <Rect>k__BackingField;
    public string Id { get; public set; }
    public bool HasFocus { get; public set; }
    public string Label { get; public set; }
    public string Type { get; public set; }
    public string Title { get; public set; }
    public string Value { get; public set; }
    public Dictionary`2<string, int> HitPoint { get; public set; }
    public bool Enabled { get; public set; }
    public string Placeholder { get; public set; }
    public List`1<UIElement> Children { get; public set; }
    public bool Hitable { get; public set; }
    public bool HasKeyboardFocus { get; public set; }
    public bool Selected { get; public set; }
    public Dictionary`2<string, int> Rect { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_HasFocus();
    [CompilerGeneratedAttribute]
public void set_HasFocus(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_HitPoint();
    [CompilerGeneratedAttribute]
public void set_HitPoint(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public List`1<UIElement> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<UIElement> value);
    [CompilerGeneratedAttribute]
public bool get_Hitable();
    [CompilerGeneratedAttribute]
public void set_Hitable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasKeyboardFocus();
    [CompilerGeneratedAttribute]
public void set_HasKeyboardFocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_Rect();
    [CompilerGeneratedAttribute]
public void set_Rect(Dictionary`2<string, int> value);
    internal TreeElement ToTreeElement();
    [IteratorStateMachineAttribute("Xamarin.UITest.Utils.UIElement/<GetDescendants>d__57")]
private IEnumerable`1<UIElement> GetDescendants(string type);
    public List`1<UIElement> Descendants(string type);
}
internal class Xamarin.UITest.Utils.UnhandledExceptionWorkaround : object {
    private static object Lock;
    private static UnhandledExceptionWorkaround _workaround;
    private static List`1<Exception> Exceptions;
    private int _maxStaleThreads;
    private int _staleThreads;
    private UnhandledExceptionWorkaround(int maxStaleThreads);
    private static UnhandledExceptionWorkaround();
    private static void InstallWorkaround(int maxStaleThreads);
    private void UncaughtExceptionHandler(object s, UnhandledExceptionEventArgs e);
    public static void HandleUncaughtExceptionsFromOtherThreads(string message);
    public static void ClearUncaughtExceptionsFromOtherThreads();
}
public class Xamarin.UITest.Utils.VersionNumber : object {
    private string _label;
    private int _major;
    private int _minor;
    private int _buildOrPatch;
    private int _revision;
    private string _rawVersion;
    public string Label { get; }
    public string RawVersion { get; }
    public int Major { get; }
    public int Minor { get; }
    public int BuildOrPatch { get; }
    public int Revision { get; }
    public VersionNumber(string versionStr);
    public string get_Label();
    public string get_RawVersion();
    public sealed virtual int get_Major();
    public sealed virtual int get_Minor();
    public int get_BuildOrPatch();
    public int get_Revision();
    public static int CompareTo(VersionNumber v1, VersionNumber v2);
    public virtual string ToString();
    public sealed virtual int CompareTo(VersionNumber v1);
    public static bool op_LessThan(VersionNumber x, VersionNumber y);
    public static bool op_GreaterThan(VersionNumber x, VersionNumber y);
    public static bool op_LessThanOrEqual(VersionNumber x, VersionNumber y);
    public static bool op_GreaterThanOrEqual(VersionNumber x, VersionNumber y);
    public static bool op_Equality(VersionNumber x, VersionNumber y);
    public static bool op_Inequality(VersionNumber x, VersionNumber y);
    public sealed virtual bool Equals(VersionNumber x);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int TryParseIntOr(string value, int fallback);
}
internal class Xamarin.UITest.XDB.Entities.HttpResult`1 : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Content>k__BackingField;
    public HttpStatusCode StatusCode { get; public set; }
    public T Content { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Content(T value);
}
internal interface Xamarin.UITest.XDB.Entities.IHttpResult`1 {
    public HttpStatusCode StatusCode { get; public set; }
    public T Content { get; public set; }
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual void set_StatusCode(HttpStatusCode value);
    public abstract virtual T get_Content();
    public abstract virtual void set_Content(T value);
}
internal interface Xamarin.UITest.XDB.Entities.IiOSAppBundle {
    public string BundleId { get; }
    public string DTPlatform { get; }
    public string Path { get; }
    public abstract virtual string get_BundleId();
    public abstract virtual string get_DTPlatform();
    public abstract virtual string get_Path();
}
internal class Xamarin.UITest.XDB.Entities.iOSAppBundle : object {
    private IPListService _plistService;
    private Dictionary`2<string, string> _infoPLlistValues;
    private string _infoPListXml;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string BundleId { get; }
    public string DTPlatform { get; }
    public string Path { get; }
    public iOSAppBundle(string path, IPListService plistService);
    public sealed virtual string get_BundleId();
    public sealed virtual string get_DTPlatform();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    private string GetPListValue(string key);
}
internal class Xamarin.UITest.XDB.Entities.LatLong : ValueType {
    public double Latitude;
    public double Longitude;
    public LatLong(double lattitude, double longitude);
}
internal enum Xamarin.UITest.XDB.Enums.DeviceOrientation : Enum {
    public int value__;
    public static DeviceOrientation Portrait;
    public static DeviceOrientation PortraitUpsideDown;
    public static DeviceOrientation LandscapeLeft;
    public static DeviceOrientation LandscapeRight;
}
internal enum Xamarin.UITest.XDB.Enums.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
}
internal enum Xamarin.UITest.XDB.Enums.PinchDirection : Enum {
    public int value__;
    public static PinchDirection In;
    public static PinchDirection Out;
}
internal enum Xamarin.UITest.XDB.Enums.VolumeDirection : Enum {
    public int value__;
    public static VolumeDirection Up;
    public static VolumeDirection Down;
}
internal class Xamarin.UITest.XDB.Exceptions.DeviceAgentException : XdbException {
    public DeviceAgentException(string message);
    public DeviceAgentException(string message, Exception inner);
}
internal class Xamarin.UITest.XDB.Exceptions.ExternalProcessException : XdbException {
    public ExternalProcessException(string message);
    public ExternalProcessException(string message, Exception inner);
}
internal class Xamarin.UITest.XDB.Exceptions.IDB.IDBLocatorException : XdbException {
    public IDBLocatorException(string message);
    public IDBLocatorException(string message, Exception inner);
}
internal class Xamarin.UITest.XDB.Exceptions.IDBException : XdbException {
    public IDBException(string message);
    public IDBException(string message, Exception inner);
}
internal class Xamarin.UITest.XDB.Exceptions.Net.UnexpectedResponseException : XdbException {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; }
    public UnexpectedResponseException(string content);
    public UnexpectedResponseException(string message, string content);
    public UnexpectedResponseException(string message, Exception inner, string content);
    [CompilerGeneratedAttribute]
public string get_Content();
}
internal class Xamarin.UITest.XDB.Exceptions.PList.PListDuplicateKeyException : PListParsingException {
    public PListDuplicateKeyException(string message);
    public PListDuplicateKeyException(string message, Exception inner);
}
internal class Xamarin.UITest.XDB.Exceptions.PList.PListMissingKeyException : PListParsingException {
    public PListMissingKeyException(string message);
    public PListMissingKeyException(string message, Exception inner);
}
internal abstract class Xamarin.UITest.XDB.Exceptions.PList.PListParsingException : XdbException {
    public PListParsingException(string message);
    public PListParsingException(string message, Exception inner);
}
internal abstract class Xamarin.UITest.XDB.Exceptions.XdbException : Exception {
    public XdbException(string message);
    public XdbException(string message, Exception inner);
}
internal static class Xamarin.UITest.XDB.ServiceHelper : object {
    public static void RegisterServices(Action`2<Type, Type> registerSingletonServiceType);
}
internal class Xamarin.UITest.XDB.Services.DependenciesDeploymentService : object {
    private IProcessService _processService;
    private static string HashResource;
    private static string DependenciesResource;
    private static string DeviceAgentBundleVersionResource;
    private static string DeviceAgentRunnerApp;
    private static Lazy`1<string> _deviceAgentBundleVersion;
    private static Lazy`1<string> _hash;
    [CompilerGeneratedAttribute]
private string <PathToDeviceTestRunner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathToSimTestRunner>k__BackingField;
    private static Assembly XDBCoreAssembly { get; }
    public string DeviceAgentBundleVersion { get; }
    public string HashId { get; }
    public string PathToDeviceTestRunner { get; }
    public string PathToSimTestRunner { get; }
    public DependenciesDeploymentService(IProcessService processService);
    private static DependenciesDeploymentService();
    private static Assembly get_XDBCoreAssembly();
    public sealed virtual string get_DeviceAgentBundleVersion();
    public sealed virtual string get_HashId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathToDeviceTestRunner();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathToSimTestRunner();
    public sealed virtual void Install(string directory);
}
internal class Xamarin.UITest.XDB.Services.EnvironmentService : object {
    private string DeviceAgentResigningTempFolderPath;
    private CodesignIdentity CodesignIdentity;
    private ProvisioningProfile ProvisioningProfile;
    private Lazy`1<bool> _isInTestCloud;
    [CompilerGeneratedAttribute]
private string <IDBPathUserOverride>k__BackingField;
    public string IDBPathUserOverride { get; public set; }
    public bool IsInTestCloud { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_IDBPathUserOverride();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IDBPathUserOverride(string value);
    public sealed virtual bool get_IsInTestCloud();
    public sealed virtual void SetCodesignIdentityForDeviceAgentResigning(CodesignIdentity codesignIdentity);
    public sealed virtual CodesignIdentity GetCodesignIdentityForDeviceAgentResigning();
    public sealed virtual void SetProvisioningProfileForDeviceAgentResigning(ProvisioningProfile provisioningProfile);
    public sealed virtual ProvisioningProfile GetProvisioningProfileForDeviceAgentResigning();
    public sealed virtual string GetTempFolderForDeviceAgentResigning();
}
internal class Xamarin.UITest.XDB.Services.HttpService : object {
    private static TimeSpan _defaultHttpTimeout;
    private ILoggerService _loggerService;
    private Lazy`1<HttpClient> _lazyHttpClient;
    private HttpClient _httpClient { get; }
    public HttpService(ILoggerService loggerService);
    private static HttpService();
    private HttpClient get__httpClient();
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.HttpService/<DeleteAsync>d__6`1")]
public sealed virtual Task`1<IHttpResult`1<T>> DeleteAsync(string url, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.HttpService/<GetAsync>d__7`1")]
public sealed virtual Task`1<IHttpResult`1<T>> GetAsync(string url, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.HttpService/<PostAsync>d__8`1")]
public sealed virtual Task`1<IHttpResult`1<T>> PostAsync(string url, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.HttpService/<PostAsJsonAsync>d__9`1")]
public sealed virtual Task`1<IHttpResult`1<T>> PostAsJsonAsync(string url, object payload, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.HttpService/<RequestAsync>d__11`1")]
private Task`1<IHttpResult`1<T>> RequestAsync(int eventId, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors, Func`2<CancellationToken, Task`1<HttpResponseMessage>> request);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.HttpService/<ExecuteRequestAsync>d__12")]
private Task`1<HttpResponseMessage> ExecuteRequestAsync(Func`2<CancellationToken, Task`1<HttpResponseMessage>> request, CancellationToken token);
}
internal interface Xamarin.UITest.XDB.Services.IDependenciesDeploymentService {
    public string DeviceAgentBundleVersion { get; }
    public string HashId { get; }
    public string PathToDeviceTestRunner { get; }
    public string PathToSimTestRunner { get; }
    public abstract virtual string get_DeviceAgentBundleVersion();
    public abstract virtual string get_HashId();
    public abstract virtual void Install(string directory);
    public abstract virtual string get_PathToDeviceTestRunner();
    public abstract virtual string get_PathToSimTestRunner();
}
internal interface Xamarin.UITest.XDB.Services.IEnvironmentService {
    public bool IsInTestCloud { get; }
    public string IDBPathUserOverride { get; public set; }
    public abstract virtual bool get_IsInTestCloud();
    public abstract virtual string get_IDBPathUserOverride();
    public abstract virtual void set_IDBPathUserOverride(string value);
    public abstract virtual void SetCodesignIdentityForDeviceAgentResigning(CodesignIdentity codesignIdentity);
    public abstract virtual CodesignIdentity GetCodesignIdentityForDeviceAgentResigning();
    public abstract virtual void SetProvisioningProfileForDeviceAgentResigning(ProvisioningProfile provisioningProfile);
    public abstract virtual ProvisioningProfile GetProvisioningProfileForDeviceAgentResigning();
    public abstract virtual string GetTempFolderForDeviceAgentResigning();
}
internal interface Xamarin.UITest.XDB.Services.IHttpService {
    public abstract virtual Task`1<IHttpResult`1<T>> DeleteAsync(string url, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
    public abstract virtual Task`1<IHttpResult`1<T>> GetAsync(string url, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
    public abstract virtual Task`1<IHttpResult`1<T>> PostAsync(string url, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
    public abstract virtual Task`1<IHttpResult`1<T>> PostAsJsonAsync(string url, object payload, Nullable`1<TimeSpan> timeout, int attempts, Nullable`1<TimeSpan> retryInterval, bool errorIfUnavailable, bool logErrors);
}
internal interface Xamarin.UITest.XDB.Services.IiOSDeviceAgentService {
    public abstract virtual Task DeleteSessionAsync(string deviceAddress);
    public abstract virtual Task DoubleTouchAsync(string deviceAddress, PointF point);
    public abstract virtual Task DragAsync(string deviceAddress, PointF from, PointF to, Nullable`1<TimeSpan> duration, Nullable`1<TimeSpan> holdTime, bool allowInertia);
    public abstract virtual Task EnterTextAsync(string deviceAddress, string text);
    public abstract virtual Task FlickAsync(string deviceAddress, PointF from, PointF to);
    public abstract virtual Task GestureAsync(string deviceAddress, string gesture, object options, object specifiers);
    public abstract virtual Task LaunchTestAsync(string deviceId, string deviceAddress);
    public abstract virtual Task PinchAsync(string deviceAddress, PointF point, PinchDirection direction, Nullable`1<float> amount, Nullable`1<TimeSpan> duration);
    public abstract virtual Task PingAsync(string deviceAddress, int attempts, Nullable`1<TimeSpan> retryInterval, bool logErrors);
    public abstract virtual Task`1<object> QueryAsync(string deviceAddress, object query);
    public abstract virtual Task SetOrientationAsync(string deviceAddress, DeviceOrientation orientation);
    public abstract virtual Task StartAppAsync(string deviceAddress, string bundleId, IEnumerable`1<string> launchArgs, IDictionary`2<string, string> environmentVars);
    public abstract virtual Task StartAppAsync(string deviceAddress, string bundleId, string launchArgs, string environmentVars);
    public abstract virtual Task ShutdownAsync(string deviceAddress, bool ignoreUnavailable);
    public abstract virtual Task DismissSpringboardAlertsAsync(string deviceAddress);
    public abstract virtual Task SetInputViewPickerWheelValueAsync(string deviceAddress, int pickerIndex, int wheelIndex, string value);
    public abstract virtual Task TouchAndHoldAsync(string deviceAddress, PointF point, Nullable`1<TimeSpan> duration);
    public abstract virtual Task TouchAsync(string deviceAddress, PointF point);
    public abstract virtual Task`1<UIElement> DumpElements(string deviceAddress);
    public abstract virtual Task TwoFingerTouchAsync(string deviceAddress, PointF point);
    public abstract virtual Task VolumeAsync(string deviceAddress, VolumeDirection direction);
}
internal interface Xamarin.UITest.XDB.Services.ILoggerService {
    public abstract virtual int GetEventId();
    public abstract virtual void Log(string message, LogLevel level, Nullable`1<int> eventId, object info);
    public abstract virtual void LogCritical(string message, Nullable`1<int> eventId, object info);
    public abstract virtual void LogDebug(string message, Nullable`1<int> eventId, object info);
    public abstract virtual void LogError(string message, Nullable`1<int> eventId, object info);
    public abstract virtual void LogInfo(string message, Nullable`1<int> eventId, object info);
    public abstract virtual void LogTrace(string message, Nullable`1<int> eventId, object info);
    public abstract virtual void LogWarn(string message, Nullable`1<int> eventId, object info);
}
internal class Xamarin.UITest.XDB.Services.iOSDeviceAgentService : object {
    private IDependenciesDeploymentService _dependenciesDeploymentService;
    private IEnvironmentService _environmentService;
    private IHttpService _httpService;
    private ILoggerService _loggerService;
    private IXcodeService xcodeService;
    private static TimeSpan _ShortWaitSeconds;
    private static TimeSpan _EndSessionWaitSeconds;
    private static double _FlickDuration;
    private static int _deviceAgentPort;
    public iOSDeviceAgentService(IDependenciesDeploymentService dependenciesDeploymentService, IEnvironmentService environmentService, IHttpService httpService, ILoggerService loggerService, IXcodeService xcodeService);
    private static iOSDeviceAgentService();
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<DeleteSessionAsync>d__10")]
public sealed virtual Task DeleteSessionAsync(string deviceAddress);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<DoubleTouchAsync>d__11")]
public sealed virtual Task DoubleTouchAsync(string deviceAddress, PointF point);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<DragAsync>d__12")]
public sealed virtual Task DragAsync(string deviceAddress, PointF from, PointF to, Nullable`1<TimeSpan> duration, Nullable`1<TimeSpan> holdTime, bool allowInertia);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<DumpElements>d__13")]
public sealed virtual Task`1<UIElement> DumpElements(string deviceAddress);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<SetInputViewPickerWheelValueAsync>d__14")]
public sealed virtual Task SetInputViewPickerWheelValueAsync(string deviceAddress, int pickerIndex, int wheelIndex, string value);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<EnterTextAsync>d__15")]
public sealed virtual Task EnterTextAsync(string deviceAddress, string text);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<FlickAsync>d__16")]
public sealed virtual Task FlickAsync(string deviceAddress, PointF from, PointF to);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<GestureAsync>d__17")]
public sealed virtual Task GestureAsync(string deviceAddress, string gesture, object options, object specifiers);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<LaunchTestAsync>d__18")]
public sealed virtual Task LaunchTestAsync(string deviceId, string deviceAddress);
    public ProcessResult StartTest(UDID UDID);
    private string XCTestRunFilePath(UDID UDID, string logsDir);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<PinchAsync>d__21")]
public sealed virtual Task PinchAsync(string deviceAddress, PointF point, PinchDirection direction, Nullable`1<float> amount, Nullable`1<TimeSpan> duration);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<PingAsync>d__22")]
public sealed virtual Task PingAsync(string deviceAddress, int attempts, Nullable`1<TimeSpan> retryInterval, bool logErrors);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<QueryAsync>d__23")]
public sealed virtual Task`1<object> QueryAsync(string deviceAddress, object query);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<SetOrientationAsync>d__24")]
public sealed virtual Task SetOrientationAsync(string deviceAddress, DeviceOrientation orientation);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<ShutdownAsync>d__25")]
public sealed virtual Task ShutdownAsync(string deviceAddress, bool errorIfUnavailable);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<DismissSpringboardAlertsAsync>d__26")]
public sealed virtual Task DismissSpringboardAlertsAsync(string deviceAddress);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<StartAppAsync>d__27")]
public sealed virtual Task StartAppAsync(string deviceAddress, string bundleId, string launchArgs, string environmentVars);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<StartAppAsync>d__28")]
public sealed virtual Task StartAppAsync(string deviceAddress, string bundleId, IEnumerable`1<string> launchArgs, IDictionary`2<string, string> environmentVars);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<TouchAndHoldAsync>d__29")]
public sealed virtual Task TouchAndHoldAsync(string deviceAddress, PointF point, Nullable`1<TimeSpan> duration);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<TouchAsync>d__30")]
public sealed virtual Task TouchAsync(string deviceAddress, PointF point);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<TwoFingerTouchAsync>d__31")]
public sealed virtual Task TwoFingerTouchAsync(string deviceAddress, PointF point);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<TreeAsync>d__32")]
private Task`1<UIElement> TreeAsync(string deviceAddress);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<VersionAsync>d__33")]
private Task`1<VersionResult> VersionAsync(string deviceAddress);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<VolumeAsync>d__34")]
public sealed virtual Task VolumeAsync(string deviceAddress, VolumeDirection direction);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<RequestAsync>d__35`1")]
private Task`1<IHttpResult`1<T>> RequestAsync(string deviceAddress, string route, object data, string action);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.iOSDeviceAgentService/<PointGestureAsync>d__36")]
private Task PointGestureAsync(string deviceAddress, PointF point, string gesture, object options);
    private int WithErrorHandling(int eventId, Func`1<ProcessResult> action, string errorMessage, Int32[] successCodes);
    private static string RouteUrl(string deviceAddress, string route);
}
internal class Xamarin.UITest.XDB.Services.LoggerService : object {
    private int _currentLogId;
    private bool _logToConsole;
    private LogLevel _logLevel;
    public LoggerService(bool logToConsole, LogLevel logLevel);
    public virtual int GetEventId();
    public virtual void Log(string message, LogLevel logLevel, Nullable`1<int> eventId, object info);
    public sealed virtual void LogCritical(string message, Nullable`1<int> eventId, object info);
    public sealed virtual void LogDebug(string message, Nullable`1<int> eventId, object info);
    public sealed virtual void LogError(string message, Nullable`1<int> eventId, object info);
    public sealed virtual void LogInfo(string message, Nullable`1<int> eventId, object info);
    public sealed virtual void LogTrace(string message, Nullable`1<int> eventId, object info);
    public sealed virtual void LogWarn(string message, Nullable`1<int> eventId, object info);
}
internal class Xamarin.UITest.XDB.Services.OSX.IDB.IDBCommandProvider : object {
    private IDependenciesDeploymentService DependenciesDeploymentService;
    private IEnvironmentService EnvironmentService;
    private ILoggerService LoggerService;
    private IProcessService ProcessService;
    private string TempFolderPath;
    private string IDBBinaryPath;
    internal IDBCommandProvider(IEnvironmentService environmentService, IDependenciesDeploymentService dependenciesDeploymentService, ILoggerService loggerService, IProcessService processService, string tempFolderPath);
    private ProcessResult RunCommand(string arguments);
    internal ProcessResult LaunchSimulator(UDID UDID);
    internal ProcessResult FocusSimulator(UDID UDID);
    internal ProcessResult CreateDirectory(UDID UDID, string bundleId, string relativePathToDirectory);
    internal ProcessResult RemoveDirectory(UDID UDID, string bundleId, string relativePathToDirectory);
    internal ProcessResult InstallApp(UDID UDID, string pathToBundle);
    internal ProcessResult GetAppsList(UDID UDID);
    internal ProcessResult InstallDeviceAgent(UDID UDID);
    internal ProcessResult SetLocation(UDID UDID, LatLong latLong);
    internal ProcessResult StopSimulatingLocation(UDID UDID);
    internal ProcessResult UninstallApp(UDID UDID, string bundleId);
}
internal static class Xamarin.UITest.XDB.Services.OSX.IDB.IDBLocator : object {
    private static ProcessResult RunWhereisIDBCommand(IProcessService processService);
    public static bool IsIDBInstalled(IProcessService processService);
    public static string GetIDBPath(IProcessService processService, IEnvironmentService environmentService, ILoggerService loggerService);
}
internal class Xamarin.UITest.XDB.Services.OSX.IDB.IDBService : object {
    private IDependenciesDeploymentService DependenciesDeploymentService;
    private ILoggerService LoggerService;
    private string TempFolderPath;
    internal IDBCommandProvider IDBCommandProvider;
    public IDBService(IEnvironmentService environmentService, IDependenciesDeploymentService dependenciesDeploymentService, ILoggerService loggerService, IProcessService processService);
    internal ProcessResult ExecuteCommandWithErrorHandling(int eventId, Func`1<ProcessResult> command, string errorMessage, Int32[] successCodes);
    private void LogEvent(int eventId, string eventName, Dictionary`2<string, string> parameters);
    internal ProcessResult ExecuteCommand(Func`1<ProcessResult> command, string commandName, UDID UDID, Dictionary`2<string, string> parameters, string errorMessage);
    internal void LaunchSimulator(UDID UDID, int eventId);
    private static List`1<iOSAppInfo> DeserializeiOSAppInfosListFromString(string listAppsOutput);
    public sealed virtual string GetTempFolderPath();
    public sealed virtual string GetDeviceAgentBundlePathForPhysicalDevice();
    public sealed virtual void ClearXCAppData(UDID UDID, string bundleId);
    public sealed virtual void InstallApp(UDID UDID, string pathToBundle);
    public sealed virtual bool IsAppInstalled(UDID UDID, string bundleId);
    public sealed virtual void InstallDeviceAgent(UDID UDID);
    public sealed virtual void SetLocation(UDID UDID, LatLong latLong);
    public sealed virtual void StopSimulatingLocation(UDID UDID);
    public sealed virtual void UninstallApp(UDID UDID, string bundleId);
}
internal interface Xamarin.UITest.XDB.Services.OSX.IDB.IIDBService {
    public abstract virtual string GetTempFolderPath();
    public abstract virtual string GetDeviceAgentBundlePathForPhysicalDevice();
    public abstract virtual void ClearXCAppData(UDID UDID, string bundleId);
    public abstract virtual void InstallApp(UDID UDID, string pathToBundle);
    public abstract virtual bool IsAppInstalled(UDID UDID, string bundleId);
    public abstract virtual void InstallDeviceAgent(UDID UDID);
    public abstract virtual void SetLocation(UDID UDID, LatLong latLong);
    public abstract virtual void StopSimulatingLocation(UDID UDID);
    public abstract virtual void UninstallApp(UDID UDID, string bundleId);
}
internal class Xamarin.UITest.XDB.Services.OSX.IDB.iOSAppInfo : object {
    [JsonPropertyAttribute("bundle_id")]
public string BundleId;
    [JsonPropertyAttribute("name")]
public string Name;
    [JsonPropertyAttribute("install_type")]
public string InstallType;
    [JsonPropertyAttribute("architectures")]
public List`1<string> Architectures;
    [JsonPropertyAttribute("process_state")]
public string ProcessState;
    [JsonPropertyAttribute("debuggable")]
public bool Debuggable;
    [JsonPropertyAttribute("pid")]
public string PID;
}
internal interface Xamarin.UITest.XDB.Services.OSX.IiOSBundleService {
    public abstract virtual IiOSAppBundle LoadBundle(string appBundlePath);
}
internal class Xamarin.UITest.XDB.Services.OSX.iOSBundleService : object {
    private IPListService _plistService;
    public iOSBundleService(IPListService plistService);
    public sealed virtual IiOSAppBundle LoadBundle(string appBundlePath);
}
internal interface Xamarin.UITest.XDB.Services.OSX.IPListService {
    public abstract virtual string ReadPListAsXml(string plistPath);
    public abstract virtual string ReadPListValueFromFile(string plistPath, string key);
    public abstract virtual string ReadPListValueFromString(string plistContents, string key);
    public abstract virtual void SetOrAddPListValueInFile(string plistPath, string key, string type, string value);
}
internal interface Xamarin.UITest.XDB.Services.OSX.IXcodeService {
    public abstract virtual Version GetCurrentVersion();
    public abstract virtual ProcessResult TestWithoutBuilding(string deviceId, string xctestrunPath, string derivedDataPath);
}
internal class Xamarin.UITest.XDB.Services.OSX.PListService : object {
    private IProcessService _processService;
    public PListService(IProcessService processService);
    public sealed virtual string ReadPListAsXml(string plistPath);
    public sealed virtual string ReadPListValueFromFile(string plistPath, string key);
    public sealed virtual string ReadPListValueFromString(string plistContents, string key);
    public sealed virtual void SetOrAddPListValueInFile(string plistPath, string key, string type, string value);
}
public class Xamarin.UITest.XDB.Services.OSX.UDID : object {
    private string Value;
    public bool IsSimulator { get; }
    public bool IsPhysicalDevice { get; }
    public UDID(string UDID);
    public virtual string ToString();
    public bool get_IsSimulator();
    public bool get_IsPhysicalDevice();
}
internal class Xamarin.UITest.XDB.Services.OSX.XcodeService : object {
    private Lazy`1<Version> _currentVersion;
    private IProcessService _processService;
    public XcodeService(IProcessService processService);
    public sealed virtual Version GetCurrentVersion();
    public sealed virtual ProcessResult TestWithoutBuilding(string deviceId, string xctestrunPath, string derivedDataPath);
    [CompilerGeneratedAttribute]
private Version <.ctor>b__2_0();
}
internal interface Xamarin.UITest.XDB.Services.Processes.IProcessService {
    public abstract virtual Task`1<ProcessResult> RunAsync(string command, string arguments, Action`1<string> standardOutputCallback, Action`1<string> standardErrorCallback);
    public abstract virtual ProcessResult Run(string command, string arguments);
}
internal class Xamarin.UITest.XDB.Services.Processes.ProcessResult : object {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CombinedOutput>k__BackingField;
    public int ExitCode { get; }
    public string StandardOutput { get; }
    public string StandardError { get; }
    public string CombinedOutput { get; }
    public ProcessResult(int exitCode, string standardOutput, string standardError, string combinedOutput);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public string get_StandardOutput();
    [CompilerGeneratedAttribute]
public string get_StandardError();
    [CompilerGeneratedAttribute]
public string get_CombinedOutput();
}
internal class Xamarin.UITest.XDB.Services.Processes.ProcessService : object {
    public sealed virtual Task`1<ProcessResult> RunAsync(string command, string arguments, Action`1<string> standardOutputCallback, Action`1<string> standardErrorCallback);
    public sealed virtual ProcessResult Run(string command, string arguments);
    private static Process StartProcess(string command, string arguments);
    [AsyncStateMachineAttribute("Xamarin.UITest.XDB.Services.Processes.ProcessService/<ReadOutput>d__3")]
private static Task ReadOutput(StreamReader streamReader, List`1<Tuple`2<DateTime, string>> output, Action`1<string> callback);
}
internal class Xamarin.UITest.XDB.XdbLoggerService : LoggerService {
    public virtual void Log(string message, LogLevel logLevel, Nullable`1<int> eventId, object info);
}
internal static class Xamarin.UITest.XDB.XdbServices : object {
    private static TinyIoCContainer _container;
    private static XdbServices();
    public static T GetRequiredService();
}
