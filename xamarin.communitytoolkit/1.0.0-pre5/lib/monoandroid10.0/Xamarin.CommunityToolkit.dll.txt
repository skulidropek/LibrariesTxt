[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
public class Xamarin.CommunityToolkit.Android.Effects.IconTintColorEffectRouter : PlatformEffect {
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    protected virtual void OnElementPropertyChanged(PropertyChangedEventArgs args);
    private void ApplyTintColor();
    private void ClearTintColor();
    private void SetImageViewTintColor(ImageView image, Color color);
    private void SetButtonTintColor(Button button, Color color);
}
public class Xamarin.CommunityToolkit.Android.Effects.RemoveBorderEffect : PlatformEffect {
    private Drawable originalBackground;
    protected virtual void OnAttached();
    protected virtual void OnDetached();
}
public class Xamarin.CommunityToolkit.Android.Effects.SelectAllTextEffect : PlatformEffect {
    private EditText EditText { get; }
    private EditText get_EditText();
    protected virtual void OnAttached();
    protected virtual void OnDetached();
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.Android.Effects.VisualFeedbackEffectRouter : PlatformEffect {
    private View view;
    private RippleDrawable ripple;
    private Drawable orgDrawable;
    private FrameLayout rippleOverlay;
    private FastRendererOnLayoutChangeListener fastListener;
    private bool IsClickable { get; }
    private bool get_IsClickable();
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    protected virtual void OnElementPropertyChanged(PropertyChangedEventArgs args);
    private void UpdateEffectColor();
    private void SetUpRipple();
    private void SetUpOverlay();
    private void OnViewTouch(object sender, TouchEventArgs e);
    private void OnOverlayTouch(object sender, TouchEventArgs e);
    private RippleDrawable CreateRipple(Color color);
    private ColorStateList GetPressedColorSelector(int pressedColor);
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.Android.UI.Views.SideMenuViewRenderer : VisualElementRenderer`1<SideMenuView> {
    private static Nullable`1<Guid> lastTouchHandlerId;
    private float density;
    private Guid elementId;
    private bool panStarted;
    private Nullable`1<float> startX;
    private Nullable`1<float> startY;
    public SideMenuViewRenderer(Context context);
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SideMenuView> e);
    private bool CheckIsTouchHandled(float xDelta, float yDelta);
    private void HandleDownUpEvents(MotionEvent ev);
    private void HandleUpCancelEvent(MotionEvent ev);
    private void HandleDownEvent(MotionEvent ev);
    private void UpdatePan(GestureStatus status, double totalX, double totalY);
    private PanUpdatedEventArgs GetPanUpdatedEventArgs(GestureStatus status, double totalX, double totalY);
    private float GetTotalX(MotionEvent ev);
    private float GetTotalY(MotionEvent ev);
}
public abstract class Xamarin.CommunityToolkit.Behaviors.AnimationBase : AnimationBase`1<View> {
}
public abstract class Xamarin.CommunityToolkit.Behaviors.AnimationBase`1 : BindableObject {
    public static BindableProperty DurationProperty;
    public static BindableProperty EasingTypeProperty;
    public UInt32 Duration { get; public set; }
    public Easing Easing { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static AnimationBase`1();
    public UInt32 get_Duration();
    public void set_Duration(UInt32 value);
    public Easing get_Easing();
    public void set_Easing(Easing value);
    private static object GetDefaultDurationProperty(BindableObject bindable);
    protected abstract virtual UInt32 get_DefaultDuration();
    protected abstract virtual void set_DefaultDuration(UInt32 value);
    public abstract virtual Task Animate(TView view);
}
public class Xamarin.CommunityToolkit.Behaviors.AnimationBehavior : EventToCommandBehavior {
    public static BindableProperty AnimationTypeProperty;
    private bool isAnimating;
    private TapGestureRecognizer tapGestureRecognizer;
    public AnimationBase AnimationType { get; public set; }
    private static AnimationBehavior();
    public AnimationBase get_AnimationType();
    public void set_AnimationType(AnimationBase value);
    protected virtual void OnAttachedTo(View bindable);
    protected virtual void OnDetachingFrom(View bindable);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.AnimationBehavior/<OnTriggerHandled>d__8")]
protected virtual void OnTriggerHandled(object sender, object eventArgs);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object sender, object eventArgs);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.CommunityToolkit.Behaviors.BaseBehavior`1 : Behavior`1<TView> {
    private static MethodInfo getContextMethod;
    private static FieldInfo bindingField;
    private BindingBase defaultBindingContextBinding;
    [CompilerGeneratedAttribute]
private TView <View>k__BackingField;
    protected TView View { get; private set; }
    private static BaseBehavior`1();
    [CompilerGeneratedAttribute]
protected TView get_View();
    [CompilerGeneratedAttribute]
private void set_View(TView value);
    protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnAttachedTo(TView bindable);
    protected virtual void OnDetachingFrom(TView bindable);
    protected bool IsBound(BindableProperty property, BindingBase defaultBinding);
}
public class Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior : TextValidationBehavior {
    private List`1<Predicate`1<char>> characterPredicates;
    public static BindableProperty CharacterTypeProperty;
    public static BindableProperty MinimumCharacterCountProperty;
    public static BindableProperty MaximumCharacterCountProperty;
    public CharacterType CharacterType { get; public set; }
    public int MinimumCharacterCount { get; public set; }
    public int MaximumCharacterCount { get; public set; }
    private static CharactersValidationBehavior();
    public CharacterType get_CharacterType();
    public void set_CharacterType(CharacterType value);
    public int get_MinimumCharacterCount();
    public void set_MinimumCharacterCount(int value);
    public int get_MaximumCharacterCount();
    public void set_MaximumCharacterCount(int value);
    protected virtual bool Validate(object value);
    private static void OnCharacterTypePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [IteratorStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior/<GetCharacterPredicates>d__16")]
private static IEnumerable`1<Predicate`1<char>> GetCharacterPredicates(CharacterType characterType);
    private void OnCharacterTypePropertyChanged();
    private bool Validate(string value);
    [CompilerGeneratedAttribute]
private bool <Validate>b__18_0(char character);
}
[FlagsAttribute]
public enum Xamarin.CommunityToolkit.Behaviors.CharacterType : Enum {
    public int value__;
    public static CharacterType LowercaseLetter;
    public static CharacterType UppercaseLetter;
    public static CharacterType Letter;
    public static CharacterType Digit;
    public static CharacterType Alphanumeric;
    public static CharacterType Whitespace;
    public static CharacterType NonAlphanumericSymbol;
    public static CharacterType LowercaseLatinLetter;
    public static CharacterType UppercaseLatinLetter;
    public static CharacterType LatinLetter;
    public static CharacterType Any;
}
public class Xamarin.CommunityToolkit.Behaviors.EmailValidationBehavior : TextValidationBehavior {
    private Regex normalizerRegex;
    protected string DefaultRegexPattern { get; }
    protected RegexOptions DefaultRegexOptions { get; }
    protected virtual string get_DefaultRegexPattern();
    protected virtual RegexOptions get_DefaultRegexOptions();
    protected virtual object DecorateValue();
    [CompilerGeneratedAttribute]
internal static string <DecorateValue>g__DomainMapper|5_0(Match match);
}
public class Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior : BaseBehavior`1<View> {
    public static BindableProperty EventNameProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty EventArgsConverterProperty;
    private MethodInfo eventHandlerMethodInfo;
    private Delegate eventHandler;
    private EventInfo eventInfo;
    public string EventName { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IValueConverter EventArgsConverter { get; public set; }
    private static EventToCommandBehavior();
    public string get_EventName();
    public void set_EventName(string value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public IValueConverter get_EventArgsConverter();
    public void set_EventArgsConverter(IValueConverter value);
    protected virtual void OnAttachedTo(View bindable);
    protected virtual void OnDetachingFrom(View bindable);
    private static void OnEventNamePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void RegisterEvent();
    private void UnregisterEvent();
    [PreserveAttribute]
protected virtual void OnTriggerHandled(object sender, object eventArgs);
}
public class Xamarin.CommunityToolkit.Behaviors.FadeAnimation : AnimationBase {
    public static BindableProperty FadeProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    public double Fade { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static FadeAnimation();
    public double get_Fade();
    public void set_Fade(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.FadeAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
public class Xamarin.CommunityToolkit.Behaviors.FlipHorizontalAnimation : RotateAnimation {
    [CompilerGeneratedAttribute]
private double <DefaultRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    protected double DefaultRotation { get; protected set; }
    protected UInt32 DefaultDuration { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual double get_DefaultRotation();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultRotation(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.FlipHorizontalAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
public class Xamarin.CommunityToolkit.Behaviors.FlipVerticalAnimation : RotateAnimation {
    [CompilerGeneratedAttribute]
private double <DefaultRotation>k__BackingField;
    protected double DefaultRotation { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual double get_DefaultRotation();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultRotation(double value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.FlipVerticalAnimation/<Animate>d__4")]
public virtual Task Animate(View view);
}
public class Xamarin.CommunityToolkit.Behaviors.ImpliedOrderGridBehavior : BaseBehavior`1<Grid> {
    private Boolean[][] usedMatrix;
    private int rowCount;
    private int columnCount;
    [CompilerGeneratedAttribute]
private bool <ThrowOnLayoutWarning>k__BackingField;
    public bool ThrowOnLayoutWarning { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ThrowOnLayoutWarning();
    [CompilerGeneratedAttribute]
public void set_ThrowOnLayoutWarning(bool value);
    protected virtual void OnAttachedTo(Grid bindable);
    protected virtual void OnDetachingFrom(Grid bindable);
    private void OnInternalGridChildAdded(object sender, ElementEventArgs e);
    private void LogWarning(string warning);
    private Boolean[][] InitMatrix();
    private void FindNextCell(Int32& rowIndex, Int32& columnIndex);
    private void UpdateUsedCells(int row, int column, int rowSpan, int columnSpan);
    private void ProcessElement(BindableObject view);
}
public class Xamarin.CommunityToolkit.Behaviors.MaskedBehavior : BaseBehavior`1<InputView> {
    public static BindableProperty MaskProperty;
    public static BindableProperty UnMaskedCharacterProperty;
    private IDictionary`2<int, char> positions;
    private bool applyingMask;
    public string Mask { get; public set; }
    public char UnMaskedCharacter { get; public set; }
    private static MaskedBehavior();
    public string get_Mask();
    public void set_Mask(string value);
    public char get_UnMaskedCharacter();
    public void set_UnMaskedCharacter(char value);
    private static void OnMaskPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnUnMaskedCharacterPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTextPropertyChanged();
    private void SetPositions();
    private void OnMaskChanged();
    private string RemoveMask(string text);
    private void ApplyMask(string text);
}
public class Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior : BaseBehavior`1<InputView> {
    public static BindableProperty CommandProperty;
    public static BindableProperty ShouldDismissKeyboardAutomaticallyProperty;
    private WeakEventManager maxLengthReachedEventManager;
    public ICommand Command { get; public set; }
    public bool ShouldDismissKeyboardAutomatically { get; public set; }
    private static MaxLengthReachedBehavior();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public bool get_ShouldDismissKeyboardAutomatically();
    public void set_ShouldDismissKeyboardAutomatically(bool value);
    public void add_MaxLengthReached(EventHandler`1<MaxLengthReachedEventArgs> value);
    public void remove_MaxLengthReached(EventHandler`1<MaxLengthReachedEventArgs> value);
    protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTextPropertyChanged();
}
public class Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public MaxLengthReachedEventArgs(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
}
[ContentPropertyAttribute("Children")]
public class Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior : ValidationBehavior {
    public static BindableProperty ErrorsProperty;
    public static BindableProperty ErrorProperty;
    private ObservableCollection`1<ValidationBehavior> children;
    public List`1<object> Errors { get; public set; }
    public IList`1<ValidationBehavior> Children { get; }
    private static MultiValidationBehavior();
    public List`1<object> get_Errors();
    public void set_Errors(List`1<object> value);
    public IList`1<ValidationBehavior> get_Children();
    public static object GetError(BindableObject bindable);
    public static void SetError(BindableObject bindable, object value);
    protected virtual bool Validate(object value);
    private void OnChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior : ValidationBehavior {
    public static BindableProperty MinimumValueProperty;
    public static BindableProperty MaximumValueProperty;
    public static BindableProperty MinimumDecimalPlacesProperty;
    public static BindableProperty MaximumDecimalPlacesProperty;
    public double MinimumValue { get; public set; }
    public double MaximumValue { get; public set; }
    public int MinimumDecimalPlaces { get; public set; }
    public int MaximumDecimalPlaces { get; public set; }
    private static NumericValidationBehavior();
    public double get_MinimumValue();
    public void set_MinimumValue(double value);
    public double get_MaximumValue();
    public void set_MaximumValue(double value);
    public int get_MinimumDecimalPlaces();
    public void set_MinimumDecimalPlaces(int value);
    public int get_MaximumDecimalPlaces();
    public void set_MaximumDecimalPlaces(int value);
    protected virtual object DecorateValue();
    protected virtual bool Validate(object value);
}
public class Xamarin.CommunityToolkit.Behaviors.RequiredStringValidationBehavior : ValidationBehavior {
    public static BindableProperty RequiredStringProperty;
    public string RequiredString { get; public set; }
    private static RequiredStringValidationBehavior();
    public string get_RequiredString();
    public void set_RequiredString(string value);
    protected virtual bool Validate(object value);
}
public class Xamarin.CommunityToolkit.Behaviors.RotateAnimation : AnimationBase {
    public static BindableProperty RotationProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultRotation>k__BackingField;
    public double Rotation { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    protected double DefaultRotation { get; protected set; }
    private static RotateAnimation();
    public double get_Rotation();
    public void set_Rotation(double value);
    private static object GetDefaulRotationProperty(BindableObject bindable);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [CompilerGeneratedAttribute]
protected virtual double get_DefaultRotation();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultRotation(double value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.RotateAnimation/<Animate>d__13")]
public virtual Task Animate(View view);
}
public class Xamarin.CommunityToolkit.Behaviors.ScaleAnimation : AnimationBase {
    public static BindableProperty ScaleProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    public double Scale { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static ScaleAnimation();
    public double get_Scale();
    public void set_Scale(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.ScaleAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
public class Xamarin.CommunityToolkit.Behaviors.ShakeAnimation : AnimationBase {
    public static BindableProperty StartFactorProperty;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultDuration>k__BackingField;
    public double StartFactor { get; public set; }
    protected UInt32 DefaultDuration { get; protected set; }
    private static ShakeAnimation();
    public double get_StartFactor();
    public void set_StartFactor(double value);
    [CompilerGeneratedAttribute]
protected virtual UInt32 get_DefaultDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_DefaultDuration(UInt32 value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Behaviors.ShakeAnimation/<Animate>d__8")]
public virtual Task Animate(View view);
}
[FlagsAttribute]
public enum Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags : Enum {
    public int value__;
    public static TextDecorationFlags None;
    public static TextDecorationFlags TrimStart;
    public static TextDecorationFlags TrimEnd;
    public static TextDecorationFlags Trim;
    public static TextDecorationFlags NullToEmpty;
    public static TextDecorationFlags ReduceWhiteSpaces;
}
public class Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior : ValidationBehavior {
    public static BindableProperty MinimumLengthProperty;
    public static BindableProperty MaximumLengthProperty;
    public static BindableProperty DecorationFlagsProperty;
    public static BindableProperty RegexPatternProperty;
    public static BindableProperty RegexOptionsProperty;
    private Regex regex;
    public int MinimumLength { get; public set; }
    public int MaximumLength { get; public set; }
    public TextDecorationFlags DecorationFlags { get; public set; }
    public string RegexPattern { get; public set; }
    public RegexOptions RegexOptions { get; public set; }
    protected string DefaultRegexPattern { get; }
    protected RegexOptions DefaultRegexOptions { get; }
    private static TextValidationBehavior();
    public int get_MinimumLength();
    public void set_MinimumLength(int value);
    public int get_MaximumLength();
    public void set_MaximumLength(int value);
    public TextDecorationFlags get_DecorationFlags();
    public void set_DecorationFlags(TextDecorationFlags value);
    public string get_RegexPattern();
    public void set_RegexPattern(string value);
    public RegexOptions get_RegexOptions();
    public void set_RegexOptions(RegexOptions value);
    protected virtual string get_DefaultRegexPattern();
    protected virtual RegexOptions get_DefaultRegexOptions();
    protected virtual object DecorateValue();
    protected virtual bool Validate(object value);
    private static void OnRegexPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object GetDefaultRegexPattern(BindableObject bindable);
    private static object GetDefaultRegexOptions(BindableObject bindable);
    private void OnRegexPropertyChanged();
    private string ReduceWhiteSpaces(string value);
}
public class Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior : TextValidationBehavior {
    public static BindableProperty UriKindProperty;
    public UriKind UriKind { get; public set; }
    private static UriValidationBehavior();
    public UriKind get_UriKind();
    public void set_UriKind(UriKind value);
    protected virtual bool Validate(object value);
}
public class Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior : BaseBehavior`1<InputView> {
    public static BindableProperty CommandProperty;
    public static BindableProperty StoppedTypingTimeThresholdProperty;
    public static BindableProperty MinimumLengthThresholdProperty;
    public static BindableProperty ShouldDismissKeyboardAutomaticallyProperty;
    private CancellationTokenSource tokenSource;
    public ICommand Command { get; public set; }
    public int StoppedTypingTimeThreshold { get; public set; }
    public int MinimumLengthThreshold { get; public set; }
    public bool ShouldDismissKeyboardAutomatically { get; public set; }
    private static UserStoppedTypingBehavior();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public int get_StoppedTypingTimeThreshold();
    public void set_StoppedTypingTimeThreshold(int value);
    public int get_MinimumLengthThreshold();
    public void set_MinimumLengthThreshold(int value);
    public bool get_ShouldDismissKeyboardAutomatically();
    public void set_ShouldDismissKeyboardAutomatically(bool value);
    protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTextPropertyChanged();
    [CompilerGeneratedAttribute]
private void <OnTextPropertyChanged>b__18_0(Task task);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.CommunityToolkit.Behaviors.ValidationBehavior : BaseBehavior`1<View> {
    public static BindableProperty IsValidProperty;
    public static BindableProperty ValidStyleProperty;
    public static BindableProperty InvalidStyleProperty;
    public static BindableProperty FlagsProperty;
    public static BindableProperty ValueProperty;
    public static BindableProperty ValuePropertyNameProperty;
    public static BindableProperty ForceValidateCommandProperty;
    private ValidationFlags currentStatus;
    private bool isAttaching;
    private BindingBase defaultValueBinding;
    public bool IsValid { get; public set; }
    public Style ValidStyle { get; public set; }
    public Style InvalidStyle { get; public set; }
    public ValidationFlags Flags { get; public set; }
    public object Value { get; public set; }
    public string ValuePropertyName { get; public set; }
    public ICommand ForceValidateCommand { get; public set; }
    protected string DefaultValuePropertyName { get; }
    protected ICommand DefaultForceValidateCommand { get; }
    private static ValidationBehavior();
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public Style get_ValidStyle();
    public void set_ValidStyle(Style value);
    public Style get_InvalidStyle();
    public void set_InvalidStyle(Style value);
    public ValidationFlags get_Flags();
    public void set_Flags(ValidationFlags value);
    public object get_Value();
    public void set_Value(object value);
    public string get_ValuePropertyName();
    public void set_ValuePropertyName(string value);
    public ICommand get_ForceValidateCommand();
    public void set_ForceValidateCommand(ICommand value);
    protected virtual string get_DefaultValuePropertyName();
    protected virtual ICommand get_DefaultForceValidateCommand();
    public void ForceValidate();
    protected virtual object DecorateValue();
    protected abstract virtual bool Validate(object value);
    protected virtual void OnAttachedTo(View bindable);
    protected virtual void OnDetachingFrom(View bindable);
    protected virtual void OnViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected static void OnValidationPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnValuePropertyNamePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object GetDefaultForceValidateCommand(BindableObject bindable);
    private static object GetDefaultValuePropertyName(BindableObject bindable);
    private void OnValuePropertyChanged();
    private void OnValuePropertyNamePropertyChanged();
    private void UpdateState(bool isForced);
    private void UpdateStyle();
}
[FlagsAttribute]
public enum Xamarin.CommunityToolkit.Behaviors.ValidationFlags : Enum {
    public int value__;
    public static ValidationFlags None;
    public static ValidationFlags ValidateOnAttaching;
    public static ValidationFlags ValidateOnFocusing;
    public static ValidationFlags ValidateOnUnfocusing;
    public static ValidationFlags ValidateOnValueChanging;
    public static ValidationFlags ForceMakeValidWhenFocused;
}
public class Xamarin.CommunityToolkit.Converters.BoolToObjectConverter : BoolToObjectConverter`1<object> {
}
public class Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1 : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private TObject <TrueObject>k__BackingField;
    [CompilerGeneratedAttribute]
private TObject <FalseObject>k__BackingField;
    public TObject TrueObject { get; public set; }
    public TObject FalseObject { get; public set; }
    [CompilerGeneratedAttribute]
public TObject get_TrueObject();
    [CompilerGeneratedAttribute]
public void set_TrueObject(TObject value);
    [CompilerGeneratedAttribute]
public TObject get_FalseObject();
    [CompilerGeneratedAttribute]
public void set_FalseObject(TObject value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.ByteArrayToImageSourceConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.DateTimeOffsetConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ContentPropertyAttribute("Ratio")]
public class Xamarin.CommunityToolkit.Converters.DoubleToIntConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private double <Ratio>k__BackingField;
    public double Ratio { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Ratio();
    [CompilerGeneratedAttribute]
public void set_Ratio(double value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private double GetParameter(object parameter);
}
public class Xamarin.CommunityToolkit.Converters.EqualConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.IndexToArrayItemConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.IntToBoolConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.InvertedBoolConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private bool InverseBool(object value);
}
public class Xamarin.CommunityToolkit.Converters.IsNotNullOrEmptyConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.IsNullOrEmptyConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.ItemSelectedEventArgsConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.ItemTappedEventArgsConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.ListIsNotNullOrEmptyConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.ListIsNullOrEmptyConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.ListToStringConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    public string Separator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.MultiConverter : List`1<IValueConverter> {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.MultiConverterParameter : BindableObject {
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Type ConverterType { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public void set_ConverterType(Type value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class Xamarin.CommunityToolkit.Converters.NotEqualConverter : ValueConverterExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Xamarin.CommunityToolkit.Converters.StateToBooleanConverter : object {
    [CompilerGeneratedAttribute]
private LayoutState <StateToCompare>k__BackingField;
    public LayoutState StateToCompare { get; public set; }
    [CompilerGeneratedAttribute]
public LayoutState get_StateToCompare();
    [CompilerGeneratedAttribute]
public void set_StateToCompare(LayoutState value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ContentPropertyAttribute("Type")]
public class Xamarin.CommunityToolkit.Converters.TextCaseConverter : ValueConverterExtension {
    [CompilerGeneratedAttribute]
private TextCaseType <Type>k__BackingField;
    public TextCaseType Type { get; public set; }
    [CompilerGeneratedAttribute]
public TextCaseType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TextCaseType value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private object Convert(string value, object parameter);
    private TextCaseType GetParameter(object parameter);
}
public enum Xamarin.CommunityToolkit.Converters.TextCaseType : Enum {
    public int value__;
    public static TextCaseType None;
    public static TextCaseType Upper;
    public static TextCaseType Lower;
}
public class Xamarin.CommunityToolkit.Converters.TimeSpanToDoubleConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[TypeConverterAttribute("Xamarin.CommunityToolkit.Core.FileMediaSourceConverter")]
public class Xamarin.CommunityToolkit.Core.FileMediaSource : MediaSource {
    public static BindableProperty FileProperty;
    public string File { get; public set; }
    private static FileMediaSource();
    public string get_File();
    public void set_File(string value);
    public virtual string ToString();
    public static FileMediaSource op_Implicit(string file);
    public static string op_Implicit(FileMediaSource file);
    private static void OnFileMediaSourceChanged(BindableObject bindable, object oldValue, object newValue);
}
[TypeConversionAttribute("Xamarin.CommunityToolkit.Core.FileMediaSource")]
public class Xamarin.CommunityToolkit.Core.FileMediaSourceConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public abstract class Xamarin.CommunityToolkit.Core.MediaSource : Element {
    private WeakEventManager weakEventManager;
    public static MediaSource FromFile(string file);
    public static MediaSource FromUri(Uri uri);
    public static MediaSource op_Implicit(string source);
    public static MediaSource op_Implicit(Uri uri);
    protected void OnSourceChanged();
    internal void add_SourceChanged(EventHandler value);
    internal void remove_SourceChanged(EventHandler value);
}
[TypeConversionAttribute("Xamarin.CommunityToolkit.Core.MediaSource")]
public class Xamarin.CommunityToolkit.Core.MediaSourceConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.CommunityToolkit.Core.StreamMediaSource : MediaSource {
    private object synchandle;
    private CancellationTokenSource cancellationTokenSource;
    private TaskCompletionSource`1<bool> completionSource;
    public static BindableProperty StreamProperty;
    protected CancellationTokenSource CancellationTokenSource { get; private set; }
    private bool IsLoading { get; }
    public Func`2<CancellationToken, Task`1<Stream>> Stream { get; public set; }
    private static StreamMediaSource();
    protected CancellationTokenSource get_CancellationTokenSource();
    private void set_CancellationTokenSource(CancellationTokenSource value);
    private bool get_IsLoading();
    public virtual Func`2<CancellationToken, Task`1<Stream>> get_Stream();
    public virtual void set_Stream(Func`2<CancellationToken, Task`1<Stream>> value);
    protected virtual void OnPropertyChanged(string propertyName);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.Core.StreamMediaSource/<Xamarin-Forms-IStreamImageSource-GetStreamAsync>d__13")]
private sealed virtual override Task`1<Stream> Xamarin.Forms.IStreamImageSource.GetStreamAsync(CancellationToken userToken);
    protected void OnLoadingCompleted(bool cancelled);
    protected void OnLoadingStarted();
    public virtual Task`1<bool> Cancel();
}
public class Xamarin.CommunityToolkit.Core.UriMediaSource : MediaSource {
    public static BindableProperty UriProperty;
    [TypeConverterAttribute("Xamarin.Forms.UriTypeConverter")]
public Uri Uri { get; public set; }
    private static UriMediaSource();
    private static bool UriValueValidator(BindableObject bindable, object value);
    private static void OnUriSourceChanged(BindableObject bindable, object oldValue, object newValue);
    public Uri get_Uri();
    public void set_Uri(Uri value);
    public virtual string ToString();
}
internal class Xamarin.CommunityToolkit.Effects.EffectIds : object {
    private static string effectResolutionGroupName;
    public static string RemoveBorder { get; }
    public static string SelectAllText { get; }
    public static string SafeArea { get; }
    public static string IconTintColor { get; }
    public static string VisualFeedback { get; }
    private static EffectIds();
    public static string get_RemoveBorder();
    public static string get_SelectAllText();
    public static string get_SafeArea();
    public static string get_IconTintColor();
    public static string get_VisualFeedback();
}
public class Xamarin.CommunityToolkit.Effects.IconTintColorEffect : object {
    public static BindableProperty TintColorProperty;
    private static IconTintColorEffect();
    public static Color GetTintColor(BindableObject view);
    public static void SetTintColor(BindableObject view, Color value);
    private static void OnTintColorChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.CommunityToolkit.Effects.IconTintColorEffectRouter : RoutingEffect {
}
public class Xamarin.CommunityToolkit.Effects.RemoveBorderEffect : RoutingEffect {
}
public static class Xamarin.CommunityToolkit.Effects.SafeAreaEffect : object {
    public static BindableProperty SafeAreaProperty;
    private static SafeAreaEffect();
    public static SafeArea GetSafeArea(BindableObject view);
    public static void SetSafeArea(BindableObject view, SafeArea value);
    private static void OnSafeAreaChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.CommunityToolkit.Effects.SafeAreaEffectRouter : RoutingEffect {
}
public class Xamarin.CommunityToolkit.Effects.SelectAllTextEffect : RoutingEffect {
}
public class Xamarin.CommunityToolkit.Effects.VisualFeedbackEffect : RoutingEffect {
    public static BindableProperty FeedbackColorProperty;
    private static VisualFeedbackEffect();
    public static Color GetFeedbackColor(BindableObject view);
    public static void SetFeedbackColor(BindableObject view, Color value);
    public static bool IsFeedbackColorSet(BindableObject element);
}
public class Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException : Exception {
    public InvalidCommandParameterException(Type expectedType, Type actualType, Exception innerException);
    public InvalidCommandParameterException(Type expectedType, Type actualType);
    public InvalidCommandParameterException(Type expectedType, Exception innerException);
    public InvalidCommandParameterException(Type expectedType);
    private static string CreateErrorMessage(Type expectedType);
    private static string CreateErrorMessage(Type expectedType, Type actualType);
}
public class Xamarin.CommunityToolkit.Exceptions.InvalidHandleEventException : Exception {
    public InvalidHandleEventException(string message, TargetParameterCountException targetParameterCountException);
}
[ContentPropertyAttribute("Email")]
public class Xamarin.CommunityToolkit.Extensions.GravatarImageExtension : GravatarImageSource {
    public sealed virtual GravatarImageSource ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
[ContentPropertyAttribute("Id")]
public class Xamarin.CommunityToolkit.Extensions.ImageResourceExtension : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public sealed virtual ImageSource ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.Extensions.PageExtension : object {
    [ExtensionAttribute]
public static Task DisplayToastAsync(Page page, string message, int durationMilliseconds);
    [ExtensionAttribute]
public static Task DisplayToastAsync(Page page, ToastOptions toastOptions);
    [ExtensionAttribute]
public static Task`1<bool> DisplaySnackBarAsync(Page page, string message, string actionButtonText, Func`1<Task> action, int durationMilliseconds);
    [ExtensionAttribute]
public static Task`1<bool> DisplaySnackBarAsync(Page page, SnackBarOptions snackBarOptions);
}
[ContentPropertyAttribute("Text")]
public class Xamarin.CommunityToolkit.Extensions.TranslateExtension : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringFormat>k__BackingField;
    public string Text { get; public set; }
    public string StringFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_StringFormat();
    [CompilerGeneratedAttribute]
public void set_StringFormat(string value);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual BindingBase ProvideValue(IServiceProvider serviceProvider);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.CommunityToolkit.Extensions.ValueConverterExtension : object {
    public sealed virtual IValueConverter ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
internal static class Xamarin.CommunityToolkit.Helpers.EventManagerService : object {
    internal static void AddEventHandler(String& eventName, Object& handlerTarget, MethodInfo& methodInfo, Dictionary`2& eventHandlers);
    internal static void RemoveEventHandler(String& eventName, Object& handlerTarget, MemberInfo& methodInfo, Dictionary`2& eventHandlers);
    internal static void HandleEvent(String& eventName, Object& sender, Object& eventArgs, Dictionary`2& eventHandlers);
    internal static void HandleEvent(String& eventName, Object& actionEventArgs, Dictionary`2& eventHandlers);
    internal static void HandleEvent(String& eventName, Dictionary`2& eventHandlers);
    private static void AddRemoveEvents(String& eventName, Dictionary`2& eventHandlers, List`1& toRaise);
    private static DynamicMethod TryGetDynamicMethod(MethodInfo& rtDynamicMethod);
    [ExtensionAttribute]
private static bool IsLightweightMethod(MethodBase method);
}
[DefaultMemberAttribute("Item")]
public class Xamarin.CommunityToolkit.Helpers.LocalizationResourceManager : object {
    [CompilerGeneratedAttribute]
private static LocalizationResourceManager <Current>k__BackingField;
    private ResourceManager resourceManager;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public static LocalizationResourceManager Current { get; }
    public string Item { get; }
    public CultureInfo CurrentCulture { get; }
    private static LocalizationResourceManager();
    [CompilerGeneratedAttribute]
public static LocalizationResourceManager get_Current();
    public void Init(ResourceManager resource);
    public string get_Item(string text);
    public void SetCulture(CultureInfo language);
    public string GetValue(string text);
    public CultureInfo get_CurrentCulture();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void Invalidate();
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("1")]
public class Xamarin.CommunityToolkit.Helpers.PreserveToolkitAttribute : Attribute {
}
[TypeConverterAttribute("Xamarin.CommunityToolkit.Helpers.SafeAreaTypeConverter")]
public class Xamarin.CommunityToolkit.Helpers.SafeArea : ValueType {
    private bool isParameterized;
    [CompilerGeneratedAttribute]
private bool <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bottom>k__BackingField;
    public bool Left { get; }
    public bool Top { get; }
    public bool Right { get; }
    public bool Bottom { get; }
    public bool IsEmpty { get; }
    public SafeArea(bool uniformSafeArea);
    public SafeArea(bool horizontal, bool vertical);
    public SafeArea(bool left, bool top, bool right, bool bottom);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Left();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Top();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Right();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Bottom();
    public bool get_IsEmpty();
    public static SafeArea op_Implicit(bool uniformSafeArea);
    private bool Equals(SafeArea other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SafeArea left, SafeArea right);
    public static bool op_Inequality(SafeArea left, SafeArea right);
    public void Deconstruct(Boolean& left, Boolean& top, Boolean& right, Boolean& bottom);
}
[TypeConversionAttribute("Xamarin.CommunityToolkit.Helpers.SafeArea")]
public class Xamarin.CommunityToolkit.Helpers.SafeAreaTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
internal class Xamarin.CommunityToolkit.Helpers.Subscription : ValueType {
    [CompilerGeneratedAttribute]
private WeakReference <Subscriber>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Handler>k__BackingField;
    public WeakReference Subscriber { get; }
    public MethodInfo Handler { get; }
    public Subscription(WeakReference subscriber, MethodInfo handler);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public WeakReference get_Subscriber();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MethodInfo get_Handler();
}
public class Xamarin.CommunityToolkit.Helpers.WeakEventManager : object {
    private Dictionary`2<string, List`1<Subscription>> eventHandlers;
    public void AddEventHandler(Delegate handler, string eventName);
    public void RemoveEventHandler(Delegate handler, string eventName);
    public void RaiseEvent(object sender, object eventArgs, string eventName);
    public void RaiseEvent(string eventName);
}
public class Xamarin.CommunityToolkit.Helpers.WeakEventManager`1 : object {
    private Dictionary`2<string, List`1<Subscription>> eventHandlers;
    public void AddEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void AddEventHandler(Action`1<TEventArgs> action, string eventName);
    public void RemoveEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void RemoveEventHandler(Action`1<TEventArgs> action, string eventName);
    public void RaiseEvent(object sender, TEventArgs eventArgs, string eventName);
    public void RaiseEvent(TEventArgs eventArgs, string eventName);
}
public class Xamarin.CommunityToolkit.ObjectModel.AsyncCommand : BaseAsyncCommand`2<object, object> {
    public AsyncCommand(Func`1<Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual Task ExecuteAsync();
    private static Func`2<object, Task> ConvertExecute(Func`1<Task> execute);
}
public class Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`1 : BaseAsyncCommand`2<T, object> {
    public AsyncCommand`1(Func`2<T, Task> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual Task ExecuteAsync(T parameter);
}
public class Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`2 : BaseAsyncCommand`2<TExecute, TCanExecute> {
    public AsyncCommand`2(Func`2<TExecute, Task> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual Task ExecuteAsync(TExecute parameter);
}
public class Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand : BaseAsyncValueCommand`2<object, object> {
    public AsyncValueCommand(Func`1<ValueTask> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual ValueTask ExecuteAsync();
    private static Func`2<object, ValueTask> ConvertExecute(Func`1<ValueTask> execute);
}
public class Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`1 : BaseAsyncValueCommand`2<T, object> {
    public AsyncValueCommand`1(Func`2<T, ValueTask> execute, Func`2<object, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual ValueTask ExecuteAsync(T parameter);
}
public class Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`2 : BaseAsyncValueCommand`2<TExecute, TCanExecute> {
    public AsyncValueCommand`2(Func`2<TExecute, ValueTask> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    public sealed virtual ValueTask ExecuteAsync(TExecute parameter);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.CommunityToolkit.ObjectModel.BaseAsyncCommand`2 : BaseCommand`1<TCanExecute> {
    private Func`2<TExecute, Task> execute;
    private Action`1<Exception> onException;
    private bool continueOnCapturedContext;
    public BaseAsyncCommand`2(Func`2<TExecute, Task> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.ObjectModel.BaseAsyncCommand`2/<ExecuteAsync>d__4")]
private protected Task ExecuteAsync(TExecute parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.ObjectModel.BaseAsyncCommand`2/<<System-Windows-Input-ICommand-Execute>g__Execute|6_0>d")]
[CompilerGeneratedAttribute]
private void <System.Windows.Input.ICommand.Execute>g__Execute|6_0(TExecute parameter);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.CommunityToolkit.ObjectModel.BaseAsyncValueCommand`2 : BaseCommand`1<TCanExecute> {
    private Func`2<TExecute, ValueTask> execute;
    private Action`1<Exception> onException;
    private bool continueOnCapturedContext;
    public BaseAsyncValueCommand`2(Func`2<TExecute, ValueTask> execute, Func`2<TCanExecute, bool> canExecute, Action`1<Exception> onException, bool continueOnCapturedContext, bool allowsMultipleExecutions);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.ObjectModel.BaseAsyncValueCommand`2/<ExecuteAsync>d__4")]
private protected ValueTask ExecuteAsync(TExecute parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.ObjectModel.BaseAsyncValueCommand`2/<<System-Windows-Input-ICommand-Execute>g__Execute|6_0>d")]
[CompilerGeneratedAttribute]
private void <System.Windows.Input.ICommand.Execute>g__Execute|6_0(TExecute parameter);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.CommunityToolkit.ObjectModel.BaseCommand`1 : object {
    private Func`2<TCanExecute, bool> canExecute;
    private WeakEventManager weakEventManager;
    private int executionCount;
    [CompilerGeneratedAttribute]
private bool <AllowsMultipleExecutions>k__BackingField;
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    protected int ExecutionCount { get; protected set; }
    public BaseCommand`1(Func`2<TCanExecute, bool> canExecute, bool allowsMultipleExecutions);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool get_IsExecuting();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowsMultipleExecutions();
    protected int get_ExecutionCount();
    protected void set_ExecutionCount(int value);
    public sealed virtual bool CanExecute(TCanExecute parameter);
    public sealed virtual void RaiseCanExecuteChanged();
    [CompilerGeneratedAttribute]
private void <RaiseCanExecuteChanged>b__16_0();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    public abstract virtual Task ExecuteAsync();
    public abstract virtual void RaiseCanExecuteChanged();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`1 {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    public abstract virtual Task ExecuteAsync(T parameter);
    public abstract virtual void RaiseCanExecuteChanged();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`2 {
    public abstract virtual bool CanExecute(TCanExecute parameter);
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    public abstract virtual ValueTask ExecuteAsync();
    public abstract virtual void RaiseCanExecuteChanged();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`1 {
    public bool IsExecuting { get; }
    public bool AllowsMultipleExecutions { get; }
    public abstract virtual bool get_IsExecuting();
    public abstract virtual bool get_AllowsMultipleExecutions();
    public abstract virtual ValueTask ExecuteAsync(T parameter);
    public abstract virtual void RaiseCanExecuteChanged();
}
public interface Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`2 {
    public abstract virtual bool CanExecute(TCanExecute parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xamarin.CommunityToolkit.ObjectModel.ObservableObject : object {
    private WeakEventManager weakEventManager;
    [NullableContextAttribute("2")]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual bool SetProperty(T& backingStore, T value, string propertyName, Action onChanging, Action onChanged, Func`3<T, T, bool> validateValue);
    protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1 : ObservableCollection`1<T> {
    public ObservableRangeCollection`1(IEnumerable`1<T> collection);
    public void AddRange(IEnumerable`1<T> collection, NotifyCollectionChangedAction notificationMode);
    public void RemoveRange(IEnumerable`1<T> collection, NotifyCollectionChangedAction notificationMode);
    public void Replace(T item);
    public void ReplaceRange(IEnumerable`1<T> collection);
    private bool AddArrangeCore(IEnumerable`1<T> collection);
    private void RaiseChangeNotificationEvents(NotifyCollectionChangedAction action, List`1<T> changedItems, int startingIndex);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class Xamarin.CommunityToolkit.Resource : object {
    private static Resource();
}
public class Xamarin.CommunityToolkit.UI.Views.AutoFitTextureView : TextureView {
    private int mRatioWidth;
    private int mRatioHeight;
    public AutoFitTextureView(Context context);
    public AutoFitTextureView(Context context, IAttributeSet attrs);
    public AutoFitTextureView(Context context, IAttributeSet attrs, int defStyle);
    protected AutoFitTextureView(IntPtr javaReference, JniHandleOwnership transfer);
    public void SetAspectRatio(int width, int height);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
}
public class Xamarin.CommunityToolkit.UI.Views.AvatarView : BaseTemplatedView`1<Frame> {
    private static string emptyText;
    private static IImageSourceValidator imageSourceValidator;
    public static BindableProperty AspectProperty;
    public static BindableProperty SizeProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty ColorProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty ColorThemeProperty;
    [CompilerGeneratedAttribute]
private Image <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private AbsoluteLayout <MainLayout>k__BackingField;
    public Aspect Aspect { get; public set; }
    public double Size { get; public set; }
    public double CornerRadius { get; public set; }
    public Color BorderColor { get; public set; }
    public Color Color { get; public set; }
    public ImageSource Source { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public IColorTheme ColorTheme { get; public set; }
    private Image Image { get; }
    private Label Label { get; }
    private AbsoluteLayout MainLayout { get; }
    private static AvatarView();
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public double get_Size();
    public void set_Size(double value);
    public double get_CornerRadius();
    public void set_CornerRadius(double value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_Color();
    public void set_Color(Color value);
    public ImageSource get_Source();
    public void set_Source(ImageSource value);
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public IColorTheme get_ColorTheme();
    public void set_ColorTheme(IColorTheme value);
    [CompilerGeneratedAttribute]
private Image get_Image();
    [CompilerGeneratedAttribute]
private Label get_Label();
    [CompilerGeneratedAttribute]
private AbsoluteLayout get_MainLayout();
    protected virtual void OnControlInitialized(Frame control);
    protected virtual void OnSizeAllocated(double width, double height);
    private static void OnSizePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnSourcePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnSizePropertyChanged();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.AvatarView/<OnValuePropertyChanged>d__65")]
private void OnValuePropertyChanged(bool shouldUpdateSource);
    private double CalculateFontSize();
    [CompilerGeneratedAttribute]
private void <OnControlInitialized>b__59_0(object s, EventArgs e);
}
public class Xamarin.CommunityToolkit.UI.Views.BadgeAnimation : object {
    [CompilerGeneratedAttribute]
private UInt32 <AnimationLength>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    private Nullable`1<double> translationY;
    protected UInt32 AnimationLength { get; }
    protected UInt32 Offset { get; }
    [CompilerGeneratedAttribute]
protected UInt32 get_AnimationLength();
    [CompilerGeneratedAttribute]
protected UInt32 get_Offset();
    public sealed virtual Task OnAppearing(View badgeView);
    public sealed virtual Task OnDisappering(View badgeView);
}
public enum Xamarin.CommunityToolkit.UI.Views.BadgePosition : Enum {
    public int value__;
    public static BadgePosition TopLeft;
    public static BadgePosition TopRight;
    public static BadgePosition BottomLeft;
    public static BadgePosition BottomRight;
}
[ContentPropertyAttribute("Content")]
public class Xamarin.CommunityToolkit.UI.Views.BadgeView : BaseTemplatedView`1<Grid> {
    private bool isVisible;
    private bool placementDone;
    public static BindableProperty ContentProperty;
    public static BindableProperty BadgePositionProperty;
    public static BindableProperty AutoHideProperty;
    public static BindableProperty IsAnimatedProperty;
    public static BindableProperty BadgeAnimationProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty HasShadowProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontAttributesProperty;
    [CompilerGeneratedAttribute]
private ContentPresenter <BadgeContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <BadgeIndicatorContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <BadgeIndicatorBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <BadgeText>k__BackingField;
    public View Content { get; public set; }
    public BadgePosition BadgePosition { get; public set; }
    public bool AutoHide { get; public set; }
    public bool IsAnimated { get; public set; }
    public IBadgeAnimation BadgeAnimation { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color BorderColor { get; public set; }
    public bool HasShadow { get; public set; }
    public Color TextColor { get; public set; }
    public string Text { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    private ContentPresenter BadgeContent { get; }
    private Grid BadgeIndicatorContainer { get; }
    private Frame BadgeIndicatorBackground { get; }
    private Label BadgeText { get; }
    private static BadgeView();
    private static void OnLayoutPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public View get_Content();
    public void set_Content(View value);
    public BadgePosition get_BadgePosition();
    public void set_BadgePosition(BadgePosition value);
    private static void OnBadgePositionChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_AutoHide();
    public void set_AutoHide(bool value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.BadgeView/<OnAutoHideChanged>d__16")]
private static void OnAutoHideChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsAnimated();
    public void set_IsAnimated(bool value);
    public IBadgeAnimation get_BadgeAnimation();
    public void set_BadgeAnimation(IBadgeAnimation value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public string get_Text();
    public void set_Text(string value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.BadgeView/<OnTextChanged>d__45")]
private static void OnTextChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFontChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_FontSize();
    public void set_FontSize(double value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    [CompilerGeneratedAttribute]
private ContentPresenter get_BadgeContent();
    [CompilerGeneratedAttribute]
private Grid get_BadgeIndicatorContainer();
    [CompilerGeneratedAttribute]
private Frame get_BadgeIndicatorBackground();
    [CompilerGeneratedAttribute]
private Label get_BadgeText();
    protected virtual void OnControlInitialized(Grid control);
    private static ContentPresenter CreateContentElement();
    private static Grid CreateIndicatorContainerElement();
    private static Frame CreateIndicatorBackgroundElement();
    private static Label CreateTextElement();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
    private void UpdateFont();
    private void UpdateBadgeViewPlacement(bool force);
    private Tuple`2<Thickness, Thickness> GetMargins(double size);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.BadgeView/<UpdateVisibilityAsync>d__82")]
private Task UpdateVisibilityAsync();
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.CommunityToolkit.UI.Views.BaseTemplatedView`1 : TemplatedView {
    [CompilerGeneratedAttribute]
private TControl <Control>k__BackingField;
    protected TControl Control { get; private set; }
    [CompilerGeneratedAttribute]
protected TControl get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(TControl value);
    protected virtual void OnBindingContextChanged();
    protected virtual void OnChildAdded(Element child);
    protected abstract virtual void OnControlInitialized(TControl control);
}
internal class Xamarin.CommunityToolkit.UI.Views.CameraCaptureListener : CaptureCallback {
    public Action`1<TotalCaptureResult> OnCompleted;
    public virtual void OnCaptureCompleted(CameraCaptureSession session, CaptureRequest request, TotalCaptureResult result);
}
public enum Xamarin.CommunityToolkit.UI.Views.CameraCaptureOptions : Enum {
    public int value__;
    public static CameraCaptureOptions Default;
    public static CameraCaptureOptions Photo;
    public static CameraCaptureOptions Video;
}
internal class Xamarin.CommunityToolkit.UI.Views.CameraCaptureStateListener : StateCallback {
    public Action`1<CameraCaptureSession> OnConfigureFailedAction;
    public Action`1<CameraCaptureSession> OnConfiguredAction;
    public virtual void OnConfigureFailed(CameraCaptureSession session);
    public virtual void OnConfigured(CameraCaptureSession session);
}
public enum Xamarin.CommunityToolkit.UI.Views.CameraFlashMode : Enum {
    public int value__;
    public static CameraFlashMode Off;
    public static CameraFlashMode On;
    public static CameraFlashMode Auto;
    public static CameraFlashMode Torch;
}
internal class Xamarin.CommunityToolkit.UI.Views.CameraFragment : Fragment {
    private CameraDevice device;
    private Builder sessionBuilder;
    private CameraCaptureSession session;
    private AutoFitTextureView texture;
    private ImageReader photoReader;
    private MediaRecorder mediaRecorder;
    private bool audioPermissionsGranted;
    private bool cameraPermissionsGranted;
    private Size previewSize;
    private Size videoSize;
    private Size photoSize;
    private int sensorOrientation;
    private LensFacing cameraType;
    private bool busy;
    private bool flashSupported;
    private bool stabilizationSupported;
    private bool repeatingIsRunning;
    private FlashMode flashMode;
    private string cameraId;
    private string videoFile;
    private Semaphore captureSessionOpenCloseLock;
    private CameraTemplate cameraTemplate;
    private HandlerThread backgroundThread;
    private Handler backgroundHandler;
    private float zoom;
    private float maxDigitalZoom;
    private Rect activeRect;
    [CompilerGeneratedAttribute]
private bool <IsRecordingVideo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSystemSound>k__BackingField;
    private CameraManager manager;
    private MediaActionSound mediaSound;
    private TaskCompletionSource`1<CameraDevice> initTaskSource;
    private TaskCompletionSource`1<bool> permissionsRequested;
    [CompilerGeneratedAttribute]
private CameraView <Element>k__BackingField;
    private bool ZoomSupported { get; }
    public bool IsRecordingVideo { get; public set; }
    private bool UseSystemSound { get; private set; }
    private CameraManager Manager { get; }
    private MediaActionSound MediaSound { get; }
    private bool IsBusy { get; private set; }
    private bool Available { get; private set; }
    public CameraView Element { get; public set; }
    public CameraFragment(IntPtr javaReference, JniHandleOwnership transfer);
    private bool get_ZoomSupported();
    [CompilerGeneratedAttribute]
public bool get_IsRecordingVideo();
    [CompilerGeneratedAttribute]
public void set_IsRecordingVideo(bool value);
    [CompilerGeneratedAttribute]
private bool get_UseSystemSound();
    [CompilerGeneratedAttribute]
private void set_UseSystemSound(bool value);
    private CameraManager get_Manager();
    private MediaActionSound get_MediaSound();
    private bool get_IsBusy();
    private void set_IsBusy(bool value);
    private bool get_Available();
    private void set_Available(bool value);
    [CompilerGeneratedAttribute]
public CameraView get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(CameraView value);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    public virtual void OnViewCreated(View view, Bundle savedInstanceState);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.CameraFragment/<OnResume>d__59")]
public virtual void OnResume();
    public virtual void OnPause();
    private void StartBackgroundThread();
    private void StopBackgroundThread();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.CameraFragment/<RetrieveCameraDevice>d__63")]
public Task RetrieveCameraDevice(bool force);
    public void UpdateCaptureOptions();
    public void TakePhoto();
    private void OnPhoto(object sender, Tuple`2<string, Byte[]> tuple);
    private void OnVideo(object sender, string path);
    private void SetupImageReader();
    private void SetupMediaRecorder(Surface previewSurface);
    private CamcorderProfile GetCamcoderProfile();
    public void StartRecord();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.CameraFragment/<StopRecord>d__72")]
public void StopRecord();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.CameraFragment/<PrepareSession>d__73")]
private Task PrepareSession();
    private void CloseSession();
    public void UpdateRepeatingRequest();
    private void CloseDevice(CameraDevice inputDevice);
    public void CloseDevice();
    private void UpdateBackgroundColor();
    public void SetFlash();
    public void SetVideoStabilization();
    public void ApplyZoom();
    private string GetCameraId();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.CameraFragment/<Android-Views-TextureView-ISurfaceTextureListener-OnSurfaceTextureAvailable>d__83")]
private sealed virtual override void Android.Views.TextureView.ISurfaceTextureListener.OnSurfaceTextureAvailable(SurfaceTexture surface, int width, int height);
    private sealed virtual override void Android.Views.TextureView.ISurfaceTextureListener.OnSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height);
    private sealed virtual override bool Android.Views.TextureView.ISurfaceTextureListener.OnSurfaceTextureDestroyed(SurfaceTexture surface);
    private sealed virtual override void Android.Views.TextureView.ISurfaceTextureListener.OnSurfaceTextureUpdated(SurfaceTexture surface);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.CameraFragment/<RequestCameraPermissions>d__87")]
private Task RequestCameraPermissions();
    public virtual void OnRequestPermissionsResult(int requestCode, String[] permissions, Permission[] grantResults);
    private void LogError(string desc, Exception ex);
    private void DisposeMediaRecorder();
    private void DisposeImageReader();
    protected virtual void Dispose(bool disposing);
    private string ConstructMediaFilename(string prefix, string extension);
    private Rect GetZoomRect();
    private SurfaceOrientation GetDisplayRotation();
    private int GetDisplayRotationDegrees();
    private int GetJpegRotationDegrees();
    private int GetPreviewOrientation();
    public void ConfigureTransform();
    private void ConfigureTransform(int viewWidth, int viewHeight);
    private int GetCaptureOrientation();
    private int GetJpegOrientation();
    private void Sound(MediaActionSoundType soundType);
    private Size GetMaxSize(Size[] imageSizes);
    private Size ChooseOptimalSize(Size[] choices, int width, int height, Size aspectRatio);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
    [CompilerGeneratedAttribute]
private void <RetrieveCameraDevice>b__63_0(CameraDevice device);
    [CompilerGeneratedAttribute]
private void <RetrieveCameraDevice>b__63_1(CameraDevice device);
    [CompilerGeneratedAttribute]
private void <RetrieveCameraDevice>b__63_2(CameraDevice device, CameraError error);
    [CompilerGeneratedAttribute]
private void <RetrieveCameraDevice>b__63_3(CameraDevice device);
    [CompilerGeneratedAttribute]
private void <SetupImageReader>b__68_0(object _, Byte[] bytes);
    [CompilerGeneratedAttribute]
private string <GetCameraId>g__FilterCameraByLens|82_0(LensFacing lensFacing, <>c__DisplayClass82_0& );
}
public enum Xamarin.CommunityToolkit.UI.Views.CameraOptions : Enum {
    public int value__;
    public static CameraOptions Default;
    public static CameraOptions Front;
    public static CameraOptions Back;
    public static CameraOptions External;
}
internal class Xamarin.CommunityToolkit.UI.Views.CameraStateListener : StateCallback {
    public Action`1<CameraDevice> OnOpenedAction;
    public Action`1<CameraDevice> OnDisconnectedAction;
    public Action`2<CameraDevice, CameraError> OnErrorAction;
    public Action`1<CameraDevice> OnClosedAction;
    public virtual void OnOpened(CameraDevice camera);
    public virtual void OnDisconnected(CameraDevice camera);
    public virtual void OnError(CameraDevice camera, CameraError error);
    public virtual void OnClosed(CameraDevice camera);
}
public class Xamarin.CommunityToolkit.UI.Views.CameraView : View {
    [CompilerGeneratedAttribute]
private EventHandler`1<MediaCapturedEventArgs> MediaCaptured;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> MediaCaptureFailed;
    [CompilerGeneratedAttribute]
private EventHandler`1<bool> OnAvailable;
    [CompilerGeneratedAttribute]
private EventHandler ShutterClicked;
    internal static BindablePropertyKey ShutterCommandPropertyKey;
    public static BindableProperty ShutterCommandProperty;
    public static BindableProperty IsBusyProperty;
    public static BindableProperty IsAvailableProperty;
    public static BindableProperty CameraOptionsProperty;
    public static BindableProperty SavePhotoToFileProperty;
    public static BindableProperty CaptureOptionsProperty;
    public static BindableProperty VideoStabilizationProperty;
    public static BindableProperty FlashModeProperty;
    public static BindableProperty ZoomProperty;
    public static BindableProperty MaxZoomProperty;
    [PreserveAttribute]
public ICommand ShutterCommand { get; }
    public bool IsBusy { get; public set; }
    public bool IsAvailable { get; public set; }
    public CameraOptions CameraOptions { get; public set; }
    public bool SavePhotoToFile { get; public set; }
    public CameraCaptureOptions CaptureOptions { get; public set; }
    public bool VideoStabilization { get; public set; }
    public CameraFlashMode FlashMode { get; public set; }
    public double Zoom { get; public set; }
    public double MaxZoom { get; public set; }
    private static CameraView();
    [CompilerGeneratedAttribute]
public void add_MediaCaptured(EventHandler`1<MediaCapturedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MediaCaptured(EventHandler`1<MediaCapturedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MediaCaptureFailed(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_MediaCaptureFailed(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public void add_OnAvailable(EventHandler`1<bool> value);
    [CompilerGeneratedAttribute]
public void remove_OnAvailable(EventHandler`1<bool> value);
    [CompilerGeneratedAttribute]
internal void add_ShutterClicked(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ShutterClicked(EventHandler value);
    public ICommand get_ShutterCommand();
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    public bool get_IsAvailable();
    public void set_IsAvailable(bool value);
    public CameraOptions get_CameraOptions();
    public void set_CameraOptions(CameraOptions value);
    public bool get_SavePhotoToFile();
    public void set_SavePhotoToFile(bool value);
    public CameraCaptureOptions get_CaptureOptions();
    public void set_CaptureOptions(CameraCaptureOptions value);
    public bool get_VideoStabilization();
    public void set_VideoStabilization(bool value);
    public CameraFlashMode get_FlashMode();
    public void set_FlashMode(CameraFlashMode value);
    public double get_Zoom();
    public void set_Zoom(double value);
    public double get_MaxZoom();
    public void set_MaxZoom(double value);
    internal void RaiseMediaCaptured(MediaCapturedEventArgs args);
    internal void RaiseMediaCaptureFailed(string message);
    public void Shutter();
    private static object ShutterCommandValueCreator(BindableObject b);
}
public class Xamarin.CommunityToolkit.UI.Views.CameraViewRenderer : FrameLayout {
    private Nullable`1<int> defaultLabelFor;
    private bool disposed;
    private CameraView element;
    private VisualElementTracker visualElementTracker;
    private VisualElementRenderer visualElementRenderer;
    private MotionEventHelper motionEventHelper;
    private FragmentManager fragmentManager;
    private CameraFragment camerafragment;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private FragmentManager FragmentManager { get; }
    private CameraView Element { get; private set; }
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    public CameraViewRenderer(Context context);
    private FragmentManager get_FragmentManager();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.CameraViewRenderer/<OnElementPropertyChanged>d__17")]
private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnElementChanged(ElementChangedEventArgs`1<CameraView> e);
    private CameraView get_Element();
    private void set_Element(CameraView value);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void Dispose(bool disposing);
    private void OnShutterClicked(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    private static void MeasureExactly(View control, VisualElement element, Context context);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
}
public class Xamarin.CommunityToolkit.UI.Views.ColorTheme : object {
    private Color[] backgroundColors;
    private Color[] foregroundColors;
    public static IColorTheme Default;
    public static IColorTheme Jungle;
    public static IColorTheme Desert;
    public static IColorTheme Ocean;
    public static IColorTheme Volcano;
    public ColorTheme(Color[] foregroundColors, Color[] backgroundColors);
    private static ColorTheme();
    public sealed virtual Color GetForegroundColor(string text);
    public sealed virtual Color GetBackgroundColor(string text);
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.UI.Views.CupertinoTabViewItemTemplate : Grid {
    private VisualFeedbackEffect visualFeedback;
    private Image icon;
    private Label text;
    private TabBadgeView badge;
    protected virtual void OnParentSet();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
}
public enum Xamarin.CommunityToolkit.UI.Views.DefaultGravatar : Enum {
    public int value__;
    public static DefaultGravatar FileNotFound;
    public static DefaultGravatar MysteryPerson;
    public static DefaultGravatar Identicon;
    public static DefaultGravatar MonsterId;
    public static DefaultGravatar Wavatar;
    public static DefaultGravatar Retro;
    public static DefaultGravatar Robohash;
    public static DefaultGravatar Blank;
}
public enum Xamarin.CommunityToolkit.UI.Views.ExpandDirection : Enum {
    public int value__;
    public static ExpandDirection Down;
    public static ExpandDirection Up;
    public static ExpandDirection Left;
    public static ExpandDirection Right;
}
[ExtensionAttribute]
internal static class Xamarin.CommunityToolkit.UI.Views.ExpandDirectionExtensions : object {
    [ExtensionAttribute]
public static bool IsVertical(ExpandDirection orientation);
    [ExtensionAttribute]
public static bool IsRegularOrder(ExpandDirection orientation);
}
[ContentPropertyAttribute("Content")]
public class Xamarin.CommunityToolkit.UI.Views.Expander : BaseTemplatedView`1<StackLayout> {
    private static string expandAnimationName;
    private static UInt32 defaultAnimationLength;
    private WeakEventManager tappedEventManager;
    private ContentView contentHolder;
    private GestureRecognizer headerTapGestureRecognizer;
    private DataTemplate previousTemplate;
    private double lastVisibleSize;
    private Size previousSize;
    private bool shouldIgnoreContentSetting;
    private object contentSetLocker;
    public static BindableProperty HeaderProperty;
    public static BindableProperty ContentProperty;
    public static BindableProperty ContentTemplateProperty;
    public static BindableProperty IsExpandedProperty;
    public static BindableProperty DirectionProperty;
    public static BindableProperty ExpandAnimationLengthProperty;
    public static BindableProperty CollapseAnimationLengthProperty;
    public static BindableProperty ExpandAnimationEasingProperty;
    public static BindableProperty CollapseAnimationEasingProperty;
    public static BindableProperty StateProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty ForceUpdateSizeCommandProperty;
    private double Size { get; }
    private double ContentSize { get; }
    private double ContentSizeRequest { get; private set; }
    private double MeasuredContentSize { get; }
    public View Header { get; public set; }
    public View Content { get; public set; }
    public DataTemplate ContentTemplate { get; public set; }
    public bool IsExpanded { get; public set; }
    public ExpandDirection Direction { get; public set; }
    public UInt32 ExpandAnimationLength { get; public set; }
    public UInt32 CollapseAnimationLength { get; public set; }
    public Easing ExpandAnimationEasing { get; public set; }
    public Easing CollapseAnimationEasing { get; public set; }
    public ExpandState State { get; public set; }
    public object CommandParameter { get; public set; }
    public ICommand Command { get; public set; }
    public ICommand ForceUpdateSizeCommand { get; public set; }
    private static Expander();
    public void add_Tapped(EventHandler value);
    public void remove_Tapped(EventHandler value);
    private double get_Size();
    private double get_ContentSize();
    private double get_ContentSizeRequest();
    private void set_ContentSizeRequest(double value);
    private double get_MeasuredContentSize();
    public View get_Header();
    public void set_Header(View value);
    public View get_Content();
    public void set_Content(View value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public ExpandDirection get_Direction();
    public void set_Direction(ExpandDirection value);
    public UInt32 get_ExpandAnimationLength();
    public void set_ExpandAnimationLength(UInt32 value);
    public UInt32 get_CollapseAnimationLength();
    public void set_CollapseAnimationLength(UInt32 value);
    public Easing get_ExpandAnimationEasing();
    public void set_ExpandAnimationEasing(Easing value);
    public Easing get_CollapseAnimationEasing();
    public void set_CollapseAnimationEasing(Easing value);
    public ExpandState get_State();
    public void set_State(ExpandState value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public ICommand get_ForceUpdateSizeCommand();
    public void set_ForceUpdateSizeCommand(ICommand value);
    public void ForceUpdateSize();
    protected virtual void OnControlInitialized(StackLayout control);
    protected virtual void OnBindingContextChanged();
    protected virtual void OnSizeAllocated(double width, double height);
    private static void OnHeaderPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnContentPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnContentTemplatePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnIsExpandedPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnDirectionPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object GetDefaultForceUpdateSizeCommand(BindableObject bindable);
    private void OnHeaderPropertyChanged(View oldView);
    private void OnContentPropertyChanged();
    private void OnContentTemplatePropertyChanged();
    private void OnIsExpandedPropertyChanged();
    private void OnDirectionPropertyChanged(ExpandDirection olddirection);
    private void OnIsExpandedChanged(bool shouldIgnoreAnimation);
    private void SetHeader(View oldHeader);
    private void SetContent(bool isForceUpdate, bool shouldIgnoreAnimation, bool isForceContentReset);
    private void SetContent();
    private View CreateContent();
    private void SetDirection(ExpandDirection oldDirection);
    private void InvokeAnimation(double startSize, double endSize, bool shouldIgnoreAnimation);
    private void OnTapped();
    [CompilerGeneratedAttribute]
private void <OnControlInitialized>b__75_0(object parameter);
    [CompilerGeneratedAttribute]
private void <InvokeAnimation>b__95_0(double v);
    [CompilerGeneratedAttribute]
private void <InvokeAnimation>b__95_1(double value, bool isInterrupted);
}
public enum Xamarin.CommunityToolkit.UI.Views.ExpandState : Enum {
    public int value__;
    public static ExpandState Expanding;
    public static ExpandState Expanded;
    public static ExpandState Collapsing;
    public static ExpandState Collapsed;
}
public class Xamarin.CommunityToolkit.UI.Views.FormsVideoView : VideoView {
    [CompilerGeneratedAttribute]
private EventHandler MetadataRetrieved;
    [CompilerGeneratedAttribute]
private int <VideoHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VideoWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DurationTimeSpan>k__BackingField;
    public int VideoHeight { get; private set; }
    public int VideoWidth { get; private set; }
    public Nullable`1<TimeSpan> DurationTimeSpan { get; private set; }
    public TimeSpan Position { get; }
    public FormsVideoView(Context context);
    [CompilerGeneratedAttribute]
public void add_MetadataRetrieved(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MetadataRetrieved(EventHandler value);
    public virtual void SetVideoPath(string path);
    protected void ExtractMetadata(MediaMetadataRetriever retriever);
    public virtual void SetVideoURI(Uri uri, IDictionary`2<string, string> headers);
    public virtual void SetVideoURI(Uri uri);
    protected void GetMetaData(Uri uri, IDictionary`2<string, string> headers);
    [CompilerGeneratedAttribute]
public int get_VideoHeight();
    [CompilerGeneratedAttribute]
private void set_VideoHeight(int value);
    [CompilerGeneratedAttribute]
public int get_VideoWidth();
    [CompilerGeneratedAttribute]
private void set_VideoWidth(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DurationTimeSpan();
    [CompilerGeneratedAttribute]
private void set_DurationTimeSpan(Nullable`1<TimeSpan> value);
    public TimeSpan get_Position();
}
public class Xamarin.CommunityToolkit.UI.Views.GravatarImageSource : ImageSource {
    public static BindableProperty EmailProperty;
    public static BindableProperty SizeProperty;
    public static BindableProperty DefaultProperty;
    public static BindableProperty CachingEnabledProperty;
    public static BindableProperty CacheValidityProperty;
    public string Email { get; public set; }
    public int Size { get; public set; }
    public DefaultGravatar Default { get; public set; }
    public bool CachingEnabled { get; public set; }
    public TimeSpan CacheValidity { get; public set; }
    private static GravatarImageSource();
    private static void OnGravatarPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public string get_Email();
    public void set_Email(string value);
    public int get_Size();
    public void set_Size(int value);
    public DefaultGravatar get_Default();
    public void set_Default(DefaultGravatar value);
    public bool get_CachingEnabled();
    public void set_CachingEnabled(bool value);
    public TimeSpan get_CacheValidity();
    public void set_CacheValidity(TimeSpan value);
}
public class Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler : object {
    private static string requestUriFormat;
    private static Lazy`1<HttpClient> lazyHttp;
    private static SemaphoreSlim semaphore;
    private static GravatarImageSourceHandler();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<Bitmap> LoadImageAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<LoadInternal>d__4")]
public static Task`1<FileInfo> LoadInternal(ImageSource imageSource, float scale, string cacheDirectory);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<SaveImage>d__5")]
private static Task SaveImage(FileInfo cacheFileInfo, Byte[] imageBytes);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<UseCacheFile>d__6")]
private static Task`1<bool> UseCacheFile(bool cachingEnabled, TimeSpan cacheValidity, FileInfo file);
    private static string CacheFileName(GravatarImageSource gis, float scale);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.GravatarImageSourceHandler/<GetGravatarAsync>d__8")]
private static Task`1<Byte[]> GetGravatarAsync(string email, int size, float scale, DefaultGravatar defaultGravatar);
    private static string GetGravatarUri(string email, int size, float scale, DefaultGravatar defaultGravatar);
    private static string DefaultGravatarName(DefaultGravatar defaultGravatar);
    private static string GetMd5Hash(string str);
}
public interface Xamarin.CommunityToolkit.UI.Views.IBadgeAnimation {
    public abstract virtual Task OnAppearing(View badgeView);
    public abstract virtual Task OnDisappering(View badgeView);
}
public interface Xamarin.CommunityToolkit.UI.Views.IColorTheme {
    public abstract virtual Color GetForegroundColor(string text);
    public abstract virtual Color GetBackgroundColor(string text);
}
internal interface Xamarin.CommunityToolkit.UI.Views.IImageSourceValidator {
    public abstract virtual Task`1<bool> IsImageSourceValidAsync(ImageSource source);
}
internal class Xamarin.CommunityToolkit.UI.Views.ImageAvailableListener : Object {
    [CompilerGeneratedAttribute]
private EventHandler`1<Byte[]> Photo;
    [CompilerGeneratedAttribute]
public void add_Photo(EventHandler`1<Byte[]> value);
    [CompilerGeneratedAttribute]
public void remove_Photo(EventHandler`1<Byte[]> value);
    public sealed virtual void OnImageAvailable(ImageReader reader);
}
internal class Xamarin.CommunityToolkit.UI.Views.ImageSourceValidator : object {
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.ImageSourceValidator/<IsImageSourceValidAsync>d__0")]
public sealed virtual Task`1<bool> IsImageSourceValidAsync(ImageSource source);
    private IImageSourceHandler GetHandler(ImageSource source);
}
public interface Xamarin.CommunityToolkit.UI.Views.IMediaElementController {
    public double BufferingProgress { get; public set; }
    public MediaElementState CurrentState { get; public set; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public TimeSpan Position { get; public set; }
    public int VideoHeight { get; public set; }
    public int VideoWidth { get; public set; }
    public double Volume { get; public set; }
    public abstract virtual double get_BufferingProgress();
    public abstract virtual void set_BufferingProgress(double value);
    public abstract virtual MediaElementState get_CurrentState();
    public abstract virtual void set_CurrentState(MediaElementState value);
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    public abstract virtual void set_Duration(Nullable`1<TimeSpan> value);
    public abstract virtual TimeSpan get_Position();
    public abstract virtual void set_Position(TimeSpan value);
    public abstract virtual int get_VideoHeight();
    public abstract virtual void set_VideoHeight(int value);
    public abstract virtual int get_VideoWidth();
    public abstract virtual void set_VideoWidth(int value);
    public abstract virtual double get_Volume();
    public abstract virtual void set_Volume(double value);
    public abstract virtual void OnMediaEnded();
    public abstract virtual void OnMediaFailed();
    public abstract virtual void OnMediaOpened();
    public abstract virtual void OnSeekCompleted();
}
public interface Xamarin.CommunityToolkit.UI.Views.ISideMenuList`1 {
    public abstract virtual void Add(View view, SideMenuPosition position);
    public abstract virtual void Add(View view, SideMenuPosition position, double menuWidthPercentage);
    public abstract virtual void AddMainView(View view);
    public abstract virtual void AddMainView(View view, double menuWidthPercentage);
    public abstract virtual void AddLeftMenu(View view);
    public abstract virtual void AddLeftMenu(View view, double menuWidthPercentage);
    public abstract virtual void AddRightMenu(View view);
    public abstract virtual void AddRightMenu(View view, double menuWidthPercentage);
}
public interface Xamarin.CommunityToolkit.UI.Views.ITabBadgeAnimation {
    public abstract virtual Task OnAppearing(TabBadgeView badgeView);
    public abstract virtual Task OnDisappering(TabBadgeView badgeView);
}
public interface Xamarin.CommunityToolkit.UI.Views.ITabViewItemAnimation {
    public abstract virtual Task OnSelected(View tabViewItem);
    public abstract virtual Task OnDeSelected(View tabViewItem);
}
[ExtensionAttribute]
public static class Xamarin.CommunityToolkit.UI.Views.LayoutExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<Element> GetChildren(ILayoutController source);
}
public enum Xamarin.CommunityToolkit.UI.Views.LayoutState : Enum {
    public int value__;
    public static LayoutState None;
    public static LayoutState Loading;
    public static LayoutState Saving;
    public static LayoutState Success;
    public static LayoutState Error;
    public static LayoutState Empty;
    public static LayoutState Custom;
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.UI.Views.MaterialTabViewItemTemplate : Grid {
    private VisualFeedbackEffect visualFeedback;
    private Image icon;
    private Label text;
    private TabBadgeView badge;
    protected virtual void OnParentSet();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
    private void UpdateBadgePosition();
}
internal static class Xamarin.CommunityToolkit.UI.Views.MeasureSpecFactory : object {
    public static int GetSize(int measureSpec);
    public static int MakeMeasureSpec(int size, MeasureSpecMode mode);
}
public class Xamarin.CommunityToolkit.UI.Views.MediaCapturedEventArgs : EventArgs {
    private Lazy`1<ImageSource> imageSource;
    private Lazy`1<MediaSource> mediaSource;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ImageData>k__BackingField;
    public string Path { get; }
    public Byte[] ImageData { get; }
    public ImageSource Image { get; }
    public MediaSource Video { get; }
    internal MediaCapturedEventArgs(string path, Byte[] imageData);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Byte[] get_ImageData();
    public ImageSource get_Image();
    public MediaSource get_Video();
    private ImageSource GetImageSource();
    private MediaSource GetMediaSource();
    [CompilerGeneratedAttribute]
private Stream <GetImageSource>b__13_0();
}
public class Xamarin.CommunityToolkit.UI.Views.MediaElement : View {
    public static BindableProperty AspectProperty;
    public static BindableProperty AutoPlayProperty;
    public static BindableProperty BufferingProgressProperty;
    public static BindableProperty CurrentStateProperty;
    public static BindableProperty DurationProperty;
    public static BindableProperty IsLoopingProperty;
    public static BindableProperty KeepScreenOnProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty ShowsPlaybackControlsProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty VideoHeightProperty;
    public static BindableProperty VideoWidthProperty;
    public static BindableProperty VolumeProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<SeekRequested> SeekRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<StateRequested> StateRequested;
    [CompilerGeneratedAttribute]
private EventHandler PositionRequested;
    [CompilerGeneratedAttribute]
private EventHandler MediaEnded;
    [CompilerGeneratedAttribute]
private EventHandler MediaFailed;
    [CompilerGeneratedAttribute]
private EventHandler MediaOpened;
    [CompilerGeneratedAttribute]
private EventHandler SeekCompleted;
    private bool isSeeking;
    public Aspect Aspect { get; public set; }
    public bool AutoPlay { get; public set; }
    public double BufferingProgress { get; }
    public bool CanSeek { get; }
    public MediaElementState CurrentState { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public bool IsLooping { get; public set; }
    public bool KeepScreenOn { get; public set; }
    public bool ShowsPlaybackControls { get; public set; }
    public TimeSpan Position { get; public set; }
    [TypeConverterAttribute("Xamarin.CommunityToolkit.Core.MediaSourceConverter")]
public MediaSource Source { get; public set; }
    public int VideoHeight { get; }
    public int VideoWidth { get; }
    public double Volume { get; public set; }
    private double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.BufferingProgress { get; private set; }
    private MediaElementState Xamarin.CommunityToolkit.UI.Views.IMediaElementController.CurrentState { get; private set; }
    private Nullable`1<TimeSpan> Xamarin.CommunityToolkit.UI.Views.IMediaElementController.Duration { get; private set; }
    private TimeSpan Xamarin.CommunityToolkit.UI.Views.IMediaElementController.Position { get; private set; }
    private int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.VideoHeight { get; private set; }
    private int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.VideoWidth { get; private set; }
    private double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.Volume { get; private set; }
    private static MediaElement();
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public bool get_AutoPlay();
    public void set_AutoPlay(bool value);
    public double get_BufferingProgress();
    public bool get_CanSeek();
    public MediaElementState get_CurrentState();
    public Nullable`1<TimeSpan> get_Duration();
    public bool get_IsLooping();
    public void set_IsLooping(bool value);
    public bool get_KeepScreenOn();
    public void set_KeepScreenOn(bool value);
    public bool get_ShowsPlaybackControls();
    public void set_ShowsPlaybackControls(bool value);
    public TimeSpan get_Position();
    public void set_Position(TimeSpan value);
    public MediaSource get_Source();
    public void set_Source(MediaSource value);
    public int get_VideoHeight();
    public int get_VideoWidth();
    public double get_Volume();
    public void set_Volume(double value);
    [CompilerGeneratedAttribute]
internal void add_SeekRequested(EventHandler`1<SeekRequested> value);
    [CompilerGeneratedAttribute]
internal void remove_SeekRequested(EventHandler`1<SeekRequested> value);
    [CompilerGeneratedAttribute]
internal void add_StateRequested(EventHandler`1<StateRequested> value);
    [CompilerGeneratedAttribute]
internal void remove_StateRequested(EventHandler`1<StateRequested> value);
    [CompilerGeneratedAttribute]
internal void add_PositionRequested(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PositionRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MediaEnded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MediaEnded(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MediaFailed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MediaFailed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MediaOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MediaOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SeekCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SeekCompleted(EventHandler value);
    public void Play();
    public void Pause();
    public void Stop();
    private sealed virtual override double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_BufferingProgress();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_BufferingProgress(double value);
    private sealed virtual override MediaElementState Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_CurrentState();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_CurrentState(MediaElementState value);
    private sealed virtual override Nullable`1<TimeSpan> Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_Duration();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_Duration(Nullable`1<TimeSpan> value);
    private sealed virtual override TimeSpan Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_Position();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_Position(TimeSpan value);
    private sealed virtual override int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_VideoHeight();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_VideoHeight(int value);
    private sealed virtual override int Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_VideoWidth();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_VideoWidth(int value);
    private sealed virtual override double Xamarin.CommunityToolkit.UI.Views.IMediaElementController.get_Volume();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.set_Volume(double value);
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnMediaEnded();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnMediaFailed();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnMediaOpened();
    private sealed virtual override void Xamarin.CommunityToolkit.UI.Views.IMediaElementController.OnSeekCompleted();
    private void RequestSeek(TimeSpan newPosition);
    protected virtual void OnBindingContextChanged();
    private void OnSourceChanged(object sender, EventArgs eventArgs);
    private static void OnSourcePropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private void OnSourcePropertyChanged(MediaSource newvalue);
    private static void OnSourcePropertyChanging(BindableObject bindable, object oldvalue, object newvalue);
    private void OnSourcePropertyChanging(MediaSource oldvalue);
    private static void CurrentStateChanged(BindableObject bindable, object oldValue, object newValue);
    private static void PositionChanged(BindableObject bindable, object oldValue, object newValue);
    private static bool ValidateVolume(BindableObject o, object newValue);
}
public class Xamarin.CommunityToolkit.UI.Views.MediaElementRenderer : FrameLayout {
    private VisualElementTracker tracker;
    protected MediaController controller;
    protected MediaPlayer mediaPlayer;
    protected FormsVideoView view;
    private bool isDisposed;
    private Nullable`1<int> defaultLabelFor;
    [CompilerGeneratedAttribute]
private MediaElement <MediaElement>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    protected MediaElement MediaElement { get; protected set; }
    private IMediaElementController Controller { get; }
    public VisualElement Element { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    public MediaElementRenderer(Context context);
    [CompilerGeneratedAttribute]
protected MediaElement get_MediaElement();
    [CompilerGeneratedAttribute]
protected void set_MediaElement(MediaElement value);
    private IMediaElementController get_Controller();
    public sealed virtual VisualElement get_Element();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    protected virtual void UnsubscribeFromEvents(MediaElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private void StateRequested(object sender, StateRequested e);
    private void OnPositionRequested(object sender, EventArgs e);
    private void SeekRequested(object sender, SeekRequested e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private void SetTracker(VisualElementTracker tracker);
    protected virtual void UpdateBackgroundColor();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<MediaElement> e);
    private void MetadataRetrieved(object sender, EventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateKeepScreenOn();
    protected void UpdateShowPlaybackControls();
    protected virtual void UpdateSource();
    protected string ResolveMsAppDataUri(Uri uri);
    private sealed virtual override void Android.Media.MediaPlayer.IOnCompletionListener.OnCompletion(MediaPlayer mp);
    private sealed virtual override void Android.Media.MediaPlayer.IOnPreparedListener.OnPrepared(MediaPlayer mp);
    protected virtual void UpdateLayoutParameters();
    protected virtual void ReleaseControl();
    private sealed virtual override bool Android.Media.MediaPlayer.IOnErrorListener.OnError(MediaPlayer mp, MediaError what, int extra);
    private sealed virtual override bool Android.Media.MediaPlayer.IOnInfoListener.OnInfo(MediaPlayer mp, MediaInfo what, int extra);
    private void OnMpBufferingUpdate(object sender, BufferingUpdateEventArgs e);
}
public enum Xamarin.CommunityToolkit.UI.Views.MediaElementState : Enum {
    public int value__;
    public static MediaElementState Closed;
    public static MediaElementState Opening;
    public static MediaElementState Buffering;
    public static MediaElementState Playing;
    public static MediaElementState Paused;
    public static MediaElementState Stopped;
}
internal class Xamarin.CommunityToolkit.UI.Views.MotionEventHelper : object {
    private VisualElement element;
    private bool isInViewCell;
    public bool HandleMotionEvent(IViewParent parent, MotionEvent motionEvent);
    public void UpdateElement(VisualElement element);
    private bool ShouldPassThroughElement();
}
public class Xamarin.CommunityToolkit.UI.Views.Options.MessageOptions : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <DefaultFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultFontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultForeground>k__BackingField;
    public string Message { get; public set; }
    public static string DefaultMessage { get; public set; }
    public double FontSize { get; public set; }
    public static double DefaultFontSize { get; public set; }
    public string FontFamily { get; public set; }
    public static string DefaultFontFamily { get; public set; }
    public Color Foreground { get; public set; }
    public static Color DefaultForeground { get; public set; }
    private static MessageOptions();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultMessage();
    [CompilerGeneratedAttribute]
public static void set_DefaultMessage(string value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public static double get_DefaultFontSize();
    [CompilerGeneratedAttribute]
public static void set_DefaultFontSize(double value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultFontFamily();
    [CompilerGeneratedAttribute]
public static void set_DefaultFontFamily(string value);
    [CompilerGeneratedAttribute]
public Color get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultForeground();
    [CompilerGeneratedAttribute]
public static void set_DefaultForeground(Color value);
}
public class Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions : object {
    [CompilerGeneratedAttribute]
private Func`1<Task> <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<Task> <DefaultAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultText>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <DefaultFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultFontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultForegroundColor>k__BackingField;
    public Func`1<Task> Action { get; public set; }
    public static Func`1<Task> DefaultAction { get; public set; }
    public string Text { get; public set; }
    public static string DefaultText { get; public set; }
    public double FontSize { get; public set; }
    public static double DefaultFontSize { get; public set; }
    public string FontFamily { get; public set; }
    public static string DefaultFontFamily { get; public set; }
    public Color BackgroundColor { get; public set; }
    public static Color DefaultBackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public static Color DefaultForegroundColor { get; public set; }
    private static SnackBarActionOptions();
    [CompilerGeneratedAttribute]
public Func`1<Task> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Func`1<Task> value);
    [CompilerGeneratedAttribute]
public static Func`1<Task> get_DefaultAction();
    [CompilerGeneratedAttribute]
public static void set_DefaultAction(Func`1<Task> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultText();
    [CompilerGeneratedAttribute]
public static void set_DefaultText(string value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public static double get_DefaultFontSize();
    [CompilerGeneratedAttribute]
public static void set_DefaultFontSize(double value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultFontFamily();
    [CompilerGeneratedAttribute]
public static void set_DefaultFontFamily(string value);
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultBackgroundColor();
    [CompilerGeneratedAttribute]
public static void set_DefaultBackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_ForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ForegroundColor(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultForegroundColor();
    [CompilerGeneratedAttribute]
public static void set_DefaultForegroundColor(Color value);
}
public class Xamarin.CommunityToolkit.UI.Views.Options.SnackBarOptions : ToastOptions {
    [CompilerGeneratedAttribute]
private IEnumerable`1<SnackBarActionOptions> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEnumerable`1<SnackBarActionOptions> <DefaultActions>k__BackingField;
    public IEnumerable`1<SnackBarActionOptions> Actions { get; public set; }
    public static IEnumerable`1<SnackBarActionOptions> DefaultActions { get; public set; }
    private static SnackBarOptions();
    [CompilerGeneratedAttribute]
public IEnumerable`1<SnackBarActionOptions> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IEnumerable`1<SnackBarActionOptions> value);
    [CompilerGeneratedAttribute]
public static IEnumerable`1<SnackBarActionOptions> get_DefaultActions();
    [CompilerGeneratedAttribute]
public static void set_DefaultActions(IEnumerable`1<SnackBarActionOptions> value);
}
public class Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions : object {
    [CompilerGeneratedAttribute]
private MessageOptions <MessageOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static MessageOptions <DefaultMessageOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <DefaultBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRtl>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DefaultIsRtl>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <DefaultDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <Result>k__BackingField;
    public MessageOptions MessageOptions { get; public set; }
    public static MessageOptions DefaultMessageOptions { get; public set; }
    public Color BackgroundColor { get; public set; }
    public static Color DefaultBackgroundColor { get; public set; }
    public bool IsRtl { get; public set; }
    public static bool DefaultIsRtl { get; public set; }
    public TimeSpan Duration { get; public set; }
    public static TimeSpan DefaultDuration { get; public set; }
    public TaskCompletionSource`1<bool> Result { get; }
    private static ToastOptions();
    [CompilerGeneratedAttribute]
public MessageOptions get_MessageOptions();
    [CompilerGeneratedAttribute]
public void set_MessageOptions(MessageOptions value);
    [CompilerGeneratedAttribute]
public static MessageOptions get_DefaultMessageOptions();
    [CompilerGeneratedAttribute]
public static void set_DefaultMessageOptions(MessageOptions value);
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public static Color get_DefaultBackgroundColor();
    [CompilerGeneratedAttribute]
public static void set_DefaultBackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_IsRtl();
    [CompilerGeneratedAttribute]
public void set_IsRtl(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DefaultIsRtl();
    [CompilerGeneratedAttribute]
public static void set_DefaultIsRtl(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_DefaultDuration();
    [CompilerGeneratedAttribute]
public static void set_DefaultDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<bool> get_Result();
    public void SetResult(bool result);
}
public class Xamarin.CommunityToolkit.UI.Views.RangeSlider : BaseTemplatedView`1<AbsoluteLayout> {
    private static double enabledOpacity;
    private static double disabledOpacity;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler LowerValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler UpperValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler DragStarted;
    [CompilerGeneratedAttribute]
private EventHandler LowerDragStarted;
    [CompilerGeneratedAttribute]
private EventHandler UpperDragStarted;
    [CompilerGeneratedAttribute]
private EventHandler DragCompleted;
    [CompilerGeneratedAttribute]
private EventHandler LowerDragCompleted;
    [CompilerGeneratedAttribute]
private EventHandler UpperDragCompleted;
    public static BindableProperty MinimumValueProperty;
    public static BindableProperty MaximumValueProperty;
    public static BindableProperty StepValueProperty;
    public static BindableProperty LowerValueProperty;
    public static BindableProperty UpperValueProperty;
    public static BindableProperty ThumbSizeProperty;
    public static BindableProperty LowerThumbSizeProperty;
    public static BindableProperty UpperThumbSizeProperty;
    public static BindableProperty TrackSizeProperty;
    public static BindableProperty ThumbColorProperty;
    public static BindableProperty LowerThumbColorProperty;
    public static BindableProperty UpperThumbColorProperty;
    public static BindableProperty TrackColorProperty;
    public static BindableProperty TrackHighlightColorProperty;
    public static BindableProperty ThumbBorderColorProperty;
    public static BindableProperty LowerThumbBorderColorProperty;
    public static BindableProperty UpperThumbBorderColorProperty;
    public static BindableProperty TrackBorderColorProperty;
    public static BindableProperty TrackHighlightBorderColorProperty;
    public static BindableProperty ValueLabelStyleProperty;
    public static BindableProperty LowerValueLabelStyleProperty;
    public static BindableProperty UpperValueLabelStyleProperty;
    public static BindableProperty ValueLabelStringFormatProperty;
    public static BindableProperty LowerThumbViewProperty;
    public static BindableProperty UpperThumbViewProperty;
    public static BindableProperty ValueLabelSpacingProperty;
    public static BindableProperty ThumbRadiusProperty;
    public static BindableProperty LowerThumbRadiusProperty;
    public static BindableProperty UpperThumbRadiusProperty;
    public static BindableProperty TrackRadiusProperty;
    private Dictionary`2<View, double> thumbPositionMap;
    private PanGestureRecognizer lowerThumbGestureRecognizer;
    private PanGestureRecognizer upperThumbGestureRecognizer;
    private Size allocatedSize;
    private double labelMaxHeight;
    private double lowerTranslation;
    private double upperTranslation;
    private int dragCount;
    [CompilerGeneratedAttribute]
private Frame <Track>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <TrackHighlight>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <LowerThumb>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <UpperThumb>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <LowerValueLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <UpperValueLabel>k__BackingField;
    public double MinimumValue { get; public set; }
    public double MaximumValue { get; public set; }
    public double StepValue { get; public set; }
    public double LowerValue { get; public set; }
    public double UpperValue { get; public set; }
    public double ThumbSize { get; public set; }
    public double LowerThumbSize { get; public set; }
    public double UpperThumbSize { get; public set; }
    public double TrackSize { get; public set; }
    public Color ThumbColor { get; public set; }
    public Color LowerThumbColor { get; public set; }
    public Color UpperThumbColor { get; public set; }
    public Color TrackColor { get; public set; }
    public Color TrackHighlightColor { get; public set; }
    public Color ThumbBorderColor { get; public set; }
    public Color LowerThumbBorderColor { get; public set; }
    public Color UpperThumbBorderColor { get; public set; }
    public Color TrackBorderColor { get; public set; }
    public Color TrackHighlightBorderColor { get; public set; }
    public Style ValueLabelStyle { get; public set; }
    public Style LowerValueLabelStyle { get; public set; }
    public Style UpperValueLabelStyle { get; public set; }
    public string ValueLabelStringFormat { get; public set; }
    public View LowerThumbView { get; public set; }
    public View UpperThumbView { get; public set; }
    public double ValueLabelSpacing { get; public set; }
    public double ThumbRadius { get; public set; }
    public double LowerThumbRadius { get; public set; }
    public double UpperThumbRadius { get; public set; }
    public double TrackRadius { get; public set; }
    private Frame Track { get; }
    private Frame TrackHighlight { get; }
    private Frame LowerThumb { get; }
    private Frame UpperThumb { get; }
    private Label LowerValueLabel { get; }
    private Label UpperValueLabel { get; }
    private double TrackWidth { get; }
    private static RangeSlider();
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LowerValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LowerValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_UpperValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UpperValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LowerDragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LowerDragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_UpperDragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UpperDragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DragCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LowerDragCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LowerDragCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_UpperDragCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UpperDragCompleted(EventHandler value);
    public double get_MinimumValue();
    public void set_MinimumValue(double value);
    public double get_MaximumValue();
    public void set_MaximumValue(double value);
    public double get_StepValue();
    public void set_StepValue(double value);
    public double get_LowerValue();
    public void set_LowerValue(double value);
    public double get_UpperValue();
    public void set_UpperValue(double value);
    public double get_ThumbSize();
    public void set_ThumbSize(double value);
    public double get_LowerThumbSize();
    public void set_LowerThumbSize(double value);
    public double get_UpperThumbSize();
    public void set_UpperThumbSize(double value);
    public double get_TrackSize();
    public void set_TrackSize(double value);
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
    public Color get_LowerThumbColor();
    public void set_LowerThumbColor(Color value);
    public Color get_UpperThumbColor();
    public void set_UpperThumbColor(Color value);
    public Color get_TrackColor();
    public void set_TrackColor(Color value);
    public Color get_TrackHighlightColor();
    public void set_TrackHighlightColor(Color value);
    public Color get_ThumbBorderColor();
    public void set_ThumbBorderColor(Color value);
    public Color get_LowerThumbBorderColor();
    public void set_LowerThumbBorderColor(Color value);
    public Color get_UpperThumbBorderColor();
    public void set_UpperThumbBorderColor(Color value);
    public Color get_TrackBorderColor();
    public void set_TrackBorderColor(Color value);
    public Color get_TrackHighlightBorderColor();
    public void set_TrackHighlightBorderColor(Color value);
    public Style get_ValueLabelStyle();
    public void set_ValueLabelStyle(Style value);
    public Style get_LowerValueLabelStyle();
    public void set_LowerValueLabelStyle(Style value);
    public Style get_UpperValueLabelStyle();
    public void set_UpperValueLabelStyle(Style value);
    public string get_ValueLabelStringFormat();
    public void set_ValueLabelStringFormat(string value);
    public View get_LowerThumbView();
    public void set_LowerThumbView(View value);
    public View get_UpperThumbView();
    public void set_UpperThumbView(View value);
    public double get_ValueLabelSpacing();
    public void set_ValueLabelSpacing(double value);
    public double get_ThumbRadius();
    public void set_ThumbRadius(double value);
    public double get_LowerThumbRadius();
    public void set_LowerThumbRadius(double value);
    public double get_UpperThumbRadius();
    public void set_UpperThumbRadius(double value);
    public double get_TrackRadius();
    public void set_TrackRadius(double value);
    [CompilerGeneratedAttribute]
private Frame get_Track();
    [CompilerGeneratedAttribute]
private Frame get_TrackHighlight();
    [CompilerGeneratedAttribute]
private Frame get_LowerThumb();
    [CompilerGeneratedAttribute]
private Frame get_UpperThumb();
    [CompilerGeneratedAttribute]
private Label get_LowerValueLabel();
    [CompilerGeneratedAttribute]
private Label get_UpperValueLabel();
    private double get_TrackWidth();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnSizeAllocated(double width, double height);
    protected virtual void OnControlInitialized(AbsoluteLayout control);
    private static Frame CreateFrameElement();
    private static Label CreateLabelElement();
    private static object CoerceValue(BindableObject bindable, object value);
    private static void OnMinimumMaximumValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnLowerUpperValuePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnLayoutPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnIsEnabledChanged();
    private double CoerceValue(double value);
    private void OnMinimumMaximumValuePropertyChanged();
    private void OnLowerUpperValuePropertyChanged();
    private void OnValueLabelTranslationChanged();
    private void OnLayoutPropertyChanged();
    private void OnViewSizeChanged(object sender, EventArgs e);
    private void OnPanUpdated(object sender, PanUpdatedEventArgs e);
    private void OnPanStarted(View view);
    private void OnPanRunning(View view, double value);
    private void OnPanCompleted(View view);
    private void UpdateValue(View view, double value);
    private double GetPanShiftValue(View view);
    private void SetValueLabelBinding(Label label, BindableProperty bindableProperty);
    private void AddGestureRecognizer(View view, PanGestureRecognizer gestureRecognizer);
    private Color GetColorOrDefault(Color color, Color defaultColor);
    private double GetDoubleOrDefault(double value, double defaultSize);
    private void RaiseEvent(EventHandler eventHandler);
}
internal class Xamarin.CommunityToolkit.UI.Views.SeekRequested : EventArgs {
    [CompilerGeneratedAttribute]
private TimeSpan <Position>k__BackingField;
    public TimeSpan Position { get; }
    public SeekRequested(TimeSpan position);
    [CompilerGeneratedAttribute]
public TimeSpan get_Position();
}
public class Xamarin.CommunityToolkit.UI.Views.Shield : BaseTemplatedView`1<Frame> {
    public static BindableProperty SubjectProperty;
    public static BindableProperty StatusProperty;
    public static BindableProperty ColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    [CompilerGeneratedAttribute]
private EventHandler Tapped;
    [CompilerGeneratedAttribute]
private Grid <ShieldSubjectContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <ShieldSubject>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <ShieldStatusContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <ShieldStatus>k__BackingField;
    public string Subject { get; public set; }
    public string Status { get; public set; }
    public Color Color { get; public set; }
    public Color TextColor { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    private Grid ShieldSubjectContainer { get; }
    private Label ShieldSubject { get; }
    private Grid ShieldStatusContainer { get; }
    private Label ShieldStatus { get; }
    private static Shield();
    private static void OnSubjectChanged(BindableObject bindable, object oldValue, object newValue);
    public string get_Subject();
    public void set_Subject(string value);
    private static void OnStatusChanged(BindableObject bindable, object oldValue, object newValue);
    public string get_Status();
    public void set_Status(string value);
    private static void OnColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_Color();
    public void set_Color(Color value);
    private static void OnTextColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    private static void OnFontChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_FontSize();
    public void set_FontSize(double value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    [CompilerGeneratedAttribute]
public void add_Tapped(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Tapped(EventHandler value);
    [CompilerGeneratedAttribute]
private Grid get_ShieldSubjectContainer();
    [CompilerGeneratedAttribute]
private Label get_ShieldSubject();
    [CompilerGeneratedAttribute]
private Grid get_ShieldStatusContainer();
    [CompilerGeneratedAttribute]
private Label get_ShieldStatus();
    protected virtual void OnControlInitialized(Frame control);
    private static Grid CreateSubjectContainerElement();
    private static Label CreateSubjectElement();
    private static Grid CreateStatusContainerElement();
    private static Label CreateStatusElement();
    protected virtual void OnPropertyChanged(string propertyName);
    private void UpdateSubject();
    private void UpdateStatus();
    private void UpdateColor();
    private void UpdateTextColor();
    private void UpdateFont();
    private void UpdateIsEnabled();
    [CompilerGeneratedAttribute]
private void <UpdateIsEnabled>g__OnCloseButtonTapped|67_0(object sender, EventArgs e);
}
internal class Xamarin.CommunityToolkit.UI.Views.SideMenuElementCollection : ObservableCollection`1<View> {
    public sealed virtual void Add(View view, SideMenuPosition position);
    public sealed virtual void Add(View view, SideMenuPosition position, double menuWidthPercentage);
    public sealed virtual void AddMainView(View view);
    public sealed virtual void AddMainView(View view, double menuWidthPercentage);
    public sealed virtual void AddLeftMenu(View view);
    public sealed virtual void AddLeftMenu(View view, double menuWidthPercentage);
    public sealed virtual void AddRightMenu(View view);
    public sealed virtual void AddRightMenu(View view, double menuWidthPercentage);
}
public enum Xamarin.CommunityToolkit.UI.Views.SideMenuPosition : Enum {
    public int value__;
    public static SideMenuPosition LeftMenu;
    public static SideMenuPosition MainView;
    public static SideMenuPosition RightMenu;
}
public enum Xamarin.CommunityToolkit.UI.Views.SideMenuState : Enum {
    public int value__;
    public static SideMenuState LeftMenuShown;
    public static SideMenuState MainViewShown;
    public static SideMenuState RightMenuShown;
}
[ContentPropertyAttribute("Children")]
public class Xamarin.CommunityToolkit.UI.Views.SideMenuView : BaseTemplatedView`1<AbsoluteLayout> {
    private static string animationName;
    private static UInt32 animationRate;
    private static UInt32 animationLength;
    private static int maxTimeShiftItemsCount;
    private static int minSwipeTimeShiftItemsCount;
    private static double swipeThresholdDistance;
    private static double acceptMoveThresholdPercentage;
    private static UInt32 swipeAnimationAccelerationFactor;
    private static Easing animationEasing;
    private static TimeSpan swipeThresholdTime;
    private List`1<TimeShiftItem> timeShiftItems;
    private SideMenuElementCollection children;
    private View overlayView;
    private View mainView;
    private View leftMenu;
    private View rightMenu;
    private View activeMenu;
    private View inactiveMenu;
    private double zeroShift;
    private bool isGestureStarted;
    private bool isGestureDirectionResolved;
    private bool isSwipe;
    private double previousShift;
    public static BindableProperty ShiftProperty;
    public static BindableProperty CurrentGestureShiftProperty;
    public static BindableProperty GestureThresholdProperty;
    public static BindableProperty CancelVerticalGestureThresholdProperty;
    public static BindableProperty AllowInterceptGestureProperty;
    public static BindableProperty StateProperty;
    public static BindableProperty CurrentGestureStateProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty MenuWidthPercentageProperty;
    public static BindableProperty MenuGestureEnabledProperty;
    public ISideMenuList`1<View> Children { get; }
    public double Shift { get; public set; }
    public double CurrentGestureShift { get; public set; }
    public double GestureThreshold { get; public set; }
    public double CancelVerticalGestureThreshold { get; public set; }
    public bool AllowInterceptGesture { get; public set; }
    public SideMenuState State { get; public set; }
    public SideMenuState CurrentGestureState { get; public set; }
    private static SideMenuView();
    internal void OnPanUpdated(object sender, PanUpdatedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.SideMenuView/<OnSwiped>d__34")]
internal void OnSwiped(SwipeDirection swipeDirection);
    public ISideMenuList`1<View> get_Children();
    public double get_Shift();
    public void set_Shift(double value);
    public double get_CurrentGestureShift();
    public void set_CurrentGestureShift(double value);
    public double get_GestureThreshold();
    public void set_GestureThreshold(double value);
    public double get_CancelVerticalGestureThreshold();
    public void set_CancelVerticalGestureThreshold(double value);
    public bool get_AllowInterceptGesture();
    public void set_AllowInterceptGesture(bool value);
    public SideMenuState get_State();
    public void set_State(SideMenuState value);
    public SideMenuState get_CurrentGestureState();
    public void set_CurrentGestureState(SideMenuState value);
    public static SideMenuPosition GetPosition(BindableObject bindable);
    public static void SetPosition(BindableObject bindable, SideMenuPosition value);
    public static double GetMenuWidthPercentage(BindableObject bindable);
    public static void SetMenuWidthPercentage(BindableObject bindable, double value);
    public static bool GetMenuGestureEnabled(BindableObject bindable);
    public static void SetMenuGestureEnabled(BindableObject bindable, bool value);
    protected virtual void OnControlInitialized(AbsoluteLayout control);
    private static View SetupMainViewLayout(View view);
    private static View SetupMenuLayout(View view, bool isLeft);
    private static void OnStatePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnStatePropertyChanged();
    private void OnTouchStarted();
    private void OnTouchChanged(double shift, double verticalShift);
    private void OnTouchEnded();
    private void PerformAnimation();
    private void SetOverlayViewInputTransparent(SideMenuState state);
    private SideMenuState ResolveSwipeState(bool isRightSwipe);
    private bool TryUpdateShift(double sift, bool shouldUpdatePreviousShift, bool shouldCheckMenuGestureEnabled);
    private void SetCurrentGestureState(double shift);
    private void UpdateState(SideMenuState state, bool isSwipe);
    private void SetActiveView(bool isLeft);
    private bool CheckMenuGestureEnabled(SideMenuState state);
    private bool TryResolveFlingGesture(SideMenuState& state);
    private void PopulateTimeShiftItems(double shift);
    private void CleanTimeShiftItems();
    private void OnChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void HandleChildren(IList items, Action`1<View> action);
    private void AddChild(View view);
    private void RemoveChild(View view);
    private void OnLayoutChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnControlInitialized>b__64_0();
}
internal class Xamarin.CommunityToolkit.UI.Views.SnackBar : object {
    internal void Show(Page sender, SnackBarOptions arguments);
}
public static class Xamarin.CommunityToolkit.UI.Views.StateLayout : object {
    internal static BindablePropertyKey StateViewsPropertyKey;
    public static BindableProperty StateViewsProperty;
    internal static BindableProperty LayoutControllerProperty;
    public static BindableProperty CurrentStateProperty;
    public static BindableProperty CurrentCustomStateKeyProperty;
    public static BindableProperty AnimateStateChangesProperty;
    private static StateLayout();
    internal static StateLayoutController GetLayoutController(BindableObject b);
    public static IList`1<StateView> GetStateViews(BindableObject b);
    public static void SetCurrentState(BindableObject b, LayoutState value);
    public static LayoutState GetCurrentState(BindableObject b);
    public static void SetCurrentCustomStateKey(BindableObject b, string value);
    public static string GetCurrentCustomStateKey(BindableObject b);
    public static void SetAnimateStateChanges(BindableObject b, bool value);
    public static bool GetAnimateStateChanges(BindableObject b);
    private static void OnCurrentStateChanged(BindableObject bindable, LayoutState oldValue, LayoutState newValue);
    private static void OnCurrentCustomStateKeyChanged(BindableObject bindable, string oldValue, string newValue);
}
public class Xamarin.CommunityToolkit.UI.Views.StateLayoutController : object {
    private WeakReference`1<Layout`1<View>> layoutWeakReference;
    private bool layoutIsGrid;
    private LayoutState previousState;
    private IList`1<View> originalContent;
    [CompilerGeneratedAttribute]
private IList`1<StateView> <StateViews>k__BackingField;
    public IList`1<StateView> StateViews { get; public set; }
    public StateLayoutController(Layout`1<View> layout);
    [CompilerGeneratedAttribute]
public IList`1<StateView> get_StateViews();
    [CompilerGeneratedAttribute]
public void set_StateViews(IList`1<StateView> value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.StateLayoutController/<SwitchToContent>d__9")]
public void SwitchToContent(bool animate);
    public void SwitchToTemplate(string customState, bool animate);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.StateLayoutController/<SwitchToTemplate>d__11")]
public void SwitchToTemplate(LayoutState state, string customState, bool animate);
    private bool HasTemplateForState(LayoutState state, string customState);
    private int GetRepeatCount(LayoutState state, string customState);
    private DataTemplate GetRepeatTemplate(LayoutState state, string customState);
    private View CreateItemView(LayoutState state, string customState);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.StateLayoutController/<ChildrenFadeTo>d__16")]
private Task ChildrenFadeTo(Layout`1<View> layout, bool animate, bool isHide);
}
internal class Xamarin.CommunityToolkit.UI.Views.StateRequested : EventArgs {
    [CompilerGeneratedAttribute]
private MediaElementState <State>k__BackingField;
    public MediaElementState State { get; }
    public StateRequested(MediaElementState state);
    [CompilerGeneratedAttribute]
public MediaElementState get_State();
}
public class Xamarin.CommunityToolkit.UI.Views.StateView : ContentView {
    public static BindableProperty StateKeyProperty;
    public static BindableProperty CustomStateKeyProperty;
    public static BindableProperty RepeatCountProperty;
    public static BindableProperty RepeatTemplateProperty;
    public LayoutState StateKey { get; public set; }
    public string CustomStateKey { get; public set; }
    public int RepeatCount { get; public set; }
    public DataTemplate RepeatTemplate { get; public set; }
    private static StateView();
    public LayoutState get_StateKey();
    public void set_StateKey(LayoutState value);
    public string get_CustomStateKey();
    public void set_CustomStateKey(string value);
    public int get_RepeatCount();
    public void set_RepeatCount(int value);
    public DataTemplate get_RepeatTemplate();
    public void set_RepeatTemplate(DataTemplate value);
}
public class Xamarin.CommunityToolkit.UI.Views.TabBadgeAnimation : object {
    [CompilerGeneratedAttribute]
private UInt32 <AnimationLength>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    private Nullable`1<double> translationY;
    protected UInt32 AnimationLength { get; }
    protected UInt32 Offset { get; }
    [CompilerGeneratedAttribute]
protected UInt32 get_AnimationLength();
    [CompilerGeneratedAttribute]
protected UInt32 get_Offset();
    public sealed virtual Task OnAppearing(TabBadgeView badgeView);
    public sealed virtual Task OnDisappering(TabBadgeView badgeView);
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.UI.Views.TabBadgeTemplate : Grid {
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.UI.Views.TabBadgeView : TemplatedView {
    internal static string ElementBorder;
    internal static string ElementText;
    private Frame badgeBorder;
    private Label badgeText;
    private bool isVisible;
    public static BindableProperty PlacementTargetProperty;
    public static BindableProperty AutoHideProperty;
    public static BindableProperty IsAnimatedProperty;
    public static BindableProperty BadgeAnimationProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TextProperty;
    public View PlacementTarget { get; public set; }
    public bool AutoHide { get; public set; }
    public bool IsAnimated { get; public set; }
    public IBadgeAnimation BadgeAnimation { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color BorderColor { get; public set; }
    public Color TextColor { get; public set; }
    public string Text { get; public set; }
    private static TabBadgeView();
    public View get_PlacementTarget();
    public void set_PlacementTarget(View value);
    public bool get_AutoHide();
    public void set_AutoHide(bool value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabBadgeView/<OnAutoHideChanged>d__14")]
private static void OnAutoHideChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsAnimated();
    public void set_IsAnimated(bool value);
    public IBadgeAnimation get_BadgeAnimation();
    public void set_BadgeAnimation(IBadgeAnimation value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    private static void OnBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    private static void OnBorderColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    private static void OnTextColorChanged(BindableObject bindable, object oldValue, object newValue);
    public string get_Text();
    public void set_Text(string value);
    private static void OnTextChanged(BindableObject bindable, object oldValue, object newValue);
    protected virtual void OnApplyTemplate();
    protected virtual void OnPropertyChanged(string propertyName);
    private void UpdateIsEnabled();
    private void OnBadgeTextPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateSize();
    private void UpdatePosition();
    private void UpdateBackgroundColor(Color backgroundColor);
    private void UpdateBorderColor(Color borderColor);
    private void UpdateTextColor(Color textColor);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabBadgeView/<UpdateText>d__52")]
private void UpdateText(string text);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabBadgeView/<UpdateVisibilityAsync>d__53")]
private Task UpdateVisibilityAsync();
}
public enum Xamarin.CommunityToolkit.UI.Views.TabIndicatorPlacement : Enum {
    public int value__;
    public static TabIndicatorPlacement Top;
    public static TabIndicatorPlacement Center;
    public static TabIndicatorPlacement Bottom;
}
public class Xamarin.CommunityToolkit.UI.Views.TabSelectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <NewPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldPosition>k__BackingField;
    public int NewPosition { get; public set; }
    public int OldPosition { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NewPosition();
    [CompilerGeneratedAttribute]
public void set_NewPosition(int value);
    [CompilerGeneratedAttribute]
public int get_OldPosition();
    [CompilerGeneratedAttribute]
public void set_OldPosition(int value);
}
public enum Xamarin.CommunityToolkit.UI.Views.TabStripPlacement : Enum {
    public int value__;
    public static TabStripPlacement Top;
    public static TabStripPlacement Bottom;
}
public class Xamarin.CommunityToolkit.UI.Views.TabTappedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    public TabTappedEventArgs(int position);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
}
[PreserveAttribute]
[ContentPropertyAttribute("TabItems")]
public class Xamarin.CommunityToolkit.UI.Views.TabView : ContentView {
    private static UInt32 tabIndicatorAnimationDuration;
    private Grid mainContainer;
    private Grid tabStripContainer;
    private Grid tabStripBackground;
    private BoxView tabStripBorder;
    private ScrollView tabStripContainerScroll;
    private Grid tabStripIndicator;
    private Grid tabStripContent;
    private Grid tabStripContentContainer;
    private CarouselView contentContainer;
    private List`1<double> contentWidthCollection;
    private IList tabItemsSource;
    private ObservableCollection`1<TabViewItem> contentTabItems;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<TabViewItem> <TabItems>k__BackingField;
    public static BindableProperty TabItemsSourceProperty;
    public static BindableProperty TabViewItemDataTemplateProperty;
    public static BindableProperty TabContentDataTemplateProperty;
    public static BindableProperty SelectedIndexProperty;
    public static BindableProperty TabStripPlacementProperty;
    public static BindableProperty TabStripBackgroundColorProperty;
    public static BindableProperty TabStripBackgroundViewProperty;
    public static BindableProperty TabStripBorderColorProperty;
    public static BindableProperty TabContentBackgroundColorProperty;
    public static BindableProperty TabStripHeightProperty;
    public static BindableProperty IsTabStripVisibleProperty;
    public static BindableProperty TabContentHeightProperty;
    public static BindableProperty TabIndicatorColorProperty;
    public static BindableProperty TabIndicatorHeightProperty;
    public static BindableProperty TabIndicatorWidthProperty;
    public static BindableProperty TabIndicatorViewProperty;
    public static BindableProperty TabIndicatorPlacementProperty;
    public static BindableProperty IsTabTransitionEnabledProperty;
    public static BindableProperty IsSwipeEnabledProperty;
    [CompilerGeneratedAttribute]
private TabSelectionChangedEventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private TabViewScrolledEventHandler Scrolled;
    public ObservableCollection`1<TabViewItem> TabItems { get; public set; }
    public IList TabItemsSource { get; public set; }
    public DataTemplate TabViewItemDataTemplate { get; public set; }
    public DataTemplate TabContentDataTemplate { get; public set; }
    public int SelectedIndex { get; public set; }
    public TabStripPlacement TabStripPlacement { get; public set; }
    public Color TabStripBackgroundColor { get; public set; }
    public View TabStripBackgroundView { get; public set; }
    public Color TabStripBorderColor { get; public set; }
    public Color TabContentBackgroundColor { get; public set; }
    public double TabStripHeight { get; public set; }
    public bool IsTabStripVisible { get; public set; }
    public double TabContentHeight { get; public set; }
    public Color TabIndicatorColor { get; public set; }
    public double TabIndicatorHeight { get; public set; }
    public double TabIndicatorWidth { get; public set; }
    public View TabIndicatorView { get; public set; }
    public TabIndicatorPlacement TabIndicatorPlacement { get; public set; }
    public bool IsTabTransitionEnabled { get; public set; }
    public bool IsSwipeEnabled { get; public set; }
    private static TabView();
    private void DisableLoop();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<TabViewItem> get_TabItems();
    [CompilerGeneratedAttribute]
public void set_TabItems(ObservableCollection`1<TabViewItem> value);
    public IList get_TabItemsSource();
    public void set_TabItemsSource(IList value);
    private static void OnTabItemsSourceChanged(BindableObject bindable, object oldValue, object newValue);
    public DataTemplate get_TabViewItemDataTemplate();
    public void set_TabViewItemDataTemplate(DataTemplate value);
    public DataTemplate get_TabContentDataTemplate();
    public void set_TabContentDataTemplate(DataTemplate value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    private static void OnSelectedIndexChanged(BindableObject bindable, object oldValue, object newValue);
    public TabStripPlacement get_TabStripPlacement();
    public void set_TabStripPlacement(TabStripPlacement value);
    private static void OnTabStripPlacementChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabStripBackgroundColor();
    public void set_TabStripBackgroundColor(Color value);
    private static void OnTabStripBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    public View get_TabStripBackgroundView();
    public void set_TabStripBackgroundView(View value);
    private static void OnTabStripBackgroundViewChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabStripBorderColor();
    public void set_TabStripBorderColor(Color value);
    private static void OnTabStripBorderColorChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabContentBackgroundColor();
    public void set_TabContentBackgroundColor(Color value);
    private static void OnTabContentBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabStripHeight();
    public void set_TabStripHeight(double value);
    private static void OnTabStripHeightChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsTabStripVisible();
    public void set_IsTabStripVisible(bool value);
    private static void OnIsTabStripVisibleChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabContentHeight();
    public void set_TabContentHeight(double value);
    private static void OnTabContentHeightChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_TabIndicatorColor();
    public void set_TabIndicatorColor(Color value);
    private static void OnTabIndicatorColorChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabIndicatorHeight();
    public void set_TabIndicatorHeight(double value);
    private static void OnTabIndicatorHeightChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabIndicatorWidth();
    public void set_TabIndicatorWidth(double value);
    private static void OnTabIndicatorWidthChanged(BindableObject bindable, object oldValue, object newValue);
    public View get_TabIndicatorView();
    public void set_TabIndicatorView(View value);
    private static void OnTabIndicatorViewChanged(BindableObject bindable, object oldValue, object newValue);
    public TabIndicatorPlacement get_TabIndicatorPlacement();
    public void set_TabIndicatorPlacement(TabIndicatorPlacement value);
    private static void OnTabIndicatorPlacementChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsTabTransitionEnabled();
    public void set_IsTabTransitionEnabled(bool value);
    private static void OnIsTabTransitionEnabledChanged(BindableObject bindable, object oldValue, object newValue);
    public bool get_IsSwipeEnabled();
    public void set_IsSwipeEnabled(bool value);
    private static void OnIsSwipeEnabledChanged(BindableObject bindable, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(TabSelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(TabSelectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Scrolled(TabViewScrolledEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(TabViewScrolledEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnBindingContextChanged();
    private void OnTabViewItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnTabItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnContentContainerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnContentContainerScrolled(object sender, ItemsViewScrolledEventArgs args);
    private void ClearTabStrip();
    private void ClearTabViewItem(TabViewItem tabViewItem);
    private void AddTabViewItem(TabViewItem tabViewItem, int index);
    private void UpdateTabStripSize();
    private void UpdateTabContentSize();
    private void AddTabViewItemFromTemplate(object item, int index);
    private void UpdateTabViewItemBindingContext(TabViewItem tabViewItem);
    private void AddSelectionTapRecognizer(View view);
    private void AddTabViewItemToTabStrip(View item, int index);
    private void AddTabViewItemFromTemplateToTabStrip(object item, int index);
    private void UpdateIsEnabled();
    private void UpdateTabViewItemTabWidth(TabViewItem tabViewItem);
    private void UpdateTabItemsSource();
    private void OnTabItemsSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateItemsSource(IEnumerable items);
    private bool CanUpdateSelectedIndex(int selectedIndex);
    private void UpdateSelectedIndex(int position, bool hasCurrentItem);
    private void OnCurrentTabItemSizeChanged(object sender, EventArgs e);
    private void UpdateTabStripPlacement(TabStripPlacement tabStripPlacement);
    private void UpdateTabContentLayout();
    private void UpdateTabStripBackgroundColor(Color tabStripBackgroundColor);
    private void UpdateTabStripBackgroundView(View tabStripBackgroundView);
    private void UpdateTabStripBorderColor(Color tabStripBorderColor);
    private void UpdateTabIndicatorMargin();
    private void UpdateTabContentBackgroundColor(Color tabContentBackgroundColor);
    private void UpdateTabStripHeight(double tabStripHeight);
    private void UpdateIsTabStripVisible(bool isTabStripVisible);
    private void UpdateTabContentHeight(double tabContentHeight);
    private void UpdateTabIndicatorColor(Color tabIndicatorColor);
    private void UpdateTabIndicatorHeight(double tabIndicatorHeight);
    private void UpdateTabIndicatorWidth(double tabIndicatorWidth);
    private void UpdateTabIndicatorView(View tabIndicatorView);
    private void UpdateTabIndicatorPlacement(TabIndicatorPlacement tabIndicatorPlacement);
    private void UpdateIsSwipeEnabled(bool isSwipeEnabled);
    private void UpdateIsTabTransitionEnabled(bool isTabTransitionEnabled);
    private void UpdateTabIndicatorPosition(int tabViewItemIndex);
    private void UpdateTabIndicatorPosition(ItemsViewScrolledEventArgs args);
    private void UpdateTabIndicatorPosition(View currentTabViewItem);
    internal virtual void OnTabSelectionChanged(TabSelectionChangedEventArgs e);
    internal virtual void OnTabViewScrolled(ItemsViewScrolledEventArgs e);
}
[PreserveAttribute]
[ContentPropertyAttribute("Content")]
public class Xamarin.CommunityToolkit.UI.Views.TabViewItem : TemplatedView {
    private bool isOnScreen;
    public static BindableProperty TextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TextColorSelectedProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontSizeSelectedProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontFamilySelectedProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty FontAttributesSelectedProperty;
    public static BindableProperty ContentProperty;
    public static BindableProperty IconProperty;
    public static BindableProperty IconSelectedProperty;
    public static BindableProperty IsSelectedProperty;
    public static BindableProperty BadgeTextProperty;
    public static BindableProperty TabWidthProperty;
    public static BindableProperty TabAnimationProperty;
    public static BindableProperty BadgeTextColorProperty;
    public static BindableProperty BadgeBackgroundColorProperty;
    public static BindableProperty BadgeBackgroundColorSelectedProperty;
    public static BindableProperty BadgeBorderColorProperty;
    public static BindableProperty BadgeBorderColorSelectedProperty;
    public static BindableProperty TapCommandProperty;
    internal static BindablePropertyKey CurrentTextColorPropertyKey;
    public static BindableProperty CurrentTextColorProperty;
    internal static BindablePropertyKey CurrentFontSizePropertyKey;
    public static BindableProperty CurrentFontSizeProperty;
    internal static BindablePropertyKey CurrentIconPropertyKey;
    public static BindableProperty CurrentIconProperty;
    internal static BindablePropertyKey CurrentFontFamilyPropertyKey;
    public static BindableProperty CurrentFontFamilyProperty;
    internal static BindablePropertyKey CurrentFontAttributesPropertyKey;
    public static BindableProperty CurrentFontAttributesProperty;
    internal static BindablePropertyKey CurrentBadgeBackgroundColorPropertyKey;
    public static BindableProperty CurrentBadgeBackgroundColorProperty;
    internal static BindablePropertyKey CurrentBadgeBorderColorPropertyKey;
    public static BindableProperty CurrentBadgeBorderColorProperty;
    internal static BindablePropertyKey CurrentContentPropertyKey;
    public static BindableProperty CurrentContentProperty;
    [CompilerGeneratedAttribute]
private TabTappedEventHandler TabTapped;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextColorSelected { get; public set; }
    public double FontSize { get; public set; }
    public double FontSizeSelected { get; public set; }
    public string FontFamily { get; public set; }
    public string FontFamilySelected { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public FontAttributes FontAttributesSelected { get; public set; }
    public View Content { get; public set; }
    public ImageSource Icon { get; public set; }
    public ImageSource IconSelected { get; public set; }
    public bool IsSelected { get; public set; }
    public double TabWidth { get; public set; }
    public ITabViewItemAnimation TabAnimation { get; public set; }
    public string BadgeText { get; public set; }
    public Color BadgeTextColor { get; public set; }
    public Color BadgeBackgroundColor { get; public set; }
    public Color BadgeBackgroundColorSelected { get; public set; }
    public Color BadgeBorderColor { get; public set; }
    public Color BadgeBorderColorSelected { get; public set; }
    public ICommand TapCommand { get; public set; }
    public Color CurrentTextColor { get; private set; }
    public double CurrentFontSize { get; private set; }
    public ImageSource CurrentIcon { get; private set; }
    public string CurrentFontFamily { get; private set; }
    public FontAttributes CurrentFontAttributes { get; private set; }
    public Color CurrentBadgeBackgroundColor { get; private set; }
    public Color CurrentBadgeBorderColor { get; private set; }
    public View CurrentContent { get; private set; }
    private static TabViewItem();
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Color get_TextColorSelected();
    public void set_TextColorSelected(Color value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public double get_FontSizeSelected();
    public void set_FontSizeSelected(double value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_FontFamilySelected();
    public void set_FontFamilySelected(string value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public FontAttributes get_FontAttributesSelected();
    public void set_FontAttributesSelected(FontAttributes value);
    public View get_Content();
    public void set_Content(View value);
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    public ImageSource get_IconSelected();
    public void set_IconSelected(ImageSource value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabViewItem/<OnIsSelectedChanged>d__53")]
private static void OnIsSelectedChanged(BindableObject bindable, object oldValue, object newValue);
    public double get_TabWidth();
    public void set_TabWidth(double value);
    public ITabViewItemAnimation get_TabAnimation();
    public void set_TabAnimation(ITabViewItemAnimation value);
    public string get_BadgeText();
    public void set_BadgeText(string value);
    public Color get_BadgeTextColor();
    public void set_BadgeTextColor(Color value);
    public Color get_BadgeBackgroundColor();
    public void set_BadgeBackgroundColor(Color value);
    public Color get_BadgeBackgroundColorSelected();
    public void set_BadgeBackgroundColorSelected(Color value);
    public Color get_BadgeBorderColor();
    public void set_BadgeBorderColor(Color value);
    public Color get_BadgeBorderColorSelected();
    public void set_BadgeBorderColorSelected(Color value);
    public ICommand get_TapCommand();
    public void set_TapCommand(ICommand value);
    private static void OnTabViewItemPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public Color get_CurrentTextColor();
    private void set_CurrentTextColor(Color value);
    public double get_CurrentFontSize();
    private void set_CurrentFontSize(double value);
    public ImageSource get_CurrentIcon();
    private void set_CurrentIcon(ImageSource value);
    public string get_CurrentFontFamily();
    private void set_CurrentFontFamily(string value);
    public FontAttributes get_CurrentFontAttributes();
    private void set_CurrentFontAttributes(FontAttributes value);
    public Color get_CurrentBadgeBackgroundColor();
    private void set_CurrentBadgeBackgroundColor(Color value);
    public Color get_CurrentBadgeBorderColor();
    private void set_CurrentBadgeBorderColor(Color value);
    public View get_CurrentContent();
    private void set_CurrentContent(View value);
    [CompilerGeneratedAttribute]
public void add_TabTapped(TabTappedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TabTapped(TabTappedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    internal virtual void OnTabTapped(TabTappedEventArgs e);
    internal void UpdateCurrentContent(bool isOnScreen);
    private void UpdateCurrent();
    [AsyncStateMachineAttribute("Xamarin.CommunityToolkit.UI.Views.TabViewItem/<UpdateTabAnimationAsync>d__139")]
private Task UpdateTabAnimationAsync();
}
internal class Xamarin.CommunityToolkit.UI.Views.TimeShiftItem : ValueType {
    [CompilerGeneratedAttribute]
private DateTime <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Shift>k__BackingField;
    public DateTime Time { get; public set; }
    public double Shift { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTime get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(DateTime value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Shift();
    [CompilerGeneratedAttribute]
public void set_Shift(double value);
}
[TypeConversionAttribute("System.Uri")]
public class Xamarin.CommunityToolkit.UI.Views.UriTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[PreserveAttribute]
public class Xamarin.CommunityToolkit.UI.Views.WindowsTabViewItemTemplate : Grid {
    private Image icon;
    private Label text;
    private TabBadgeView badge;
    protected virtual void OnParentSet();
    protected virtual void OnSizeAllocated(double width, double height);
    private void UpdateLayout();
    private void UpdateBadgePosition();
}
