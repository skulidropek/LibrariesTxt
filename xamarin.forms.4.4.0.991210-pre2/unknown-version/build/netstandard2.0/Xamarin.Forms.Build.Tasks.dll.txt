internal class ThisAssembly : object {
}
internal class Xamarin.Forms.Build.Tasks.ArrayExtension : object {
    public sealed virtual IEnumerable`1<Instruction> ProvideValue(IElementNode node, ModuleDefinition module, ILContext context, TypeReference& memberRef);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.ArrayExtension/<ProvideValue>d__1")]
private IEnumerable`1<Instruction> ProvideValue(TypeReference typeTypeRef, IReadOnlyList`1<INode> items, ModuleDefinition module, ILContext context);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.BindablePropertyReferenceExtensions : object {
    [ExtensionAttribute]
public static TypeReference GetBindablePropertyType(FieldReference bpRef, IXmlLineInfo iXmlLineInfo, ModuleDefinition module);
    [ExtensionAttribute]
public static TypeReference GetBindablePropertyTypeConverter(FieldReference bpRef, ModuleDefinition module);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.CecilExtensions : object {
    [ExtensionAttribute]
public static bool IsXaml(EmbeddedResource resource, ModuleDefinition module, String& classname);
    private static TypeReference GetTypeForResourceId(ModuleDefinition module, string resourceId);
}
internal class Xamarin.Forms.Build.Tasks.CreateObjectVisitor : object {
    [CompilerGeneratedAttribute]
private ILContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleDefinition <Module>k__BackingField;
    public ILContext Context { get; }
    private ModuleDefinition Module { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public CreateObjectVisitor(ILContext context);
    [CompilerGeneratedAttribute]
public ILContext get_Context();
    [CompilerGeneratedAttribute]
private ModuleDefinition get_Module();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    private bool ValidateCtorArguments(MethodDefinition ctorinfo, ElementNode enode, String& firstMissingProperty);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.CreateObjectVisitor/<PushCtorArguments>d__23")]
private IEnumerable`1<Instruction> PushCtorArguments(MethodReference ctorinfo, ElementNode enode);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.CreateObjectVisitor/<PushCtorXArguments>d__24")]
private IEnumerable`1<Instruction> PushCtorXArguments(MethodReference factoryCtorInfo, ElementNode enode);
    private static bool IsXaml2009LanguagePrimitive(IElementNode node);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.CreateObjectVisitor/<PushValueFromLanguagePrimitive>d__26")]
private IEnumerable`1<Instruction> PushValueFromLanguagePrimitive(TypeDefinition typedef, ElementNode node);
}
internal class Xamarin.Forms.Build.Tasks.CssGenerator : object {
    internal static CodeDomProvider Provider;
    [CompilerGeneratedAttribute]
private string <CssFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Logger>k__BackingField;
    public string CssFile { get; }
    public string Language { get; }
    public string ResourceId { get; }
    public string TargetPath { get; }
    public string AssemblyName { get; }
    public string OutputFile { get; }
    public TaskLoggingHelper Logger { get; }
    public CssGenerator(ITaskItem taskItem, string language, string assemblyName, string outputFile, TaskLoggingHelper logger);
    public CssGenerator(string cssFile, string language, string resourceId, string targetPath, string assemblyName, string outputFile, TaskLoggingHelper logger);
    private static CssGenerator();
    [CompilerGeneratedAttribute]
public string get_CssFile();
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_ResourceId();
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public TaskLoggingHelper get_Logger();
    public bool Execute();
    private void GenerateCode();
}
public class Xamarin.Forms.Build.Tasks.CssGTask : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <CSSFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] CSSFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] OutputFiles { get; public set; }
    public string Language { get; public set; }
    public string AssemblyName { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CSSFiles();
    [CompilerGeneratedAttribute]
public void set_CSSFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputFiles();
    [CompilerGeneratedAttribute]
public void set_OutputFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    public virtual bool Execute();
}
internal class Xamarin.Forms.Build.Tasks.DataTemplateExtension : object {
    public sealed virtual IEnumerable`1<Instruction> ProvideValue(IElementNode node, ModuleDefinition module, ILContext context, TypeReference& typeRef);
}
public class Xamarin.Forms.Build.Tasks.DebugXamlCTask : XamlTask {
    public virtual bool Execute(IList`1& thrownExceptions);
}
internal class Xamarin.Forms.Build.Tasks.ExpandMarkupsVisitor : object {
    private IList`1<XmlName> _skips;
    [CompilerGeneratedAttribute]
private ILContext <Context>k__BackingField;
    private ILContext Context { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public ExpandMarkupsVisitor(ILContext context);
    [CompilerGeneratedAttribute]
private ILContext get_Context();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode markupnode, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    public static bool TryGetProperyName(INode node, INode parentNode, XmlName& name);
    private static INode ParseExpression(String& expression, ILContext context, IXmlNamespaceResolver nsResolver, IXmlLineInfo xmlLineInfo);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.FieldReferenceExtensions : object {
    [ExtensionAttribute]
public static FieldReference ResolveGenericParameters(FieldReference self, TypeReference declaringTypeRef);
}
internal interface Xamarin.Forms.Build.Tasks.ICompiledMarkupExtension {
    public abstract virtual IEnumerable`1<Instruction> ProvideValue(IElementNode node, ModuleDefinition module, ILContext context, TypeReference& typeRef);
}
internal class Xamarin.Forms.Build.Tasks.ILContext : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<IValueNode, object> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IElementNode, VariableDefinition> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<INode, Tuple`2<VariableDefinition, IList`1<string>>> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<INode, TypeReference> <TypeExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition <ParentContextValues>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private ILProcessor <IL>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodBody <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleDefinition <Module>k__BackingField;
    public Dictionary`2<IValueNode, object> Values { get; private set; }
    public Dictionary`2<IElementNode, VariableDefinition> Variables { get; private set; }
    public Dictionary`2<INode, Tuple`2<VariableDefinition, IList`1<string>>> Scopes { get; private set; }
    public Dictionary`2<INode, TypeReference> TypeExtensions { get; }
    public FieldDefinition ParentContextValues { get; private set; }
    public object Root { get; public set; }
    public ILProcessor IL { get; private set; }
    public MethodBody Body { get; private set; }
    public ModuleDefinition Module { get; private set; }
    public ILContext(ILProcessor il, MethodBody body, ModuleDefinition module, FieldDefinition parentContextValues);
    [CompilerGeneratedAttribute]
public Dictionary`2<IValueNode, object> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(Dictionary`2<IValueNode, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IElementNode, VariableDefinition> get_Variables();
    [CompilerGeneratedAttribute]
private void set_Variables(Dictionary`2<IElementNode, VariableDefinition> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<INode, Tuple`2<VariableDefinition, IList`1<string>>> get_Scopes();
    [CompilerGeneratedAttribute]
private void set_Scopes(Dictionary`2<INode, Tuple`2<VariableDefinition, IList`1<string>>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<INode, TypeReference> get_TypeExtensions();
    [CompilerGeneratedAttribute]
public FieldDefinition get_ParentContextValues();
    [CompilerGeneratedAttribute]
private void set_ParentContextValues(FieldDefinition value);
    [CompilerGeneratedAttribute]
public object get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(object value);
    [CompilerGeneratedAttribute]
public ILProcessor get_IL();
    [CompilerGeneratedAttribute]
private void set_IL(ILProcessor value);
    [CompilerGeneratedAttribute]
public MethodBody get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(MethodBody value);
    [CompilerGeneratedAttribute]
public ModuleDefinition get_Module();
    [CompilerGeneratedAttribute]
private void set_Module(ModuleDefinition value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.ILProcessorExtensions : object {
    [ExtensionAttribute]
public static void Append(ILProcessor processor, IEnumerable`1<Instruction> instructions);
}
internal class Xamarin.Forms.Build.Tasks.ILRootNode : RootNode {
    [CompilerGeneratedAttribute]
private TypeReference <TypeReference>k__BackingField;
    public TypeReference TypeReference { get; private set; }
    public ILRootNode(XmlType xmlType, TypeReference typeReference, IXmlNamespaceResolver nsResolver);
    [CompilerGeneratedAttribute]
public TypeReference get_TypeReference();
    [CompilerGeneratedAttribute]
private void set_TypeReference(TypeReference value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.MethodBodyExtensions : object {
    [ExtensionAttribute]
public static void Optimize(MethodBody self);
    private static void ExpandMacro(Instruction instruction, OpCode opcode, object operand);
    [ExtensionAttribute]
private static void OptimizeLongs(MethodBody self);
    [ExtensionAttribute]
private static void OptimizeStLdLoc(MethodBody self);
    [ExtensionAttribute]
private static void RemoveUnusedLocals(MethodBody self);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.MethodDefinitionExtensions : object {
    [ExtensionAttribute]
public static bool MatchXArguments(MethodDefinition methodDef, ElementNode enode, TypeReference declaringTypeRef, ModuleDefinition module, ILContext context);
    [ExtensionAttribute]
public static TypeReference ResolveGenericReturnType(MethodDefinition self, TypeReference declaringTypeRef, ModuleDefinition module);
    [ExtensionAttribute]
public static bool HasCustomAttributes(MethodDefinition self, TypeReference attribute);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.MethodReferenceExtensions : object {
    [ExtensionAttribute]
public static MethodReference ResolveGenericParameters(MethodReference self, TypeReference declaringTypeRef, ModuleDefinition module);
    private static TypeReference ImportUnresolvedType(TypeReference type, ModuleDefinition module);
    [ExtensionAttribute]
public static void ImportTypes(MethodReference self, ModuleDefinition module);
    [ExtensionAttribute]
public static MethodReference MakeGeneric(MethodReference self, TypeReference declaringType, TypeReference[] arguments);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.ModuleDefinitionExtensions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<ValueTuple`2<ModuleDefinition, string>, TypeReference> TypeRefCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<ValueTuple`2<ModuleDefinition, string>, MethodReference> MethodRefCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<ValueTuple`2<ModuleDefinition, string>, FieldReference> FieldRefCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<ValueTuple`2<ModuleDefinition, ValueTuple`3<string, string, string>>, TypeDefinition> typeDefCache;
    private static ModuleDefinitionExtensions();
    [ExtensionAttribute]
public static TypeReference ImportReference(ModuleDefinition module, ValueTuple`3<string, string, string> type);
    [ExtensionAttribute]
public static TypeReference ImportReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, ValueTuple`3[] classArguments);
    [ExtensionAttribute]
public static TypeReference ImportArrayReference(ModuleDefinition module, ValueTuple`3<string, string, string> type);
    [ExtensionAttribute]
private static MethodReference ImportCtorReference(ModuleDefinition module, TypeReference type, TypeReference[] classArguments, Func`2<MethodDefinition, bool> predicate);
    [ExtensionAttribute]
public static MethodReference ImportCtorReference(ModuleDefinition module, TypeReference type, TypeReference[] parameterTypes);
    [ExtensionAttribute]
public static MethodReference ImportCtorReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, int paramCount);
    [ExtensionAttribute]
public static MethodReference ImportCtorReference(ModuleDefinition module, TypeReference type, int paramCount);
    [ExtensionAttribute]
public static MethodReference ImportCtorReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, int paramCount, ValueTuple`3[] classArguments);
    [ExtensionAttribute]
public static MethodReference ImportCtorReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, int paramCount, TypeReference[] classArguments);
    [ExtensionAttribute]
public static MethodReference ImportCtorReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, ValueTuple`3[] parameterTypes, ValueTuple`3[] classArguments);
    [ExtensionAttribute]
public static MethodReference ImportCtorReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, ValueTuple`3[] parameterTypes);
    [ExtensionAttribute]
private static MethodReference ImportPropertyGetterReference(ModuleDefinition module, TypeReference type, string propertyName, Func`2<PropertyDefinition, bool> predicate, bool flatten, bool caseSensitive);
    [ExtensionAttribute]
public static MethodReference ImportPropertyGetterReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, string propertyName, bool isStatic, bool flatten, bool caseSensitive);
    [ExtensionAttribute]
private static MethodReference ImportPropertySetterReference(ModuleDefinition module, TypeReference type, string propertyName, Func`2<PropertyDefinition, bool> predicate);
    [ExtensionAttribute]
public static MethodReference ImportPropertySetterReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, string propertyName, bool isStatic);
    [ExtensionAttribute]
private static MethodReference ImportMethodReference(ModuleDefinition module, TypeReference type, string methodName, Func`2<MethodDefinition, bool> predicate, TypeReference[] classArguments);
    [ExtensionAttribute]
public static MethodReference ImportMethodReference(ModuleDefinition module, TypeReference type, string methodName, TypeReference[] parameterTypes, TypeReference[] classArguments, bool isStatic);
    [ExtensionAttribute]
public static MethodReference ImportMethodReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, string methodName, ValueTuple`3[] parameterTypes, ValueTuple`3[] classArguments, bool isStatic);
    [ExtensionAttribute]
public static MethodReference ImportMethodReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, string methodName, int paramCount, ValueTuple`3[] classArguments, bool isStatic);
    [ExtensionAttribute]
private static FieldReference ImportFieldReference(ModuleDefinition module, TypeReference type, string fieldName, Func`2<FieldDefinition, bool> predicate, bool caseSensitive);
    [ExtensionAttribute]
public static FieldReference ImportFieldReference(ModuleDefinition module, ValueTuple`3<string, string, string> type, string fieldName, bool isStatic, bool caseSensitive);
    [ExtensionAttribute]
public static TypeDefinition GetTypeDefinition(ModuleDefinition module, ValueTuple`3<string, string, string> type);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.ModuleDefinitionExtensions/<Properties>d__26")]
[ExtensionAttribute]
private static IEnumerable`1<PropertyDefinition> Properties(TypeDefinition typedef, bool flatten);
    private static string SerializeTypeReference(TypeReference tr);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.NodeILExtensions : object {
    [ExtensionAttribute]
public static bool CanConvertValue(ValueNode node, ILContext context, TypeReference targetTypeRef, IEnumerable`1<ICustomAttributeProvider> attributeProviders);
    [ExtensionAttribute]
public static bool CanConvertValue(ValueNode node, ILContext context, FieldReference bpRef);
    [ExtensionAttribute]
public static bool CanConvertValue(ValueNode node, ILContext context, TypeReference targetTypeRef, TypeReference typeConverter);
    [ExtensionAttribute]
public static IEnumerable`1<Instruction> PushConvertedValue(ValueNode node, ILContext context, TypeReference targetTypeRef, IEnumerable`1<ICustomAttributeProvider> attributeProviders, IEnumerable`1<Instruction> pushServiceProvider, bool boxValueTypes, bool unboxValueTypes);
    [ExtensionAttribute]
public static IEnumerable`1<Instruction> PushConvertedValue(ValueNode node, ILContext context, FieldReference bpRef, IEnumerable`1<Instruction> pushServiceProvider, bool boxValueTypes, bool unboxValueTypes);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.NodeILExtensions/<PushConvertedValue>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<Instruction> PushConvertedValue(ValueNode node, ILContext context, TypeReference targetTypeRef, TypeReference typeConverter, IEnumerable`1<Instruction> pushServiceProvider, bool boxValueTypes, bool unboxValueTypes);
    private static Instruction PushParsedEnum(TypeReference enumRef, string value, IXmlLineInfo lineInfo);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.NodeILExtensions/<PushXmlLineInfo>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<Instruction> PushXmlLineInfo(INode node, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.NodeILExtensions/<PushParentObjectsArray>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<Instruction> PushParentObjectsArray(INode node, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.NodeILExtensions/<PushTargetProperty>d__9")]
private static IEnumerable`1<Instruction> PushTargetProperty(FieldReference bpRef, PropertyReference propertyRef, TypeReference declaringTypeReference, ModuleDefinition module);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.NodeILExtensions/<PushServiceProvider>d__10")]
[ExtensionAttribute]
public static IEnumerable`1<Instruction> PushServiceProvider(INode node, ILContext context, FieldReference bpRef, PropertyReference propertyRef, TypeReference declaringTypeReference);
}
internal class Xamarin.Forms.Build.Tasks.NullExtension : object {
    public sealed virtual IEnumerable`1<Instruction> ProvideValue(IElementNode node, ModuleDefinition module, ILContext context, TypeReference& typeRef);
}
[PreserveAttribute]
internal class Xamarin.Forms.Build.Tasks.PerformanceProvider : object {
    private Dictionary`2<string, Statistic> _Statistics;
    public Dictionary`2<string, Statistic> Statistics { get; }
    public Dictionary`2<string, Statistic> get_Statistics();
    public void Clear();
    public sealed virtual void Start(string reference, string tag, string path, string member);
    public sealed virtual void Stop(string reference, string tag, string path, string member);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.PerformanceProvider/<GetStats>d__7")]
public IEnumerable`1<string> GetStats();
    private static string ShortenPath(string path);
    private static string GetId(string tag, string path, string member);
    private Statistic GetStat(string id);
}
internal class Xamarin.Forms.Build.Tasks.SetFieldVisitor : object {
    [CompilerGeneratedAttribute]
private ILContext <Context>k__BackingField;
    public ILContext Context { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public SetFieldVisitor(ILContext context);
    [CompilerGeneratedAttribute]
public ILContext get_Context();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    private static bool IsXNameProperty(ValueNode node, INode parentNode);
}
internal class Xamarin.Forms.Build.Tasks.SetNamescopesAndRegisterNamesVisitor : object {
    [CompilerGeneratedAttribute]
private ILContext <Context>k__BackingField;
    private ILContext Context { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public SetNamescopesAndRegisterNamesVisitor(ILContext context);
    [CompilerGeneratedAttribute]
private ILContext get_Context();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    private static bool IsDataTemplate(INode node, INode parentNode);
    private static bool IsStyle(INode node, INode parentNode);
    private static bool IsVisualStateGroupList(ElementNode node);
    private static bool IsXNameProperty(ValueNode node, INode parentNode);
    private VariableDefinition GetOrCreateNameScope(ElementNode node);
    private VariableDefinition CreateNamescope();
    private void SetNameScope(ElementNode node, VariableDefinition ns);
    private void RegisterName(string str, VariableDefinition namescopeVarDef, IList`1<string> namesInNamescope, VariableDefinition element, INode node);
    private void SetStyleId(string str, VariableDefinition element);
}
internal class Xamarin.Forms.Build.Tasks.SetPropertiesVisitor : object {
    private static int dtcount;
    private static int typedBindingCount;
    private static IList`1<XmlName> skips;
    [CompilerGeneratedAttribute]
private ILContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnResourceDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleDefinition <Module>k__BackingField;
    private static Dictionary`2<VariableDefinition, IList`1<string>> resourceNamesInUse;
    public ILContext Context { get; }
    public bool StopOnResourceDictionary { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool VisitNodeOnDataTemplate { get; }
    private ModuleDefinition Module { get; }
    public SetPropertiesVisitor(ILContext context, bool stopOnResourceDictionary);
    private static SetPropertiesVisitor();
    [CompilerGeneratedAttribute]
public ILContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    [CompilerGeneratedAttribute]
private ModuleDefinition get_Module();
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    public static bool TryGetPropertyName(INode node, INode parentNode, XmlName& name);
    private static bool IsCollectionItem(INode node, INode parentNode);
    internal static string GetContentProperty(TypeReference typeRef);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<ProvideValue>d__29")]
public static IEnumerable`1<Instruction> ProvideValue(VariableDefinitionReference vardefref, ILContext context, ModuleDefinition module, ElementNode node, FieldReference bpRef, PropertyReference propertyRef, TypeReference propertyDeclaringTypeRef);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<CompileBindingPath>d__30")]
private static IEnumerable`1<Instruction> CompileBindingPath(ElementNode node, ILContext context, VariableDefinition bindingExt);
    private static IList`1<ValueTuple`3<PropertyDefinition, TypeReference, string>> ParsePath(string path, TypeReference tSourceRef, IXmlLineInfo lineInfo, ModuleDefinition module);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<DigProperties>d__32")]
private static IEnumerable`1<Instruction> DigProperties(IEnumerable`1<ValueTuple`3<PropertyDefinition, TypeReference, string>> properties, Dictionary`2<TypeReference, VariableDefinition> locs, Func`1<Instruction> fallback, IXmlLineInfo lineInfo, ModuleDefinition module);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<CompiledBindingGetGetter>d__33")]
private static IEnumerable`1<Instruction> CompiledBindingGetGetter(TypeReference tSourceRef, TypeReference tPropertyRef, IList`1<ValueTuple`3<PropertyDefinition, TypeReference, string>> properties, ElementNode node, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<CompiledBindingGetSetter>d__34")]
private static IEnumerable`1<Instruction> CompiledBindingGetSetter(TypeReference tSourceRef, TypeReference tPropertyRef, IList`1<ValueTuple`3<PropertyDefinition, TypeReference, string>> properties, ElementNode node, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<CompiledBindingGetHandlers>d__35")]
private static IEnumerable`1<Instruction> CompiledBindingGetHandlers(TypeReference tSourceRef, TypeReference tPropertyRef, IList`1<ValueTuple`3<PropertyDefinition, TypeReference, string>> properties, ElementNode node, ILContext context);
    public static IEnumerable`1<Instruction> SetPropertyValue(VariableDefinition parent, XmlName propertyName, INode valueNode, ILContext context, IXmlLineInfo iXmlLineInfo);
    public static IEnumerable`1<Instruction> GetPropertyValue(VariableDefinition parent, XmlName propertyName, ILContext context, IXmlLineInfo lineInfo, TypeReference& propertyType);
    private static FieldReference GetBindablePropertyReference(VariableDefinition parent, string namespaceURI, String& localName, Boolean& attached, ILContext context, IXmlLineInfo iXmlLineInfo);
    private static bool CanConnectEvent(VariableDefinition parent, string localName, INode valueNode, bool attached);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<ConnectEvent>d__40")]
private static IEnumerable`1<Instruction> ConnectEvent(VariableDefinition parent, string localName, INode valueNode, IXmlLineInfo iXmlLineInfo, ILContext context);
    private static bool CanSetDynamicResource(FieldReference bpRef, INode valueNode, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<SetDynamicResource>d__42")]
private static IEnumerable`1<Instruction> SetDynamicResource(VariableDefinition parent, FieldReference bpRef, IElementNode elementNode, IXmlLineInfo iXmlLineInfo, ILContext context);
    private static bool CanSetBinding(FieldReference bpRef, INode valueNode, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<SetBinding>d__44")]
private static IEnumerable`1<Instruction> SetBinding(VariableDefinition parent, FieldReference bpRef, IElementNode elementNode, IXmlLineInfo iXmlLineInfo, ILContext context);
    private static bool CanSetValue(FieldReference bpRef, bool attached, INode node, IXmlLineInfo iXmlLineInfo, ILContext context);
    private static bool CanGetValue(VariableDefinition parent, FieldReference bpRef, bool attached, IXmlLineInfo iXmlLineInfo, ILContext context, TypeReference& propertyType);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<SetValue>d__47")]
private static IEnumerable`1<Instruction> SetValue(VariableDefinition parent, FieldReference bpRef, INode node, IXmlLineInfo iXmlLineInfo, ILContext context);
    private static IEnumerable`1<Instruction> GetValue(VariableDefinition parent, FieldReference bpRef, IXmlLineInfo iXmlLineInfo, ILContext context, TypeReference& propertyType);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<GetValue>d__49")]
private static IEnumerable`1<Instruction> GetValue(VariableDefinition parent, FieldReference bpRef, IXmlLineInfo iXmlLineInfo, ILContext context);
    private static bool CanSet(VariableDefinition parent, string localName, INode node, ILContext context);
    private static bool CanGet(VariableDefinition parent, string localName, ILContext context, TypeReference& propertyType);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<Set>d__52")]
private static IEnumerable`1<Instruction> Set(VariableDefinition parent, string localName, INode node, IXmlLineInfo iXmlLineInfo, ILContext context);
    private static IEnumerable`1<Instruction> Get(VariableDefinition parent, string localName, IXmlLineInfo iXmlLineInfo, ILContext context, TypeReference& propertyType);
    private static bool CanAdd(VariableDefinition parent, XmlName propertyName, INode node, IXmlLineInfo lineInfo, ILContext context);
    private static bool CanAddToResourceDictionary(VariableDefinition parent, TypeReference collectionType, IElementNode node, IXmlLineInfo lineInfo, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<Add>d__57")]
private static IEnumerable`1<Instruction> Add(VariableDefinition parent, XmlName propertyName, INode node, IXmlLineInfo iXmlLineInfo, ILContext context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.SetPropertiesVisitor/<AddToResourceDictionary>d__58")]
private static IEnumerable`1<Instruction> AddToResourceDictionary(IElementNode node, IXmlLineInfo lineInfo, ILContext context);
    private static bool GetNameAndTypeRef(TypeReference& elementType, string namespaceURI, String& localname, ILContext context, IXmlLineInfo lineInfo);
    private static void SetDataTemplate(IElementNode parentNode, ElementNode node, ILContext parentContext, IXmlLineInfo xmlLineInfo);
    private bool TrySetRuntimeName(XmlName propertyName, VariableDefinition variableDefinition, ValueNode node);
}
internal class Xamarin.Forms.Build.Tasks.SetResourcesVisitor : object {
    [CompilerGeneratedAttribute]
private ILContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleDefinition <Module>k__BackingField;
    public ILContext Context { get; }
    private ModuleDefinition Module { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public SetResourcesVisitor(ILContext context);
    [CompilerGeneratedAttribute]
public ILContext get_Context();
    [CompilerGeneratedAttribute]
private ModuleDefinition get_Module();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    private bool IsResourceDictionary(IElementNode node);
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
}
internal class Xamarin.Forms.Build.Tasks.StaticExtension : object {
    public sealed virtual IEnumerable`1<Instruction> ProvideValue(IElementNode node, ModuleDefinition module, ILContext context, TypeReference& memberRef);
    public static FieldReference GetFieldReference(TypeReference typeRef, string fieldName, ModuleDefinition module);
    private static bool IsPublicOrVisibleInternal(FieldDefinition fd, ModuleDefinition module);
    public static PropertyDefinition GetPropertyDefinition(TypeReference typeRef, string propertyName, ModuleDefinition module);
    private static bool IsPublicOrVisibleInternal(MethodDefinition md, ModuleDefinition module);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.TypeDefinitionExtensions : object {
    [ExtensionAttribute]
public static MethodDefinition AddDefaultConstructor(TypeDefinition targetType);
    [ExtensionAttribute]
public static MethodDefinition AddDefaultConstructor(TypeDefinition targetType, TypeReference parentType);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.TypeDefinitionExtensions/<AllMethods>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<MethodDefinition, TypeReference>> AllMethods(TypeDefinition self);
}
internal class Xamarin.Forms.Build.Tasks.TypeExtension : object {
    public sealed virtual IEnumerable`1<Instruction> ProvideValue(IElementNode node, ModuleDefinition module, ILContext context, TypeReference& memberRef);
}
internal class Xamarin.Forms.Build.Tasks.TypeRefComparer : object {
    private static TypeRefComparer s_default;
    public static TypeRefComparer Default { get; }
    private static string GetAssembly(TypeReference typeRef);
    public sealed virtual bool Equals(TypeReference x, TypeReference y);
    public sealed virtual int GetHashCode(TypeReference obj);
    public static TypeRefComparer get_Default();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.TypeReferenceExtensions : object {
    private static String[] arrayInterfaces;
    private static String[] arrayGenericInterfaces;
    private static Dictionary`2<TypeReference, TypeDefinition> resolves;
    private static TypeReferenceExtensions();
    [ExtensionAttribute]
public static PropertyDefinition GetProperty(TypeReference typeRef, Func`2<PropertyDefinition, bool> predicate, TypeReference& declaringTypeRef);
    [ExtensionAttribute]
public static EventDefinition GetEvent(TypeReference typeRef, Func`2<EventDefinition, bool> predicate, TypeReference& declaringTypeRef);
    [ExtensionAttribute]
private static EventDefinition ResolveGenericEvent(EventDefinition eventDef, TypeReference declaringTypeRef);
    [ExtensionAttribute]
public static FieldDefinition GetField(TypeReference typeRef, Func`2<FieldDefinition, bool> predicate, TypeReference& declaringTypeRef);
    [ExtensionAttribute]
public static bool ImplementsInterface(TypeReference typeRef, TypeReference interface);
    [ExtensionAttribute]
public static bool ImplementsGenericInterface(TypeReference typeRef, string interface, GenericInstanceType& interfaceReference, IList`1& genericArguments);
    [ExtensionAttribute]
public static bool InheritsFromOrImplements(TypeReference typeRef, TypeReference baseClass);
    [ExtensionAttribute]
private static CustomAttribute GetCustomAttribute(TypeReference typeRef, TypeReference attribute);
    [ExtensionAttribute]
public static CustomAttribute GetCustomAttribute(TypeReference typeRef, ModuleDefinition module, ValueTuple`3<string, string, string> attributeType);
    [ExtensionAttribute]
[ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public static MethodDefinition GetMethod(TypeReference typeRef, Func`2<MethodDefinition, bool> predicate);
    [ExtensionAttribute]
[ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public static MethodDefinition GetMethod(TypeReference typeRef, Func`2<MethodDefinition, bool> predicate, TypeReference& declaringTypeRef);
    [ExtensionAttribute]
public static IEnumerable`1<Tuple`2<MethodDefinition, TypeReference>> GetMethods(TypeReference typeRef, Func`2<MethodDefinition, bool> predicate, ModuleDefinition module);
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.TypeReferenceExtensions/<GetMethods>d__14")]
[ExtensionAttribute]
public static IEnumerable`1<Tuple`2<MethodDefinition, TypeReference>> GetMethods(TypeReference typeRef, Func`3<MethodDefinition, TypeReference, bool> predicate, ModuleDefinition module);
    [ExtensionAttribute]
public static MethodReference GetImplicitOperatorTo(TypeReference fromType, TypeReference toType, ModuleDefinition module);
    [ExtensionAttribute]
public static TypeReference ResolveGenericParameters(TypeReference self, MethodReference declaringMethodReference);
    [ExtensionAttribute]
public static TypeReference ResolveGenericParameters(TypeReference self, TypeReference declaringTypeReference);
    [ExtensionAttribute]
public static GenericInstanceType ResolveGenericParameters(GenericInstanceType self, TypeReference declaringTypeReference);
    [ExtensionAttribute]
public static GenericInstanceType ResolveGenericParameters(GenericInstanceType self, GenericInstanceType declaringTypeReference);
    [ExtensionAttribute]
public static TypeDefinition ResolveCached(TypeReference typeReference);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.VariableDefinitionExtensions : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.VariableDefinitionExtensions/<LoadAs>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<Instruction> LoadAs(VariableDefinition self, TypeReference type, ModuleDefinition module);
}
internal class Xamarin.Forms.Build.Tasks.VariableDefinitionReference : object {
    [CompilerGeneratedAttribute]
private VariableDefinition <VariableDefinition>k__BackingField;
    public VariableDefinition VariableDefinition { get; public set; }
    public VariableDefinitionReference(VariableDefinition vardef);
    [CompilerGeneratedAttribute]
public VariableDefinition get_VariableDefinition();
    [CompilerGeneratedAttribute]
public void set_VariableDefinition(VariableDefinition value);
    public static VariableDefinition op_Implicit(VariableDefinitionReference vardefref);
}
internal class Xamarin.Forms.Build.Tasks.XamlCAssemblyResolver : DefaultAssemblyResolver {
    public void AddAssembly(string p);
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    private bool TryResolve(AssemblyNameReference assemblyNameReference, AssemblyDefinition& assembly);
    private static bool IsMscorlib(AssemblyNameReference name);
}
public class Xamarin.Forms.Build.Tasks.XamlCTask : XamlTask {
    private bool hasCompiledXamlResources;
    [CompilerGeneratedAttribute]
private bool <KeepXamlResources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimizeIL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputGeneratedILAsCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompileByDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceCompile>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyResolver <DefaultAssemblyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDefinition <InitCompForType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateOnly>k__BackingField;
    public bool KeepXamlResources { get; public set; }
    public bool OptimizeIL { get; public set; }
    [ObsoleteAttribute("OutputGeneratedILAsCode is obsolete as of version 2.3.4. This option is no longer available.")]
[EditorBrowsableAttribute("1")]
public bool OutputGeneratedILAsCode { get; public set; }
    public bool CompileByDefault { get; public set; }
    public bool ForceCompile { get; public set; }
    public IAssemblyResolver DefaultAssemblyResolver { get; public set; }
    internal string Type { get; internal set; }
    internal MethodDefinition InitCompForType { get; private set; }
    public bool ValidateOnly { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_KeepXamlResources();
    [CompilerGeneratedAttribute]
public void set_KeepXamlResources(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptimizeIL();
    [CompilerGeneratedAttribute]
public void set_OptimizeIL(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputGeneratedILAsCode();
    [CompilerGeneratedAttribute]
public void set_OutputGeneratedILAsCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompileByDefault();
    [CompilerGeneratedAttribute]
public void set_CompileByDefault(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceCompile();
    [CompilerGeneratedAttribute]
public void set_ForceCompile(bool value);
    [CompilerGeneratedAttribute]
public IAssemblyResolver get_DefaultAssemblyResolver();
    [CompilerGeneratedAttribute]
public void set_DefaultAssemblyResolver(IAssemblyResolver value);
    [CompilerGeneratedAttribute]
internal string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    [CompilerGeneratedAttribute]
internal MethodDefinition get_InitCompForType();
    [CompilerGeneratedAttribute]
private void set_InitCompForType(MethodDefinition value);
    [CompilerGeneratedAttribute]
public bool get_ValidateOnly();
    [CompilerGeneratedAttribute]
public void set_ValidateOnly(bool value);
    public virtual bool Execute(IList`1& thrownExceptions);
    private bool TryCoreCompile(MethodDefinition initComp, MethodDefinition initCompRuntime, ILRootNode rootnode, Exception& exception);
    internal static string GetPathForType(ModuleDefinition module, TypeReference type);
    internal static string GetResourceIdForPath(ModuleDefinition module, string path);
}
internal class Xamarin.Forms.Build.Tasks.XamlGenerator : object {
    private List`1<XmlnsDefinitionAttribute> _xmlnsDefinitions;
    private Dictionary`2<string, ModuleDefinition> _xmlnsModules;
    internal static CodeDomProvider Provider;
    [CompilerGeneratedAttribute]
private string <XamlFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootClrNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <References>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDefaultCtor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddXamlCompilationAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideFromIntellisense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XamlResourceIdOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CodeMemberField> <NamedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeTypeReference <BaseType>k__BackingField;
    private static Version version;
    public string XamlFile { get; }
    public string Language { get; }
    public string ResourceId { get; }
    public string TargetPath { get; }
    public string AssemblyName { get; }
    public string OutputFile { get; }
    public TaskLoggingHelper Logger { get; }
    public string RootClrNamespace { get; private set; }
    public string RootType { get; private set; }
    public string References { get; }
    private bool GenerateDefaultCtor { get; private set; }
    private bool AddXamlCompilationAttribute { get; private set; }
    private bool HideFromIntellisense { get; private set; }
    private bool XamlResourceIdOnly { get; private set; }
    internal IEnumerable`1<CodeMemberField> NamedFields { get; internal set; }
    internal CodeTypeReference BaseType { get; internal set; }
    private static CodeAttributeDeclaration GeneratedCodeAttrDecl { get; }
    public XamlGenerator(ITaskItem taskItem, string language, string assemblyName, string outputFile, string references, TaskLoggingHelper logger);
    public XamlGenerator(string xamlFile, string language, string resourceId, string targetPath, string assemblyName, string outputFile, string references, TaskLoggingHelper logger);
    private static XamlGenerator();
    [CompilerGeneratedAttribute]
public string get_XamlFile();
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_ResourceId();
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public TaskLoggingHelper get_Logger();
    [CompilerGeneratedAttribute]
public string get_RootClrNamespace();
    [CompilerGeneratedAttribute]
private void set_RootClrNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_RootType();
    [CompilerGeneratedAttribute]
private void set_RootType(string value);
    [CompilerGeneratedAttribute]
public string get_References();
    [CompilerGeneratedAttribute]
private bool get_GenerateDefaultCtor();
    [CompilerGeneratedAttribute]
private void set_GenerateDefaultCtor(bool value);
    [CompilerGeneratedAttribute]
private bool get_AddXamlCompilationAttribute();
    [CompilerGeneratedAttribute]
private void set_AddXamlCompilationAttribute(bool value);
    [CompilerGeneratedAttribute]
private bool get_HideFromIntellisense();
    [CompilerGeneratedAttribute]
private void set_HideFromIntellisense(bool value);
    [CompilerGeneratedAttribute]
private bool get_XamlResourceIdOnly();
    [CompilerGeneratedAttribute]
private void set_XamlResourceIdOnly(bool value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<CodeMemberField> get_NamedFields();
    [CompilerGeneratedAttribute]
internal void set_NamedFields(IEnumerable`1<CodeMemberField> value);
    [CompilerGeneratedAttribute]
internal CodeTypeReference get_BaseType();
    [CompilerGeneratedAttribute]
internal void set_BaseType(CodeTypeReference value);
    public bool Execute();
    internal bool ParseXaml(TextReader xaml);
    private static CodeAttributeDeclaration get_GeneratedCodeAttrDecl();
    private void GenerateCode();
    [IteratorStateMachineAttribute("Xamarin.Forms.Build.Tasks.XamlGenerator/<GetCodeMemberFields>d__68")]
private IEnumerable`1<CodeMemberField> GetCodeMemberFields(XmlNode root, XmlNamespaceManager nsmgr);
    private static bool GetXamlCompilationProcessingInstruction(XmlDocument xmlDoc);
    private CodeTypeReference GetType(XmlType xmlType, Func`2<string, string> getNamespaceOfPrefix);
    private static string GetClrNamespace(string namespaceuri);
    private static string GetAttributeValue(XmlNode node, string localName, String[] namespaceURIs);
    private void GatherXmlnsDefinitionAttributes();
    private bool AssemblyIsSystem(string name);
    private CodeTypeReference GetCustomNamespaceUrlType(XmlType xmlType);
    private void CleanupXmlnsAssemblyData();
    [CompilerGeneratedAttribute]
private TypeReference <GetCustomNamespaceUrlType>b__75_0(FallbackTypeInfo typeInfo);
}
public class Xamarin.Forms.Build.Tasks.XamlGTask : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <XamlFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <References>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] XamlFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] OutputFiles { get; public set; }
    public string Language { get; public set; }
    public string AssemblyName { get; public set; }
    public string References { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_XamlFiles();
    [CompilerGeneratedAttribute]
public void set_XamlFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputFiles();
    [CompilerGeneratedAttribute]
public void set_OutputFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_References();
    [CompilerGeneratedAttribute]
public void set_References(string value);
    public virtual bool Execute();
}
[LoadInSeparateAppDomainAttribute]
public abstract class Xamarin.Forms.Build.Tasks.XamlTask : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependencyPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferencePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugType>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <LoggingHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildEngine <BuildEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskHost <HostObject>k__BackingField;
    [RequiredAttribute]
public string Assembly { get; public set; }
    public string DependencyPaths { get; public set; }
    public string ReferencePath { get; public set; }
    [ObsoleteAttribute("this is no longer used")]
[EditorBrowsableAttribute("1")]
public int Verbosity { get; public set; }
    public bool DebugSymbols { get; public set; }
    public string DebugType { get; public set; }
    protected TaskLoggingHelper LoggingHelper { get; }
    public IBuildEngine BuildEngine { get; public set; }
    public ITaskHost HostObject { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_DependencyPaths();
    [CompilerGeneratedAttribute]
public void set_DependencyPaths(string value);
    [CompilerGeneratedAttribute]
public string get_ReferencePath();
    [CompilerGeneratedAttribute]
public void set_ReferencePath(string value);
    [CompilerGeneratedAttribute]
public int get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(int value);
    [CompilerGeneratedAttribute]
public bool get_DebugSymbols();
    [CompilerGeneratedAttribute]
public void set_DebugSymbols(bool value);
    [CompilerGeneratedAttribute]
public string get_DebugType();
    [CompilerGeneratedAttribute]
public void set_DebugType(string value);
    [CompilerGeneratedAttribute]
protected TaskLoggingHelper get_LoggingHelper();
    [CompilerGeneratedAttribute]
public sealed virtual IBuildEngine get_BuildEngine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildEngine(IBuildEngine value);
    [CompilerGeneratedAttribute]
public sealed virtual ITaskHost get_HostObject();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HostObject(ITaskHost value);
    public sealed virtual bool Execute();
    public abstract virtual bool Execute(IList`1& thrownExceptions);
    internal static ILRootNode ParseXaml(Stream stream, TypeReference typeReference);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Build.Tasks.XmlTypeExtensions : object {
    private static Dictionary`2<ModuleDefinition, IList`1<XmlnsDefinitionAttribute>> s_xmlnsDefinitions;
    private static object _nsLock;
    private static XmlTypeExtensions();
    private static IList`1<XmlnsDefinitionAttribute> GatherXmlnsDefinitionAttributes(ModuleDefinition module);
    public static TypeReference GetTypeReference(string xmlType, ModuleDefinition module, BaseNode node);
    public static TypeReference GetTypeReference(string namespaceURI, string typename, ModuleDefinition module, IXmlLineInfo xmlInfo);
    [ExtensionAttribute]
public static TypeReference GetTypeReference(XmlType xmlType, ModuleDefinition module, IXmlLineInfo xmlInfo);
    [ExtensionAttribute]
public static XmlnsDefinitionAttribute GetXmlnsDefinition(CustomAttribute ca, AssemblyDefinition asmDef);
}
internal class Xamarin.Forms.Core.XamlC.BindablePropertyConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.BindablePropertyConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
    public FieldReference GetBindablePropertyFieldReference(string value, ModuleDefinition module, BaseNode node);
    private static string FindTypeNameForVisualState(IElementNode parent, IXmlLineInfo lineInfo);
    public static FieldReference GetBindablePropertyFieldReference(TypeReference typeRef, string propertyName, ModuleDefinition module);
}
internal class Xamarin.Forms.Core.XamlC.BindingTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.BindingTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal class Xamarin.Forms.Core.XamlC.BoundsTypeConverter : object {
    public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.BoundsTypeConverter/<GenerateIL>d__1")]
private IEnumerable`1<Instruction> GenerateIL(double x, double y, double w, double h, ModuleDefinition module);
}
internal class Xamarin.Forms.Core.XamlC.ColorTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.ColorTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal class Xamarin.Forms.Core.XamlC.ConstraintTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.ConstraintTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal class Xamarin.Forms.Core.XamlC.IsCompiledTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.IsCompiledTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal class Xamarin.Forms.Core.XamlC.LayoutOptionsConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.LayoutOptionsConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal class Xamarin.Forms.Core.XamlC.ListStringTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.ListStringTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal class Xamarin.Forms.Core.XamlC.PassthroughValueProvider : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.PassthroughValueProvider/<ProvideValue>d__0")]
public sealed virtual IEnumerable`1<Instruction> ProvideValue(VariableDefinitionReference vardefref, ModuleDefinition module, BaseNode node, ILContext context);
}
internal class Xamarin.Forms.Core.XamlC.RDSourceTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.RDSourceTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
    internal static string GetPathForType(ModuleDefinition module, TypeReference type);
}
internal class Xamarin.Forms.Core.XamlC.RectangleTypeConverter : object {
    public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.RectangleTypeConverter/<GenerateIL>d__1")]
private IEnumerable`1<Instruction> GenerateIL(double x, double y, double w, double h, ModuleDefinition module);
}
internal class Xamarin.Forms.Core.XamlC.SetterValueProvider : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.SetterValueProvider/<ProvideValue>d__0")]
public sealed virtual IEnumerable`1<Instruction> ProvideValue(VariableDefinitionReference vardefref, ModuleDefinition module, BaseNode node, ILContext context);
    private static bool SetterValueIsCollection(FieldReference bindablePropertyReference, ModuleDefinition module, BaseNode node, ILContext context);
}
internal class Xamarin.Forms.Core.XamlC.StyleSheetProvider : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.StyleSheetProvider/<ProvideValue>d__0")]
public sealed virtual IEnumerable`1<Instruction> ProvideValue(VariableDefinitionReference vardefref, ModuleDefinition module, BaseNode node, ILContext context);
}
internal class Xamarin.Forms.Core.XamlC.ThicknessTypeConverter : object {
    public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.ThicknessTypeConverter/<GenerateIL>d__1")]
private IEnumerable`1<Instruction> GenerateIL(ModuleDefinition module, Double[] args);
}
internal class Xamarin.Forms.Core.XamlC.TypeTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.TypeTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal class Xamarin.Forms.Core.XamlC.UriTypeConverter : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Core.XamlC.UriTypeConverter/<ConvertFromString>d__0")]
public sealed virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal interface Xamarin.Forms.Xaml.ICompiledTypeConverter {
    public abstract virtual IEnumerable`1<Instruction> ConvertFromString(string value, ILContext context, BaseNode node);
}
internal interface Xamarin.Forms.Xaml.ICompiledValueProvider {
    public abstract virtual IEnumerable`1<Instruction> ProvideValue(VariableDefinitionReference vardefref, ModuleDefinition module, BaseNode node, ILContext context);
}
