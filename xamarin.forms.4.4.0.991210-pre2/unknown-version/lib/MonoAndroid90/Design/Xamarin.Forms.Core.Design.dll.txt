internal class ThisAssembly : object {
}
internal class Xamarin.Forms.Core.AttributeTableBuilder : AttributeTableBuilder {
    private void AddAttributesForTypes();
    private void AddTypeAttributes(Type type, Attribute[] attribs);
    private void AddMemberAttributes(Type type, string memberName, Attribute[] attribs);
    private void AddAssemblyAttributes(Assembly assembly, Attribute[] attribs);
}
internal class Xamarin.Forms.Core.Design.AnythingConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
internal class Xamarin.Forms.Core.Design.AttributeTableBuilder : AttributeTableBuilder {
}
internal class Xamarin.Forms.Core.Design.EnumConverter`1 : EnumConverter {
}
public class Xamarin.Forms.Core.Design.ItemsLayoutDesignTypeConverter : TypeConverter {
    [CompilerGeneratedAttribute]
private StandardValuesCollection <Values>k__BackingField;
    protected StandardValuesCollection Values { get; protected set; }
    [CompilerGeneratedAttribute]
protected StandardValuesCollection get_Values();
    [CompilerGeneratedAttribute]
protected void set_Values(StandardValuesCollection value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class Xamarin.Forms.Core.Design.KeyboardDesignTypeConverter : TypeConverter {
    [CompilerGeneratedAttribute]
private StandardValuesCollection <Values>k__BackingField;
    protected StandardValuesCollection Values { get; protected set; }
    [CompilerGeneratedAttribute]
protected StandardValuesCollection get_Values();
    [CompilerGeneratedAttribute]
protected void set_Values(StandardValuesCollection value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class Xamarin.Forms.Core.Design.NonExclusiveEnumConverter`1 : EnumConverter`1<T> {
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal class Xamarin.Forms.Core.Design.RegisterMetadata : object {
    public AttributeTable AttributeTable { get; }
    public sealed virtual AttributeTable get_AttributeTable();
}
public class Xamarin.Forms.Core.Design.VisualDesignTypeConverter : TypeConverter {
    [CompilerGeneratedAttribute]
private StandardValuesCollection <Values>k__BackingField;
    protected StandardValuesCollection Values { get; protected set; }
    [CompilerGeneratedAttribute]
protected StandardValuesCollection get_Values();
    [CompilerGeneratedAttribute]
protected void set_Values(StandardValuesCollection value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class Xamarin.Forms.Core.RegisterMetadata : object {
    private AttributeTable Microsoft.Windows.Design.Metadata.IProvideAttributeTable.AttributeTable { get; }
    private sealed virtual override AttributeTable Microsoft.Windows.Design.Metadata.IProvideAttributeTable.get_AttributeTable();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Design.ReflectionExtensions : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Design.ReflectionExtensions/<GetParts>d__0`1")]
private static IEnumerable`1<T> GetParts(Type type, Func`2<TypeInfo, IEnumerable`1<T>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<FieldInfo> GetFields(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
}
internal class Xamarin.Forms.Design.StructOptionsConverter`1 : TypeConverter {
    private static Lazy`1<String[]> StandardValues;
    private static StructOptionsConverter`1();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
