internal class ThisAssembly : object {
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportCellAttribute : HandlerAttribute {
    public ExportCellAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportImageSourceHandlerAttribute : HandlerAttribute {
    public ExportImageSourceHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportRendererAttribute : HandlerAttribute {
    [CompilerGeneratedAttribute]
private bool <Idiomatic>k__BackingField;
    internal bool Idiomatic { get; }
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals);
    public ExportRendererAttribute(Type handler, Type target);
    [CompilerGeneratedAttribute]
internal bool get_Idiomatic();
    public virtual bool ShouldRegister();
}
internal static class Xamarin.Forms.Flags : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.Forms : object {
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    private static IReadOnlyList`1<string> s_flags;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ViewInitializedEventArgs> ViewInitialized;
    public static bool IsInitialized { get; private set; }
    public static IReadOnlyList`1<string> Flags { get; }
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    public static void Init();
    [CompilerGeneratedAttribute]
public static void add_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [ExtensionAttribute]
internal static void SendViewInitialized(VisualElement self, NSView nativeView);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.AccessibilityExtensions : object {
    [ExtensionAttribute]
public static string SetAccessibilityHint(NSView Control, Element Element, string _defaultAccessibilityHint);
    [ExtensionAttribute]
public static string SetAccessibilityLabel(NSView Control, Element Element, string _defaultAccessibilityLabel);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsAccessibilityElement(NSView Control, Element Element, Nullable`1<bool> _defaultIsAccessibilityElement);
}
public class Xamarin.Forms.Platform.MacOS.ActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, NSProgressIndicator> {
    private static CIColorPolynomial s_currentColorFilter;
    private static NSColor s_currentColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateColor();
    private void UpdateIsRunning();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.AlignmentExtensions : object {
    [ExtensionAttribute]
internal static NSTextAlignment ToNativeTextAlignment(TextAlignment alignment, EffectiveFlowDirection flowDirection);
}
internal class Xamarin.Forms.Platform.MacOS.BoolEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; private set; }
    public BoolEventArgs(bool value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(bool value);
}
public class Xamarin.Forms.Platform.MacOS.BoxViewRenderer : ViewRenderer`2<BoxView, NSView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    private void SetCornerRadius(CornerRadius cornerRadius);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.ButtonExtensions : object {
    [ExtensionAttribute]
public static NSCellImagePosition ToNSCellImagePosition(Button control);
}
public class Xamarin.Forms.Platform.MacOS.ButtonRenderer : ViewRenderer`2<Button, NSButton> {
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnButtonActivated(object sender, EventArgs eventArgs);
    private void UpdateBackgroundVisibility();
    private void UpdateBorder();
    private void UpdateFont();
    private void UpdateImage();
    private void UpdateText();
    private void UpdatePadding();
    private void HandleButtonPressed();
    private void HandleButtonReleased();
    [CompilerGeneratedAttribute]
private void <UpdateImage>b__8_0(NSImage image);
}
internal class Xamarin.Forms.Platform.MacOS.CADisplayLinkTicker : Ticker {
    private BlockingCollection`1<Action> _queue;
    private CVDisplayLink _link;
    internal static CADisplayLinkTicker Default { get; }
    internal static CADisplayLinkTicker get_Default();
    public void Invoke(Action action);
    protected virtual void DisableTimer();
    protected virtual void EnableTimer();
    public CVReturn DisplayLinkOutputCallback(CVDisplayLink displayLink, CVTimeStamp& inNow, CVTimeStamp& inOutputTime, CVOptionFlags flagsIn, CVOptionFlags& flagsOut);
    private void StartThread();
    [CompilerGeneratedAttribute]
private void <DisplayLinkOutputCallback>b__8_0();
}
[RegisterAttribute("CarouselPageRenderer")]
public class Xamarin.Forms.Platform.MacOS.CarouselPageRenderer : NSPageController {
    private bool _appeared;
    private bool _disposed;
    private EventTracker _events;
    private VisualElementTracker _tracker;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page Page { get; }
    public nint SelectedIndex { get; public set; }
    public VisualElement Element { get; private set; }
    public NSView NativeView { get; }
    public NSViewController ViewController { get; }
    private CarouselPage Carousel { get; }
    public CarouselPageRenderer(IntPtr handle);
    private Page get_Page();
    public virtual nint get_SelectedIndex();
    public virtual void set_SelectedIndex(nint value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual NSView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual NSViewController get_ViewController();
    public virtual void ViewDidAppear();
    public virtual void ViewDidDisappear();
    protected virtual void Dispose(bool disposing);
    private void RaiseElementChanged(VisualElementChangedEventArgs e);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void ConfigureNSPageController();
    private CarouselPage get_Carousel();
    private void Init();
    private void UpdateSource();
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateBackground();
    private void UpdateCurrentPage(bool animated);
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__37_0(NSImage image);
}
internal class Xamarin.Forms.Platform.MacOS.CellNSView : NSView {
    private static NSColor s_defaultChildViewsBackground;
    private static CGColor s_defaultHeaderViewsBackground;
    private Cell _cell;
    private NSTableViewCellStyle _style;
    private NSView _contexActionsTrackingView;
    public Action`2<object, PropertyChangedEventArgs> PropertyChanged;
    [CompilerGeneratedAttribute]
private NSTextField <TextLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private NSTextField <DetailTextLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private NSImageView <ImageView>k__BackingField;
    [CompilerGeneratedAttribute]
private NSView <AccessoryView>k__BackingField;
    public NSTextField TextLabel { get; private set; }
    public NSTextField DetailTextLabel { get; private set; }
    public NSImageView ImageView { get; private set; }
    public NSView AccessoryView { get; private set; }
    public Element Element { get; }
    public Cell Cell { get; public set; }
    public CellNSView(NSTableViewCellStyle style);
    private static CellNSView();
    [CompilerGeneratedAttribute]
public NSTextField get_TextLabel();
    [CompilerGeneratedAttribute]
private void set_TextLabel(NSTextField value);
    [CompilerGeneratedAttribute]
public NSTextField get_DetailTextLabel();
    [CompilerGeneratedAttribute]
private void set_DetailTextLabel(NSTextField value);
    [CompilerGeneratedAttribute]
public NSImageView get_ImageView();
    [CompilerGeneratedAttribute]
private void set_ImageView(NSImageView value);
    [CompilerGeneratedAttribute]
public NSView get_AccessoryView();
    [CompilerGeneratedAttribute]
private void set_AccessoryView(NSView value);
    public virtual Element get_Element();
    public Cell get_Cell();
    public void set_Cell(Cell value);
    public void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void Layout();
    internal static NSView GetNativeCell(NSTableView tableView, Cell cell, string templateId, bool isHeader, bool isRecycle);
    private void CreateUI();
}
public class Xamarin.Forms.Platform.MacOS.CellRenderer : object {
    private static BindableProperty s_realCellProperty;
    private EventHandler _onForceUpdateSizeRequested;
    private static CellRenderer();
    public virtual NSView GetCell(Cell item, NSView reusableView, NSTableView tv);
    public virtual void SetAccessibility(NSView tableViewCell, Cell cell);
    protected void UpdateBackground(NSView tableViewCell, Cell cell);
    protected void WireUpForceUpdateSizeRequested(ICellController cell, NSView nativeCell, NSTableView tableView);
    internal virtual void UpdateBackgroundChild(Cell cell, NSColor backgroundColor);
    internal static NSView GetRealCell(BindableObject cell);
    internal static void SetRealCell(BindableObject cell, NSView renderer);
}
public class Xamarin.Forms.Platform.MacOS.CheckBoxRenderer : ViewRenderer`2<CheckBox, NSButton> {
    private bool _disposed;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void Dispose(bool disposing);
    private void OnControlActivated(object sender, EventArgs e);
    private void OnElementChecked(object sender, EventArgs e);
    private void UpdateState();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.ColorExtensions : object {
    internal static NSColor Black;
    internal static NSColor SeventyPercentGrey;
    private static ColorExtensions();
    [ExtensionAttribute]
public static CGColor ToCGColor(Color color);
    [ExtensionAttribute]
public static Color ToColor(NSColor color);
    [ExtensionAttribute]
public static NSColor ToNSColor(Color color);
    [ExtensionAttribute]
public static NSColor ToNSColor(Color color, Color defaultColor);
    [ExtensionAttribute]
public static NSColor ToNSColor(Color color, NSColor defaultColor);
}
internal class Xamarin.Forms.Platform.macOS.Controls.FormsBoxView : NSView {
    private NSColor _colorToRenderer;
    private nfloat _topLeft;
    private nfloat _topRight;
    private nfloat _bottomLeft;
    private nfloat _bottomRight;
    public virtual void DrawRect(CGRect dirtyRect);
    public void SetColor(NSColor color);
    public void SetCornerRadius(float topLeft, float topRight, float bottomLeft, float bottomRight);
}
internal class Xamarin.Forms.Platform.macOS.Controls.FormsNSSlider : NSSlider {
    private CGSize _fitSize;
    public virtual CGSize SizeThatFits(CGSize size);
}
internal class Xamarin.Forms.Platform.MacOS.CustomNSTableHeaderView : NSTableHeaderView {
    public NSAttributedString PageHeader { get; }
    public CustomNSTableHeaderView(double width, IVisualElementRenderer headerRenderer);
    public void Update(double width, IVisualElementRenderer headerRenderer);
    public virtual NSAttributedString get_PageHeader();
    public virtual void DrawRect(CGRect dirtyRect);
    public virtual void Layout();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.DateExtensions : object {
    [ExtensionAttribute]
public static DateTime ToDateTime(NSDate date);
    [ExtensionAttribute]
public static NSDate ToNSDate(DateTime date);
}
public class Xamarin.Forms.Platform.MacOS.DatePickerRenderer : ViewRenderer`2<DatePicker, NSDatePicker> {
    private NSDatePicker _picker;
    private NSColor _defaultTextColor;
    private NSColor _defaultBackgroundColor;
    private bool _disposed;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void SetBackgroundColor(Color color);
    private void ControlFocusChanged(object sender, BoolEventArgs e);
    private void HandleValueChanged(object sender, NSDatePickerValidatorEventArgs e);
    private void UpdateDateFromModel();
    private void UpdateFont();
    private void UpdateMaximumDate();
    private void UpdateMinimumDate();
    private void UpdateTextColor();
}
internal class Xamarin.Forms.Platform.MacOS.DefaultRenderer : VisualElementRenderer`1<VisualElement> {
}
internal class Xamarin.Forms.Platform.MacOS.Deserializer : object {
    private static string PropertyStoreFile;
    public sealed virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    public sealed virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.DisposeHelpers : object {
    [ExtensionAttribute]
internal static void DisposeModalAndChildRenderers(Element view);
    [ExtensionAttribute]
internal static void DisposeRendererAndChildren(IVisualElementRenderer rendererToRemove);
}
public class Xamarin.Forms.Platform.MacOS.EditorRenderer : ViewRenderer`2<Editor, NSTextField> {
    private static string NewLineSelector;
    private bool _disposed;
    private IEditorController ElementController { get; }
    private IEditorController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void Dispose(bool disposing);
    private void HandleChanged(object sender, EventArgs e);
    private void OnEditingEnded(object sender, EventArgs eventArgs);
    private void OnEditingBegan(object sender, EventArgs eventArgs);
    private void UpdateEditable();
    private void UpdateFont();
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateMaxLength();
    private void UpdateIsReadOnly();
}
internal static class Xamarin.Forms.Platform.MacOS.EffectUtilities : object {
    public static void RegisterEffectControlProvider(IEffectControlProvider self, IElementController oldElement, IElementController newElement);
}
public class Xamarin.Forms.Platform.MacOS.ElementChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TElement <NewElement>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <OldElement>k__BackingField;
    public TElement NewElement { get; private set; }
    public TElement OldElement { get; private set; }
    public ElementChangedEventArgs`1(TElement oldElement, TElement newElement);
    [CompilerGeneratedAttribute]
public TElement get_NewElement();
    [CompilerGeneratedAttribute]
private void set_NewElement(TElement value);
    [CompilerGeneratedAttribute]
public TElement get_OldElement();
    [CompilerGeneratedAttribute]
private void set_OldElement(TElement value);
}
public class Xamarin.Forms.Platform.MacOS.EntryCellRenderer : CellRenderer {
    private static Color s_defaultTextColor;
    private static EntryCellRenderer();
    public virtual NSView GetCell(Cell item, NSView reusableView, NSTableView tv);
    internal virtual void UpdateBackgroundChild(Cell cell, NSColor backgroundColor);
    private static void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void OnTextFieldTextChanged(object sender, EventArgs eventArgs);
    private static void UpdateHorizontalTextAlignment(CellNSView cell, EntryCell entryCell);
    private static void UpdateIsEnabled(CellNSView cell, EntryCell entryCell);
    private static void UpdateLabel(CellNSView cell, EntryCell entryCell);
    private static void UpdateLabelColor(CellNSView cell, EntryCell entryCell);
    private static void UpdatePlaceholder(CellNSView cell, EntryCell entryCell);
    private static void UpdateText(CellNSView cell, EntryCell entryCell);
}
public class Xamarin.Forms.Platform.MacOS.EntryRenderer : ViewRenderer`2<Entry, NSTextField> {
    private bool _disposed;
    private NSColor _defaultTextColor;
    private IElementController ElementController { get; }
    private IEntryController EntryController { get; }
    private IElementController get_ElementController();
    private IEntryController get_EntryController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void Dispose(bool disposing);
    private void CreateControl();
    private void ClearControl();
    private void UpdateControl();
    private void TextFieldFocusChanged(object sender, BoolEventArgs e);
    private void OnEditingBegan(object sender, EventArgs e);
    private void OnChanged(object sender, EventArgs eventArgs);
    private void OnEditingEnded(object sender, EventArgs e);
    private void OnCompleted(object sender, EventArgs e);
    private void UpdateAlignment();
    private void UpdateColor();
    private void UpdatePassword();
    private void UpdateFont();
    private void UpdatePlaceholder();
    protected virtual void SetAccessibilityLabel();
    private void UpdateText();
    private void UpdateMaxLength();
    private void UpdateIsReadOnly();
}
public class Xamarin.Forms.Platform.MacOS.EventTracker : object {
    private NotifyCollectionChangedEventHandler _collectionChangedHandler;
    private Dictionary`2<IGestureRecognizer, NSGestureRecognizer> _gestureRecognizers;
    private IVisualElementRenderer _renderer;
    private bool _disposed;
    private NSView _handler;
    private double _previousScale;
    private ObservableCollection`1<IGestureRecognizer> ElementGestureRecognizers { get; }
    public EventTracker(IVisualElementRenderer renderer);
    private ObservableCollection`1<IGestureRecognizer> get_ElementGestureRecognizers();
    public sealed virtual void Dispose();
    public void LoadEvents(NSView handler);
    private static IList`1<GestureElement> GetChildGestures(NSGestureRecognizer sender, WeakReference weakEventTracker, WeakReference weakRecognizer, EventTracker eventTracker, View view);
    private Action`1<NSClickGestureRecognizer> CreateRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer, ClickGestureRecognizer clickRecognizer);
    private NSGestureProbe CreateTapRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer);
    private Action`1<NSClickGestureRecognizer> CreateChildRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer);
    private NSGestureProbe CreateChildTapRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer);
    protected virtual NSGestureRecognizer GetNativeRecognizer(IGestureRecognizer recognizer);
    private NSGestureRecognizer CreateClickRecognizer(int buttonMask, int numberOfClicksRequired, Action`1<NSClickGestureRecognizer> returnAction);
    private NSPanGestureRecognizer CreatePanRecognizer(int numTouches, Action`1<NSPanGestureRecognizer> action);
    private NSMagnificationGestureRecognizer CreatePinchRecognizer(Action`1<NSMagnificationGestureRecognizer> action);
    private NSClickGestureRecognizer CreateTapRecognizer(int numTaps, NSGestureProbe action);
    private static bool ShouldRecognizeTapsTogether(NSGestureRecognizer gesture, NSGestureRecognizer other);
    private void LoadRecognizers();
    private void ModelGestureRecognizersOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <LoadRecognizers>b__22_0(IGestureRecognizer key);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.macOS.Extensions.NSMenuExtensions : object {
    [ExtensionAttribute]
public static NSMenu ToNSMenu(Menu menus, NSMenu nsMenu, Func`2<MenuItem, NSMenuItem> menuItemCreator);
    [ExtensionAttribute]
public static NSMenuItem ToNSMenuItem(MenuItem menuItem, int i, Func`2<MenuItem, NSMenuItem> menuItemCreator);
    [ExtensionAttribute]
public static void UpdateNSMenuItem(MenuItem item, NSMenuItem menuItem, String[] properties);
    private static void GetAccelerators(NSMenuItem nsMenuItem, MenuItem item);
}
public class Xamarin.Forms.Platform.MacOS.FileImageSourceHandler : object {
    public sealed virtual Task`1<NSImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
internal class Xamarin.Forms.Platform.MacOS.FlippedClipView : NSClipView {
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <ContentRenderer>k__BackingField;
    public bool IsFlipped { get; }
    public IVisualElementRenderer ContentRenderer { get; public set; }
    public virtual bool get_IsFlipped();
    [CompilerGeneratedAttribute]
public IVisualElementRenderer get_ContentRenderer();
    [CompilerGeneratedAttribute]
public void set_ContentRenderer(IVisualElementRenderer value);
    public virtual CGRect ConstrainBoundsRect(CGRect proposedBounds);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.FlowDirectionExtensions : object {
    [ExtensionAttribute]
internal static FlowDirection ToFlowDirection(NSApplicationLayoutDirection direction);
    [ExtensionAttribute]
internal static void UpdateFlowDirection(NSView view, IVisualElementController controller);
    [ExtensionAttribute]
internal static void UpdateFlowDirection(NSTextField control, IVisualElementController controller);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.FontExtensions : object {
    private static string DefaultFontName;
    private static Dictionary`2<ToNativeFontFontKey, NSFont> ToUiFont;
    private static FontExtensions();
    [ExtensionAttribute]
public static NSFont ToNSFont(Font self);
    [ExtensionAttribute]
internal static NSFont ToNSFont(IFontElement element);
    private static NSFont _ToNativeFont(string family, float size, FontAttributes attributes);
    [ExtensionAttribute]
internal static bool IsDefault(Span self);
    [ExtensionAttribute]
private static NSFont ToNativeFont(IFontElement element);
    [ExtensionAttribute]
private static NSFont ToNativeFont(Font self);
    private static NSFont ToNativeFont(string family, float size, FontAttributes attributes, Func`4<string, float, FontAttributes, NSFont> factory);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.FormattedStringExtensions : object {
    [ExtensionAttribute]
public static NSAttributedString ToAttributed(Span span, Font defaultFont, Color defaultForegroundColor);
    [ExtensionAttribute]
public static NSAttributedString ToAttributed(FormattedString formattedString, Font defaultFont, Color defaultForegroundColor);
    [ExtensionAttribute]
internal static NSAttributedString ToAttributed(Span span, BindableObject owner, Color defaultForegroundColor, TextAlignment textAlignment, double lineHeight);
    [ExtensionAttribute]
internal static NSAttributedString ToAttributed(FormattedString formattedString, BindableObject owner, Color defaultForegroundColor, TextAlignment textAlignment, double lineHeight);
}
public abstract class Xamarin.Forms.Platform.MacOS.FormsApplicationDelegate : NSApplicationDelegate {
    private Application _application;
    private bool _isSuspended;
    private static int _storyboardMainMenuCount;
    [CompilerGeneratedAttribute]
private Func`2<MenuItem, NSMenuItem> <NativeMenuItemCreator>k__BackingField;
    public Func`2<MenuItem, NSMenuItem> NativeMenuItemCreator { get; public set; }
    public NSWindow MainWindow { get; }
    [CompilerGeneratedAttribute]
public Func`2<MenuItem, NSMenuItem> get_NativeMenuItemCreator();
    [CompilerGeneratedAttribute]
public void set_NativeMenuItemCreator(Func`2<MenuItem, NSMenuItem> value);
    public abstract virtual NSWindow get_MainWindow();
    protected virtual void Dispose(bool disposing);
    protected void LoadApplication(Application application);
    public virtual void DidFinishLaunching(NSNotification notification);
    public virtual void DidBecomeActive(NSNotification notification);
    public virtual void DidResignActive(NSNotification notification);
    private void ApplicationOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetMainPage();
    private void UpdateMainPage();
    private void UpdateMainMenu();
    private void SetMainMenu(Menu mainMenu);
    private void MainMenuOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetupMainAppMenu(NSMenu nativeMenu);
    private static void ClearNSMenu(NSMenu menu);
}
internal class Xamarin.Forms.Platform.MacOS.FormsNSDatePicker : NSDatePicker {
    public EventHandler`1<BoolEventArgs> FocusChanged;
    public virtual bool ResignFirstResponder();
    public virtual bool BecomeFirstResponder();
}
internal class Xamarin.Forms.Platform.MacOS.FormsNSImageView : NSImageView {
    private bool _isOpaque;
    public bool IsOpaque { get; }
    public void SetIsOpaque(bool isOpaque);
    public virtual bool get_IsOpaque();
}
internal class Xamarin.Forms.Platform.MacOS.FormsPageControllerDelegate : NSPageControllerDelegate {
    private Func`2<NSObject, string> _getIdentifier;
    private Func`2<string, NSViewController> _getViewController;
    public FormsPageControllerDelegate(Func`2<NSObject, string> getIdentifier, Func`2<string, NSViewController> getViewController);
    public virtual NSViewController GetViewController(NSPageController pageController, string identifier);
    public virtual string GetIdentifier(NSPageController pv, NSObject obj);
}
public class Xamarin.Forms.Platform.MacOS.FrameRenderer : VisualElementRenderer`1<Frame> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Frame> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetupLayer();
}
public class Xamarin.Forms.Platform.MacOS.GetDesiredSizeDelegate : MulticastDelegate {
    public GetDesiredSizeDelegate(object object, IntPtr method);
    public virtual Nullable`1<SizeRequest> Invoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint, AsyncCallback callback, object object);
    public virtual Nullable`1<SizeRequest> EndInvoke(IAsyncResult result);
}
public interface Xamarin.Forms.Platform.MacOS.IImageSourceHandler {
    public abstract virtual Task`1<NSImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public interface Xamarin.Forms.Platform.MacOS.IImageVisualElementRenderer {
    public bool IsDisposed { get; }
    public abstract virtual void SetImage(NSImage image);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual NSImageView GetImage();
}
public class Xamarin.Forms.Platform.MacOS.ImageCellRenderer : TextCellRenderer {
    public virtual NSView GetCell(Cell item, NSView reusableView, NSTableView tv);
    protected virtual void HandlePropertyChanged(object sender, PropertyChangedEventArgs args);
    private static void SetImage(ImageCell cell, CellNSView target);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.ImageElementManager : object {
    public static void Init(IImageVisualElementRenderer renderer);
    public static void Dispose(IImageVisualElementRenderer renderer);
    private static void OnControlChanged(object sender, EventArgs e);
    private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public static void SetAspect(IImageVisualElementRenderer renderer, IImageElement imageElement);
    public static void SetOpacity(IImageVisualElementRenderer renderer, IImageElement imageElement);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageElementManager/<SetImage>d__7")]
public static Task SetImage(IImageVisualElementRenderer renderer, IImageElement imageElement, Image oldElement);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageElementManager/<GetNativeImageAsync>d__8")]
[ExtensionAttribute]
internal static Task`1<NSImage> GetNativeImageAsync(ImageSource source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IVisualElementRenderer renderer, BindableProperty imageSourceProperty, Action`1<NSImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageElementManager/<ApplyNativeImageAsync>d__10")]
[ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IVisualElementRenderer renderer, BindableObject bindable, BindableProperty imageSourceProperty, Action`1<NSImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageElementManager/<ApplyNativeImageAsync>d__11")]
[ExtensionAttribute]
internal static Task ApplyNativeImageAsync(BindableObject bindable, BindableProperty imageSourceProperty, Action`1<NSImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.ImageExtensions : object {
    [ExtensionAttribute]
public static NSString ToNSViewContentMode(Aspect aspect);
}
public class Xamarin.Forms.Platform.MacOS.ImageLoaderSourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageLoaderSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<NSImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.MacOS.ImageRenderer : ViewRenderer`2<Image, NSImageView> {
    private bool _isDisposed;
    private bool Xamarin.Forms.Platform.MacOS.IImageVisualElementRenderer.IsDisposed { get; }
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageRenderer/<OnElementChanged>d__3")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageRenderer/<OnElementPropertyChanged>d__4")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageRenderer/<TrySetImage>d__5")]
protected virtual Task TrySetImage(Image previous);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.ImageRenderer/<SetImage>d__6")]
protected Task SetImage(Image oldElement);
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IImageVisualElementRenderer.SetImage(NSImage image);
    private sealed virtual override bool Xamarin.Forms.Platform.MacOS.IImageVisualElementRenderer.get_IsDisposed();
    private sealed virtual override NSImageView Xamarin.Forms.Platform.MacOS.IImageVisualElementRenderer.GetImage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Image> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
public interface Xamarin.Forms.Platform.MacOS.ITabStop {
    public NSView TabStop { get; }
    public abstract virtual NSView get_TabStop();
}
public interface Xamarin.Forms.Platform.MacOS.IVisualElementRenderer {
    public VisualElement Element { get; }
    public NSView NativeView { get; }
    public NSViewController ViewController { get; }
    public abstract virtual VisualElement get_Element();
    public abstract virtual NSView get_NativeView();
    public abstract virtual NSViewController get_ViewController();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public abstract virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public abstract virtual void SetElement(VisualElement element);
    public abstract virtual void SetElementSize(Size size);
}
public interface Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer {
    public NSView Control { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanged(EventHandler value);
    public abstract virtual NSView get_Control();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.LabelExtensions : object {
    [ExtensionAttribute]
public static void RecalculateSpanPositions(NSTextField control, Label element);
    private static CGRect GetCharacterBounds(NSRange characterRange, NSLayoutManager layoutManager, NSTextContainer textContainer);
    [ExtensionAttribute]
private static double FindDefaultLineHeight(NSTextField control, int start, int length);
}
public class Xamarin.Forms.Platform.MacOS.LabelRenderer : ViewRenderer`2<Label, NSTextField> {
    private SizeRequest _perfectSize;
    private bool _perfectSizeValid;
    private FormattedString _formatted;
    private static HashSet`1<string> s_perfectSizeSet;
    private bool IsTextFormatted { get; }
    private static LabelRenderer();
    private bool get_IsTextFormatted();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void Layout();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual NSTextField CreateNativeControl();
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void UpdateTextDecorations();
    protected virtual void SetBackgroundColor(Color color);
    private void UpdateHorizontalTextAlignment();
    private void UpdateLineBreakMode();
    private void UpdateCharacterSpacing();
    private void UpdateText();
    private void UpdateTextPlainText();
    private void UpdateFormattedText();
    private void UpdateTextHtml();
    private void UpdateFont();
    private void UpdateTextColor();
    private void UpdateLayout();
    private void UpdateMaxLines();
    private void UpdatePadding();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.LayoutExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<View> children, NSView view, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
    [ExtensionAttribute]
public static View ToView(NSView view, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
}
internal class Xamarin.Forms.Platform.MacOS.LayoutRenderer : DefaultRenderer {
    private CGRect _bounds;
    public virtual void Layout();
}
public class Xamarin.Forms.Platform.MacOS.LayoutSubviewsDelegate : MulticastDelegate {
    public LayoutSubviewsDelegate(object object, IntPtr method);
    public virtual bool Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.MacOS.ListViewDataSource : NSTableViewSource {
    private IVisualElementRenderer _prototype;
    private static int DefaultItemTemplateId;
    private static int s_dataTemplateIncrementer;
    private static int s_sectionCount;
    private nfloat _defaultSectionHeight;
    private Dictionary`2<DataTemplate, int> _templateToId;
    private NSTableView _nsTableView;
    private ListView List;
    private bool _disposed;
    private bool _selectionFromNative;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, int> <Counts>k__BackingField;
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    public bool IsGroupingEnabled { get; }
    public Dictionary`2<int, int> Counts { get; public set; }
    public ListViewDataSource(ListViewDataSource source);
    public ListViewDataSource(ListView list, NSTableView tableView);
    private static ListViewDataSource();
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    public virtual bool get_IsGroupingEnabled();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, int> get_Counts();
    [CompilerGeneratedAttribute]
public void set_Counts(Dictionary`2<int, int> value);
    public void Update();
    public void OnRowClicked();
    public void OnItemSelected(object sender, SelectedItemChangedEventArgs eventArg);
    public virtual bool IsGroupRow(NSTableView tableView, nint row);
    public virtual bool ShouldSelectRow(NSTableView tableView, nint row);
    public virtual nfloat GetRowHeight(NSTableView tableView, nint row);
    public virtual nint GetRowCount(NSTableView tableView);
    public virtual NSView GetViewForItem(NSTableView tableView, NSTableColumn tableColumn, nint row);
    protected virtual void Dispose(bool disposing);
    protected virtual Cell GetCellForPath(NSIndexPath indexPath, bool isGroupHeader);
    private int TemplateIdForPath(NSIndexPath indexPath);
    private NSIndexPath GetPathFromRow(nint row, Cell& cell);
    private nfloat CalculateHeightForCell(NSTableView tableView, Cell cell);
    private void GetComputedIndexes(nint row, Int32& sectionIndex, Int32& itemIndexInSection, Boolean& isHeader);
}
public class Xamarin.Forms.Platform.MacOS.ListViewRenderer : ViewRenderer`2<ListView, NSView> {
    private bool _disposed;
    private NSTableView _table;
    private ListViewDataSource _dataSource;
    private IVisualElementRenderer _headerRenderer;
    private IVisualElementRenderer _footerRenderer;
    private Nullable`1<bool> _defaultHorizontalScrollVisibility;
    private Nullable`1<bool> _defaultVerticalScrollVisibility;
    public static int DefaultRowHeight;
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    public NSTableView NativeTableView { get; }
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    public NSTableView get_NativeTableView();
    public virtual void ViewWillDraw();
    protected virtual NSTableView CreateNSTableView(ListView list);
    protected virtual void Dispose(bool disposing);
    private void DisposeSubviews(NSView view);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ListView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnGroupedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateHeader();
    private void ClearHeader();
    private void UpdateItems(NotifyCollectionChangedEventArgs e, int section, bool resetWhenGrouped);
    private void UpdateRowHeight();
    private void UpdateIsRefreshing();
    private void UpdatePullToRefreshEnabled();
    private void UpdateSeparatorColor();
    private void UpdateSeparatorVisibility();
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateFooter();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
}
internal class Xamarin.Forms.Platform.macOS.MacDeviceInfo : DeviceInfo {
    private Size _pixelScreenSize;
    private Size _scaledScreenSize;
    private double _scalingFactor;
    public Size PixelScreenSize { get; }
    public Size ScaledScreenSize { get; }
    public double ScalingFactor { get; }
    public virtual Size get_PixelScreenSize();
    public virtual Size get_ScaledScreenSize();
    public virtual double get_ScalingFactor();
    private void UpdateScreenSize();
}
public class Xamarin.Forms.Platform.MacOS.MacOSOpenGLView : NSView {
}
public class Xamarin.Forms.Platform.MacOS.MasterDetailPageRenderer : NSSplitViewController {
    private bool _disposed;
    private EventTracker _events;
    private VisualElementTracker _tracker;
    private MasterDetailPage _masterDetailPage;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page Page { get; }
    protected MasterDetailPage MasterDetailPage { get; }
    public NSViewController ViewController { get; }
    public NSView NativeView { get; }
    public VisualElement Element { get; private set; }
    protected double MasterWidthPercentage { get; }
    private Page get_Page();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    protected MasterDetailPage get_MasterDetailPage();
    protected virtual void Dispose(bool disposing);
    public sealed virtual NSViewController get_ViewController();
    public sealed virtual NSView get_NativeView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    private void HandleElementChanged(VisualElementChangedEventArgs e);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected virtual double get_MasterWidthPercentage();
    public virtual void ViewWillAppear();
    public virtual CGRect GetEffectiveRect(NSSplitView splitView, CGRect proposedEffectiveRect, CGRect drawnRect, nint dividerIndex);
    private void UpdateChildrenLayout();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateIsPresented();
    private void UpdateControllers();
    private void ClearControllers();
    private void UpdateBackground();
    private void MasterController_WillDisappear(object sender, EventArgs e);
    private void MasterController_WillAppear(object sender, EventArgs e);
}
internal class Xamarin.Forms.Platform.MacOS.ModalPageTracker : object {
    private NSViewController _renderer;
    private List`1<Page> _modals;
    private bool _disposed;
    public List`1<Page> ModalStack { get; }
    public ModalPageTracker(NSViewController mainRenderer);
    public List`1<Page> get_ModalStack();
    public Task PushAsync(Page modal, bool animated);
    public Task`1<Page> PopAsync(bool animated);
    internal void LayoutSubviews();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void HandleChildRemoved(object sender, ElementEventArgs e);
    private Task PresentModalAsync(Page modal, bool animated);
    private Task`1<Page> HideModalAsync(Page modal, bool animated);
}
internal class Xamarin.Forms.Platform.MacOS.NativeToolbarGroup : object {
    [CompilerGeneratedAttribute]
private NSToolbarItemGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Items>k__BackingField;
    public NSToolbarItemGroup Group { get; }
    public List`1<Item> Items { get; }
    public NativeToolbarGroup(NSToolbarItemGroup itemGroup);
    [CompilerGeneratedAttribute]
public NSToolbarItemGroup get_Group();
    [CompilerGeneratedAttribute]
public List`1<Item> get_Items();
}
internal class Xamarin.Forms.Platform.MacOS.NativeToolbarTracker : NSToolbarDelegate {
    private static string ToolBarId;
    private string _defaultBackButtonTitle;
    private ToolbarTracker _toolbarTracker;
    private NSToolbar _toolbar;
    private NavigationPage _navigation;
    private bool _hasTabs;
    private static double BackButtonItemWidth;
    private static double ToolbarItemWidth;
    private static double ToolbarItemHeight;
    private static double ToolbarItemSpacing;
    private static double ToolbarHeight;
    private static double NavigationTitleMinSize;
    private static string NavigationGroupIdentifier;
    private static string TabbedGroupIdentifier;
    private static string ToolbarItemsGroupIdentifier;
    private static string TitleGroupIdentifier;
    private NativeToolbarGroup _navigationGroup;
    private NativeToolbarGroup _tabbedGroup;
    private NativeToolbarGroup _toolbarGroup;
    private NativeToolbarGroup _titleGroup;
    private NSView _nsToolbarItemViewer;
    public NavigationPage Navigation { get; public set; }
    protected bool HasTabs { get; }
    public NavigationPage get_Navigation();
    public void set_Navigation(NavigationPage value);
    public void TryHide(NavigationPage navPage);
    public virtual String[] AllowedItemIdentifiers(NSToolbar toolbar);
    public virtual String[] DefaultItemIdentifiers(NSToolbar toolbar);
    public virtual NSToolbarItem WillInsertItem(NSToolbar toolbar, string itemIdentifier, bool willBeInserted);
    protected virtual bool get_HasTabs();
    protected virtual NSToolbar ConfigureToolbar();
    internal void UpdateToolBar();
    internal void UpdateNavigationItems(bool forceShowBackButton);
    private void UpdateBarBackgroundColor();
    private void NavigationPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ToolbarTrackerOnCollectionChanged(object sender, EventArgs eventArgs);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.NativeToolbarTracker/<NavigateBackFrombackButton>d__37")]
private Task NavigateBackFrombackButton();
    private bool ShowBackButton(bool forceShowBackButton);
    private bool IsRootPage();
    private NSColor GetBackgroundColor();
    private NSColor GetTitleColor();
    private string GetCurrentPageTitle();
    private string GetPreviousPageTitle();
    private List`1<ToolbarItem> GetToolbarItems();
    private void UpdateTitle();
    private void UpdateToolbarItems();
    private void UpdateTabbedItems();
    private void UpdateGroup(NativeToolbarGroup group, IList`1<ToolbarItem> toolbarItems, double itemWidth, double itemSpacing);
    private void SetAccessibility(NSButton button, ToolbarItem element);
    private void ToolBarItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.NativeToolbarTracker/<<UpdateNavigationItems>b__33_0>d")]
[CompilerGeneratedAttribute]
private void <UpdateNavigationItems>b__33_0();
}
internal class Xamarin.Forms.Platform.MacOS.NativeValueConverterService : object {
    public sealed virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
internal class Xamarin.Forms.Platform.MacOS.NativeViewPropertyListener : NSObject {
    [CompilerGeneratedAttribute]
private string <TargetProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private string TargetProperty { get; private set; }
    public NativeViewPropertyListener(string targetProperty);
    [CompilerGeneratedAttribute]
private string get_TargetProperty();
    [CompilerGeneratedAttribute]
private void set_TargetProperty(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void ObserveValue(NSString keyPath, NSObject ofObject, NSDictionary change, IntPtr context);
}
public class Xamarin.Forms.Platform.MacOS.NativeViewWrapper : View {
    [CompilerGeneratedAttribute]
private GetDesiredSizeDelegate <GetDesiredSizeDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutSubviewsDelegate <LayoutSubViews>k__BackingField;
    [CompilerGeneratedAttribute]
private NSView <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private SizeThatFitsDelegate <SizeThatFitsDelegate>k__BackingField;
    public GetDesiredSizeDelegate GetDesiredSizeDelegate { get; }
    public LayoutSubviewsDelegate LayoutSubViews { get; public set; }
    public NSView NativeView { get; }
    public SizeThatFitsDelegate SizeThatFitsDelegate { get; public set; }
    public NativeViewWrapper(NSView nativeView, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
    [CompilerGeneratedAttribute]
public GetDesiredSizeDelegate get_GetDesiredSizeDelegate();
    [CompilerGeneratedAttribute]
public LayoutSubviewsDelegate get_LayoutSubViews();
    [CompilerGeneratedAttribute]
public void set_LayoutSubViews(LayoutSubviewsDelegate value);
    [CompilerGeneratedAttribute]
public NSView get_NativeView();
    [CompilerGeneratedAttribute]
public SizeThatFitsDelegate get_SizeThatFitsDelegate();
    [CompilerGeneratedAttribute]
public void set_SizeThatFitsDelegate(SizeThatFitsDelegate value);
    protected virtual void OnBindingContextChanged();
}
public class Xamarin.Forms.Platform.MacOS.NativeViewWrapperRenderer : ViewRenderer`2<NativeViewWrapper, NSView> {
    protected bool ManageNativeControlLifetime { get; }
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void Layout();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NativeViewWrapper> e);
    protected virtual bool get_ManageNativeControlLifetime();
}
internal class Xamarin.Forms.Platform.MacOS.NavigationChildPageWrapper : NSObject {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    public string Identifier { get; public set; }
    public Page Page { get; private set; }
    public NavigationChildPageWrapper(Page page);
    protected virtual void Dispose(bool disposing);
    private void PagePropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(Page value);
}
public class Xamarin.Forms.Platform.MacOS.NavigationPageRenderer : NSViewController {
    private bool _disposed;
    private bool _appeared;
    private EventTracker _events;
    private VisualElementTracker _tracker;
    private Stack`1<NavigationChildPageWrapper> _currentStack;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private NavigationPage NavigationPage { get; }
    public VisualElement Element { get; private set; }
    public NSViewController ViewController { get; }
    public NSView NativeView { get; }
    public NavigationPageRenderer(IntPtr handle);
    private NavigationPage get_NavigationPage();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual NSViewController get_ViewController();
    public sealed virtual NSView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public Task`1<bool> PopToRootAsync(Page page, bool animated);
    public Task`1<bool> PopViewAsync(Page page, bool animated);
    public Task`1<bool> PushPageAsync(Page page, bool animated);
    protected virtual void Dispose(bool disposing);
    public virtual void ViewDidDisappear();
    public virtual void ViewDidAppear();
    private void RaiseElementChanged(VisualElementChangedEventArgs e);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected virtual void ConfigurePageRenderer();
    protected virtual Task`1<bool> OnPopToRoot(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.NavigationPageRenderer/<OnPop>d__34")]
protected virtual Task`1<bool> OnPop(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.NavigationPageRenderer/<OnPush>d__35")]
protected virtual Task`1<bool> OnPush(Page page, bool animated);
    private void Init();
    private IVisualElementRenderer CreateViewControllerForPage(Page page);
    private void OnPopped(object sender, NavigationEventArgs e);
    private void OnPoppedToRoot(object sender, NavigationEventArgs e);
    private void InsertPageBefore(Page page, Page before);
    private void OnInsertPageBeforeRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopToRootRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPushRequested(object sender, NavigationRequestedEventArgs e);
    private void OnRemovedPageRequested(object sender, NavigationRequestedEventArgs e);
    private void RemovePage(Page page, bool removeFromStack);
    private NSViewControllerTransitionOptions ToViewControllerTransitionOptions(NavigationTransitionStyle transitionStyle);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.NavigationPageRenderer/<PopPageAsync>d__48")]
private Task`1<bool> PopPageAsync(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.NavigationPageRenderer/<AddPage>d__49")]
private Task`1<bool> AddPage(Page page, bool animated);
    private void HideView(NSViewController vc);
    private void ShowView(NSViewController vc);
    private void UpdateBackgroundColor();
    private void UpdateBarBackgroundColor();
    private void UpdateBarTextColor();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.NavigationPageRenderer/<<Init>b__36_0>d")]
[CompilerGeneratedAttribute]
private void <Init>b__36_0(Page p);
}
public static class Xamarin.Forms.Platform.MacOS.NSButtonExtensions : object {
    public static NSButton CreateButton(string text, Action activate);
    public static NSButton CreateButton(string text, NSImage image, Action activate);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.NSImageExtensions : object {
    [ExtensionAttribute]
public static NSImage ResizeTo(NSImage self, CGSize newSize);
}
internal class Xamarin.Forms.Platform.MacOS.NSPageContainer : NSObject {
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public Page Page { get; }
    public int Index { get; public set; }
    public NSPageContainer(Page element, int index);
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.NSScrollViewExtensions : object {
    [ExtensionAttribute]
public static Task ScrollToPositionAsync(NSScrollView scrollView, CGPoint point, bool animate, double duration);
}
internal enum Xamarin.Forms.Platform.MacOS.NSTableViewCellStyle : Enum {
    public int value__;
    public static NSTableViewCellStyle Default;
    public static NSTableViewCellStyle Value1;
    public static NSTableViewCellStyle Value2;
    public static NSTableViewCellStyle Subtitle;
    public static NSTableViewCellStyle Image;
    public static NSTableViewCellStyle ImageSubtitle;
    public static NSTableViewCellStyle Empty;
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.NSTableViewExtensions : object {
    [ExtensionAttribute]
public static NSTableView AsListViewLook(NSTableView self);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.NSTextFieldExtensions : object {
    public static NSTextField CreateLabel(string text);
    public static NSTextFieldCell CreateLabelCentered(string text);
    [ExtensionAttribute]
public static void CenterTextVertically(NSTextField self);
    [ExtensionAttribute]
public static void CenterTextVertically(NSTextField self, CGRect frame);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.MacOS.NSViewControllerExtensions : object {
    [ExtensionAttribute]
public static Task`1<T> HandleAsyncAnimation(NSViewController container, NSViewController fromViewController, NSViewController toViewController, NSViewControllerTransitionOptions transitionOption, Action animationFinishedCallback, T result);
}
internal class Xamarin.Forms.Platform.MacOS.OpenGLViewRenderer : ViewRenderer`2<OpenGLView, MacOSOpenGLView> {
    private CVDisplayLink _displayLink;
    public void Display(object sender, EventArgs eventArgs);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<OpenGLView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetupRenderLoop(bool oneShot);
}
internal class Xamarin.Forms.Platform.MacOS.PageControllerDelegate : NSPageControllerDelegate {
    public virtual string GetIdentifier(NSPageController pageController, NSObject targetObject);
    public virtual NSViewController GetViewController(NSPageController pageController, string identifier);
    public virtual void PrepareViewController(NSPageController pageController, NSViewController viewController, NSObject targetObject);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.PageExtensions : object {
    [ExtensionAttribute]
public static NSViewController CreateViewController(Page view);
}
public class Xamarin.Forms.Platform.MacOS.PageRenderer : NSViewController {
    private bool _init;
    private bool _appeared;
    private bool _disposed;
    private EventTracker _events;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page Page { get; }
    public VisualElement Element { get; private set; }
    public NSView NativeView { get; }
    public NSViewController ViewController { get; }
    private Page get_Page();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual NSView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual NSViewController get_ViewController();
    public virtual void ViewDidAppear();
    public virtual void ViewDidDisappear();
    public virtual void ViewWillAppear();
    protected virtual void Dispose(bool disposing);
    private void RaiseElementChanged(VisualElementChangedEventArgs e);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void SetAutomationId(string id);
    private void Init();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateBackground();
    private void UpdateTitle();
    private NSView GetNativeControl(VisualElement visualElement);
    private void UpdateTabOrder();
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__33_0(NSImage bgImage);
}
public class Xamarin.Forms.Platform.MacOS.PickerRenderer : ViewRenderer`2<Picker, NSPopUpButton> {
    private bool _disposed;
    private NSColor _defaultBackgroundColor;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    private void UpdateItems();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void Dispose(bool disposing);
    private void ComboBoxSelectionChanged(object sender, EventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void RowsCollectionChanged(object sender, EventArgs e);
    private void UpdateFont();
    private void UpdatePicker();
    private void UpdateTextColor();
}
public class Xamarin.Forms.Platform.MacOS.Platform : BindableObject {
    internal static BindableProperty RendererProperty;
    private PlatformRenderer _renderer;
    private bool _appeared;
    private bool _disposed;
    internal static NativeToolbarTracker NativeToolbarTracker;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    private Page Page { get; private set; }
    private Application TargetApplication { get; }
    internal NSViewController ViewController { get; }
    private static Platform();
    public static SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private Page get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(Page value);
    private Application get_TargetApplication();
    private sealed virtual override void System.IDisposable.Dispose();
    public static IVisualElementRenderer CreateRenderer(VisualElement element);
    public static IVisualElementRenderer GetRenderer(VisualElement bindable);
    public static void SetRenderer(VisualElement bindable, IVisualElementRenderer value);
    protected virtual void OnBindingContextChanged();
    internal NSViewController get_ViewController();
    internal void LayoutSubviews();
    internal void SetPage(Page newRoot);
    internal void DidAppear();
    internal void WillAppear();
    private static NSView GetExtraButton(ActionSheetArguments arguments);
    private void AddChild(VisualElement view);
    private void HandleChildRemoved(object sender, ElementEventArgs e);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Page sender, AlertArguments arguments);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(Page sender, ActionSheetArguments arguments);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.PlatformConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<macOS, T> OnThisPlatform(T element);
}
public abstract class Xamarin.Forms.Platform.MacOS.PlatformEffect : PlatformEffect`2<NSView, NSView> {
}
internal class Xamarin.Forms.Platform.MacOS.PlatformNavigation : object {
    private ModalPageTracker _modalTracker;
    private PlatformRenderer _platformRenderer;
    private bool _animateModals;
    private bool _disposed;
    public ModalPageTracker ModalPageTracker { get; }
    public IReadOnlyList`1<Page> ModalStack { get; }
    public IReadOnlyList`1<Page> NavigationStack { get; }
    public bool AnimateModalPages { get; public set; }
    public PlatformNavigation(PlatformRenderer mainRenderer);
    public ModalPageTracker get_ModalPageTracker();
    public sealed virtual IReadOnlyList`1<Page> get_ModalStack();
    public sealed virtual IReadOnlyList`1<Page> get_NavigationStack();
    public bool get_AnimateModalPages();
    public void set_AnimateModalPages(bool value);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal, bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Xamarin.Forms.Platform.MacOS.PlatformRenderer : NSViewController {
    private PlatformNavigation _platformNavigation;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    public Platform Platform { get; public set; }
    public PlatformNavigation Navigation { get; }
    internal PlatformRenderer(Platform platform);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Platform value);
    public PlatformNavigation get_Navigation();
    public virtual void ViewDidAppear();
    public virtual void ViewDidLayout();
    public virtual void ViewWillAppear();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.PointExtensions : object {
    [ExtensionAttribute]
public static Point ToPoint(CGPoint point);
    [ExtensionAttribute]
public static CGPoint ToPointF(Point point);
}
public class Xamarin.Forms.Platform.MacOS.ProgressBarRenderer : ViewRenderer`2<ProgressBar, NSProgressIndicator> {
    private static CIColorPolynomial s_currentColorFilter;
    private static NSColor s_currentColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateProgressColor();
    protected virtual void SetBackgroundColor(Color color);
    private void UpdateProgress();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.RectangleExtensions : object {
    [ExtensionAttribute]
public static Rectangle ToRectangle(CGRect rect);
    [ExtensionAttribute]
public static CGRect ToRectangleF(Rectangle rect);
}
public class Xamarin.Forms.Platform.MacOS.RendererPool : object {
    private Dictionary`2<Type, Stack`1<IVisualElementRenderer>> _freeRenderers;
    private VisualElement _oldElement;
    private IVisualElementRenderer _parent;
    public RendererPool(IVisualElementRenderer renderer, VisualElement oldElement);
    public IVisualElementRenderer GetFreeRenderer(VisualElement view);
    public void UpdateNewElement(VisualElement newElement);
    private void ClearRenderers(IVisualElementRenderer renderer);
    private void FillChildrenWithRenderers(VisualElement element);
    private void PushRenderer(IVisualElementRenderer renderer);
    private void UpdateRenderers(Element newElement);
}
internal class Xamarin.Forms.Platform.MacOS.ResourcesProvider : object {
    private ResourceDictionary _dictionary;
    public sealed virtual IResourceDictionary GetSystemResources();
    private void UpdateStyles();
}
public class Xamarin.Forms.Platform.MacOS.ScrollViewRenderer : NSScrollView {
    private EventTracker _events;
    private VisualElementTracker _tracker;
    private ScrollToRequestedEventArgs _requestedScroll;
    private IVisualElementRenderer _contentRenderer;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private ScrollView ScrollView { get; }
    public VisualElement Element { get; private set; }
    public NSView NativeView { get; }
    public NSViewController ViewController { get; }
    private ScrollView get_ScrollView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual NSView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual NSViewController get_ViewController();
    public virtual void Layout();
    protected virtual void Dispose(bool disposing);
    private void RaiseElementChanged(VisualElementChangedEventArgs e);
    private void PackContent();
    private void LayoutSubviews();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateOrientation();
    private void OnNativeControlUpdated(object sender, EventArgs eventArgs);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateBackgroundColor();
    private void UpdateContentSize();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    private bool ResetNativeNonScroll();
    [ExportAttribute("UpdateScrollPosition")]
private void UpdateScrollPosition();
    private void ClearContentRenderer();
}
internal class Xamarin.Forms.Platform.MacOS.ScrollViewScrollChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CGPoint <CurrentScrollPoint>k__BackingField;
    public CGPoint CurrentScrollPoint { get; public set; }
    [CompilerGeneratedAttribute]
public CGPoint get_CurrentScrollPoint();
    [CompilerGeneratedAttribute]
public void set_CurrentScrollPoint(CGPoint value);
}
public class Xamarin.Forms.Platform.MacOS.SearchBarRenderer : ViewRenderer`2<SearchBar, NSSearchField> {
    private NSColor _defaultTextColor;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SearchBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    private void OnCancelClicked(object sender, EventArgs args);
    private void OnEditingEnded(object sender, EventArgs e);
    private void OnEditingStarted(object sender, EventArgs e);
    private void OnSearchButtonClicked(object sender, EventArgs e);
    private void OnTextChanged(object sender, EventArgs a);
    private void UpdateAlignment();
    private void UpdateCancelButton();
    private void UpdateFont();
    private void UpdateIsEnabled();
    private void UpdatePlaceholder();
    private void UpdateText();
    private void UpdateTextColor();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.SizeExtensions : object {
    [ExtensionAttribute]
public static CGSize ToSizeF(Size size);
}
public class Xamarin.Forms.Platform.MacOS.SizeThatFitsDelegate : MulticastDelegate {
    public SizeThatFitsDelegate(object object, IntPtr method);
    public virtual Nullable`1<CGSize> Invoke(CGSize size);
    public virtual IAsyncResult BeginInvoke(CGSize size, AsyncCallback callback, object object);
    public virtual Nullable`1<CGSize> EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.MacOS.SliderRenderer : ViewRenderer`2<Slider, NSSlider> {
    private bool _disposed;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void OnControlActivated(object sender, EventArgs eventArgs);
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void UpdateValue();
}
public class Xamarin.Forms.Platform.MacOS.StepperRenderer : ViewRenderer`2<Stepper, NSStepper> {
    private bool _disposed;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void OnControlActivated(object sender, EventArgs e);
    private void UpdateIncrement();
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void UpdateValue();
}
public class Xamarin.Forms.Platform.MacOS.StreamImagesourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.StreamImagesourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<NSImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.MacOS.SwitchCellRenderer : CellRenderer {
    public virtual NSView GetCell(Cell item, NSView reusableView, NSTableView tv);
    private static void UpdateIsEnabled(CellNSView cell, SwitchCell switchCell);
    private void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnSwitchValueChanged(object sender, EventArgs eventArgs);
}
public class Xamarin.Forms.Platform.MacOS.SwitchRenderer : ViewRenderer`2<Switch, NSButton> {
    private bool _disposed;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    protected virtual void Dispose(bool disposing);
    private void OnControlActivated(object sender, EventArgs e);
    private void OnElementToggled(object sender, EventArgs e);
    private void UpdateState();
}
public class Xamarin.Forms.Platform.MacOS.TabbedPageRenderer : NSTabViewController {
    private static float DefaultImageSizeSegmentedButton;
    private static int TabHolderHeight;
    private bool _disposed;
    private bool _updatingControllers;
    private bool _barBackgroundColorWasSet;
    private bool _barTextColorWasSet;
    private bool _defaultBarTextColorSet;
    private bool _defaultBarColorSet;
    private VisualElementTracker _tracker;
    private bool _loaded;
    private Size _queuedSize;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    public VisualElement Element { get; private set; }
    public NSView NativeView { get; }
    private Page Page { get; }
    public NSViewController ViewController { get; }
    public nint SelectedTabViewItemIndex { get; public set; }
    protected TabbedPage Tabbed { get; }
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual NSView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    private Page get_Page();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual NSViewController get_ViewController();
    public virtual void ViewWillLayout();
    public virtual nint get_SelectedTabViewItemIndex();
    public virtual void set_SelectedTabViewItemIndex(nint value);
    public virtual void ViewDidAppear();
    public virtual void ViewDidDisappear();
    protected virtual void Dispose(bool disposing);
    protected virtual void ConfigureTabView();
    private void RaiseElementChanged(VisualElementChangedEventArgs e);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected virtual NSTabViewItem GetTabViewItem(Page page, IVisualElementRenderer pageRenderer);
    protected virtual NSImage GetTabViewItemIcon(string imageName);
    protected virtual NSImage GetTabViewItemIconImageSource(NSImage image);
    protected virtual void UpdateNativeWidget();
    protected TabbedPage get_Tabbed();
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Reset();
    private void SetControllers();
    private void SetupPage(Page page, int index);
    private void TeardownPage(Page page);
    private void SetSelectedTabViewItem();
    private void UpdateChildrenOrderIndex();
    private void UpdateCurrentPage();
    private void UpdateBarBackgroundColor();
    private void UpdateBarTextColor();
    [CompilerGeneratedAttribute]
private void <SetElement>b__21_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__45_0(object o, int i, bool c);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__45_1(object o, int i);
}
internal class Xamarin.Forms.Platform.MacOS.TableViewDataSource : NSTableViewSource {
    private static int s_sectionCount;
    private static string HeaderIdentifier;
    private static string ItemIdentifier;
    private NSTableView _nsTableView;
    private TableView _tableView;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private bool <AutomaticallyDeselect>k__BackingField;
    public bool AutomaticallyDeselect { get; public set; }
    public TableViewDataSource(TableViewRenderer tableViewRenderer);
    [CompilerGeneratedAttribute]
public bool get_AutomaticallyDeselect();
    [CompilerGeneratedAttribute]
public void set_AutomaticallyDeselect(bool value);
    public virtual void SelectionDidChange(NSNotification notification);
    public virtual nint GetRowCount(NSTableView tableView);
    public virtual bool ShouldSelectRow(NSTableView tableView, nint row);
    public virtual NSView GetViewForItem(NSTableView tableView, NSTableColumn tableColumn, nint row);
    protected virtual void Dispose(bool disposing);
    private void GetComputedIndexes(nint row, Int32& sectionIndex, Int32& itemIndexInSection, Boolean& isHeader);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.MacOS.TableViewRenderer : ViewRenderer`2<TableView, NSView> {
    private static int DefaultRowHeight;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private NSTableView <TableView>k__BackingField;
    internal NSTableView TableView { get; internal set; }
    [CompilerGeneratedAttribute]
internal NSTableView get_TableView();
    [CompilerGeneratedAttribute]
internal void set_TableView(NSTableView value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual void Dispose(bool disposing);
    protected virtual NSTableView CreateNSTableView(TableView list);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetSource();
    private void UpdateBackgroundView();
    private void UpdateRowHeight();
}
public class Xamarin.Forms.Platform.MacOS.TextCellRenderer : CellRenderer {
    private static Color s_defaultDetailColor;
    private static Color s_defaultTextColor;
    private static TextCellRenderer();
    public virtual NSView GetCell(Cell item, NSView reusableView, NSTableView tv);
    protected virtual void HandlePropertyChanged(object sender, PropertyChangedEventArgs args);
    private static void UpdateIsEnabled(CellNSView cell, TextCell entryCell);
}
public class Xamarin.Forms.Platform.MacOS.TimePickerRenderer : ViewRenderer`2<TimePicker, NSDatePicker> {
    private NSColor _defaultTextColor;
    private NSColor _defaultBackgroundColor;
    private bool _disposed;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void SetBackgroundColor(Color color);
    private void ControlFocusChanged(object sender, BoolEventArgs e);
    private void HandleValueChanged(object sender, NSDatePickerValidatorEventArgs e);
    private void UpdateFont();
    private void UpdateTime();
    private void UpdateTextColor();
}
internal class Xamarin.Forms.Platform.MacOS.TrackingClickNSView : NSView {
    public virtual void RightMouseDown(NSEvent theEvent);
    private void HandleContextActions(NSEvent theEvent);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.MacOS.UIViewExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<NSView> Descendants(NSView self);
    [ExtensionAttribute]
public static SizeRequest GetSizeRequest(NSView self, double widthConstraint, double heightConstraint, double minimumWidth, double minimumHeight);
    [ExtensionAttribute]
public static void SetBinding(NSView view, string propertyName, BindingBase bindingBase, string updateSourceEventName);
    [ExtensionAttribute]
public static void SetBinding(NSView self, BindableProperty targetProperty, BindingBase binding);
    [ExtensionAttribute]
public static void SetValue(NSView target, BindableProperty targetProperty, object value);
    [ExtensionAttribute]
public static void SetBindingContext(NSView target, object bindingContext, Func`2<NSView, IEnumerable`1<NSView>> getChildren);
    [ExtensionAttribute]
internal static void TransferbindablePropertiesToWrapper(NSView target, View wrapper);
    [ExtensionAttribute]
internal static T FindDescendantView(NSView view);
}
internal class Xamarin.Forms.Platform.MacOS.UnEvenTableViewModelRenderer : TableViewDataSource {
    public UnEvenTableViewModelRenderer(TableViewRenderer model);
}
internal class Xamarin.Forms.Platform.MacOS.VerticallyCenteredTextFieldCell : NSTextFieldCell {
    private nfloat _yOffset;
    public VerticallyCenteredTextFieldCell(nfloat yOffset, NSFont font);
    public virtual CGRect DrawingRectForBounds(CGRect theRect);
}
internal class Xamarin.Forms.Platform.MacOS.ViewCellNSView : CellNSView {
    private WeakReference`1<IVisualElementRenderer> _rendererRef;
    private ViewCell _viewCell;
    public Element Element { get; }
    public ViewCell ViewCell { get; public set; }
    public virtual Element get_Element();
    public ViewCell get_ViewCell();
    public void set_ViewCell(ViewCell value);
    public virtual void Layout();
    protected virtual void Dispose(bool disposing);
    private void LayoutSubviews();
    private IVisualElementRenderer GetNewRenderer();
    private void UpdateCell(ViewCell cell);
}
public class Xamarin.Forms.Platform.MacOS.ViewCellRenderer : CellRenderer {
    public virtual NSView GetCell(Cell item, NSView reusableView, NSTableView tv);
    private static void UpdateIsEnabled(ViewCellNSView cell, ViewCell viewCell);
    private static void ViewCellPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public abstract class Xamarin.Forms.Platform.MacOS.ViewRenderer : ViewRenderer`2<View, NSView> {
}
public abstract class Xamarin.Forms.Platform.MacOS.ViewRenderer`2 : VisualElementRenderer`1<TView> {
    private string _defaultAccessibilityLabel;
    private string _defaultAccessibilityHint;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private CGColor _defaultColor;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> _elementPropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanging;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanged;
    [CompilerGeneratedAttribute]
private TNativeView <Control>k__BackingField;
    private protected bool IsElementOrControlEmpty { get; }
    public TNativeView Control { get; private set; }
    private NSView Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.Control { get; }
    private NSView Xamarin.Forms.Platform.MacOS.ITabStop.TabStop { get; }
    protected bool ManageNativeControlLifetime { get; }
    [CompilerGeneratedAttribute]
private void add__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__controlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanged(EventHandler value);
    private protected bool get_IsElementOrControlEmpty();
    protected virtual TNativeView CreateNativeControl();
    [CompilerGeneratedAttribute]
public TNativeView get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(TNativeView value);
    private sealed virtual override NSView Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.get_Control();
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.add_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.remove_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.add_ControlChanged(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualNativeElementRenderer.remove_ControlChanged(EventHandler value);
    private sealed virtual override NSView Xamarin.Forms.Platform.MacOS.ITabStop.get_TabStop();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void Layout();
    protected virtual bool get_ManageNativeControlLifetime();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAccessibilityHint();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetIsAccessibilityElement();
    protected virtual void SetAutomationId(string id);
    protected virtual void SetBackgroundColor(Color color);
    protected void SetNativeControl(TNativeView uiview);
    private void UpdateBackgroundColor();
    private void UpdateIsEnabled();
    private void UpdateFlowDirection();
    private void ViewOnFocusChangeRequested(object sender, FocusRequestArgs focusRequestArgs);
}
public class Xamarin.Forms.Platform.MacOS.VisualElementChangedEventArgs : ElementChangedEventArgs`1<VisualElement> {
    public VisualElementChangedEventArgs(VisualElement oldElement, VisualElement newElement);
}
public class Xamarin.Forms.Platform.MacOS.VisualElementPackager : object {
    private VisualElement _element;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    private IElementController ElementController { get; }
    protected IVisualElementRenderer Renderer { get; protected set; }
    public VisualElementPackager(IVisualElementRenderer renderer);
    private VisualElementPackager(IVisualElementRenderer renderer, VisualElement element, bool isHeadless);
    private IElementController get_ElementController();
    [CompilerGeneratedAttribute]
protected IVisualElementRenderer get_Renderer();
    [CompilerGeneratedAttribute]
protected void set_Renderer(IVisualElementRenderer value);
    public sealed virtual void Dispose();
    public void Load();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnChildAdded(VisualElement view);
    protected virtual void OnChildRemoved(VisualElement view);
    private void EnsureChildrenOrder();
    private void OnChildAdded(object sender, ElementEventArgs e);
    private void OnChildRemoved(object sender, ElementEventArgs e);
    private void OnRendererElementChanged(object sender, VisualElementChangedEventArgs args);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
    private void UpdateChildrenOrder(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.MacOS.VisualElementRenderer`1 : NSView {
    private NSColor _defaultColor;
    private List`1<EventHandler`1<VisualElementChangedEventArgs>> _elementChangedHandlers;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private string _defaultAccessibilityLabel;
    private string _defaultAccessibilityHint;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private EventTracker _events;
    private VisualElementRendererFlags _flags;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementChangedEventArgs`1<TElement>> ElementChanged;
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TabStop>k__BackingField;
    public TElement Element { get; private set; }
    protected bool AutoPackage { get; protected set; }
    protected bool AutoTrack { get; protected set; }
    private VisualElement Xamarin.Forms.Platform.MacOS.IVisualElementRenderer.Element { get; }
    public NSView NativeView { get; }
    public NSViewController ViewController { get; }
    protected int TabIndex { get; protected set; }
    protected bool TabStop { get; protected set; }
    [CompilerGeneratedAttribute]
public TElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TElement value);
    protected bool get_AutoPackage();
    protected void set_AutoPackage(bool value);
    protected bool get_AutoTrack();
    protected void set_AutoTrack(bool value);
    public static void RegisterEffect(Effect effect, NSView container, NSView control);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.MacOS.IVisualElementRenderer.get_Element();
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual NSView get_NativeView();
    protected internal virtual NSView GetControl();
    private sealed virtual override void Xamarin.Forms.Platform.MacOS.IVisualElementRenderer.SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public virtual NSViewController get_ViewController();
    [CompilerGeneratedAttribute]
public void add_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
public void remove_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
protected int get_TabIndex();
    [CompilerGeneratedAttribute]
protected void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
protected bool get_TabStop();
    [CompilerGeneratedAttribute]
protected void set_TabStop(bool value);
    protected void UpdateTabStop();
    protected void UpdateTabIndex();
    public NSView FocusSearch(bool forwardDirection);
    public virtual void KeyDown(NSEvent theEvent);
    public void SetElement(TElement element);
    public virtual void MouseDown(NSEvent theEvent);
    public virtual void RightMouseUp(NSEvent theEvent);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAccessibilityHint();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetIsAccessibilityElement();
    protected virtual void SetAutomationId(string id);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void UpdateNativeWidget();
    internal virtual void SendVisualElementInitialized(VisualElement element, NSView nativeView);
    private void UpdateClipToBounds();
    private void UpdateParentPageAccessibilityElements();
    private static bool IsOnViewCell(Element element);
    [CompilerGeneratedAttribute]
private void <SetElement>b__51_0(object sender, EventArgs e);
}
[FlagsAttribute]
public enum Xamarin.Forms.Platform.MacOS.VisualElementRendererFlags : Enum {
    public int value__;
    public static VisualElementRendererFlags Disposed;
    public static VisualElementRendererFlags AutoTrack;
    public static VisualElementRendererFlags AutoPackage;
}
public class Xamarin.Forms.Platform.MacOS.VisualElementTracker : object {
    private EventHandler`1<EventArg`1<VisualElement>> _batchCommittedHandler;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private EventHandler _sizeChangedEventHandler;
    private bool _disposed;
    private VisualElement _element;
    private bool _isInteractive;
    private Rectangle _lastBounds;
    private Rectangle _lastParentBounds;
    private CALayer _layer;
    private CGPoint _originalAnchor;
    private int _updateCount;
    [CompilerGeneratedAttribute]
private bool <TrackFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler NativeControlUpdated;
    private bool TrackFrame { get; private set; }
    private IVisualElementRenderer Renderer { get; private set; }
    public VisualElementTracker(IVisualElementRenderer renderer);
    public VisualElementTracker(IVisualElementRenderer renderer, bool trackFrame);
    [CompilerGeneratedAttribute]
private bool get_TrackFrame();
    [CompilerGeneratedAttribute]
private void set_TrackFrame(bool value);
    [CompilerGeneratedAttribute]
private IVisualElementRenderer get_Renderer();
    [CompilerGeneratedAttribute]
private void set_Renderer(IVisualElementRenderer value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public void add_NativeControlUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NativeControlUpdated(EventHandler value);
    protected virtual void Dispose(bool disposing);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleRedrawNeeded(object sender, EventArgs e);
    private void HandleSizeChanged(object sender, EventArgs e);
    private void OnRendererElementChanged(object s, VisualElementChangedEventArgs e);
    private void OnUpdateNativeControl(CALayer caLayer);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
    private void UpdateNativeControl();
}
public class Xamarin.Forms.Platform.MacOS.WebViewRenderer : ViewRenderer`2<WebView, WebView> {
    private bool _disposed;
    private bool _ignoreSourceChanges;
    private bool _sentNavigating;
    private WebNavigationEvent _lastBackForwardEvent;
    private WebNavigationEvent _lastEvent;
    private sealed virtual override void Xamarin.Forms.IWebViewDelegate.LoadHtml(string html, string baseUrl);
    private sealed virtual override void Xamarin.Forms.IWebViewDelegate.LoadUrl(string url);
    [ExportAttribute("webView:decidePolicyForNavigationAction:request:frame:decisionListener:")]
public void DecidePolicyForNavigation(WebView webView, NSDictionary actionInformation, NSUrlRequest request, WebFrame frame, IWebPolicyDecisionListener decisionToken);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<WebView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void Load();
    private void UpdateCanGoBackForward();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.MacOS.WebViewRenderer/<OnEvaluateJavaScriptRequested>d__14")]
private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
}
public class Xamarin.Forms.ViewInitializedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private NSView <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <View>k__BackingField;
    public NSView NativeView { get; internal set; }
    public VisualElement View { get; internal set; }
    [CompilerGeneratedAttribute]
public NSView get_NativeView();
    [CompilerGeneratedAttribute]
internal void set_NativeView(NSView value);
    [CompilerGeneratedAttribute]
public VisualElement get_View();
    [CompilerGeneratedAttribute]
internal void set_View(VisualElement value);
}
