internal class ThisAssembly : object {
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportCellAttribute : HandlerAttribute {
    public ExportCellAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportImageSourceHandlerAttribute : HandlerAttribute {
    public ExportImageSourceHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportRendererAttribute : HandlerAttribute {
    [CompilerGeneratedAttribute]
private UIUserInterfaceIdiom <Idiom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Idiomatic>k__BackingField;
    internal UIUserInterfaceIdiom Idiom { get; }
    internal bool Idiomatic { get; }
    public ExportRendererAttribute(Type handler, Type target, UIUserInterfaceIdiom idiom, Type[] supportedVisuals);
    public ExportRendererAttribute(Type handler, Type target, UIUserInterfaceIdiom idiom);
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals);
    public ExportRendererAttribute(Type handler, Type target);
    [CompilerGeneratedAttribute]
internal UIUserInterfaceIdiom get_Idiom();
    [CompilerGeneratedAttribute]
internal bool get_Idiomatic();
    public virtual bool ShouldRegister();
}
internal static class Xamarin.Forms.Flags : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.Forms : object {
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    private static Nullable`1<bool> s_isiOS9OrNewer;
    private static Nullable`1<bool> s_isiOS10OrNewer;
    private static Nullable`1<bool> s_isiOS11OrNewer;
    private static Nullable`1<bool> s_isiOS13OrNewer;
    private static Nullable`1<bool> s_respondsTosetNeedsUpdateOfHomeIndicatorAutoHidden;
    private static IReadOnlyList`1<string> s_flags;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ViewInitializedEventArgs> ViewInitialized;
    public static bool IsInitialized { get; private set; }
    internal static bool IsiOS9OrNewer { get; }
    internal static bool IsiOS10OrNewer { get; }
    internal static bool IsiOS11OrNewer { get; }
    internal static bool IsiOS13OrNewer { get; }
    internal static bool RespondsToSetNeedsUpdateOfHomeIndicatorAutoHidden { get; }
    public static IReadOnlyList`1<string> Flags { get; }
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    internal static bool get_IsiOS9OrNewer();
    internal static bool get_IsiOS10OrNewer();
    internal static bool get_IsiOS11OrNewer();
    internal static bool get_IsiOS13OrNewer();
    internal static bool get_RespondsToSetNeedsUpdateOfHomeIndicatorAutoHidden();
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    public static void Init();
    [CompilerGeneratedAttribute]
public static void add_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [ExtensionAttribute]
internal static void SendViewInitialized(VisualElement self, UIView nativeView);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PageExtensions : object {
    [ExtensionAttribute]
public static UIViewController CreateViewController(Page page);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.AccessibilityExtensions : object {
    [ExtensionAttribute]
public static string SetAccessibilityHint(UIView Control, Element Element, string _defaultAccessibilityHint);
    [ExtensionAttribute]
public static string SetAccessibilityLabel(UIView Control, Element Element, string _defaultAccessibilityLabel);
    [ExtensionAttribute]
public static string SetAccessibilityHint(UIBarItem Control, Element Element, string _defaultAccessibilityHint);
    [ExtensionAttribute]
public static string SetAccessibilityLabel(UIBarItem Control, Element Element, string _defaultAccessibilityLabel);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsAccessibilityElement(UIView Control, Element Element, Nullable`1<bool> _defaultIsAccessibilityElement);
}
public class Xamarin.Forms.Platform.iOS.ActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, UIActivityIndicatorView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateColor();
    private void UpdateIsRunning();
    internal void PreserveState();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.AlignmentExtensions : object {
    [ExtensionAttribute]
internal static UITextAlignment ToNativeTextAlignment(TextAlignment alignment, EffectiveFlowDirection flowDirection);
    [ExtensionAttribute]
internal static UIControlContentVerticalAlignment ToNativeTextAlignment(TextAlignment alignment);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.ArrayExtensions : object {
    [ExtensionAttribute]
public static T[] Insert(T[] self, int index, T item);
    [ExtensionAttribute]
public static T[] Remove(T[] self, T item);
    [ExtensionAttribute]
public static T[] RemoveAt(T[] self, int index);
}
internal static class Xamarin.Forms.Platform.iOS.BorderElementManager : object {
    private static nfloat _defaultCornerRadius;
    private static BorderElementManager();
    public static void Init(IVisualNativeElementRenderer renderer);
    public static void Dispose(IVisualNativeElementRenderer renderer);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    public static void UpdateBorder(IVisualNativeElementRenderer renderer, IBorderElement backgroundView);
    private static void OnControlChanged(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.iOS.BoxRenderer : VisualElementRenderer`1<BoxView> {
    private UIColor _colorToRenderer;
    private CGSize _previousSize;
    private nfloat _topLeft;
    private nfloat _topRight;
    private nfloat _bottomLeft;
    private nfloat _bottomRight;
    public virtual void Draw(CGRect rect);
    public virtual void LayoutSubviews();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    private void SetCornerRadius();
}
internal static class Xamarin.Forms.Platform.iOS.ButtonElementManager : object {
    private static UIControlState[] s_controlStates;
    private static ButtonElementManager();
    public static void Init(IVisualNativeElementRenderer renderer);
    private static void OnControlChanged(object sender, EventArgs e);
    private static void TouchUpInside(object sender, EventArgs eventArgs);
    private static void TouchDown(object sender, EventArgs eventArgs);
    public static void Dispose(IVisualNativeElementRenderer renderer);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void SetControlPropertiesFromProxy(UIButton control);
    internal static void OnButtonTouchDown(IButtonController element);
    internal static void OnButtonTouchUpInside(IButtonController element);
}
public class Xamarin.Forms.Platform.iOS.ButtonLayoutManager : object {
    private bool _disposed;
    private IButtonLayoutRenderer _renderer;
    private Button _element;
    private bool _preserveInitialPadding;
    private bool _spacingAdjustsPadding;
    private bool _borderAdjustsPadding;
    private bool _collapseHorizontalPadding;
    private Nullable`1<UIEdgeInsets> _defaultImageInsets;
    private Nullable`1<UIEdgeInsets> _defaultTitleInsets;
    private Nullable`1<UIEdgeInsets> _defaultContentInsets;
    private UIEdgeInsets _paddingAdjustments;
    private UIButton Control { get; }
    private IImageVisualElementRenderer ImageVisualElementRenderer { get; }
    public ButtonLayoutManager(IButtonLayoutRenderer renderer, bool preserveInitialPadding, bool spacingAdjustsPadding, bool borderAdjustsPadding, bool collapseHorizontalPadding);
    private UIButton get_Control();
    private IImageVisualElementRenderer get_ImageVisualElementRenderer();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public CGSize SizeThatFits(CGSize size, CGSize measured);
    public void Update();
    public void SetImage(UIImage image);
    private void OnElementChanged(object sender, ElementChangedEventArgs`1<Button> e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    internal void UpdateText();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ButtonLayoutManager/<UpdateImageAsync>d__24")]
private Task UpdateImageAsync();
    private void UpdatePadding();
    private UIEdgeInsets GetPaddingInsets(UIEdgeInsets adjustments);
    private void EnsureDefaultInsets();
    private void UpdateEdgeInsets();
}
public class Xamarin.Forms.Platform.iOS.ButtonRenderer : ViewRenderer`2<Button, UIButton> {
    private bool _isDisposed;
    private UIColor _buttonTextColorDefaultDisabled;
    private UIColor _buttonTextColorDefaultHighlighted;
    private UIColor _buttonTextColorDefaultNormal;
    private bool _useLegacyColorManagement;
    private ButtonLayoutManager _buttonLayoutManager;
    private nfloat _minimumButtonHeight;
    private static UIControlState[] s_controlStates;
    public bool IsDisposed { get; }
    private IImageVisualElementRenderer Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.ImageVisualElementRenderer { get; }
    private nfloat Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.MinimumHeight { get; }
    private static ButtonRenderer();
    public sealed virtual bool get_IsDisposed();
    private sealed virtual override IImageVisualElementRenderer Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.get_ImageVisualElementRenderer();
    private sealed virtual override nfloat Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.get_MinimumHeight();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual UIButton CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetAccessibilityLabel();
    private void SetControlPropertiesFromProxy();
    private void OnButtonTouchUpInside(object sender, EventArgs eventArgs);
    private void OnButtonTouchDown(object sender, EventArgs eventArgs);
    private void UpdateFont();
    public sealed virtual void SetImage(UIImage image);
    public sealed virtual UIImageView GetImage();
    private void UpdateTextColor();
}
internal class Xamarin.Forms.Platform.iOS.CADisplayLinkTicker : Ticker {
    private BlockingCollection`1<Action> _queue;
    private CADisplayLink _link;
    internal static CADisplayLinkTicker Default { get; }
    internal static CADisplayLinkTicker get_Default();
    public void Invoke(Action action);
    protected virtual void DisableTimer();
    protected virtual void EnableTimer();
    private void StartThread();
    [CompilerGeneratedAttribute]
private void <EnableTimer>b__7_0();
}
public class Xamarin.Forms.Platform.iOS.CarouselPageRenderer : UIViewController {
    private bool _appeared;
    private Dictionary`2<Page, UIView> _containerMap;
    private bool _disposed;
    private EventTracker _events;
    private bool _ignoreNativeScrolling;
    private UIScrollView _scrollView;
    private VisualElementTracker _tracker;
    private Page _previousPage;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private IElementController ElementController { get; }
    protected CarouselPage Carousel { get; }
    private IPageController PageController { get; }
    protected int SelectedIndex { get; protected set; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private IElementController get_ElementController();
    protected CarouselPage get_Carousel();
    private IPageController get_PageController();
    protected int get_SelectedIndex();
    protected void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void ViewDidUnload();
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void Clear();
    private void InsertPage(ContentPage page, int index);
    private void OnDecelerationEnded(object sender, EventArgs eventArgs);
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void PositionChildren();
    private void RemovePage(ContentPage page, int index);
    private void Reset();
    private void ScrollToPage(int index, bool animated);
    private void UpdateBackground();
    private void UpdateCurrentPage(bool animated);
    public void RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__44_0(object o, int i, bool c);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__44_1(object o, int i);
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__50_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.CarouselTemplatedCell : TemplatedCell {
    public static NSString ReuseId;
    private CGSize _constrain;
    [ExportAttribute("initWithFrame:")]
protected CarouselTemplatedCell(CGRect frame);
    private static CarouselTemplatedCell();
    public virtual void ConstrainTo(nfloat constant);
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
    protected virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
}
public class Xamarin.Forms.Platform.iOS.CarouselViewController : ItemsViewController`1<CarouselView> {
    private CarouselView _carouselView;
    private bool _viewInitialized;
    protected bool IsHorizontal { get; }
    public CarouselViewController(CarouselView itemsView, ItemsViewLayout layout);
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ViewWillLayoutSubviews();
    protected virtual bool get_IsHorizontal();
    protected virtual string DetermineCellReuseId();
    protected virtual void RegisterViewTypes();
    internal void TearDown();
    public virtual void DraggingStarted(UIScrollView scrollView);
    public virtual void DraggingEnded(UIScrollView scrollView, bool willDecelerate);
    internal void UpdateIsScrolling(bool isScrolling);
    private void UpdateInitialPosition();
}
public class Xamarin.Forms.Platform.iOS.CarouselViewDelegator : ItemsViewDelegator`2<CarouselView, CarouselViewController> {
    public CarouselViewDelegator(ItemsViewLayout itemsViewLayout, CarouselViewController itemsViewController);
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual void ScrollAnimationEnded(UIScrollView scrollView);
    public virtual void DecelerationEnded(UIScrollView scrollView);
    public virtual void DraggingStarted(UIScrollView scrollView);
    public virtual void DraggingEnded(UIScrollView scrollView, bool willDecelerate);
}
public class Xamarin.Forms.Platform.iOS.CarouselViewLayout : ItemsViewLayout {
    private CarouselView _carouselView;
    private ItemsLayout _itemsLayout;
    public CarouselViewLayout(ItemsLayout itemsLayout, ItemSizingStrategy itemSizingStrategy, CarouselView carouselView);
    public virtual bool ShouldInvalidateLayoutForBoundsChange(CGRect newBounds);
    public virtual void ConstrainTo(CGSize size);
    internal void UpdateConstraints(CGSize size);
    public virtual nfloat GetMinimumInteritemSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
}
public class Xamarin.Forms.Platform.iOS.CarouselViewRenderer : ItemsViewRenderer`2<CarouselView, CarouselViewController> {
    private CarouselView CarouselView { get; }
    private CarouselView get_CarouselView();
    protected virtual CarouselViewController CreateController(CarouselView newElement, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual ItemsViewLayout SelectLayout();
    protected virtual void SetUpNewElement(CarouselView newElement);
    protected virtual void TearDownOldElement(CarouselView oldElement);
    private void UpdateIsSwipeEnabled();
    private void UpdateIsBounceEnabled();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.CellExtensions : object {
    [ExtensionAttribute]
internal static NSIndexPath GetIndexPath(Cell self);
}
public class Xamarin.Forms.Platform.iOS.CellRenderer : object {
    private static BindableProperty RealCellProperty;
    private EventHandler _onForceUpdateSizeRequested;
    private PropertyChangedEventHandler _onPropertyChangedEventHandler;
    private UIColor _defaultCellBgColor;
    private static CellRenderer();
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    public virtual void SetAccessibility(UITableViewCell tableViewCell, Cell cell);
    public virtual void SetBackgroundColor(UITableViewCell tableViewCell, Cell cell, UIColor color);
    protected void UpdateBackground(UITableViewCell tableViewCell, Cell cell);
    protected void WireUpForceUpdateSizeRequested(ICellController cell, UITableViewCell nativeCell, UITableView tableView);
    private void Ncp_PropertyChanged(object sender, PropertyChangedEventArgs e);
    internal static UITableViewCell GetRealCell(BindableObject cell);
    internal static void SetRealCell(BindableObject cell, UITableViewCell renderer);
}
public class Xamarin.Forms.Platform.iOS.CellTableViewCell : UITableViewCell {
    private Cell _cell;
    public Action`2<object, PropertyChangedEventArgs> PropertyChanged;
    private bool _disposed;
    public Cell Cell { get; public set; }
    public Element Element { get; }
    public CellTableViewCell(UITableViewCellStyle style, string key);
    public Cell get_Cell();
    public void set_Cell(Cell value);
    public sealed virtual Element get_Element();
    public void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    internal static UITableViewCell GetNativeCell(UITableView tableView, Cell cell, bool recycleCells, string templateId);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.CheckBoxRenderer : CheckBoxRendererBase`1<FormsCheckBox> {
    protected virtual FormsCheckBox CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.CheckBoxRendererBase`1 : ViewRenderer`2<CheckBox, T> {
    private bool _disposed;
    protected float MinimumSize { get; }
    protected virtual float get_MinimumSize();
    public virtual void LayoutSubviews();
    protected virtual void SetAccessibilityLabel();
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected abstract virtual T CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void UpdateTintColor();
    private void OnControlCheckedChanged(object sender, EventArgs e);
    private void OnElementCheckedChanged(object sender, EventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
internal class Xamarin.Forms.Platform.iOS.ChildViewController : UIViewController {
    public virtual void ViewDidLayoutSubviews();
}
public class Xamarin.Forms.Platform.iOS.CollectionViewRenderer : GroupableItemsViewRenderer`2<GroupableItemsView, GroupableItemsViewController`1<GroupableItemsView>> {
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ColorExtensions : object {
    internal static UIColor Black;
    internal static UIColor SeventyPercentGrey;
    private static ColorExtensions();
    [ExtensionAttribute]
public static CGColor ToCGColor(Color color);
    public static UIColor FromPatternImageFromBundle(string bgImage);
    [ExtensionAttribute]
public static Color ToColor(UIColor color);
    [ExtensionAttribute]
public static UIColor ToUIColor(Color color);
    [ExtensionAttribute]
public static UIColor ToUIColor(Color color, Color defaultColor);
    [ExtensionAttribute]
public static UIColor ToUIColor(Color color, UIColor defaultColor);
}
internal class Xamarin.Forms.Platform.iOS.ContextActionsCell : UITableViewCell {
    public static string Key;
    private static UIImage DestructiveBackground;
    private static UIImage NormalBackground;
    private List`1<UIButton> _buttons;
    private List`1<MenuItem> _menuItems;
    private Cell _cell;
    private UIButton _moreButton;
    private UIScrollView _scroller;
    private UITableView _tableView;
    private bool _isDiposed;
    [CompilerGeneratedAttribute]
private UITableViewCell <ContentCell>k__BackingField;
    public UITableViewCell ContentCell { get; private set; }
    public bool IsOpen { get; }
    private ContextScrollViewDelegate ScrollDelegate { get; }
    private Element Xamarin.Forms.INativeElementView.Element { get; }
    private static ContextActionsCell();
    public ContextActionsCell(string templateId);
    [CompilerGeneratedAttribute]
public UITableViewCell get_ContentCell();
    [CompilerGeneratedAttribute]
private void set_ContentCell(UITableViewCell value);
    public bool get_IsOpen();
    private ContextScrollViewDelegate get_ScrollDelegate();
    private sealed virtual override Element Xamarin.Forms.INativeElementView.get_Element();
    public void Close();
    public virtual void LayoutSubviews();
    public void PrepareForDeselect();
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual void RemoveFromSuperview();
    public void Update(UITableView tableView, Cell cell, UITableViewCell nativeCell);
    protected virtual void Dispose(bool disposing);
    private void ActivateMore();
    private void CullButtons(nfloat acceptableTotalWidth, Boolean& needMoreButton, nfloat& largestButtonWidth);
    private UIButton GetButton(MenuItem item);
    private UIViewController GetController();
    private nfloat GetLargestWidth();
    private void OnButtonActivated(object sender, EventArgs e);
    private void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnContextItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnMenuItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ReloadRow();
    private void ReloadRowCore();
    private UIView SetupButtons(nfloat width, nfloat height);
    internal static void SetupSelection(UITableView table);
    [CompilerGeneratedAttribute]
private void <ReloadRow>b__39_0();
}
internal class Xamarin.Forms.Platform.iOS.ContextScrollViewDelegate : UIScrollViewDelegate {
    private nfloat _finalButtonSize;
    private UIView _backgroundView;
    private List`1<UIButton> _buttons;
    private UITapGestureRecognizer _closer;
    private UIView _container;
    private GlobalCloseContextGestureRecognizer _globalCloser;
    private bool _isDisposed;
    private static WeakReference`1<UIScrollView> s_scrollViewBeingScrolled;
    private UITableView _table;
    [CompilerGeneratedAttribute]
private nfloat <ButtonsWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <ClosedCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    public nfloat ButtonsWidth { get; }
    public Action ClosedCallback { get; public set; }
    public bool IsOpen { get; private set; }
    public ContextScrollViewDelegate(UIView container, List`1<UIButton> buttons, bool isOpen);
    [CompilerGeneratedAttribute]
public nfloat get_ButtonsWidth();
    [CompilerGeneratedAttribute]
public Action get_ClosedCallback();
    [CompilerGeneratedAttribute]
public void set_ClosedCallback(Action value);
    [CompilerGeneratedAttribute]
public bool get_IsOpen();
    [CompilerGeneratedAttribute]
private void set_IsOpen(bool value);
    public virtual void DraggingStarted(UIScrollView scrollView);
    public void PrepareForDeselect(UIScrollView scrollView);
    public virtual void Scrolled(UIScrollView scrollView);
    public void Unhook(UIScrollView scrollView);
    public virtual void WillEndDragging(UIScrollView scrollView, CGPoint velocity, CGPoint& targetContentOffset);
    private static bool ShouldIgnoreScrolling(UIScrollView scrollView);
    protected virtual void Dispose(bool disposing);
    private void ClearCloserRecognizer(ContextActionsCell cell);
    private ContextActionsCell GetContextCell(UIScrollView scrollView);
    private void RemoveHighlight(UIScrollView scrollView);
    private void RestoreHighlight(UIScrollView scrollView);
    private void SetButtonsShowing(bool show);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.DateExtensions : object {
    [ExtensionAttribute]
public static DateTime ToDateTime(NSDate date);
    [ExtensionAttribute]
public static NSDate ToNSDate(DateTime date);
}
public class Xamarin.Forms.Platform.iOS.DatePickerRenderer : DatePickerRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.DatePickerRendererBase`1 : ViewRenderer`2<DatePicker, TControl> {
    private UIDatePicker _picker;
    private UIColor _defaultTextColor;
    private bool _disposed;
    private bool _useLegacyColorManagement;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleValueChanged(object sender, EventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void UpdateDateFromModel(bool animate);
    private void UpdateFlowDirection();
    protected internal virtual void UpdateFont();
    private void UpdateCharacterSpacing();
    private void UpdateMaximumDate();
    private void UpdateMinimumDate();
    protected internal virtual void UpdateTextColor();
    protected virtual void Dispose(bool disposing);
}
public abstract class Xamarin.Forms.Platform.iOS.DefaultCell : ItemsViewCell {
    [CompilerGeneratedAttribute]
private UILabel <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private NSLayoutConstraint <Constraint>k__BackingField;
    public UILabel Label { get; }
    protected NSLayoutConstraint Constraint { get; protected set; }
    [ExportAttribute("initWithFrame:")]
protected DefaultCell(CGRect frame);
    [CompilerGeneratedAttribute]
public UILabel get_Label();
    [CompilerGeneratedAttribute]
protected NSLayoutConstraint get_Constraint();
    [CompilerGeneratedAttribute]
protected void set_Constraint(NSLayoutConstraint value);
    public virtual void ConstrainTo(nfloat constant);
}
internal class Xamarin.Forms.Platform.iOS.Deserializer : object {
    private static string PropertyStoreFile;
    public sealed virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    public sealed virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.DisposeHelpers : object {
    [ExtensionAttribute]
internal static void DisposeModalAndChildRenderers(Element view);
    [ExtensionAttribute]
internal static void DisposeRendererAndChildren(IVisualElementRenderer rendererToRemove);
}
public class Xamarin.Forms.Platform.iOS.EditorRenderer : EditorRendererBase`1<UITextView> {
    private UIColor _defaultPlaceholderColor;
    private UILabel _placeholderLabel;
    protected UITextView TextView { get; }
    protected virtual UITextView CreateNativeControl();
    protected virtual UITextView get_TextView();
    protected internal virtual void UpdateText();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdatePlaceholderText();
    protected internal virtual void UpdateCharacterSpacing();
    protected internal virtual void UpdatePlaceholderColor();
    private void CreatePlaceholderLabel();
}
public abstract class Xamarin.Forms.Platform.iOS.EditorRendererBase`1 : ViewRenderer`2<Editor, TControl> {
    private bool _disposed;
    private IUITextViewDelegate _pleaseDontCollectMeGarbageCollector;
    private IEditorController ElementController { get; }
    protected UITextView TextView { get; }
    private IEditorController get_ElementController();
    protected abstract virtual UITextView get_TextView();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected internal virtual void UpdateAutoSizeOption();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleChanged(object sender, EventArgs e);
    private void OnFrameChanged(object sender, EventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void UpdateEditable();
    protected internal virtual void UpdateFont();
    private void UpdateKeyboard();
    protected internal virtual void UpdateText();
    protected internal abstract virtual void UpdatePlaceholderText();
    protected internal abstract virtual void UpdatePlaceholderColor();
    protected internal abstract virtual void UpdateCharacterSpacing();
    private void UpdateTextAlignment();
    protected internal virtual void UpdateTextColor();
    private void UpdateMaxLength();
    protected virtual bool ShouldChangeText(UITextView textView, NSRange range, string text);
    private void UpdateReadOnly();
    private void UpdateUserInteraction();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__7_0(object o, EventArgs a);
}
internal static class Xamarin.Forms.Platform.iOS.EffectUtilities : object {
    public static void RegisterEffectControlProvider(IEffectControlProvider self, IElementController oldElement, IElementController newElement);
}
public class Xamarin.Forms.Platform.iOS.ElementChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TElement <NewElement>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <OldElement>k__BackingField;
    public TElement NewElement { get; private set; }
    public TElement OldElement { get; private set; }
    public ElementChangedEventArgs`1(TElement oldElement, TElement newElement);
    [CompilerGeneratedAttribute]
public TElement get_NewElement();
    [CompilerGeneratedAttribute]
private void set_NewElement(TElement value);
    [CompilerGeneratedAttribute]
public TElement get_OldElement();
    [CompilerGeneratedAttribute]
private void set_OldElement(TElement value);
}
public class Xamarin.Forms.Platform.iOS.ElementSelectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    public Element Element { get; public set; }
    [CompilerGeneratedAttribute]
public Element get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(Element value);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.EmptySource : object {
    public int GroupCount { get; }
    public int ItemCount { get; }
    public object Item { get; }
    public sealed virtual int get_GroupCount();
    public sealed virtual int get_ItemCount();
    public sealed virtual object get_Item(NSIndexPath indexPath);
    public sealed virtual int ItemCountInGroup(nint group);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Platform.iOS.EntryCellRenderer : CellRenderer {
    private static Color DefaultTextColor;
    private static EntryCellRenderer();
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    private static void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void OnKeyBoardDoneButtonPressed(object sender, EventArgs e);
    private static void OnTextFieldTextChanged(object sender, EventArgs eventArgs);
    private static void UpdateHorizontalTextAlignment(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateIsEnabled(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateKeyboard(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateLabel(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateLabelColor(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdatePlaceholder(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateText(EntryCellTableViewCell cell, EntryCell entryCell);
}
public class Xamarin.Forms.Platform.iOS.EntryRenderer : EntryRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.EntryRendererBase`1 : ViewRenderer`2<Entry, TControl> {
    private UIColor _defaultTextColor;
    private Color _defaultPlaceholderColor;
    private UIColor _defaultCursorColor;
    private bool _useLegacyColorManagement;
    private bool _disposed;
    private IDisposable _selectedTextRangeObserver;
    private bool _nativeSelectionIsUpdating;
    private bool _cursorPositionChangePending;
    private bool _selectionLengthChangePending;
    private static int baseHeight;
    private static CGSize initialSize;
    private IElementController ElementController { get; }
    private static EntryRendererBase`1();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEditingBegan(object sender, EventArgs e);
    private void OnEditingChanged(object sender, EventArgs eventArgs);
    private void OnEditingEnded(object sender, EventArgs e);
    protected virtual bool OnShouldReturn(UITextField view);
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    protected virtual void UpdateColor();
    private void UpdateAdjustsFontSizeToFitWidth();
    protected virtual void UpdateFont();
    private void UpdateKeyboard();
    private void UpdatePassword();
    protected virtual void UpdatePlaceholder();
    protected virtual void UpdateAttributedPlaceholder(NSAttributedString nsAttributedString);
    private void UpdateText();
    private void UpdateCharacterSpacing();
    private void UpdateMaxLength();
    private bool ShouldChangeCharacters(UITextField textField, NSRange range, string replacementString);
    private void UpdateReturnType();
    private void UpdateCursorFromControl(NSObservedChange obj);
    private void UpdateCursorSelection();
    private UITextPosition GetSelectionEnd(int cursorPosition, UITextPosition start, int startOffset);
    private UITextPosition GetSelectionStart(int cursorPosition, Int32& startOffset);
    private void UpdateCursorColor();
    private void SetCursorPositionFromRenderer(int start);
    private void SetSelectionLengthFromRenderer(int selectionLength);
    private void UpdateIsReadOnly();
    private void UpdateClearButtonVisibility();
}
internal class Xamarin.Forms.Platform.iOS.EventedViewController : ChildViewController {
    private MasterView _masterView;
    [CompilerGeneratedAttribute]
private EventHandler _didAppear;
    [CompilerGeneratedAttribute]
private EventHandler _willDisappear;
    [CompilerGeneratedAttribute]
private void add__didAppear(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__didAppear(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__willDisappear(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__willDisappear(EventHandler value);
    public void add_DidAppear(EventHandler value);
    public void remove_DidAppear(EventHandler value);
    public void add_WillDisappear(EventHandler value);
    public void remove_WillDisappear(EventHandler value);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void LoadView();
}
public class Xamarin.Forms.Platform.iOS.EventTracker : object {
    private NotifyCollectionChangedEventHandler _collectionChangedHandler;
    private Dictionary`2<IGestureRecognizer, UIGestureRecognizer> _gestureRecognizers;
    private IVisualElementRenderer _renderer;
    private bool _disposed;
    private UIView _handler;
    private double _previousScale;
    private UITouchEventArgs _shouldReceiveTouch;
    private ObservableCollection`1<IGestureRecognizer> ElementGestureRecognizers { get; }
    public EventTracker(IVisualElementRenderer renderer);
    private ObservableCollection`1<IGestureRecognizer> get_ElementGestureRecognizers();
    public sealed virtual void Dispose();
    public void LoadEvents(UIView handler);
    private static IList`1<GestureElement> GetChildGestures(UIGestureRecognizer sender, WeakReference weakEventTracker, WeakReference weakRecognizer, EventTracker eventTracker, View view);
    private Action`1<UITapGestureRecognizer> CreateRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer, TapGestureRecognizer clickRecognizer);
    private Action`1<UITapGestureRecognizer> CreateChildRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer);
    protected virtual UIGestureRecognizer GetNativeRecognizer(IGestureRecognizer recognizer);
    private UIPanGestureRecognizer CreatePanRecognizer(int numTouches, Action`1<UIPanGestureRecognizer> action);
    private UIPinchGestureRecognizer CreatePinchRecognizer(Action`1<UIPinchGestureRecognizer> action);
    private UISwipeGestureRecognizer CreateSwipeRecognizer(SwipeDirection direction, Action`1<SwipeDirection> action, int numFingers);
    private UITapGestureRecognizer CreateTapRecognizer(int numTaps, Action`1<UITapGestureRecognizer> action, int numFingers);
    private static bool ShouldRecognizeTapsTogether(UIGestureRecognizer gesture, UIGestureRecognizer other);
    private void LoadRecognizers();
    private bool ShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch);
    private void ModelGestureRecognizersOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <LoadRecognizers>b__21_0(IGestureRecognizer key);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.Extensions : object {
    [ExtensionAttribute]
public static void ApplyKeyboard(IUITextInput textInput, Keyboard keyboard);
    [ExtensionAttribute]
public static void ApplyKeyboard(IUITextInputTraits textInput, Keyboard keyboard);
    [ExtensionAttribute]
internal static UIModalPresentationStyle ToNativeModalPresentationStyle(UIModalPresentationStyle style);
    [ExtensionAttribute]
internal static UIReturnKeyType ToUIReturnKeyType(ReturnType returnType);
    [ExtensionAttribute]
internal static DeviceOrientation ToDeviceOrientation(UIDeviceOrientation orientation);
    [ExtensionAttribute]
internal static NSMutableAttributedString AddCharacterSpacing(NSAttributedString attributedString, string text, double characterSpacing);
    [ExtensionAttribute]
internal static bool HasCharacterAdjustment(NSMutableAttributedString mutableAttributedString);
    internal static void AddKerningAdjustment(NSMutableAttributedString mutableAttributedString, string text, double characterSpacing);
    [ExtensionAttribute]
internal static bool IsHorizontal(ButtonContentLayout layout);
}
public class Xamarin.Forms.Platform.iOS.FileImageSourceHandler : object {
    public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.FlowDirectionExtensions : object {
    [ExtensionAttribute]
internal static FlowDirection ToFlowDirection(UIUserInterfaceLayoutDirection direction);
    [ExtensionAttribute]
internal static bool UpdateFlowDirection(UIView view, IVisualElementController controller);
    [ExtensionAttribute]
internal static void UpdateTextAlignment(UITextField control, IVisualElementController controller);
    [ExtensionAttribute]
internal static void UpdateTextAlignment(UITextView control, IVisualElementController controller);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.FontExtensions : object {
    private static string DefaultFontName;
    private static Dictionary`2<ToNativeFontFontKey, UIFont> ToUiFont;
    private static FontExtensions();
    [ExtensionAttribute]
public static UIFont ToUIFont(Font self);
    [ExtensionAttribute]
internal static UIFont ToUIFont(IFontElement element);
    private static UIFont _ToNativeFont(string family, float size, FontAttributes attributes);
    [ExtensionAttribute]
internal static bool IsDefault(Span self);
    [ExtensionAttribute]
private static UIFont ToNativeFont(IFontElement element);
    [ExtensionAttribute]
private static UIFont ToNativeFont(Font self);
    private static UIFont ToNativeFont(string family, float size, FontAttributes attributes, Func`4<string, float, FontAttributes, UIFont> factory);
}
public class Xamarin.Forms.Platform.iOS.FontImageSourceHandler : object {
    private Color _defaultColor;
    public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.FormattedStringExtensions : object {
    [ExtensionAttribute]
public static NSAttributedString ToAttributed(Span span, Font defaultFont, Color defaultForegroundColor);
    [ExtensionAttribute]
public static NSAttributedString ToAttributed(FormattedString formattedString, Font defaultFont, Color defaultForegroundColor);
    [ExtensionAttribute]
internal static NSAttributedString ToAttributed(Span span, BindableObject owner, Color defaultForegroundColor, TextAlignment textAlignment, double lineHeight);
    [ExtensionAttribute]
internal static NSAttributedString ToAttributed(FormattedString formattedString, BindableObject owner, Color defaultForegroundColor, TextAlignment textAlignment, double lineHeight);
}
public class Xamarin.Forms.Platform.iOS.FormsApplicationDelegate : UIApplicationDelegate {
    private Application _application;
    private bool _isSuspended;
    private UIWindow _window;
    public UIWindow Window { get; public set; }
    public virtual UIWindow get_Window();
    public virtual void set_Window(UIWindow value);
    public virtual bool ContinueUserActivity(UIApplication application, NSUserActivity userActivity, UIApplicationRestorationHandler completionHandler);
    public virtual void DidEnterBackground(UIApplication uiApplication);
    public virtual bool FinishedLaunching(UIApplication uiApplication, NSDictionary launchOptions);
    public virtual void OnActivated(UIApplication uiApplication);
    public virtual void OnResignActivation(UIApplication uiApplication);
    public virtual void UserActivityUpdated(UIApplication application, NSUserActivity userActivity);
    public virtual void WillEnterForeground(UIApplication uiApplication);
    public virtual bool WillFinishLaunching(UIApplication uiApplication, NSDictionary launchOptions);
    public virtual void WillTerminate(UIApplication uiApplication);
    protected virtual void Dispose(bool disposing);
    protected void LoadApplication(Application application);
    private void ApplicationOnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void CheckForAppLink(NSUserActivity userActivity);
    private void SetMainPage();
    private void UpdateMainPage();
}
public class Xamarin.Forms.Platform.iOS.FormsCheckBox : UIButton {
    private static UIImage _checked;
    private static UIImage _unchecked;
    private static float _defaultSize;
    private static float _lineWidth;
    private Color _tintColor;
    private bool _isChecked;
    private bool _isEnabled;
    private float _minimumViewSize;
    public EventHandler CheckedChanged;
    private bool _disposed;
    private UIColor _checkBoxTintUIColor;
    internal float MinimumViewSize { get; internal set; }
    public bool IsChecked { get; public set; }
    public bool IsEnabled { get; public set; }
    public Color CheckBoxTintColor { get; public set; }
    private UIColor CheckBoxTintUIColor { get; private set; }
    public bool Enabled { get; public set; }
    internal float get_MinimumViewSize();
    internal void set_MinimumViewSize(float value);
    private void OnTouchUpInside(object sender, EventArgs e);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public Color get_CheckBoxTintColor();
    public void set_CheckBoxTintColor(Color value);
    private UIColor get_CheckBoxTintUIColor();
    private void set_CheckBoxTintUIColor(UIColor value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    protected virtual UIImage GetCheckBoximage();
    internal void UpdateDisplay();
    internal virtual UIBezierPath CreateBoxPath(CGRect backgroundRect);
    internal virtual UIBezierPath CreateCheckPath();
    internal virtual void DrawCheckMark(UIBezierPath path);
    internal virtual UIImage CreateCheckBox(UIImage check);
    internal UIImage CreateCheckMark();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.FormsRefreshControl : UIRefreshControl {
    private bool _usingLargeTitles;
    public bool Hidden { get; public set; }
    public FormsRefreshControl(bool usingLargeTitles);
    public virtual bool get_Hidden();
    public virtual void set_Hidden(bool value);
    public virtual void BeginRefreshing();
}
internal class Xamarin.Forms.Platform.iOS.FormsUITableViewController : UITableViewController {
    private ListView _list;
    private UIRefreshControl _refresh;
    private bool _refreshAdded;
    private bool _disposed;
    internal bool _usingLargeTitles;
    private bool _isRefreshing;
    private bool _isStartRefreshingPending;
    public FormsUITableViewController(ListView element, bool usingLargeTitles);
    public void UpdateIsRefreshing(bool refreshing);
    private void StartRefreshing();
    private void EndRefreshing();
    public void UpdatePullToRefreshEnabled(bool pullToRefreshEnabled);
    public void ForceRefreshing();
    public void UpdateShowHideRefresh(bool shouldHide);
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewWillLayoutSubviews();
    public void UpdateRefreshControlColor(UIColor color);
    protected virtual void Dispose(bool disposing);
    private void CheckContentSize();
    private void OnRefreshingChanged(object sender, EventArgs eventArgs);
    private void RemoveRefresh();
    private void UpdateContentOffset(nfloat offset, Action completed);
    [CompilerGeneratedAttribute]
private void <UpdateIsRefreshing>b__8_0();
}
public class Xamarin.Forms.Platform.iOS.FrameRenderer : VisualElementRenderer`1<Frame> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Frame> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetupLayer();
}
public class Xamarin.Forms.Platform.iOS.GetDesiredSizeDelegate : MulticastDelegate {
    public GetDesiredSizeDelegate(object object, IntPtr method);
    public virtual Nullable`1<SizeRequest> Invoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint, AsyncCallback callback, object object);
    public virtual Nullable`1<SizeRequest> EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.iOS.GlobalCloseContextGestureRecognizer : UIGestureRecognizer {
    private UIScrollView _scrollView;
    public GlobalCloseContextGestureRecognizer(UIScrollView scrollView, Action activated);
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    public virtual void TouchesMoved(NSSet touches, UIEvent evt);
    protected virtual void Dispose(bool disposing);
    private bool OnShouldReceiveTouch(UIGestureRecognizer r, UITouch t);
}
public class Xamarin.Forms.Platform.iOS.GridViewLayout : ItemsViewLayout {
    private GridItemsLayout _itemsLayout;
    public CGSize CollectionViewContentSize { get; }
    public GridViewLayout(GridItemsLayout itemsLayout, ItemSizingStrategy itemSizingStrategy);
    protected virtual void HandlePropertyChanged(PropertyChangedEventArgs propertyChanged);
    public virtual void ConstrainTo(CGSize size);
    public virtual CGSize get_CollectionViewContentSize();
    public virtual UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect(CGRect rect);
    private bool NeedsPartialColumnAdjustment(int section);
}
public class Xamarin.Forms.Platform.iOS.GroupableItemsViewController`1 : SelectableItemsViewController`1<TItemsView> {
    private bool _isGrouped;
    private Action _scrollAnimationEndedCallback;
    public GroupableItemsViewController`1(TItemsView groupableItemsView, ItemsViewLayout layout);
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    protected virtual IItemsViewSource CreateItemsViewSource();
    public virtual void UpdateItemsSource();
    protected virtual void RegisterViewTypes();
    private void RegisterSupplementaryViews(UICollectionElementKindSection kind);
    public virtual UICollectionReusableView GetViewForSupplementaryElement(UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath);
    private void UpdateDefaultSupplementaryView(DefaultCell cell, NSString elementKind, NSIndexPath indexPath);
    private void UpdateTemplatedSupplementaryView(TemplatedCell cell, NSString elementKind, NSIndexPath indexPath);
    private string DetermineViewReuseId(NSString elementKind);
    private string DetermineViewReuseId(DataTemplate template);
    internal CGSize GetReferenceSizeForHeader(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    internal CGSize GetReferenceSizeForFooter(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    internal void SetScrollAnimationEndedCallback(Action callback);
    internal void HandleScrollAnimationEnded();
}
public class Xamarin.Forms.Platform.iOS.GroupableItemsViewDelegator`2 : SelectableItemsViewDelegator`2<TItemsView, TViewController> {
    public GroupableItemsViewDelegator`2(ItemsViewLayout itemsViewLayout, TViewController itemsViewController);
    public virtual CGSize GetReferenceSizeForHeader(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual CGSize GetReferenceSizeForFooter(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual void ScrollAnimationEnded(UIScrollView scrollView);
}
public class Xamarin.Forms.Platform.iOS.GroupableItemsViewRenderer`2 : SelectableItemsViewRenderer`2<TItemsView, TViewController> {
    protected virtual TViewController CreateController(TItemsView itemsView, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void ScrollToRequested(object sender, ScrollToRequestEventArgs args);
    private bool WillNeedScrollAdjustment(ScrollToRequestEventArgs args);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object sender, ScrollToRequestEventArgs args);
}
internal class Xamarin.Forms.Platform.iOS.HeaderWrapperView : UIView {
    [CompilerGeneratedAttribute]
private Cell <Cell>k__BackingField;
    public Cell Cell { get; public set; }
    [CompilerGeneratedAttribute]
public Cell get_Cell();
    [CompilerGeneratedAttribute]
public void set_Cell(Cell value);
    public virtual void LayoutSubviews();
}
internal abstract class Xamarin.Forms.Platform.iOS.HeightConstrainedTemplatedCell : TemplatedCell {
    [ExportAttribute("initWithFrame:")]
public HeightConstrainedTemplatedCell(CGRect frame);
    public virtual void ConstrainTo(CGSize constraint);
    protected virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
}
internal class Xamarin.Forms.Platform.iOS.HorizontalCell : HeightConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public HorizontalCell(CGRect frame);
    private static HorizontalCell();
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.HorizontalDefaultCell : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public HorizontalDefaultCell(CGRect frame);
    private static HorizontalDefaultCell();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.HorizontalDefaultSupplementalView : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public HorizontalDefaultSupplementalView(CGRect frame);
    private static HorizontalDefaultSupplementalView();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.HorizontalSupplementaryView : HeightConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public HorizontalSupplementaryView(CGRect frame);
    private static HorizontalSupplementaryView();
    public virtual CGSize Measure();
}
internal interface Xamarin.Forms.Platform.iOS.IAccessibilityElementsController {
    public abstract virtual List`1<NSObject> GetAccessibilityElements();
}
public interface Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer {
    public UIButton Control { get; }
    public Button Element { get; }
    public IImageVisualElementRenderer ImageVisualElementRenderer { get; }
    public nfloat MinimumHeight { get; }
    public abstract virtual UIButton get_Control();
    public abstract virtual Button get_Element();
    public abstract virtual IImageVisualElementRenderer get_ImageVisualElementRenderer();
    public abstract virtual nfloat get_MinimumHeight();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<Button>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<Button>> value);
}
internal interface Xamarin.Forms.Platform.iOS.IFormsUITextView {
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameChanged(EventHandler value);
}
public interface Xamarin.Forms.Platform.iOS.IImageSourceHandler {
    public abstract virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public interface Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer {
    public bool IsDisposed { get; }
    public abstract virtual void SetImage(UIImage image);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual UIImageView GetImage();
}
[DefaultMemberAttribute("Item")]
public interface Xamarin.Forms.Platform.iOS.IItemsViewSource {
    public int ItemCount { get; }
    public int GroupCount { get; }
    public object Item { get; }
    public abstract virtual int get_ItemCount();
    public abstract virtual int ItemCountInGroup(nint group);
    public abstract virtual int get_GroupCount();
    public abstract virtual object get_Item(NSIndexPath indexPath);
    public abstract virtual object Group(NSIndexPath indexPath);
    public abstract virtual NSIndexPath GetIndexForItem(object item);
}
public class Xamarin.Forms.Platform.iOS.ImageButtonRenderer : ViewRenderer`2<ImageButton, UIButton> {
    private bool _isDisposed;
    private nfloat _minimumButtonHeight;
    private bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.IsDisposed { get; }
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageButtonRenderer/<OnElementPropertyChanged>d__5")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageButtonRenderer/<OnElementChanged>d__6")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageButton> e);
    private void UpdatePadding(UIButton button);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageButtonRenderer/<UpdateImage>d__8")]
private Task UpdateImage();
    protected virtual UIButton CreateNativeControl();
    protected virtual void SetAccessibilityLabel();
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.get_IsDisposed();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.SetImage(UIImage image);
    private sealed virtual override UIImageView Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.GetImage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(ElementChangedEventArgs`1<ImageButton> e);
}
public class Xamarin.Forms.Platform.iOS.ImageCellRenderer : TextCellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    protected virtual void HandleCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageCellRenderer/<SetImage>d__2")]
private void SetImage(ImageCell cell, CellTableViewCell target);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ImageElementManager : object {
    public static void Init(IImageVisualElementRenderer renderer);
    public static void Dispose(IImageVisualElementRenderer renderer);
    private static void OnControlChanged(object sender, EventArgs e);
    private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public static void SetAspect(IImageVisualElementRenderer renderer, IImageElement imageElement);
    public static void SetOpacity(IImageVisualElementRenderer renderer, IImageElement imageElement);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<SetImage>d__7")]
public static Task SetImage(IImageVisualElementRenderer renderer, IImageElement imageElement, Image oldElement);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<GetNativeImageAsync>d__8")]
[ExtensionAttribute]
internal static Task`1<UIImage> GetNativeImageAsync(ImageSource source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IShellContext shellContext, BindableObject bindable, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IVisualElementRenderer renderer, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<ApplyNativeImageAsync>d__11")]
[ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IVisualElementRenderer renderer, BindableObject bindable, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<ApplyNativeImageAsync>d__12")]
[ExtensionAttribute]
internal static Task ApplyNativeImageAsync(BindableObject bindable, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ImageExtensions : object {
    [ExtensionAttribute]
public static UIViewContentMode ToUIViewContentMode(Aspect aspect);
}
public class Xamarin.Forms.Platform.iOS.ImageLoaderSourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageLoaderSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.iOS.ImageRenderer : ViewRenderer`2<Image, UIImageView> {
    private bool _isDisposed;
    private bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.IsDisposed { get; }
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<OnElementChanged>d__3")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<OnElementPropertyChanged>d__4")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<TrySetImage>d__5")]
protected virtual Task TrySetImage(Image previous);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<SetImage>d__6")]
protected Task SetImage(Image oldElement);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.SetImage(UIImage image);
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.get_IsDisposed();
    private sealed virtual override UIImageView Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.GetImage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Image> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.IndexPathExtensions : object {
    [ExtensionAttribute]
public static bool IsLessThanOrEqualToPath(NSIndexPath path, NSIndexPath otherPath);
    [ExtensionAttribute]
public static NSIndexPath FindFirst(NSIndexPath[] paths);
}
internal class Xamarin.Forms.Platform.iOS.iOS7ButtonContainer : UIView {
    private nfloat _buttonWidth;
    public iOS7ButtonContainer(nfloat buttonWidth);
    public virtual void LayoutSubviews();
}
public class Xamarin.Forms.Platform.iOS.IOSAppIndexingProvider : object {
    public IAppLinks AppLinks { get; }
    public sealed virtual IAppLinks get_AppLinks();
}
internal class Xamarin.Forms.Platform.iOS.IOSAppLinks : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<DeregisterLink>d__0")]
public sealed virtual void DeregisterLink(IAppLinkEntry appLink);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<DeregisterLink>d__1")]
public sealed virtual void DeregisterLink(Uri uri);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<RegisterLink>d__2")]
public sealed virtual void RegisterLink(IAppLinkEntry appLink);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<DeregisterAll>d__3")]
public void DeregisterAll();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<AddLinkAsync>d__4")]
private static Task AddLinkAsync(IAppLinkEntry deepLinkUri);
    private static Task`1<bool> ClearIndexedDataAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<GetAttributeSet>d__6")]
private static Task`1<CSSearchableItemAttributeSet> GetAttributeSet(IAppLinkEntry deepLinkUri, string contentType, string id);
    private static NSMutableDictionary GetUserInfoForActivity(IAppLinkEntry deepLinkUri);
    private static Task`1<bool> IndexItemAsync(CSSearchableItem searchItem);
    private static Task`1<bool> RemoveLinkAsync(string identifier);
    private static void TryGetValues(IAppLinkEntry deepLinkUri, String& contentType, String& associatedWebPage, Boolean& shouldAddToPublicIndex);
}
internal class Xamarin.Forms.Platform.iOS.IOSDeviceInfo : DeviceInfo {
    private Size _pixelScreenSize;
    private Size _scaledScreenSize;
    private double _scalingFactor;
    private bool _disposed;
    private NSObject _notification;
    public Size PixelScreenSize { get; }
    public Size ScaledScreenSize { get; }
    public double ScalingFactor { get; }
    public virtual Size get_PixelScreenSize();
    public virtual Size get_ScaledScreenSize();
    public virtual double get_ScalingFactor();
    private void UpdateScreenSize();
    private void OrientationChanged(object sender, NSNotificationEventArgs args);
    protected virtual void Dispose(bool disposing);
}
public interface Xamarin.Forms.Platform.iOS.IShellContext {
    public bool AllowFlyoutGesture { get; }
    public IShellItemRenderer CurrentShellItemRenderer { get; }
    public Shell Shell { get; }
    public abstract virtual bool get_AllowFlyoutGesture();
    public abstract virtual IShellItemRenderer get_CurrentShellItemRenderer();
    public abstract virtual Shell get_Shell();
    public abstract virtual IShellPageRendererTracker CreatePageRendererTracker();
    public abstract virtual IShellFlyoutContentRenderer CreateShellFlyoutContentRenderer();
    public abstract virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection shellSection);
    public abstract virtual IShellNavBarAppearanceTracker CreateNavBarAppearanceTracker();
    public abstract virtual IShellTabBarAppearanceTracker CreateTabBarAppearanceTracker();
    public abstract virtual IShellSearchResultsRenderer CreateShellSearchResultsRenderer();
}
public interface Xamarin.Forms.Platform.iOS.IShellFlyoutContentRenderer {
    public UIViewController ViewController { get; }
    public abstract virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillDisappear(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillDisappear(EventHandler value);
}
public interface Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer {
    public UIViewController ViewController { get; }
    public UIView View { get; }
    public abstract virtual UIViewController get_ViewController();
    public abstract virtual UIView get_View();
    public abstract virtual void AttachFlyout(IShellContext context, UIViewController content);
}
public interface Xamarin.Forms.Platform.iOS.IShellFlyoutTransition {
    public abstract virtual void LayoutViews(CGRect bounds, nfloat openPercent, UIView flyout, UIView shell, FlyoutBehavior behavior);
}
public interface Xamarin.Forms.Platform.iOS.IShellItemRenderer {
    public ShellItem ShellItem { get; public set; }
    public UIViewController ViewController { get; }
    public abstract virtual ShellItem get_ShellItem();
    public abstract virtual void set_ShellItem(ShellItem value);
    public abstract virtual UIViewController get_ViewController();
}
public interface Xamarin.Forms.Platform.iOS.IShellItemTransition {
    public abstract virtual Task Transition(IShellItemRenderer oldRenderer, IShellItemRenderer newRenderer);
}
public interface Xamarin.Forms.Platform.iOS.IShellNavBarAppearanceTracker {
    public abstract virtual void ResetAppearance(UINavigationController controller);
    public abstract virtual void SetAppearance(UINavigationController controller, ShellAppearance appearance);
    public abstract virtual void UpdateLayout(UINavigationController controller);
}
public interface Xamarin.Forms.Platform.iOS.IShellPageRendererTracker {
    public bool IsRootPage { get; public set; }
    public UIViewController ViewController { get; public set; }
    public Page Page { get; public set; }
    public abstract virtual bool get_IsRootPage();
    public abstract virtual void set_IsRootPage(bool value);
    public abstract virtual UIViewController get_ViewController();
    public abstract virtual void set_ViewController(UIViewController value);
    public abstract virtual Page get_Page();
    public abstract virtual void set_Page(Page value);
}
public interface Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer {
    public UIViewController ViewController { get; }
    public SearchHandler SearchHandler { get; public set; }
    public abstract virtual UIViewController get_ViewController();
    public abstract virtual SearchHandler get_SearchHandler();
    public abstract virtual void set_SearchHandler(SearchHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemSelected(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemSelected(EventHandler`1<object> value);
}
public interface Xamarin.Forms.Platform.iOS.IShellSectionRenderer {
    public bool IsInMoreTab { get; public set; }
    public ShellSection ShellSection { get; public set; }
    public UIViewController ViewController { get; }
    public abstract virtual bool get_IsInMoreTab();
    public abstract virtual void set_IsInMoreTab(bool value);
    public abstract virtual ShellSection get_ShellSection();
    public abstract virtual void set_ShellSection(ShellSection value);
    public abstract virtual UIViewController get_ViewController();
}
public interface Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer {
    public bool ShowNavBar { get; }
    public UIViewController ViewController { get; }
    public abstract virtual bool get_ShowNavBar();
    public abstract virtual UIViewController get_ViewController();
}
public interface Xamarin.Forms.Platform.iOS.IShellTabBarAppearanceTracker {
    public abstract virtual void ResetAppearance(UITabBarController controller);
    public abstract virtual void SetAppearance(UITabBarController controller, ShellAppearance appearance);
    public abstract virtual void UpdateLayout(UITabBarController controller);
}
public interface Xamarin.Forms.Platform.iOS.ITabStop {
    public UIView TabStop { get; }
    public abstract virtual UIView get_TabStop();
}
internal static class Xamarin.Forms.Platform.iOS.ItemsSourceFactory : object {
    public static IItemsViewSource Create(IEnumerable itemsSource, UICollectionViewController collectionViewController);
    public static IItemsViewSource CreateGrouped(IEnumerable itemsSource, UICollectionViewController collectionViewController);
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewCell : UICollectionViewCell {
    [ExportAttribute("initWithFrame:")]
protected ItemsViewCell(CGRect frame);
    protected void InitializeContentConstraints(UIView nativeView);
    public abstract virtual void ConstrainTo(nfloat constant);
    public abstract virtual void ConstrainTo(CGSize constraint);
    public abstract virtual CGSize Measure();
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewController`1 : UICollectionViewController {
    [CompilerGeneratedAttribute]
private IItemsViewSource <ItemsSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TItemsView <ItemsView>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemsViewLayout <ItemsViewLayout>k__BackingField;
    private bool _initialConstraintsSet;
    private bool _isEmpty;
    private bool _currentBackgroundIsEmptyView;
    private bool _disposed;
    private UIView _backgroundUIView;
    private UIView _emptyUIView;
    private VisualElement _emptyViewFormsElement;
    [CompilerGeneratedAttribute]
private UICollectionViewDelegateFlowLayout <Delegator>k__BackingField;
    public IItemsViewSource ItemsSource { get; protected set; }
    public TItemsView ItemsView { get; }
    protected ItemsViewLayout ItemsViewLayout { get; protected set; }
    protected UICollectionViewDelegateFlowLayout Delegator { get; protected set; }
    protected bool IsHorizontal { get; }
    protected ItemsViewController`1(TItemsView itemsView, ItemsViewLayout layout);
    [CompilerGeneratedAttribute]
public IItemsViewSource get_ItemsSource();
    [CompilerGeneratedAttribute]
protected void set_ItemsSource(IItemsViewSource value);
    [CompilerGeneratedAttribute]
public TItemsView get_ItemsView();
    [CompilerGeneratedAttribute]
protected ItemsViewLayout get_ItemsViewLayout();
    [CompilerGeneratedAttribute]
protected void set_ItemsViewLayout(ItemsViewLayout value);
    [CompilerGeneratedAttribute]
protected UICollectionViewDelegateFlowLayout get_Delegator();
    [CompilerGeneratedAttribute]
protected void set_Delegator(UICollectionViewDelegateFlowLayout value);
    public void UpdateLayout(ItemsViewLayout newLayout);
    protected virtual void Dispose(bool disposing);
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual nint GetItemsCount(UICollectionView collectionView, nint section);
    private void CheckForEmptySource();
    public virtual void ViewDidLoad();
    public virtual void ViewWillLayoutSubviews();
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    protected virtual IItemsViewSource CreateItemsViewSource();
    public virtual void UpdateItemsSource();
    public virtual nint NumberOfSections(UICollectionView collectionView);
    protected virtual void UpdateDefaultCell(DefaultCell cell, NSIndexPath indexPath);
    protected virtual void UpdateTemplatedCell(TemplatedCell cell, NSIndexPath indexPath);
    public virtual NSIndexPath GetIndexForItem(object item);
    protected object GetItemAtIndex(NSIndexPath index);
    private void CellContentSizeChanged(object sender, EventArgs e);
    protected virtual string DetermineCellReuseId();
    private UICollectionViewCell GetPrototype();
    protected virtual void RegisterViewTypes();
    protected abstract virtual bool get_IsHorizontal();
    internal void UpdateEmptyView();
    private void ResizeEmptyView();
    protected void RemeasureLayout(VisualElement formsElement);
    protected void OnFormsElementMeasureInvalidated(object sender, EventArgs e);
    protected virtual void HandleFormsElementMeasureInvalidated(VisualElement formsElement);
    internal void UpdateView(object view, DataTemplate viewTemplate, UIView& uiView, VisualElement& formsElement);
    private void UpdateEmptyViewVisibility(bool isEmpty);
}
public class Xamarin.Forms.Platform.iOS.ItemsViewDelegator`2 : UICollectionViewDelegateFlowLayout {
    [CompilerGeneratedAttribute]
private ItemsViewLayout <ItemsViewLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private TViewController <ViewController>k__BackingField;
    protected float PreviousHorizontalOffset;
    protected float PreviousVerticalOffset;
    public ItemsViewLayout ItemsViewLayout { get; }
    public TViewController ViewController { get; }
    public ItemsViewDelegator`2(ItemsViewLayout itemsViewLayout, TViewController itemsViewController);
    [CompilerGeneratedAttribute]
public ItemsViewLayout get_ItemsViewLayout();
    [CompilerGeneratedAttribute]
public TViewController get_ViewController();
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumInteritemSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumLineSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual void CellDisplayingEnded(UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewLayout : UICollectionViewFlowLayout {
    private ItemsLayout _itemsLayout;
    private bool _determiningCellSize;
    private bool _disposed;
    private bool _adjustContentOffset;
    private CGSize _adjustmentSize0;
    private CGSize _adjustmentSize1;
    [CompilerGeneratedAttribute]
private ItemsUpdatingScrollMode <ItemsUpdatingScrollMode>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <ConstrainedDimension>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<UICollectionViewCell> <GetPrototype>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemSizingStrategy <ItemSizingStrategy>k__BackingField;
    public ItemsUpdatingScrollMode ItemsUpdatingScrollMode { get; public set; }
    public nfloat ConstrainedDimension { get; public set; }
    public Func`1<UICollectionViewCell> GetPrototype { get; public set; }
    internal ItemSizingStrategy ItemSizingStrategy { get; private set; }
    protected ItemsViewLayout(ItemsLayout itemsLayout, ItemSizingStrategy itemSizingStrategy);
    [CompilerGeneratedAttribute]
public ItemsUpdatingScrollMode get_ItemsUpdatingScrollMode();
    [CompilerGeneratedAttribute]
public void set_ItemsUpdatingScrollMode(ItemsUpdatingScrollMode value);
    protected virtual void Dispose(bool disposing);
    private void LayoutOnPropertyChanged(object sender, PropertyChangedEventArgs propertyChanged);
    protected virtual void HandlePropertyChanged(PropertyChangedEventArgs propertyChanged);
    [CompilerGeneratedAttribute]
public nfloat get_ConstrainedDimension();
    [CompilerGeneratedAttribute]
public void set_ConstrainedDimension(nfloat value);
    [CompilerGeneratedAttribute]
public Func`1<UICollectionViewCell> get_GetPrototype();
    [CompilerGeneratedAttribute]
public void set_GetPrototype(Func`1<UICollectionViewCell> value);
    [CompilerGeneratedAttribute]
internal ItemSizingStrategy get_ItemSizingStrategy();
    [CompilerGeneratedAttribute]
private void set_ItemSizingStrategy(ItemSizingStrategy value);
    public abstract virtual void ConstrainTo(CGSize size);
    public virtual UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumInteritemSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumLineSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public void PrepareCellForLayout(ItemsViewCell cell);
    public virtual bool ShouldInvalidateLayoutForBoundsChange(CGRect newBounds);
    public virtual bool ShouldInvalidateLayout(UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);
    protected void DetermineCellSize();
    private bool ConstraintsMatchScrollDirection(CGSize size);
    private void Initialize(UICollectionViewScrollDirection scrollDirection);
    internal void UpdateCellConstraints();
    private void UpdateConstraints(CGSize size);
    public virtual CGPoint TargetContentOffset(CGPoint proposedContentOffset, CGPoint scrollingVelocity);
    private CGPoint ScrollSingle(SnapPointsAlignment alignment, CGPoint proposedContentOffset, CGPoint scrollingVelocity);
    protected virtual void UpdateItemSpacing();
    public virtual UICollectionViewLayoutInvalidationContext GetInvalidationContext(UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);
    public virtual UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView(NSString kind, NSIndexPath indexPath);
    public virtual void PrepareLayout();
    public virtual void PrepareForCollectionViewUpdates(UICollectionViewUpdateItem[] updateItems);
    public virtual CGPoint TargetContentOffsetForProposedContentOffset(CGPoint proposedContentOffset);
    public virtual void FinalizeCollectionViewUpdates();
    private void TrackOffsetAdjustment();
    private CGSize ComputeOffsetAdjustment();
    private static bool UpdateWillShiftVisibleItems(UICollectionView collectionView, UICollectionViewUpdateItem[] updateItems);
    private static void ForceScrollToLastItem(UICollectionView collectionView, ItemsLayout itemsLayout);
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewRenderer`2 : ViewRenderer`2<TItemsView, UIView> {
    private ItemsViewLayout _layout;
    private bool _disposed;
    private Nullable`1<bool> _defaultHorizontalScrollVisibility;
    private Nullable`1<bool> _defaultVerticalScrollVisibility;
    [CompilerGeneratedAttribute]
private TViewController <Controller>k__BackingField;
    protected TItemsView ItemsView { get; }
    public UIViewController ViewController { get; }
    protected TViewController Controller { get; private set; }
    protected TItemsView get_ItemsView();
    public virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
protected TViewController get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TViewController value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TItemsView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected abstract virtual ItemsViewLayout SelectLayout();
    protected virtual void TearDownOldElement(TItemsView oldElement);
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual void UpdateLayout();
    protected virtual void UpdateItemSizingStrategy();
    protected virtual void UpdateItemsUpdatingScrollMode();
    protected virtual void UpdateItemsSource();
    protected abstract virtual TViewController CreateController(TItemsView newElement, ItemsViewLayout layout);
    private NSIndexPath DetermineIndex(ScrollToRequestEventArgs args);
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    protected virtual void ScrollToRequested(object sender, ScrollToRequestEventArgs args);
    protected virtual void Dispose(bool disposing);
    private bool IsIndexPathValid(NSIndexPath indexPath);
}
public interface Xamarin.Forms.Platform.iOS.IVisualElementRenderer {
    public VisualElement Element { get; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public abstract virtual VisualElement get_Element();
    public abstract virtual UIView get_NativeView();
    public abstract virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public abstract virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public abstract virtual void SetElement(VisualElement element);
    public abstract virtual void SetElementSize(Size size);
}
public interface Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer {
    public UIView Control { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanged(EventHandler value);
    public abstract virtual UIView get_Control();
}
internal class Xamarin.Forms.Platform.iOS.KeyboardInsetTracker : object {
    private Func`1<UIWindow> _fetchWindow;
    private Action`1<CGPoint> _setContentOffset;
    private Action`1<UIEdgeInsets> _setInsetAction;
    private UIScrollView _targetView;
    private bool _disposed;
    private UIEdgeInsets _currentInset;
    private CGRect _lastKeyboardRect;
    private ShellScrollViewTracker _shellScrollViewTracker;
    public KeyboardInsetTracker(UIScrollView targetView, Func`1<UIWindow> fetchWindow, Action`1<UIEdgeInsets> setInsetAction);
    public KeyboardInsetTracker(UIScrollView targetView, Func`1<UIWindow> fetchWindow, Action`1<UIEdgeInsets> setInsetAction, Action`1<CGPoint> setContentOffset);
    public KeyboardInsetTracker(UIScrollView targetView, Func`1<UIWindow> fetchWindow, Action`1<UIEdgeInsets> setInsetAction, Action`1<CGPoint> setContentOffset, IVisualElementRenderer renderer);
    public sealed virtual void Dispose();
    internal void UpdateInsets();
    public void OnLayoutSubviews();
    private void OnKeyboardHidden(object sender, UIKeyboardEventArgs args);
    private void OnKeyboardShown(object sender, UIKeyboardEventArgs args);
}
internal static class Xamarin.Forms.Platform.iOS.KeyboardObserver : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<UIKeyboardEventArgs> KeyboardWillHide;
    [CompilerGeneratedAttribute]
private static EventHandler`1<UIKeyboardEventArgs> KeyboardWillShow;
    private static KeyboardObserver();
    [CompilerGeneratedAttribute]
public static void add_KeyboardWillHide(EventHandler`1<UIKeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_KeyboardWillHide(EventHandler`1<UIKeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_KeyboardWillShow(EventHandler`1<UIKeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_KeyboardWillShow(EventHandler`1<UIKeyboardEventArgs> value);
    private static void OnKeyboardHidden(object sender, UIKeyboardEventArgs args);
    private static void OnKeyboardShown(object sender, UIKeyboardEventArgs args);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.LabelExtensions : object {
    [ExtensionAttribute]
public static void RecalculateSpanPositions(UILabel control, Label element);
    private static CGRect GetCharacterBounds(NSRange characterRange, NSLayoutManager layoutManager, NSTextContainer textContainer);
    [ExtensionAttribute]
private static double FindDefaultLineHeight(UILabel control, int start, int length);
}
public class Xamarin.Forms.Platform.iOS.LabelRenderer : ViewRenderer`2<Label, UILabel> {
    private SizeRequest _perfectSize;
    private bool _perfectSizeValid;
    private FormattedString _formatted;
    private static HashSet`1<string> s_perfectSizeSet;
    private bool IsTextFormatted { get; }
    private static LabelRenderer();
    private bool get_IsTextFormatted();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual UILabel CreateNativeControl();
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void UpdateTextDecorations();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetBackgroundColor(Color color);
    private void UpdateHorizontalTextAlignment();
    private void UpdateLineBreakMode();
    private void UpdateCharacterSpacing();
    private void UpdateText();
    private void UpdateTextPlainText();
    private void UpdateFormattedText();
    private void UpdateTextHtml();
    private void UpdateFont();
    private void UpdateTextColor();
    private void UpdateLayout();
    private void UpdateMaxLines();
    private void UpdatePadding();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.LayoutExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<View> children, UIView view, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
    [ExtensionAttribute]
public static View ToView(UIView view, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
}
public class Xamarin.Forms.Platform.iOS.LayoutSubviewsDelegate : MulticastDelegate {
    public LayoutSubviewsDelegate(object object, IntPtr method);
    public virtual bool Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.ListSource : List`1<object> {
    public object Item { get; }
    public int GroupCount { get; }
    public int ItemCount { get; }
    public ListSource(IEnumerable`1<object> enumerable);
    public ListSource(IEnumerable enumerable);
    public sealed virtual void Dispose();
    public sealed virtual object get_Item(NSIndexPath indexPath);
    public sealed virtual int get_GroupCount();
    public sealed virtual int get_ItemCount();
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual int ItemCountInGroup(nint group);
}
public class Xamarin.Forms.Platform.iOS.ListViewLayout : ItemsViewLayout {
    public ListViewLayout(LinearItemsLayout itemsLayout, ItemSizingStrategy itemSizingStrategy);
    public virtual void ConstrainTo(CGSize size);
}
public class Xamarin.Forms.Platform.iOS.ListViewRenderer : ViewRenderer`2<ListView, UITableView> {
    private static int DefaultRowHeight;
    private ListViewDataSource _dataSource;
    private IVisualElementRenderer _headerRenderer;
    private IVisualElementRenderer _footerRenderer;
    private KeyboardInsetTracker _insetTracker;
    private CGRect _previousFrame;
    private ScrollToRequestedEventArgs _requestedScroll;
    private FormsUITableViewController _tableViewController;
    private bool _disposed;
    private bool _usingLargeTitles;
    private Nullable`1<bool> _defaultHorizontalScrollVisibility;
    private Nullable`1<bool> _defaultVerticalScrollVisibility;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <InsertRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <DeleteRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <ReloadRowsAnimation>k__BackingField;
    private ListView ListView { get; }
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    public UIViewController ViewController { get; }
    protected UITableViewRowAnimation InsertRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation DeleteRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadSectionsAnimation { get; protected set; }
    private ListView get_ListView();
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    public virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_InsertRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_InsertRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_DeleteRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_DeleteRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_ReloadRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_ReloadRowsAnimation(UITableViewRowAnimation value);
    protected UITableViewRowAnimation get_ReloadSectionsAnimation();
    protected void set_ReloadSectionsAnimation(UITableViewRowAnimation value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    private void DisposeSubviews(UIView view);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ListView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private NSIndexPath[] GetPaths(int section, int index, int count);
    private UITableViewScrollPosition GetScrollPosition(ScrollToPosition position);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnFooterMeasureInvalidated(object sender, EventArgs eventArgs);
    private void OnGroupedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnHeaderMeasureInvalidated(object sender, EventArgs eventArgs);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateFooter();
    private void UpdateHeader();
    private void UpdateIsRefreshing();
    private void UpdateItems(NotifyCollectionChangedEventArgs e, int section, bool resetWhenGrouped);
    private void InsertRows(int newStartingIndex, int newItemsCount, int section);
    private void DeleteRows(int oldStartingIndex, int oldItemsCount, int section);
    private void MoveRows(int newStartingIndex, int oldStartingIndex, int oldItemsCount, int section);
    private void ReloadRows(int oldStartingIndex, int oldItemsCount, int section);
    private void ReloadData();
    private void InvalidateCellCache();
    private void UpdatePullToRefreshEnabled();
    private void UpdateRowHeight();
    private void UpdateSeparatorColor();
    private void UpdateSeparatorVisibility();
    private void UpdateSelectionMode();
    private void UpdateSpinnerColor();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    [CompilerGeneratedAttribute]
private void <LayoutSubviews>b__34_0();
    [CompilerGeneratedAttribute]
private void <LayoutSubviews>b__34_1();
    [CompilerGeneratedAttribute]
private UIWindow <OnElementChanged>b__37_0();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__37_1(UIEdgeInsets insets);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__37_2(CGPoint point);
    [CompilerGeneratedAttribute]
private void <ReloadData>b__54_0();
}
internal class Xamarin.Forms.Platform.iOS.ModalWrapper : UIViewController {
    private IVisualElementRenderer _modal;
    public bool ShouldAutomaticallyForwardRotationMethods { get; }
    internal ModalWrapper(IVisualElementRenderer modal);
    public virtual void DismissViewController(bool animated, Action completionHandler);
    public virtual UIInterfaceOrientationMask GetSupportedInterfaceOrientations();
    public virtual UIInterfaceOrientation PreferredInterfaceOrientationForPresentation();
    public virtual bool ShouldAutorotate();
    public virtual bool ShouldAutorotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation);
    public virtual bool get_ShouldAutomaticallyForwardRotationMethods();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewWillAppear(bool animated);
    protected virtual void Dispose(bool disposing);
    public virtual void ViewDidLoad();
    public virtual UIViewController ChildViewControllerForStatusBarStyle();
}
internal class Xamarin.Forms.Platform.iOS.NativeBindingService : object {
    public sealed virtual bool TrySetBinding(object target, string propertyName, BindingBase binding);
    public sealed virtual bool TrySetBinding(object target, BindableProperty property, BindingBase binding);
    public sealed virtual bool TrySetValue(object target, BindableProperty property, object value);
}
internal class Xamarin.Forms.Platform.iOS.NativeValueConverterService : object {
    public sealed virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
internal class Xamarin.Forms.Platform.iOS.NativeViewPropertyListener : NSObject {
    [CompilerGeneratedAttribute]
private string <TargetProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private string TargetProperty { get; private set; }
    public NativeViewPropertyListener(string targetProperty);
    [CompilerGeneratedAttribute]
private string get_TargetProperty();
    [CompilerGeneratedAttribute]
private void set_TargetProperty(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void ObserveValue(NSString keyPath, NSObject ofObject, NSDictionary change, IntPtr context);
}
public class Xamarin.Forms.Platform.iOS.NativeViewWrapper : View {
    [CompilerGeneratedAttribute]
private GetDesiredSizeDelegate <GetDesiredSizeDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutSubviewsDelegate <LayoutSubViews>k__BackingField;
    [CompilerGeneratedAttribute]
private UIView <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private SizeThatFitsDelegate <SizeThatFitsDelegate>k__BackingField;
    public GetDesiredSizeDelegate GetDesiredSizeDelegate { get; }
    public LayoutSubviewsDelegate LayoutSubViews { get; public set; }
    public UIView NativeView { get; }
    public SizeThatFitsDelegate SizeThatFitsDelegate { get; public set; }
    public NativeViewWrapper(UIView nativeView, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
    [CompilerGeneratedAttribute]
public GetDesiredSizeDelegate get_GetDesiredSizeDelegate();
    [CompilerGeneratedAttribute]
public LayoutSubviewsDelegate get_LayoutSubViews();
    [CompilerGeneratedAttribute]
public void set_LayoutSubViews(LayoutSubviewsDelegate value);
    [CompilerGeneratedAttribute]
public UIView get_NativeView();
    [CompilerGeneratedAttribute]
public SizeThatFitsDelegate get_SizeThatFitsDelegate();
    [CompilerGeneratedAttribute]
public void set_SizeThatFitsDelegate(SizeThatFitsDelegate value);
    protected virtual void OnBindingContextChanged();
}
public class Xamarin.Forms.Platform.iOS.NativeViewWrapperRenderer : ViewRenderer`2<NativeViewWrapper, UIView> {
    protected bool ManageNativeControlLifetime { get; }
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NativeViewWrapper> e);
    protected virtual bool get_ManageNativeControlLifetime();
}
public class Xamarin.Forms.Platform.iOS.NavigationRenderer : UINavigationController {
    internal static string UpdateToolbarButtons;
    private bool _appeared;
    private bool _ignorePopCall;
    private bool _loaded;
    private MasterDetailPage _parentMasterDetailPage;
    private Size _queuedSize;
    private UIViewController[] _removeControllers;
    private UIToolbar _secondaryToolbar;
    private VisualElementTracker _tracker;
    private nfloat _navigationBottom;
    private bool _hasNavigationBar;
    private UIImage _defaultNavBarShadowImage;
    private UIImage _defaultNavBarBackImage;
    [CompilerGeneratedAttribute]
private Page <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private static string _defaultAccessibilityLabel;
    private static string _defaultAccessibilityHint;
    private static Nullable`1<bool> _defaultIsAccessibilityElement;
    private Page Current { get; private set; }
    private IPageController PageController { get; }
    private NavigationPage NavPage { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    [CompilerGeneratedAttribute]
private Page get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(Page value);
    private IPageController get_PageController();
    private NavigationPage get_NavPage();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public Task`1<bool> PopToRootAsync(Page page, bool animated);
    public virtual UIViewController[] PopToRootViewController(bool animated);
    public Task`1<bool> PopViewAsync(Page page, bool animated);
    public virtual UIViewController PopViewController(bool animated);
    public Task`1<bool> PushPageAsync(Page page, bool animated);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<OnPopToRoot>d__49")]
protected virtual Task`1<bool> OnPopToRoot(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<OnPopViewAsync>d__50")]
protected virtual Task`1<bool> OnPopViewAsync(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<OnPushAsync>d__51")]
protected virtual Task`1<bool> OnPushAsync(Page page, bool animated);
    private ParentingViewController CreateViewControllerForPage(Page page);
    private void FindParentMasterDetail();
    private Task`1<bool> GetAppearedOrDisappearedTask(Page page);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ValidateNavbarExists(Page newCurrentPage);
    private void UpdateHideNavigationBarSeparator();
    private void UpdateCurrentPagePreferredStatusBarUpdateAnimation();
    private void UpdateUseLargeTitles();
    private void UpdateTranslucent();
    private void InsertPageBefore(Page page, Page before);
    private void OnInsertPageBeforeRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopToRootRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPushRequested(object sender, NavigationRequestedEventArgs e);
    private void OnRemovedPageRequested(object sender, NavigationRequestedEventArgs e);
    private void RemovePage(Page page);
    private void RemoveViewControllers(bool animated);
    private void UpdateBackgroundColor();
    private void UpdateBarBackgroundColor();
    private void UpdateBarTextColor();
    private void SetStatusBarStyle();
    private void UpdateTint();
    private void UpdateToolBarVisible();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<UpdateFormsInnerNavigation>d__75")]
internal Task UpdateFormsInnerNavigation(Page pageBeingRemoved);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<SetMasterLeftBarButton>d__76")]
internal static void SetMasterLeftBarButton(UIViewController containerController, MasterDetailPage masterDetailPage);
    private static void SetAccessibilityHint(UIBarButtonItem uIBarButtonItem, Element element);
    private static void SetAccessibilityLabel(UIBarButtonItem uIBarButtonItem, Element element);
    private static void SetIsAccessibilityElement(UIBarButtonItem uIBarButtonItem, Element element);
    private static void SetAutomationId(UIBarButtonItem uIBarButtonItem, string id);
    internal void ValidateInsets();
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_0(IVisualElementRenderer sender);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<<ViewDidLoad>b__46_0>d")]
[CompilerGeneratedAttribute]
private void <ViewDidLoad>b__46_0(Page p);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private UIViewController <>n__0(bool animated);
    [CompilerGeneratedAttribute]
private void <RemovePage>b__67_0();
}
internal class Xamarin.Forms.Platform.iOS.NoCaretField : UITextField {
    public virtual CGRect GetCaretRectForPosition(UITextPosition position);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.NSObjectExtensions : object {
    [ExtensionAttribute]
public static void QueueForLater(NSObject nsObject, Action action);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.ObservableGroupedSource : object {
    private UICollectionView _collectionView;
    private UICollectionViewController _collectionViewController;
    private IList _groupSource;
    private bool _disposed;
    private List`1<ObservableItemsSource> _groups;
    public object Item { get; }
    public int GroupCount { get; }
    private int Xamarin.Forms.Platform.iOS.IItemsViewSource.ItemCount { get; }
    public ObservableGroupedSource(IEnumerable groupSource, UICollectionViewController collectionViewController);
    public sealed virtual object get_Item(NSIndexPath indexPath);
    public sealed virtual int get_GroupCount();
    private sealed virtual override int Xamarin.Forms.Platform.iOS.IItemsViewSource.get_ItemCount();
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual int ItemCountInGroup(nint group);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ClearGroupTracking();
    private void ResetGroupTracking();
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void Reload();
    private NSIndexSet CreateIndexSetFrom(int startIndex, int count);
    private bool NotLoadedYet();
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    private int GetGroupCount(int groupIndex);
    private object GetGroupItemAt(int groupIndex, int index);
    private int IndexInGroup(object item, object group);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.ObservableItemsSource : object {
    private UICollectionViewController _collectionViewController;
    private UICollectionView _collectionView;
    private bool _grouped;
    private int _section;
    private IEnumerable _itemsSource;
    private bool _disposed;
    public int Count { get; }
    public object Item { get; }
    public int GroupCount { get; }
    public int ItemCount { get; }
    public object Item { get; }
    public ObservableItemsSource(IEnumerable itemSource, UICollectionViewController collectionViewController, int group);
    public int get_Count();
    public object get_Item(int index);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual int ItemCountInGroup(nint group);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual int get_GroupCount();
    public sealed virtual int get_ItemCount();
    public sealed virtual object get_Item(NSIndexPath indexPath);
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void Reload();
    private NSIndexPath[] CreateIndexesFrom(int startIndex, int count);
    private bool NotLoadedYet();
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    internal int ItemsCount();
    internal object ElementAt(int index);
    internal int IndexOf(object item);
}
internal class Xamarin.Forms.Platform.iOS.OpenGLViewRenderer : ViewRenderer`2<OpenGLView, GLKView> {
    private CADisplayLink _displayLink;
    public void Display(object sender, EventArgs eventArgs);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<OpenGLView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetupRenderLoop(bool oneShot);
    [CompilerGeneratedAttribute]
private void <SetupRenderLoop>b__5_0();
}
internal class Xamarin.Forms.Platform.iOS.PageContainer : UIView {
    private IAccessibilityElementsController _parent;
    private List`1<NSObject> _accessibilityElements;
    private bool _disposed;
    private List`1<NSObject> AccessibilityElements { get; }
    private IUIAccessibilityContainer AccessibilityContainer { get; }
    public PageContainer(IAccessibilityElementsController parent);
    private List`1<NSObject> get_AccessibilityElements();
    private IUIAccessibilityContainer get_AccessibilityContainer();
    public void ClearAccessibilityElements();
    protected virtual void Dispose(bool disposing);
    [ExportAttribute("accessibilityElementCount")]
private nint AccessibilityElementCount();
    [ExportAttribute("accessibilityElementAtIndex:")]
private NSObject GetAccessibilityElementAt(nint index);
    [ExportAttribute("indexOfAccessibilityElement:")]
private int GetIndexOfAccessibilityElement(NSObject element);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.PageExtensions : object {
    [ExtensionAttribute]
public static UIViewController CreateViewController(ContentPage page);
}
public class Xamarin.Forms.Platform.iOS.PageRenderer : UIViewController {
    private bool _appeared;
    private bool _disposed;
    private EventTracker _events;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    private PageContainer _pageContainer;
    private ShellSection _shellSection;
    private bool _safeAreasSet;
    private Thickness _userPadding;
    private bool _userOverriddenSafeArea;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private double _tabThickness;
    private bool _isInItems;
    internal PageContainer Container { get; }
    private Page Page { get; }
    private IAccessibilityElementsController AccessibilityElementsController { get; }
    private Thickness SafeAreaInsets { get; }
    private bool IsPartOfShell { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIStatusBarAnimation PreferredStatusBarUpdateAnimation { get; }
    public bool PrefersHomeIndicatorAutoHidden { get; }
    internal PageContainer get_Container();
    private Page get_Page();
    private IAccessibilityElementsController get_AccessibilityElementsController();
    private Thickness get_SafeAreaInsets();
    private bool get_IsPartOfShell();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual List`1<NSObject> GetAccessibilityElements();
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public virtual void LoadView();
    public virtual void ViewWillLayoutSubviews();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewSafeAreaInsetsDidChange();
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLoad();
    public virtual void ViewWillDisappear(bool animated);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected virtual void SetAutomationId(string id);
    private void OnHandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual UIStatusBarAnimation get_PreferredStatusBarUpdateAnimation();
    private bool ShouldUseSafeArea();
    private void UpdateUseSafeArea();
    private void UpdateStatusBarPrefersHidden();
    private bool OnShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch);
    public virtual bool PrefersStatusBarHidden();
    private void UpdateBackground();
    private void UpdateTitle();
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.iOS.PageRenderer/<ViewAndSuperviewsOfView>d__58")]
private IEnumerable`1<UIView> ViewAndSuperviewsOfView(UIView view);
    private void UpdateHomeIndicatorAutoHidden();
    private sealed virtual override void Xamarin.Forms.IShellContentInsetObserver.OnInsetChanged(Thickness inset, double tabThickness);
    public virtual bool get_PrefersHomeIndicatorAutoHidden();
    [CompilerGeneratedAttribute]
private void <ViewDidLoad>b__43_0(UITapGestureRecognizer a);
    [CompilerGeneratedAttribute]
private void <UpdateStatusBarPrefersHidden>b__53_0();
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__56_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.PhoneMasterDetailRenderer : UIViewController {
    private UIView _clickOffView;
    private UIViewController _detailController;
    private bool _disposed;
    private EventTracker _events;
    private UIViewController _masterController;
    private UIPanGestureRecognizer _panGesture;
    private bool _presented;
    private UIGestureRecognizer _tapGesture;
    private VisualElementTracker _tracker;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page Page { get; }
    private MasterDetailPage MasterDetailPage { get; }
    private bool Presented { get; private set; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    private Page get_Page();
    private MasterDetailPage get_MasterDetailPage();
    private bool get_Presented();
    private void set_Presented(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void AddClickOffView();
    private void EmptyContainers();
    private void HandleMasterPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void LayoutChildren(bool animated);
    private void PackContainers();
    private void PageOnSizeChanged(object sender, EventArgs eventArgs);
    private void RemoveClickOffView();
    private void UpdateBackground();
    private void UpdateMasterDetailContainers();
    private void UpdateLeftBarButton();
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    private void UpdatePanGesture();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private void <ViewDidLoad>b__34_0();
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__46_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.PickerRenderer : PickerRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.PickerRendererBase`1 : ViewRenderer`2<Picker, TControl> {
    private UIPickerView _picker;
    private UIColor _defaultTextColor;
    private bool _disposed;
    private bool _useLegacyColorManagement;
    private Color _defaultPlaceholderColor;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEditing(object sender, EventArgs eventArgs);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void RowsCollectionChanged(object sender, EventArgs e);
    protected void UpdateCharacterSpacing();
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdatePlaceholder();
    protected virtual void UpdateAttributedPlaceholder(NSAttributedString nsAttributedString);
    private void UpdatePicker();
    private void UpdatePickerFromModel(PickerSource<TControl> s);
    private void UpdatePickerNativeSize(string oldText);
    private void UpdatePickerSelectedIndex(int formsIndex);
    protected internal virtual void UpdateTextColor();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.Platform : BindableObject {
    internal static BindableProperty RendererProperty;
    private int _alertPadding;
    private List`1<Page> _modals;
    private PlatformRenderer _renderer;
    private bool _animateModals;
    private bool _appeared;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    internal UIViewController ViewController { get; }
    internal Page Page { get; internal set; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.ModalStack { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.NavigationStack { get; }
    internal static UIEdgeInsets SafeAreaInsetsForWindow { get; }
    private static Platform();
    internal UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
internal Page get_Page();
    [CompilerGeneratedAttribute]
internal void set_Page(Page value);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_ModalStack();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_NavigationStack();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.Platform/<Xamarin-Forms-INavigation-PopModalAsync>d__24")]
private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    public static SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    public static IVisualElementRenderer CreateRenderer(VisualElement element);
    public static IVisualElementRenderer GetRenderer(VisualElement bindable);
    public static void SetRenderer(VisualElement bindable, IVisualElementRenderer value);
    protected virtual void OnBindingContextChanged();
    internal static UIEdgeInsets get_SafeAreaInsetsForWindow();
    internal void DidAppear();
    internal void LayoutSubviews();
    internal void SetPage(Page newRoot);
    internal void WillAppear();
    private void AddChild(VisualElement view);
    private static void HandleChildRemoved(object sender, ElementEventArgs e);
    private bool PageIsChildOfPlatform(Page page);
    private UIAlertAction CreateActionWithWindowHide(string text, UIAlertActionStyle style, Action setResult, UIWindow window);
    private void PresentAlert(AlertArguments arguments);
    private void PresentPrompt(PromptArguments arguments);
    private void PresentActionSheet(ActionSheetArguments arguments);
    private static void PresentPopUp(UIWindow window, UIAlertController alert, ActionSheetArguments arguments);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.Platform/<PresentModal>d__51")]
private Task PresentModal(Page modal, bool animated);
    private void EndEditing();
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    internal void SubscribeToAlertsAndActionSheets();
    internal void UnsubscribeFromAlertsAndActionsSheets();
    internal void CleanUpPages();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.PlatformConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, T> OnThisPlatform(T element);
}
public abstract class Xamarin.Forms.Platform.iOS.PlatformEffect : PlatformEffect`2<UIView, UIView> {
}
internal class Xamarin.Forms.Platform.iOS.PlatformRenderer : UIViewController {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    public Platform Platform { get; public set; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    public bool ShouldAutomaticallyForwardRotationMethods { get; }
    internal PlatformRenderer(Platform platform);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Platform value);
    public virtual UIInterfaceOrientationMask GetSupportedInterfaceOrientations();
    public virtual UIInterfaceOrientation PreferredInterfaceOrientationForPresentation();
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController ChildViewControllerForStatusBarStyle();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    public virtual bool ShouldAutorotate();
    public virtual bool ShouldAutorotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation);
    public virtual bool get_ShouldAutomaticallyForwardRotationMethods();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.PointExtensions : object {
    [ExtensionAttribute]
public static Point ToPoint(CGPoint point);
    [ExtensionAttribute]
public static CGPoint ToPointF(Point point);
}
public class Xamarin.Forms.Platform.iOS.ProgressBarRenderer : ViewRenderer`2<ProgressBar, UIProgressView> {
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    private void UpdateProgressColor();
    private void UpdateProgress();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.PropertyChangedEventArgsExtensions : object {
    [ExtensionAttribute]
public static bool Is(PropertyChangedEventArgs args, BindableProperty property);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty[] properties);
}
internal class Xamarin.Forms.Platform.iOS.ReadOnlyField : NoCaretField {
    private HashSet`1<string> enableActions;
    public virtual bool CanPerform(Selector action, NSObject withSender);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.RectangleExtensions : object {
    [ExtensionAttribute]
public static Rectangle ToRectangle(CGRect rect);
    [ExtensionAttribute]
public static CGRect ToRectangleF(Rectangle rect);
}
public class Xamarin.Forms.Platform.iOS.RefreshViewRenderer : ViewRenderer`2<RefreshView, UIView> {
    private bool _isDisposed;
    private bool _isRefreshing;
    private bool _usingLargeTitles;
    private nfloat _originalY;
    private nfloat _refreshControlHeight;
    private UIView _refreshControlParent;
    private UIRefreshControl _refreshControl;
    public bool IsRefreshing { get; public set; }
    public bool get_IsRefreshing();
    public void set_IsRefreshing(bool value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<RefreshView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void Dispose(bool disposing);
    private bool TryOffsetRefresh(UIView view, bool refreshing);
    private bool TryInsertRefresh(UIView view, int index);
    private void UpdateColors();
    private void UpdateIsRefreshing();
    private void UpdateIsEnabled();
    private bool CanUseRefreshControlProperty();
    private void OnRefresh(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
}
public static class Xamarin.Forms.Platform.iOS.RendererFactory : object {
    [ObsoleteAttribute("GetRenderer is obsolete as of version 2.0.1. Please use Platform.CreateRenderer instead.")]
[EditorBrowsableAttribute("1")]
public static IVisualElementRenderer GetRenderer(VisualElement view);
}
public class Xamarin.Forms.Platform.iOS.RendererPool : object {
    private Dictionary`2<Type, Stack`1<IVisualElementRenderer>> _freeRenderers;
    private VisualElement _oldElement;
    private IVisualElementRenderer _parent;
    public RendererPool(IVisualElementRenderer renderer, VisualElement oldElement);
    public IVisualElementRenderer GetFreeRenderer(VisualElement view);
    public void UpdateNewElement(VisualElement newElement);
    private void ClearRenderers(IVisualElementRenderer renderer);
    private void FillChildrenWithRenderers(VisualElement element);
    private void PushRenderer(IVisualElementRenderer renderer);
    private void UpdateRenderers(Element newElement);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Forms.Platform.iOS.Resources.StringResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Cancel { get; }
    internal static string More { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Cancel();
    internal static string get_More();
}
internal class Xamarin.Forms.Platform.iOS.ResourcesProvider : object {
    private ResourceDictionary _dictionary;
    public sealed virtual IResourceDictionary GetSystemResources();
    private Style GenerateListItemDetailTextStyle();
    private Style GenerateListItemTextStyle();
    private Style GenerateStyle(UIFont font);
    private void UpdateStyles();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object sender, UIContentSizeCategoryChangedEventArgs args);
}
public class Xamarin.Forms.Platform.iOS.SafeShellNavBarAppearanceTracker : object {
    private UIColor _defaultBarTint;
    private UIColor _defaultTint;
    private UIStringAttributes _defaultTitleAttributes;
    public sealed virtual void UpdateLayout(UINavigationController controller);
    public sealed virtual void ResetAppearance(UINavigationController controller);
    public sealed virtual void SetAppearance(UINavigationController controller, ShellAppearance appearance);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Platform.iOS.SafeShellTabBarAppearanceTracker : object {
    private UIColor _defaultBarTint;
    private UIColor _defaultTint;
    private UIColor _defaultUnselectedTint;
    public virtual void ResetAppearance(UITabBarController controller);
    public virtual void SetAppearance(UITabBarController controller, ShellAppearance appearance);
    public virtual void UpdateLayout(UITabBarController controller);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ScrollToPositionExtensions : object {
    [ExtensionAttribute]
public static UICollectionViewScrollPosition ToCollectionViewScrollPosition(ScrollToPosition scrollToPosition, UICollectionViewScrollDirection scrollDirection, bool isLtr);
    [ExtensionAttribute]
public static UICollectionViewScrollPosition ToHorizontalCollectionViewScrollPosition(ScrollToPosition scrollToPosition, bool isLtr);
    [ExtensionAttribute]
public static UICollectionViewScrollPosition ToVerticalCollectionViewScrollPosition(ScrollToPosition scrollToPosition);
}
public class Xamarin.Forms.Platform.iOS.ScrollViewRenderer : UIScrollView {
    private EventTracker _events;
    private KeyboardInsetTracker _insetTracker;
    private VisualElementPackager _packager;
    private CGRect _previousFrame;
    private ScrollToRequestedEventArgs _requestedScroll;
    private VisualElementTracker _tracker;
    private bool _checkedForRtlScroll;
    private bool _previousLTR;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private ScrollView ScrollView { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private ScrollView get_ScrollView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void LayoutSubviews();
    private void UpdateFlowDirection();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateIsEnabled();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    private void HandleScrollAnimationEnded(object sender, EventArgs e);
    private void HandleScrolled(object sender, EventArgs e);
    private void OnNativeControlUpdated(object sender, EventArgs eventArgs);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateDelaysContentTouches();
    private void UpdateBackgroundColor();
    private void UpdateContentSize();
    private CGSize RetrieveElementContentSize();
    private void UpdateScrollPosition();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private UIWindow <SetElement>b__21_0();
    [CompilerGeneratedAttribute]
private void <SetElement>b__21_1(UIEdgeInsets insets);
    [CompilerGeneratedAttribute]
private void <SetElement>b__21_2(CGPoint point);
}
public class Xamarin.Forms.Platform.iOS.SearchBarRenderer : ViewRenderer`2<SearchBar, UISearchBar> {
    private UIColor _cancelButtonTextColorDefaultDisabled;
    private UIColor _cancelButtonTextColorDefaultHighlighted;
    private UIColor _cancelButtonTextColorDefaultNormal;
    private UIColor _defaultTextColor;
    private UIColor _defaultTintColor;
    private UITextField _textField;
    private bool _textWasTyped;
    private string _typedText;
    private bool _useLegacyColorManagement;
    private UIToolbar _numericAccessoryView;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SearchBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    public virtual CGSize SizeThatFits(CGSize size);
    private void OnCancelClicked(object sender, EventArgs args);
    private void OnEditingEnded(object sender, EventArgs e);
    private void OnEditingStarted(object sender, EventArgs e);
    private void OnSearchButtonClicked(object sender, EventArgs e);
    private void OnTextChanged(object sender, UISearchBarTextChangedEventArgs a);
    private void UpdateCharacterSpacing();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    public virtual void UpdateCancelButton();
    private void UpdateFont();
    private void UpdateIsEnabled();
    private void UpdatePlaceholder();
    private void UpdateText();
    private void UpdateOnTextChanged();
    private void UpdateTextColor();
    private void UpdateMaxLength();
    private bool ShouldChangeText(UISearchBar searchBar, NSRange range, string text);
    private void UpdateKeyboard();
    private UIToolbar CreateNumericKeyboardAccessoryView();
}
public class Xamarin.Forms.Platform.iOS.SearchHandlerAppearanceTracker : object {
    private UIColor _cancelButtonTextColorDefaultDisabled;
    private UIColor _cancelButtonTextColorDefaultHighlighted;
    private UIColor _cancelButtonTextColorDefaultNormal;
    private UIColor _defaultTextColor;
    private UIColor _defaultTintColor;
    private UIColor _defaultClearIconTintColor;
    private UIColor _defaultPlaceholderTintColor;
    private bool _hasCustomBackground;
    private UIColor _defaultBackgroundColor;
    private SearchHandler _searchHandler;
    private UISearchBar _uiSearchBar;
    private UIToolbar _numericAccessoryView;
    private bool _disposed;
    public SearchHandlerAppearanceTracker(UISearchBar searchBar, SearchHandler searchHandler);
    public void UpdateSearchBarColors();
    private void SearchHandlerFocusChangeRequested(object sender, FocusRequestArgs e);
    private void SearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void GetDefaultSearchBarColors(UISearchBar searchBar);
    private void UpdateFont(UITextField textField);
    private void UpdateSearchBarBackgroundColor(UITextField textField);
    private void UpdateCancelButtonColor(UIButton cancelButton);
    private void UpdateSearchBarPlaceholder(UITextField textField);
    private void UpdateTextColor(UITextField textField);
    private void UpdateSearchBarTintColor(Color targetColor);
    private void UpdateSearchButtonIconColor(Color targetColor);
    private void UpdateClearPlaceholderIconColor(Color targetColor);
    private void UpdateClearIconColor(Color targetColor);
    private void UpdateSearchBarHorizontalTextAlignment(UITextField textField);
    private void UpdateSearchBarVerticalTextAlignment(UITextField textField);
    private void UpdateKeyboard();
    private void OnEditingEnded(object sender, EventArgs e);
    private void OnEditingStarted(object sender, EventArgs e);
    private void OnTextChanged(object sender, UISearchBarTextChangedEventArgs e);
    private void OnSearchButtonClicked(object sender, EventArgs e);
    private UIToolbar CreateNumericKeyboardAccessoryView();
    private static void SetSearchBarIconColor(UIImageView imageView, Color targetColor, UIColor defaultTintColor);
    private static void SetSearchBarIconColor(UIButton button, Color targetColor, UIColor defaultTintColor);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Platform.iOS.SelectableItemsViewController`1 : StructuredItemsViewController`1<TItemsView> {
    public SelectableItemsViewController`1(TItemsView selectableItemsView, ItemsViewLayout layout);
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
    internal void SelectItem(object selectedItem);
    internal void ClearSelection();
    private void FormsSelectItem(NSIndexPath indexPath);
    private void FormsDeselectItem(NSIndexPath indexPath);
    internal void UpdateNativeSelection();
    internal void UpdateSelectionMode();
    private void SynchronizeNativeSelectionWithSelectedItems();
    private bool ShouldNotBeSelected(object item, IList`1<object> selectedItems);
}
public class Xamarin.Forms.Platform.iOS.SelectableItemsViewDelegator`2 : ItemsViewDelegator`2<TItemsView, TViewController> {
    public SelectableItemsViewDelegator`2(ItemsViewLayout itemsViewLayout, TViewController itemsViewController);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
}
public class Xamarin.Forms.Platform.iOS.SelectableItemsViewRenderer`2 : StructuredItemsViewRenderer`2<TItemsView, TViewController> {
    protected virtual TViewController CreateController(TItemsView itemsView, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual void UpdateNativeSelection();
    protected virtual void UpdateSelectionMode();
    protected virtual void UpdateItemsSource();
}
internal class Xamarin.Forms.Platform.iOS.ShadowEffect : PlatformEffect {
    private UIView ShadowView { get; }
    private UIView get_ShadowView();
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    protected virtual void OnElementPropertyChanged(PropertyChangedEventArgs args);
    private void UpdateShadow();
}
public class Xamarin.Forms.Platform.iOS.ShellFlyoutContentRenderer : UIViewController {
    private UIVisualEffectView _blurView;
    private UIImageView _bgImage;
    private IShellContext _shellContext;
    private UIContainerView _headerView;
    private ShellTableViewController _tableViewController;
    [CompilerGeneratedAttribute]
private EventHandler WillAppear;
    [CompilerGeneratedAttribute]
private EventHandler WillDisappear;
    public UIViewController ViewController { get; }
    public ShellFlyoutContentRenderer(IShellContext context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillDisappear(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillDisappear(EventHandler value);
    protected virtual void HandleShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackground();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellFlyoutContentRenderer/<UpdateFlyoutBgImageAsync>d__14")]
private void UpdateFlyoutBgImageAsync();
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    private void OnElementSelected(Element element);
}
public class Xamarin.Forms.Platform.iOS.ShellFlyoutRenderer : UIViewController {
    private static string FlyoutAnimationName;
    private bool _disposed;
    private FlyoutBehavior _flyoutBehavior;
    private bool _gestureActive;
    private bool _isOpen;
    [CompilerGeneratedAttribute]
private UIViewAnimationCurve <AnimationCurve>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnimationDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellFlyoutTransition <FlyoutTransition>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private UIViewController <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer <Flyout>k__BackingField;
    [CompilerGeneratedAttribute]
private UIPanGestureRecognizer <PanGestureRecognizer>k__BackingField;
    [CompilerGeneratedAttribute]
private Shell <Shell>k__BackingField;
    [CompilerGeneratedAttribute]
private UIView <TapoffView>k__BackingField;
    private UIKeyCommand[] tabCommands;
    private UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.View { get; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.ViewController { get; }
    public UIViewAnimationCurve AnimationCurve { get; public set; }
    public int AnimationDuration { get; public set; }
    public IShellFlyoutTransition FlyoutTransition { get; public set; }
    private IShellContext Context { get; private set; }
    private UIViewController Detail { get; private set; }
    private IShellFlyoutContentRenderer Flyout { get; private set; }
    private bool IsOpen { get; private set; }
    private UIPanGestureRecognizer PanGestureRecognizer { get; private set; }
    private Shell Shell { get; private set; }
    private UIView TapoffView { get; private set; }
    public UIKeyCommand[] KeyCommands { get; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_View();
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_ViewController();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.AttachFlyout(IShellContext context, UIViewController content);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    [CompilerGeneratedAttribute]
public UIViewAnimationCurve get_AnimationCurve();
    [CompilerGeneratedAttribute]
public void set_AnimationCurve(UIViewAnimationCurve value);
    [CompilerGeneratedAttribute]
public int get_AnimationDuration();
    [CompilerGeneratedAttribute]
public void set_AnimationDuration(int value);
    [CompilerGeneratedAttribute]
public IShellFlyoutTransition get_FlyoutTransition();
    [CompilerGeneratedAttribute]
public void set_FlyoutTransition(IShellFlyoutTransition value);
    [CompilerGeneratedAttribute]
private IShellContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IShellContext value);
    [CompilerGeneratedAttribute]
private UIViewController get_Detail();
    [CompilerGeneratedAttribute]
private void set_Detail(UIViewController value);
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer get_Flyout();
    [CompilerGeneratedAttribute]
private void set_Flyout(IShellFlyoutContentRenderer value);
    private bool get_IsOpen();
    private void set_IsOpen(bool value);
    [CompilerGeneratedAttribute]
private UIPanGestureRecognizer get_PanGestureRecognizer();
    [CompilerGeneratedAttribute]
private void set_PanGestureRecognizer(UIPanGestureRecognizer value);
    [CompilerGeneratedAttribute]
private Shell get_Shell();
    [CompilerGeneratedAttribute]
private void set_Shell(Shell value);
    [CompilerGeneratedAttribute]
private UIView get_TapoffView();
    [CompilerGeneratedAttribute]
private void set_TapoffView(UIView value);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void AddTapoffView();
    public void FocusSearch(bool forwardDirection);
    public virtual UIKeyCommand[] get_KeyCommands();
    public UIView get_NativeView();
    public UIViewController get_ViewController();
    [ExportAttribute("tabForward:")]
private void TabForward(UIKeyCommand cmd);
    [ExportAttribute("tabBackward:")]
private void TabBackward(UIKeyCommand cmd);
    private void HandlePanGesture(UIPanGestureRecognizer pan);
    private void LayoutSidebar(bool animate);
    private void RemoveTapoffView();
    [CompilerGeneratedAttribute]
private void <AddTapoffView>b__54_0(UITapGestureRecognizer t);
}
public class Xamarin.Forms.Platform.iOS.ShellItemRenderer : UITabBarController {
    private IShellContext _context;
    private Dictionary`2<UIViewController, IShellSectionRenderer> _sectionRenderers;
    private IShellTabBarAppearanceTracker _appearanceTracker;
    private ShellSection _currentSection;
    private Page _displayedPage;
    private bool _disposed;
    private ShellItem _shellItem;
    private bool _switched;
    [CompilerGeneratedAttribute]
private IShellSectionRenderer <CurrentRenderer>k__BackingField;
    public ShellItem ShellItem { get; public set; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellItemRenderer.ViewController { get; }
    private IShellSectionRenderer CurrentRenderer { get; private set; }
    public UIViewController SelectedViewController { get; public set; }
    public ShellItemRenderer(IShellContext context);
    public sealed virtual ShellItem get_ShellItem();
    public sealed virtual void set_ShellItem(ShellItem value);
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellItemRenderer.get_ViewController();
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    [CompilerGeneratedAttribute]
private IShellSectionRenderer get_CurrentRenderer();
    [CompilerGeneratedAttribute]
private void set_CurrentRenderer(IShellSectionRenderer value);
    public virtual UIViewController get_SelectedViewController();
    public virtual void set_SelectedViewController(UIViewController value);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnShellItemSet(ShellItem shellItem);
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateShellAppearance(ShellAppearance appearance);
    private void AddRenderer(IShellSectionRenderer renderer);
    private void CreateTabRenderers();
    private void GoTo(ShellSection shellSection);
    private void OnDisplayedPageChanged(Page page);
    private void OnDisplayedPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void RemoveRenderer(IShellSectionRenderer renderer);
    private IShellSectionRenderer RendererForShellContent(ShellSection shellSection);
    private IShellSectionRenderer RendererForViewController(UIViewController viewController);
    private void SetTabBarHidden(bool hidden);
    private void UpdateTabBarHidden();
    [CompilerGeneratedAttribute]
private bool <ViewDidLoad>b__23_0(UITabBarController tabController, UIViewController viewController);
}
public class Xamarin.Forms.Platform.iOS.ShellItemTransition : object {
    public sealed virtual Task Transition(IShellItemRenderer oldRenderer, IShellItemRenderer newRenderer);
}
public class Xamarin.Forms.Platform.iOS.ShellNavBarAppearanceTracker : object {
    private UIView _blurView;
    private UIView _colorView;
    private UIImage _defaultBackgroundImage;
    private UIColor _defaultTint;
    private UIStringAttributes _defaultTitleAttributes;
    private bool _disposed;
    public sealed virtual void UpdateLayout(UINavigationController controller);
    public sealed virtual void ResetAppearance(UINavigationController controller);
    public sealed virtual void SetAppearance(UINavigationController controller, ShellAppearance appearance);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Platform.iOS.ShellPageRendererTracker : object {
    [CompilerGeneratedAttribute]
private bool <IsRootPage>k__BackingField;
    private IShellContext _context;
    private bool _disposed;
    private FlyoutBehavior _flyoutBehavior;
    private WeakReference`1<UIViewController> _rendererRef;
    private IShellSearchResultsRenderer _resultsRenderer;
    private UISearchController _searchController;
    private SearchHandler _searchHandler;
    private Page _page;
    private NSCache _nSCache;
    private SearchHandlerAppearanceTracker _searchHandlerAppearanceTracker;
    [CompilerGeneratedAttribute]
private BackButtonBehavior <BackButtonBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private UINavigationItem <NavigationItem>k__BackingField;
    public bool IsRootPage { get; public set; }
    public UIViewController ViewController { get; public set; }
    public Page Page { get; public set; }
    private BackButtonBehavior BackButtonBehavior { get; private set; }
    private UINavigationItem NavigationItem { get; private set; }
    private SearchHandler SearchHandler { get; private set; }
    public ShellPageRendererTracker(IShellContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRootPage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsRootPage(bool value);
    public sealed virtual UIViewController get_ViewController();
    public sealed virtual void set_ViewController(UIViewController value);
    public sealed virtual Page get_Page();
    public sealed virtual void set_Page(Page value);
    [CompilerGeneratedAttribute]
private BackButtonBehavior get_BackButtonBehavior();
    [CompilerGeneratedAttribute]
private void set_BackButtonBehavior(BackButtonBehavior value);
    [CompilerGeneratedAttribute]
private UINavigationItem get_NavigationItem();
    [CompilerGeneratedAttribute]
private void set_NavigationItem(UINavigationItem value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<OnFlyoutBehaviorChanged>d__29")]
public sealed virtual void OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<OnBackButtonBehaviorPropertyChanged>d__30")]
protected virtual void OnBackButtonBehaviorPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateTabBarVisible();
    protected virtual void UpdateTitle();
    protected virtual void OnPageSet(Page oldPage, Page newPage);
    protected virtual void OnRendererSet();
    protected virtual void UpdateTitleView();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<UpdateToolbarItems>d__37")]
protected virtual Task UpdateToolbarItems();
    private void LeftBarButtonItemHandler(UIViewController controller, bool isRootPage);
    private UIImage DrawHamburger();
    private void OnMenuButtonPressed(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<OnToolbarItemsChanged>d__41")]
private void OnToolbarItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<SetBackButtonBehavior>d__42")]
private void SetBackButtonBehavior(BackButtonBehavior value);
    private void OnBackButtonCommandCanExecuteChanged(object sender, EventArgs e);
    private SearchHandler get_SearchHandler();
    private void set_SearchHandler(SearchHandler value);
    protected virtual void OnSearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void RemoveSearchController(UINavigationItem navigationItem);
    protected virtual void UpdateSearchIsEnabled(UISearchController searchController);
    protected virtual void UpdateSearchVisibility(UISearchController searchController);
    private void AttachSearchController();
    private void BookmarkButtonClicked(object sender, EventArgs e);
    private void DettachSearchController();
    private void OnSearchItemSelected(object sender, object e);
    private void SearchButtonClicked(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<SetSearchBarIcon>d__57")]
private void SetSearchBarIcon(UISearchBar searchBar, ImageSource source, UISearchBarIcon icon);
    private void PageAppearing(object sender, EventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <UpdateToolbarItems>b__37_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <UpdateToolbarItems>b__37_1(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <LeftBarButtonItemHandler>b__38_0();
    [CompilerGeneratedAttribute]
private void <AttachSearchController>b__52_0(UISearchController sc);
}
public class Xamarin.Forms.Platform.iOS.ShellRenderer : UIViewController {
    private IShellItemRenderer _currentShellItemRenderer;
    private bool _disposed;
    private IShellFlyoutRenderer _flyoutRenderer;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    private bool Xamarin.Forms.Platform.iOS.IShellContext.AllowFlyoutGesture { get; }
    private IShellItemRenderer Xamarin.Forms.Platform.iOS.IShellContext.CurrentShellItemRenderer { get; }
    private IShellFlyoutRenderer FlyoutRenderer { get; private set; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public Shell Shell { get; }
    public UIViewController ViewController { get; }
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IShellContext.get_AllowFlyoutGesture();
    private sealed virtual override IShellItemRenderer Xamarin.Forms.Platform.iOS.IShellContext.get_CurrentShellItemRenderer();
    private sealed virtual override IShellNavBarAppearanceTracker Xamarin.Forms.Platform.iOS.IShellContext.CreateNavBarAppearanceTracker();
    private sealed virtual override IShellPageRendererTracker Xamarin.Forms.Platform.iOS.IShellContext.CreatePageRendererTracker();
    private sealed virtual override IShellFlyoutContentRenderer Xamarin.Forms.Platform.iOS.IShellContext.CreateShellFlyoutContentRenderer();
    private sealed virtual override IShellSearchResultsRenderer Xamarin.Forms.Platform.iOS.IShellContext.CreateShellSearchResultsRenderer();
    private sealed virtual override IShellSectionRenderer Xamarin.Forms.Platform.iOS.IShellContext.CreateShellSectionRenderer(ShellSection shellSection);
    private sealed virtual override IShellTabBarAppearanceTracker Xamarin.Forms.Platform.iOS.IShellContext.CreateTabBarAppearanceTracker();
    private IShellFlyoutRenderer get_FlyoutRenderer();
    private void set_FlyoutRenderer(IShellFlyoutRenderer value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    public sealed virtual UIView get_NativeView();
    public sealed virtual Shell get_Shell();
    public sealed virtual UIViewController get_ViewController();
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual void RegisterEffect(Effect effect);
    public sealed virtual void SetElement(VisualElement element);
    public virtual void SetElementSize(Size size);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual IShellFlyoutRenderer CreateFlyoutRenderer();
    protected virtual IShellNavBarAppearanceTracker CreateNavBarAppearanceTracker();
    protected virtual IShellPageRendererTracker CreatePageRendererTracker();
    protected virtual IShellFlyoutContentRenderer CreateShellFlyoutContentRenderer();
    protected virtual IShellItemRenderer CreateShellItemRenderer(ShellItem item);
    protected virtual IShellItemTransition CreateShellItemTransition();
    protected virtual IShellSearchResultsRenderer CreateShellSearchResultsRenderer();
    protected virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection shellSection);
    protected virtual IShellTabBarAppearanceTracker CreateTabBarAppearanceTracker();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnCurrentItemChanged();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnElementSet(Shell element);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellRenderer/<SetCurrentShellItemController>d__48")]
protected void SetCurrentShellItemController(IShellItemRenderer value);
    protected virtual void UpdateBackgroundColor();
    private void SetupCurrentShellItem();
}
public class Xamarin.Forms.Platform.iOS.ShellScrollViewTracker : object {
    private bool _disposed;
    private bool _isInShell;
    private bool _isInItems;
    private IVisualElementRenderer _renderer;
    private UIScrollView _scrollView;
    private ShellSection _shellSection;
    private Thickness _lastInset;
    private double _tabThickness;
    public ShellScrollViewTracker(IVisualElementRenderer renderer);
    private sealed virtual override void Xamarin.Forms.IShellContentInsetObserver.OnInsetChanged(Thickness inset, double tabThickness);
    public void OnLayoutSubviews();
    public bool Reset();
    private void UpdateContentInset(Thickness inset, double tabThickness);
    private void UpdateVerticalBounce();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.ShellSearchResultsRenderer : UITableViewController {
    private IShellContext _context;
    private DataTemplate _defaultTemplate;
    [CompilerGeneratedAttribute]
private EventHandler`1<object> ItemSelected;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <DeleteRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <InsertRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <ReloadRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <ReloadSectionsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchHandler <SearchHandler>k__BackingField;
    private SearchHandler Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.SearchHandler { get; private set; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.ViewController { get; }
    private DataTemplate DefaultTemplate { get; }
    protected UITableViewRowAnimation DeleteRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation InsertRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadSectionsAnimation { get; protected set; }
    private ISearchHandlerController SearchController { get; }
    private SearchHandler SearchHandler { get; private set; }
    public ShellSearchResultsRenderer(IShellContext context);
    private sealed virtual override SearchHandler Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.get_SearchHandler();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.set_SearchHandler(SearchHandler value);
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.get_ViewController();
    private DataTemplate get_DefaultTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ItemSelected(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ItemSelected(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_DeleteRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_DeleteRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_InsertRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_InsertRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_ReloadRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_ReloadRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_ReloadSectionsAnimation();
    [CompilerGeneratedAttribute]
protected void set_ReloadSectionsAnimation(UITableViewRowAnimation value);
    private ISearchHandlerController get_SearchController();
    [CompilerGeneratedAttribute]
private SearchHandler get_SearchHandler();
    [CompilerGeneratedAttribute]
private void set_SearchHandler(SearchHandler value);
    protected virtual void Dispose(bool disposing);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual nint RowsInSection(UITableView tableView, nint section);
    private NSIndexPath[] GetPaths(int section, int index, int count);
    private void OnListProxyChanged(object sender, ListProxyChangedEventArgs e);
    private void OnProxyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnSearchHandlerSet();
    [CompilerGeneratedAttribute]
private object <get_DefaultTemplate>b__8_0();
}
public class Xamarin.Forms.Platform.iOS.ShellSectionRenderer : UINavigationController {
    [CompilerGeneratedAttribute]
private bool <IsInMoreTab>k__BackingField;
    private IShellContext _context;
    private Dictionary`2<Element, IShellPageRendererTracker> _trackers;
    private IShellNavBarAppearanceTracker _appearanceTracker;
    private Dictionary`2<UIViewController, TaskCompletionSource`1<bool>> _completionTasks;
    private Page _displayedPage;
    private bool _disposed;
    private bool _firstLayoutCompleted;
    private bool _ignorePop;
    private TaskCompletionSource`1<bool> _popCompletionTask;
    private IShellSectionRootRenderer _renderer;
    private ShellSection _shellSection;
    public bool IsInMoreTab { get; public set; }
    public ShellSection ShellSection { get; public set; }
    public UIViewController ViewController { get; }
    public ShellSectionRenderer(IShellContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInMoreTab();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInMoreTab(bool value);
    public sealed virtual ShellSection get_ShellSection();
    public sealed virtual void set_ShellSection(ShellSection value);
    public sealed virtual UIViewController get_ViewController();
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    public virtual UIViewController PopViewController(bool animated);
    [ExportAttribute("navigationBar:shouldPopItem:")]
public bool ShouldPopItem(UINavigationBar navigationBar, UINavigationItem item);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    protected virtual void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void LoadPages();
    protected virtual void OnDisplayedPageChanged(Page page);
    protected virtual void OnInsertRequested(NavigationRequestedEventArgs e);
    protected virtual void OnNavigationRequested(object sender, NavigationRequestedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellSectionRenderer/<OnPopRequested>d__32")]
protected virtual void OnPopRequested(NavigationRequestedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellSectionRenderer/<OnPopToRootRequested>d__33")]
protected virtual void OnPopToRootRequested(NavigationRequestedEventArgs e);
    protected virtual void OnPushRequested(NavigationRequestedEventArgs e);
    protected virtual void OnRemoveRequested(NavigationRequestedEventArgs e);
    protected virtual void OnShellSectionSet();
    protected virtual void UpdateTabBarItem();
    private void DisposePage(Page page);
    private Element ElementForViewController(UIViewController viewController);
    private void OnDisplayedPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void PushPage(Page page, bool animated, TaskCompletionSource`1<bool> completionSource);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellSectionRenderer/<SendPoppedOnCompletion>d__42")]
private void SendPoppedOnCompletion(Task popTask);
    private bool ShouldPop();
    private void UpdateNavigationBarHidden();
    private void UpdateShadowImages();
    [CompilerGeneratedAttribute]
private void <ShouldPopItem>b__23_0();
    [CompilerGeneratedAttribute]
private void <UpdateTabBarItem>b__37_0(UIImage icon);
}
public class Xamarin.Forms.Platform.iOS.ShellSectionRootHeader : UICollectionViewController {
    private Color _defaultBackgroundColor;
    private Color _defaultForegroundColor;
    private Color _defaultUnselectedColor;
    private static NSString CellId;
    private IShellContext _shellContext;
    private UIView _bar;
    private UIView _bottomShadow;
    private Color _selectedColor;
    private Color _unselectedColor;
    [CompilerGeneratedAttribute]
private double <SelectedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    public double SelectedIndex { get; public set; }
    public ShellSection ShellSection { get; public set; }
    public ShellSectionRootHeader(IShellContext shellContext);
    private static ShellSectionRootHeader();
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    protected virtual void ResetAppearance();
    protected virtual void SetAppearance(ShellAppearance appearance);
    private void SetValues(Color backgroundColor, Color foregroundColor, Color unselectedColor);
    [CompilerGeneratedAttribute]
public double get_SelectedIndex();
    [CompilerGeneratedAttribute]
public void set_SelectedIndex(double value);
    [CompilerGeneratedAttribute]
public ShellSection get_ShellSection();
    [CompilerGeneratedAttribute]
public void set_ShellSection(ShellSection value);
    public virtual bool CanMoveItem(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual nint GetItemsCount(UICollectionView collectionView, nint section);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual nint NumberOfSections(UICollectionView collectionView);
    public virtual bool ShouldSelectItem(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    protected void LayoutBar();
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateSelectedIndex(bool animated);
    private void OnShellSectionItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.iOS.ShellSectionRootRenderer : UIViewController {
    private static int HeaderHeight;
    private IShellContext _shellContext;
    private UIView _blurView;
    private UIView _containerArea;
    private int _currentIndex;
    private ShellSectionRootHeader _header;
    private bool _isAnimating;
    private Dictionary`2<ShellContent, IVisualElementRenderer> _renderers;
    private IShellPageRendererTracker _tracker;
    private bool _didLayoutSubviews;
    private int _lastTabThickness;
    private Thickness _lastInset;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    private bool Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.ShowNavBar { get; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.ViewController { get; }
    private ShellSection ShellSection { get; private set; }
    public ShellSectionRootRenderer(ShellSection shellSection, IShellContext shellContext);
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.get_ShowNavBar();
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.get_ViewController();
    [CompilerGeneratedAttribute]
private ShellSection get_ShellSection();
    [CompilerGeneratedAttribute]
private void set_ShellSection(ShellSection value);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void ViewSafeAreaInsetsDidChange();
    protected virtual void Dispose(bool disposing);
    protected virtual void LayoutRenderers();
    protected virtual void LoadRenderers();
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateHeaderVisibility();
    private void OnShellSectionItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void LayoutHeader();
}
public class Xamarin.Forms.Platform.iOS.ShellTabBarAppearanceTracker : SafeShellTabBarAppearanceTracker {
}
public class Xamarin.Forms.Platform.iOS.ShellTableViewController : UITableViewController {
    private IShellContext _context;
    private UIContainerView _headerView;
    private ShellTableViewSource _source;
    private double _headerMin;
    private double _headerOffset;
    private double _headerSize;
    private bool _isDisposed;
    private double HeaderMax { get; }
    private double HeaderTopMargin { get; }
    public ShellTableViewController(IShellContext context, UIContainerView headerView, Action`1<Element> onElementSelected);
    private void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnHeaderSizeChanged(object sender, EventArgs e);
    private void OnStructureChanged(object sender, EventArgs e);
    private void UpdateVerticalScrollMode();
    public void LayoutParallax();
    private void SetHeaderContentInset();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    private void OnScrolled(object sender, UIScrollView e);
    private double get_HeaderMax();
    private double get_HeaderTopMargin();
}
public class Xamarin.Forms.Platform.iOS.ShellTableViewSource : UITableViewSource {
    private IShellContext _context;
    private Action`1<Element> _onElementSelected;
    private DataTemplate _defaultItemTemplate;
    private DataTemplate _defaultMenuItemTemplate;
    private List`1<List`1<Element>> _groups;
    [CompilerGeneratedAttribute]
private EventHandler`1<UIScrollView> ScrolledEvent;
    public List`1<List`1<Element>> Groups { get; }
    protected DataTemplate DefaultItemTemplate { get; }
    protected DataTemplate DefaultMenuItemTemplate { get; }
    public ShellTableViewSource(IShellContext context, Action`1<Element> onElementSelected);
    [CompilerGeneratedAttribute]
public void add_ScrolledEvent(EventHandler`1<UIScrollView> value);
    [CompilerGeneratedAttribute]
public void remove_ScrolledEvent(EventHandler`1<UIScrollView> value);
    public List`1<List`1<Element>> get_Groups();
    protected virtual DataTemplate get_DefaultItemTemplate();
    protected virtual DataTemplate get_DefaultMenuItemTemplate();
    public void ClearCache();
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat GetHeightForFooter(UITableView tableView, nint section);
    public virtual UIView GetViewForFooter(UITableView tableView, nint section);
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nint RowsInSection(UITableView tableview, nint section);
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual void WillDisplay(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);
    private View GenerateDefaultCell(string textBinding, string iconBinding);
    [CompilerGeneratedAttribute]
private object <get_DefaultItemTemplate>b__12_0();
    [CompilerGeneratedAttribute]
private object <get_DefaultMenuItemTemplate>b__14_0();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.SizeExtensions : object {
    [ExtensionAttribute]
public static CGSize ToSizeF(Size size);
}
public class Xamarin.Forms.Platform.iOS.SizeThatFitsDelegate : MulticastDelegate {
    public SizeThatFitsDelegate(object object, IntPtr method);
    public virtual Nullable`1<CGSize> Invoke(CGSize size);
    public virtual IAsyncResult BeginInvoke(CGSize size, AsyncCallback callback, object object);
    public virtual Nullable`1<CGSize> EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.iOS.SlideFlyoutTransition : object {
    public sealed virtual void LayoutViews(CGRect bounds, nfloat openPercent, UIView flyout, UIView shell, FlyoutBehavior behavior);
}
public class Xamarin.Forms.Platform.iOS.SliderRenderer : ViewRenderer`2<Slider, UISlider> {
    private CGSize _fitSize;
    private UIColor defaultmintrackcolor;
    private UIColor defaultmaxtrackcolor;
    private UIColor defaultthumbcolor;
    private UITapGestureRecognizer _sliderTapRecognizer;
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    private void UpdateSliderColors();
    private void UpdateMinimumTrackColor();
    private void UpdateMaximumTrackColor();
    private void UpdateThumbColor();
    private void UpdateThumbImage();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnControlValueChanged(object sender, EventArgs eventArgs);
    private void OnTouchDownControlEvent(object sender, EventArgs e);
    private void OnTouchUpControlEvent(object sender, EventArgs e);
    private void UpdateTapRecognizer();
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void UpdateValue();
    [CompilerGeneratedAttribute]
private void <UpdateThumbImage>b__12_0(UIImage uiimage);
    [CompilerGeneratedAttribute]
private void <UpdateTapRecognizer>b__17_0(UITapGestureRecognizer recognizer);
}
internal class Xamarin.Forms.Platform.iOS.SnapHelpers : object {
    public static CGPoint AdjustContentOffset(CGPoint proposedContentOffset, CGRect itemFrame, CGRect viewport, SnapPointsAlignment alignment, UICollectionViewScrollDirection scrollDirection);
    public static CGPoint FindAlignmentTarget(SnapPointsAlignment snapPointsAlignment, CGPoint contentOffset, UICollectionView collectionView, UICollectionViewScrollDirection scrollDirection);
    public static UICollectionViewLayoutAttributes FindBestSnapCandidate(UICollectionViewLayoutAttributes[] items, CGRect viewport, CGPoint alignmentTarget);
    private static nfloat Area(CGRect rect);
    private static CGPoint Center(CGRect rect);
    private static nfloat DistanceSquared(CGRect rect, CGPoint target);
    private static int Clamp(int n, int min, int max);
    private static nfloat FindAlignmentTarget(SnapPointsAlignment snapPointsAlignment, nfloat start, nfloat startInset, nfloat end, nfloat endInset);
    private static CGPoint GetViewportOffset(CGRect itemFrame, CGRect viewport, SnapPointsAlignment snapPointsAlignment, UICollectionViewScrollDirection scrollDirection);
    private static bool IsAtLeastHalfVisible(UICollectionViewLayoutAttributes item, CGRect viewport);
    private static UICollectionViewLayoutAttributes Nearer(UICollectionViewLayoutAttributes a, UICollectionViewLayoutAttributes b, CGPoint target);
    public static UICollectionViewLayoutAttributes FindNextItem(UICollectionViewLayoutAttributes[] items, UICollectionViewScrollDirection direction, int step, CGPoint scrollingVelocity, int currentIndex);
}
public class Xamarin.Forms.Platform.iOS.StepperRenderer : ViewRenderer`2<Stepper, UIStepper> {
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnValueChanged(object sender, EventArgs e);
    private void UpdateIncrement();
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void UpdateValue();
}
public class Xamarin.Forms.Platform.iOS.StreamImagesourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.StreamImagesourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.iOS.StructuredItemsViewController`1 : ItemsViewController`1<TItemsView> {
    private bool _disposed;
    private UIView _headerUIView;
    private VisualElement _headerViewFormsElement;
    private UIView _footerUIView;
    private VisualElement _footerViewFormsElement;
    protected bool IsHorizontal { get; }
    public StructuredItemsViewController`1(TItemsView structuredItemsView, ItemsViewLayout layout);
    protected virtual void Dispose(bool disposing);
    protected virtual bool get_IsHorizontal();
    public virtual void ViewWillLayoutSubviews();
    internal void UpdateFooterView();
    internal void UpdateHeaderView();
    internal void UpdateSubview(object view, DataTemplate viewTemplate, UIView& uiView, VisualElement& formsElement);
    private void UpdateHeaderFooterPosition();
    protected virtual void HandleFormsElementMeasureInvalidated(VisualElement formsElement);
    internal void UpdateLayoutMeasurements();
}
public class Xamarin.Forms.Platform.iOS.StructuredItemsViewRenderer`2 : ItemsViewRenderer`2<TItemsView, TViewController> {
    protected virtual TViewController CreateController(TItemsView itemsView, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual ItemsViewLayout SelectLayout();
    protected virtual void UpdateHeaderView();
    protected virtual void UpdateFooterView();
    public virtual void LayoutSubviews();
}
public class Xamarin.Forms.Platform.iOS.SwitchCellRenderer : CellRenderer {
    private static string CellName;
    private UIColor _defaultOnColor;
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void OnSwitchValueChanged(object sender, EventArgs eventArgs);
    private void UpdateFlowDirection(CellTableViewCell cell, SwitchCell switchCell);
    private void UpdateIsEnabled(CellTableViewCell cell, SwitchCell switchCell);
    private void UpdateOnColor(CellTableViewCell cell, SwitchCell switchCell);
}
public class Xamarin.Forms.Platform.iOS.SwitchRenderer : ViewRenderer`2<Switch, UISwitch> {
    private UIColor _defaultOnColor;
    private UIColor _defaultThumbColor;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    private void UpdateOnColor();
    private void UpdateThumbColor();
    private void OnControlValueChanged(object sender, EventArgs e);
    private void OnElementToggled(object sender, EventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.iOS.TabbedRenderer : UITabBarController {
    private bool _barBackgroundColorWasSet;
    private bool _barTextColorWasSet;
    private UIColor _defaultBarTextColor;
    private bool _defaultBarTextColorSet;
    private UIColor _defaultBarColor;
    private bool _defaultBarColorSet;
    private bool _loaded;
    private Size _queuedSize;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page Page { get; }
    public UIViewController SelectedViewController { get; public set; }
    protected TabbedPage Tabbed { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    private Page get_Page();
    public virtual UIViewController get_SelectedViewController();
    public virtual void set_SelectedViewController(UIViewController value);
    protected TabbedPage get_Tabbed();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private UIViewController GetViewController(Page page);
    private void HandleFinishedCustomizingViewControllers(object sender, UITabBarCustomizeChangeEventArgs e);
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    private void UpdateCurrentPagePreferredStatusBarUpdateAnimation();
    private void UpdatePrefersStatusBarHiddenOnPages();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    private void UpdatePrefersHomeIndicatorAutoHiddenOnPages();
    private void Reset();
    private void SetControllers();
    private void SetupPage(Page page, int index);
    private void TeardownPage(Page page, int index);
    private void UpdateBarBackgroundColor();
    private void UpdateBarTextColor();
    private void UpdateChildrenOrderIndex(UIViewController[] viewControllers);
    private void UpdateCurrentPage();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.TabbedRenderer/<SetTabBarItem>d__55")]
private void SetTabBarItem(IVisualElementRenderer renderer);
    private void UpdateSelectedTabColors();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.TabbedRenderer/<GetIcon>d__57")]
protected virtual Task`1<Tuple`2<UIImage, UIImage>> GetIcon(Page page);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__38_0(object o, int i, bool c);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__38_1(object o, int i);
}
public class Xamarin.Forms.Platform.iOS.TabletMasterDetailRenderer : UISplitViewController {
    private UIViewController _detailController;
    private bool _disposed;
    private EventTracker _events;
    private InnerDelegate _innerDelegate;
    private nfloat _masterWidth;
    private EventedViewController _masterController;
    private MasterDetailPage _masterDetailPage;
    private VisualElementTracker _tracker;
    private CGSize _previousSize;
    private CGSize _previousViewDidLayoutSize;
    private UISplitViewControllerDisplayMode _previousDisplayMode;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page PageController { get; }
    private Element ElementController { get; }
    private bool IsMasterVisible { get; }
    protected MasterDetailPage MasterDetailPage { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    private Page get_PageController();
    private Element get_ElementController();
    private bool get_IsMasterVisible();
    protected MasterDetailPage get_MasterDetailPage();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    private void UpdateMasterBehavior(CGSize newBounds);
    public virtual void ViewWillDisappear(bool animated);
    public virtual void ViewWillLayoutSubviews();
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void ClearControllers();
    private void HandleMasterPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void ViewWillTransitionToSize(CGSize toSize, IUIViewControllerTransitionCoordinator coordinator);
    private void MasterControllerDidAppear(object sender, EventArgs e);
    private void MasterControllerWillDisappear(object sender, EventArgs e);
    private void PerformButtonSelector();
    private void ToggleMaster();
    private void UpdateBackground();
    private void UpdateControllers();
    private void UpdateFlowDirection();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__54_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.TabletShellFlyoutRenderer : UISplitViewController {
    private IShellContext _context;
    private UIViewController _content;
    private bool _isPresented;
    private FlyoutBehavior _flyoutBehavior;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer <FlyoutContent>k__BackingField;
    private UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.ViewController { get; }
    private UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.View { get; }
    private IShellFlyoutContentRenderer FlyoutContent { get; private set; }
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_ViewController();
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_View();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.AttachFlyout(IShellContext context, UIViewController content);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer get_FlyoutContent();
    [CompilerGeneratedAttribute]
private void set_FlyoutContent(IShellFlyoutContentRenderer value);
    private void OnFlyoutContentWillAppear(object sender, EventArgs e);
    private void OnFlyoutContentWillDisappear(object sender, EventArgs e);
    private void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void ToggleFlyout();
    protected virtual void OnFlyoutIsPresentedChanged();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.TableViewModelRenderer : UITableViewSource {
    private Dictionary`2<nint, Cell> _headerCells;
    protected bool HasBoundGestures;
    protected UITableView Table;
    protected TableView View;
    [CompilerGeneratedAttribute]
private bool <AutomaticallyDeselect>k__BackingField;
    public bool AutomaticallyDeselect { get; public set; }
    public TableViewModelRenderer(TableView model);
    [CompilerGeneratedAttribute]
public bool get_AutomaticallyDeselect();
    [CompilerGeneratedAttribute]
public void set_AutomaticallyDeselect(bool value);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat GetHeightForHeader(UITableView tableView, nint section);
    public virtual UIView GetViewForHeader(UITableView tableView, nint section);
    public virtual void WillDisplayHeaderView(UITableView tableView, UIView headerView, nint section);
    public void LongPress(UILongPressGestureRecognizer gesture);
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nint RowsInSection(UITableView tableview, nint section);
    public virtual String[] SectionIndexTitles(UITableView tableView);
    public virtual string TitleForHeader(UITableView tableView, nint section);
    private void BindGestures(UITableView tableview);
    private void Tap(UITapGestureRecognizer gesture);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.iOS.TableViewRenderer : ViewRenderer`2<TableView, UITableView> {
    private static int DefaultRowHeight;
    private KeyboardInsetTracker _insetTracker;
    private UIView _originalBackgroundView;
    private CGRect _previousFrame;
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateNativeWidget();
    private void SetSource();
    private void UpdateBackgroundView();
    private void UpdateRowHeight();
    private void UpdateEstimatedRowHeight();
    [CompilerGeneratedAttribute]
private UIWindow <OnElementChanged>b__7_0();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__7_1(UIEdgeInsets insets);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__7_2(CGPoint point);
}
public abstract class Xamarin.Forms.Platform.iOS.TemplatedCell : ItemsViewCell {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ContentSizeChanged;
    protected CGSize ConstrainedSize;
    protected nfloat ConstrainedDimension;
    private DataTemplate _currentTemplate;
    private Size _size;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <VisualElementRenderer>k__BackingField;
    internal IVisualElementRenderer VisualElementRenderer { get; private set; }
    public bool Selected { get; public set; }
    [ExportAttribute("initWithFrame:")]
protected TemplatedCell(CGRect frame);
    [CompilerGeneratedAttribute]
public void add_ContentSizeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContentSizeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal IVisualElementRenderer get_VisualElementRenderer();
    [CompilerGeneratedAttribute]
private void set_VisualElementRenderer(IVisualElementRenderer value);
    public virtual void ConstrainTo(CGSize constraint);
    public virtual void ConstrainTo(nfloat constant);
    public virtual UICollectionViewLayoutAttributes PreferredLayoutAttributesFittingAttributes(UICollectionViewLayoutAttributes layoutAttributes);
    public void Bind(ItemsView itemsView, object bindingContext);
    public void Bind(DataTemplate template, object bindingContext, ItemsView itemsView);
    private void SetRenderer(IVisualElementRenderer renderer);
    protected void Layout(CGSize constraints);
    private void ClearSubviews();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    protected abstract virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
    private void MeasureInvalidated(object sender, EventArgs args);
    protected void OnContentSizeChanged();
}
internal static class Xamarin.Forms.Platform.iOS.TemplateHelpers : object {
    public static IVisualElementRenderer CreateRenderer(View view);
    public static ValueTuple`2<UIView, VisualElement> RealizeView(object view, DataTemplate viewTemplate, ItemsView itemsView);
}
public class Xamarin.Forms.Platform.iOS.TextCellRenderer : CellRenderer {
    private static Color DefaultDetailColor;
    private static Color DefaultTextColor;
    private static TextCellRenderer();
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    protected virtual void HandleCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateAutomationId(CellTableViewCell tvc, TextCell cell);
    protected virtual void HandlePropertyChanged(object sender, PropertyChangedEventArgs args);
    private static void UpdateIsEnabled(CellTableViewCell cell, TextCell entryCell);
}
public class Xamarin.Forms.Platform.iOS.TimePickerRenderer : TimePickerRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.TimePickerRendererBase`1 : ViewRenderer`2<TimePicker, TControl> {
    private UIDatePicker _picker;
    private UIColor _defaultTextColor;
    private bool _disposed;
    private bool _useLegacyColorManagement;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void OnValueChanged(object sender, EventArgs e);
    private void UpdateFlowDirection();
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdateTextColor();
    private void UpdateCharacterSpacing();
    private void UpdateTime();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ToolbarItemExtensions : object {
    [ExtensionAttribute]
public static UIBarButtonItem ToUIBarButtonItem(ToolbarItem item, bool forceName);
    [ExtensionAttribute]
public static UIBarButtonItem ToUIBarButtonItem(ToolbarItem item, bool forceName, bool forcePrimary);
}
public class Xamarin.Forms.Platform.iOS.UIContainerCell : UITableViewCell {
    private IVisualElementRenderer _renderer;
    private object _bindingContext;
    [CompilerGeneratedAttribute]
private View <View>k__BackingField;
    public View View { get; }
    public object BindingContext { get; public set; }
    public UIContainerCell(string cellId, View view);
    [CompilerGeneratedAttribute]
public View get_View();
    public object get_BindingContext();
    public void set_BindingContext(object value);
    public virtual void LayoutSubviews();
    private void UpdateVisualState();
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.iOS.UIContainerView : UIView {
    private View _view;
    private IVisualElementRenderer _renderer;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler HeaderSizeChanged;
    [CompilerGeneratedAttribute]
private double <MeasuredHeight>k__BackingField;
    internal double MeasuredHeight { get; private set; }
    public Thickness Margin { get; }
    public UIContainerView(View view);
    [CompilerGeneratedAttribute]
internal void add_HeaderSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_HeaderSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal double get_MeasuredHeight();
    [CompilerGeneratedAttribute]
private void set_MeasuredHeight(double value);
    internal bool MeasureIfNeeded();
    public Thickness get_Margin();
    private void ReMeasure();
    private void OnMeasureInvalidated(object sender, EventArgs e);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.UIViewExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<UIView> Descendants(UIView self);
    [ExtensionAttribute]
public static SizeRequest GetSizeRequest(UIView self, double widthConstraint, double heightConstraint, double minimumWidth, double minimumHeight);
    [ExtensionAttribute]
public static void SetBinding(UIView view, string propertyName, BindingBase bindingBase, string updateSourceEventName);
    [ExtensionAttribute]
public static void SetBinding(UIView self, BindableProperty targetProperty, BindingBase binding);
    [ExtensionAttribute]
public static void SetValue(UIView target, BindableProperty targetProperty, object value);
    [ExtensionAttribute]
public static void SetBindingContext(UIView target, object bindingContext, Func`2<UIView, IEnumerable`1<UIView>> getChildren);
    [ExtensionAttribute]
internal static void TransferbindablePropertiesToWrapper(UIView target, View wrapper);
    [ExtensionAttribute]
internal static T FindDescendantView(UIView view);
    [ExtensionAttribute]
internal static UIView FindFirstResponder(UIView view);
}
public class Xamarin.Forms.Platform.iOS.UnEvenTableViewModelRenderer : TableViewModelRenderer {
    public UnEvenTableViewModelRenderer(TableView model);
    public virtual nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath);
}
internal class Xamarin.Forms.Platform.iOS.VerticalCell : WidthConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public VerticalCell(CGRect frame);
    private static VerticalCell();
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.VerticalDefaultCell : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public VerticalDefaultCell(CGRect frame);
    private static VerticalDefaultCell();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.VerticalDefaultSupplementalView : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public VerticalDefaultSupplementalView(CGRect frame);
    private static VerticalDefaultSupplementalView();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.VerticalSupplementaryView : WidthConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
public VerticalSupplementaryView(CGRect frame);
    private static VerticalSupplementaryView();
    public virtual CGSize Measure();
}
public class Xamarin.Forms.Platform.iOS.ViewCellRenderer : CellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ViewExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Page> GetParentPages(Page target);
    [ExtensionAttribute]
internal static T FindParentOfType(VisualElement element);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.iOS.ViewExtensions/<GetParentsPath>d__2")]
[ExtensionAttribute]
internal static IEnumerable`1<Element> GetParentsPath(VisualElement self);
}
public abstract class Xamarin.Forms.Platform.iOS.ViewRenderer : ViewRenderer`2<View, UIView> {
}
public abstract class Xamarin.Forms.Platform.iOS.ViewRenderer`2 : VisualElementRenderer`1<TView> {
    private string _defaultAccessibilityLabel;
    private string _defaultAccessibilityHint;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private UIColor _defaultColor;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> _elementPropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanging;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanged;
    [CompilerGeneratedAttribute]
private TNativeView <Control>k__BackingField;
    private protected bool IsElementOrControlEmpty { get; }
    public TNativeView Control { get; private set; }
    private UIView Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.Control { get; }
    private UIView Xamarin.Forms.Platform.iOS.ITabStop.TabStop { get; }
    protected bool ManageNativeControlLifetime { get; }
    [CompilerGeneratedAttribute]
private void add__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__controlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanged(EventHandler value);
    private protected bool get_IsElementOrControlEmpty();
    protected virtual TNativeView CreateNativeControl();
    [CompilerGeneratedAttribute]
public sealed virtual TNativeView get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(TNativeView value);
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.get_Control();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.add_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.remove_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.add_ControlChanged(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.remove_ControlChanged(EventHandler value);
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.ITabStop.get_TabStop();
    public virtual void LayoutSubviews();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual bool get_ManageNativeControlLifetime();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAccessibilityHint();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetIsAccessibilityElement();
    protected virtual void SetAutomationId(string id);
    protected virtual void SetBackgroundColor(Color color);
    protected void SetNativeControl(TNativeView uiview);
    internal virtual void SendVisualElementInitialized(VisualElement element, UIView nativeView);
    private void UpdateBackgroundColor();
    private void UpdateIsEnabled();
    private void UpdateFlowDirection();
    private void ViewOnFocusChangeRequested(object sender, FocusRequestArgs focusRequestArgs);
}
public class Xamarin.Forms.Platform.iOS.VisualElementChangedEventArgs : ElementChangedEventArgs`1<VisualElement> {
    public VisualElementChangedEventArgs(VisualElement oldElement, VisualElement newElement);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.VisualElementExtensions : object {
    [ExtensionAttribute]
public static IVisualElementRenderer GetRenderer(VisualElement self);
    [ExtensionAttribute]
internal static bool UseLegacyColorManagement(T element);
}
public class Xamarin.Forms.Platform.iOS.VisualElementPackager : object {
    private VisualElement _element;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    private IElementController ElementController { get; }
    protected IVisualElementRenderer Renderer { get; protected set; }
    public VisualElementPackager(IVisualElementRenderer renderer);
    private VisualElementPackager(IVisualElementRenderer renderer, VisualElement element, bool isHeadless);
    private IElementController get_ElementController();
    [CompilerGeneratedAttribute]
protected IVisualElementRenderer get_Renderer();
    [CompilerGeneratedAttribute]
protected void set_Renderer(IVisualElementRenderer value);
    public sealed virtual void Dispose();
    public void Load();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnChildAdded(VisualElement view);
    protected virtual void OnChildRemoved(VisualElement view);
    private void EnsureChildrenOrder();
    private void OnChildAdded(object sender, ElementEventArgs e);
    private void OnChildRemoved(object sender, ElementEventArgs e);
    private void OnRendererElementChanged(object sender, VisualElementChangedEventArgs args);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
    private void UpdateChildrenOrder(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.iOS.VisualElementRenderer`1 : UIView {
    private UIColor _defaultColor;
    private List`1<EventHandler`1<VisualElementChangedEventArgs>> _elementChangedHandlers;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private string _defaultAccessibilityLabel;
    private string _defaultAccessibilityHint;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private EventTracker _events;
    private VisualElementRendererFlags _flags;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    private UIVisualEffectView _blur;
    private BlurEffectStyle _previousBlur;
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementChangedEventArgs`1<TElement>> ElementChanged;
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TabStop>k__BackingField;
    private UIKeyCommand[] tabCommands;
    public UIColor BackgroundColor { get; public set; }
    public TElement Element { get; private set; }
    protected bool AutoPackage { get; protected set; }
    protected bool AutoTrack { get; protected set; }
    private VisualElement Xamarin.Forms.Platform.iOS.IVisualElementRenderer.Element { get; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    protected int TabIndex { get; protected set; }
    protected bool TabStop { get; protected set; }
    public UIKeyCommand[] KeyCommands { get; }
    public sealed virtual UIColor get_BackgroundColor();
    public sealed virtual void set_BackgroundColor(UIColor value);
    [CompilerGeneratedAttribute]
public sealed virtual TElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TElement value);
    protected bool get_AutoPackage();
    protected void set_AutoPackage(bool value);
    protected bool get_AutoTrack();
    protected void set_AutoTrack(bool value);
    public static void RegisterEffect(Effect effect, UIView container, UIView control);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.iOS.IVisualElementRenderer.get_Element();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    protected internal virtual UIView GetControl();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
protected int get_TabIndex();
    [CompilerGeneratedAttribute]
protected void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
protected bool get_TabStop();
    [CompilerGeneratedAttribute]
protected void set_TabStop(bool value);
    protected void UpdateTabStop();
    protected void UpdateTabIndex();
    public UIView FocusSearch(bool forwardDirection);
    public virtual UIKeyCommand[] get_KeyCommands();
    [ExportAttribute("tabForward:")]
private void TabForward(UIKeyCommand cmd);
    [ExportAttribute("tabBackward:")]
private void TabBackward(UIKeyCommand cmd);
    public void SetElement(TElement element);
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAccessibilityHint();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetIsAccessibilityElement();
    protected virtual void SetAutomationId(string id);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBlur(BlurEffectStyle blur);
    protected virtual void UpdateNativeWidget();
    internal virtual void SendVisualElementInitialized(VisualElement element, UIView nativeView);
    private void UpdateClipToBounds();
    private void UpdateParentPageAccessibilityElements();
    private static bool IsOnViewCell(Element element);
    [CompilerGeneratedAttribute]
private void <SetElement>b__60_0(object sender, EventArgs e);
}
[FlagsAttribute]
public enum Xamarin.Forms.Platform.iOS.VisualElementRendererFlags : Enum {
    public int value__;
    public static VisualElementRendererFlags Disposed;
    public static VisualElementRendererFlags AutoTrack;
    public static VisualElementRendererFlags AutoPackage;
}
public class Xamarin.Forms.Platform.iOS.VisualElementTracker : object {
    private EventHandler`1<EventArg`1<VisualElement>> _batchCommittedHandler;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private EventHandler _sizeChangedEventHandler;
    private bool _disposed;
    private VisualElement _element;
    private bool _isInteractive;
    private Rectangle _lastBounds;
    private CALayer _layer;
    private CGPoint _originalAnchor;
    private int _updateCount;
    [CompilerGeneratedAttribute]
private bool <TrackFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler NativeControlUpdated;
    private bool TrackFrame { get; private set; }
    private IVisualElementRenderer Renderer { get; private set; }
    public VisualElementTracker(IVisualElementRenderer renderer);
    public VisualElementTracker(IVisualElementRenderer renderer, bool trackFrame);
    [CompilerGeneratedAttribute]
private bool get_TrackFrame();
    [CompilerGeneratedAttribute]
private void set_TrackFrame(bool value);
    [CompilerGeneratedAttribute]
private IVisualElementRenderer get_Renderer();
    [CompilerGeneratedAttribute]
private void set_Renderer(IVisualElementRenderer value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public void add_NativeControlUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NativeControlUpdated(EventHandler value);
    protected virtual void Dispose(bool disposing);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleRedrawNeeded(object sender, EventArgs e);
    private void HandleSizeChanged(object sender, EventArgs e);
    private void OnRendererElementChanged(object s, VisualElementChangedEventArgs e);
    private void OnUpdateNativeControl(CALayer caLayer);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
    private void UpdateNativeControl();
}
[ObsoleteAttribute("WebViewRenderer is obsolete as of 4.4.0. Please use the WkWebViewRenderer instead.")]
public class Xamarin.Forms.Platform.iOS.WebViewRenderer : UIWebView {
    private EventTracker _events;
    private bool _ignoreSourceChanges;
    private WebNavigationEvent _lastBackForwardEvent;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private WebView WebView { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private UIView Xamarin.Forms.Platform.iOS.ITabStop.TabStop { get; }
    private WebView get_WebView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual void LoadHtml(string html, string baseUrl);
    public sealed virtual void LoadUrl(string url);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Load();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WebViewRenderer/<OnEvaluateJavaScriptRequested>d__26")]
private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
    private void UpdateCanGoBackForward();
    public sealed virtual UIView get_NativeView();
    public sealed virtual UIViewController get_ViewController();
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.ITabStop.get_TabStop();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
}
internal abstract class Xamarin.Forms.Platform.iOS.WidthConstrainedTemplatedCell : TemplatedCell {
    [ExportAttribute("initWithFrame:")]
public WidthConstrainedTemplatedCell(CGRect frame);
    public virtual void ConstrainTo(CGSize constraint);
    protected virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
}
public class Xamarin.Forms.Platform.iOS.WkWebViewRenderer : WKWebView {
    private EventTracker _events;
    private bool _ignoreSourceChanges;
    private WebNavigationEvent _lastBackForwardEvent;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private WebView WebView { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private UIView Xamarin.Forms.Platform.iOS.ITabStop.TabStop { get; }
    public WkWebViewRenderer(WKWebViewConfiguration config);
    private WebView get_WebView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual void LoadHtml(string html, string baseUrl);
    public sealed virtual void LoadUrl(string url);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Load();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<OnEvaluateJavaScriptRequested>d__27")]
private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
    private void UpdateCanGoBackForward();
    public sealed virtual UIView get_NativeView();
    public sealed virtual UIViewController get_ViewController();
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.ITabStop.get_TabStop();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
}
public class Xamarin.Forms.ViewInitializedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UIView <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <View>k__BackingField;
    public UIView NativeView { get; internal set; }
    public VisualElement View { get; internal set; }
    [CompilerGeneratedAttribute]
public UIView get_NativeView();
    [CompilerGeneratedAttribute]
internal void set_NativeView(UIView value);
    [CompilerGeneratedAttribute]
public VisualElement get_View();
    [CompilerGeneratedAttribute]
internal void set_View(VisualElement value);
}
