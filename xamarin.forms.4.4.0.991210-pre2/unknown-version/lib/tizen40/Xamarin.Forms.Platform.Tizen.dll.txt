internal class ThisAssembly : object {
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportCellAttribute : HandlerAttribute {
    public ExportCellAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportHandlerAttribute : HandlerAttribute {
    public ExportHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportImageSourceHandlerAttribute : HandlerAttribute {
    public ExportImageSourceHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportRendererAttribute : HandlerAttribute {
    public ExportRendererAttribute(Type handler, Type target);
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals);
}
internal static class Xamarin.Forms.Flags : object {
    internal static string LightweightPlatformExperimental;
    internal static string DisableTabIndex;
}
[ExtensionAttribute]
public static class Xamarin.Forms.Forms : object {
    private static Lazy`1<string> s_profile;
    private static Lazy`1<int> s_dpi;
    private static Lazy`1<double> s_elmScale;
    private static Lazy`1<DeviceOrientation> s_naturalOrientation;
    private static bool _useDeviceIndependentPixel;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ViewInitializedEventArgs> ViewInitialized;
    [CompilerGeneratedAttribute]
private static CoreApplication <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private static EvasObject <NativeParent>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private static TizenTitleBarVisibility <TitleBarVisibility>k__BackingField;
    private static IReadOnlyList`1<string> s_flags;
    public static CoreApplication Context { get; internal set; }
    public static EvasObject NativeParent { get; internal set; }
    public static Layout BaseLayout { get; }
    public static bool IsInitialized { get; private set; }
    public static DeviceOrientation NaturalOrientation { get; }
    internal static TizenTitleBarVisibility TitleBarVisibility { get; private set; }
    public static IReadOnlyList`1<string> Flags { get; }
    private static Forms();
    [CompilerGeneratedAttribute]
public static void add_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static CoreApplication get_Context();
    [CompilerGeneratedAttribute]
internal static void set_Context(CoreApplication value);
    [CompilerGeneratedAttribute]
public static EvasObject get_NativeParent();
    [CompilerGeneratedAttribute]
internal static void set_NativeParent(EvasObject value);
    public static Layout get_BaseLayout();
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    public static DeviceOrientation get_NaturalOrientation();
    [CompilerGeneratedAttribute]
internal static TizenTitleBarVisibility get_TitleBarVisibility();
    [CompilerGeneratedAttribute]
private static void set_TitleBarVisibility(TizenTitleBarVisibility value);
    [ExtensionAttribute]
internal static void SendViewInitialized(VisualElement self, EvasObject nativeView);
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    public static void SetTitleBarVisibility(TizenTitleBarVisibility visibility);
    public static void Init(CoreApplication application);
    public static void Init(CoreApplication application, bool useDeviceIndependentPixel);
    public static void Init(InitializationOptions options);
    private static void SetupInit(CoreApplication application, Nullable`1<InitializationOptions> maybeOptions);
    private static Color GetAccentColor(string profile);
    public static int ConvertToPixel(double dp);
    public static int ConvertToScaledPixel(double dp);
    public static double ConvertToScaledDP(int pixel);
    public static double ConvertToScaledDP(double pixel);
    public static int ConvertToEflFontPoint(double sp);
    public static double ConvertToDPFont(int eflPt);
    public static string GetProfile();
    [EditorBrowsableAttribute("1")]
public static void Preload();
}
public class Xamarin.Forms.InitializationOptions : ValueType {
    public CoreApplication Context;
    public bool UseDeviceIndependentPixel;
    public HandlerAttribute[] Handlers;
    public Assembly[] Assemblies;
    public EffectScope[] EffectScopes;
    public InitializationFlags Flags;
    public InitializationOptions(CoreApplication application, bool useDeviceIndependentPixel, HandlerAttribute[] handlers);
    public InitializationOptions(CoreApplication application, bool useDeviceIndependentPixel, Assembly[] assemblies);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PageExtensions : object {
    [ExtensionAttribute]
public static EvasObject CreateEvasObject(Page page, EvasObject parent, bool hasAlpha);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.AccessibilityExtensions : object {
    [ExtensionAttribute]
public static string SetAccessibilityName(IAccessibleObject Control, Element Element, string _defaultAccessibilityName);
    [ExtensionAttribute]
public static string SetAccessibilityDescription(IAccessibleObject Control, Element Element, string _defaultAccessibilityDescription);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsAccessibilityElement(IAccessibleObject Control, Element Element, Nullable`1<bool> _defaultIsAccessibilityElement);
    [ExtensionAttribute]
public static void SetLabeledBy(IAccessibleObject Control, Element Element);
}
public class Xamarin.Forms.Platform.Tizen.ActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, ProgressBar> {
    private static Color s_defaultColor;
    private static ActivityIndicatorRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    private void UpdateColor(bool initialize);
    private void UpdateIsRunning();
    protected virtual void UpdateIsEnabled(bool initialize);
}
internal enum Xamarin.Forms.Platform.Tizen.BarItemColorType : Enum {
    public int value__;
    public static BarItemColorType Background;
    public static BarItemColorType Text;
    public static BarItemColorType SelectedTab;
    public static BarItemColorType UnselectedTab;
}
public class Xamarin.Forms.Platform.Tizen.BoxViewRenderer : ViewRenderer`2<BoxView, RoundRectangle> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void UpdateLayout();
    protected virtual void UpdateOpacity(bool initialize);
    private void OnRadiusUpdate(bool init);
    private void UpdateColor();
}
public class Xamarin.Forms.Platform.Tizen.ButtonRenderer : ViewRenderer`2<Button, Button> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual Button CreateNativeControl();
    protected virtual Size MinimumSize();
    protected virtual void UpdateThemeStyle();
    protected virtual void Dispose(bool disposing);
    private void OnButtonClicked(object sender, EventArgs e);
    private void OnButtonPressed(object sender, EventArgs e);
    private void OnButtonReleased(object sender, EventArgs e);
    private void UpdateText();
    private void UpdateFontSize();
    private void UpdateFontAttributes();
    private void UpdateFontFamily();
    private void UpdateTextColor();
    private void UpdateBitmap();
    private void UpdateBorder();
}
public class Xamarin.Forms.Platform.Tizen.CarouselPageRenderer : VisualElementRenderer`1<CarouselPage> {
    private Box _outterLayout;
    private Box _innerContainer;
    private Scroller _scroller;
    private int _pageIndex;
    private int _changedByScroll;
    private Size _layoutBound;
    private bool _isInitalized;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CarouselPage> e);
    protected virtual void OnElementReady();
    protected virtual void Dispose(bool disposing);
    private void OnInnerLayoutUpdate();
    private void OnCurrentPageChanged(object sender, EventArgs ea);
    private void OnScrolled(object sender, EventArgs e2);
    private void UpdateCarouselContent();
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private bool IsChangedByScroll();
}
public abstract class Xamarin.Forms.Platform.Tizen.CellRenderer : object {
    private static string HeightProperty;
    private Dictionary`2<Cell, Dictionary`2<string, EvasObject>> _realizedNativeViews;
    private ItemContext _currentItem;
    private GenItemClass _itemClass;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    public GenItemClass Class { get; protected set; }
    public string Style { get; protected set; }
    protected CellRenderer(string style);
    public GenItemClass get_Class();
    protected void set_Class(GenItemClass value);
    public virtual void SetGroupMode(bool enable);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
protected void set_Style(string value);
    protected GenItemClass CreateItemClass(string style);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
    protected virtual Span OnGetText(Cell cell, string part);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual void OnDeleted(Cell cell);
    protected virtual void OnUnrealizedCell(Cell cell);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    protected double FindCellContentHeight(Cell cell);
    private static Span ToNative(Span span);
    public void SendCellPropertyChanged(Cell cell, GenItem item, string property);
    public void SendUnrealizedCell(Cell cell);
    internal ItemContext GetCurrentItem();
    private string GetText(object data, string part);
    private EvasObject GetContent(object data, string part);
    private EvasObject ReusableContent(object data, string part, EvasObject old);
    private void UpdateRealizedView(Cell cell, string part, EvasObject nativeView);
    private void ItemDeleted(object data);
}
public class Xamarin.Forms.Platform.Tizen.CheckBoxRenderer : ViewRenderer`2<CheckBox, Check> {
    private String[] _onColorParts;
    private String[] _onColorEdjeParts;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void Dispose(bool disposing);
    private void OnStateChanged(object sender, EventArgs e);
    private void UpdateIsChecked();
    private void UpdateOnColor(bool initialize);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.ColorExtensions : object {
    [ExtensionAttribute]
public static Color ToNative(Color c);
    [ExtensionAttribute]
public static Color WithAlpha(Color color, double alpha);
    [ExtensionAttribute]
public static Color WithPremultiplied(Color color, double alpha);
    [ExtensionAttribute]
internal static string ToHex(Color c);
}
internal class Xamarin.Forms.Platform.Tizen.ConsoleLogger : object {
    public sealed virtual void Debug(string tag, string message, string file, string func, int line);
    public sealed virtual void Verbose(string tag, string message, string file, string func, int line);
    public sealed virtual void Info(string tag, string message, string file, string func, int line);
    public sealed virtual void Warn(string tag, string message, string file, string func, int line);
    public sealed virtual void Error(string tag, string message, string file, string func, int line);
    public sealed virtual void Fatal(string tag, string message, string file, string func, int line);
    private void Print(string level, string tag, string message, string file, string func, int line);
}
internal class Xamarin.Forms.Platform.Tizen.CustomFocusManager : object {
    private static bool s_reorderTriggered;
    private static ObservableCollection`1<CustomFocusManager> s_tabIndexList;
    private VisualElement _nextUp;
    private VisualElement _nextDown;
    private VisualElement _nextLeft;
    private VisualElement _nextRight;
    private VisualElement _nextForward;
    private VisualElement _nextBackward;
    private int _tabIndex;
    private bool _isTabStop;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private Widget <NativeView>k__BackingField;
    private VisualElement Element { get; }
    private Widget NativeView { get; }
    public int TabIndex { get; public set; }
    public bool IsTabStop { get; public set; }
    public VisualElement NextUp { get; public set; }
    public VisualElement NextDown { get; public set; }
    public VisualElement NextLeft { get; public set; }
    public VisualElement NextRight { get; public set; }
    public VisualElement NextForward { get; public set; }
    public VisualElement NextBackward { get; public set; }
    private static CustomFocusManager();
    public CustomFocusManager(VisualElement element, Widget nativeView);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private VisualElement get_Element();
    [CompilerGeneratedAttribute]
private Widget get_NativeView();
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public bool get_IsTabStop();
    public void set_IsTabStop(bool value);
    public VisualElement get_NextUp();
    public void set_NextUp(VisualElement value);
    public VisualElement get_NextDown();
    public void set_NextDown(VisualElement value);
    public VisualElement get_NextLeft();
    public void set_NextLeft(VisualElement value);
    public VisualElement get_NextRight();
    public void set_NextRight(VisualElement value);
    public VisualElement get_NextForward();
    public void set_NextForward(VisualElement value);
    public VisualElement get_NextBackward();
    public void set_NextBackward(VisualElement value);
    public sealed virtual void Dispose();
    public static void StartReorderTabIndex();
    protected virtual void Dispose(bool disposing);
    private void SetUpFocus(VisualElement next, FocusDirection direction);
    private void SetNativeCustomFocus(VisualElement next, FocusDirection direction);
    private void OnNextViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private FocusDirection GetFocusDirection(VisualElement nextView);
    private static void ReorderTabIndex();
    private static void TabIndexCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static bool PageIsVisible(Page page);
    private static bool ElementIsVisible(CustomFocusManager manager);
}
public class Xamarin.Forms.Platform.Tizen.DatePickerRenderer : ViewRenderer`2<DatePicker, EditfieldEntry> {
    private static string DialogTitle;
    private Lazy`1<IDateTimeDialog> _lazyDialog;
    protected virtual IDateTimeDialog CreateDialog();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    protected virtual Size MinimumSize();
    protected virtual void Dispose(bool disposing);
    private void OnTextBlockFocused(object sender, EventArgs e);
    private void OnDateTimeChanged(object sender, DateChangedEventArgs dcea);
    private void UpdateDate();
    private void UpdateTextColor();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    [CompilerGeneratedAttribute]
private IDateTimeDialog <OnElementChanged>b__4_0();
}
public class Xamarin.Forms.Platform.Tizen.DefaultPlatform : BindableObject {
    private NavigationModel _navModel;
    private bool _disposed;
    private Dialog _pageBusyDialog;
    private int _pageBusyCount;
    private Naviframe _internalNaviframe;
    private HashSet`1<EvasObject> _alerts;
    [CompilerGeneratedAttribute]
private EventHandler`1<RootNativeViewChangedEventArgs> RootNativeViewChanged;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAlpha>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <CurrentModalNavigationTask>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <CurrentTaskCompletionSource>k__BackingField;
    public Page Page { get; private set; }
    public bool HasAlpha { get; public set; }
    private Task CurrentModalNavigationTask { get; private set; }
    private TaskCompletionSource`1<bool> CurrentTaskCompletionSource { get; private set; }
    private IPageController CurrentPageController { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.ModalStack { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.NavigationStack { get; }
    internal DefaultPlatform(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(Page value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasAlpha();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasAlpha(bool value);
    [CompilerGeneratedAttribute]
private Task get_CurrentModalNavigationTask();
    [CompilerGeneratedAttribute]
private void set_CurrentModalNavigationTask(Task value);
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> get_CurrentTaskCompletionSource();
    [CompilerGeneratedAttribute]
private void set_CurrentTaskCompletionSource(TaskCompletionSource`1<bool> value);
    private IPageController get_CurrentPageController();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_ModalStack();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_NavigationStack();
    public sealed virtual void Dispose();
    public sealed virtual void SetPage(Page newRoot);
    public sealed virtual bool SendBackButtonPressed();
    public sealed virtual EvasObject GetRootNativeView();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnBindingContextChanged();
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<Xamarin-Forms-INavigation-PushModalAsync>d__48")]
private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal, bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<Xamarin-Forms-INavigation-PopModalAsync>d__50")]
private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<PushModalInternal>d__51")]
private Task PushModalInternal(Page modal, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<PopModalInternal>d__52")]
private Task PopModalInternal(bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<WaitForCompletion>d__53")]
private Task WaitForCompletion(bool shouldWait, TaskCompletionSource`1<bool> tcs);
    private void NaviAnimationFinished(object sender, EventArgs e);
    private void BusySetSignalNameHandler(Page sender, bool enabled);
    private void AlertSignalNameHandler(Page sender, AlertArguments arguments);
    private void ActionSheetSignalNameHandler(Page sender, ActionSheetArguments arguments);
    private bool PageIsChildOfPlatform(Page page);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private bool <SetPage>b__34_0();
}
public class Xamarin.Forms.Platform.Tizen.DefaultRenderer : VisualElementRenderer`1<VisualElement> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<VisualElement> e);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.DensityIndependentPixelExtensions : object {
    [ExtensionAttribute]
public static Rectangle ToDP(Rect rect);
    [ExtensionAttribute]
public static Rect ToPixel(Rectangle rect);
    [ExtensionAttribute]
public static Size ToDP(Size size);
    [ExtensionAttribute]
public static Size ToPixel(Size size);
}
internal class Xamarin.Forms.Platform.Tizen.Deserializer : object {
    private static string PropertyStoreFile;
    public sealed virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    public sealed virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
internal class Xamarin.Forms.Platform.Tizen.DlogLogger : object {
    public sealed virtual void Debug(string tag, string message, string file, string func, int line);
    public sealed virtual void Verbose(string tag, string message, string file, string func, int line);
    public sealed virtual void Info(string tag, string message, string file, string func, int line);
    public sealed virtual void Warn(string tag, string message, string file, string func, int line);
    public sealed virtual void Error(string tag, string message, string file, string func, int line);
    public sealed virtual void Fatal(string tag, string message, string file, string func, int line);
}
public class Xamarin.Forms.Platform.Tizen.EditorRenderer : ViewRenderer`2<Editor, Entry> {
    private bool _isSendComplate;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    private void OnTextChanged(object sender, EventArgs e);
    private void OnFocused(object sender, EventArgs e);
    private void OnUnfocused(object sender, EventArgs e);
    private void OnCompleted(object sender, EventArgs e);
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    private void UpdateKeyboard(bool initialize);
    private void UpdateIsSpellCheckEnabled();
    private void UpdateMaxLength();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private string MaxLengthFilter(Entry entry, string s);
    private void UpdateIsReadOnly();
}
public class Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TElement <OldElement>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <NewElement>k__BackingField;
    public TElement OldElement { get; private set; }
    public TElement NewElement { get; private set; }
    public ElementChangedEventArgs`1(TElement oldElement, TElement newElement);
    [CompilerGeneratedAttribute]
public TElement get_OldElement();
    [CompilerGeneratedAttribute]
private void set_OldElement(TElement value);
    [CompilerGeneratedAttribute]
public TElement get_NewElement();
    [CompilerGeneratedAttribute]
private void set_NewElement(TElement value);
}
public class Xamarin.Forms.Platform.Tizen.EntryCellRenderer : ViewCellRenderer {
    private static double s_defaultHeight;
    private static Color s_defaultLabelColor;
    private Dictionary`2<EvasObject, VisualElement> _cacheCandidate;
    private static EntryCellRenderer();
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    [CompilerGeneratedAttribute]
private void <OnGetContent>b__4_0(object sender, EventArgs e);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.EntryExtensions : object {
    [ExtensionAttribute]
internal static InputPanelReturnKeyType ToInputPanelReturnKeyType(ReturnType returnType);
}
public class Xamarin.Forms.Platform.Tizen.EntryRenderer : ViewRenderer`2<Entry, Entry> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    protected virtual Entry CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    private void OnTextChanged(object sender, EventArgs e);
    private void OnCompleted(object sender, EventArgs e);
    private void UpdateIsPassword();
    private void UpdateText();
    protected virtual void UpdateTextColor();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    private void UpdateHorizontalTextAlignment();
    private void UpdateKeyboard(bool initialize);
    private void UpdateIsSpellCheckEnabled();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private void UpdateFontWeight();
    private void UpdateMaxLength();
    private string MaxLengthFilter(Entry entry, string s);
    private void UpdateReturnType();
    private void UpdateSelectionLength();
    private void OnCursorChanged(object sender, EventArgs e);
    private int GetCursorPosition();
    private void UpdateIsReadOnly();
}
public class Xamarin.Forms.Platform.Tizen.FileImageSourceHandler : object {
    public sealed virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public class Xamarin.Forms.Platform.Tizen.FormsApplication : CoreUIApplication {
    private ITizenPlatform _platform;
    private Application _application;
    private bool _isInitialStart;
    private Window _window;
    [CompilerGeneratedAttribute]
private Layout <BaseLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<Task> <RequestingUserConsentFunc>k__BackingField;
    public Window MainWindow { get; protected set; }
    public Layout BaseLayout { get; protected set; }
    [EditorBrowsableAttribute("1")]
public static Func`1<Task> RequestingUserConsentFunc { get; public set; }
    private static FormsApplication();
    public Window get_MainWindow();
    protected void set_MainWindow(Window value);
    [CompilerGeneratedAttribute]
public Layout get_BaseLayout();
    [CompilerGeneratedAttribute]
protected void set_BaseLayout(Layout value);
    protected virtual void OnPreCreate();
    protected virtual void OnTerminate();
    protected virtual void OnAppControlReceived(AppControlReceivedEventArgs e);
    protected virtual void OnPause();
    protected virtual void OnResume();
    [CompilerGeneratedAttribute]
public static Func`1<Task> get_RequestingUserConsentFunc();
    [CompilerGeneratedAttribute]
public static void set_RequestingUserConsentFunc(Func`1<Task> value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.FormsApplication/<LoadApplication>d__21")]
public void LoadApplication(Application application);
    private void AppOnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void SetPage(Page page);
    private void InitializeWindow();
    public void Run();
    public virtual void Exit();
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__24_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__24_1(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__24_2(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__24_3(object s, RootNativeViewChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.FrameRenderer : LayoutRenderer {
    private static int _thickness;
    private static int _shadow_shift;
    private static int _shadow_thickness;
    private static Color s_DefaultColor;
    private static Color s_ShadowColor;
    private Polygon _shadow;
    private Polygon _frame;
    private static FrameRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void Dispose(bool disposing);
    private static void DrawFrame(Polygon frame, int left, int top, int right, int bottom, int thickness);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    private void UpdateGeometry();
    private void UpdateColor();
    private void UpdateShadowVisibility();
}
internal class Xamarin.Forms.Platform.Tizen.GestureDetector : object {
    private IDictionary`2<GestureType, List`1<GestureHandler>> _handlerCache;
    private IVisualElementRenderer _renderer;
    private GestureLayer _gestureLayer;
    private double _doubleTapTime;
    private double _longTapTime;
    private bool _inputTransparent;
    private bool _isEnabled;
    private View View { get; }
    public bool IsEnabled { get; public set; }
    public bool InputTransparent { get; public set; }
    public GestureDetector(IVisualElementRenderer renderer);
    private View get_View();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_InputTransparent();
    public void set_InputTransparent(bool value);
    public void Clear();
    private void CreateGestureLayer();
    private void UpdateGestureLayerEnabled();
    private void AddGestures(IEnumerable`1<IGestureRecognizer> recognizers);
    private void RemoveGestures(IEnumerable`1<IGestureRecognizer> recognizers);
    private void AddGesture(IGestureRecognizer recognizer);
    private void RemoveGesture(IGestureRecognizer recognizer);
    private void AddLineGesture(GestureType type);
    private void AddPinchGesture(GestureType type);
    private void AddTapGesture(GestureType type);
    private void AddDoubleTapGesture(GestureType type, double timeout);
    private void AddLongTapGesture(GestureType type, double timeout);
    private void AddFlickGesture(GestureType type, double timeout);
    private void AddRotateGesture(GestureType type);
    private void AddMomentumGesture(GestureType type);
    private void RemoveLineGesture();
    private void RemovePinchGesture();
    private void RemoveTapGesture(GestureType type);
    private void RemoveFlickGesture();
    private void RemoveRotateGesture();
    private void RemoveMomentumGesture();
    private void OnGestureStarted(GestureType type, object data);
    private void OnGestureMoved(GestureType type, object data);
    private void OnGestureCompleted(GestureType type, object data);
    private void OnGestureCanceled(GestureType type, object data);
    private void OnDoubleTapStarted(GestureType type, object data);
    private void OnDoubleTapCompleted(GestureType type, object data);
    private void OnLongTapStarted(GestureType type, object data);
    private void OnLongTapCompleted(GestureType type, object data);
    private GestureHandler CreateHandler(IGestureRecognizer recognizer);
    private GestureHandler LookupHandler(IGestureRecognizer recognizer);
    private void UpdateTapGesture(GestureHandler handler);
    private void UpdateLongTapGesture(GestureHandler handler);
    private void UpdateFlickGesture(GestureHandler handler);
    private void OnGestureRecognizerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnGestureRecognizerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateGestureLayer>b__17_0(object s, EventArgs e);
}
public abstract class Xamarin.Forms.Platform.Tizen.GestureHandler : object {
    [CompilerGeneratedAttribute]
private IGestureRecognizer <Recognizer>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IGestureRecognizer Recognizer { get; private set; }
    public GestureType Type { get; }
    public double Timeout { get; }
    protected GestureHandler(IGestureRecognizer recognizer);
    [CompilerGeneratedAttribute]
public IGestureRecognizer get_Recognizer();
    [CompilerGeneratedAttribute]
private void set_Recognizer(IGestureRecognizer value);
    public abstract virtual GestureType get_Type();
    [CompilerGeneratedAttribute]
public virtual double get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected abstract virtual void OnStarted(View sender, object data);
    protected abstract virtual void OnMoved(View sender, object data);
    protected abstract virtual void OnCompleted(View sender, object data);
    protected abstract virtual void OnCanceled(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendStarted(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendCompleted(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendMoved(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendCanceled(View sender, object data);
    protected virtual void OnRecognizerPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Group : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Items>k__BackingField;
    public string Title { get; public set; }
    public List`1<Item> Items { get; public set; }
    public Group(List`1<Item> items, string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public List`1<Item> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<Item> value);
}
public interface Xamarin.Forms.Platform.Tizen.IFlyoutController {
    public abstract virtual void Open();
}
public interface Xamarin.Forms.Platform.Tizen.IGestureController {
    public abstract virtual void SendStarted(View sender, object data);
    public abstract virtual void SendMoved(View sender, object data);
    public abstract virtual void SendCompleted(View sender, object data);
    public abstract virtual void SendCanceled(View sender, object data);
}
public interface Xamarin.Forms.Platform.Tizen.IImageSourceHandler {
    public abstract virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public interface Xamarin.Forms.Platform.Tizen.ILogger {
    public abstract virtual void Debug(string tag, string message, string file, string func, int line);
    public abstract virtual void Verbose(string tag, string message, string file, string func, int line);
    public abstract virtual void Info(string tag, string message, string file, string func, int line);
    public abstract virtual void Warn(string tag, string message, string file, string func, int line);
    public abstract virtual void Error(string tag, string message, string file, string func, int line);
    public abstract virtual void Fatal(string tag, string message, string file, string func, int line);
}
public class Xamarin.Forms.Platform.Tizen.ImageButtonRenderer : ViewRenderer`2<ImageButton, Box> {
    private Image _image;
    private Button _button;
    private RoundRectangle _round;
    private BorderRectangle _border;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageButton> e);
    protected virtual void UpdateAfterLoading();
    protected virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void Dispose(bool disposing);
    private void OnReleased(object sender, EventArgs e);
    private void OnPressed(object sender, EventArgs e);
    private void OnClicked(object sender, EventArgs e);
    private void OnLayout();
    private void UpdatePadding();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ImageButtonRenderer/<UpdateSource>d__15")]
private void UpdateSource();
    private void UpdateRadius(bool init);
    private void UpdateBorderWidth(bool init);
    private void UpdateBorderColor();
    private void UpdateAspect();
}
public class Xamarin.Forms.Platform.Tizen.ImageCellRenderer : TextCellRenderer {
    private static int _defaultHeight;
    [CompilerGeneratedAttribute]
private string <ImagePart>k__BackingField;
    protected string ImagePart { get; protected set; }
    protected ImageCellRenderer(string style);
    [CompilerGeneratedAttribute]
protected string get_ImagePart();
    [CompilerGeneratedAttribute]
protected void set_ImagePart(string value);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.ImageExtensions : object {
    [ExtensionAttribute]
internal static bool IsNullOrEmpty(ImageSource imageSource);
}
public class Xamarin.Forms.Platform.Tizen.ImageRenderer : ViewRenderer`2<Image, Image> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ImageRenderer/<UpdateSource>d__2")]
private void UpdateSource();
    protected virtual void UpdateAfterLoading();
    private void UpdateAspect();
    private void UpdateIsOpaque();
    private void UpdateBlendColor();
    private void UpdateAll();
}
public class Xamarin.Forms.Platform.Tizen.IMEApplication : FormsApplication {
    public EditorWindow EditorWindow { get; }
    public EditorWindow get_EditorWindow();
    protected virtual void OnPreCreate();
    protected virtual void OnTerminate();
}
public interface Xamarin.Forms.Platform.Tizen.INavigationDrawer {
    public EvasObject NavigationView { get; public set; }
    public EvasObject Main { get; public set; }
    public bool IsOpen { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Toggled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Toggled(EventHandler value);
    public abstract virtual EvasObject get_NavigationView();
    public abstract virtual void set_NavigationView(EvasObject value);
    public abstract virtual EvasObject get_Main();
    public abstract virtual void set_Main(EvasObject value);
    public abstract virtual bool get_IsOpen();
    public abstract virtual void set_IsOpen(bool value);
}
public interface Xamarin.Forms.Platform.Tizen.INavigationView {
    public EvasObject Header { get; public set; }
    public Color BackgroundColor { get; public set; }
    public abstract virtual EvasObject get_Header();
    public abstract virtual void set_Header(EvasObject value);
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(Color value);
    public abstract virtual void BuildMenu(List`1<List`1<Element>> flyout);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
}
public interface Xamarin.Forms.Platform.Tizen.IShellTabs {
    public ShellTabsType Type { get; public set; }
    public EvasObject TargetView { get; }
    public Color BackgroundColor { get; public set; }
    public ToolbarItem SelectedItem { get; }
    public abstract virtual ShellTabsType get_Type();
    public abstract virtual void set_Type(ShellTabsType value);
    public abstract virtual EvasObject get_TargetView();
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(Color value);
    public abstract virtual ToolbarItem get_SelectedItem();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    public abstract virtual ToolbarItem Append(string label, string icon);
    public abstract virtual ToolbarItem InsertBefore(ToolbarItem before, string label, string icon);
}
public class Xamarin.Forms.Platform.Tizen.Item : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Icon>k__BackingField;
    public string Title { get; public set; }
    public ImageSource Icon { get; public set; }
    public Item(string title, ImageSource icon);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public ImageSource get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(ImageSource value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.ItemsLayoutExtension : object {
    [ExtensionAttribute]
public static ICollectionViewLayoutManager ToLayoutManager(IItemsLayout layout, ItemSizingStrategy sizing);
}
public class Xamarin.Forms.Platform.Tizen.ItemsViewRenderer : ViewRenderer`2<StructuredItemsView, CollectionView> {
    private INotifyCollectionChanged _observableSource;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<StructuredItemsView> e);
    protected virtual void Dispose(bool disposing);
    private void UpdateSelectedItem(bool initialize);
    private void UpdateSelectionMode();
    private void OnScrollToRequest(object sender, ScrollToRequestEventArgs e);
    private void UpdateItemsSource(bool initialize);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateAdaptor(bool initialize);
    private void OnItemSelectedFromUI(object sender, SelectedItemChangedEventArgs e);
    private void UpdateItemsLayout();
    private void UpdateSizingStrategy(bool initialize);
    private void OnLayoutPropertyChanged(object sender, PropertyChangedEventArgs e);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Platform.Tizen.ITizenPlatform {
    public bool HasAlpha { get; public set; }
    public abstract virtual void SetPage(Page page);
    public abstract virtual bool SendBackButtonPressed();
    public abstract virtual EvasObject GetRootNativeView();
    public abstract virtual bool get_HasAlpha();
    public abstract virtual void set_HasAlpha(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
}
public interface Xamarin.Forms.Platform.Tizen.IVisualElementRenderer {
    public VisualElement Element { get; }
    public EvasObject NativeView { get; }
    public abstract virtual VisualElement get_Element();
    public abstract virtual EvasObject get_NativeView();
    public abstract virtual void SetElement(VisualElement element);
    public abstract virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public abstract virtual void UpdateLayout();
    public abstract virtual Rect GetNativeContentGeometry();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.KeyboardExtensions : object {
    [ExtensionAttribute]
public static Keyboard ToNative(Keyboard keyboard);
    [ExtensionAttribute]
public static AutoCapital ToAutoCapital(KeyboardFlags keyboardFlags);
    [ExtensionAttribute]
public static InputHints ToInputHints(Keyboard keyboard, bool isSpellCheckEnabled, bool isTextPredictionEnabled);
    [ExtensionAttribute]
public static void UpdateKeyboard(IEntry control, Keyboard keyboard, bool isSpellCheckEnabled, bool isTextPredictionEnabled);
}
public class Xamarin.Forms.Platform.Tizen.LabelRenderer : ViewRenderer`2<Label, Label> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual Size MinimumSize();
    private FormattedString ConvertFormattedText(FormattedString formattedString);
    private void UpdateTextDecorations();
    private void UpdateFormattedText();
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateFontProperties();
    private void UpdateLineBreakMode();
    private void UpdateFontWeight();
    private void UpdateLineHeight();
    private LineBreakMode ConvertToNativeLineBreakMode(LineBreakMode mode);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.LayoutExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<View> children, EvasObject obj, MeasureDelegate measureDelegate);
    [ExtensionAttribute]
public static View ToView(EvasObject obj, MeasureDelegate measureDelegate);
}
public class Xamarin.Forms.Platform.Tizen.LayoutRenderer : ViewRenderer`2<Layout, Canvas> {
    private bool _layoutUpdatedRegistered;
    public void RegisterOnLayoutUpdated();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateInputTransparent(bool initialize);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.LightweightPlatform : BindableObject {
    private Page _page;
    private EvasObject _rootView;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<RootNativeViewChangedEventArgs> RootNativeViewChanged;
    public bool HasAlpha { get; public set; }
    internal LightweightPlatform(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void set_HasAlpha(bool value);
    public sealed virtual void Dispose();
    public sealed virtual EvasObject GetRootNativeView();
    public sealed virtual bool SendBackButtonPressed();
    public sealed virtual void SetPage(Page page);
    protected virtual void OnBindingContextChanged();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private bool <SetPage>b__13_0();
}
public class Xamarin.Forms.Platform.Tizen.ListViewRenderer : ViewRenderer`2<ListView, ListView> {
    private GenListItem _lastSelectedItem;
    private int _selectedItemChanging;
    private IListViewController Controller { get; }
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    private IListViewController get_Controller();
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ListView> e);
    protected virtual void Dispose(bool disposing);
    protected void OnListViewItemSelected(object sender, GenListItemEventArgs e);
    protected void OnListViewItemUnselected(object sender, GenListItemEventArgs e);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnGroupedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateSource();
    private void UpdateHeader();
    private void UpdateFooter();
    private void UpdateHasUnevenRows();
    private void UpdateRowHeight(bool initialize);
    private void UpdateIsGroupingEnabled(bool initialize);
    private void UpdateSelectedItem();
    private void UpdateSelectionMode();
}
public static class Xamarin.Forms.Platform.Tizen.Log : object {
    [CompilerGeneratedAttribute]
private static string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private static ILogger <Logger>k__BackingField;
    public static string Tag { get; public set; }
    public static ILogger Logger { get; public set; }
    private static Log();
    [CompilerGeneratedAttribute]
public static string get_Tag();
    [CompilerGeneratedAttribute]
public static void set_Tag(string value);
    [CompilerGeneratedAttribute]
public static ILogger get_Logger();
    [CompilerGeneratedAttribute]
public static void set_Logger(ILogger value);
    public static void Debug(string message, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Verbose(string message, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Info(string message, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Warn(string message, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Error(string message, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Fatal(string message, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    private static bool IsTizen();
}
public class Xamarin.Forms.Platform.Tizen.MasterDetailPageRenderer : VisualElementRenderer`1<MasterDetailPage> {
    private MasterDetailPage _mdpage;
    private MasterDetailContainer _masterContainer;
    private MasterDetailContainer _detailContainer;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<MasterDetailPage> e);
    private void OnMasterDetailDisappearing(object sender, EventArgs e);
    private void OnMasterDetailAppearing(object sender, EventArgs e);
    protected virtual void OnElementReady();
    protected virtual void Dispose(bool disposing);
    protected void UpdateMasterPageRatio(double popoverRatio, double splitRatio);
    private void OnBackButtonPressed(object sender, BackButtonPressedEventArgs e);
    private void UpdateMasterBehavior();
    private void UpdateMasterPage(bool isInit);
    private void UpdateDetailPage(bool isInit);
    private void UpdateIsPresented();
    private void UpdateIsGestureEnabled();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_0(object sender, IsPresentedChangedEventArgs ev);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_1(object sender, UpdateIsPresentChangeableEventArgs ev);
}
public class Xamarin.Forms.Platform.Tizen.MeasureDelegate : MulticastDelegate {
    public MeasureDelegate(object object, IntPtr method);
    public virtual Nullable`1<Size> Invoke(NativeViewWrapperRenderer renderer, int availableWidth, int availableHeight);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, int availableWidth, int availableHeight, AsyncCallback callback, object object);
    public virtual Nullable`1<Size> EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.Native.BatchableExtensions : object {
    private static ConditionalWeakTable`2<IBatchable, BatchCount> s_counters;
    private static BatchableExtensions();
    [ExtensionAttribute]
public static void BatchBegin(IBatchable target);
    [ExtensionAttribute]
public static void BatchCommit(IBatchable target);
    [ExtensionAttribute]
public static bool IsBatched(IBatchable target);
}
public class Xamarin.Forms.Platform.Tizen.Native.BorderRectangle : RoundRectangle {
    [CompilerGeneratedAttribute]
private int <BorderWidth>k__BackingField;
    public int BorderWidth { get; public set; }
    public BorderRectangle(EvasObject parent);
    [CompilerGeneratedAttribute]
public int get_BorderWidth();
    [CompilerGeneratedAttribute]
public void set_BorderWidth(int value);
    protected virtual void DrawPoints();
    protected void DrawRect(int topLeft, int topRight, int bottomLeft, int bottomRight, int startX, int startY, int width, int height);
}
public class Xamarin.Forms.Platform.Tizen.Native.Box : Box {
    private Rect _previousGeometry;
    [CompilerGeneratedAttribute]
private EventHandler`1<LayoutEventArgs> LayoutUpdated;
    public Box(EvasObject parent);
    [CompilerGeneratedAttribute]
public void add_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    private void NotifyOnLayout();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class Xamarin.Forms.Platform.Tizen.Native.Button : Button {
    private Span _span;
    private Image _image;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public Image Image { get; public set; }
    public Button(EvasObject parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public Color get_TextBackgroundColor();
    public void set_TextBackgroundColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual Image get_Image();
    public sealed virtual void set_Image(Image value);
    public virtual Size Measure(int availableWidth, int availableHeight);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
    private void ApplyImage(Image image);
    private void SetInternalImage();
    public sealed virtual void UpdateStyle(string style);
}
public enum Xamarin.Forms.Platform.Tizen.Native.ButtonPosition : Enum {
    public int value__;
    public static ButtonPosition Positive;
    public static ButtonPosition Neutral;
    public static ButtonPosition Negative;
}
public class Xamarin.Forms.Platform.Tizen.Native.Canvas : Box {
    private ObservableCollection`1<EvasObject> _children;
    public IList`1<EvasObject> Children { get; }
    public Canvas(EvasObject parent);
    public sealed virtual IList`1<EvasObject> get_Children();
    protected virtual void OnUnrealize();
    private void Initilize();
    private void OnAdd(EvasObject view);
    private void OnRemove(EvasObject view);
    private void OnRemoveAll();
    [CompilerGeneratedAttribute]
private void <Initilize>b__5_0(object o, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.CollectionView : Box {
    private RecyclerPool _pool;
    private ICollectionViewLayoutManager _layoutManager;
    private ItemAdaptor _adaptor;
    private Box _innerLayout;
    private EvasObject _emptyView;
    private Dictionary`2<ViewHolder, int> _viewHolderIndexTable;
    private ViewHolder _lastSelectedViewHolder;
    private int _selectedItemIndex;
    private CollectionViewSelectionMode _selectionMode;
    private bool _requestLayoutItems;
    private SnapPointsType _snapPoints;
    private Size _itemSize;
    [CompilerGeneratedAttribute]
private Scroller <Scroller>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <AllocatedSize>k__BackingField;
    private Rect _lastGeometry;
    public CollectionViewSelectionMode SelectionMode { get; public set; }
    public int SelectedItemIndex { get; public set; }
    public SnapPointsType SnapPointsType { get; public set; }
    protected Scroller Scroller { get; }
    public ICollectionViewLayoutManager LayoutManager { get; public set; }
    public ItemAdaptor Adaptor { get; public set; }
    private int Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.Count { get; }
    private Point Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.ParentPosition { get; }
    private Size AllocatedSize { get; private set; }
    private Rect ViewPort { get; }
    public CollectionView(EvasObject parent);
    public CollectionViewSelectionMode get_SelectionMode();
    public void set_SelectionMode(CollectionViewSelectionMode value);
    public int get_SelectedItemIndex();
    public void set_SelectedItemIndex(int value);
    public SnapPointsType get_SnapPointsType();
    public void set_SnapPointsType(SnapPointsType value);
    [CompilerGeneratedAttribute]
protected Scroller get_Scroller();
    public ICollectionViewLayoutManager get_LayoutManager();
    public void set_LayoutManager(ICollectionViewLayoutManager value);
    public ItemAdaptor get_Adaptor();
    public void set_Adaptor(ItemAdaptor value);
    private sealed virtual override int Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.get_Count();
    private sealed virtual override Point Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.get_ParentPosition();
    [CompilerGeneratedAttribute]
private Size get_AllocatedSize();
    [CompilerGeneratedAttribute]
private void set_AllocatedSize(Size value);
    private Rect get_ViewPort();
    public void ScrollTo(int index, ScrollToPosition position, bool animate);
    public void ScrollTo(object item, ScrollToPosition position, bool animate);
    public void ItemMeasureInvalidated(int index);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.RequestLayoutItems();
    private sealed virtual override Size Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.GetItemSize();
    private sealed virtual override Size Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.GetItemSize(int widthConstraint, int heightConstraint);
    private sealed virtual override Size Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.GetItemSize(int index, int widthConstraint, int heightConstraint);
    private sealed virtual override ViewHolder Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.RealizeView(int index);
    private void OnRequestItemSelection(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.UnrealizeView(ViewHolder view);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.ContentSizeUpdated();
    protected virtual Scroller CreateScroller(EvasObject parent);
    private void UpdateSelectedItemIndex();
    private void UpdateSelectionMode();
    private void OnLayoutManagerChanging();
    private void OnLayoutManagerChanged();
    private void OnAdaptorChanging();
    private void OnAdaptorChanged();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnLayout();
    private void RequestLayoutItems();
    private void OnInnerLayout();
    private void OnScrolled(object sender, EventArgs e);
    private void UpdateSnapPointsType(SnapPointsType snapPoints);
    private void CreateEmptyView();
    private void RemoveEmptyView();
    [CompilerGeneratedAttribute]
private void <RequestLayoutItems>b__62_0();
}
public enum Xamarin.Forms.Platform.Tizen.Native.CollectionViewSelectionMode : Enum {
    public int value__;
    public static CollectionViewSelectionMode None;
    public static CollectionViewSelectionMode Single;
}
public class Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <NewDate>k__BackingField;
    public DateTime NewDate { get; }
    public DateChangedEventArgs(DateTime newDate);
    [CompilerGeneratedAttribute]
public DateTime get_NewDate();
}
public class Xamarin.Forms.Platform.Tizen.Native.DateTimePicker : DateTimeSelector {
    private static string TimeFormat;
    private static string TimeLayoutStyle;
    private static string DateFormat;
    private static string DateLayoutStyle;
    private DateTimePickerMode _mode;
    public DateTimePickerMode Mode { get; public set; }
    public TimeSpan Time { get; public set; }
    public DateTimePicker(EvasObject parent);
    public DateTimePickerMode get_Mode();
    public void set_Mode(DateTimePickerMode value);
    public TimeSpan get_Time();
    public void set_Time(TimeSpan value);
    protected virtual void UpdateMode();
}
public class Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog : Dialog {
    private EvasObject _parent;
    [CompilerGeneratedAttribute]
private DateTimePicker <Picker>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateChangedEventArgs> DateTimeChanged;
    public DateTimePicker Picker { get; protected set; }
    public DateTimePickerDialog(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimePicker get_Picker();
    [CompilerGeneratedAttribute]
protected void set_Picker(DateTimePicker value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    protected virtual DateTimePicker CreatePicker(EvasObject parent);
    private void Initialize();
    private void Confirm();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Hide();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Unrealize();
    [CompilerGeneratedAttribute]
private void <Initialize>b__10_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__10_1(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__10_2(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__10_3(object s, EvasKeyEventArgs e);
}
public enum Xamarin.Forms.Platform.Tizen.Native.DateTimePickerMode : Enum {
    public int value__;
    public static DateTimePickerMode Date;
    public static DateTimePickerMode Time;
}
public class Xamarin.Forms.Platform.Tizen.Native.Dialog : Popup {
    private Button _positiveButton;
    private Button _neutralButton;
    private Button _negativeButton;
    private EvasObject _content;
    private string _title;
    private string _message;
    private Color _titleColor;
    [CompilerGeneratedAttribute]
private EventHandler Shown;
    public string Title { get; public set; }
    public Color TitleColor { get; public set; }
    public string Message { get; public set; }
    public EvasObject Content { get; public set; }
    public Button PositiveButton { get; public set; }
    public Button NeutralButton { get; public set; }
    public Button NegativeButton { get; public set; }
    public Dialog(EvasObject parent);
    public static Dialog CreateDialog(EvasObject parent, bool hasAcceptButton);
    [CompilerGeneratedAttribute]
public void add_Shown(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Shown(EventHandler value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public string get_Message();
    public void set_Message(string value);
    public EvasObject get_Content();
    public void set_Content(EvasObject value);
    public Button get_PositiveButton();
    public void set_PositiveButton(Button value);
    public Button get_NeutralButton();
    public void set_NeutralButton(Button value);
    public Button get_NegativeButton();
    public void set_NegativeButton(Button value);
    public sealed virtual void Show();
    protected virtual void OnUnrealize();
    protected virtual void OnShown();
    protected virtual void OnDismissed();
    protected virtual void ApplyTitle(string title);
    protected virtual void ApplyTitleColor(Color color);
    protected virtual void ApplyButton(ButtonPosition position, Button button);
    protected virtual void ApplyContent(EvasObject content);
    protected virtual void ApplyMessage(string message);
    private void Initialize();
    [CompilerGeneratedAttribute]
private void <Initialize>b__42_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__42_1(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry : Entry {
    [CompilerGeneratedAttribute]
private EventHandler TextBlockFocused;
    [CompilerGeneratedAttribute]
private EventHandler TextBlockUnfocused;
    [CompilerGeneratedAttribute]
private EventHandler LayoutFocused;
    [CompilerGeneratedAttribute]
private EventHandler LayoutUnfocused;
    private Layout _editfieldLayout;
    private int _heightPadding;
    private bool _isTexstBlockFocused;
    public bool IsTextBlockFocused { get; }
    public Color BackgroundColor { get; public set; }
    public EditfieldEntry(EvasObject parent);
    public EditfieldEntry(EvasObject parent, string style);
    [CompilerGeneratedAttribute]
public void add_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LayoutUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LayoutUnfocused(EventHandler value);
    public bool get_IsTextBlockFocused();
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public void SetFocusOnTextBlock(bool isFocused);
    public virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual IntPtr CreateHandle(EvasObject parent);
    protected virtual Layout CreateEditFieldLayout(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.Native.EmptyItemAdaptor : ItemTemplateAdaptor {
    private static DataTemplate s_defaultEmptyTemplate;
    public EmptyItemAdaptor(ItemsView itemsView, IEnumerable items, DataTemplate template);
    private static EmptyItemAdaptor();
    public static EmptyItemAdaptor Create(ItemsView itemsView);
    public virtual Size MeasureItem(int widthConstraint, int heightConstraint);
}
public class Xamarin.Forms.Platform.Tizen.Native.Entry : Entry {
    private static int VariationNormal;
    private static int VariationSignedAndDecimal;
    private Span _span;
    private Span _placeholderSpan;
    private int _changedByUserCallbackDepth;
    private Keyboard _keyboard;
    [CompilerGeneratedAttribute]
private EventHandler`1<TextChangedEventArgs> TextChanged;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public string FontWeight { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public Keyboard Keyboard { get; public set; }
    public string Placeholder { get; public set; }
    public Color PlaceholderColor { get; public set; }
    public Entry(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual string get_FontWeight();
    public sealed virtual void set_FontWeight(string value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public sealed virtual void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual Keyboard get_Keyboard();
    public sealed virtual void set_Keyboard(Keyboard value);
    public sealed virtual string get_Placeholder();
    public sealed virtual void set_Placeholder(string value);
    public sealed virtual Color get_PlaceholderColor();
    public sealed virtual void set_PlaceholderColor(Color value);
    public virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void OnTextChanged(string oldValue, string newValue);
    private void Initialize();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
    private string GetInternalText();
    private void ApplyKeyboard(Keyboard keyboard);
    private void SetInternalKeyboard(Keyboard keyboard);
    private void ApplyPlaceholderAndStyle();
    protected virtual void SetInternalPlaceholderAndStyle(string markupText);
    [CompilerGeneratedAttribute]
private void <Initialize>b__42_0(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.FormattedString : object {
    private bool _just_string;
    private string _string;
    private ObservableCollection`1<Span> _spans;
    public IList`1<Span> Spans { get; }
    public FormattedString(string str);
    public IList`1<Span> get_Spans();
    public virtual string ToString();
    internal string ToMarkupString();
    public static string op_Explicit(FormattedString formatted);
    public static FormattedString op_Implicit(string text);
    public static FormattedString op_Implicit(Span span);
}
public class Xamarin.Forms.Platform.Tizen.Native.GridLayoutManager : object {
    private Size _allocatedSize;
    private Size _scrollCanvasSize;
    private bool _isLayouting;
    private Rect _last;
    private Dictionary`2<int, RealizedItem> _realizedItem;
    private List`1<int> _itemSizes;
    private List`1<bool> _cached;
    private List`1<int> _accumulatedItemSizes;
    private bool _hasUnevenRows;
    private int _baseItemSize;
    [CompilerGeneratedAttribute]
private int <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHorizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionViewController <CollectionView>k__BackingField;
    public int Span { get; private set; }
    public bool IsHorizontal { get; }
    public ICollectionViewController CollectionView { get; public set; }
    private int BaseItemSize { get; }
    private int ItemWidthConstraint { get; }
    private int ItemHeightConstraint { get; }
    private int ColumnSize { get; }
    public GridLayoutManager(bool isHorizontal, int span);
    public GridLayoutManager(bool isHorizontal, int span, ItemSizingStrategy sizingStrategy);
    [CompilerGeneratedAttribute]
public int get_Span();
    [CompilerGeneratedAttribute]
private void set_Span(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHorizontal();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionViewController get_CollectionView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CollectionView(ICollectionViewController value);
    public sealed virtual void SizeAllocated(Size size);
    public sealed virtual Size GetScrollCanvasSize();
    private int get_BaseItemSize();
    private int get_ItemWidthConstraint();
    private int get_ItemHeightConstraint();
    private int get_ColumnSize();
    private bool ShouldRearrange(Rect viewport);
    public sealed virtual void LayoutItems(Rect bound, bool force);
    public void UpdateSpan(int span);
    public sealed virtual void ItemInserted(int inserted);
    public sealed virtual void ItemRemoved(int removed);
    public sealed virtual void ItemUpdated(int index);
    public sealed virtual Rect GetItemBound(int index);
    public sealed virtual void Reset();
    public sealed virtual void ItemSourceUpdated();
    public sealed virtual void ItemMeasureInvalidated(int index);
    private void InitializeMeasureCache();
    private void BuildAccumulatedSize();
    private void UpdateInsertedSize(int inserted);
    private void UpdateRemovedSize(int removed);
    private void UpdateAccumulatedItemSize(int index, int diff);
    private int GetMaxItemSize(int index);
    private int GetStartIndex(Rect bound, int itemSize);
    private int GetStartIndex(Rect bound);
    private int GetEndIndex(Rect bound, int itemSize);
    private int GetEndIndex(Rect bound);
    private int ViewPortStartPoint(Rect viewPort);
    private int ViewPortEndPoint(Rect viewPort);
    private int ViewPortSize(Rect viewPort);
    private static int FindFirstGreaterOrEqualTo(IList`1<int> data, int value);
}
internal interface Xamarin.Forms.Platform.Tizen.Native.IBatchable {
    public abstract virtual void OnBatchCommitted();
}
public interface Xamarin.Forms.Platform.Tizen.Native.IButton {
    public string Text { get; public set; }
    public double FontSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    public Color TextColor { get; public set; }
    public Image Image { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual FontAttributes get_FontAttributes();
    public abstract virtual void set_FontAttributes(FontAttributes value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual Color get_TextColor();
    public abstract virtual void set_TextColor(Color value);
    public abstract virtual Image get_Image();
    public abstract virtual void set_Image(Image value);
    public abstract virtual Size Measure(int availableWidth, int availableHeight);
    public abstract virtual void UpdateStyle(string style);
}
public interface Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController {
    public Point ParentPosition { get; }
    public int Count { get; }
    public abstract virtual Point get_ParentPosition();
    public abstract virtual ViewHolder RealizeView(int index);
    public abstract virtual void UnrealizeView(ViewHolder view);
    public abstract virtual void RequestLayoutItems();
    public abstract virtual int get_Count();
    public abstract virtual Size GetItemSize();
    public abstract virtual Size GetItemSize(int widthConstraint, int heightConstraint);
    public abstract virtual Size GetItemSize(int index, int widthConstraint, int heightConstraint);
    public abstract virtual void ContentSizeUpdated();
}
public interface Xamarin.Forms.Platform.Tizen.Native.ICollectionViewLayoutManager {
    public ICollectionViewController CollectionView { get; public set; }
    public bool IsHorizontal { get; }
    public abstract virtual ICollectionViewController get_CollectionView();
    public abstract virtual void set_CollectionView(ICollectionViewController value);
    public abstract virtual bool get_IsHorizontal();
    public abstract virtual void SizeAllocated(Size size);
    public abstract virtual Size GetScrollCanvasSize();
    public abstract virtual void LayoutItems(Rect bound, bool force);
    public abstract virtual Rect GetItemBound(int index);
    public abstract virtual void ItemInserted(int index);
    public abstract virtual void ItemRemoved(int index);
    public abstract virtual void ItemUpdated(int index);
    public abstract virtual void ItemSourceUpdated();
    public abstract virtual void Reset();
    public abstract virtual void ItemMeasureInvalidated(int index);
}
public interface Xamarin.Forms.Platform.Tizen.Native.IContainable`1 {
    public IList`1<T> Children { get; }
    public abstract virtual IList`1<T> get_Children();
}
public interface Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog {
    public string Title { get; public set; }
    public DateTimePicker Picker { get; }
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual DateTimePicker get_Picker();
    [CompilerGeneratedAttribute]
public abstract virtual void add_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    public abstract virtual void Show();
    public abstract virtual void Hide();
    public abstract virtual void Unrealize();
}
public interface Xamarin.Forms.Platform.Tizen.Native.IEmptyAdaptor {
}
public interface Xamarin.Forms.Platform.Tizen.Native.IEntry {
    public double FontSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    public Color TextColor { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public string Placeholder { get; public set; }
    public Color PlaceholderColor { get; public set; }
    public string FontWeight { get; public set; }
    public Keyboard Keyboard { get; public set; }
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual FontAttributes get_FontAttributes();
    public abstract virtual void set_FontAttributes(FontAttributes value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual Color get_TextColor();
    public abstract virtual void set_TextColor(Color value);
    public abstract virtual TextAlignment get_HorizontalTextAlignment();
    public abstract virtual void set_HorizontalTextAlignment(TextAlignment value);
    public abstract virtual string get_Placeholder();
    public abstract virtual void set_Placeholder(string value);
    public abstract virtual Color get_PlaceholderColor();
    public abstract virtual void set_PlaceholderColor(Color value);
    public abstract virtual string get_FontWeight();
    public abstract virtual void set_FontWeight(string value);
    public abstract virtual Keyboard get_Keyboard();
    public abstract virtual void set_Keyboard(Keyboard value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
}
public class Xamarin.Forms.Platform.Tizen.Native.Image : Image {
    private Aspect _aspect;
    public Aspect Aspect { get; public set; }
    public Image(EvasObject parent);
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.Native.Image/<LoadFromImageSourceAsync>d__5")]
public Task`1<bool> LoadFromImageSourceAsync(ImageSource source);
    public sealed virtual Size Measure(int availableWidth, int availableHeight);
    private void ApplyAspect(Aspect aspect);
}
public interface Xamarin.Forms.Platform.Tizen.Native.IMeasurable {
    public abstract virtual Size Measure(int availableWidth, int availableHeight);
}
public class Xamarin.Forms.Platform.Tizen.Native.IsPresentedChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsPresent>k__BackingField;
    public bool IsPresent { get; private set; }
    public IsPresentedChangedEventArgs(bool isPresent);
    [CompilerGeneratedAttribute]
public bool get_IsPresent();
    [CompilerGeneratedAttribute]
private void set_IsPresent(bool value);
}
[DefaultMemberAttribute("Item")]
public abstract class Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor : object {
    private IList _itemsSource;
    [CompilerGeneratedAttribute]
private CollectionView <CollectionView>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> ItemSelected;
    private INotifyCollectionChanged _observableCollection;
    public CollectionView CollectionView { get; public set; }
    public object Item { get; }
    public int Count { get; }
    protected ItemAdaptor(IEnumerable items);
    [CompilerGeneratedAttribute]
public CollectionView get_CollectionView();
    [CompilerGeneratedAttribute]
public void set_CollectionView(CollectionView value);
    [CompilerGeneratedAttribute]
public void add_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    public virtual void SendItemSelected(int index);
    public void RequestItemSelected(object item);
    protected void SetItemsSource(IEnumerable items);
    public object get_Item(int index);
    public int get_Count();
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public int GetItemIndex(object item);
    public virtual object GetViewCategory(int index);
    public abstract virtual EvasObject CreateNativeView(EvasObject parent);
    public abstract virtual EvasObject CreateNativeView(int index, EvasObject parent);
    public abstract virtual void RemoveNativeView(EvasObject native);
    public abstract virtual void SetBinding(EvasObject view, int index);
    public abstract virtual void UnBinding(EvasObject view);
    public abstract virtual Size MeasureItem(int widthConstraint, int heightConstraint);
    public abstract virtual Size MeasureItem(int index, int widthConstraint, int heightConstraint);
}
public class Xamarin.Forms.Platform.Tizen.Native.ItemDefaultTemplateAdaptor : ItemTemplateAdaptor {
    public ItemDefaultTemplateAdaptor(ItemsView itemsView);
}
public class Xamarin.Forms.Platform.Tizen.Native.ItemTemplateAdaptor : ItemAdaptor {
    private Dictionary`2<EvasObject, View> _nativeFormsTable;
    private Dictionary`2<object, View> _dataBindedViewTable;
    private ItemsView _itemsView;
    [CompilerGeneratedAttribute]
private DataTemplate <ItemTemplate>k__BackingField;
    protected DataTemplate ItemTemplate { get; protected set; }
    public ItemTemplateAdaptor(ItemsView itemsView);
    protected ItemTemplateAdaptor(ItemsView itemsView, IEnumerable items, DataTemplate template);
    [CompilerGeneratedAttribute]
protected DataTemplate get_ItemTemplate();
    [CompilerGeneratedAttribute]
protected void set_ItemTemplate(DataTemplate value);
    protected View GetTemplatedView(EvasObject evasObject);
    public virtual object GetViewCategory(int index);
    public virtual EvasObject CreateNativeView(int index, EvasObject parent);
    public virtual EvasObject CreateNativeView(EvasObject parent);
    public virtual void RemoveNativeView(EvasObject native);
    public virtual void SetBinding(EvasObject native, int index);
    public virtual void UnBinding(EvasObject native);
    public virtual Size MeasureItem(int widthConstraint, int heightConstraint);
    public virtual Size MeasureItem(int index, int widthConstraint, int heightConstraint);
    private void ResetBindedView(View view);
    private void OnItemMeasureInvalidated(object sender, EventArgs e);
}
public interface Xamarin.Forms.Platform.Tizen.Native.ITextable {
    public FormattedString FormattedText { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public abstract virtual FormattedString get_FormattedText();
    public abstract virtual void set_FormattedText(FormattedString value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual Color get_TextColor();
    public abstract virtual void set_TextColor(Color value);
    public abstract virtual Color get_TextBackgroundColor();
    public abstract virtual void set_TextBackgroundColor(Color value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual FontAttributes get_FontAttributes();
    public abstract virtual void set_FontAttributes(FontAttributes value);
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual TextAlignment get_HorizontalTextAlignment();
    public abstract virtual void set_HorizontalTextAlignment(TextAlignment value);
    public abstract virtual TextAlignment get_VerticalTextAlignment();
    public abstract virtual void set_VerticalTextAlignment(TextAlignment value);
    public abstract virtual bool get_Underline();
    public abstract virtual void set_Underline(bool value);
    public abstract virtual bool get_Strikethrough();
    public abstract virtual void set_Strikethrough(bool value);
}
public enum Xamarin.Forms.Platform.Tizen.Native.Keyboard : Enum {
    public int value__;
    public static Keyboard None;
    public static Keyboard Normal;
    public static Keyboard Number;
    public static Keyboard Email;
    public static Keyboard Url;
    public static Keyboard PhoneNumber;
    public static Keyboard Ip;
    public static Keyboard Month;
    public static Keyboard NumberOnly;
    public static Keyboard Invalid;
    public static Keyboard Hex;
    public static Keyboard Terminal;
    public static Keyboard Password;
    public static Keyboard DateTime;
    public static Keyboard Emoticon;
    public static Keyboard Numeric;
}
public class Xamarin.Forms.Platform.Tizen.Native.Label : Label {
    private Span _span;
    public FormattedString FormattedText { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public double LineHeight { get; public set; }
    public string FontWeight { get; public set; }
    public LineBreakMode LineBreakMode { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public Label(EvasObject parent);
    public sealed virtual FormattedString get_FormattedText();
    public sealed virtual void set_FormattedText(FormattedString value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual Color get_TextBackgroundColor();
    public sealed virtual void set_TextBackgroundColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public LineBreakMode get_LineBreakMode();
    public void set_LineBreakMode(LineBreakMode value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public sealed virtual void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public sealed virtual void set_VerticalTextAlignment(TextAlignment value);
    public sealed virtual bool get_Underline();
    public sealed virtual void set_Underline(bool value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual Size Measure(int availableWidth, int availableHeight);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
}
public class Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Rect <Geometry>k__BackingField;
    public Rect Geometry { get; internal set; }
    [CompilerGeneratedAttribute]
public Rect get_Geometry();
    [CompilerGeneratedAttribute]
internal void set_Geometry(Rect value);
}
public class Xamarin.Forms.Platform.Tizen.Native.LinearLayoutManager : object {
    private Size _allocatedSize;
    private bool _isLayouting;
    private Rect _last;
    private Dictionary`2<int, RealizedItem> _realizedItem;
    private List`1<int> _itemSizes;
    private List`1<bool> _cached;
    private List`1<int> _accumulatedItemSizes;
    private bool _hasUnevenRows;
    private int _baseItemSize;
    [CompilerGeneratedAttribute]
private bool <IsHorizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionViewController <CollectionView>k__BackingField;
    private Size _scrollCanvasSize;
    public bool IsHorizontal { get; }
    public ICollectionViewController CollectionView { get; public set; }
    private int BaseItemSize { get; }
    private int ItemWidthConstraint { get; }
    private int ItemHeightConstraint { get; }
    public LinearLayoutManager(bool isHorizontal);
    public LinearLayoutManager(bool isHorizontal, ItemSizingStrategy sizingStrategy);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHorizontal();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionViewController get_CollectionView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CollectionView(ICollectionViewController value);
    public sealed virtual void SizeAllocated(Size size);
    public sealed virtual Size GetScrollCanvasSize();
    private int get_BaseItemSize();
    private int get_ItemWidthConstraint();
    private int get_ItemHeightConstraint();
    private bool ShouldRearrange(Rect viewport);
    public sealed virtual void LayoutItems(Rect bound, bool force);
    public sealed virtual void ItemInserted(int inserted);
    public sealed virtual void ItemRemoved(int removed);
    public sealed virtual void ItemUpdated(int index);
    public sealed virtual Rect GetItemBound(int index);
    public sealed virtual void Reset();
    public sealed virtual void ItemSourceUpdated();
    public sealed virtual void ItemMeasureInvalidated(int index);
    private void InitializeMeasureCache();
    private int GetStartIndex(Rect bound, int itemSize);
    private int GetStartIndex(Rect bound);
    private int GetEndIndex(Rect bound, int itemSize);
    private int GetEndIndex(Rect bound);
    private int ViewPortStartPoint(Rect viewPort);
    private int ViewPortEndPoint(Rect viewPort);
    private int ViewPortSize(Rect viewPort);
    private void UpdateAccumulatedItemSize(int index, int diff);
    private void UpdateRemovedSize(int removed);
    private void UpdateInsertedSize(int inserted);
    private static int FindFirstGreaterOrEqualTo(IList`1<int> data, int value);
}
public enum Xamarin.Forms.Platform.Tizen.Native.LineBreakMode : Enum {
    public int value__;
    public static LineBreakMode None;
    public static LineBreakMode NoWrap;
    public static LineBreakMode CharacterWrap;
    public static LineBreakMode WordWrap;
    public static LineBreakMode MixedWrap;
    public static LineBreakMode HeadTruncation;
    public static LineBreakMode MiddleTruncation;
    public static LineBreakMode TailTruncation;
}
public class Xamarin.Forms.Platform.Tizen.Native.ListView : GenList {
    private List`1<ItemContext> _itemContextList;
    protected IDictionary`2<Type, CellRenderer> _cellRendererCache;
    protected IDictionary`2<Type, CellRenderer> _groupCellRendererCache;
    private ItemContext _headerContext;
    private VisualElement _headerElement;
    private ItemContext _footerContext;
    private VisualElement _footerElement;
    private GenItemClass _headerFooterItemClass;
    [CompilerGeneratedAttribute]
private bool <IsGroupingEnabled>k__BackingField;
    public bool IsGroupingEnabled { get; public set; }
    public ListView(EvasObject parent);
    [CompilerGeneratedAttribute]
public bool get_IsGroupingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsGroupingEnabled(bool value);
    internal ItemContext GetItemContext(Cell cell);
    public void SetHasUnevenRows(bool hasUnevenRows);
    public void AddSource(IEnumerable source, Cell beforeCell);
    internal void ResetGroup(TemplatedItemsList`2<ItemsView`1<Cell>, Cell> group);
    public void AddItemsToGroup(IEnumerable itemGroup, IEnumerable newItems, Cell cellBefore);
    public void Remove(IEnumerable cells);
    public void ApplyScrollTo(Cell cell, ScrollToPosition position, bool animated);
    public void ApplySelectedItem(Cell cell);
    public void SetHeader(VisualElement header);
    public void SetFooter(VisualElement footer);
    public void RemoveHeader();
    public void RemoveFooter();
    public bool HasHeader();
    public bool HasFooter();
    public VisualElement GetHeader();
    public VisualElement GetFooter();
    private void HeaderDeletedHandler(object sender, EventArgs e);
    private void FooterDeletedHandler(object sender, EventArgs e);
    private void OnItemAppear(object sender, GenListItemEventArgs evt);
    private void OnItemDisappear(object sender, GenListItemEventArgs evt);
    protected virtual void OnRealized();
    protected void AddCell(Cell cell);
    protected virtual CellRenderer GetCellRenderer(Cell cell, bool isGroup);
    private void AddGroupItem(TemplatedItemsList`2<ItemsView`1<Cell>, Cell> groupList, Cell beforeCell);
    private void AddItem(Cell cell, Cell groupCell, Cell beforeCell);
    private void ItemDeletedHandler(object sender, EventArgs e);
    private void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnForceUpdateSizeRequested(object sender, EventArgs e);
    private GenItemClass GetHeaderFooterItemClass();
}
public class Xamarin.Forms.Platform.Tizen.Native.MasterDetailPage : Box {
    private static MasterBehavior s_defaultMasterBehavior;
    private Canvas _masterCanvas;
    private Canvas _detailCanvas;
    private Panes _splitPane;
    private Panel _drawer;
    private MasterBehavior _masterBehavior;
    private MasterBehavior _internalMasterBehavior;
    private EvasObject _master;
    private EvasObject _detail;
    private EvasObject _mainWidget;
    private bool _isGestureEnabled;
    private double _splitRatio;
    private double _popoverRatio;
    [CompilerGeneratedAttribute]
private EventHandler`1<IsPresentedChangedEventArgs> IsPresentedChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<UpdateIsPresentChangeableEventArgs> UpdateIsPresentChangeable;
    public MasterBehavior MasterBehavior { get; public set; }
    public bool IsSplit { get; }
    public EvasObject Master { get; public set; }
    public EvasObject Detail { get; public set; }
    public bool IsPresented { get; public set; }
    public bool IsGestureEnabled { get; public set; }
    public double SplitRatio { get; public set; }
    public double PopoverRatio { get; public set; }
    public MasterDetailPage(EvasObject parent);
    private static MasterDetailPage();
    [CompilerGeneratedAttribute]
public void add_IsPresentedChanged(EventHandler`1<IsPresentedChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_IsPresentedChanged(EventHandler`1<IsPresentedChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UpdateIsPresentChangeable(EventHandler`1<UpdateIsPresentChangeableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UpdateIsPresentChangeable(EventHandler`1<UpdateIsPresentChangeableEventArgs> value);
    public MasterBehavior get_MasterBehavior();
    public void set_MasterBehavior(MasterBehavior value);
    public bool get_IsSplit();
    public EvasObject get_Master();
    public void set_Master(EvasObject value);
    public EvasObject get_Detail();
    public void set_Detail(EvasObject value);
    public bool get_IsPresented();
    public void set_IsPresented(bool value);
    public bool get_IsGestureEnabled();
    public void set_IsGestureEnabled(bool value);
    public double get_SplitRatio();
    public void set_SplitRatio(double value);
    public double get_PopoverRatio();
    public void set_PopoverRatio(double value);
    protected virtual void OnUnrealize();
    private void UpdatePageGeometry(EvasObject page);
    private void UpdateMasterBehavior();
    private void ConfigureLayout();
    private void UpdateChildCanvasGeometry();
    private void UpdateFocusPolicy(bool forceAllowFocusAll);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_0(object s, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_1(object sender, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_2(object sender, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_3(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_4(object s, PropertyChangedEventArgs e);
}
internal class Xamarin.Forms.Platform.Tizen.Native.ObservableCollection`1 : ObservableCollection`1<T> {
    protected virtual void ClearItems();
}
public class Xamarin.Forms.Platform.Tizen.Native.Page : Background {
    public static string ContentPartName;
    internal Canvas _canvas;
    public IList`1<EvasObject> Children { get; }
    public Page(EvasObject parent);
    public sealed virtual IList`1<EvasObject> get_Children();
    public void add_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    public void remove_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    protected virtual void OnUnrealize();
}
internal class Xamarin.Forms.Platform.Tizen.Native.RecyclerPool : object {
    private LinkedList`1<ViewHolder> _pool;
    public void Clear(ItemAdaptor adaptor);
    public void AddRecyclerView(ViewHolder view);
    public ViewHolder GetRecyclerView(object category);
    public ViewHolder GetRecyclerView();
}
public class Xamarin.Forms.Platform.Tizen.Native.RoundRectangle : Polygon {
    private Int32[] _radius;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public RoundRectangle(EvasObject parent);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public void SetRadius(int r);
    public void SetRadius(int topLeft, int topRight, int bottomLeft, int bottomRight);
    public IReadOnlyList`1<int> GetRadius();
    public void Draw();
    public void Draw(Rect bound);
    protected virtual void DrawPoints();
    protected void AddRelativePoint(int x, int y);
}
public class Xamarin.Forms.Platform.Tizen.Native.Scroller : Scroller {
    private TaskCompletionSource`1<bool> _animationTaskComplateSource;
    private bool _isAnimation;
    public Scroller(EvasObject parent);
    protected virtual void OnRealized();
    private void CheckTaskCompletionSource();
    public Task ScrollToAsync(int horizontalPageIndex, int verticalPageIndex, bool animated);
    public Task ScrollToAsync(Rect rect, bool animated);
    [CompilerGeneratedAttribute]
private void <OnRealized>b__3_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnRealized>b__3_1(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.SearchBar : EditfieldEntry {
    private Button _clearButton;
    private Layout _layout;
    public SearchBar(EvasObject parent);
    public void SetClearButtonColor(Color color);
    protected virtual Layout CreateEditFieldLayout(EvasObject parent);
    protected virtual void OnTextChanged(string oldValue, string newValue);
    private void ClearButtonClicked(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.Span : object {
    private static Color s_defaultLineColor;
    private string _text;
    [CompilerGeneratedAttribute]
private FormattedString <FormattedText>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontAttributes <FontAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private LineBreakMode <LineBreakMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAlignment <HorizontalTextAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    public FormattedString FormattedText { get; public set; }
    public string Text { get; public set; }
    public Color ForegroundColor { get; public set; }
    public Color BackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public string FontWeight { get; public set; }
    public double LineHeight { get; public set; }
    public LineBreakMode LineBreakMode { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    private static Span();
    [CompilerGeneratedAttribute]
public FormattedString get_FormattedText();
    [CompilerGeneratedAttribute]
public void set_FormattedText(FormattedString value);
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Color get_ForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ForegroundColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public FontAttributes get_FontAttributes();
    [CompilerGeneratedAttribute]
public void set_FontAttributes(FontAttributes value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public string get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(string value);
    [CompilerGeneratedAttribute]
public double get_LineHeight();
    [CompilerGeneratedAttribute]
public void set_LineHeight(double value);
    [CompilerGeneratedAttribute]
public LineBreakMode get_LineBreakMode();
    [CompilerGeneratedAttribute]
public void set_LineBreakMode(LineBreakMode value);
    [CompilerGeneratedAttribute]
public TextAlignment get_HorizontalTextAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalTextAlignment(TextAlignment value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public void set_Strikethrough(bool value);
    internal string GetMarkupText();
    public string GetDecoratedText();
    private StringBuilder PrepareFormattingString(StringBuilder _formattingString);
    private string ConvertTags(string text);
    public string GetStyle();
    public static Span op_Implicit(string text);
}
public class Xamarin.Forms.Platform.Tizen.Native.TableView : ListView {
    private static SectionCellRenderer _sectionCellRenderer;
    public TableView(EvasObject parent);
    private static TableView();
    public void ApplyTableRoot(TableRoot root);
    protected virtual CellRenderer GetCellRenderer(Cell cell, bool isGroup);
    private void AddSectionTitle(string title, Color textColor);
}
public enum Xamarin.Forms.Platform.Tizen.Native.TextAlignment : Enum {
    public int value__;
    public static TextAlignment None;
    public static TextAlignment Auto;
    public static TextAlignment Start;
    public static TextAlignment End;
    public static TextAlignment Center;
}
public static class Xamarin.Forms.Platform.Tizen.Native.TextHelper : object {
    public static Size GetRawTextBlockSize(EvasObject textable);
    public static Size GetFormattedTextBlockSize(EvasObject textable);
    private static EdjeTextPartObject GetElmTextPart(EvasObject textable);
}
public class Xamarin.Forms.Platform.Tizen.Native.TitleViewPage : Box {
    private Page _page;
    private View _titleView;
    private bool _hasNavigationBar;
    public bool HasNavigationBar { get; public set; }
    public TitleViewPage(EvasObject parent, Page page, View titleView);
    public bool get_HasNavigationBar();
    public void set_HasNavigationBar(bool value);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    private void UpdatPageLayout(object sender, LayoutEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.ToolbarItemButton : Button {
    private static string StyleDefault;
    private static string StyleDefaultToolbarIcon;
    private static string StyleLeftToolBarButton;
    private static string StyleRightToolbarButton;
    private ToolbarItem _item;
    private string _defaultAccessibilityName;
    private string _defaultAccessibilityDescription;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    public ToolbarItemButton(ToolbarItem item);
    private void OnDeleted(object sender, EventArgs e);
    private void OnClicked(object sender, EventArgs e);
    private void OnToolbarItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateText();
    private void UpdateIsEnabled();
    private void UpdateIcon();
    private void UpdateStyle();
    private void SetAccessibilityName(bool initialize);
    private void SetAccessibilityDescription(bool initialize);
    private void SetIsAccessibilityElement(bool initialize);
    private void SetLabeledBy(bool initialize);
}
public class Xamarin.Forms.Platform.Tizen.Native.UpdateIsPresentChangeableEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <CanChange>k__BackingField;
    public bool CanChange { get; private set; }
    public UpdateIsPresentChangeableEventArgs(bool canChange);
    [CompilerGeneratedAttribute]
public bool get_CanChange();
    [CompilerGeneratedAttribute]
private void set_CanChange(bool value);
}
public class Xamarin.Forms.Platform.Tizen.Native.ViewHolder : Box {
    private static Color s_defaultFocusEffectColor;
    private static Color s_defaultSelectedColor;
    private Rectangle _background;
    private Button _focusArea;
    private EvasObject _content;
    private ViewHolderState _state;
    [CompilerGeneratedAttribute]
private object <ViewCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <FocusedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <SelectedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Selected;
    [CompilerGeneratedAttribute]
private EventHandler RequestSelected;
    public object ViewCategory { get; public set; }
    public Color FocusedColor { get; public set; }
    public Color SelectedColor { get; public set; }
    private Color EffectiveFocusedColor { get; }
    private Color EffectiveSelectedColor { get; }
    private Color FocusSelectedColor { get; }
    public EvasObject Content { get; public set; }
    public ViewHolderState State { get; public set; }
    public ViewHolder(EvasObject parent);
    private static ViewHolder();
    [CompilerGeneratedAttribute]
public object get_ViewCategory();
    [CompilerGeneratedAttribute]
public void set_ViewCategory(object value);
    [CompilerGeneratedAttribute]
public Color get_FocusedColor();
    [CompilerGeneratedAttribute]
public void set_FocusedColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_SelectedColor();
    [CompilerGeneratedAttribute]
public void set_SelectedColor(Color value);
    private Color get_EffectiveFocusedColor();
    private Color get_EffectiveSelectedColor();
    private Color get_FocusSelectedColor();
    public EvasObject get_Content();
    public void set_Content(EvasObject value);
    public ViewHolderState get_State();
    public void set_State(ViewHolderState value);
    [CompilerGeneratedAttribute]
public void add_Selected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Selected(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RequestSelected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RequestSelected(EventHandler value);
    public void ResetState();
    protected void SendSelected();
    protected void Initialize(EvasObject parent);
    protected virtual void OnFocused(object sender, EventArgs e);
    protected virtual void OnClicked(object sender, EventArgs e);
    protected virtual void OnLayout();
    protected virtual void UpdateState();
    private void OnKeyUp(object sender, EvasKeyEventArgs e);
}
public enum Xamarin.Forms.Platform.Tizen.Native.ViewHolderState : Enum {
    public int value__;
    public static ViewHolderState Normal;
    public static ViewHolderState Selected;
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchButton : Button {
    public WatchButton(EvasObject parent);
    public virtual Size Measure(int availableWidth, int availableHeight);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDataTimePickerDialog : Popup {
    private Layout _surfaceLayout;
    private Layout _datetimeLayout;
    private CircleSurface _surface;
    private Button _doneButton;
    private Box _container;
    private string _title;
    [CompilerGeneratedAttribute]
private WatchDateTimePicker <WatchPicker>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateChangedEventArgs> DateTimeChanged;
    public string Title { get; public set; }
    public DateTimePicker Picker { get; }
    protected WatchDateTimePicker WatchPicker { get; }
    public WatchDataTimePickerDialog(EvasObject parent);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual DateTimePicker get_Picker();
    [CompilerGeneratedAttribute]
protected WatchDateTimePicker get_WatchPicker();
    [CompilerGeneratedAttribute]
public sealed virtual void add_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    private void OnContainerLayout();
    private void OnDoneClicked(object sender, EventArgs e);
    private void OnBackButtonPressed(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Show();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Hide();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Unrealize();
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDateTimePicker : DateTimePicker {
    private CircleSurface _surface;
    [CompilerGeneratedAttribute]
private CircleDateTimeSelector <CircleSelector>k__BackingField;
    public CircleDateTimeSelector CircleSelector { get; private set; }
    public WatchDateTimePicker(EvasObject parent, CircleSurface surface);
    [CompilerGeneratedAttribute]
public CircleDateTimeSelector get_CircleSelector();
    [CompilerGeneratedAttribute]
private void set_CircleSelector(CircleDateTimeSelector value);
    protected virtual void UpdateMode();
    protected virtual IntPtr CreateHandle(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDialog : Dialog {
    private Layout _popupLayout;
    private bool _hasAcceptButton;
    public WatchDialog(EvasObject parent, bool hasAcceptButton);
    protected virtual void ApplyButton(ButtonPosition position, Button button);
    protected virtual void ApplyContent(EvasObject content);
    protected virtual void ApplyTitle(string title);
    protected virtual void ApplyTitleColor(Color color);
    protected virtual void ApplyMessage(string message);
}
public class Xamarin.Forms.Platform.Tizen.Native.WebViewContainer : Layout {
    [CompilerGeneratedAttribute]
private WebView <WebView>k__BackingField;
    public WebView WebView { get; }
    public WebViewContainer(EvasObject parent);
    [CompilerGeneratedAttribute]
public WebView get_WebView();
    private void OnFocused(object sender, EventArgs e);
    private void OnUnfocused(object sender, EventArgs e);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.NativeBindingExtensions : object {
    [ExtensionAttribute]
public static void SetBinding(EvasObject view, string propertyName, BindingBase binding, string updateSourceEventName);
    [ExtensionAttribute]
public static void SetBinding(EvasObject view, BindableProperty targetProperty, BindingBase binding);
    [ExtensionAttribute]
public static void SetValue(EvasObject target, BindableProperty targetProperty, object value);
    [ExtensionAttribute]
public static void SetBindingContext(EvasObject target, object bindingContext, Func`2<EvasObject, IEnumerable`1<EvasObject>> getChildren);
    [ExtensionAttribute]
internal static void TransferBindablePropertiesToWrapper(EvasObject target, View wrapper);
}
internal class Xamarin.Forms.Platform.Tizen.NativeBindingService : object {
    public sealed virtual bool TrySetBinding(object target, string propertyName, BindingBase binding);
    public sealed virtual bool TrySetBinding(object target, BindableProperty property, BindingBase binding);
    public sealed virtual bool TrySetValue(object target, BindableProperty property, object value);
}
internal class Xamarin.Forms.Platform.Tizen.NativeValueConverterService : object {
    public sealed virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
public class Xamarin.Forms.Platform.Tizen.NativeViewWrapper : View {
    [CompilerGeneratedAttribute]
private EvasObject <EvasObject>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasureDelegate <MeasureDelegate>k__BackingField;
    public EvasObject EvasObject { get; private set; }
    public MeasureDelegate MeasureDelegate { get; }
    public NativeViewWrapper(EvasObject obj, MeasureDelegate measureDelegate);
    [CompilerGeneratedAttribute]
public EvasObject get_EvasObject();
    [CompilerGeneratedAttribute]
private void set_EvasObject(EvasObject value);
    [CompilerGeneratedAttribute]
public MeasureDelegate get_MeasureDelegate();
    protected virtual void OnBindingContextChanged();
}
public class Xamarin.Forms.Platform.Tizen.NativeViewWrapperRenderer : ViewRenderer`2<NativeViewWrapper, EvasObject> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NativeViewWrapper> e);
    protected virtual Size Measure(int availableWidth, int availableHeight);
}
public class Xamarin.Forms.Platform.Tizen.NavigationDrawer : Box {
    private EvasObject _navigationView;
    private Box _mainContainer;
    private Box _dimArea;
    private EvasObject _main;
    private Panel _drawer;
    private bool _isLock;
    private double _navigationViewRatio;
    [CompilerGeneratedAttribute]
private EventHandler Toggled;
    public EvasObject NavigationView { get; public set; }
    public EvasObject Main { get; public set; }
    public bool IsOpen { get; public set; }
    public bool IsLock { get; public set; }
    public NavigationDrawer(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Toggled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Toggled(EventHandler value);
    public sealed virtual EvasObject get_NavigationView();
    public sealed virtual void set_NavigationView(EvasObject value);
    public sealed virtual EvasObject get_Main();
    public sealed virtual void set_Main(EvasObject value);
    public sealed virtual bool get_IsOpen();
    public sealed virtual void set_IsOpen(bool value);
    public bool get_IsLock();
    public void set_IsLock(bool value);
    private void Initialize(EvasObject parent);
    private void UpdateNavigationView(EvasObject navigationView);
    private void UpdateMain(EvasObject main);
    private void UpdateDimArea();
    private void UpdateChildGeometry();
    private void UpdateNavigationViewGeometry();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(object s, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__23_0(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.NavigationPageRenderer : VisualElementRenderer`1<NavigationPage> {
    private static string PartTitle;
    private static string PartBackButton;
    private static string PartLeftToolbar;
    private static string PartRightToolbar;
    private static string PartNavigationBar;
    private static string StyleBackButton;
    private static string StyleNavigationBar;
    private List`1<Widget> _naviItemContentPartList;
    private Naviframe _naviFrame;
    private Page _previousPage;
    private TaskCompletionSource`1<bool> _currentTaskSource;
    private ToolbarTracker _toolbarTracker;
    private IDictionary`2<Page, NaviItem> _naviItemMap;
    private Page CurrentPage { get; }
    private Page PreviousPage { get; }
    private NaviItem CurrentNaviItem { get; }
    private NaviItem PreviousNaviItem { get; }
    private Page get_CurrentPage();
    private Page get_PreviousPage();
    private NaviItem get_CurrentNaviItem();
    private NaviItem get_PreviousNaviItem();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NavigationPage> e);
    protected virtual void OnElementReady();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnPageCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnToolbarCollectionChanged(object sender, EventArgs eventArgs);
    private void NavigationBarPropertyChangedHandler(object sender, PropertyChangedEventArgs e);
    private void UpdateHasNavigationBar(Page page);
    private void UpdateToolbarItem(Page page, NaviItem item);
    private void UpdateHasBackButton(Page page, NaviItem item);
    private void UpdateTitle(Page page, NaviItem item);
    private string SpanTitle(string Title);
    private void UpdateBarBackgroundColor(NaviItem item);
    private void UpdateNavigationBar(Page page, NaviItem item);
    private void UpdateBreadCrumbsBar(NaviItem item);
    private Button CreateNavigationButton(string text);
    private void NaviItemPartContentDeletedHandler(object sender, EventArgs e);
    private NaviItem GetNaviItemForPage(Page page);
    private Button GetToolbarButton(ToolbarButtonPosition position);
    private Toolbar GetBreadCrumbsBar();
    private void OnPopRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnPopToRootRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnPushRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnRemovePageRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnInsertPageBeforeRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnAnimationFinished(object sender, EventArgs e);
    private void CompleteCurrentNavigationTask();
    private EvasObject CreateNavItem(Page page);
    [CompilerGeneratedAttribute]
private void <OnElementPropertyChanged>b__25_0();
    [CompilerGeneratedAttribute]
private void <CreateNavigationButton>b__37_0(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.NavigationView : Box {
    private EvasObject _header;
    private GenList _menu;
    private GenItemClass _defaultClass;
    private Color _backgroundColor;
    private Color _defaultBackgroundColor;
    private List`1<Group> _groups;
    private IDictionary`2<Item, Element> _flyoutMenu;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> SelectedItemChanged;
    public Color BackgroundColor { get; public set; }
    public EvasObject Header { get; public set; }
    public NavigationView(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public sealed virtual EvasObject get_Header();
    public sealed virtual void set_Header(EvasObject value);
    public sealed virtual void BuildMenu(List`1<List`1<Element>> flyoutGroups);
    private void Initialize(EvasObject parent);
    private void UpdateMenu();
    private void UpdateChildGeometry();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(object s, LayoutEventArgs e);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.PageExtensions : object {
    [ExtensionAttribute]
public static EvasObject CreateEvasObject(ContentPage page, EvasObject parent, bool hasAlpha);
    [ExtensionAttribute]
public static void UpdateFocusTreePolicy(MultiPage`1<T> multiPage);
}
public class Xamarin.Forms.Platform.Tizen.PageRenderer : VisualElementRenderer`1<Page> {
    private Page _page;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Page> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void UpdateLayout();
    private void UpdateBackgroundImage(bool initiaize);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.PanGestureHandler : GestureHandler {
    private int _currentPanGestureId;
    public GestureType Type { get; }
    public PanGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
public class Xamarin.Forms.Platform.Tizen.PickerRenderer : ViewRenderer`2<Picker, EditfieldEntry> {
    private List _list;
    private Dialog _dialog;
    private Dictionary`2<ListItem, int> _itemToItemNumber;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    private void UpdateSelectedIndex();
    private void UpdateTextColor();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    private void UpdateTitle();
    private void UpdateTitleColor();
    private void OnLayoutFocused(object sender, EventArgs e);
    private void OnLayoutUnfocused(object sender, EventArgs e);
    private void OnTextBlockFocused(object sender, EventArgs e);
    private void OnItemSelected(object senderObject, EventArgs ev);
    private void OnDialogDismissed(object sender, EventArgs e);
    private void CleanView();
    [CompilerGeneratedAttribute]
private void <OnTextBlockFocused>b__15_0(object senders, EventArgs es);
    [CompilerGeneratedAttribute]
private void <OnTextBlockFocused>b__15_1();
}
public class Xamarin.Forms.Platform.Tizen.PinchGestureHandler : GestureHandler {
    private Point _currentScalePoint;
    private int _previousPinchRadius;
    private double _originalPinchScale;
    public GestureType Type { get; }
    public PinchGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
public static class Xamarin.Forms.Platform.Tizen.Platform : object {
    internal static BindableProperty RendererProperty;
    private static Platform();
    public static IVisualElementRenderer GetRenderer(BindableObject bindable);
    public static void SetRenderer(BindableObject bindable, IVisualElementRenderer value);
    public static IVisualElementRenderer GetOrCreateRenderer(VisualElement element);
    internal static IVisualElementRenderer CreateRenderer(VisualElement element);
    internal static ITizenPlatform CreatePlatform(EvasObject parent);
    public static SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.PlatformConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, T> OnThisPlatform(T element);
}
public abstract class Xamarin.Forms.Platform.Tizen.PlatformEffect : PlatformEffect`2<EvasObject, EvasObject> {
}
public class Xamarin.Forms.Platform.Tizen.PreloadedPlatform : DefaultPlatform {
    private static PreloadedPlatform s_precreated;
    [CompilerGeneratedAttribute]
private EvasObject <Parent>k__BackingField;
    private EvasObject Parent { get; }
    public PreloadedPlatform(EvasObject parent);
    [CompilerGeneratedAttribute]
private EvasObject get_Parent();
    public static ITizenPlatform GetInstalce(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.PreloadedWindow : Window {
    private static PreloadedWindow s_precreated;
    [CompilerGeneratedAttribute]
private Layout <BaseLayout>k__BackingField;
    public Layout BaseLayout { get; protected set; }
    [CompilerGeneratedAttribute]
public Layout get_BaseLayout();
    [CompilerGeneratedAttribute]
protected void set_BaseLayout(Layout value);
    protected void Initialize();
    public static PreloadedWindow GetInstance();
}
public class Xamarin.Forms.Platform.Tizen.ProgressBarRenderer : ViewRenderer`2<ProgressBar, ProgressBar> {
    private static Color s_defaultColor;
    private static ProgressBarRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateThemeStyle();
    private void UpdateAll();
    protected virtual void UpdateProgressColor(bool initialize);
    private void UpdateProgress();
    private void UpdatePulsingStatus();
}
public class Xamarin.Forms.Platform.Tizen.Renderers.MasterDetailContainer : Box {
    private MasterDetailPage _parent;
    private bool _isMaster;
    private VisualElement _childView;
    private bool _disposed;
    private bool _hasAppearedToParent;
    private IPageController PageController { get; }
    private IMasterDetailPageController MasterDetailPageController { get; }
    public VisualElement ChildView { get; public set; }
    public MasterDetailContainer(MasterDetailPage parentElement, bool isMaster);
    private IPageController get_PageController();
    private IMasterDetailPageController get_MasterDetailPageController();
    protected virtual override void Finalize();
    public VisualElement get_ChildView();
    public void set_ChildView(VisualElement value);
    public sealed virtual void Dispose();
    protected void RemoveChildView();
    protected void AddChildView(VisualElement childView);
    protected virtual void Dispose(bool disposing);
    private void OnLayoutUpdated();
    public void SendAppearing();
    public void SendDisappearing();
    [CompilerGeneratedAttribute]
private void <set_ChildView>b__13_0();
}
public static class Xamarin.Forms.Platform.Tizen.ResourcePath : object {
    public static string GetPath(string res);
    internal static string GetPath(ImageSource icon);
}
internal class Xamarin.Forms.Platform.Tizen.ResourcesProvider : object {
    private ResourceDictionary _dictionary;
    public sealed virtual IResourceDictionary GetSystemResources();
    private void UpdateStyles();
    private Style GetStyleByKey(string key);
    private Style GetStyle(Nullable`1<int> fontSize, Nullable`1<Color> textColor);
}
public class Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private EvasObject <RootNativeView>k__BackingField;
    public EvasObject RootNativeView { get; private set; }
    public RootNativeViewChangedEventArgs(EvasObject view);
    [CompilerGeneratedAttribute]
public EvasObject get_RootNativeView();
    [CompilerGeneratedAttribute]
private void set_RootNativeView(EvasObject value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.ScrollToPositionExtensions : object {
    [ExtensionAttribute]
public static ScrollToPosition ToNative(ScrollToPosition position);
}
public class Xamarin.Forms.Platform.Tizen.ScrollViewRenderer : ViewRenderer`2<ScrollView, Scroller> {
    private Box _scrollCanvas;
    public virtual Rect GetNativeContentGeometry();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ScrollView> e);
    protected virtual void Dispose(bool disposing);
    private void FillContent();
    private void OnContentLayoutUpdated(object sender, LayoutEventArgs e);
    private void UpdateAll();
    private void UpdateOrientation();
    private void UpdateContentSize();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected void OnScrolled(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ScrollViewRenderer/<OnScrollRequested>d__12")]
private void OnScrollRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    private ScrollBarVisiblePolicy ScrollBarVisibilityToTizen(ScrollBarVisibility visibility);
    [CompilerGeneratedAttribute]
private void <UpdateContentSize>b__9_0();
}
public class Xamarin.Forms.Platform.Tizen.SearchBarRenderer : ViewRenderer`2<SearchBar, SearchBar> {
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SearchBar> e);
    protected virtual Size MinimumSize();
    private void CancelButtonColorPropertyHandler(bool initialize);
    private void FontAttributesPropertyHandler();
    private void FontFamilyPropertyHandler();
    private void FontSizePropertyHandler();
    private void HorizontalTextAlignmentPropertyHandler();
    private void PlaceholderColorPropertyHandler(bool initialize);
    private void PlaceholderPropertyHandler();
    private void OnTextChanged(object sender, EventArgs e);
    private void OnActivated(object sender, EventArgs e);
    private void TextColorPropertyHandler(bool initialize);
    private void TextPropertyHandler();
    private void UpdateKeyboard(bool initialize);
    private void UpdateIsSpellCheckEnabled();
    private void UpdateMaxLength();
    private string MaxLengthFilter(Entry entry, string s);
    private void UpdateIsReadOnly();
}
public class Xamarin.Forms.Platform.Tizen.ShellItemRenderer : object {
    private IShellTabs _tabs;
    private IFlyoutController _flyoutController;
    private ShellItem _shellItem;
    private Box _box;
    private Panel _drawer;
    private ShellMoreToolbar _more;
    private ToolbarItem _moreToolbarItem;
    private ShellSectionNavigation _currentSection;
    private Dictionary`2<ToolbarItem, ShellSection> _itemToSection;
    private Dictionary`2<ShellSection, ToolbarItem> _sectionToitem;
    private Dictionary`2<ShellSection, ShellSectionNavigation> _sectionToPage;
    private LinkedList`1<ToolbarItem> _toolbarItemList;
    private bool _disposed;
    private Color _backgroudColor;
    private static string _dotsIcon;
    public Box Control { get; }
    public Color BackgroundColor { get; public set; }
    public ShellItemRenderer(IFlyoutController flyoutController, ShellItem item);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public Box get_Control();
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public void UpdateCurrentItem(ShellSection section);
    public void SetCurrentItem(ShellSection section);
    protected virtual void Dispose(bool disposing);
    protected virtual IShellTabs CreateTabs();
    protected virtual ShellSectionNavigation CreateShellSectionNavigation(IFlyoutController flyoutController, ShellSection section);
    private void OnShellItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private void UpdateToolbarBackgroudColor(Color color);
    private Panel CreateDrawer();
    private void InitialzeDrawer(EvasObject content);
    private ShellMoreToolbar CreateMoreToolbar();
    private void InitializeTabs();
    private void ResetToolbarItems();
    private void AddToolbarItems(NotifyCollectionChangedEventArgs e);
    private void RemoveToolbarItems(NotifyCollectionChangedEventArgs e);
    private void OnShellItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private string GetIconPath(ImageSource src);
    private void RemoveToolbarItem(ShellSection section);
    private void InsertToolbarItem(ShellSection section);
    private void InitializeTabsItem(ToolbarItem item, string resource);
    private ToolbarItem CreateTabsItem(string text);
    private void UpdateCurrentShellSection(ShellSection section);
    private void OnTabsSelected(object sender, ToolbarItemEventArgs e);
    private void UpdateLayout();
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.ShellMoreToolbar : GenList {
    private ShellItemRenderer _shellItemRenderer;
    private GenItemClass _defaultClass;
    private Dictionary`2<ShellSection, GenListItem> _sectionToItem;
    private LinkedList`1<ShellSection> _shellSectionList;
    private static int _cellHeight;
    private static int _iconPadding;
    private static int _iconSize;
    public int Height { get; }
    public ShellMoreToolbar(ShellItemRenderer renderer);
    public void AddItem(ShellSection section);
    public void RemoveItem(ShellSection section);
    public ShellSection RemoveFirst();
    public int get_Height();
    private EvasObject GetContent(object data, string part);
    private void OnItemSelected(object sender, GenListItemEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.ShellNavBar : Box {
    private Image _menu;
    private Label _title;
    private SearchBar _nativeSearchHandler;
    private EvasObject _nativeTitleView;
    private ShellSectionNavigation _shellSectionNavigation;
    private SearchHandler _searchHandler;
    private View _titleView;
    private Page _page;
    private IFlyoutController _flyoutController;
    private Color _backgroudColor;
    private Color _foregroudColor;
    private static string _menuIcon;
    private static string _backIcon;
    private bool _hasBackButton;
    public bool HasBackButton { get; public set; }
    public SearchHandler SearchHandler { get; public set; }
    public View TitleView { get; public set; }
    public string Title { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public Color TitleColor { get; public set; }
    internal Page CurrentPage { get; internal set; }
    public ShellNavBar(IFlyoutController flyoutController, ShellSectionNavigation shellSectionNavigation);
    public bool get_HasBackButton();
    public void set_HasBackButton(bool value);
    public SearchHandler get_SearchHandler();
    public void set_SearchHandler(SearchHandler value);
    public View get_TitleView();
    public void set_TitleView(View value);
    public string get_Title();
    public void set_Title(string value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    internal Page get_CurrentPage();
    internal void set_CurrentPage(Page value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ShellNavBar/<UpdateMenuIcon>d__39")]
private void UpdateMenuIcon();
    private void OnMenuClicked(object sender, EventArgs e);
    private void UpdateTitleView(View titleView);
    private void UpdateSearchHandler(SearchHandler handler);
    private Image GetSearchHandlerIcon(ImageSource source);
    private void UpdateChildren();
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    private void UpdatPageLayout();
}
public class Xamarin.Forms.Platform.Tizen.ShellRenderer : VisualElementRenderer`1<Shell> {
    private INavigationDrawer _native;
    private INavigationView _navigationView;
    private ShellItemRenderer _shellItem;
    public static Color DefaultBackgroundColor;
    public static Color DefaultForegroundColor;
    public static Color DefaultTitleColor;
    private static ShellRenderer();
    public virtual Rect GetNativeContentGeometry();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Shell> e);
    protected virtual void Dispose(bool disposing);
    protected void InitializeFlyout();
    protected void OnFlyoutIsPresentedChanged(object sender, EventArgs e);
    protected virtual ShellItemRenderer CreateShellItem(ShellItem item);
    protected virtual INavigationDrawer CreateNavigationDrawer();
    protected virtual INavigationView CreateNavigationView();
    private void UpdateCurrentItem();
    private void UpdateFlyoutBackgroundColor();
    private void UpdateFlyoutIsPresented();
    private void OnShellStructureChanged(object sender, EventArgs e);
    private void OnItemSelected(object sender, SelectedItemChangedEventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IFlyoutController.Open();
}
public class Xamarin.Forms.Platform.Tizen.ShellSectionNavigation : Box {
    private ShellNavBar _navBar;
    private ShellSection _section;
    private Page _currentPage;
    private Page _rootPage;
    private LinkedList`1<EvasObject> _navigationStack;
    private Dictionary`2<Page, EvasObject> _pageToNative;
    private Dictionary`2<EvasObject, Page> _nativeToPage;
    private bool _disposed;
    private bool _navBarIsVisible;
    private static int _defaultNavBarHeight;
    private int _navBarHeight;
    public bool NavBarIsVisible { get; public set; }
    public EvasObject CurrentNative { get; }
    public ShellSectionNavigation(IFlyoutController flyoutController, ShellSection section);
    protected virtual override void Finalize();
    public void Dispose();
    public bool get_NavBarIsVisible();
    public void set_NavBarIsVisible(bool value);
    public EvasObject get_CurrentNative();
    protected virtual void Dispose(bool disposing);
    protected virtual ShellSectionRenderer CreateShellSection(ShellSection section);
    private void UpdateDisplayedPage(Page page);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private void OnSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    private EvasObject GetOrCreatePage(Page page);
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnNavigationRequested(object sender, NavigationRequestedEventArgs e);
    private void RemoveRequest(object sender, NavigationRequestedEventArgs e);
    internal void PopRequest(object sender, NavigationRequestedEventArgs e);
    private void RemovePage(EvasObject del);
    private void PopToRootRequest(object sender, NavigationRequestedEventArgs e);
    private void PushRequest(object sender, NavigationRequestedEventArgs e);
    private void UpdateTaskCompletionSource(NavigationRequestedEventArgs e, bool result);
    private void InsertRequest(object sender, NavigationRequestedEventArgs e);
    private void UpdateLayout();
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.ShellSectionRenderer : object {
    private Box _box;
    private IShellTabs _tabs;
    private Page _currentContent;
    private ShellSection _section;
    private Dictionary`2<ShellContent, Page> _contentToPage;
    private Dictionary`2<ShellContent, ToolbarItem> _contentToItem;
    private Dictionary`2<ToolbarItem, ShellContent> _itemToContent;
    private LinkedList`1<ToolbarItem> _toolbarItemList;
    private Color _backgroundColor;
    private Color _foregroundCollor;
    private bool _disposed;
    public Box Control { get; }
    public Color BackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public ShellSectionRenderer(ShellSection section);
    protected virtual override void Finalize();
    public void Dispose();
    public Box get_Control();
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    protected virtual void Dispose(bool disposing);
    protected virtual IShellTabs CreateToolbar();
    private void InitializeTabs();
    private void OnSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateCurrentItem(ShellContent content);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private void UpdateToolbarBackgroudColor(Color color);
    private void UpdateToolbarForegroundColor(Color color);
    private void ResetToolbarItem();
    private ToolbarItem InsertToolbarItem(ShellContent content);
    private void RemoveToolbarItem(ShellContent section);
    private void OnShellSectionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddToolbarItems(NotifyCollectionChangedEventArgs e);
    private void RemoveToolbarItems(NotifyCollectionChangedEventArgs e);
    private void OnTabsSelected(object sender, ToolbarItemEventArgs e);
    private void UpdateCurrentShellContent(ShellContent content);
    private Page CreateShellContent(ShellContent content);
    private void UpdateLayout();
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.ShellTabs : Toolbar {
    private ShellTabsType _type;
    public ShellTabsType Type { get; public set; }
    public EvasObject TargetView { get; }
    public ShellTabs(EvasObject parent);
    public sealed virtual ShellTabsType get_Type();
    public sealed virtual void set_Type(ShellTabsType value);
    public sealed virtual EvasObject get_TargetView();
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.get_SelectedItem();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IShellTabs.add_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IShellTabs.remove_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.Append(string label, string icon);
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.InsertBefore(ToolbarItem before, string label, string icon);
}
public enum Xamarin.Forms.Platform.Tizen.ShellTabsType : Enum {
    public int value__;
    public static ShellTabsType Fixed;
    public static ShellTabsType Scrollable;
}
public class Xamarin.Forms.Platform.Tizen.SliderRenderer : ViewRenderer`2<Slider, Slider> {
    private Color _defaultMinColor;
    private Color _defaultMaxColor;
    private Color _defaultThumbColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual Size Measure(int availableWidth, int availableHeight);
    private void OnValueChanged(object sender, EventArgs e);
    private void OnDragStarted(object sender, EventArgs e);
    private void OnDragStopped(object sender, EventArgs e);
    protected void UpdateValue();
    protected void UpdateMinimum();
    protected void UpdateMaximum();
    protected void UpdateMinimumTrackColor();
    protected void UpdateMaximumTrackColor();
    protected virtual void UpdateThumbColor();
    protected void UpdateSliderColors();
}
public class Xamarin.Forms.Platform.Tizen.StepperRenderer : ViewRenderer`2<Stepper, Spinner> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual void Dispose(bool disposing);
    private void OnValueChanged(object sender, EventArgs e);
    protected void UpdateValue();
    protected void UpdateMinimum();
    protected void UpdateMaximum();
    private void UpdateStep();
}
public class Xamarin.Forms.Platform.Tizen.StreamImageSourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.StreamImageSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public class Xamarin.Forms.Platform.Tizen.SwipeGestureHandler : GestureHandler {
    public GestureType Type { get; }
    public SwipeGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
public class Xamarin.Forms.Platform.Tizen.SwitchCellRenderer : CellRenderer {
    private Dictionary`2<EvasObject, VisualElement> _cacheCandidate;
    [CompilerGeneratedAttribute]
private string <MainPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchPart>k__BackingField;
    protected string MainPart { get; protected set; }
    protected string SwitchPart { get; protected set; }
    protected SwitchCellRenderer(string style);
    [CompilerGeneratedAttribute]
protected string get_MainPart();
    [CompilerGeneratedAttribute]
protected void set_MainPart(string value);
    [CompilerGeneratedAttribute]
protected string get_SwitchPart();
    [CompilerGeneratedAttribute]
protected void set_SwitchPart(string value);
    protected virtual Span OnGetText(Cell cell, string part);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
}
public class Xamarin.Forms.Platform.Tizen.SwitchRenderer : ViewRenderer`2<Switch, Check> {
    private string _onColorPart;
    private bool _isTV;
    private string _onColorEdjePart;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateThemeStyle();
    private void OnStateChanged(object sender, EventArgs e);
    private void HandleToggled();
    private void UpdateOnColor(bool initialize);
}
public class Xamarin.Forms.Platform.Tizen.TabbedPageRenderer : VisualElementRenderer`1<TabbedPage> {
    private Box _outterLayout;
    private Box _innerBox;
    private Scroller _scroller;
    private Toolbar _toolbar;
    private Dictionary`2<ToolbarItem, Page> _itemToItemPage;
    private List`1<ToolbarItem> _toolbarItemList;
    private bool _isResettingToolbarItems;
    private bool _isInitialized;
    private bool _isUpdateByToolbar;
    private bool _isUpdateByScroller;
    private bool _isUpdateByCurrentPage;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TabbedPage> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementReady();
    protected virtual void UpdateThemeStyle();
    private void OnInnerLayoutUpdate();
    private void OnItemPageScrolled(object sender, EventArgs e);
    private void UpdateBarBackgroundColor(bool initialize);
    private void UpdateBarTextColor(bool initialize);
    private void UpdateSelectedTabColor(bool initialize);
    private void UpdateUnselectedTabColor(bool initialize);
    private void UpdateTitle();
    private void UpdateTitle(Page page);
    private void OnPageTitleChanged(object sender, PropertyChangedEventArgs e);
    private void OnElementPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddToolbarItems(NotifyCollectionChangedEventArgs e);
    private ToolbarItem AddToolbarItem(Page newItem, int index);
    private void RemoveToolbarItems(NotifyCollectionChangedEventArgs e);
    private void RemoveToolbarItem(Page oldItem);
    private void ResetToolbarItems();
    private void FillToolbarAndContents();
    private void OnToolbarItemSelected(object sender, ToolbarItemEventArgs e);
    private void OnCurrentPageChanged();
    private void ApplyBarItemColors(ToolbarItem item, BarItemColorType type, Color color);
    private void ClearBarItemColors(ToolbarItem item, BarItemColorType type);
}
public class Xamarin.Forms.Platform.Tizen.TableViewRenderer : ViewRenderer`2<TableView, TableView> {
    internal static BindableProperty PresentationProperty;
    private static TableViewRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    protected virtual void Dispose(bool disposing);
    private void OnSelected(object sender, GenListItemEventArgs e);
    private void OnRootPropertyChanged(object sender, EventArgs e);
    private void UpdateHasUnevenRows();
    private void UpdateRowHeight();
}
public class Xamarin.Forms.Platform.Tizen.TapGestureHandler : GestureHandler {
    public GestureType Type { get; }
    public TapGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.TextAlignmentExtensions : object {
    [ExtensionAttribute]
public static TextAlignment ToNative(TextAlignment alignment);
}
public class Xamarin.Forms.Platform.Tizen.TextCellRenderer : CellRenderer {
    private bool _groupMode;
    [CompilerGeneratedAttribute]
private string <MainPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailPart>k__BackingField;
    protected string MainPart { get; protected set; }
    protected string DetailPart { get; protected set; }
    protected TextCellRenderer(string style);
    [CompilerGeneratedAttribute]
protected string get_MainPart();
    [CompilerGeneratedAttribute]
protected void set_MainPart(string value);
    [CompilerGeneratedAttribute]
protected string get_DetailPart();
    [CompilerGeneratedAttribute]
protected void set_DetailPart(string value);
    public virtual void SetGroupMode(bool enable);
    protected virtual Span OnGetText(Cell cell, string part);
    protected virtual Span OnMainText(TextCell cell);
    protected virtual Span OnDetailText(TextCell cell);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
}
public class Xamarin.Forms.Platform.Tizen.TimePickerRenderer : ViewRenderer`2<TimePicker, EditfieldEntry> {
    private static string DialogTitle;
    private static string s_defaultFormat;
    private TimeSpan _time;
    private Lazy`1<IDateTimeDialog> _lazyDialog;
    private static TimePickerRenderer();
    protected virtual IDateTimeDialog CreateDialog();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    private void OnTextBlockFocused(object o, EventArgs e);
    private void OnDialogTimeChanged(object sender, DateChangedEventArgs dcea);
    private void UpdateFormat();
    private void UpdateTextColor();
    private void UpdateTime();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    private void UpdateTimeAndFormat();
    [CompilerGeneratedAttribute]
private IDateTimeDialog <OnElementChanged>b__6_0();
}
internal class Xamarin.Forms.Platform.Tizen.TizenIsolatedStorageFile : object {
    private string _rootPath;
    public void CreateDirectory(string path);
    public sealed virtual Task CreateDirectoryAsync(string path);
    public void MoveFile(string source, string dest);
    public void DeleteFile(string path);
    public bool DirectoryExists(string path);
    public sealed virtual Task`1<bool> GetDirectoryExistsAsync(string path);
    public bool FileExists(string path);
    public sealed virtual Task`1<bool> GetFileExistsAsync(string path);
    public DateTimeOffset GetLastWriteTime(string path);
    public sealed virtual Task`1<DateTimeOffset> GetLastWriteTimeAsync(string path);
    public Stream OpenFile(string path, FileMode mode);
    public Stream OpenFile(string path, FileMode mode, FileAccess access);
    public Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access);
    public sealed virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access, FileShare share);
}
internal class Xamarin.Forms.Platform.Tizen.TizenPlatformServices : object {
    private static Lazy`1<MD5> checksum;
    private static SynchronizationContext s_context;
    private static Char[] HexDigits;
    public bool IsInvokeRequired { get; }
    public string RuntimePlatform { get; }
    private static TizenPlatformServices();
    public sealed virtual double GetNamedSize(NamedSize size, Type targetElementType, bool useOldSizes);
    public sealed virtual void OpenUriAction(Uri uri);
    public sealed virtual void BeginInvokeOnMainThread(Action action);
    public sealed virtual Ticker CreateTicker();
    public sealed virtual void StartTimer(TimeSpan interval, Func`1<bool> callback);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.TizenPlatformServices/<GetStreamAsync>d__9")]
public sealed virtual Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken);
    public sealed virtual Assembly[] GetAssemblies();
    public sealed virtual IIsolatedStorageFile GetUserStoreForApplication();
    public sealed virtual string GetMD5Hash(string input);
    public sealed virtual void QuitApplication();
    public sealed virtual bool get_IsInvokeRequired();
    public sealed virtual string get_RuntimePlatform();
    public sealed virtual SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    private static MD5 CreateChecksum();
}
public class Xamarin.Forms.Platform.Tizen.UriImageSourceHandler : object {
    public sealed virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public class Xamarin.Forms.Platform.Tizen.ViewCellRenderer : CellRenderer {
    private Dictionary`2<EvasObject, ViewCell> _cacheCandidate;
    [CompilerGeneratedAttribute]
private string <MainContentPart>k__BackingField;
    protected string MainContentPart { get; protected set; }
    [CompilerGeneratedAttribute]
protected string get_MainContentPart();
    [CompilerGeneratedAttribute]
protected void set_MainContentPart(string value);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
    private EvasObject CreateReusableContent(ViewCell viewCell);
    private void UpdatePropagateEvent(View view);
    [CompilerGeneratedAttribute]
private void <CreateReusableContent>b__9_0(object sender, EventArgs e);
}
public abstract class Xamarin.Forms.Platform.Tizen.ViewRenderer`2 : VisualElementRenderer`1<TView> {
    private Lazy`1<GestureDetector> _gestureDetector;
    internal GestureDetector GestureDetector { get; }
    public TNativeView Control { get; }
    internal GestureDetector get_GestureDetector();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TView> e);
    public TNativeView get_Control();
    protected void SetNativeControl(TNativeView control);
    protected virtual void UpdateIsEnabled(bool initialize);
    [CompilerGeneratedAttribute]
private GestureDetector <.ctor>b__3_0();
}
public class Xamarin.Forms.Platform.Tizen.VisualElementChangedEventArgs : ElementChangedEventArgs`1<VisualElement> {
    public VisualElementChangedEventArgs(VisualElement oldElement, VisualElement newElement);
}
public abstract class Xamarin.Forms.Platform.Tizen.VisualElementRenderer`1 : object {
    private List`1<EventHandler`1<VisualElementChangedEventArgs>> _elementChangedHandlers;
    private Dictionary`2<string, Action`1<bool>> _propertyHandlersWithInit;
    private Dictionary`2<string, Action> _propertyHandlers;
    private HashSet`1<string> _batchedProperties;
    private VisualElementRendererFlags _flags;
    private bool _movedCallbackEnabled;
    private string _defaultAccessibilityName;
    private string _defaultAccessibilityDescription;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private Lazy`1<CustomFocusManager> _customFocusManager;
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EvasObject <NativeView>k__BackingField;
    public TElement Element { get; private set; }
    private VisualElement Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element { get; }
    public EvasObject NativeView { get; private set; }
    protected bool IsDisposed { get; }
    protected virtual override void Finalize();
    private void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public TElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TElement value);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual EvasObject get_NativeView();
    [CompilerGeneratedAttribute]
private void set_NativeView(EvasObject value);
    protected bool get_IsDisposed();
    public sealed virtual void Dispose();
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public void SetElement(TElement newElement);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    protected void RegisterEffect(Effect effect);
    protected virtual void UpdateLayout();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected void SetNativeView(EvasObject control);
    protected virtual void SetAccessibilityName(bool initialize);
    protected virtual void SetAccessibilityDescription(bool initialize);
    protected virtual void SetIsAccessibilityElement(bool initialize);
    protected virtual void SetLabeledBy(bool initialize);
    internal virtual void SendVisualElementInitialized(VisualElement element, EvasObject nativeView);
    private void UpdateNativeGeometry();
    private void NativeViewDeleted(object sender, EventArgs e);
    private void OnBatchCommitted(object sender, EventArg`1<VisualElement> e);
    protected void RegisterPropertyHandler(BindableProperty property, Action`1<bool> handler);
    protected void RegisterPropertyHandler(string name, Action`1<bool> handler);
    protected void RegisterPropertyHandler(BindableProperty property, Action handler);
    protected void RegisterPropertyHandler(string name, Action handler);
    protected void UpdateAllProperties(bool initialization);
    protected virtual void OnElementReady();
    protected virtual Size MinimumSize();
    protected virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void UpdateOpacity(bool initialize);
    public virtual Rect GetNativeContentGeometry();
    private static double ComputeAbsoluteX(VisualElement e);
    private static double ComputeAbsoluteY(VisualElement e);
    private static Point ComputeAbsolutePoint(VisualElement e);
    private void OnFocused(object sender, EventArgs e);
    private void OnUnfocused(object sender, EventArgs e);
    private void AddChild(Element child);
    private void RemoveChild(VisualElement view);
    private void OnChildAdded(object sender, ElementEventArgs e);
    private void OnChildRemoved(object sender, ElementEventArgs e);
    private void OnChildrenReordered(object sender, EventArgs e);
    private void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    private void OnRegisterEffect(PlatformEffect effect);
    private void OnMoved(object sender, EventArgs e);
    private void EnsureChildOrder();
    private void UpdateIsVisible();
    protected virtual void UpdateIsEnabled(bool initialize);
    protected virtual void UpdateInputTransparent(bool initialize);
    protected virtual void UpdateThemeStyle();
    private void UpdateTransformation(bool initialize);
    private void UpdateFocusAllowed(bool initialize);
    private void UpdateFocusDirection(bool initialize);
    private void UpdateToolTip(bool initialize);
    private void SetNextFocusViewInternal(string direction);
    private void UpdateFocusUpView();
    private void UpdateFocusDownView();
    private void UpdateFocusLeftView();
    private void UpdateFocusRightView();
    private void UpdateFocusBackView();
    private void UpdateFocusForwardView();
    private void ApplyRotation(EvasMap map, Rect geometry, Boolean& changed);
    private void ApplyScale(EvasMap map, Rect geometry, Boolean& changed);
    private void ApplyTranslation(EvasMap map, Rect geometry, Boolean& changed);
    protected virtual void ApplyTransformation();
    private void UpdateTabIndex();
    private void UpdateIsTabStop(bool init);
    private FocusDirection ConvertToNativeFocusDirection(string direction);
    [CompilerGeneratedAttribute]
private CustomFocusManager <.ctor>b__10_0();
}
[FlagsAttribute]
public enum Xamarin.Forms.Platform.Tizen.VisualElementRendererFlags : Enum {
    public byte value__;
    public static VisualElementRendererFlags None;
    public static VisualElementRendererFlags Disposed;
    public static VisualElementRendererFlags NeedsLayout;
    public static VisualElementRendererFlags NeedsTransformation;
}
public class Xamarin.Forms.Platform.Tizen.WebViewRenderer : ViewRenderer`2<WebView, WebViewContainer> {
    private bool _isUpdating;
    private WebNavigationEvent _eventState;
    private WebView NativeWebView { get; }
    private IWebViewController ElementController { get; }
    private WebView get_NativeWebView();
    private IWebViewController get_ElementController();
    private sealed virtual override void Xamarin.Forms.IWebViewDelegate.LoadHtml(string html, string baseUrl);
    private sealed virtual override void Xamarin.Forms.IWebViewDelegate.LoadUrl(string url);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<WebView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLoadError(object sender, SmartCallbackLoadErrorArgs e);
    private void OnLoadStarted(object sender, EventArgs e);
    private void OnLoadFinished(object sender, EventArgs e);
    private void Load();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
    private void SendNavigated(UrlWebViewSource source, WebNavigationEvent evnt, WebNavigationResult result);
    private void UpdateCanGoBackForward();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.WindowExtension : object {
    [ExtensionAttribute]
public static DeviceOrientation GetDeviceOrientation(Window window);
}
internal class Xamarin.Forms.Platform.Tizen.XamarinLogListener : LogListener {
    public virtual void Warning(string category, string message);
}
internal class Xamarin.Forms.TizenExpressionSearch : ExpressionVisitor {
    private List`1<object> _results;
    private Type _targetType;
    public sealed virtual List`1<T> FindObjects(Expression expression);
    protected virtual Expression VisitMember(MemberExpression node);
}
public enum Xamarin.Forms.TizenTitleBarVisibility : Enum {
    public int value__;
    public static TizenTitleBarVisibility Default;
    public static TizenTitleBarVisibility Never;
}
public class Xamarin.Forms.ViewInitializedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private EvasObject <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <View>k__BackingField;
    public EvasObject NativeView { get; internal set; }
    public VisualElement View { get; internal set; }
    [CompilerGeneratedAttribute]
public EvasObject get_NativeView();
    [CompilerGeneratedAttribute]
internal void set_NativeView(EvasObject value);
    [CompilerGeneratedAttribute]
public VisualElement get_View();
    [CompilerGeneratedAttribute]
internal void set_View(VisualElement value);
}
