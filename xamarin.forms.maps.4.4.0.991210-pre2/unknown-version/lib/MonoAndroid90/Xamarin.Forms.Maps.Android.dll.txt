internal class ThisAssembly : object {
}
internal class Xamarin.Forms.Maps.Android.GeocoderBackend : object {
    private Context _context;
    private Geocoder _geocoder;
    private Geocoder AndroidGeocoder { get; }
    public GeocoderBackend(Context context);
    private Geocoder get_AndroidGeocoder();
    public void Register();
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.Android.GeocoderBackend/<GetPositionsForAddressAsync>d__6")]
public Task`1<IEnumerable`1<Position>> GetPositionsForAddressAsync(string address);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.Android.GeocoderBackend/<GetAddressesForPositionAsync>d__7")]
public Task`1<IEnumerable`1<string>> GetAddressesForPositionAsync(Position position);
}
public class Xamarin.Forms.Maps.Android.MapRenderer : ViewRenderer`2<Map, MapView> {
    private static string MoveMessageName;
    private static Bundle s_bundle;
    private bool _disposed;
    private bool _init;
    private List`1<Marker> _markers;
    private List`1<Polyline> _polylines;
    private List`1<Polygon> _polygons;
    protected GoogleMap NativeMap;
    protected Map Map { get; }
    unknown static Bundle Bundle {internal set; }
    public MapRenderer(Context context);
    protected Map get_Map();
    internal static void set_Bundle(Bundle value);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual MapView CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Map> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnMapReady(GoogleMap map);
    protected virtual MarkerOptions CreateMarker(Pin pin);
    private void AddPins(IList pins);
    private void PinOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected Marker GetMarkerForPin(Pin pin);
    protected Pin GetPinForMarker(Marker marker);
    private void OnMarkerClick(object sender, MarkerClickEventArgs e);
    private void OnInfoWindowClick(object sender, InfoWindowClickEventArgs e);
    private void OnMapClick(object sender, MapClickEventArgs e);
    private void MoveToRegion(MapSpan span, bool animate);
    private void OnPinCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void OnMoveToRegionMessage(Map s, MapSpan a);
    private void RemovePins(IList pins);
    private void SetMapType();
    private void UpdateVisibleRegion(LatLng pos);
    private void MapElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnMapElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddMapElements(IEnumerable`1<MapElement> mapElements);
    private void RemoveMapElements(IEnumerable`1<MapElement> mapElements);
    protected virtual PolylineOptions CreatePolylineOptions(Polyline polyline);
    protected Polyline GetNativePolyline(Polyline polyline);
    protected Polyline GetFormsPolyline(Polyline polyline);
    private void PolylineOnPropertyChanged(Polyline formsPolyline, PropertyChangedEventArgs e);
    private void AddPolyline(Polyline polyline);
    private void RemovePolyline(Polyline polyline);
    protected virtual PolygonOptions CreatePolygonOptions(Polygon polygon);
    protected Polygon GetNativePolygon(Polygon polygon);
    protected Polygon GetFormsPolygon(Polygon polygon);
    private void PolygonOnPropertyChanged(Polygon polygon, PropertyChangedEventArgs e);
    private void AddPolygon(Polygon polygon);
    private void RemovePolygon(Polygon polygon);
    private sealed virtual override void Android.Gms.Maps.IOnMapReadyCallback.OnMapReady(GoogleMap map);
    private sealed virtual override void Android.Gms.Maps.GoogleMap.IOnCameraMoveListener.OnCameraMove();
}
public static class Xamarin.FormsMaps : object {
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private static Context <Context>k__BackingField;
    public static bool IsInitialized { get; private set; }
    [ObsoleteAttribute("Context is obsolete as of version 2.5. Please use a local context instead.")]
[EditorBrowsableAttribute("1")]
public static Context Context { get; private set; }
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public static Context get_Context();
    [CompilerGeneratedAttribute]
private static void set_Context(Context value);
    public static void Init(Activity activity, Bundle bundle);
}
