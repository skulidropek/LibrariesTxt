internal class ThisAssembly : object {
}
internal class Xamarin.Forms.Maps.iOS.GeocoderBackend : object {
    public static void Register();
    private static Task`1<IEnumerable`1<string>> GetAddressesForPositionAsync(Position position);
    private static Task`1<IEnumerable`1<Position>> GetPositionsForAddressAsync(string address);
}
internal class Xamarin.Forms.Maps.iOS.MapPool : object {
    private static MapPool s_instance;
    internal ConcurrentQueue`1<MKMapView> Maps;
    public static MapPool Instance { get; }
    public static MapPool get_Instance();
    public static void Add(MKMapView mapView);
    public static MKMapView Get();
}
public class Xamarin.Forms.Maps.iOS.MapRenderer : ViewRenderer {
    private CLLocationManager _locationManager;
    private bool _shouldUpdateRegion;
    private object _lastTouchedView;
    private bool _disposed;
    private UITapGestureRecognizer _mapClickedGestureRecognizer;
    private static string MoveMessageName;
    protected bool ManageNativeControlLifetime { get; }
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual bool get_ManageNativeControlLifetime();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void LayoutSubviews();
    protected virtual IMKAnnotation CreateAnnotation(Pin pin);
    protected virtual MKAnnotationView GetViewForAnnotation(MKMapView mapView, IMKAnnotation annotation);
    protected void AttachGestureToPin(MKAnnotationView mapPin, IMKAnnotation annotation);
    protected Pin GetPinForAnnotation(IMKAnnotation annotation);
    private void MkMapViewOnAnnotationViewSelected(object sender, MKAnnotationViewEventArgs e);
    private void OnCalloutClicked(IMKAnnotation annotation);
    private void OnMapClicked(UITapGestureRecognizer recognizer);
    private void UpdateRegion();
    private void AddPins(IList pins);
    private void PinOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void MkMapViewOnRegionChanged(object sender, MKMapViewChangeEventArgs e);
    private void MoveToRegion(MapSpan mapSpan, bool animated);
    private void OnPinCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void RemovePins(IList pins);
    private void UpdateHasScrollEnabled();
    private void UpdateHasZoomEnabled();
    private void UpdateIsShowingUser();
    private void UpdateMapType();
    private void OnMapElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddMapElements(IEnumerable`1<MapElement> mapElements);
    private void RemoveMapElements(IEnumerable`1<MapElement> mapElements);
    private void MapElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual MKOverlayRenderer GetViewForOverlay(MKMapView mapview, IMKOverlay overlay);
    protected virtual MKPolylineRenderer GetViewForPolyline(MKPolyline mkPolyline);
    protected virtual MKPolygonRenderer GetViewForPolygon(MKPolygon mkPolygon);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__10_0(Map s, MapSpan a);
}
public static class Xamarin.FormsMaps : object {
    private static bool s_isInitialized;
    private static Nullable`1<bool> s_isiOs8OrNewer;
    private static Nullable`1<bool> s_isiOs9OrNewer;
    private static Nullable`1<bool> s_isiOs10OrNewer;
    internal static bool IsiOs8OrNewer { get; }
    internal static bool IsiOs9OrNewer { get; }
    internal static bool IsiOs10OrNewer { get; }
    internal static bool get_IsiOs8OrNewer();
    internal static bool get_IsiOs9OrNewer();
    internal static bool get_IsiOs10OrNewer();
    public static void Init();
}
