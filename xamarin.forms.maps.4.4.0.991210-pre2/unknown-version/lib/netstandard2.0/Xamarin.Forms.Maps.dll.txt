internal class ThisAssembly : object {
}
public class Xamarin.Forms.Maps.Distance : ValueType {
    private static double MetersPerMile;
    private static double MetersPerKilometer;
    [CompilerGeneratedAttribute]
private double <Meters>k__BackingField;
    public double Meters { get; }
    public double Miles { get; }
    public double Kilometers { get; }
    public Distance(double meters);
    [CompilerGeneratedAttribute]
public double get_Meters();
    public double get_Miles();
    public double get_Kilometers();
    public static Distance FromMiles(double miles);
    public static Distance FromMeters(double meters);
    public static Distance FromKilometers(double kilometers);
    public bool Equals(Distance other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Distance left, Distance right);
    public static bool op_Inequality(Distance left, Distance right);
}
public class Xamarin.Forms.Maps.Geocoder : object {
    [EditorBrowsableAttribute("1")]
public static Func`2<string, Task`1<IEnumerable`1<Position>>> GetPositionsForAddressAsyncFunc;
    [EditorBrowsableAttribute("1")]
public static Func`2<Position, Task`1<IEnumerable`1<string>>> GetAddressesForPositionFuncAsync;
    public Task`1<IEnumerable`1<string>> GetAddressesForPositionAsync(Position position);
    public Task`1<IEnumerable`1<Position>> GetPositionsForAddressAsync(string address);
}
public class Xamarin.Forms.Maps.Map : View {
    public static BindableProperty MapTypeProperty;
    public static BindableProperty IsShowingUserProperty;
    public static BindableProperty HasScrollEnabledProperty;
    public static BindableProperty HasZoomEnabledProperty;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty ItemTemplateSelectorProperty;
    public static BindableProperty MoveToLastRegionOnLayoutChangeProperty;
    private ObservableCollection`1<Pin> _pins;
    private ObservableCollection`1<MapElement> _mapElements;
    private MapSpan _visibleRegion;
    [CompilerGeneratedAttribute]
private EventHandler`1<MapClickedEventArgs> MapClicked;
    [CompilerGeneratedAttribute]
private MapSpan <LastMoveToRegion>k__BackingField;
    public bool HasScrollEnabled { get; public set; }
    public bool HasZoomEnabled { get; public set; }
    public bool IsShowingUser { get; public set; }
    public MapType MapType { get; public set; }
    public IList`1<Pin> Pins { get; }
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public bool MoveToLastRegionOnLayoutChange { get; public set; }
    public IList`1<MapElement> MapElements { get; }
    public MapSpan VisibleRegion { get; internal set; }
    [EditorBrowsableAttribute("1")]
public MapSpan LastMoveToRegion { get; private set; }
    public Map(MapSpan region);
    private static Map();
    public bool get_HasScrollEnabled();
    public void set_HasScrollEnabled(bool value);
    public bool get_HasZoomEnabled();
    public void set_HasZoomEnabled(bool value);
    public bool get_IsShowingUser();
    public void set_IsShowingUser(bool value);
    public MapType get_MapType();
    public void set_MapType(MapType value);
    public IList`1<Pin> get_Pins();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    public bool get_MoveToLastRegionOnLayoutChange();
    public void set_MoveToLastRegionOnLayoutChange(bool value);
    public IList`1<MapElement> get_MapElements();
    [CompilerGeneratedAttribute]
public void add_MapClicked(EventHandler`1<MapClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MapClicked(EventHandler`1<MapClickedEventArgs> value);
    [EditorBrowsableAttribute("1")]
public void SendMapClicked(Position position);
    [EditorBrowsableAttribute("1")]
public void SetVisibleRegion(MapSpan value);
    public MapSpan get_VisibleRegion();
    internal void set_VisibleRegion(MapSpan value);
    [CompilerGeneratedAttribute]
public MapSpan get_LastMoveToRegion();
    [CompilerGeneratedAttribute]
private void set_LastMoveToRegion(MapSpan value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Pin> GetEnumerator();
    public void MoveToRegion(MapSpan mapSpan);
    private void PinsOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnItemsSourcePropertyChanged(IEnumerable oldItemsSource, IEnumerable newItemsSource);
    private void OnItemTemplatePropertyChanged(DataTemplate oldItemTemplate, DataTemplate newItemTemplate);
    private void OnItemTemplateSelectorPropertyChanged();
    private void OnItemsSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void CreatePinItems();
    private void CreatePin(object newItem);
    private void RemovePin(object itemToRemove);
    [CompilerGeneratedAttribute]
private void <OnItemsSourceCollectionChanged>b__60_0(object item, int _, bool __);
    [CompilerGeneratedAttribute]
private void <OnItemsSourceCollectionChanged>b__60_1(object item, int _);
    [CompilerGeneratedAttribute]
private void <OnItemsSourceCollectionChanged>b__60_2();
}
public class Xamarin.Forms.Maps.MapClickedEventArgs : object {
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    public Position Position { get; }
    public MapClickedEventArgs(Position position);
    [CompilerGeneratedAttribute]
public Position get_Position();
}
public class Xamarin.Forms.Maps.MapElement : Element {
    public static BindableProperty StrokeColorProperty;
    public static BindableProperty StrokeWidthProperty;
    [CompilerGeneratedAttribute]
private object <MapElementId>k__BackingField;
    public Color StrokeColor { get; public set; }
    public float StrokeWidth { get; public set; }
    [EditorBrowsableAttribute("1")]
public object MapElementId { get; public set; }
    private static MapElement();
    public Color get_StrokeColor();
    public void set_StrokeColor(Color value);
    public float get_StrokeWidth();
    public void set_StrokeWidth(float value);
    [CompilerGeneratedAttribute]
public object get_MapElementId();
    [CompilerGeneratedAttribute]
public void set_MapElementId(object value);
}
public class Xamarin.Forms.Maps.MapSpan : object {
    private static double EarthRadiusKm;
    private static double EarthCircumferenceKm;
    private static double MinimumRangeDegrees;
    [CompilerGeneratedAttribute]
private Position <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LatitudeDegrees>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LongitudeDegrees>k__BackingField;
    public Position Center { get; }
    public double LatitudeDegrees { get; }
    public double LongitudeDegrees { get; }
    public Distance Radius { get; }
    public MapSpan(Position center, double latitudeDegrees, double longitudeDegrees);
    [CompilerGeneratedAttribute]
public Position get_Center();
    [CompilerGeneratedAttribute]
public double get_LatitudeDegrees();
    [CompilerGeneratedAttribute]
public double get_LongitudeDegrees();
    public Distance get_Radius();
    public MapSpan ClampLatitude(double north, double south);
    public virtual bool Equals(object obj);
    public static MapSpan FromCenterAndRadius(Position center, Distance radius);
    public virtual int GetHashCode();
    public static bool op_Equality(MapSpan left, MapSpan right);
    public static bool op_Inequality(MapSpan left, MapSpan right);
    public MapSpan WithZoom(double zoomFactor);
    private static double DistanceToLatitudeDegrees(Distance distance);
    private static double DistanceToLongitudeDegrees(Position position, Distance distance);
    private bool Equals(MapSpan other);
    private static double LatitudeCircumferenceKm(Position position);
    private static double LatitudeDegreesToKm(double latitudeDegrees);
    private static double LongitudeDegreesToKm(Position position, double longitudeDegrees);
}
public enum Xamarin.Forms.Maps.MapType : Enum {
    public int value__;
    public static MapType Street;
    public static MapType Satellite;
    public static MapType Hybrid;
}
public class Xamarin.Forms.Maps.Pin : Element {
    public static BindableProperty TypeProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty AddressProperty;
    public static BindableProperty LabelProperty;
    private object _markerId;
    private object _id;
    [CompilerGeneratedAttribute]
private EventHandler Clicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<PinClickedEventArgs> MarkerClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<PinClickedEventArgs> InfoWindowClicked;
    public string Address { get; public set; }
    public string Label { get; public set; }
    public Position Position { get; public set; }
    public PinType Type { get; public set; }
    [ObsoleteAttribute("This property is obsolete as of 4.0.0. Please use MarkerId instead.")]
[EditorBrowsableAttribute("1")]
public object Id { get; public set; }
    [EditorBrowsableAttribute("1")]
public object MarkerId { get; public set; }
    private static Pin();
    public string get_Address();
    public void set_Address(string value);
    public string get_Label();
    public void set_Label(string value);
    public Position get_Position();
    public void set_Position(Position value);
    public PinType get_Type();
    public void set_Type(PinType value);
    public object get_Id();
    public void set_Id(object value);
    public object get_MarkerId();
    public void set_MarkerId(object value);
    [CompilerGeneratedAttribute]
public void add_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MarkerClicked(EventHandler`1<PinClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MarkerClicked(EventHandler`1<PinClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InfoWindowClicked(EventHandler`1<PinClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InfoWindowClicked(EventHandler`1<PinClickedEventArgs> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Pin left, Pin right);
    public static bool op_Inequality(Pin left, Pin right);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is obsolete as of 4.3.0.")]
public bool SendTap();
    [EditorBrowsableAttribute("1")]
public bool SendMarkerClick();
    [EditorBrowsableAttribute("1")]
public bool SendInfoWindowClick();
    private bool Equals(Pin other);
}
public class Xamarin.Forms.Maps.PinClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <HideInfoWindow>k__BackingField;
    public bool HideInfoWindow { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HideInfoWindow();
    [CompilerGeneratedAttribute]
public void set_HideInfoWindow(bool value);
}
public enum Xamarin.Forms.Maps.PinType : Enum {
    public int value__;
    public static PinType Generic;
    public static PinType Place;
    public static PinType SavedPin;
    public static PinType SearchResult;
}
public class Xamarin.Forms.Maps.Polygon : MapElement {
    public static BindableProperty FillColorProperty;
    [CompilerGeneratedAttribute]
private IList`1<Position> <Geopath>k__BackingField;
    public Color FillColor { get; public set; }
    public IList`1<Position> Geopath { get; }
    private static Polygon();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    [CompilerGeneratedAttribute]
public IList`1<Position> get_Geopath();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(object sender, NotifyCollectionChangedEventArgs args);
}
public class Xamarin.Forms.Maps.Polyline : MapElement {
    [CompilerGeneratedAttribute]
private IList`1<Position> <Geopath>k__BackingField;
    public IList`1<Position> Geopath { get; }
    [CompilerGeneratedAttribute]
public IList`1<Position> get_Geopath();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(object sender, NotifyCollectionChangedEventArgs args);
}
public class Xamarin.Forms.Maps.Position : ValueType {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    public double Latitude { get; }
    public double Longitude { get; }
    public Position(double latitude, double longitude);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public double get_Longitude();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Position left, Position right);
    public static bool op_Inequality(Position left, Position right);
}
