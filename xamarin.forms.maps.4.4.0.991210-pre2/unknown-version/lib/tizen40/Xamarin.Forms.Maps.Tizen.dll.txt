internal class ThisAssembly : object {
}
internal class Xamarin.Forms.Maps.Tizen.GeocoderBackend : object {
    public static void Register();
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.Tizen.GeocoderBackend/<GetPositionsForAddressAsync>d__1")]
public static Task`1<IEnumerable`1<Position>> GetPositionsForAddressAsync(string address);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.Tizen.GeocoderBackend/<GetAddressesForPositionAsync>d__2")]
public static Task`1<IEnumerable`1<string>> GetAddressesForPositionAsync(Position position);
}
public class Xamarin.Forms.Maps.Tizen.MapRenderer : ViewRenderer`2<Map, MapView> {
    private static string MoveMessageName;
    private static int BaseZoomLevel;
    private bool _disposed;
    private Marker _marker;
    private bool _isLocatorStarted;
    private Lazy`1<Locator> _locator;
    private List`1<Pin> _pins;
    private static Locator InitializeLocator();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Map> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnMoveToRegion(Map map, MapSpan span);
    private int GetZoomFactor(double degree, double targetDegree);
    private void OnVisibleRegionChanged(object sender, EventArgs e);
    private void UpdateVisibleRegion();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddPins(IEnumerable pins);
    private void RemovePins(IEnumerable pins);
    private void ResetPins();
    private void UpdateHasZoomEnabled();
    private void UpdateHasScrollEnabled();
    private void Dummy(object sender, MapGestureEventArgs e);
    private void ApplyIsShowingUser(Geocoordinates coordinates);
    private bool IsLocatorSupported();
    private void UpdateIsShowingUser();
    private void OnLocationChanged(object sender, LocationChangedEventArgs e);
    private void UpdateMapType();
    private void PinOnPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public static class Xamarin.FormsMaps : object {
    private static MapService _mapService;
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    internal static bool IsInitialized { get; private set; }
    internal static MapService MapService { get; }
    private static FormsMaps();
    [CompilerGeneratedAttribute]
internal static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    internal static MapService get_MapService();
    public static void Init(string provider, string authenticationToken);
    [AsyncStateMachineAttribute("Xamarin.FormsMaps/<UserConsentAction>d__8")]
private static void UserConsentAction(TaskCompletionSource`1<bool> tcs);
}
