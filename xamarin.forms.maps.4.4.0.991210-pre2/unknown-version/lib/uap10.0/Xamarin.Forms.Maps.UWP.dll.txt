internal class ThisAssembly : object {
}
internal class Xamarin.Forms.Maps.UWP.GeocoderBackend : object {
    public static void Register();
    private static string AddressToString(MapAddress address);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.GeocoderBackend/<GetAddressesForPositionAsync>d__2")]
private static Task`1<IEnumerable`1<string>> GetAddressesForPositionAsync(Position position);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.GeocoderBackend/<GetPositionsForAddress>d__3")]
private static Task`1<IEnumerable`1<Position>> GetPositionsForAddress(string address);
}
public class Xamarin.Forms.Maps.UWP.MapRenderer : ViewRenderer`2<Map, MapControl> {
    private bool _isRegionUpdatePending;
    private bool _disposed;
    private Ellipse _userPositionCircle;
    private DispatcherTimer _timer;
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<OnElementChanged>d__0")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Map> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<OnLayoutUpdated>d__2")]
private void OnLayoutUpdated(object sender, object e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<OnElementPropertyChanged>d__3")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void OnPinCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void LoadPins();
    private void ClearPins();
    private void RemovePin(Pin pinToRemove);
    private void LoadPin(Pin pin);
    private void OnMapElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void LoadMapElements(IEnumerable`1<MapElement> mapElements);
    private void RemoveMapElements(IEnumerable`1<MapElement> mapElements);
    private void MapElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected Geopath PositionsToGeopath(IList`1<Position> positions);
    protected virtual MapPolyline LoadPolyline(Polyline polyline);
    private void OnPolylinePropertyChanged(Polyline polyline, PropertyChangedEventArgs e);
    protected virtual MapPolygon LoadPolygon(Polygon polygon);
    private void OnPolygonPropertyChanged(Polygon polygon, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<UpdateIsShowingUser>d__22")]
private Task UpdateIsShowingUser(bool moveToLocation);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<MoveToRegion>d__23")]
private Task MoveToRegion(MapSpan span, MapAnimationKind animation);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<UpdateVisibleRegion>d__24")]
private Task UpdateVisibleRegion();
    private void LoadUserPosition(Geocoordinate userCoordinate, bool center);
    private void UpdateMapType();
    private void UpdateHasZoomEnabled();
    private void UpdateHasScrollEnabled();
    private void OnMapTapped(MapControl sender, MapInputEventArgs args);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<<OnElementChanged>b__0_2>d")]
[CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_2(MapControl s, object a);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<<OnElementChanged>b__0_3>d")]
[CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_3(MapControl s, object a);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<<OnElementChanged>b__0_0>d")]
[CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_0(Map s, MapSpan a);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Map> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Maps.UWP.MapRenderer/<<UpdateIsShowingUser>b__22_0>d")]
[CompilerGeneratedAttribute]
private void <UpdateIsShowingUser>b__22_0(object s, object o);
}
internal class Xamarin.Forms.Maps.UWP.PushPin : ContentControl {
    private Pin _pin;
    internal PushPin(Pin pin);
    private void PushPinLoaded(object sender, RoutedEventArgs e);
    private void PushPinUnloaded(object sender, RoutedEventArgs e);
    private void PinPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void PushPinTapped(object sender, TappedRoutedEventArgs e);
    private void UpdateLocation();
}
public static class Xamarin.FormsMaps : object {
    private static bool s_isInitialized;
    [CompilerGeneratedAttribute]
private static string <AuthenticationToken>k__BackingField;
    internal static string AuthenticationToken { get; internal set; }
    [CompilerGeneratedAttribute]
internal static string get_AuthenticationToken();
    [CompilerGeneratedAttribute]
internal static void set_AuthenticationToken(string value);
    public static void Init();
    public static void Init(string authenticationToken);
}
