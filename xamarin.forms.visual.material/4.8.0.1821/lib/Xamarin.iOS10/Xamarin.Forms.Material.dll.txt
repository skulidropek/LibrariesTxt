internal class ThisAssembly : object {
}
public static class Xamarin.Forms.FormsMaterial : object {
    public static void Init();
}
public interface Xamarin.Forms.Material.iOS.IMaterialEntryRenderer {
    public Color TextColor { get; }
    public Color PlaceholderColor { get; }
    public Color BackgroundColor { get; }
    public Brush Background { get; }
    public string Placeholder { get; }
    public abstract virtual Color get_TextColor();
    public abstract virtual Color get_PlaceholderColor();
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual Brush get_Background();
    public abstract virtual string get_Placeholder();
}
internal interface Xamarin.Forms.Material.iOS.IMaterialTextField {
    public SemanticColorScheme ColorScheme { get; public set; }
    public ContainerScheme ContainerScheme { get; }
    public TypographyScheme TypographyScheme { get; public set; }
    public TextInputControllerBase ActiveTextInputController { get; public set; }
    public ITextInput TextInput { get; }
    public Nullable`1<CGSize> BackgroundSize { get; public set; }
    public abstract virtual SemanticColorScheme get_ColorScheme();
    public abstract virtual void set_ColorScheme(SemanticColorScheme value);
    public abstract virtual ContainerScheme get_ContainerScheme();
    public abstract virtual TypographyScheme get_TypographyScheme();
    public abstract virtual void set_TypographyScheme(TypographyScheme value);
    public abstract virtual TextInputControllerBase get_ActiveTextInputController();
    public abstract virtual void set_ActiveTextInputController(TextInputControllerBase value);
    public abstract virtual ITextInput get_TextInput();
    public abstract virtual Nullable`1<CGSize> get_BackgroundSize();
    public abstract virtual void set_BackgroundSize(Nullable`1<CGSize> value);
}
public class Xamarin.Forms.Material.iOS.MaterialActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, ActivityIndicator> {
    private static float _strokeRatio;
    private static float _defaultRadius;
    private static float _defaultStrokeWidth;
    private static float _defaultSize;
    private SemanticColorScheme _defaultColorScheme;
    private SemanticColorScheme _colorScheme;
    private CAShapeLayer _backgroundLayer;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    protected virtual SemanticColorScheme CreateColorScheme();
    protected virtual void ApplyTheme();
    protected virtual ActivityIndicator CreateNativeControl();
    public virtual void LayoutSubviews();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    private void UpdateColor();
    private void UpdateIsRunning();
}
public class Xamarin.Forms.Material.iOS.MaterialButtonRenderer : ViewRenderer`2<Button, Button> {
    private bool _isDisposed;
    private UIColor _defaultBorderColor;
    private nfloat _defaultBorderWidth;
    private ButtonScheme _defaultButtonScheme;
    private ButtonScheme _buttonScheme;
    private ButtonLayoutManager _buttonLayoutManager;
    private Nullable`1<CGSize> _backgroundSize;
    private bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.IsDisposed { get; }
    private UIButton Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.Control { get; }
    private IImageVisualElementRenderer Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.ImageVisualElementRenderer { get; }
    private nfloat Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.MinimumHeight { get; }
    protected virtual void Dispose(bool disposing);
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    public virtual void LayoutSubviews();
    protected virtual ButtonScheme CreateButtonScheme();
    protected virtual void ApplyTheme();
    protected virtual void ApplyThemeIfNeeded();
    protected virtual Button CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetAccessibilityLabel();
    private void OnButtonTouchUpInside(object sender, EventArgs eventArgs);
    private void OnButtonTouchDown(object sender, EventArgs eventArgs);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    private void UpdateBackground();
    private void UpdateBorder();
    private void UpdateCornerRadius();
    private void UpdateFont();
    private void UpdateTextColor();
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.get_IsDisposed();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.SetImage(UIImage image);
    private sealed virtual override UIImageView Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.GetImage();
    private sealed virtual override UIButton Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.get_Control();
    private sealed virtual override IImageVisualElementRenderer Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.get_ImageVisualElementRenderer();
    private sealed virtual override nfloat Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.get_MinimumHeight();
}
public class Xamarin.Forms.Material.iOS.MaterialCheckBoxRenderer : CheckBoxRendererBase`1<MaterialFormsCheckBox> {
    private bool _disposed;
    protected float MinimumSize { get; }
    protected virtual float get_MinimumSize();
    protected virtual MaterialFormsCheckBox CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void Dispose(bool disposing);
    private void OnCheckedChanged(object sender, EventArgs e);
    protected virtual void UpdateTintColor();
}
internal static class Xamarin.Forms.Material.iOS.MaterialColors : object {
    private static float kSliderBaselineDisabledFillAlpha;
    private static float kSliderBaselineEnabledBackgroundAlpha;
    private static float kSliderBaselineDisabledBackgroundAlpha;
    private static float kSliderBaselineEnabledTicksAlpha;
    private static float kSliderBaselineDisabledTicksAlpha;
    public static float SliderTrackAlpha;
    public static double kFrameCornerRadiusDefault;
    private static float kFilledTextFieldActiveAlpha;
    private static float kFilledTextFieldOnSurfaceAlpha;
    private static float kFilledTextFieldDisabledAlpha;
    private static float kFilledTextFieldSurfaceOverlayAlpha;
    private static float kFilledTextFieldIndicatorLineAlpha;
    private static float kFilledTextFieldIconAlpha;
    private static float kFilledPlaceHolderOffset;
    private static MaterialColors();
    public static UIColor CreateEntryFilledInputBackgroundColor(Color backgroundColor, Color textColor);
    public static ValueTuple`2<UIColor, UIColor> GetPlaceHolderColor(Color placeholderColor, Color textColor);
    public static ValueTuple`2<UIColor, UIColor> GetUnderlineColor(Color textColor);
    public static UIColor GetEntryTextColor(Color textColor);
    public static UIColor GetCheckBoxColor(bool isChecked, bool isEnabled);
    private static UIColor ToPlatformColor(Color color);
    private static UIColor WithMultipliedAlpha(UIColor color, float alpha);
    private static UIColor WithAlpha(UIColor color, float alpha);
    private static int GetAlpha(UIColor color);
    private static UIColor FromRgb(int red, int green, int blue);
}
public class Xamarin.Forms.Material.iOS.MaterialDatePickerRenderer : DatePickerRendererBase`1<MaterialTextField> {
    private string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Placeholder { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.PlaceholderColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.TextColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.BackgroundColor { get; }
    private Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Background { get; }
    protected virtual MaterialTextField CreateNativeControl();
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected internal virtual void UpdateTextColor();
    protected virtual void ApplyTheme();
    protected virtual void ApplyThemeIfNeeded();
    protected internal virtual void UpdateFont();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    public virtual void LayoutSubviews();
    private void UpdatePlaceholder();
    private sealed virtual override string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Placeholder();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_PlaceholderColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_TextColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_BackgroundColor();
    private sealed virtual override Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Background();
}
public class Xamarin.Forms.Material.iOS.MaterialEditorRenderer : EditorRendererBase`1<MaterialMultilineTextField> {
    private bool _hackHasRan;
    protected IntrinsicHeightTextView IntrinsicHeightTextView { get; }
    protected UITextView TextView { get; }
    private string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Placeholder { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.TextColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.PlaceholderColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.BackgroundColor { get; }
    private Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Background { get; }
    protected virtual MaterialMultilineTextField CreateNativeControl();
    protected IntrinsicHeightTextView get_IntrinsicHeightTextView();
    protected virtual UITextView get_TextView();
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected internal virtual void UpdateTextColor();
    protected virtual void ApplyTheme();
    protected virtual void ApplyThemeIfNeeded();
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdatePlaceholderText();
    protected internal virtual void UpdatePlaceholderColor();
    protected internal virtual void UpdateCharacterSpacing();
    protected internal virtual void UpdateText();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    public virtual void LayoutSubviews();
    protected internal virtual void UpdateAutoSizeOption();
    private void InitialPlaceholderSetupHack();
    private sealed virtual override string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Placeholder();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_TextColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_PlaceholderColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_BackgroundColor();
    private sealed virtual override Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Background();
    [CompilerGeneratedAttribute]
private void <InitialPlaceholderSetupHack>b__19_0();
}
public class Xamarin.Forms.Material.iOS.MaterialEntryRenderer : EntryRendererBase`1<MaterialTextField> {
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.TextColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.PlaceholderColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.BackgroundColor { get; }
    private Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Background { get; }
    private string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Placeholder { get; }
    protected virtual MaterialTextField CreateNativeControl();
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected virtual void UpdateColor();
    protected virtual void ApplyTheme();
    protected virtual void ApplyThemeIfNeeded();
    protected virtual void UpdatePlaceholder();
    protected virtual void UpdateAttributedPlaceholder(NSAttributedString nsAttributedString);
    protected virtual void UpdateFont();
    public virtual void LayoutSubviews();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_TextColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_PlaceholderColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_BackgroundColor();
    private sealed virtual override Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Background();
    private sealed virtual override string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Placeholder();
}
public class Xamarin.Forms.Material.iOS.MaterialFormsCheckBox : FormsCheckBox {
    private static UIImage _checked;
    private static UIImage _unchecked;
    internal virtual UIBezierPath CreateBoxPath(CGRect backgroundRect);
    internal virtual UIBezierPath CreateCheckPath();
    internal virtual void DrawCheckMark(UIBezierPath path);
    protected virtual UIImage GetCheckBoximage();
}
public class Xamarin.Forms.Material.iOS.MaterialFrameRenderer : Card {
    private CardScheme _defaultCardScheme;
    private CardScheme _cardScheme;
    private float _defaultCornerRadius;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    private EventTracker _events;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private Frame <Element>k__BackingField;
    public Frame Element { get; private set; }
    private VisualElement Xamarin.Forms.Platform.iOS.IVisualElementRenderer.Element { get; }
    private UIView Xamarin.Forms.Platform.iOS.IVisualElementRenderer.NativeView { get; }
    private UIViewController Xamarin.Forms.Platform.iOS.IVisualElementRenderer.ViewController { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public Frame get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(Frame value);
    public virtual void WillRemoveSubview(UIView uiview);
    public virtual void LayoutSubviews();
    public void SetElement(VisualElement element);
    protected virtual void Dispose(bool disposing);
    protected virtual void ApplyThemeIfNeeded();
    protected virtual CardScheme CreateCardScheme();
    protected virtual void ApplyTheme();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void UpdateCornerRadius();
    private void UpdateBorderColor();
    private void UpdateBackground();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.iOS.IVisualElementRenderer.get_Element();
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.IVisualElementRenderer.get_NativeView();
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IVisualElementRenderer.get_ViewController();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.iOS.IVisualElementRenderer.GetDesiredSize(double widthConstraint, double heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.SetElementSize(Size size);
}
public class Xamarin.Forms.Material.iOS.MaterialMultilineTextField : MultilineTextField {
    private CGSize _contentSize;
    [CompilerGeneratedAttribute]
private ContainerScheme <ContainerScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticColorScheme <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private TypographyScheme <TypographyScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private TextInputControllerBase <ActiveTextInputController>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CGSize> <BackgroundSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSizeWithChanges>k__BackingField;
    public ContainerScheme ContainerScheme { get; }
    public SemanticColorScheme ColorScheme { get; public set; }
    public TypographyScheme TypographyScheme { get; public set; }
    public TextInputControllerBase ActiveTextInputController { get; public set; }
    public ITextInput TextInput { get; }
    public Nullable`1<CGSize> BackgroundSize { get; public set; }
    public CGRect Frame { get; public set; }
    private int NumberOfLines { get; }
    internal bool AutoSizeWithChanges { get; internal set; }
    public MaterialMultilineTextField(IMaterialEntryRenderer element, IFontElement fontElement);
    [CompilerGeneratedAttribute]
public sealed virtual ContainerScheme get_ContainerScheme();
    [CompilerGeneratedAttribute]
public sealed virtual SemanticColorScheme get_ColorScheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorScheme(SemanticColorScheme value);
    [CompilerGeneratedAttribute]
public sealed virtual TypographyScheme get_TypographyScheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TypographyScheme(TypographyScheme value);
    [CompilerGeneratedAttribute]
public sealed virtual TextInputControllerBase get_ActiveTextInputController();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActiveTextInputController(TextInputControllerBase value);
    public sealed virtual ITextInput get_TextInput();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CGSize> get_BackgroundSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackgroundSize(Nullable`1<CGSize> value);
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
    public virtual CGSize SizeThatFits(CGSize size);
    private bool UpdateIfTextViewShouldCollapse();
    private bool ShouldRestrainSize();
    private void UpdateIfTextViewShouldStopExpanding();
    private int get_NumberOfLines();
    [CompilerGeneratedAttribute]
internal bool get_AutoSizeWithChanges();
    [CompilerGeneratedAttribute]
internal void set_AutoSizeWithChanges(bool value);
    internal void ApplyTypographyScheme(IFontElement fontElement);
    internal void ApplyTheme(IMaterialEntryRenderer element);
    internal void ApplyThemeIfNeeded(IMaterialEntryRenderer element);
    internal void UpdatePlaceholder(IMaterialEntryRenderer element);
    internal void UpdateTextColor(IMaterialEntryRenderer element);
}
public class Xamarin.Forms.Material.iOS.MaterialPickerRenderer : PickerRendererBase`1<MaterialTextField> {
    private string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Placeholder { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.PlaceholderColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.TextColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.BackgroundColor { get; }
    private Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Background { get; }
    protected virtual MaterialTextField CreateNativeControl();
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdateTextColor();
    protected virtual void ApplyTheme();
    protected virtual void ApplyThemeIfNeeded();
    protected internal virtual void UpdatePlaceholder();
    protected virtual void UpdateAttributedPlaceholder(NSAttributedString nSAttributedString);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    public virtual void LayoutSubviews();
    private sealed virtual override string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Placeholder();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_PlaceholderColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_TextColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_BackgroundColor();
    private sealed virtual override Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Background();
}
public class Xamarin.Forms.Material.iOS.MaterialProgressBarRenderer : ViewRenderer`2<ProgressBar, ProgressView> {
    private SemanticColorScheme _defaultColorScheme;
    private SemanticColorScheme _colorScheme;
    private ContainerScheme _containerScheme;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
protected virtual BasicColorScheme CreateColorScheme();
    protected virtual SemanticColorScheme CreateSemanticColorScheme();
    protected virtual void ApplyTheme();
    protected virtual ProgressView CreateNativeControl();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    private void UpdateProgressColor();
    private void UpdateAllColors();
    private void UpdateProgress();
}
public class Xamarin.Forms.Material.iOS.MaterialSliderRenderer : ViewRenderer`2<Slider, Slider> {
    private SemanticColorScheme _defaultColorScheme;
    private SemanticColorScheme _colorScheme;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    protected virtual void ApplyTheme();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual Slider CreateNativeControl();
    protected virtual SemanticColorScheme CreateColorScheme();
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void OnControlValueChanged(object sender, EventArgs eventArgs);
    private void UpdateValue();
    private void OverrideThemeColors();
}
public class Xamarin.Forms.Material.iOS.MaterialStepper : UIView {
    private static int DefaultButtonSpacing;
    [CompilerGeneratedAttribute]
private Button <DecrementButton>k__BackingField;
    [CompilerGeneratedAttribute]
private Button <IncrementButton>k__BackingField;
    public Button DecrementButton { get; }
    public Button IncrementButton { get; }
    [CompilerGeneratedAttribute]
public Button get_DecrementButton();
    [CompilerGeneratedAttribute]
public Button get_IncrementButton();
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual void LayoutSubviews();
}
public class Xamarin.Forms.Material.iOS.MaterialStepperRenderer : ViewRenderer`2<Stepper, MaterialStepper> {
    private ButtonScheme _buttonScheme;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual ButtonScheme CreateButtonScheme();
    protected virtual void ApplyTheme();
    protected virtual MaterialStepper CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    private void UpdateButtons();
    private void OnStep(object sender, EventArgs e);
}
public class Xamarin.Forms.Material.iOS.MaterialTextField : TextField {
    [CompilerGeneratedAttribute]
private ContainerScheme <ContainerScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticColorScheme <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private TypographyScheme <TypographyScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private TextInputControllerBase <ActiveTextInputController>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CGSize> <BackgroundSize>k__BackingField;
    public ContainerScheme ContainerScheme { get; }
    public SemanticColorScheme ColorScheme { get; public set; }
    public TypographyScheme TypographyScheme { get; public set; }
    public TextInputControllerBase ActiveTextInputController { get; public set; }
    public ITextInput TextInput { get; }
    public Nullable`1<CGSize> BackgroundSize { get; public set; }
    public MaterialTextField(IMaterialEntryRenderer element, IFontElement fontElement);
    [CompilerGeneratedAttribute]
public sealed virtual ContainerScheme get_ContainerScheme();
    [CompilerGeneratedAttribute]
public sealed virtual SemanticColorScheme get_ColorScheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorScheme(SemanticColorScheme value);
    [CompilerGeneratedAttribute]
public sealed virtual TypographyScheme get_TypographyScheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TypographyScheme(TypographyScheme value);
    [CompilerGeneratedAttribute]
public sealed virtual TextInputControllerBase get_ActiveTextInputController();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActiveTextInputController(TextInputControllerBase value);
    public sealed virtual ITextInput get_TextInput();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CGSize> get_BackgroundSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackgroundSize(Nullable`1<CGSize> value);
    public virtual CGSize SizeThatFits(CGSize size);
    internal void ApplyTypographyScheme(IFontElement fontElement);
    internal void ApplyTheme(IMaterialEntryRenderer element);
    internal void ApplyThemeIfNeeded(IMaterialEntryRenderer element);
    internal void UpdatePlaceholder(IMaterialEntryRenderer element);
    internal void UpdateTextColor(IMaterialEntryRenderer element);
}
internal static class Xamarin.Forms.Material.iOS.MaterialTextManager : object {
    private static double AlphaAdjustment;
    public static void Init(IMaterialEntryRenderer element, IMaterialTextField textField, IFontElement fontElement);
    public static void ApplyTypographyScheme(IMaterialTextField textField, IFontElement fontElement);
    private static void ApplyContainerTheme(IMaterialTextField textField);
    public static void ApplyTheme(IMaterialTextField textField, IMaterialEntryRenderer element);
    public static void ApplyThemeIfNeeded(IMaterialTextField textField, IMaterialEntryRenderer element);
    public static void UpdatePlaceholder(IMaterialTextField textField, IMaterialEntryRenderer element);
    public static void UpdateTextColor(IMaterialTextField textField, IMaterialEntryRenderer element);
    private static Color AdjustTextColor(IMaterialEntryRenderer element);
    private static IColorScheming CreateColorScheme();
    private static TypographyScheme CreateTypographyScheme();
}
public class Xamarin.Forms.Material.iOS.MaterialTimePickerRenderer : TimePickerRendererBase`1<MaterialTextField> {
    private string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Placeholder { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.PlaceholderColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.TextColor { get; }
    private Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.BackgroundColor { get; }
    private Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.Background { get; }
    internal void UpdatePlaceholder();
    protected internal virtual void UpdateFont();
    protected virtual MaterialTextField CreateNativeControl();
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected internal virtual void UpdateTextColor();
    protected virtual void ApplyTheme();
    protected virtual void ApplyThemeIfNeeded();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    public virtual void LayoutSubviews();
    private sealed virtual override string Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Placeholder();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_PlaceholderColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_TextColor();
    private sealed virtual override Color Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_BackgroundColor();
    private sealed virtual override Brush Xamarin.Forms.Material.iOS.IMaterialEntryRenderer.get_Background();
}
internal class Xamarin.Forms.Material.iOS.NoCaretMaterialTextField : MaterialTextField {
    public NoCaretMaterialTextField(IMaterialEntryRenderer element, IFontElement fontElement);
    public virtual CGRect GetCaretRectForPosition(UITextPosition position);
}
internal class Xamarin.Forms.Material.iOS.ReadOnlyMaterialTextField : NoCaretMaterialTextField {
    private HashSet`1<string> _enableActions;
    public ReadOnlyMaterialTextField(IMaterialEntryRenderer element, IFontElement fontElement);
    public virtual bool CanPerform(Selector action, NSObject withSender);
}
