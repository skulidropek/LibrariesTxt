internal class ThisAssembly : object {
}
public static class Xamarin.Forms.FormsMaterial : object {
    public static void Init();
}
public class Xamarin.Forms.Material.Tizen.MaterialActivityIndicatorRenderer : ActivityIndicatorRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
}
public class Xamarin.Forms.Material.Tizen.MaterialButtonRenderer : ButtonRenderer {
    protected virtual Button CreateNativeControl();
}
public class Xamarin.Forms.Material.Tizen.MaterialCheckBoxRenderer : CheckBoxRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
}
internal static class Xamarin.Forms.Material.Tizen.MaterialColors : object {
    private static float kSliderBaselineDisabledFillAlpha;
    private static float kSliderBaselineEnabledBackgroundAlpha;
    private static float kSliderBaselineDisabledBackgroundAlpha;
    private static float kSliderBaselineEnabledTicksAlpha;
    private static float kSliderBaselineDisabledTicksAlpha;
    public static float SliderTrackAlpha;
    public static double kFrameCornerRadiusDefault;
    private static float kFilledTextFieldActiveAlpha;
    private static float kFilledTextFieldOnSurfaceAlpha;
    private static float kFilledTextFieldDisabledAlpha;
    private static float kFilledTextFieldSurfaceOverlayAlpha;
    private static float kFilledTextFieldIndicatorLineAlpha;
    private static float kFilledTextFieldIconAlpha;
    private static float kFilledPlaceHolderOffset;
    private static MaterialColors();
    public static Color CreateEntryFilledInputBackgroundColor(Color backgroundColor, Color textColor);
    public static ValueTuple`2<Color, Color> GetPlaceHolderColor(Color placeholderColor, Color textColor);
    public static ValueTuple`2<Color, Color> GetUnderlineColor(Color textColor);
    public static Color GetEntryTextColor(Color textColor);
    public static Color GetCheckBoxColor(bool isChecked, bool isEnabled);
    private static Color ToPlatformColor(Color color);
    private static Color WithMultipliedAlpha(Color color, float alpha);
    private static Color WithAlpha(Color color, float alpha);
    private static int GetAlpha(Color color);
    private static Color FromRgb(int red, int green, int blue);
}
public class Xamarin.Forms.Material.Tizen.MaterialDatePickerRenderer : DatePickerRenderer {
    private Color _defaultTitleColor;
    protected virtual Entry CreateNativeControl();
    protected virtual void OnDateTimeChanged(object sender, DateChangedEventArgs dcea);
    protected virtual void UpdateDate();
    protected virtual void UpdateTextColor();
}
public class Xamarin.Forms.Material.Tizen.MaterialEditorRenderer : EditorRenderer {
    protected virtual Entry CreateNativeControl();
    protected virtual void UpdateTextColor();
}
public class Xamarin.Forms.Material.Tizen.MaterialEntryRenderer : EntryRenderer {
    protected virtual Entry CreateNativeControl();
    protected virtual void UpdateTextColor();
}
public class Xamarin.Forms.Material.Tizen.MaterialFrameRenderer : ViewRenderer`2<Frame, MCard> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Frame> e);
    private void UpdateBorderColor();
    private void UpdateShadowVisibility();
}
public class Xamarin.Forms.Material.Tizen.MaterialNavigationDrawer : MNavigationDrawer {
    private EvasObject Xamarin.Forms.Platform.Tizen.INavigationDrawer.NavigationView { get; private set; }
    public MaterialNavigationDrawer(EvasObject parent);
    private sealed virtual override EvasObject Xamarin.Forms.Platform.Tizen.INavigationDrawer.get_NavigationView();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.INavigationDrawer.set_NavigationView(EvasObject value);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.INavigationDrawer.add_Toggled(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.INavigationDrawer.remove_Toggled(EventHandler value);
    private sealed virtual override EvasObject Xamarin.Forms.Platform.Tizen.INavigationDrawer.get_Main();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.INavigationDrawer.set_Main(EvasObject value);
    private sealed virtual override bool Xamarin.Forms.Platform.Tizen.INavigationDrawer.get_IsOpen();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.INavigationDrawer.set_IsOpen(bool value);
}
public class Xamarin.Forms.Material.Tizen.MaterialNavigationView : MNavigationView {
    private ImageSource _bgImageSource;
    private Image _bg;
    private Aspect _bgImageAspect;
    private IDictionary`2<MItem, Element> _flyoutMenu;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> SelectedItemChanged;
    public Aspect BackgroundImageAspect { get; public set; }
    public ImageSource BackgroundImageSource { get; public set; }
    public MaterialNavigationView(EvasObject parent);
    public sealed virtual Aspect get_BackgroundImageAspect();
    public sealed virtual void set_BackgroundImageAspect(Aspect value);
    public sealed virtual ImageSource get_BackgroundImageSource();
    public sealed virtual void set_BackgroundImageSource(ImageSource value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    public sealed virtual void BuildMenu(List`1<List`1<Element>> flyoutGroups);
    private void OnSelectedItemChanged(object sender, GenListItemEventArgs e);
    private sealed virtual override EvasObject Xamarin.Forms.Platform.Tizen.INavigationView.get_Header();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.INavigationView.set_Header(EvasObject value);
}
public class Xamarin.Forms.Material.Tizen.MaterialPickerRenderer : PickerRenderer {
    private Color _defaultTitleColor;
    protected virtual Entry CreateNativeControl();
    protected virtual void UpdateSelectedIndex();
    protected virtual void UpdateTitleColor();
    protected virtual void UpdateTextColor();
}
public class Xamarin.Forms.Material.Tizen.MaterialProgressBarRenderer : ProgressBarRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
}
public class Xamarin.Forms.Material.Tizen.MaterialShellItemRenderer : ShellItemRenderer {
    public MaterialShellItemRenderer(IFlyoutController flyoutController, ShellItem item);
    protected virtual IShellTabs CreateTabs();
    protected virtual ShellSectionNavigation CreateShellSectionNavigation(IFlyoutController flyoutController, ShellSection section);
}
public class Xamarin.Forms.Material.Tizen.MaterialShellRenderer : ShellRenderer {
    protected virtual INavigationDrawer CreateNavigationDrawer();
    protected virtual INavigationView CreateNavigationView();
    protected virtual ShellItemRenderer CreateShellItem(ShellItem item);
}
public class Xamarin.Forms.Material.Tizen.MaterialShellSectionNavigation : ShellSectionNavigation {
    public MaterialShellSectionNavigation(IFlyoutController flyoutController, ShellSection section);
    protected virtual ShellSectionRenderer CreateShellSection(ShellSection section);
}
public class Xamarin.Forms.Material.Tizen.MaterialShellSectionRenderer : ShellSectionRenderer {
    public MaterialShellSectionRenderer(ShellSection section);
    protected virtual IShellTabs CreateToolbar();
}
public class Xamarin.Forms.Material.Tizen.MaterialSliderRenderer : SliderRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    protected virtual void UpdateThumbColor();
}
public class Xamarin.Forms.Material.Tizen.MaterialStepperRenderer : ViewRenderer`2<Stepper, Box> {
    private int horizontalPadding;
    private int minimumWidth;
    private int minimumHeight;
    private int radius;
    private int borderWidth;
    private Color defaultColor;
    private BorderRectangle _borderL;
    private BorderRectangle _borderR;
    private MButton _buttonL;
    private MButton _buttonR;
    private double _mininum;
    private double _maximum;
    private double _value;
    private double _increment;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual Size Measure(int availableWidth, int availableHeight);
    private void OnLayout();
    private void OnIncrementButtonClicked(object sender, EventArgs e);
    private void OnDecrementButtonClicked(object sender, EventArgs e);
    private void UpdateValue();
    private void UpdateMinimum();
    private void UpdateMaximum();
    private void UpdateIncrement();
}
public class Xamarin.Forms.Material.Tizen.MaterialTimePickerRenderer : TimePickerRenderer {
    private Color _defaultTitleColor;
    private static string _defaultFormat;
    private static MaterialTimePickerRenderer();
    protected virtual Entry CreateNativeControl();
    protected virtual void UpdateTimeAndFormat();
    protected virtual void UpdateTextColor();
}
public class Xamarin.Forms.Material.Tizen.Native.MCanvas : MCard {
    private ObservableCollection`1<EvasObject> _children;
    public IList`1<EvasObject> Children { get; }
    public MCanvas(EvasObject parent);
    public sealed virtual IList`1<EvasObject> get_Children();
    protected virtual void OnUnrealize();
    private void OnAdd(EvasObject view);
    private void OnRemove(EvasObject view);
    private void OnRemoveAll();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object o, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Material.Tizen.Native.MEditor : MaterialEntry {
    private bool _isTexstBlockFocused;
    private int _heightPadding;
    public MEditor(EvasObject parent);
    public virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void OnFocused(object sender, EventArgs args);
    protected virtual void OnUnfocused(object sender, EventArgs args);
    protected virtual void OnLayoutFocused(object sender, EventArgs args);
    protected virtual void OnLayoutUnFocused(object sender, EventArgs args);
    private void Initialize();
    private void SetFocusOnTextBlock(bool isFocused);
    [CompilerGeneratedAttribute]
private void <Initialize>b__8_0(object s, EvasKeyEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__8_1(TapData data);
    [CompilerGeneratedAttribute]
private void <Initialize>b__8_2(object s, EventArgs e);
}
public class Xamarin.Forms.Material.Tizen.Native.MPicker : MEditor {
    public MPicker(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.MaterialShellTabs : MTabs {
    private ShellTabsType Xamarin.Forms.Platform.Tizen.IShellTabs.Type { get; private set; }
    public EvasObject TargetView { get; }
    public MaterialShellTabs(EvasObject parent);
    private sealed virtual override ShellTabsType Xamarin.Forms.Platform.Tizen.IShellTabs.get_Type();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IShellTabs.set_Type(ShellTabsType value);
    public sealed virtual EvasObject get_TargetView();
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.get_SelectedItem();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IShellTabs.add_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IShellTabs.remove_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.Append(string label, string icon);
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.InsertBefore(ToolbarItem before, string label, string icon);
}
public class Xamarin.Forms.Platform.Tizen.Native.MaterialBox : MCard {
    private Rect _previousGeometry;
    [CompilerGeneratedAttribute]
private EventHandler`1<LayoutEventArgs> LayoutUpdated;
    public MaterialBox(EvasObject parent);
    [CompilerGeneratedAttribute]
public void add_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    private void NotifyOnLayout();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class Xamarin.Forms.Platform.Tizen.Native.MaterialButton : MButton {
    private Span _span;
    private Image _image;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public Image Image { get; public set; }
    public MaterialButton(EvasObject parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public Color get_TextBackgroundColor();
    public void set_TextBackgroundColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual Image get_Image();
    public sealed virtual void set_Image(Image value);
    public virtual Size Measure(int availableWidth, int availableHeight);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
    private void ApplyImage(Image image);
    private void SetInternalImage();
    public sealed virtual void UpdateStyle(string style);
}
public class Xamarin.Forms.Platform.Tizen.Native.MaterialCanvas : MaterialBox {
    private ObservableCollection`1<EvasObject> _children;
    public IList`1<EvasObject> Children { get; }
    public MaterialCanvas(EvasObject parent);
    public sealed virtual IList`1<EvasObject> get_Children();
    protected virtual void OnUnrealize();
    private void Initilize();
    private void OnAdd(EvasObject view);
    private void OnRemove(EvasObject view);
    private void OnRemoveAll();
    [CompilerGeneratedAttribute]
private void <Initilize>b__5_0(object o, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.MaterialEntry : MTextField {
    private static int TextFieldMinimumHeight;
    private static int VariationNormal;
    private static int VariationSignedAndDecimal;
    private Span _span;
    private Span _placeholderSpan;
    private int _changedByUserCallbackDepth;
    private Keyboard _keyboard;
    [CompilerGeneratedAttribute]
private EventHandler`1<TextChangedEventArgs> TextChanged;
    [CompilerGeneratedAttribute]
private EventHandler TextBlockFocused;
    [CompilerGeneratedAttribute]
private EventHandler TextBlockUnfocused;
    [CompilerGeneratedAttribute]
private EventHandler EntryLayoutFocused;
    [CompilerGeneratedAttribute]
private EventHandler EntryLayoutUnfocused;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public string FontWeight { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public Keyboard Keyboard { get; public set; }
    public string Placeholder { get; public set; }
    public Color PlaceholderColor { get; public set; }
    public MaterialEntry(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EntryLayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EntryLayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EntryLayoutUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EntryLayoutUnfocused(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual string get_FontWeight();
    public sealed virtual void set_FontWeight(string value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public sealed virtual void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual Keyboard get_Keyboard();
    public sealed virtual void set_Keyboard(Keyboard value);
    public sealed virtual string get_Placeholder();
    public sealed virtual void set_Placeholder(string value);
    public sealed virtual Color get_PlaceholderColor();
    public sealed virtual void set_PlaceholderColor(Color value);
    public virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void OnTextBlockFocused();
    protected virtual void OnTextBlcokUnfocused();
    protected virtual void OnEntryLayoutFocused();
    protected virtual void OnEntryLayoutUnfocused();
    protected virtual void OnTextChanged(string oldValue, string newValue);
    private void Initialize();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
    private string GetInternalText();
    private void ApplyKeyboard(Keyboard keyboard);
    private void SetInternalKeyboard(Keyboard keyboard);
    private void ApplyPlaceholderAndStyle();
    protected virtual void SetInternalPlaceholderAndStyle(string markupText);
    [CompilerGeneratedAttribute]
private void <Initialize>b__59_0(object s, EventArgs e);
}
