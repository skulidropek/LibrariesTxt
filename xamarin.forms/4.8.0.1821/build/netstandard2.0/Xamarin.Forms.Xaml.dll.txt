internal class ThisAssembly : object {
}
internal class Xamarin.Forms.Xaml.ApplyPropertiesVisitor : object {
    public static IList`1<XmlName> Skips;
    [CompilerGeneratedAttribute]
private HydrationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnResourceDictionary>k__BackingField;
    private Dictionary`2<INode, object> Values { get; }
    private HydrationContext Context { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public ApplyPropertiesVisitor(HydrationContext context, bool stopOnResourceDictionary);
    private static ApplyPropertiesVisitor();
    private Dictionary`2<INode, object> get_Values();
    [CompilerGeneratedAttribute]
private HydrationContext get_Context();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    public static bool TryGetPropertyName(INode node, INode parentNode, XmlName& name);
    internal static bool IsCollectionItem(INode node, INode parentNode);
    internal static string GetContentPropertyName(TypeInfo typeInfo);
    private void ProvideValue(Object& value, ElementNode node, object source, XmlName propertyName);
    private static string GetContentPropertyName(IEnumerable`1<CustomAttributeData> attributes);
    private static bool GetRealNameAndType(Type& elementType, string namespaceURI, String& localname, HydrationContext context, IXmlLineInfo lineInfo);
    private static BindableProperty GetBindableProperty(Type elementType, string localName, IXmlLineInfo lineInfo, bool throwOnError);
    private static object GetTargetProperty(object xamlelement, XmlName propertyName, HydrationContext context, IXmlLineInfo lineInfo);
    public static void SetPropertyValue(object xamlelement, XmlName propertyName, object value, object rootElement, INode node, HydrationContext context, IXmlLineInfo lineInfo);
    public static object GetPropertyValue(object xamlElement, XmlName propertyName, HydrationContext context, IXmlLineInfo lineInfo, Exception& xpe, Object& targetProperty);
    private static bool TryConnectEvent(object element, string localName, bool attached, object value, object rootElement, IXmlLineInfo lineInfo, Exception& exception);
    private static bool TrySetDynamicResource(object element, BindableProperty property, object value, IXmlLineInfo lineInfo, Exception& exception);
    private static bool TrySetBinding(object element, BindableProperty property, string localName, object value, IXmlLineInfo lineInfo, Exception& exception);
    private static bool TrySetValue(object element, BindableProperty property, bool attached, object value, IXmlLineInfo lineInfo, XamlServiceProvider serviceProvider, Exception& exception);
    private static bool TryGetValue(object element, BindableProperty property, bool attached, Object& value, IXmlLineInfo lineInfo, Exception& exception, Object& targetProperty);
    private static bool TrySetProperty(object element, string localName, object value, IXmlLineInfo lineInfo, XamlServiceProvider serviceProvider, HydrationContext context, Exception& exception);
    private static bool TryGetProperty(object element, string localName, Object& value, IXmlLineInfo lineInfo, HydrationContext context, Exception& exception, Object& targetProperty);
    private static bool IsVisibleFrom(MethodInfo method, object rootElement);
    private static bool TryAddToProperty(object element, XmlName propertyName, object value, string xKey, IXmlLineInfo lineInfo, XamlServiceProvider serviceProvider, HydrationContext context, Exception& exception);
    private static bool TryAddToResourceDictionary(ResourceDictionary resourceDictionary, object value, string xKey, IXmlLineInfo lineInfo, Exception& exception);
    private void SetTemplate(ElementTemplate dt, INode node);
    private static bool TryAddValue(BindableObject bindable, BindableProperty property, object value, XamlServiceProvider serviceProvider, Exception& exception);
    private static IEnumerable`1<MethodInfo> GetAllRuntimeMethods(Type type);
    private bool TrySetRuntimeName(XmlName propertyName, object source, object value, ValueNode node);
}
[ContentPropertyAttribute("Default")]
public class Xamarin.Forms.Xaml.AppThemeBindingExtension : object {
    private object _default;
    private bool _hasdefault;
    private object _light;
    private bool _haslight;
    private object _dark;
    private bool _hasdark;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Default { get; public set; }
    public object Light { get; public set; }
    public object Dark { get; public set; }
    public object Value { get; private set; }
    public object get_Default();
    public void set_Default(object value);
    public object get_Light();
    public void set_Light(object value);
    public object get_Dark();
    public void set_Dark(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override BindingBase Xamarin.Forms.Xaml.IMarkupExtension<Xamarin.Forms.BindingBase>.ProvideValue(IServiceProvider serviceProvider);
}
[ContentPropertyAttribute("Items")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.Xaml.ArrayExtension : object {
    [CompilerGeneratedAttribute]
private IList <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public IList Items { get; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public IList get_Items();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    public sealed virtual Array ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
internal abstract class Xamarin.Forms.Xaml.BaseNode : object {
    [CompilerGeneratedAttribute]
private IXmlNamespaceResolver <NamespaceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private INode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IgnorablePrefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public IXmlNamespaceResolver NamespaceResolver { get; }
    public INode Parent { get; public set; }
    public List`1<string> IgnorablePrefixes { get; public set; }
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    protected BaseNode(IXmlNamespaceResolver namespaceResolver, int linenumber, int lineposition);
    [CompilerGeneratedAttribute]
public sealed virtual IXmlNamespaceResolver get_NamespaceResolver();
    [CompilerGeneratedAttribute]
public sealed virtual INode get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(INode value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_IgnorablePrefixes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnorablePrefixes(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public void set_LinePosition(int value);
    public sealed virtual bool HasLineInfo();
    public abstract virtual void Accept(IXamlNodeVisitor visitor, INode parentNode);
    public abstract virtual INode Clone();
}
[ContentPropertyAttribute("Path")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.Xaml.BindingExtension : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdateSourceEventName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TypedBindingBase <TypedBinding>k__BackingField;
    public string Path { get; public set; }
    public BindingMode Mode { get; public set; }
    public IValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public string StringFormat { get; public set; }
    public object Source { get; public set; }
    public string UpdateSourceEventName { get; public set; }
    public object TargetNullValue { get; public set; }
    public object FallbackValue { get; public set; }
    [EditorBrowsableAttribute("1")]
public TypedBindingBase TypedBinding { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public BindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(BindingMode value);
    [CompilerGeneratedAttribute]
public IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IValueConverter value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [CompilerGeneratedAttribute]
public string get_StringFormat();
    [CompilerGeneratedAttribute]
public void set_StringFormat(string value);
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
    [CompilerGeneratedAttribute]
public string get_UpdateSourceEventName();
    [CompilerGeneratedAttribute]
public void set_UpdateSourceEventName(string value);
    [CompilerGeneratedAttribute]
public object get_TargetNullValue();
    [CompilerGeneratedAttribute]
public void set_TargetNullValue(object value);
    [CompilerGeneratedAttribute]
public object get_FallbackValue();
    [CompilerGeneratedAttribute]
public void set_FallbackValue(object value);
    [CompilerGeneratedAttribute]
public TypedBindingBase get_TypedBinding();
    [CompilerGeneratedAttribute]
public void set_TypedBinding(TypedBindingBase value);
    private sealed virtual override BindingBase Xamarin.Forms.Xaml.IMarkupExtension<Xamarin.Forms.BindingBase>.ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
internal class Xamarin.Forms.Xaml.CreateValuesVisitor : object {
    [CompilerGeneratedAttribute]
private HydrationContext <Context>k__BackingField;
    private Dictionary`2<INode, object> Values { get; }
    private HydrationContext Context { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public CreateValuesVisitor(HydrationContext context);
    private Dictionary`2<INode, object> get_Values();
    [CompilerGeneratedAttribute]
private HydrationContext get_Context();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    private bool ValidateCtorArguments(Type nodeType, IElementNode node, String& missingArgName);
    public object CreateFromParameterizedConstructor(Type nodeType, IElementNode node);
    public object CreateFromFactory(Type nodeType, IElementNode node);
    public Object[] CreateArgumentsArray(IElementNode enode);
    public Object[] CreateArgumentsArray(IElementNode enode, ConstructorInfo ctorInfo);
    private static bool IsXaml2009LanguagePrimitive(IElementNode node);
    private static object CreateLanguagePrimitive(Type nodeType, IElementNode node);
}
[ProvideCompiledAttribute("Xamarin.Forms.Build.Tasks.DataTemplateExtension")]
[ContentPropertyAttribute("TypeName")]
public class Xamarin.Forms.Xaml.DataTemplateExtension : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    public sealed virtual DataTemplate ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
internal static class Xamarin.Forms.Xaml.Diagnostics.ResourceDictionaryDiagnostics : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<StaticResourceResolvedEventArgs> StaticResourceResolved;
    internal static void OnStaticResourceResolved(ResourceDictionary resourceDictionary, string key, object targetObject, object targetProperty);
    [CompilerGeneratedAttribute]
public static void add_StaticResourceResolved(EventHandler`1<StaticResourceResolvedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_StaticResourceResolved(EventHandler`1<StaticResourceResolvedEventArgs> value);
}
internal class Xamarin.Forms.Xaml.Diagnostics.StaticResourceResolvedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ResourceDictionary <ResourceDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetProperty>k__BackingField;
    public ResourceDictionary ResourceDictionary { get; }
    public string Key { get; }
    public object TargetObject { get; }
    public object TargetProperty { get; }
    internal StaticResourceResolvedEventArgs(ResourceDictionary resourceDictionary, string key, object targetObject, object targetProperty);
    [CompilerGeneratedAttribute]
public ResourceDictionary get_ResourceDictionary();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public object get_TargetObject();
    [CompilerGeneratedAttribute]
public object get_TargetProperty();
}
[ContentPropertyAttribute("Key")]
public class Xamarin.Forms.Xaml.DynamicResourceExtension : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override DynamicResource Xamarin.Forms.Xaml.IMarkupExtension<Xamarin.Forms.Internals.DynamicResource>.ProvideValue(IServiceProvider serviceProvider);
}
[DebuggerDisplayAttribute("{XmlType.Name}")]
internal class Xamarin.Forms.Xaml.ElementNode : BaseNode {
    [CompilerGeneratedAttribute]
private Dictionary`2<XmlName, INode> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XmlName> <SkipProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INode> <CollectionItems>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlType <XmlType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceURI>k__BackingField;
    [CompilerGeneratedAttribute]
private NameScopeRef <NameScopeRef>k__BackingField;
    public Dictionary`2<XmlName, INode> Properties { get; }
    public List`1<XmlName> SkipProperties { get; }
    public List`1<INode> CollectionItems { get; }
    public XmlType XmlType { get; }
    public string NamespaceURI { get; }
    public NameScopeRef NameScopeRef { get; public set; }
    public ElementNode(XmlType type, string namespaceURI, IXmlNamespaceResolver namespaceResolver, int linenumber, int lineposition);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<XmlName, INode> get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<XmlName> get_SkipProperties();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<INode> get_CollectionItems();
    [CompilerGeneratedAttribute]
public sealed virtual XmlType get_XmlType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_NamespaceURI();
    [CompilerGeneratedAttribute]
public sealed virtual NameScopeRef get_NameScopeRef();
    [CompilerGeneratedAttribute]
public void set_NameScopeRef(NameScopeRef value);
    public virtual void Accept(IXamlNodeVisitor visitor, INode parentNode);
    private bool IsDataTemplate(INode parentNode);
    protected bool SkipChildren(IXamlNodeVisitor visitor, INode node, INode parentNode);
    protected bool SkipVisitNode(IXamlNodeVisitor visitor, INode parentNode);
    public virtual INode Clone();
}
internal class Xamarin.Forms.Xaml.ExpandMarkupsVisitor : object {
    public static IList`1<XmlName> Skips;
    [CompilerGeneratedAttribute]
private HydrationContext <Context>k__BackingField;
    private Dictionary`2<INode, object> Values { get; }
    private HydrationContext Context { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public ExpandMarkupsVisitor(HydrationContext context);
    private static ExpandMarkupsVisitor();
    private Dictionary`2<INode, object> get_Values();
    [CompilerGeneratedAttribute]
private HydrationContext get_Context();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode markupnode, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    private INode ParseExpression(String& expression, IXmlNamespaceResolver nsResolver, IXmlLineInfo xmlLineInfo, INode node, INode parentNode);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Xaml.Extensions : object {
    [ExtensionAttribute]
public static TXaml LoadFromXaml(TXaml view, Type callingType);
    [ExtensionAttribute]
public static TXaml LoadFromXaml(TXaml view, string xaml);
    [ExtensionAttribute]
internal static TXaml LoadFromXaml(TXaml view, string xaml, Assembly rootAssembly);
}
internal class Xamarin.Forms.Xaml.FillResourceDictionariesVisitor : object {
    [CompilerGeneratedAttribute]
private HydrationContext <Context>k__BackingField;
    private HydrationContext Context { get; }
    private Dictionary`2<INode, object> Values { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public FillResourceDictionariesVisitor(HydrationContext context);
    [CompilerGeneratedAttribute]
private HydrationContext get_Context();
    private Dictionary`2<INode, object> get_Values();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
}
[AcceptEmptyServiceProviderAttribute]
[ContentPropertyAttribute("Glyph")]
public class Xamarin.Forms.Xaml.FontImageExtension : object {
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Glyph>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    public string FontFamily { get; public set; }
    public string Glyph { get; public set; }
    public Color Color { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public string get_Glyph();
    [CompilerGeneratedAttribute]
public void set_Glyph(string value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    public sealed virtual ImageSource ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
internal class Xamarin.Forms.Xaml.HydrationContext : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<INode, object> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IElementNode, Type> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private HydrationContext <ParentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <ExceptionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <RootAssembly>k__BackingField;
    public Dictionary`2<INode, object> Values { get; }
    public Dictionary`2<IElementNode, Type> Types { get; }
    public HydrationContext ParentContext { get; public set; }
    public Action`1<Exception> ExceptionHandler { get; public set; }
    public object RootElement { get; public set; }
    public Assembly RootAssembly { get; internal set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<INode, object> get_Values();
    [CompilerGeneratedAttribute]
public Dictionary`2<IElementNode, Type> get_Types();
    [CompilerGeneratedAttribute]
public HydrationContext get_ParentContext();
    [CompilerGeneratedAttribute]
public void set_ParentContext(HydrationContext value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandler(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public object get_RootElement();
    [CompilerGeneratedAttribute]
public void set_RootElement(object value);
    [CompilerGeneratedAttribute]
public Assembly get_RootAssembly();
    [CompilerGeneratedAttribute]
internal void set_RootAssembly(Assembly value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Xaml.IDictionaryExtensions : object {
    [ExtensionAttribute]
public static void AddRange(IDictionary`2<TKey, TValue> dictionary, IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
}
internal interface Xamarin.Forms.Xaml.IElementNode {
    public Dictionary`2<XmlName, INode> Properties { get; }
    public List`1<XmlName> SkipProperties { get; }
    public NameScopeRef NameScopeRef { get; }
    public XmlType XmlType { get; }
    public string NamespaceURI { get; }
    public abstract virtual Dictionary`2<XmlName, INode> get_Properties();
    public abstract virtual List`1<XmlName> get_SkipProperties();
    public abstract virtual NameScopeRef get_NameScopeRef();
    public abstract virtual XmlType get_XmlType();
    public abstract virtual string get_NamespaceURI();
}
internal interface Xamarin.Forms.Xaml.IExpressionParser {
    public abstract virtual object Parse(string match, String& expression, IServiceProvider serviceProvider);
}
internal interface Xamarin.Forms.Xaml.IExpressionParser`1 {
    public abstract virtual T Parse(string match, String& expression, IServiceProvider serviceProvider);
}
internal interface Xamarin.Forms.Xaml.IListNode {
    public List`1<INode> CollectionItems { get; }
    public abstract virtual List`1<INode> get_CollectionItems();
}
internal interface Xamarin.Forms.Xaml.INode {
    public List`1<string> IgnorablePrefixes { get; public set; }
    public IXmlNamespaceResolver NamespaceResolver { get; }
    public INode Parent { get; public set; }
    public abstract virtual List`1<string> get_IgnorablePrefixes();
    public abstract virtual void set_IgnorablePrefixes(List`1<string> value);
    public abstract virtual IXmlNamespaceResolver get_NamespaceResolver();
    public abstract virtual INode get_Parent();
    public abstract virtual void set_Parent(INode value);
    public abstract virtual void Accept(IXamlNodeVisitor visitor, INode parentNode);
    public abstract virtual INode Clone();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Xaml.INodeExtensions : object {
    [ExtensionAttribute]
public static bool SkipPrefix(INode node, string prefix);
}
[ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Xaml.Internals.NameScopeProvider : object {
    [CompilerGeneratedAttribute]
private INameScope <NameScope>k__BackingField;
    public INameScope NameScope { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INameScope get_NameScope();
    [CompilerGeneratedAttribute]
public void set_NameScope(INameScope value);
}
internal class Xamarin.Forms.Xaml.Internals.ReferenceProvider : object {
    private INode _node;
    internal ReferenceProvider(INode node);
    public sealed virtual object FindByName(string name);
}
public class Xamarin.Forms.Xaml.Internals.SimpleValueTargetProvider : object {
    private Object[] objectAndParents;
    private object targetProperty;
    private INameScope scope;
    private IEnumerable`1<object> Xamarin.Forms.Xaml.IProvideParentValues.ParentObjects { get; }
    private object Xamarin.Forms.Xaml.IProvideValueTarget.TargetObject { get; }
    private object Xamarin.Forms.Xaml.IProvideValueTarget.TargetProperty { get; }
    [ObsoleteAttribute("SimpleValueTargetProvider(object[] objectAndParents) is obsolete as of version 2.3.4. Please use SimpleValueTargetProvider(object[] objectAndParents, object targetProperty) instead.")]
[EditorBrowsableAttribute("1")]
public SimpleValueTargetProvider(Object[] objectAndParents);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("SimpleValueTargetProvider(object[] objectAndParents) is obsolete as of version 3.3.0. Please use SimpleValueTargetProvider(object[] objectAndParents, object targetProperty, NameScope scope) instead.")]
public SimpleValueTargetProvider(Object[] objectAndParents, object targetProperty);
    public SimpleValueTargetProvider(Object[] objectAndParents, object targetProperty, INameScope scope);
    private sealed virtual override IEnumerable`1<object> Xamarin.Forms.Xaml.IProvideParentValues.get_ParentObjects();
    private sealed virtual override object Xamarin.Forms.Xaml.IProvideValueTarget.get_TargetObject();
    private sealed virtual override object Xamarin.Forms.Xaml.IProvideValueTarget.get_TargetProperty();
    public sealed virtual object FindByName(string name);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Replaced by ResourceLoader")]
public static class Xamarin.Forms.Xaml.Internals.XamlLoader : object {
    private static Func`2<Type, string> xamlFileProvider;
    [CompilerGeneratedAttribute]
private static bool <DoNotThrowOnExceptions>k__BackingField;
    public static Func`2<Type, string> XamlFileProvider { get; internal set; }
    internal static bool DoNotThrowOnExceptions { get; internal set; }
    public static Func`2<Type, string> get_XamlFileProvider();
    internal static void set_XamlFileProvider(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
internal static bool get_DoNotThrowOnExceptions();
    [CompilerGeneratedAttribute]
internal static void set_DoNotThrowOnExceptions(bool value);
}
internal class Xamarin.Forms.Xaml.Internals.XamlRootObjectProvider : object {
    [CompilerGeneratedAttribute]
private object <RootObject>k__BackingField;
    public object RootObject { get; }
    public XamlRootObjectProvider(object rootObject);
    [CompilerGeneratedAttribute]
public sealed virtual object get_RootObject();
}
public class Xamarin.Forms.Xaml.Internals.XamlServiceProvider : object {
    private Dictionary`2<Type, object> services;
    internal IProvideValueTarget IProvideValueTarget { get; internal set; }
    internal IXamlTypeResolver IXamlTypeResolver { get; internal set; }
    internal IRootObjectProvider IRootObjectProvider { get; internal set; }
    internal IXmlLineInfoProvider IXmlLineInfoProvider { get; internal set; }
    internal IValueConverterProvider IValueConverterProvider { get; internal set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
internal INameScopeProvider INameScopeProvider { get; internal set; }
    internal XamlServiceProvider(INode node, HydrationContext context);
    internal IProvideValueTarget get_IProvideValueTarget();
    internal void set_IProvideValueTarget(IProvideValueTarget value);
    internal IXamlTypeResolver get_IXamlTypeResolver();
    internal void set_IXamlTypeResolver(IXamlTypeResolver value);
    internal IRootObjectProvider get_IRootObjectProvider();
    internal void set_IRootObjectProvider(IRootObjectProvider value);
    internal IXmlLineInfoProvider get_IXmlLineInfoProvider();
    internal void set_IXmlLineInfoProvider(IXmlLineInfoProvider value);
    internal IValueConverterProvider get_IValueConverterProvider();
    internal void set_IValueConverterProvider(IValueConverterProvider value);
    public sealed virtual object GetService(Type serviceType);
    public void Add(Type type, object service);
    internal INameScopeProvider get_INameScopeProvider();
    internal void set_INameScopeProvider(INameScopeProvider value);
}
public class Xamarin.Forms.Xaml.Internals.XamlTypeResolver : object {
    private Assembly currentAssembly;
    private GetTypeFromXmlName getTypeFromXmlName;
    private IXmlNamespaceResolver namespaceResolver;
    public XamlTypeResolver(IXmlNamespaceResolver namespaceResolver, Assembly currentAssembly);
    internal XamlTypeResolver(IXmlNamespaceResolver namespaceResolver, GetTypeFromXmlName getTypeFromXmlName, Assembly currentAssembly);
    private sealed virtual override Type Xamarin.Forms.Xaml.IXamlTypeResolver.Resolve(string qualifiedTypeName, IServiceProvider serviceProvider);
    private sealed virtual override bool Xamarin.Forms.Xaml.IXamlTypeResolver.TryResolve(string qualifiedTypeName, Type& type);
    internal bool TryResolve(XmlType xmlType, Type& type);
    private Type Resolve(string qualifiedTypeName, IServiceProvider serviceProvider, XamlParseException& exception);
}
internal class Xamarin.Forms.Xaml.Internals.XamlValueTargetProvider : object {
    [CompilerGeneratedAttribute]
private INode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private HydrationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetProperty>k__BackingField;
    private INode Node { get; }
    private HydrationContext Context { get; }
    public object TargetObject { get; }
    public object TargetProperty { get; internal set; }
    private IEnumerable`1<object> Xamarin.Forms.Xaml.IProvideParentValues.ParentObjects { get; }
    public XamlValueTargetProvider(object targetObject, INode node, HydrationContext context, object targetProperty);
    [CompilerGeneratedAttribute]
private INode get_Node();
    [CompilerGeneratedAttribute]
private HydrationContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual object get_TargetObject();
    [CompilerGeneratedAttribute]
public sealed virtual object get_TargetProperty();
    [CompilerGeneratedAttribute]
internal void set_TargetProperty(object value);
    [IteratorStateMachineAttribute("Xamarin.Forms.Xaml.Internals.XamlValueTargetProvider/<Xamarin-Forms-Xaml-IProvideParentValues-get_ParentObjects>d__15")]
private sealed virtual override IEnumerable`1<object> Xamarin.Forms.Xaml.IProvideParentValues.get_ParentObjects();
}
public class Xamarin.Forms.Xaml.Internals.XmlLineInfoProvider : object {
    [CompilerGeneratedAttribute]
private IXmlLineInfo <XmlLineInfo>k__BackingField;
    public IXmlLineInfo XmlLineInfo { get; }
    public XmlLineInfoProvider(IXmlLineInfo xmlLineInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IXmlLineInfo get_XmlLineInfo();
}
public class Xamarin.Forms.Xaml.Internals.XmlNamespaceResolver : object {
    private Dictionary`2<string, string> namespaces;
    public sealed virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public sealed virtual string LookupNamespace(string prefix);
    public sealed virtual string LookupPrefix(string namespaceName);
    public void Add(string prefix, string ns);
}
internal interface Xamarin.Forms.Xaml.IValueNode {
}
internal interface Xamarin.Forms.Xaml.IXamlNodeVisitor {
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public abstract virtual TreeVisitingMode get_VisitingMode();
    public abstract virtual bool get_StopOnDataTemplate();
    public abstract virtual bool get_VisitNodeOnDataTemplate();
    public abstract virtual bool get_StopOnResourceDictionary();
    public abstract virtual void Visit(ValueNode node, INode parentNode);
    public abstract virtual void Visit(MarkupNode node, INode parentNode);
    public abstract virtual void Visit(ElementNode node, INode parentNode);
    public abstract virtual void Visit(RootNode node, INode parentNode);
    public abstract virtual void Visit(ListNode node, INode parentNode);
    public abstract virtual bool SkipChildren(INode node, INode parentNode);
    public abstract virtual bool IsResourceDictionary(ElementNode node);
}
internal class Xamarin.Forms.Xaml.ListNode : BaseNode {
    [CompilerGeneratedAttribute]
private XmlName <XmlName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INode> <CollectionItems>k__BackingField;
    public XmlName XmlName { get; public set; }
    public List`1<INode> CollectionItems { get; public set; }
    public ListNode(IList`1<INode> nodes, IXmlNamespaceResolver namespaceResolver, int linenumber, int lineposition);
    [CompilerGeneratedAttribute]
public XmlName get_XmlName();
    [CompilerGeneratedAttribute]
public void set_XmlName(XmlName value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<INode> get_CollectionItems();
    [CompilerGeneratedAttribute]
public void set_CollectionItems(List`1<INode> value);
    public virtual void Accept(IXamlNodeVisitor visitor, INode parentNode);
    public virtual INode Clone();
}
internal abstract class Xamarin.Forms.Xaml.MarkupExpressionParser : object {
    public object ParseExpression(String& expression, IServiceProvider serviceProvider);
    internal static bool MatchMarkup(String& match, string expression, Int32& end);
    protected Property ParseProperty(IServiceProvider serviceProvider, String& remaining);
    private Property ParsePropertyExpression(string prop, IServiceProvider serviceProvider, String& remaining);
    private string GetNextPiece(IServiceProvider serviceProvider, String& remaining, Char& next);
    protected static ValueTuple`2<string, string> ParseName(string name);
}
internal class Xamarin.Forms.Xaml.MarkupExtensionParser : MarkupExpressionParser {
    private IMarkupExtension markupExtension;
    public sealed virtual object Parse(string match, String& remaining, IServiceProvider serviceProvider);
    private void SetPropertyValue(string prop, string strValue, object value, IServiceProvider serviceProvider);
}
[DebuggerDisplayAttribute("{MarkupString}")]
internal class Xamarin.Forms.Xaml.MarkupNode : BaseNode {
    [CompilerGeneratedAttribute]
private string <MarkupString>k__BackingField;
    public string MarkupString { get; }
    public MarkupNode(string markupString, IXmlNamespaceResolver namespaceResolver, int linenumber, int lineposition);
    [CompilerGeneratedAttribute]
public string get_MarkupString();
    public virtual void Accept(IXamlNodeVisitor visitor, INode parentNode);
    public virtual INode Clone();
}
internal class Xamarin.Forms.Xaml.NameScopeRef : object {
    [CompilerGeneratedAttribute]
private INameScope <NameScope>k__BackingField;
    public INameScope NameScope { get; public set; }
    [CompilerGeneratedAttribute]
public INameScope get_NameScope();
    [CompilerGeneratedAttribute]
public void set_NameScope(INameScope value);
}
internal class Xamarin.Forms.Xaml.NamescopingVisitor : object {
    private Dictionary`2<INode, NameScopeRef> _scopes;
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public NamescopingVisitor(HydrationContext context);
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    private static bool IsDataTemplate(INode node, INode parentNode);
    private static bool IsStyle(INode node, INode parentNode);
    private static bool IsVisualStateGroupList(ElementNode node);
}
[ProvideCompiledAttribute("Xamarin.Forms.Build.Tasks.NullExtension")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.Xaml.NullExtension : object {
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
}
[ContentPropertyAttribute("Default")]
public class Xamarin.Forms.Xaml.OnIdiomExtension : object {
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Phone>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tablet>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Desktop>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TV>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Watch>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    public object Default { get; public set; }
    public object Phone { get; public set; }
    public object Tablet { get; public set; }
    public object Desktop { get; public set; }
    public object TV { get; public set; }
    public object Watch { get; public set; }
    public IValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(object value);
    [CompilerGeneratedAttribute]
public object get_Phone();
    [CompilerGeneratedAttribute]
public void set_Phone(object value);
    [CompilerGeneratedAttribute]
public object get_Tablet();
    [CompilerGeneratedAttribute]
public void set_Tablet(object value);
    [CompilerGeneratedAttribute]
public object get_Desktop();
    [CompilerGeneratedAttribute]
public void set_Desktop(object value);
    [CompilerGeneratedAttribute]
public object get_TV();
    [CompilerGeneratedAttribute]
public void set_TV(object value);
    [CompilerGeneratedAttribute]
public object get_Watch();
    [CompilerGeneratedAttribute]
public void set_Watch(object value);
    [CompilerGeneratedAttribute]
public IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IValueConverter value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
    private object GetValue();
}
[ContentPropertyAttribute("Default")]
public class Xamarin.Forms.Xaml.OnPlatformExtension : object {
    private static object s_notset;
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Android>k__BackingField;
    [CompilerGeneratedAttribute]
private object <GTK>k__BackingField;
    [CompilerGeneratedAttribute]
private object <iOS>k__BackingField;
    [CompilerGeneratedAttribute]
private object <macOS>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tizen>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UWP>k__BackingField;
    [CompilerGeneratedAttribute]
private object <WPF>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    public object Default { get; public set; }
    public object Android { get; public set; }
    public object GTK { get; public set; }
    public object iOS { get; public set; }
    public object macOS { get; public set; }
    public object Tizen { get; public set; }
    public object UWP { get; public set; }
    public object WPF { get; public set; }
    public IValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    private static OnPlatformExtension();
    [CompilerGeneratedAttribute]
public object get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(object value);
    [CompilerGeneratedAttribute]
public object get_Android();
    [CompilerGeneratedAttribute]
public void set_Android(object value);
    [CompilerGeneratedAttribute]
public object get_GTK();
    [CompilerGeneratedAttribute]
public void set_GTK(object value);
    [CompilerGeneratedAttribute]
public object get_iOS();
    [CompilerGeneratedAttribute]
public void set_iOS(object value);
    [CompilerGeneratedAttribute]
public object get_macOS();
    [CompilerGeneratedAttribute]
public void set_macOS(object value);
    [CompilerGeneratedAttribute]
public object get_Tizen();
    [CompilerGeneratedAttribute]
public void set_Tizen(object value);
    [CompilerGeneratedAttribute]
public object get_UWP();
    [CompilerGeneratedAttribute]
public void set_UWP(object value);
    [CompilerGeneratedAttribute]
public object get_WPF();
    [CompilerGeneratedAttribute]
public void set_WPF(object value);
    [CompilerGeneratedAttribute]
public IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IValueConverter value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
    private bool TryGetValueForPlatform(Object& value);
}
internal class Xamarin.Forms.Xaml.PruneIgnoredNodesVisitor : object {
    [CompilerGeneratedAttribute]
private bool <UseDesignProperties>k__BackingField;
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public bool UseDesignProperties { get; }
    public PruneIgnoredNodesVisitor(bool useDesignProperties);
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    [CompilerGeneratedAttribute]
public bool get_UseDesignProperties();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
}
[ContentPropertyAttribute("Name")]
public class Xamarin.Forms.Xaml.ReferenceExtension : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
}
internal class Xamarin.Forms.Xaml.RegisterXNamesVisitor : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<INode, object> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private HydrationContext <Context>k__BackingField;
    private Dictionary`2<INode, object> Values { get; }
    private HydrationContext Context { get; }
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public RegisterXNamesVisitor(HydrationContext context);
    [CompilerGeneratedAttribute]
private Dictionary`2<INode, object> get_Values();
    [CompilerGeneratedAttribute]
private HydrationContext get_Context();
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    private static bool IsXNameProperty(ValueNode node, INode parentNode);
}
[ContentPropertyAttribute("Mode")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.Xaml.RelativeSourceExtension : object {
    [CompilerGeneratedAttribute]
private RelativeBindingSourceMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AncestorLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <AncestorType>k__BackingField;
    public RelativeBindingSourceMode Mode { get; public set; }
    public int AncestorLevel { get; public set; }
    public Type AncestorType { get; public set; }
    [CompilerGeneratedAttribute]
public RelativeBindingSourceMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(RelativeBindingSourceMode value);
    [CompilerGeneratedAttribute]
public int get_AncestorLevel();
    [CompilerGeneratedAttribute]
public void set_AncestorLevel(int value);
    [CompilerGeneratedAttribute]
public Type get_AncestorType();
    [CompilerGeneratedAttribute]
public void set_AncestorType(Type value);
    private sealed virtual override RelativeBindingSource Xamarin.Forms.Xaml.IMarkupExtension<Xamarin.Forms.RelativeBindingSource>.ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
}
internal class Xamarin.Forms.Xaml.RemoveDuplicateDesignNodes : object {
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public sealed virtual TreeVisitingMode get_VisitingMode();
    public sealed virtual bool get_StopOnDataTemplate();
    public sealed virtual bool get_StopOnResourceDictionary();
    public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
}
internal class Xamarin.Forms.Xaml.ResourcesLoader : object {
    public sealed virtual T CreateFromResource(string resourcePath, Assembly assembly, IXmlLineInfo lineInfo);
    public sealed virtual string GetResource(string resourcePath, Assembly assembly, object target, IXmlLineInfo lineInfo);
}
internal abstract class Xamarin.Forms.Xaml.RootNode : ElementNode {
    protected RootNode(XmlType xmlType, IXmlNamespaceResolver nsResolver, int linenumber, int lineposition);
    public virtual void Accept(IXamlNodeVisitor visitor, INode parentNode);
}
[ProvideCompiledAttribute("Xamarin.Forms.Build.Tasks.StaticExtension")]
[ContentPropertyAttribute("Member")]
public class Xamarin.Forms.Xaml.StaticExtension : object {
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    public string Member { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(string value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
}
[ContentPropertyAttribute("Key")]
public class Xamarin.Forms.Xaml.StaticResourceExtension : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
    internal static object CastTo(object value, object targetProperty);
    private bool TryGetResource(string key, IEnumerable`1<object> parentObjects, Object& resource, ResourceDictionary& resourceDictionary);
    private bool TryGetApplicationLevelResource(string key, Object& resource, ResourceDictionary& resourceDictionary);
}
[ContentPropertyAttribute("Style")]
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.StyleSheetProvider")]
public class Xamarin.Forms.Xaml.StyleSheetExtension : object {
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Source>k__BackingField;
    public string Style { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.UriTypeConverter")]
public Uri Source { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public Uri get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(Uri value);
    private sealed virtual override object Xamarin.Forms.Xaml.IValueProvider.ProvideValue(IServiceProvider serviceProvider);
}
[ContentPropertyAttribute("Path")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.Xaml.TemplateBindingExtension : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringFormat>k__BackingField;
    public string Path { get; public set; }
    public BindingMode Mode { get; public set; }
    public IValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public string StringFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public BindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(BindingMode value);
    [CompilerGeneratedAttribute]
public IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IValueConverter value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [CompilerGeneratedAttribute]
public string get_StringFormat();
    [CompilerGeneratedAttribute]
public void set_StringFormat(string value);
    private sealed virtual override BindingBase Xamarin.Forms.Xaml.IMarkupExtension<Xamarin.Forms.BindingBase>.ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
internal enum Xamarin.Forms.Xaml.TreeVisitingMode : Enum {
    public int value__;
    public static TreeVisitingMode TopDown;
    public static TreeVisitingMode BottomUp;
}
internal static class Xamarin.Forms.Xaml.TypeArgumentsParser : object {
    public static IList`1<XmlType> ParseExpression(string expression, IXmlNamespaceResolver resolver, IXmlLineInfo lineInfo);
    private static XmlType Parse(string match, String& remaining, IXmlNamespaceResolver resolver, IXmlLineInfo lineinfo);
}
[ProvideCompiledAttribute("Xamarin.Forms.Build.Tasks.TypeExtension")]
[ContentPropertyAttribute("TypeName")]
public class Xamarin.Forms.Xaml.TypeExtension : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    public sealed virtual Type ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
}
[DebuggerDisplayAttribute("{Value}")]
internal class Xamarin.Forms.Xaml.ValueNode : BaseNode {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; public set; }
    public ValueNode(object value, IXmlNamespaceResolver namespaceResolver, int linenumber, int lineposition);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual void Accept(IXamlNodeVisitor visitor, INode parentNode);
    public virtual INode Clone();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Xaml.XamlCExtensions : object {
    [ExtensionAttribute]
public static bool IsCompiled(Type type);
}
[AttributeUsageAttribute("7")]
public class Xamarin.Forms.Xaml.XamlCompilationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private XamlCompilationOptions <XamlCompilationOptions>k__BackingField;
    public XamlCompilationOptions XamlCompilationOptions { get; public set; }
    public XamlCompilationAttribute(XamlCompilationOptions xamlCompilationOptions);
    [CompilerGeneratedAttribute]
public XamlCompilationOptions get_XamlCompilationOptions();
    [CompilerGeneratedAttribute]
public void set_XamlCompilationOptions(XamlCompilationOptions value);
}
[FlagsAttribute]
public enum Xamarin.Forms.Xaml.XamlCompilationOptions : Enum {
    public int value__;
    public static XamlCompilationOptions Skip;
    public static XamlCompilationOptions Compile;
}
[AttributeUsageAttribute("4")]
public class Xamarin.Forms.Xaml.XamlFilePathAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public string FilePath { get; }
    public XamlFilePathAttribute(string filePath);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    internal static string GetFilePathForObject(object view);
}
internal static class Xamarin.Forms.Xaml.XamlLoader : object {
    private static Dictionary`2<Type, string> XamlResources;
    [CompilerGeneratedAttribute]
private static Func`3<IList`1<FallbackTypeInfo>, Type, Type> <FallbackTypeResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<CallbackTypeInfo, object> <ValueCreatedCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<CallbackTypeInfo, Type, Exception, object> <InstantiationFailedCallback>k__BackingField;
    internal static Func`3<IList`1<FallbackTypeInfo>, Type, Type> FallbackTypeResolver { get; internal set; }
    internal static Action`2<CallbackTypeInfo, object> ValueCreatedCallback { get; internal set; }
    internal static Func`4<CallbackTypeInfo, Type, Exception, object> InstantiationFailedCallback { get; internal set; }
    private static XamlLoader();
    public static void Load(object view, Type callingType);
    public static void Load(object view, string xaml);
    public static void Load(object view, string xaml, bool useDesignProperties);
    public static void Load(object view, string xaml, Assembly rootAssembly);
    public static void Load(object view, string xaml, Assembly rootAssembly, bool useDesignProperties);
    public static object Create(string xaml, bool doNotThrow);
    public static object Create(string xaml, bool doNotThrow, bool useDesignProperties);
    public static IResourceDictionary LoadResources(string xaml, IResourcesProvider rootView);
    private static void Visit(RootNode rootnode, HydrationContext visitorContext, bool useDesignProperties);
    private static string GetXamlForType(Type type, object instance, Boolean& useDesignProperties);
    private static string LegacyGetXamlForType(Type type);
    private static bool ResourceMatchesFilename(Assembly assembly, string resource, string filename);
    private static string ReadResourceAsXaml(Type type, Assembly assembly, string likelyTargetName, bool validate);
    [CompilerGeneratedAttribute]
internal static Func`3<IList`1<FallbackTypeInfo>, Type, Type> get_FallbackTypeResolver();
    [CompilerGeneratedAttribute]
internal static void set_FallbackTypeResolver(Func`3<IList`1<FallbackTypeInfo>, Type, Type> value);
    [CompilerGeneratedAttribute]
internal static Action`2<CallbackTypeInfo, object> get_ValueCreatedCallback();
    [CompilerGeneratedAttribute]
internal static void set_ValueCreatedCallback(Action`2<CallbackTypeInfo, object> value);
    [CompilerGeneratedAttribute]
internal static Func`4<CallbackTypeInfo, Type, Exception, object> get_InstantiationFailedCallback();
    [CompilerGeneratedAttribute]
internal static void set_InstantiationFailedCallback(Func`4<CallbackTypeInfo, Type, Exception, object> value);
    [CompilerGeneratedAttribute]
internal static void <Create>g__ehandler|6_0(Exception e);
}
internal class Xamarin.Forms.Xaml.XamlNodeVisitor : object {
    private Action`2<INode, INode> action;
    [CompilerGeneratedAttribute]
private TreeVisitingMode <VisitingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnDataTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnResourceDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VisitNodeOnDataTemplate>k__BackingField;
    public TreeVisitingMode VisitingMode { get; }
    public bool StopOnDataTemplate { get; }
    public bool StopOnResourceDictionary { get; }
    public bool VisitNodeOnDataTemplate { get; }
    public XamlNodeVisitor(Action`2<INode, INode> action, TreeVisitingMode visitingMode, bool stopOnDataTemplate, bool visitNodeOnDataTemplate);
    [CompilerGeneratedAttribute]
public sealed virtual TreeVisitingMode get_VisitingMode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopOnDataTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopOnResourceDictionary();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_VisitNodeOnDataTemplate();
    public sealed virtual void Visit(ValueNode node, INode parentNode);
    public sealed virtual void Visit(MarkupNode node, INode parentNode);
    public sealed virtual void Visit(ElementNode node, INode parentNode);
    public sealed virtual void Visit(RootNode node, INode parentNode);
    public sealed virtual void Visit(ListNode node, INode parentNode);
    public sealed virtual bool SkipChildren(INode node, INode parentNode);
    public sealed virtual bool IsResourceDictionary(ElementNode node);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Xaml.XamlParser : object {
    public static string XFUri;
    public static string XFDesignUri;
    public static string X2006Uri;
    public static string X2009Uri;
    public static string McUri;
    private static IList`1<XmlnsDefinitionAttribute> s_xmlnsDefinitions;
    public static void ParseXaml(RootNode rootNode, XmlReader reader);
    private static void ParseXamlElementFor(IElementNode node, XmlReader reader);
    private static INode ReadNode(XmlReader reader, bool nested);
    internal static IList`1<XmlType> GetTypeArguments(XmlReader reader);
    private static IList`1<XmlType> GetTypeArguments(IList`1<KeyValuePair`2<XmlName, INode>> attributes);
    private static IList`1<KeyValuePair`2<XmlName, INode>> ParseXamlAttributes(XmlReader reader, IList`1& xmlns);
    public static XmlName ParsePropertyName(XmlName name);
    private static IList`1<string> PrefixesToIgnore(IList`1<KeyValuePair`2<string, string>> xmlns);
    private static IValueNode GetValueNode(object value, XmlReader reader);
    private static void GatherXmlnsDefinitionAttributes();
    public static Type GetElementType(XmlType xmlType, IXmlLineInfo xmlInfo, Assembly currentAssembly, XamlParseException& exception);
    [ExtensionAttribute]
public static T GetTypeReference(XmlType xmlType, IEnumerable`1<XmlnsDefinitionAttribute> xmlnsDefinitions, string defaultAssemblyName, Func`2<FallbackTypeInfo, T> refFromTypeInfo, IList`1& potentialTypes);
}
[DebuggerDisplayAttribute("{NamespaceURI}:{LocalName}")]
internal class Xamarin.Forms.Xaml.XmlName : ValueType {
    public static XmlName _CreateContent;
    public static XmlName xKey;
    public static XmlName xName;
    public static XmlName xTypeArguments;
    public static XmlName xArguments;
    public static XmlName xFactoryMethod;
    public static XmlName xDataType;
    public static XmlName Empty;
    [CompilerGeneratedAttribute]
private string <NamespaceURI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public XmlName(string namespaceUri, string localName);
    private static XmlName();
    [CompilerGeneratedAttribute]
public string get_NamespaceURI();
    [CompilerGeneratedAttribute]
public string get_LocalName();
    public virtual bool Equals(object obj);
    public bool Equals(string namespaceUri, string localName);
    public virtual int GetHashCode();
    public static bool op_Equality(XmlName x1, XmlName x2);
    public static bool op_Inequality(XmlName x1, XmlName x2);
}
internal static class Xamarin.Forms.Xaml.XmlnsHelper : object {
    public static string ParseNamespaceFromXmlns(string xmlns);
    public static void ParseXmlns(string xmlns, String& typeName, String& ns, String& asm, String& targetPlatform);
    private static void ParseClrNamespace(string xmlns, String& typeName, String& ns, String& asm, String& targetPlatform);
    private static void ParseUsing(string xmlns, String& typeName, String& ns, String& asm, String& targetPlatform);
}
[DebuggerDisplayAttribute("{NamespaceUri}:{Name}")]
internal class Xamarin.Forms.Xaml.XmlType : object {
    [CompilerGeneratedAttribute]
private string <NamespaceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmlType> <TypeArguments>k__BackingField;
    public string NamespaceUri { get; }
    public string Name { get; }
    public IList`1<XmlType> TypeArguments { get; }
    public XmlType(string namespaceUri, string name, IList`1<XmlType> typeArguments);
    [CompilerGeneratedAttribute]
public string get_NamespaceUri();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IList`1<XmlType> get_TypeArguments();
}
