internal class ThisAssembly : object {
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportCellAttribute : HandlerAttribute {
    public ExportCellAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportImageSourceHandlerAttribute : HandlerAttribute {
    public ExportImageSourceHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportRendererAttribute : HandlerAttribute {
    [CompilerGeneratedAttribute]
private UIUserInterfaceIdiom <Idiom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Idiomatic>k__BackingField;
    internal UIUserInterfaceIdiom Idiom { get; }
    internal bool Idiomatic { get; }
    public ExportRendererAttribute(Type handler, Type target, UIUserInterfaceIdiom idiom, Type[] supportedVisuals);
    public ExportRendererAttribute(Type handler, Type target, UIUserInterfaceIdiom idiom);
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals);
    public ExportRendererAttribute(Type handler, Type target);
    [CompilerGeneratedAttribute]
internal UIUserInterfaceIdiom get_Idiom();
    [CompilerGeneratedAttribute]
internal bool get_Idiomatic();
    public virtual bool ShouldRegister();
}
internal static class Xamarin.Forms.Flags : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.Forms : object {
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    private static Nullable`1<bool> s_isiOS9OrNewer;
    private static Nullable`1<bool> s_isiOS10OrNewer;
    private static Nullable`1<bool> s_isiOS11OrNewer;
    private static Nullable`1<bool> s_isiOS12OrNewer;
    private static Nullable`1<bool> s_isiOS13OrNewer;
    private static Nullable`1<bool> s_isiOS14OrNewer;
    private static Nullable`1<bool> s_respondsTosetNeedsUpdateOfHomeIndicatorAutoHidden;
    private static IReadOnlyList`1<string> s_flags;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ViewInitializedEventArgs> ViewInitialized;
    public static bool IsInitialized { get; private set; }
    internal static bool IsiOS9OrNewer { get; }
    internal static bool IsiOS10OrNewer { get; }
    internal static bool IsiOS11OrNewer { get; }
    internal static bool IsiOS12OrNewer { get; }
    internal static bool IsiOS13OrNewer { get; }
    internal static bool IsiOS14OrNewer { get; }
    internal static bool RespondsToSetNeedsUpdateOfHomeIndicatorAutoHidden { get; }
    public static IReadOnlyList`1<string> Flags { get; }
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    internal static bool get_IsiOS9OrNewer();
    internal static bool get_IsiOS10OrNewer();
    internal static bool get_IsiOS11OrNewer();
    internal static bool get_IsiOS12OrNewer();
    internal static bool get_IsiOS13OrNewer();
    internal static bool get_IsiOS14OrNewer();
    internal static bool get_RespondsToSetNeedsUpdateOfHomeIndicatorAutoHidden();
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    public static void Init();
    [CompilerGeneratedAttribute]
public static void add_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [ExtensionAttribute]
internal static void SendViewInitialized(VisualElement self, UIView nativeView);
}
internal class Xamarin.Forms.Internals.Crc64 : HashAlgorithm {
    private static Crc64 _instance;
    private static UInt64[] Table;
    private ulong crc;
    private ulong length;
    private static UInt32[] _lookup32;
    public static Crc64 Instance { get; }
    private static Crc64();
    public static Crc64 get_Instance();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private static UInt32[] CreateLookup32();
    private static string ByteArrayToHexViaLookup32(Byte[] bytes);
    public static string GetHash(string input);
}
[AttributeUsageAttribute("32767")]
[EditorBrowsableAttribute("1")]
internal class Xamarin.Forms.Internals.LinkerSafeAttribute : Attribute {
}
[ExtensionAttribute]
public static class Xamarin.Forms.PageExtensions : object {
    [ExtensionAttribute]
public static UIViewController CreateViewController(Page page);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.AccessibilityExtensions : object {
    [ExtensionAttribute]
public static void SetAccessibilityProperties(UIView nativeViewElement, Element element);
    [ExtensionAttribute]
public static string SetAccessibilityHint(UIView Control, Element Element, string _defaultAccessibilityHint);
    [ExtensionAttribute]
public static string SetAccessibilityLabel(UIView Control, Element Element, string _defaultAccessibilityLabel);
    [ExtensionAttribute]
public static string SetAccessibilityHint(UIBarItem Control, Element Element, string _defaultAccessibilityHint);
    [ExtensionAttribute]
public static string SetAccessibilityLabel(UIBarItem Control, Element Element, string _defaultAccessibilityLabel);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsAccessibilityElement(UIView Control, Element Element, Nullable`1<bool> _defaultIsAccessibilityElement);
}
public class Xamarin.Forms.Platform.iOS.ActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, UIActivityIndicatorView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateColor();
    private void UpdateIsRunning();
    internal void PreserveState();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.AlignmentExtensions : object {
    [ExtensionAttribute]
internal static UITextAlignment ToNativeTextAlignment(TextAlignment alignment, EffectiveFlowDirection flowDirection);
    [ExtensionAttribute]
internal static UIControlContentVerticalAlignment ToNativeTextAlignment(TextAlignment alignment);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.ArrayExtensions : object {
    [ExtensionAttribute]
public static T[] Insert(T[] self, int index, T item);
    [ExtensionAttribute]
public static T[] Remove(T[] self, T item);
    [ExtensionAttribute]
public static T[] RemoveAt(T[] self, int index);
}
internal static class Xamarin.Forms.Platform.iOS.BorderElementManager : object {
    private static nfloat _defaultCornerRadius;
    private static BorderElementManager();
    public static void Init(IVisualNativeElementRenderer renderer);
    public static void Dispose(IVisualNativeElementRenderer renderer);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    public static void UpdateBorder(IVisualNativeElementRenderer renderer, IBorderElement backgroundView);
    private static void OnControlChanged(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.iOS.BoxRenderer : VisualElementRenderer`1<BoxView> {
    private UIColor _colorToRenderer;
    private CGSize _previousSize;
    private nfloat _topLeft;
    private nfloat _topRight;
    private nfloat _bottomLeft;
    private nfloat _bottomRight;
    private static float PI;
    private static float PIAndAHalf;
    private static float HalfPI;
    private static float TwoPI;
    public virtual void Draw(CGRect rect);
    public virtual void LayoutSubviews();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    private void SetCornerRadius();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.BrushExtensions : object {
    private static string BackgroundLayer;
    [ExtensionAttribute]
public static void UpdateBackground(UIView control, Brush brush);
    [ExtensionAttribute]
public static CALayer GetBackgroundLayer(UIView control, Brush brush);
    [ExtensionAttribute]
public static UIImage GetBackgroundImage(UIView control, Brush brush);
    [ExtensionAttribute]
public static void InsertBackgroundLayer(UIView view, CALayer backgroundLayer, int index);
    [ExtensionAttribute]
public static void InsertBackgroundLayer(CALayer layer, CALayer backgroundLayer, int index);
    [ExtensionAttribute]
public static void RemoveBackgroundLayer(UIView view);
    [ExtensionAttribute]
public static void RemoveBackgroundLayer(CALayer layer);
    [ExtensionAttribute]
public static void UpdateBackgroundLayer(UIView view);
    [ExtensionAttribute]
private static void UpdateBackgroundLayer(CALayer layer, CGRect bounds);
    private static bool ShouldUseParentView(UIView view);
    private static CGPoint GetRadialGradientBrushEndPoint(Point startPoint, double radius);
}
internal static class Xamarin.Forms.Platform.iOS.ButtonElementManager : object {
    private static UIControlState[] s_controlStates;
    private static ButtonElementManager();
    public static void Init(IVisualNativeElementRenderer renderer);
    private static void OnControlChanged(object sender, EventArgs e);
    private static void TouchUpInside(object sender, EventArgs eventArgs);
    private static void TouchDown(object sender, EventArgs eventArgs);
    public static void Dispose(IVisualNativeElementRenderer renderer);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void SetControlPropertiesFromProxy(UIButton control);
    internal static void OnButtonTouchDown(IButtonController element);
    internal static void OnButtonTouchUpInside(IButtonController element);
    internal static void OnButtonTouchUpOutside(IButtonController element);
}
public class Xamarin.Forms.Platform.iOS.ButtonLayoutManager : object {
    private bool _disposed;
    private IButtonLayoutRenderer _renderer;
    private Button _element;
    private bool _preserveInitialPadding;
    private bool _spacingAdjustsPadding;
    private bool _borderAdjustsPadding;
    private bool _collapseHorizontalPadding;
    private Nullable`1<UIEdgeInsets> _defaultImageInsets;
    private Nullable`1<UIEdgeInsets> _defaultTitleInsets;
    private Nullable`1<UIEdgeInsets> _defaultContentInsets;
    private UIEdgeInsets _paddingAdjustments;
    private UIButton Control { get; }
    private IImageVisualElementRenderer ImageVisualElementRenderer { get; }
    public ButtonLayoutManager(IButtonLayoutRenderer renderer, bool preserveInitialPadding, bool spacingAdjustsPadding, bool borderAdjustsPadding, bool collapseHorizontalPadding);
    private UIButton get_Control();
    private IImageVisualElementRenderer get_ImageVisualElementRenderer();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public CGSize SizeThatFits(CGSize size, CGSize measured);
    public void Update();
    public void SetImage(UIImage image);
    private void OnElementChanged(object sender, ElementChangedEventArgs`1<Button> e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    internal void UpdateText();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ButtonLayoutManager/<UpdateImageAsync>d__24")]
private Task UpdateImageAsync();
    private void UpdatePadding();
    private UIEdgeInsets GetPaddingInsets(UIEdgeInsets adjustments);
    private void EnsureDefaultInsets();
    private void UpdateEdgeInsets();
}
public class Xamarin.Forms.Platform.iOS.ButtonRenderer : ViewRenderer`2<Button, UIButton> {
    private bool _isDisposed;
    private CGSize _previousSize;
    private UIColor _buttonTextColorDefaultDisabled;
    private UIColor _buttonTextColorDefaultHighlighted;
    private UIColor _buttonTextColorDefaultNormal;
    private bool _useLegacyColorManagement;
    private ButtonLayoutManager _buttonLayoutManager;
    private nfloat _minimumButtonHeight;
    private static UIControlState[] s_controlStates;
    public bool IsDisposed { get; }
    private IImageVisualElementRenderer Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.ImageVisualElementRenderer { get; }
    private nfloat Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.MinimumHeight { get; }
    private static ButtonRenderer();
    public sealed virtual bool get_IsDisposed();
    private sealed virtual override IImageVisualElementRenderer Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.get_ImageVisualElementRenderer();
    private sealed virtual override nfloat Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer.get_MinimumHeight();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void Dispose(bool disposing);
    public virtual void Draw(CGRect rect);
    public virtual void LayoutSubviews();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual UIButton CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetBackground(Brush brush);
    private void SetControlPropertiesFromProxy();
    private void OnButtonTouchUpInside(object sender, EventArgs eventArgs);
    private void OnButtonTouchUpOutside(object sender, EventArgs eventArgs);
    private void OnButtonTouchDown(object sender, EventArgs eventArgs);
    private void UpdateFont();
    public sealed virtual void SetImage(UIImage image);
    public sealed virtual UIImageView GetImage();
    private void UpdateTextColor();
}
internal class Xamarin.Forms.Platform.iOS.CADisplayLinkTicker : Ticker {
    private BlockingCollection`1<Action> _queue;
    private CADisplayLink _link;
    internal static CADisplayLinkTicker Default { get; }
    internal static CADisplayLinkTicker get_Default();
    public void Invoke(Action action);
    protected virtual void DisableTimer();
    protected virtual void EnableTimer();
    private void StartThread();
    [CompilerGeneratedAttribute]
private void <EnableTimer>b__7_0();
}
public class Xamarin.Forms.Platform.iOS.CarouselPageRenderer : UIViewController {
    private bool _appeared;
    private Dictionary`2<Page, UIView> _containerMap;
    private bool _disposed;
    private EventTracker _events;
    private bool _ignoreNativeScrolling;
    private UIScrollView _scrollView;
    private VisualElementTracker _tracker;
    private Page _previousPage;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private IElementController ElementController { get; }
    protected CarouselPage Carousel { get; }
    private IPageController PageController { get; }
    protected int SelectedIndex { get; protected set; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private IElementController get_ElementController();
    protected CarouselPage get_Carousel();
    private IPageController get_PageController();
    protected int get_SelectedIndex();
    protected void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void ViewDidUnload();
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void Clear();
    private void InsertPage(ContentPage page, int index);
    private void OnDecelerationEnded(object sender, EventArgs eventArgs);
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void PositionChildren();
    private void RemovePage(ContentPage page, int index);
    private void Reset();
    private void ScrollToPage(int index, bool animated);
    private void UpdateBackground();
    private void UpdateCurrentPage(bool animated);
    public void RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__44_0(object o, int i, bool c);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__44_1(object o, int i);
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__50_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.CarouselTemplatedCell : TemplatedCell {
    public static NSString ReuseId;
    private CGSize _constrain;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
protected CarouselTemplatedCell(CGRect frame);
    private static CarouselTemplatedCell();
    public virtual void ConstrainTo(nfloat constant);
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
    protected virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
}
public class Xamarin.Forms.Platform.iOS.CarouselViewController : ItemsViewController`1<CarouselView> {
    protected CarouselView Carousel;
    private bool _initialPositionSet;
    private bool _viewInitialized;
    private List`1<View> _oldViews;
    private int _gotoPosition;
    private CGSize _size;
    protected bool IsHorizontal { get; }
    public CarouselViewController(CarouselView itemsView, ItemsViewLayout layout);
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ViewWillLayoutSubviews();
    public virtual void ViewDidLayoutSubviews();
    public virtual void DraggingStarted(UIScrollView scrollView);
    public virtual void DraggingEnded(UIScrollView scrollView, bool willDecelerate);
    public virtual void UpdateItemsSource();
    protected virtual bool get_IsHorizontal();
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    protected virtual string DetermineCellReuseId();
    protected virtual void RegisterViewTypes();
    protected virtual IItemsViewSource CreateItemsViewSource();
    protected void BoundsSizeChanged();
    internal void TearDown();
    internal void UpdateIsScrolling(bool isScrolling);
    private void CarouselViewScrolled(object sender, ItemsViewScrolledEventArgs e);
    private void CollectionItemsSourceChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void SubscribeCollectionItemsSourceChanged(IItemsViewSource itemsSource);
    private void UnsubscribeCollectionItemsSourceChanged(IItemsViewSource oldItemsSource);
    private void CarouselViewPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    private void SetPosition(int position);
    private void SetCurrentItem(int carouselPosition);
    private void UpdateFromCurrentItem();
    private void ScrollToPosition(int goToPosition, int carouselPosition, bool animate, bool forceScroll);
    private void UpdateFromPosition();
    private void UpdateInitialPosition();
    private void UpdateVisualStates();
}
public class Xamarin.Forms.Platform.iOS.CarouselViewDelegator : ItemsViewDelegator`2<CarouselView, CarouselViewController> {
    public CarouselViewDelegator(ItemsViewLayout itemsViewLayout, CarouselViewController itemsViewController);
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual void ScrollAnimationEnded(UIScrollView scrollView);
    public virtual void DecelerationEnded(UIScrollView scrollView);
    public virtual void DraggingStarted(UIScrollView scrollView);
    public virtual void DraggingEnded(UIScrollView scrollView, bool willDecelerate);
}
public class Xamarin.Forms.Platform.iOS.CarouselViewLayout : ItemsViewLayout {
    private CarouselView _carouselView;
    private ItemsLayout _itemsLayout;
    private Nullable`1<CGPoint> _pendingOffset;
    public CarouselViewLayout(ItemsLayout itemsLayout, CarouselView carouselView);
    public virtual bool ShouldInvalidateLayoutForBoundsChange(CGRect newBounds);
    public virtual void ConstrainTo(CGSize size);
    internal virtual void UpdateConstraints(CGSize size);
    public virtual nfloat GetMinimumInteritemSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual void PrepareForCollectionViewUpdates(UICollectionViewUpdateItem[] updateItems);
    public virtual void FinalizeCollectionViewUpdates();
}
public class Xamarin.Forms.Platform.iOS.CarouselViewRenderer : ItemsViewRenderer`2<CarouselView, CarouselViewController> {
    private CarouselView Carousel { get; }
    private CarouselView get_Carousel();
    protected virtual CarouselViewController CreateController(CarouselView newElement, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual ItemsViewLayout SelectLayout();
    protected virtual void SetUpNewElement(CarouselView newElement);
    protected virtual void TearDownOldElement(CarouselView oldElement);
    private void UpdateIsSwipeEnabled();
    private void UpdateIsBounceEnabled();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.CellExtensions : object {
    [ExtensionAttribute]
internal static NSIndexPath GetIndexPath(Cell self);
}
public class Xamarin.Forms.Platform.iOS.CellRenderer : object {
    private static BindableProperty RealCellProperty;
    private EventHandler _onForceUpdateSizeRequested;
    private PropertyChangedEventHandler _onPropertyChangedEventHandler;
    private UIColor _defaultCellBgColor;
    private static CellRenderer();
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    public virtual void SetAccessibility(UITableViewCell tableViewCell, Cell cell);
    public virtual void SetBackgroundColor(UITableViewCell tableViewCell, Cell cell, UIColor color);
    protected void UpdateBackground(UITableViewCell tableViewCell, Cell cell);
    protected void WireUpForceUpdateSizeRequested(ICellController cell, UITableViewCell nativeCell, UITableView tableView);
    private void Ncp_PropertyChanged(object sender, PropertyChangedEventArgs e);
    internal static UITableViewCell GetRealCell(BindableObject cell);
    internal static void SetRealCell(BindableObject cell, UITableViewCell renderer);
}
public class Xamarin.Forms.Platform.iOS.CellTableViewCell : UITableViewCell {
    private Cell _cell;
    public Action`2<object, PropertyChangedEventArgs> PropertyChanged;
    private bool _disposed;
    public Cell Cell { get; public set; }
    public Element Element { get; }
    public CellTableViewCell(UITableViewCellStyle style, string key);
    public Cell get_Cell();
    public void set_Cell(Cell value);
    public sealed virtual Element get_Element();
    public void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    internal static UITableViewCell GetNativeCell(UITableView tableView, Cell cell, bool recycleCells, string templateId);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.CheckBoxRenderer : CheckBoxRendererBase`1<FormsCheckBox> {
    protected virtual FormsCheckBox CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.CheckBoxRendererBase`1 : ViewRenderer`2<CheckBox, T> {
    private bool _disposed;
    protected float MinimumSize { get; }
    protected virtual float get_MinimumSize();
    public virtual void LayoutSubviews();
    protected virtual void SetAccessibilityLabel();
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected abstract virtual T CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void UpdateTintColor();
    private void OnControlCheckedChanged(object sender, EventArgs e);
    private void OnElementCheckedChanged(object sender, EventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
internal class Xamarin.Forms.Platform.iOS.ChildViewController : UIViewController {
    public virtual void ViewDidLayoutSubviews();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.CollectionViewExtensions : object {
    [ExtensionAttribute]
public static int GetCenteredIndex(UICollectionView collectionView);
}
public class Xamarin.Forms.Platform.iOS.CollectionViewRenderer : GroupableItemsViewRenderer`2<GroupableItemsView, GroupableItemsViewController`1<GroupableItemsView>> {
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ColorExtensions : object {
    internal static UIColor Black;
    internal static UIColor SeventyPercentGrey;
    internal static UIColor LabelColor { get; }
    internal static UIColor PlaceholderColor { get; }
    internal static UIColor SecondaryLabelColor { get; }
    internal static UIColor BackgroundColor { get; }
    internal static UIColor SeparatorColor { get; }
    internal static UIColor OpaqueSeparatorColor { get; }
    internal static UIColor GroupedBackground { get; }
    internal static UIColor AccentColor { get; }
    internal static UIColor Red { get; }
    internal static UIColor Gray { get; }
    internal static UIColor LightGray { get; }
    private static ColorExtensions();
    internal static UIColor get_LabelColor();
    internal static UIColor get_PlaceholderColor();
    internal static UIColor get_SecondaryLabelColor();
    internal static UIColor get_BackgroundColor();
    internal static UIColor get_SeparatorColor();
    internal static UIColor get_OpaqueSeparatorColor();
    internal static UIColor get_GroupedBackground();
    internal static UIColor get_AccentColor();
    internal static UIColor get_Red();
    internal static UIColor get_Gray();
    internal static UIColor get_LightGray();
    [ExtensionAttribute]
public static CGColor ToCGColor(Color color);
    public static UIColor FromPatternImageFromBundle(string bgImage);
    [ExtensionAttribute]
public static Color ToColor(UIColor color);
    [ExtensionAttribute]
public static UIColor ToUIColor(Color color);
    [ExtensionAttribute]
public static UIColor ToUIColor(Color color, Color defaultColor);
    [ExtensionAttribute]
public static UIColor ToUIColor(Color color, UIColor defaultColor);
}
internal class Xamarin.Forms.Platform.iOS.ContextActionsCell : UITableViewCell {
    public static string Key;
    private static UIImage DestructiveBackground;
    private static UIImage NormalBackground;
    private List`1<UIButton> _buttons;
    private List`1<MenuItem> _menuItems;
    private Cell _cell;
    private UIButton _moreButton;
    private UIScrollView _scroller;
    private UITableView _tableView;
    private bool _isDiposed;
    [CompilerGeneratedAttribute]
private UITableViewCell <ContentCell>k__BackingField;
    public UITableViewCell ContentCell { get; private set; }
    public bool IsOpen { get; }
    private ContextScrollViewDelegate ScrollDelegate { get; }
    private Element Xamarin.Forms.INativeElementView.Element { get; }
    private static ContextActionsCell();
    public ContextActionsCell(string templateId);
    [CompilerGeneratedAttribute]
public UITableViewCell get_ContentCell();
    [CompilerGeneratedAttribute]
private void set_ContentCell(UITableViewCell value);
    public bool get_IsOpen();
    private ContextScrollViewDelegate get_ScrollDelegate();
    private sealed virtual override Element Xamarin.Forms.INativeElementView.get_Element();
    public void Close();
    public virtual void LayoutSubviews();
    public void PrepareForDeselect();
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual void RemoveFromSuperview();
    public void Update(UITableView tableView, Cell cell, UITableViewCell nativeCell);
    protected virtual void Dispose(bool disposing);
    private void ActivateMore();
    private void CullButtons(nfloat acceptableTotalWidth, Boolean& needMoreButton, nfloat& largestButtonWidth);
    private UIButton GetButton(MenuItem item);
    private UIViewController GetController();
    private nfloat GetLargestWidth();
    private void OnButtonActivated(object sender, EventArgs e);
    private void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnContextItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnMenuItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ReloadRow();
    private void ReloadRowCore();
    private UIView SetupButtons(nfloat width, nfloat height);
    internal static void SetupSelection(UITableView table);
    [CompilerGeneratedAttribute]
private void <ReloadRow>b__39_0();
}
internal class Xamarin.Forms.Platform.iOS.ContextScrollViewDelegate : UIScrollViewDelegate {
    private nfloat _finalButtonSize;
    private UIView _backgroundView;
    private List`1<UIButton> _buttons;
    private UITapGestureRecognizer _closer;
    private UIView _container;
    private GlobalCloseContextGestureRecognizer _globalCloser;
    private bool _isDisposed;
    private static WeakReference`1<UIScrollView> s_scrollViewBeingScrolled;
    private UITableView _table;
    [CompilerGeneratedAttribute]
private nfloat <ButtonsWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <ClosedCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    public nfloat ButtonsWidth { get; }
    public Action ClosedCallback { get; public set; }
    public bool IsOpen { get; private set; }
    public ContextScrollViewDelegate(UIView container, List`1<UIButton> buttons, bool isOpen);
    [CompilerGeneratedAttribute]
public nfloat get_ButtonsWidth();
    [CompilerGeneratedAttribute]
public Action get_ClosedCallback();
    [CompilerGeneratedAttribute]
public void set_ClosedCallback(Action value);
    [CompilerGeneratedAttribute]
public bool get_IsOpen();
    [CompilerGeneratedAttribute]
private void set_IsOpen(bool value);
    public virtual void DraggingStarted(UIScrollView scrollView);
    public void PrepareForDeselect(UIScrollView scrollView);
    public virtual void Scrolled(UIScrollView scrollView);
    public void Unhook(UIScrollView scrollView);
    public virtual void WillEndDragging(UIScrollView scrollView, CGPoint velocity, CGPoint& targetContentOffset);
    private static bool ShouldIgnoreScrolling(UIScrollView scrollView);
    protected virtual void Dispose(bool disposing);
    private void ClearCloserRecognizer(ContextActionsCell cell);
    private ContextActionsCell GetContextCell(UIScrollView scrollView);
    private void RemoveHighlight(UIScrollView scrollView);
    private void RestoreHighlight(UIScrollView scrollView);
    private void SetButtonsShowing(bool show);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.CookieExtensions : object {
    [ExtensionAttribute]
public static Cookie ToCookie(NSHttpCookie nscookie, bool setDomain);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.DateExtensions : object {
    [ExtensionAttribute]
public static DateTime ToDateTime(NSDate date);
    [ExtensionAttribute]
public static NSDate ToNSDate(DateTime date);
}
public class Xamarin.Forms.Platform.iOS.DatePickerRenderer : DatePickerRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.DatePickerRendererBase`1 : ViewRenderer`2<DatePicker, TControl> {
    private UIDatePicker _picker;
    private UIColor _defaultTextColor;
    private bool _disposed;
    private bool _useLegacyColorManagement;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleValueChanged(object sender, EventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void UpdateDateFromModel(bool animate);
    private void UpdateElementDate();
    private void UpdateFlowDirection();
    protected internal virtual void UpdateFont();
    private void UpdateCharacterSpacing();
    private void UpdateMaximumDate();
    private void UpdateMinimumDate();
    protected internal virtual void UpdateTextColor();
    protected virtual void Dispose(bool disposing);
}
public abstract class Xamarin.Forms.Platform.iOS.DefaultCell : ItemsViewCell {
    [CompilerGeneratedAttribute]
private UILabel <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private NSLayoutConstraint <Constraint>k__BackingField;
    public UILabel Label { get; }
    protected NSLayoutConstraint Constraint { get; protected set; }
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
protected DefaultCell(CGRect frame);
    [CompilerGeneratedAttribute]
public UILabel get_Label();
    [CompilerGeneratedAttribute]
protected NSLayoutConstraint get_Constraint();
    [CompilerGeneratedAttribute]
protected void set_Constraint(NSLayoutConstraint value);
    public virtual void ConstrainTo(nfloat constant);
}
[PreserveAttribute]
internal class Xamarin.Forms.Platform.iOS.Deserializer : object {
    private static string PropertyStoreFile;
    public sealed virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    public sealed virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.DisposeHelpers : object {
    [ExtensionAttribute]
internal static void DisposeModalAndChildRenderers(Element view);
    [ExtensionAttribute]
internal static void DisposeRendererAndChildren(IVisualElementRenderer rendererToRemove);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.DoubleCollectionExtensions : object {
    [ExtensionAttribute]
public static nfloat[] ToArray(DoubleCollection doubleCollection);
}
internal class Xamarin.Forms.Platform.iOS.DragAndDropDelegate : NSObject {
    [ExportAttribute("dragInteraction:session:willEndWithOperation:")]
[PreserveAttribute]
public void SessionWillEnd(UIDragInteraction interaction, IUIDragSession session, UIDropOperation operation);
    public sealed virtual UIDragItem[] GetItemsForBeginningSession(UIDragInteraction interaction, IUIDragSession session);
    [ExportAttribute("dropInteraction:canHandleSession:")]
[PreserveAttribute]
public bool CanHandleSession(UIDropInteraction interaction, IUIDropSession session);
    [ExportAttribute("dropInteraction:sessionDidUpdate:")]
[PreserveAttribute]
public UIDropProposal SessionDidUpdate(UIDropInteraction interaction, IUIDropSession session);
    [ExportAttribute("dropInteraction:performDrop:")]
[PreserveAttribute]
public void PerformDrop(UIDropInteraction interaction, IUIDropSession session);
    private void SendEventArgs(Action`1<TRecognizer> func, View view);
    public UIDragItem[] HandleDragStarting(View element, IVisualElementRenderer renderer);
    private void HandleDropCompleted(View element);
    private bool HandleDragOver(View element, DataPackage dataPackage);
    private void HandleDrop(object sender, DataPackage datapackage);
}
public class Xamarin.Forms.Platform.iOS.EditorRenderer : EditorRendererBase`1<UITextView> {
    private UIColor _defaultPlaceholderColor;
    private UILabel _placeholderLabel;
    protected UITextView TextView { get; }
    protected virtual UITextView CreateNativeControl();
    protected virtual UITextView get_TextView();
    protected internal virtual void UpdateText();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdatePlaceholderText();
    protected internal virtual void UpdateCharacterSpacing();
    protected internal virtual void UpdatePlaceholderColor();
    private void CreatePlaceholderLabel();
}
public abstract class Xamarin.Forms.Platform.iOS.EditorRendererBase`1 : ViewRenderer`2<Editor, TControl> {
    private bool _disposed;
    private IUITextViewDelegate _pleaseDontCollectMeGarbageCollector;
    private IEditorController ElementController { get; }
    protected UITextView TextView { get; }
    private IEditorController get_ElementController();
    protected abstract virtual UITextView get_TextView();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected internal virtual void UpdateAutoSizeOption();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleChanged(object sender, EventArgs e);
    private void OnFrameChanged(object sender, EventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void UpdateEditable();
    protected internal virtual void UpdateFont();
    private void UpdateKeyboard();
    protected internal virtual void UpdateText();
    protected internal abstract virtual void UpdatePlaceholderText();
    protected internal abstract virtual void UpdatePlaceholderColor();
    protected internal abstract virtual void UpdateCharacterSpacing();
    private void UpdateTextAlignment();
    protected internal virtual void UpdateTextColor();
    private void UpdateMaxLength();
    protected virtual bool ShouldChangeText(UITextView textView, NSRange range, string text);
    private void UpdateReadOnly();
    private void UpdateUserInteraction();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__7_0(object o, EventArgs a);
}
internal static class Xamarin.Forms.Platform.iOS.EffectUtilities : object {
    public static void RegisterEffectControlProvider(IEffectControlProvider self, IElementController oldElement, IElementController newElement);
}
public class Xamarin.Forms.Platform.iOS.ElementChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TElement <NewElement>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <OldElement>k__BackingField;
    public TElement NewElement { get; private set; }
    public TElement OldElement { get; private set; }
    public ElementChangedEventArgs`1(TElement oldElement, TElement newElement);
    [CompilerGeneratedAttribute]
public TElement get_NewElement();
    [CompilerGeneratedAttribute]
private void set_NewElement(TElement value);
    [CompilerGeneratedAttribute]
public TElement get_OldElement();
    [CompilerGeneratedAttribute]
private void set_OldElement(TElement value);
}
public class Xamarin.Forms.Platform.iOS.ElementSelectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    public Element Element { get; public set; }
    [CompilerGeneratedAttribute]
public Element get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(Element value);
}
public class Xamarin.Forms.Platform.iOS.EllipseRenderer : ShapeRenderer`2<Ellipse, EllipseView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Ellipse> args);
}
public class Xamarin.Forms.Platform.iOS.EllipseView : ShapeView {
    private void UpdateShape();
}
[PreserveAttribute]
public class Xamarin.Forms.Platform.iOS.EmbeddedFontLoader : object {
    public sealed virtual ValueTuple`2<bool, string> LoadFont(EmbeddedFont font);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.EmptySource : object {
    public int GroupCount { get; }
    public int ItemCount { get; }
    public object Item { get; }
    public sealed virtual int get_GroupCount();
    public sealed virtual int get_ItemCount();
    public sealed virtual object get_Item(NSIndexPath indexPath);
    public sealed virtual int ItemCountInGroup(nint group);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Platform.iOS.EntryCellRenderer : CellRenderer {
    private static Color DefaultTextColor;
    private static EntryCellRenderer();
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    private static void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void OnKeyBoardDoneButtonPressed(object sender, EventArgs e);
    private static void OnTextFieldTextChanged(object sender, EventArgs eventArgs);
    private static void UpdateHorizontalTextAlignment(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateIsEnabled(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateKeyboard(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateLabel(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateLabelColor(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdatePlaceholder(EntryCellTableViewCell cell, EntryCell entryCell);
    private static void UpdateText(EntryCellTableViewCell cell, EntryCell entryCell);
}
public class Xamarin.Forms.Platform.iOS.EntryRenderer : EntryRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.EntryRendererBase`1 : ViewRenderer`2<Entry, TControl> {
    private UIColor _defaultTextColor;
    private Color _defaultPlaceholderColor;
    private UIColor _defaultCursorColor;
    private bool _useLegacyColorManagement;
    private bool _disposed;
    private IDisposable _selectedTextRangeObserver;
    private bool _nativeSelectionIsUpdating;
    private bool _cursorPositionChangePending;
    private bool _selectionLengthChangePending;
    private static int baseHeight;
    private static CGSize initialSize;
    private IElementController ElementController { get; }
    private static EntryRendererBase`1();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEditingBegan(object sender, EventArgs e);
    private void OnEditingChanged(object sender, EventArgs eventArgs);
    private void OnEditingEnded(object sender, EventArgs e);
    protected virtual bool OnShouldReturn(UITextField view);
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    protected virtual void UpdateColor();
    private void UpdateAdjustsFontSizeToFitWidth();
    protected virtual void UpdateFont();
    private void UpdateKeyboard();
    private void UpdatePassword();
    protected virtual void UpdatePlaceholder();
    protected virtual void UpdateAttributedPlaceholder(NSAttributedString nsAttributedString);
    private void UpdateText();
    private void UpdateCharacterSpacing();
    private void UpdateMaxLength();
    private bool ShouldChangeCharacters(UITextField textField, NSRange range, string replacementString);
    private void UpdateReturnType();
    private void UpdateCursorFromControl(NSObservedChange obj);
    private void UpdateCursorSelection();
    private UITextPosition GetSelectionEnd(int cursorPosition, UITextPosition start, int startOffset);
    private UITextPosition GetSelectionStart(int cursorPosition, Int32& startOffset);
    private void UpdateCursorColor();
    private void SetCursorPositionFromRenderer(int start);
    private void SetSelectionLengthFromRenderer(int selectionLength);
    private void UpdateIsReadOnly();
    private void UpdateClearButtonVisibility();
}
internal class Xamarin.Forms.Platform.iOS.EventedViewController : ChildViewController {
    private MasterView _masterView;
    [CompilerGeneratedAttribute]
private EventHandler _didAppear;
    [CompilerGeneratedAttribute]
private EventHandler _willDisappear;
    [CompilerGeneratedAttribute]
private void add__didAppear(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__didAppear(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__willDisappear(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__willDisappear(EventHandler value);
    public void add_DidAppear(EventHandler value);
    public void remove_DidAppear(EventHandler value);
    public void add_WillDisappear(EventHandler value);
    public void remove_WillDisappear(EventHandler value);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void LoadView();
}
public class Xamarin.Forms.Platform.iOS.EventTracker : object {
    private NotifyCollectionChangedEventHandler _collectionChangedHandler;
    private Dictionary`2<IGestureRecognizer, UIGestureRecognizer> _gestureRecognizers;
    private IVisualElementRenderer _renderer;
    private bool _disposed;
    private UIView _handler;
    private double _previousScale;
    private UITouchEventArgs _shouldReceiveTouch;
    private DragAndDropDelegate _dragAndDropDelegate;
    private ObservableCollection`1<IGestureRecognizer> ElementGestureRecognizers { get; }
    public EventTracker(IVisualElementRenderer renderer);
    private ObservableCollection`1<IGestureRecognizer> get_ElementGestureRecognizers();
    internal void Disconnect();
    public sealed virtual void Dispose();
    public void LoadEvents(UIView handler);
    private static IList`1<GestureElement> GetChildGestures(UIGestureRecognizer sender, WeakReference weakEventTracker, WeakReference weakRecognizer, EventTracker eventTracker, View view);
    private Action`1<UITapGestureRecognizer> CreateRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer, TapGestureRecognizer clickRecognizer);
    private Action`1<UITapGestureRecognizer> CreateChildRecognizerHandler(WeakReference weakEventTracker, WeakReference weakRecognizer);
    protected virtual UIGestureRecognizer GetNativeRecognizer(IGestureRecognizer recognizer);
    private UIPanGestureRecognizer CreatePanRecognizer(int numTouches, Action`1<UIPanGestureRecognizer> action);
    private UIPinchGestureRecognizer CreatePinchRecognizer(Action`1<UIPinchGestureRecognizer> action);
    private UISwipeGestureRecognizer CreateSwipeRecognizer(SwipeDirection direction, Action`1<SwipeDirection> action, int numFingers);
    private UITapGestureRecognizer CreateTapRecognizer(int numTaps, Action`1<UITapGestureRecognizer> action, int numFingers);
    private static bool ShouldRecognizeTapsTogether(UIGestureRecognizer gesture, UIGestureRecognizer other);
    private void LoadRecognizers();
    private bool ShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch);
    private void ModelGestureRecognizersOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <LoadRecognizers>b__23_0(IGestureRecognizer key);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.Extensions : object {
    [ExtensionAttribute]
public static void ApplyKeyboard(IUITextInput textInput, Keyboard keyboard);
    [ExtensionAttribute]
public static void ApplyKeyboard(IUITextInputTraits textInput, Keyboard keyboard);
    [ExtensionAttribute]
public static UIModalPresentationStyle ToNativeModalPresentationStyle(UIModalPresentationStyle style);
    [ExtensionAttribute]
internal static UISearchBarStyle ToNativeSearchBarStyle(UISearchBarStyle style);
    [ExtensionAttribute]
internal static UIReturnKeyType ToUIReturnKeyType(ReturnType returnType);
    [ExtensionAttribute]
internal static DeviceOrientation ToDeviceOrientation(UIDeviceOrientation orientation);
    [ExtensionAttribute]
internal static NSMutableAttributedString AddCharacterSpacing(NSAttributedString attributedString, string text, double characterSpacing);
    [ExtensionAttribute]
internal static bool HasCharacterAdjustment(NSMutableAttributedString mutableAttributedString);
    internal static void AddKerningAdjustment(NSMutableAttributedString mutableAttributedString, string text, double characterSpacing);
    [ExtensionAttribute]
internal static bool IsHorizontal(ButtonContentLayout layout);
}
public class Xamarin.Forms.Platform.iOS.FileImageSourceHandler : object {
    public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
    public sealed virtual Task`1<FormsCAKeyFrameAnimation> LoadImageAnimationAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.FlowDirectionExtensions : object {
    [ExtensionAttribute]
internal static FlowDirection ToFlowDirection(UIUserInterfaceLayoutDirection direction);
    [ExtensionAttribute]
internal static bool UpdateFlowDirection(UIView view, IVisualElementController controller);
    [ExtensionAttribute]
internal static void UpdateTextAlignment(UITextField control, IVisualElementController controller);
    [ExtensionAttribute]
internal static void UpdateTextAlignment(UITextView control, IVisualElementController controller);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.FontExtensions : object {
    private static string _defaultFontName;
    private static Dictionary`2<ToNativeFontFontKey, UIFont> ToUiFont;
    private static FontExtensions();
    [ExtensionAttribute]
public static UIFont ToUIFont(Font self);
    [ExtensionAttribute]
internal static UIFont ToUIFont(IFontElement element);
    private static UIFont _ToNativeFont(string family, float size, FontAttributes attributes);
    internal static string CleanseFontName(string fontName);
    [ExtensionAttribute]
internal static bool IsDefault(Span self);
    [ExtensionAttribute]
private static UIFont ToNativeFont(IFontElement element);
    [ExtensionAttribute]
private static UIFont ToNativeFont(Font self);
    private static UIFont ToNativeFont(string family, float size, FontAttributes attributes, Func`4<string, float, FontAttributes, UIFont> factory);
}
public class Xamarin.Forms.Platform.iOS.FontImageSourceHandler : object {
    private Color _defaultColor;
    public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.FormattedStringExtensions : object {
    [ExtensionAttribute]
public static NSAttributedString ToAttributed(Span span, Font defaultFont, Color defaultForegroundColor);
    [ExtensionAttribute]
public static NSAttributedString ToAttributed(FormattedString formattedString, Font defaultFont, Color defaultForegroundColor);
    [ExtensionAttribute]
internal static NSAttributedString ToAttributed(Span span, BindableObject owner, Color defaultForegroundColor, TextAlignment textAlignment, double lineHeight);
    [ExtensionAttribute]
internal static NSAttributedString ToAttributed(FormattedString formattedString, BindableObject owner, Color defaultForegroundColor, TextAlignment textAlignment, double lineHeight);
}
public class Xamarin.Forms.Platform.iOS.FormsApplicationDelegate : UIApplicationDelegate {
    private Application _application;
    private bool _isSuspended;
    private UIWindow _window;
    public UIWindow Window { get; public set; }
    public virtual UIWindow get_Window();
    public virtual void set_Window(UIWindow value);
    public virtual bool ContinueUserActivity(UIApplication application, NSUserActivity userActivity, UIApplicationRestorationHandler completionHandler);
    public virtual void DidEnterBackground(UIApplication uiApplication);
    public virtual bool FinishedLaunching(UIApplication uiApplication, NSDictionary launchOptions);
    public virtual void OnActivated(UIApplication uiApplication);
    public virtual void OnResignActivation(UIApplication uiApplication);
    public virtual void UserActivityUpdated(UIApplication application, NSUserActivity userActivity);
    public virtual void WillEnterForeground(UIApplication uiApplication);
    public virtual bool WillFinishLaunching(UIApplication uiApplication, NSDictionary launchOptions);
    public virtual void WillTerminate(UIApplication uiApplication);
    protected virtual void Dispose(bool disposing);
    protected void LoadApplication(Application application);
    private void ApplicationOnPropertyChanging(object sender, PropertyChangingEventArgs args);
    private void ApplicationOnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void CheckForAppLink(NSUserActivity userActivity);
    private void SetMainPage();
    private void UpdatingMainPage();
    private void UpdateMainPage();
}
public class Xamarin.Forms.Platform.iOS.FormsCAKeyFrameAnimation : CAKeyFrameAnimation {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
public class Xamarin.Forms.Platform.iOS.FormsCheckBox : UIButton {
    private static UIImage _checked;
    private static UIImage _unchecked;
    private static float _defaultSize;
    private static float _lineWidth;
    private Color _tintColor;
    private bool _isChecked;
    private bool _isEnabled;
    private float _minimumViewSize;
    public EventHandler CheckedChanged;
    private bool _disposed;
    private UIColor _checkBoxTintUIColor;
    internal float MinimumViewSize { get; internal set; }
    public bool IsChecked { get; public set; }
    public bool IsEnabled { get; public set; }
    public Color CheckBoxTintColor { get; public set; }
    private UIColor CheckBoxTintUIColor { get; private set; }
    public bool Enabled { get; public set; }
    internal float get_MinimumViewSize();
    internal void set_MinimumViewSize(float value);
    private void OnTouchUpInside(object sender, EventArgs e);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public Color get_CheckBoxTintColor();
    public void set_CheckBoxTintColor(Color value);
    private UIColor get_CheckBoxTintUIColor();
    private void set_CheckBoxTintUIColor(UIColor value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    protected virtual UIImage GetCheckBoximage();
    internal void UpdateDisplay();
    internal virtual UIBezierPath CreateBoxPath(CGRect backgroundRect);
    internal virtual UIBezierPath CreateCheckPath();
    internal virtual void DrawCheckMark(UIBezierPath path);
    internal virtual UIImage CreateCheckBox(UIImage check);
    internal UIImage CreateCheckMark();
    protected virtual void Dispose(bool disposing);
}
internal class Xamarin.Forms.Platform.iOS.FormsPageControl : UIPageControl {
    private static int DefaultIndicatorSize;
    [CompilerGeneratedAttribute]
private bool <IsSquare>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IndicatorSize>k__BackingField;
    public bool IsSquare { get; public set; }
    public double IndicatorSize { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSquare();
    [CompilerGeneratedAttribute]
public void set_IsSquare(bool value);
    [CompilerGeneratedAttribute]
public double get_IndicatorSize();
    [CompilerGeneratedAttribute]
public void set_IndicatorSize(double value);
    public virtual void LayoutSubviews();
}
public class Xamarin.Forms.Platform.iOS.FormsRefreshControl : UIRefreshControl {
    private bool _usingLargeTitles;
    public bool Hidden { get; public set; }
    public FormsRefreshControl(bool usingLargeTitles);
    public virtual bool get_Hidden();
    public virtual void set_Hidden(bool value);
    public virtual void BeginRefreshing();
}
public class Xamarin.Forms.Platform.iOS.FormsUIImageView : UIImageView {
    private bool _isDisposed;
    private static string AnimationLayerName;
    private FormsCAKeyFrameAnimation _animation;
    [CompilerGeneratedAttribute]
private EventHandler`1<CAAnimationStateEventArgs> AnimationStopped;
    public UIImage Image { get; public set; }
    public FormsCAKeyFrameAnimation Animation { get; public set; }
    public bool IsAnimating { get; }
    [CompilerGeneratedAttribute]
public void add_AnimationStopped(EventHandler`1<CAAnimationStateEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AnimationStopped(EventHandler`1<CAAnimationStateEventArgs> value);
    public virtual UIImage get_Image();
    public virtual void set_Image(UIImage value);
    public virtual CGSize SizeThatFits(CGSize size);
    public FormsCAKeyFrameAnimation get_Animation();
    public void set_Animation(FormsCAKeyFrameAnimation value);
    private void OnAnimationStopped(object sender, CAAnimationStateEventArgs e);
    public virtual bool get_IsAnimating();
    public virtual void StartAnimating();
    public virtual void StopAnimating();
    protected virtual void Dispose(bool disposing);
}
internal class Xamarin.Forms.Platform.iOS.FormsUITableViewController : UITableViewController {
    private ListView _list;
    private UIRefreshControl _refresh;
    private bool _refreshAdded;
    private bool _disposed;
    internal bool _usingLargeTitles;
    private bool _isRefreshing;
    private bool _isStartRefreshingPending;
    public FormsUITableViewController(ListView element, bool usingLargeTitles);
    public void UpdateIsRefreshing(bool refreshing);
    private void StartRefreshing();
    private void EndRefreshing();
    public void UpdatePullToRefreshEnabled(bool pullToRefreshEnabled);
    public void ForceRefreshing();
    public void UpdateShowHideRefresh(bool shouldHide);
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewWillLayoutSubviews();
    public void UpdateRefreshControlColor(UIColor color);
    protected virtual void Dispose(bool disposing);
    private void CheckContentSize();
    private void OnRefreshingChanged(object sender, EventArgs eventArgs);
    private void RemoveRefresh();
    private void UpdateContentOffset(nfloat offset, Action completed);
    [CompilerGeneratedAttribute]
private void <UpdateIsRefreshing>b__8_0();
}
public class Xamarin.Forms.Platform.iOS.FrameRenderer : VisualElementRenderer`1<Frame> {
    private UIView _actualView;
    private CGSize _previousSize;
    private bool _isDisposed;
    private UIView Xamarin.Forms.Platform.iOS.ITabStop.TabStop { get; }
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.ITabStop.get_TabStop();
    public virtual void AddSubview(UIView view);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Frame> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    public virtual void SetupLayer();
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.GeometryExtensions : object {
    [ExtensionAttribute]
public static PathData ToCGPath(Geometry geometry, Transform renderTransform);
}
public class Xamarin.Forms.Platform.iOS.GetDesiredSizeDelegate : MulticastDelegate {
    public GetDesiredSizeDelegate(object object, IntPtr method);
    public virtual Nullable`1<SizeRequest> Invoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint, AsyncCallback callback, object object);
    public virtual Nullable`1<SizeRequest> EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.iOS.GlobalCloseContextGestureRecognizer : UIGestureRecognizer {
    private UIScrollView _scrollView;
    public GlobalCloseContextGestureRecognizer(UIScrollView scrollView, Action activated);
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    public virtual void TouchesMoved(NSSet touches, UIEvent evt);
    protected virtual void Dispose(bool disposing);
    private bool OnShouldReceiveTouch(UIGestureRecognizer r, UITouch t);
}
public class Xamarin.Forms.Platform.iOS.GridViewLayout : ItemsViewLayout {
    private GridItemsLayout _itemsLayout;
    public CGSize CollectionViewContentSize { get; }
    public GridViewLayout(GridItemsLayout itemsLayout, ItemSizingStrategy itemSizingStrategy);
    protected virtual void HandlePropertyChanged(PropertyChangedEventArgs propertyChanged);
    public virtual void ConstrainTo(CGSize size);
    public virtual CGSize get_CollectionViewContentSize();
    public virtual UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect(CGRect rect);
    public virtual UICollectionViewLayoutInvalidationContext GetInvalidationContext(UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);
    public virtual nfloat GetMinimumInteritemSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    private void CenterAlignCellsInColumn(UICollectionViewLayoutAttributes preferredAttributes);
    private bool NeedsSingleItemHorizontalAlignmentAdjustment(UICollectionViewLayoutAttributes[] layoutAttributesForRectElements);
    private bool NeedsPartialColumnAdjustment(int section);
    private static nfloat ReduceSpacingToFitIfNeeded(nfloat available, nfloat requestedSpacing, int span);
}
public class Xamarin.Forms.Platform.iOS.GroupableItemsViewController`1 : SelectableItemsViewController`1<TItemsView> {
    private bool _isGrouped;
    private TemplatedCell _measurementCellTemplated;
    private DefaultCell _measurementCellDefault;
    private Action _scrollAnimationEndedCallback;
    public GroupableItemsViewController`1(TItemsView groupableItemsView, ItemsViewLayout layout);
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    protected virtual IItemsViewSource CreateItemsViewSource();
    public virtual void UpdateItemsSource();
    protected virtual void RegisterViewTypes();
    private void RegisterSupplementaryViews(UICollectionElementKindSection kind);
    public virtual UICollectionReusableView GetViewForSupplementaryElement(UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath);
    private void UpdateDefaultSupplementaryView(DefaultCell cell, NSString elementKind, NSIndexPath indexPath);
    private void UpdateTemplatedSupplementaryView(TemplatedCell cell, NSString elementKind, NSIndexPath indexPath);
    private string DetermineViewReuseId(NSString elementKind);
    private string DetermineViewReuseId(DataTemplate template);
    internal CGSize GetReferenceSizeForHeader(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    internal CGSize GetReferenceSizeForFooter(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    internal CGSize GetReferenceSizeForheaderOrFooter(UICollectionView collectionView, DataTemplate template, NSString elementKind, nint section);
    internal void SetScrollAnimationEndedCallback(Action callback);
    internal void HandleScrollAnimationEnded();
    private int GetLayoutSpanCount();
    internal UIEdgeInsets GetInsetForSection(ItemsViewLayout itemsViewLayout, UICollectionView collectionView, nint section);
    private CGSize MeasureTemplatedSupplementaryCell(NSString elementKind, nint section, NSString reuseId);
    private CGSize MeasureDefaultSupplementaryCell(NSString elementKind, nint section, NSString reuseId);
    private CGSize MeasureSupplementaryView(NSString elementKind, nint section);
}
public class Xamarin.Forms.Platform.iOS.GroupableItemsViewDelegator`2 : SelectableItemsViewDelegator`2<TItemsView, TViewController> {
    public GroupableItemsViewDelegator`2(ItemsViewLayout itemsViewLayout, TViewController itemsViewController);
    public virtual CGSize GetReferenceSizeForHeader(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual CGSize GetReferenceSizeForFooter(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual void ScrollAnimationEnded(UIScrollView scrollView);
    public virtual UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
}
public class Xamarin.Forms.Platform.iOS.GroupableItemsViewRenderer`2 : SelectableItemsViewRenderer`2<TItemsView, TViewController> {
    protected virtual TViewController CreateController(TItemsView itemsView, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void ScrollToRequested(object sender, ScrollToRequestEventArgs args);
    private bool WillNeedScrollAdjustment(ScrollToRequestEventArgs args);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object sender, ScrollToRequestEventArgs args);
}
internal class Xamarin.Forms.Platform.iOS.HeaderWrapperView : UITableViewHeaderFooterView {
    private UITableViewCell _tableViewCell;
    [CompilerGeneratedAttribute]
private Cell <Cell>k__BackingField;
    public Cell Cell { get; public set; }
    public HeaderWrapperView(string reuseIdentifier);
    [CompilerGeneratedAttribute]
public Cell get_Cell();
    [CompilerGeneratedAttribute]
public void set_Cell(Cell value);
    public void SetTableViewCell(UITableViewCell value);
    public virtual void LayoutSubviews();
}
internal abstract class Xamarin.Forms.Platform.iOS.HeightConstrainedTemplatedCell : TemplatedCell {
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public HeightConstrainedTemplatedCell(CGRect frame);
    public virtual void ConstrainTo(CGSize constraint);
    protected virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
}
internal class Xamarin.Forms.Platform.iOS.HorizontalCell : HeightConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public HorizontalCell(CGRect frame);
    private static HorizontalCell();
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.HorizontalDefaultCell : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public HorizontalDefaultCell(CGRect frame);
    private static HorizontalDefaultCell();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.HorizontalDefaultSupplementalView : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public HorizontalDefaultSupplementalView(CGRect frame);
    private static HorizontalDefaultSupplementalView();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.HorizontalSupplementaryView : HeightConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public HorizontalSupplementaryView(CGRect frame);
    private static HorizontalSupplementaryView();
    public virtual CGSize Measure();
}
internal interface Xamarin.Forms.Platform.iOS.IAccessibilityElementsController {
    public abstract virtual List`1<NSObject> GetAccessibilityElements();
}
public interface Xamarin.Forms.Platform.iOS.IAnimationSourceHandler {
    public abstract virtual Task`1<FormsCAKeyFrameAnimation> LoadImageAnimationAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public interface Xamarin.Forms.Platform.iOS.IButtonLayoutRenderer {
    public UIButton Control { get; }
    public Button Element { get; }
    public IImageVisualElementRenderer ImageVisualElementRenderer { get; }
    public nfloat MinimumHeight { get; }
    public abstract virtual UIButton get_Control();
    public abstract virtual Button get_Element();
    public abstract virtual IImageVisualElementRenderer get_ImageVisualElementRenderer();
    public abstract virtual nfloat get_MinimumHeight();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<Button>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<Button>> value);
}
internal interface Xamarin.Forms.Platform.iOS.IDisconnectable {
    public abstract virtual void Disconnect();
}
internal interface Xamarin.Forms.Platform.iOS.IFormsUITextView {
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameChanged(EventHandler value);
}
public interface Xamarin.Forms.Platform.iOS.IImageSourceHandler {
    public abstract virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public interface Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer {
    public bool IsDisposed { get; }
    public abstract virtual void SetImage(UIImage image);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual UIImageView GetImage();
}
[DefaultMemberAttribute("Item")]
public interface Xamarin.Forms.Platform.iOS.IItemsViewSource {
    public int ItemCount { get; }
    public int GroupCount { get; }
    public object Item { get; }
    public abstract virtual int get_ItemCount();
    public abstract virtual int ItemCountInGroup(nint group);
    public abstract virtual int get_GroupCount();
    public abstract virtual object get_Item(NSIndexPath indexPath);
    public abstract virtual object Group(NSIndexPath indexPath);
    public abstract virtual NSIndexPath GetIndexForItem(object item);
}
internal class Xamarin.Forms.Platform.iOS.ImageAnimationHelper : object {
    public static FormsCAKeyFrameAnimation CreateAnimationFromCGImageSource(CGImageSource imageSource);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageAnimationHelper/<CreateAnimationFromStreamImageSourceAsync>d__2")]
public static Task`1<FormsCAKeyFrameAnimation> CreateAnimationFromStreamImageSourceAsync(StreamImageSource imageSource, CancellationToken cancelationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageAnimationHelper/<CreateAnimationFromUriImageSourceAsync>d__3")]
public static Task`1<FormsCAKeyFrameAnimation> CreateAnimationFromUriImageSourceAsync(UriImageSource imageSource, CancellationToken cancelationToken);
    public static FormsCAKeyFrameAnimation CreateAnimationFromFileImageSource(FileImageSource imageSource);
}
public class Xamarin.Forms.Platform.iOS.ImageButtonRenderer : ViewRenderer`2<ImageButton, UIButton> {
    private bool _isDisposed;
    private nfloat _minimumButtonHeight;
    private bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.IsDisposed { get; }
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageButtonRenderer/<OnElementPropertyChanged>d__5")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageButtonRenderer/<OnElementChanged>d__6")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageButton> e);
    private void UpdatePadding(UIButton button);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageButtonRenderer/<UpdateImage>d__8")]
private Task UpdateImage();
    protected virtual UIButton CreateNativeControl();
    protected virtual void SetAccessibilityLabel();
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.get_IsDisposed();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.SetImage(UIImage image);
    private sealed virtual override UIImageView Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.GetImage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(ElementChangedEventArgs`1<ImageButton> e);
}
public class Xamarin.Forms.Platform.iOS.ImageCellRenderer : TextCellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    protected virtual void HandleCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageCellRenderer/<SetImage>d__3")]
private void SetImage(ImageCell cell, CellTableViewCell target);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ImageElementManager : object {
    public static void Init(IImageVisualElementRenderer renderer);
    public static void Dispose(IImageVisualElementRenderer renderer);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<StartStopAnimation>d__2")]
private static Task StartStopAnimation(IImageVisualElementRenderer renderer);
    private static void OnControlChanged(object sender, EventArgs e);
    private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<OnElementPropertyChanged>d__5")]
private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public static void SetAspect(IImageVisualElementRenderer renderer, IImageElement imageElement);
    public static void SetOpacity(IImageVisualElementRenderer renderer, IImageElement imageElement);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<SetImage>d__8")]
public static Task SetImage(IImageVisualElementRenderer renderer, IImageElement imageElement, Image oldElement);
    private static void OnAnimationStopped(object sender, CAAnimationStateEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<GetNativeImageAsync>d__10")]
[ExtensionAttribute]
internal static Task`1<UIImage> GetNativeImageAsync(ImageSource source, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IShellContext shellContext, BindableObject bindable, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IVisualElementRenderer renderer, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<ApplyNativeImageAsync>d__13")]
[ExtensionAttribute]
internal static Task ApplyNativeImageAsync(IVisualElementRenderer renderer, BindableObject bindable, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageElementManager/<ApplyNativeImageAsync>d__14")]
[ExtensionAttribute]
internal static Task ApplyNativeImageAsync(BindableObject bindable, BindableProperty imageSourceProperty, Action`1<UIImage> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ImageExtensions : object {
    [ExtensionAttribute]
public static UIViewContentMode ToUIViewContentMode(Aspect aspect);
}
public class Xamarin.Forms.Platform.iOS.ImageLoaderSourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageLoaderSourceHandler/<LoadImageAsync>d__1")]
public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageLoaderSourceHandler/<LoadImageAnimationAsync>d__2")]
public sealed virtual Task`1<FormsCAKeyFrameAnimation> LoadImageAnimationAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.iOS.ImageRenderer : ViewRenderer`2<Image, FormsUIImageView> {
    private bool _isDisposed;
    private bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.IsDisposed { get; }
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<OnElementChanged>d__3")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<OnElementPropertyChanged>d__4")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<TrySetImage>d__5")]
protected virtual Task TrySetImage(Image previous);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ImageRenderer/<SetImage>d__6")]
protected Task SetImage(Image oldElement);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.SetImage(UIImage image);
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.get_IsDisposed();
    private sealed virtual override UIImageView Xamarin.Forms.Platform.iOS.IImageVisualElementRenderer.GetImage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Image> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.IndexPathExtensions : object {
    [ExtensionAttribute]
public static bool IsLessThanOrEqualToPath(NSIndexPath path, NSIndexPath otherPath);
    [ExtensionAttribute]
public static NSIndexPath FindFirst(NSIndexPath[] paths);
}
public class Xamarin.Forms.Platform.iOS.IndicatorViewRenderer : ViewRenderer`2<IndicatorView, UIView> {
    private UIColor _defaultPagesIndicatorTintColor;
    private UIColor _defaultCurrentPagesIndicatorTintColor;
    private bool _disposed;
    private bool _updatingPosition;
    private FormsPageControl UIPager { get; }
    public UIView View { get; }
    private FormsPageControl get_UIPager();
    public UIView get_View();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<IndicatorView> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual UIView CreateNativeControl();
    private void UpdateControl();
    private void ClearIndicators();
    private void UpdateIndicator();
    private void UpdateIndicatorShape();
    private void UpdateIndicatorSize();
    private void UpdateIndicatorTemplate();
    private void UIPagerValueChanged(object sender, EventArgs e);
    private void UpdateCurrentPage();
    private void UpdatePages();
    private void UpdateHidesForSinglePage();
    private void UpdatePagesIndicatorTintColor();
    private void UpdateCurrentPagesIndicatorTintColor();
    private void UpdateMaximumVisible();
    private int GetMaximumVisible();
}
internal class Xamarin.Forms.Platform.iOS.iOS7ButtonContainer : UIView {
    private nfloat _buttonWidth;
    public iOS7ButtonContainer(nfloat buttonWidth);
    public virtual void LayoutSubviews();
}
public class Xamarin.Forms.Platform.iOS.IOSAppIndexingProvider : object {
    public IAppLinks AppLinks { get; }
    public sealed virtual IAppLinks get_AppLinks();
}
internal class Xamarin.Forms.Platform.iOS.IOSAppLinks : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<DeregisterLink>d__0")]
public sealed virtual void DeregisterLink(IAppLinkEntry appLink);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<DeregisterLink>d__1")]
public sealed virtual void DeregisterLink(Uri uri);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<RegisterLink>d__2")]
public sealed virtual void RegisterLink(IAppLinkEntry appLink);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<DeregisterAll>d__3")]
public void DeregisterAll();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<AddLinkAsync>d__4")]
private static Task AddLinkAsync(IAppLinkEntry deepLinkUri);
    private static Task`1<bool> ClearIndexedDataAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.IOSAppLinks/<GetAttributeSet>d__6")]
private static Task`1<CSSearchableItemAttributeSet> GetAttributeSet(IAppLinkEntry deepLinkUri, string contentType, string id);
    private static NSMutableDictionary GetUserInfoForActivity(IAppLinkEntry deepLinkUri);
    private static Task`1<bool> IndexItemAsync(CSSearchableItem searchItem);
    private static Task`1<bool> RemoveLinkAsync(string identifier);
    private static void TryGetValues(IAppLinkEntry deepLinkUri, String& contentType, String& associatedWebPage, Boolean& shouldAddToPublicIndex);
}
internal class Xamarin.Forms.Platform.iOS.IOSDeviceInfo : DeviceInfo {
    private Size _pixelScreenSize;
    private Size _scaledScreenSize;
    private double _scalingFactor;
    private bool _disposed;
    private NSObject _notification;
    public Size PixelScreenSize { get; }
    public Size ScaledScreenSize { get; }
    public double ScalingFactor { get; }
    public virtual Size get_PixelScreenSize();
    public virtual Size get_ScaledScreenSize();
    public virtual double get_ScalingFactor();
    private void UpdateScreenSize();
    private void OrientationChanged(object sender, NSNotificationEventArgs args);
    protected virtual void Dispose(bool disposing);
}
public interface Xamarin.Forms.Platform.iOS.IShellContext {
    public bool AllowFlyoutGesture { get; }
    public IShellItemRenderer CurrentShellItemRenderer { get; }
    public Shell Shell { get; }
    public abstract virtual bool get_AllowFlyoutGesture();
    public abstract virtual IShellItemRenderer get_CurrentShellItemRenderer();
    public abstract virtual Shell get_Shell();
    public abstract virtual IShellPageRendererTracker CreatePageRendererTracker();
    public abstract virtual IShellFlyoutContentRenderer CreateShellFlyoutContentRenderer();
    public abstract virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection shellSection);
    public abstract virtual IShellNavBarAppearanceTracker CreateNavBarAppearanceTracker();
    public abstract virtual IShellTabBarAppearanceTracker CreateTabBarAppearanceTracker();
    public abstract virtual IShellSearchResultsRenderer CreateShellSearchResultsRenderer();
}
public interface Xamarin.Forms.Platform.iOS.IShellFlyoutContentRenderer {
    public UIViewController ViewController { get; }
    public abstract virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillDisappear(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillDisappear(EventHandler value);
}
public interface Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer {
    public UIViewController ViewController { get; }
    public UIView View { get; }
    public abstract virtual UIViewController get_ViewController();
    public abstract virtual UIView get_View();
    public abstract virtual void AttachFlyout(IShellContext context, UIViewController content);
}
public interface Xamarin.Forms.Platform.iOS.IShellFlyoutTransition {
    public abstract virtual void LayoutViews(CGRect bounds, nfloat openPercent, UIView flyout, UIView shell, FlyoutBehavior behavior);
}
public interface Xamarin.Forms.Platform.iOS.IShellItemRenderer {
    public ShellItem ShellItem { get; public set; }
    public UIViewController ViewController { get; }
    public abstract virtual ShellItem get_ShellItem();
    public abstract virtual void set_ShellItem(ShellItem value);
    public abstract virtual UIViewController get_ViewController();
}
public interface Xamarin.Forms.Platform.iOS.IShellItemTransition {
    public abstract virtual Task Transition(IShellItemRenderer oldRenderer, IShellItemRenderer newRenderer);
}
public interface Xamarin.Forms.Platform.iOS.IShellNavBarAppearanceTracker {
    public abstract virtual void ResetAppearance(UINavigationController controller);
    public abstract virtual void SetAppearance(UINavigationController controller, ShellAppearance appearance);
    public abstract virtual void UpdateLayout(UINavigationController controller);
    public abstract virtual void SetHasShadow(UINavigationController controller, bool hasShadow);
}
public interface Xamarin.Forms.Platform.iOS.IShellPageRendererTracker {
    public bool IsRootPage { get; public set; }
    public UIViewController ViewController { get; public set; }
    public Page Page { get; public set; }
    public abstract virtual bool get_IsRootPage();
    public abstract virtual void set_IsRootPage(bool value);
    public abstract virtual UIViewController get_ViewController();
    public abstract virtual void set_ViewController(UIViewController value);
    public abstract virtual Page get_Page();
    public abstract virtual void set_Page(Page value);
}
public interface Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer {
    public UIViewController ViewController { get; }
    public SearchHandler SearchHandler { get; public set; }
    public abstract virtual UIViewController get_ViewController();
    public abstract virtual SearchHandler get_SearchHandler();
    public abstract virtual void set_SearchHandler(SearchHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemSelected(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemSelected(EventHandler`1<object> value);
}
public interface Xamarin.Forms.Platform.iOS.IShellSectionRenderer {
    public bool IsInMoreTab { get; public set; }
    public ShellSection ShellSection { get; public set; }
    public UIViewController ViewController { get; }
    public abstract virtual bool get_IsInMoreTab();
    public abstract virtual void set_IsInMoreTab(bool value);
    public abstract virtual ShellSection get_ShellSection();
    public abstract virtual void set_ShellSection(ShellSection value);
    public abstract virtual UIViewController get_ViewController();
}
public interface Xamarin.Forms.Platform.iOS.IShellSectionRootHeader {
    public UIViewController ViewController { get; }
    public ShellSection ShellSection { get; public set; }
    public abstract virtual UIViewController get_ViewController();
    public abstract virtual ShellSection get_ShellSection();
    public abstract virtual void set_ShellSection(ShellSection value);
}
public interface Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer {
    public bool ShowNavBar { get; }
    public UIViewController ViewController { get; }
    public abstract virtual bool get_ShowNavBar();
    public abstract virtual UIViewController get_ViewController();
}
public interface Xamarin.Forms.Platform.iOS.IShellTabBarAppearanceTracker {
    public abstract virtual void ResetAppearance(UITabBarController controller);
    public abstract virtual void SetAppearance(UITabBarController controller, ShellAppearance appearance);
    public abstract virtual void UpdateLayout(UITabBarController controller);
}
public interface Xamarin.Forms.Platform.iOS.ITabStop {
    public UIView TabStop { get; }
    public abstract virtual UIView get_TabStop();
}
internal static class Xamarin.Forms.Platform.iOS.ItemsSourceFactory : object {
    public static IItemsViewSource Create(IEnumerable itemsSource, UICollectionViewController collectionViewController);
    public static IItemsViewSource CreateGrouped(IEnumerable itemsSource, UICollectionViewController collectionViewController);
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewCell : UICollectionViewCell {
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
protected ItemsViewCell(CGRect frame);
    protected void InitializeContentConstraints(UIView nativeView);
    public abstract virtual void ConstrainTo(nfloat constant);
    public abstract virtual void ConstrainTo(CGSize constraint);
    public abstract virtual CGSize Measure();
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewController`1 : UICollectionViewController {
    public static int EmptyTag;
    [CompilerGeneratedAttribute]
private IItemsViewSource <ItemsSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TItemsView <ItemsView>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemsViewLayout <ItemsViewLayout>k__BackingField;
    private bool _initialized;
    private bool _isEmpty;
    private bool _emptyViewDisplayed;
    private bool _disposed;
    private UIView _emptyUIView;
    private VisualElement _emptyViewFormsElement;
    [CompilerGeneratedAttribute]
private UICollectionViewDelegateFlowLayout <Delegator>k__BackingField;
    public IItemsViewSource ItemsSource { get; protected set; }
    public TItemsView ItemsView { get; }
    protected ItemsViewLayout ItemsViewLayout { get; protected set; }
    protected UICollectionViewDelegateFlowLayout Delegator { get; protected set; }
    protected bool IsHorizontal { get; }
    protected ItemsViewController`1(TItemsView itemsView, ItemsViewLayout layout);
    [CompilerGeneratedAttribute]
public IItemsViewSource get_ItemsSource();
    [CompilerGeneratedAttribute]
protected void set_ItemsSource(IItemsViewSource value);
    [CompilerGeneratedAttribute]
public TItemsView get_ItemsView();
    [CompilerGeneratedAttribute]
protected ItemsViewLayout get_ItemsViewLayout();
    [CompilerGeneratedAttribute]
protected void set_ItemsViewLayout(ItemsViewLayout value);
    [CompilerGeneratedAttribute]
protected UICollectionViewDelegateFlowLayout get_Delegator();
    [CompilerGeneratedAttribute]
protected void set_Delegator(UICollectionViewDelegateFlowLayout value);
    public void UpdateLayout(ItemsViewLayout newLayout);
    protected virtual void Dispose(bool disposing);
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual nint GetItemsCount(UICollectionView collectionView, nint section);
    private void CheckForEmptySource();
    public virtual void ViewDidLoad();
    public virtual void ViewWillLayoutSubviews();
    private void EnsureLayoutInitialized();
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    protected virtual IItemsViewSource CreateItemsViewSource();
    public virtual void UpdateItemsSource();
    public virtual nint NumberOfSections(UICollectionView collectionView);
    protected virtual void UpdateDefaultCell(DefaultCell cell, NSIndexPath indexPath);
    protected virtual void UpdateTemplatedCell(TemplatedCell cell, NSIndexPath indexPath);
    public virtual NSIndexPath GetIndexForItem(object item);
    protected object GetItemAtIndex(NSIndexPath index);
    private void CellContentSizeChanged(object sender, EventArgs e);
    protected virtual string DetermineCellReuseId();
    private UICollectionViewCell GetPrototype();
    protected virtual void RegisterViewTypes();
    protected abstract virtual bool get_IsHorizontal();
    internal void UpdateEmptyView();
    protected virtual CGRect DetermineEmptyViewFrame();
    private void LayoutEmptyView();
    protected void RemeasureLayout(VisualElement formsElement);
    protected void OnFormsElementMeasureInvalidated(object sender, EventArgs e);
    protected virtual void HandleFormsElementMeasureInvalidated(VisualElement formsElement);
    internal void UpdateView(object view, DataTemplate viewTemplate, UIView& uiView, VisualElement& formsElement);
    private void UpdateEmptyViewVisibility(bool isEmpty);
    private TemplatedCell CreateAppropriateCellForLayout();
    public TemplatedCell CreateMeasurementCell(NSIndexPath indexPath);
}
public class Xamarin.Forms.Platform.iOS.ItemsViewDelegator`2 : UICollectionViewDelegateFlowLayout {
    [CompilerGeneratedAttribute]
private ItemsViewLayout <ItemsViewLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private TViewController <ViewController>k__BackingField;
    protected float PreviousHorizontalOffset;
    protected float PreviousVerticalOffset;
    public ItemsViewLayout ItemsViewLayout { get; }
    public TViewController ViewController { get; }
    public ItemsViewDelegator`2(ItemsViewLayout itemsViewLayout, TViewController itemsViewController);
    [CompilerGeneratedAttribute]
public ItemsViewLayout get_ItemsViewLayout();
    [CompilerGeneratedAttribute]
public TViewController get_ViewController();
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumInteritemSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumLineSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual void CellDisplayingEnded(UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewLayout : UICollectionViewFlowLayout {
    private ItemsLayout _itemsLayout;
    private bool _disposed;
    private bool _adjustContentOffset;
    private CGSize _adjustmentSize0;
    private CGSize _adjustmentSize1;
    private CGSize _currentSize;
    [CompilerGeneratedAttribute]
private ItemsUpdatingScrollMode <ItemsUpdatingScrollMode>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <ConstrainedDimension>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<UICollectionViewCell> <GetPrototype>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemSizingStrategy <ItemSizingStrategy>k__BackingField;
    public ItemsUpdatingScrollMode ItemsUpdatingScrollMode { get; public set; }
    public nfloat ConstrainedDimension { get; public set; }
    public Func`1<UICollectionViewCell> GetPrototype { get; public set; }
    internal ItemSizingStrategy ItemSizingStrategy { get; private set; }
    public bool FlipsHorizontallyInOppositeLayoutDirection { get; }
    protected ItemsViewLayout(ItemsLayout itemsLayout, ItemSizingStrategy itemSizingStrategy);
    [CompilerGeneratedAttribute]
public ItemsUpdatingScrollMode get_ItemsUpdatingScrollMode();
    [CompilerGeneratedAttribute]
public void set_ItemsUpdatingScrollMode(ItemsUpdatingScrollMode value);
    [CompilerGeneratedAttribute]
public nfloat get_ConstrainedDimension();
    [CompilerGeneratedAttribute]
public void set_ConstrainedDimension(nfloat value);
    [CompilerGeneratedAttribute]
public Func`1<UICollectionViewCell> get_GetPrototype();
    [CompilerGeneratedAttribute]
public void set_GetPrototype(Func`1<UICollectionViewCell> value);
    [CompilerGeneratedAttribute]
internal ItemSizingStrategy get_ItemSizingStrategy();
    [CompilerGeneratedAttribute]
private void set_ItemSizingStrategy(ItemSizingStrategy value);
    public virtual bool get_FlipsHorizontallyInOppositeLayoutDirection();
    protected virtual void Dispose(bool disposing);
    private void LayoutOnPropertyChanged(object sender, PropertyChangedEventArgs propertyChanged);
    protected virtual void HandlePropertyChanged(PropertyChangedEventArgs propertyChanged);
    internal virtual void UpdateConstraints(CGSize size);
    internal void SetInitialConstraints(CGSize size);
    public abstract virtual void ConstrainTo(CGSize size);
    public virtual UIEdgeInsets GetInsetForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumInteritemSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public virtual nfloat GetMinimumLineSpacingForSection(UICollectionView collectionView, UICollectionViewLayout layout, nint section);
    public void PrepareCellForLayout(ItemsViewCell cell);
    public virtual bool ShouldInvalidateLayout(UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);
    protected void DetermineCellSize();
    private void Initialize(UICollectionViewScrollDirection scrollDirection);
    protected void UpdateCellConstraints();
    private void PrepareCellsForLayout(UICollectionReusableView[] cells);
    public virtual CGPoint TargetContentOffset(CGPoint proposedContentOffset, CGPoint scrollingVelocity);
    private CGPoint ScrollSingle(SnapPointsAlignment alignment, CGPoint proposedContentOffset, CGPoint scrollingVelocity);
    protected virtual void UpdateItemSpacing();
    public virtual UICollectionViewLayoutInvalidationContext GetInvalidationContext(UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);
    public virtual void PrepareLayout();
    public virtual void PrepareForCollectionViewUpdates(UICollectionViewUpdateItem[] updateItems);
    public virtual CGPoint TargetContentOffsetForProposedContentOffset(CGPoint proposedContentOffset);
    public virtual void FinalizeCollectionViewUpdates();
    private void TrackOffsetAdjustment();
    private CGSize ComputeOffsetAdjustment();
    private static bool UpdateWillShiftVisibleItems(UICollectionView collectionView, UICollectionViewUpdateItem[] updateItems);
    private static void ForceScrollToLastItem(UICollectionView collectionView, ItemsLayout itemsLayout);
    public virtual bool ShouldInvalidateLayoutForBoundsChange(CGRect newBounds);
}
public abstract class Xamarin.Forms.Platform.iOS.ItemsViewRenderer`2 : ViewRenderer`2<TItemsView, UIView> {
    private ItemsViewLayout _layout;
    private bool _disposed;
    private Nullable`1<bool> _defaultHorizontalScrollVisibility;
    private Nullable`1<bool> _defaultVerticalScrollVisibility;
    [CompilerGeneratedAttribute]
private TViewController <Controller>k__BackingField;
    protected TItemsView ItemsView { get; }
    public UIViewController ViewController { get; }
    protected TViewController Controller { get; private set; }
    protected TItemsView get_ItemsView();
    public virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
protected TViewController get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(TViewController value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TItemsView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected abstract virtual ItemsViewLayout SelectLayout();
    protected virtual void TearDownOldElement(TItemsView oldElement);
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual void UpdateLayout();
    protected virtual void UpdateItemSizingStrategy();
    protected virtual void UpdateItemsUpdatingScrollMode();
    protected virtual void UpdateFlowDirection();
    protected virtual void UpdateItemsSource();
    protected abstract virtual TViewController CreateController(TItemsView newElement, ItemsViewLayout layout);
    private NSIndexPath DetermineIndex(ScrollToRequestEventArgs args);
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    protected virtual void ScrollToRequested(object sender, ScrollToRequestEventArgs args);
    protected virtual void Dispose(bool disposing);
    private bool IsIndexPathValid(NSIndexPath indexPath);
}
public interface Xamarin.Forms.Platform.iOS.IVisualElementRenderer {
    public VisualElement Element { get; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public abstract virtual VisualElement get_Element();
    public abstract virtual UIView get_NativeView();
    public abstract virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public abstract virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public abstract virtual void SetElement(VisualElement element);
    public abstract virtual void SetElementSize(Size size);
}
public interface Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer {
    public UIView Control { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanged(EventHandler value);
    public abstract virtual UIView get_Control();
}
internal class Xamarin.Forms.Platform.iOS.KeyboardInsetTracker : object {
    private Func`1<UIWindow> _fetchWindow;
    private Action`1<CGPoint> _setContentOffset;
    private Action`1<UIEdgeInsets> _setInsetAction;
    private UIScrollView _targetView;
    private bool _disposed;
    private UIEdgeInsets _currentInset;
    private CGRect _lastKeyboardRect;
    private ShellScrollViewTracker _shellScrollViewTracker;
    public KeyboardInsetTracker(UIScrollView targetView, Func`1<UIWindow> fetchWindow, Action`1<UIEdgeInsets> setInsetAction);
    public KeyboardInsetTracker(UIScrollView targetView, Func`1<UIWindow> fetchWindow, Action`1<UIEdgeInsets> setInsetAction, Action`1<CGPoint> setContentOffset);
    public KeyboardInsetTracker(UIScrollView targetView, Func`1<UIWindow> fetchWindow, Action`1<UIEdgeInsets> setInsetAction, Action`1<CGPoint> setContentOffset, IVisualElementRenderer renderer);
    public sealed virtual void Dispose();
    internal void UpdateInsets();
    public void OnLayoutSubviews();
    private void OnKeyboardHidden(object sender, UIKeyboardEventArgs args);
    private void OnKeyboardShown(object sender, UIKeyboardEventArgs args);
}
internal static class Xamarin.Forms.Platform.iOS.KeyboardObserver : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<UIKeyboardEventArgs> KeyboardWillHide;
    [CompilerGeneratedAttribute]
private static EventHandler`1<UIKeyboardEventArgs> KeyboardWillShow;
    private static KeyboardObserver();
    [CompilerGeneratedAttribute]
public static void add_KeyboardWillHide(EventHandler`1<UIKeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_KeyboardWillHide(EventHandler`1<UIKeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_KeyboardWillShow(EventHandler`1<UIKeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_KeyboardWillShow(EventHandler`1<UIKeyboardEventArgs> value);
    private static void OnKeyboardHidden(object sender, UIKeyboardEventArgs args);
    private static void OnKeyboardShown(object sender, UIKeyboardEventArgs args);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.LabelExtensions : object {
    [ExtensionAttribute]
public static void RecalculateSpanPositions(UILabel control, Label element);
    private static CGRect GetCharacterBounds(NSRange characterRange, NSLayoutManager layoutManager, NSTextContainer textContainer);
    [ExtensionAttribute]
private static double FindDefaultLineHeight(UILabel control, int start, int length);
}
public class Xamarin.Forms.Platform.iOS.LabelRenderer : ViewRenderer`2<Label, UILabel> {
    private SizeRequest _perfectSize;
    private bool _perfectSizeValid;
    private FormattedString _formatted;
    private static HashSet`1<string> s_perfectSizeSet;
    private bool IsTextFormatted { get; }
    private static LabelRenderer();
    private bool get_IsTextFormatted();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual UILabel CreateNativeControl();
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void UpdateTextDecorations();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    private void UpdateHorizontalTextAlignment();
    private void UpdateLineBreakMode();
    private void UpdateCharacterSpacing();
    private void UpdateText();
    private void UpdateTextPlainText();
    private void UpdateFormattedText();
    private void UpdateTextHtml();
    protected virtual NSAttributedStringDocumentAttributes GetNSAttributedStringDocumentAttributes();
    private static bool FontIsDefault(Label label);
    private void UpdateFont();
    private void UpdateTextColor();
    private void UpdateLayout();
    private void UpdateMaxLines();
    private void UpdatePadding();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.LayoutExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<View> children, UIView view, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
    [ExtensionAttribute]
public static View ToView(UIView view, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
}
public class Xamarin.Forms.Platform.iOS.LayoutSubviewsDelegate : MulticastDelegate {
    public LayoutSubviewsDelegate(object object, IntPtr method);
    public virtual bool Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.iOS.LineRenderer : ShapeRenderer`2<Line, LineView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Line> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateX1();
    private void UpdateY1();
    private void UpdateX2();
    private void UpdateY2();
}
public class Xamarin.Forms.Platform.iOS.LineView : ShapeView {
    private nfloat _x1;
    private nfloat _y1;
    private nfloat _x2;
    private nfloat _y2;
    public void UpdateX1(double x1);
    public void UpdateY1(double y1);
    public void UpdateX2(double x2);
    public void UpdateY2(double y2);
    private void UpdateShape();
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.ListSource : List`1<object> {
    public object Item { get; }
    public int GroupCount { get; }
    public int ItemCount { get; }
    public ListSource(IEnumerable`1<object> enumerable);
    public ListSource(IEnumerable enumerable);
    public sealed virtual void Dispose();
    public sealed virtual object get_Item(NSIndexPath indexPath);
    public sealed virtual int get_GroupCount();
    public sealed virtual int get_ItemCount();
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual int ItemCountInGroup(nint group);
}
public class Xamarin.Forms.Platform.iOS.ListViewLayout : ItemsViewLayout {
    public ListViewLayout(LinearItemsLayout itemsLayout, ItemSizingStrategy itemSizingStrategy);
    public virtual void ConstrainTo(CGSize size);
}
public class Xamarin.Forms.Platform.iOS.ListViewRenderer : ViewRenderer`2<ListView, UITableView> {
    private static int DefaultRowHeight;
    private UIView _backgroundUIView;
    private ListViewDataSource _dataSource;
    private IVisualElementRenderer _headerRenderer;
    private IVisualElementRenderer _footerRenderer;
    private KeyboardInsetTracker _insetTracker;
    private CGRect _previousFrame;
    private ScrollToRequestedEventArgs _requestedScroll;
    private FormsUITableViewController _tableViewController;
    private bool _disposed;
    private bool _usingLargeTitles;
    private Nullable`1<bool> _defaultHorizontalScrollVisibility;
    private Nullable`1<bool> _defaultVerticalScrollVisibility;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <InsertRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <DeleteRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <ReloadRowsAnimation>k__BackingField;
    private ListView ListView { get; }
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    public UIViewController ViewController { get; }
    protected UITableViewRowAnimation InsertRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation DeleteRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadSectionsAnimation { get; protected set; }
    private ListView get_ListView();
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    public virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_InsertRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_InsertRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_DeleteRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_DeleteRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_ReloadRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_ReloadRowsAnimation(UITableViewRowAnimation value);
    protected UITableViewRowAnimation get_ReloadSectionsAnimation();
    protected void set_ReloadSectionsAnimation(UITableViewRowAnimation value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    protected virtual void SetBackground(Brush brush);
    private void DisposeSubviews(UIView view);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ListView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    private NSIndexPath[] GetPaths(int section, int index, int count);
    private UITableViewScrollPosition GetScrollPosition(ScrollToPosition position);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnFooterMeasureInvalidated(object sender, EventArgs eventArgs);
    private void OnGroupedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnHeaderMeasureInvalidated(object sender, EventArgs eventArgs);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateFooter();
    private void UpdateHeader();
    private void UpdateIsRefreshing();
    private void UpdateItems(NotifyCollectionChangedEventArgs e, int section, bool resetWhenGrouped);
    private void InsertRows(int newStartingIndex, int newItemsCount, int section);
    private void DeleteRows(int oldStartingIndex, int oldItemsCount, int section);
    private void MoveRows(int newStartingIndex, int oldStartingIndex, int oldItemsCount, int section);
    private void ReloadRows(int oldStartingIndex, int oldItemsCount, int section);
    private void ReloadData();
    private void InvalidateCellCache();
    private void UpdatePullToRefreshEnabled();
    private void UpdateRowHeight();
    private void UpdateSeparatorColor();
    private void UpdateSeparatorVisibility();
    private void UpdateSelectionMode();
    private void UpdateSpinnerColor();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    [CompilerGeneratedAttribute]
private void <LayoutSubviews>b__36_0();
    [CompilerGeneratedAttribute]
private void <LayoutSubviews>b__36_1();
    [CompilerGeneratedAttribute]
private UIWindow <OnElementChanged>b__40_0();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__40_1(UIEdgeInsets insets);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__40_2(CGPoint point);
    [CompilerGeneratedAttribute]
private void <ReloadData>b__58_0();
}
public class Xamarin.Forms.Platform.iOS.MediaElementRenderer : ViewRenderer`2<MediaElement, UIView> {
    private AVPlayerViewController _avPlayerViewController;
    private NSObject _playedToEndObserver;
    private NSObject _statusObserver;
    private NSObject _rateObserver;
    private bool _idleTimerDisabled;
    private IMediaElementController Controller { get; }
    private TimeSpan Position { get; }
    private IMediaElementController get_Controller();
    private void SetKeepScreenOn(bool value);
    private void UpdateSource();
    protected virtual void Dispose(bool disposing);
    private void RemoveStatusObserver();
    private void ObserveRate(NSObservedChange e);
    private void ObserveStatus(NSObservedChange e);
    private TimeSpan get_Position();
    private void PlayedToEnd(NSNotification notification);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void MediaElementSeekRequested(object sender, SeekRequested e);
    private void Play();
    private void MediaElementStateRequested(object sender, StateRequested e);
    private static AVLayerVideoGravity AspectToGravity(Aspect aspect);
    private void SeekComplete(bool finished);
    private void MediaElementVolumeRequested(object sender, EventArgs e);
    private void MediaElementPositionRequested(object sender, EventArgs e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<MediaElement> e);
    private void UpdateBackgroundColor();
}
internal class Xamarin.Forms.Platform.iOS.ModalWrapper : UIViewController {
    private IVisualElementRenderer _modal;
    private bool _isDisposed;
    public bool ShouldAutomaticallyForwardRotationMethods { get; }
    internal ModalWrapper(IVisualElementRenderer modal);
    public virtual void DismissViewController(bool animated, Action completionHandler);
    public virtual UIInterfaceOrientationMask GetSupportedInterfaceOrientations();
    public virtual UIInterfaceOrientation PreferredInterfaceOrientationForPresentation();
    public virtual bool ShouldAutorotate();
    public virtual bool ShouldAutorotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation);
    public virtual bool get_ShouldAutomaticallyForwardRotationMethods();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewWillAppear(bool animated);
    protected virtual void Dispose(bool disposing);
    public virtual void ViewDidLoad();
    public virtual UIViewController ChildViewControllerForStatusBarStyle();
    private void OnModalPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateBackgroundColor();
}
[PreserveAttribute]
internal class Xamarin.Forms.Platform.iOS.NativeBindingService : object {
    public sealed virtual bool TrySetBinding(object target, string propertyName, BindingBase binding);
    public sealed virtual bool TrySetBinding(object target, BindableProperty property, BindingBase binding);
    public sealed virtual bool TrySetValue(object target, BindableProperty property, object value);
}
[PreserveAttribute]
internal class Xamarin.Forms.Platform.iOS.NativeValueConverterService : object {
    public sealed virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
internal class Xamarin.Forms.Platform.iOS.NativeViewPropertyListener : NSObject {
    [CompilerGeneratedAttribute]
private string <TargetProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private string TargetProperty { get; private set; }
    public NativeViewPropertyListener(string targetProperty);
    [CompilerGeneratedAttribute]
private string get_TargetProperty();
    [CompilerGeneratedAttribute]
private void set_TargetProperty(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void ObserveValue(NSString keyPath, NSObject ofObject, NSDictionary change, IntPtr context);
}
public class Xamarin.Forms.Platform.iOS.NativeViewWrapper : View {
    [CompilerGeneratedAttribute]
private GetDesiredSizeDelegate <GetDesiredSizeDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutSubviewsDelegate <LayoutSubViews>k__BackingField;
    [CompilerGeneratedAttribute]
private UIView <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private SizeThatFitsDelegate <SizeThatFitsDelegate>k__BackingField;
    public GetDesiredSizeDelegate GetDesiredSizeDelegate { get; }
    public LayoutSubviewsDelegate LayoutSubViews { get; public set; }
    public UIView NativeView { get; }
    public SizeThatFitsDelegate SizeThatFitsDelegate { get; public set; }
    public NativeViewWrapper(UIView nativeView, GetDesiredSizeDelegate getDesiredSizeDelegate, SizeThatFitsDelegate sizeThatFitsDelegate, LayoutSubviewsDelegate layoutSubViews);
    [CompilerGeneratedAttribute]
public GetDesiredSizeDelegate get_GetDesiredSizeDelegate();
    [CompilerGeneratedAttribute]
public LayoutSubviewsDelegate get_LayoutSubViews();
    [CompilerGeneratedAttribute]
public void set_LayoutSubViews(LayoutSubviewsDelegate value);
    [CompilerGeneratedAttribute]
public UIView get_NativeView();
    [CompilerGeneratedAttribute]
public SizeThatFitsDelegate get_SizeThatFitsDelegate();
    [CompilerGeneratedAttribute]
public void set_SizeThatFitsDelegate(SizeThatFitsDelegate value);
    protected virtual void OnBindingContextChanged();
}
public class Xamarin.Forms.Platform.iOS.NativeViewWrapperRenderer : ViewRenderer`2<NativeViewWrapper, UIView> {
    protected bool ManageNativeControlLifetime { get; }
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NativeViewWrapper> e);
    protected virtual bool get_ManageNativeControlLifetime();
}
public class Xamarin.Forms.Platform.iOS.NavigationRenderer : UINavigationController {
    internal static string UpdateToolbarButtons;
    private bool _appeared;
    private bool _ignorePopCall;
    private bool _loaded;
    private MasterDetailPage _parentMasterDetailPage;
    private Size _queuedSize;
    private UIViewController[] _removeControllers;
    private UIToolbar _secondaryToolbar;
    private VisualElementTracker _tracker;
    private nfloat _navigationBottom;
    private bool _hasNavigationBar;
    private UIImage _defaultNavBarShadowImage;
    private UIImage _defaultNavBarBackImage;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Page <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private static string _defaultAccessibilityLabel;
    private static string _defaultAccessibilityHint;
    private static Nullable`1<bool> _defaultIsAccessibilityElement;
    private Page Current { get; private set; }
    private IPageController PageController { get; }
    private NavigationPage NavPage { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    [CompilerGeneratedAttribute]
private Page get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(Page value);
    private IPageController get_PageController();
    private NavigationPage get_NavPage();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public Task`1<bool> PopToRootAsync(Page page, bool animated);
    public virtual UIViewController[] PopToRootViewController(bool animated);
    public Task`1<bool> PopViewAsync(Page page, bool animated);
    public virtual UIViewController PopViewController(bool animated);
    public Task`1<bool> PushPageAsync(Page page, bool animated);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<OnPopToRoot>d__50")]
protected virtual Task`1<bool> OnPopToRoot(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<OnPopViewAsync>d__51")]
protected virtual Task`1<bool> OnPopViewAsync(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<OnPushAsync>d__52")]
protected virtual Task`1<bool> OnPushAsync(Page page, bool animated);
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    private ParentingViewController CreateViewControllerForPage(Page page);
    private ParentingViewController GetParentingViewController();
    private void FindParentMasterDetail();
    private Task`1<bool> GetAppearedOrDisappearedTask(Page page);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ValidateNavbarExists(Page newCurrentPage);
    private void UpdateHideNavigationBarSeparator();
    private void UpdateCurrentPagePreferredStatusBarUpdateAnimation();
    private void UpdateUseLargeTitles();
    private void UpdateTranslucent();
    private void InsertPageBefore(Page page, Page before);
    private void OnInsertPageBeforeRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopToRootRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPushRequested(object sender, NavigationRequestedEventArgs e);
    private void OnRemovedPageRequested(object sender, NavigationRequestedEventArgs e);
    private void RemovePage(Page page);
    private void RemoveViewControllers(bool animated);
    private void UpdateBackgroundColor();
    private void UpdateBarBackground();
    private void UpdateBarTextColor();
    private void SetStatusBarStyle();
    private void UpdateTint();
    private void UpdateToolBarVisible();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<UpdateFormsInnerNavigation>d__78")]
internal Task UpdateFormsInnerNavigation(Page pageBeingRemoved);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<SetMasterLeftBarButton>d__79")]
internal static void SetMasterLeftBarButton(UIViewController containerController, MasterDetailPage masterDetailPage);
    private static void SetAccessibilityHint(UIBarButtonItem uIBarButtonItem, Element element);
    private static void SetAccessibilityLabel(UIBarButtonItem uIBarButtonItem, Element element);
    private static void SetIsAccessibilityElement(UIBarButtonItem uIBarButtonItem, Element element);
    private static void SetAutomationId(UIBarButtonItem uIBarButtonItem, string id);
    internal void ValidateInsets();
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(IVisualElementRenderer sender);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.NavigationRenderer/<<ViewDidLoad>b__47_0>d")]
[CompilerGeneratedAttribute]
private void <ViewDidLoad>b__47_0(Page p);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private UIViewController <>n__0(bool animated);
    [CompilerGeneratedAttribute]
private void <RemovePage>b__70_0();
}
internal class Xamarin.Forms.Platform.iOS.NoCaretField : UITextField {
    public virtual CGRect GetCaretRectForPosition(UITextPosition position);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.NSObjectExtensions : object {
    [ExtensionAttribute]
public static void QueueForLater(NSObject nsObject, Action action);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.ObservableGroupedSource : object {
    private UICollectionView _collectionView;
    private UICollectionViewController _collectionViewController;
    private IList _groupSource;
    private bool _disposed;
    private List`1<ObservableItemsSource> _groups;
    public object Item { get; }
    public int GroupCount { get; }
    public int ItemCount { get; }
    public ObservableGroupedSource(IEnumerable groupSource, UICollectionViewController collectionViewController);
    public sealed virtual object get_Item(NSIndexPath indexPath);
    public sealed virtual int get_GroupCount();
    public sealed virtual int get_ItemCount();
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual int ItemCountInGroup(nint group);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ClearGroupTracking();
    private void ResetGroupTracking();
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void CollectionChanged(NotifyCollectionChangedEventArgs args);
    private void Reload();
    private NSIndexSet CreateIndexSetFrom(int startIndex, int count);
    private bool NotLoadedYet();
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    private int GetGroupCount(int groupIndex);
    private object GetGroupItemAt(int groupIndex, int index);
    private int IndexInGroup(object item, object group);
    private bool ReloadRequired();
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.iOS.ObservableItemsSource : object {
    private UICollectionViewController _collectionViewController;
    private UICollectionView _collectionView;
    private bool _grouped;
    private int _section;
    private IEnumerable _itemsSource;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionItemsSourceChanged;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public object Item { get; }
    public int GroupCount { get; }
    public int ItemCount { get; }
    public object Item { get; }
    public ObservableItemsSource(IEnumerable itemSource, UICollectionViewController collectionViewController, int group);
    [CompilerGeneratedAttribute]
internal void add_CollectionItemsSourceChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CollectionItemsSourceChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public object get_Item(int index);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual int ItemCountInGroup(nint group);
    public sealed virtual object Group(NSIndexPath indexPath);
    public sealed virtual NSIndexPath GetIndexForItem(object item);
    public sealed virtual int get_GroupCount();
    public sealed virtual int get_ItemCount();
    public sealed virtual object get_Item(NSIndexPath indexPath);
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void CollectionChanged(NotifyCollectionChangedEventArgs args);
    private void Reload();
    private NSIndexPath[] CreateIndexesFrom(int startIndex, int count);
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    internal int ItemsCount();
    internal object ElementAt(int index);
    internal int IndexOf(object item);
}
internal class Xamarin.Forms.Platform.iOS.OpenGLViewRenderer : ViewRenderer`2<OpenGLView, GLKView> {
    private CADisplayLink _displayLink;
    public void Display(object sender, EventArgs eventArgs);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<OpenGLView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetupRenderLoop(bool oneShot);
    [CompilerGeneratedAttribute]
private void <SetupRenderLoop>b__6_0();
}
internal class Xamarin.Forms.Platform.iOS.PageContainer : UIView {
    private IAccessibilityElementsController _parent;
    private NSArray _accessibilityElements;
    private bool _disposed;
    private bool _loaded;
    public bool IsAccessibilityElement { get; public set; }
    [PreserveAttribute]
public NSArray AccessibilityElements { get; }
    public PageContainer(IAccessibilityElementsController parent);
    public virtual bool get_IsAccessibilityElement();
    public virtual void set_IsAccessibilityElement(bool value);
    [ExportAttribute]
public virtual NSArray get_AccessibilityElements();
    public void ClearAccessibilityElements();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.PageExtensions : object {
    [ExtensionAttribute]
public static UIViewController CreateViewController(ContentPage page);
    [ExtensionAttribute]
internal static Page GetCurrentPage(Page currentPage);
}
public class Xamarin.Forms.Platform.iOS.PageRenderer : UIViewController {
    private bool _appeared;
    private bool _disposed;
    private EventTracker _events;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    private PageContainer _pageContainer;
    private ShellSection _shellSection;
    private bool _safeAreasSet;
    private Thickness _userPadding;
    private bool _userOverriddenSafeArea;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private double _tabThickness;
    private bool _isInItems;
    internal PageContainer Container { get; }
    private Page Page { get; }
    private IAccessibilityElementsController AccessibilityElementsController { get; }
    private Thickness SafeAreaInsets { get; }
    private bool IsPartOfShell { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIStatusBarAnimation PreferredStatusBarUpdateAnimation { get; }
    public bool PrefersHomeIndicatorAutoHidden { get; }
    internal PageContainer get_Container();
    private Page get_Page();
    private IAccessibilityElementsController get_AccessibilityElementsController();
    private Thickness get_SafeAreaInsets();
    private bool get_IsPartOfShell();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual List`1<NSObject> GetAccessibilityElements();
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public virtual void LoadView();
    public virtual void ViewWillLayoutSubviews();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewSafeAreaInsetsDidChange();
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLoad();
    public virtual void ViewWillDisappear(bool animated);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IDisconnectable.Disconnect();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected virtual void SetAutomationId(string id);
    private void OnHandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual UIStatusBarAnimation get_PreferredStatusBarUpdateAnimation();
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    private bool ShouldUseSafeArea();
    private void UpdateUseSafeArea();
    private void UpdateStatusBarPrefersHidden();
    private bool OnShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch);
    public virtual bool PrefersStatusBarHidden();
    private void UpdateBackground();
    private void UpdateTitle();
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.iOS.PageRenderer/<ViewAndSuperviewsOfView>d__60")]
private IEnumerable`1<UIView> ViewAndSuperviewsOfView(UIView view);
    private void UpdateHomeIndicatorAutoHidden();
    private sealed virtual override void Xamarin.Forms.IShellContentInsetObserver.OnInsetChanged(Thickness inset, double tabThickness);
    public virtual bool get_PrefersHomeIndicatorAutoHidden();
    [CompilerGeneratedAttribute]
private void <ViewDidLoad>b__43_0(UITapGestureRecognizer a);
    [CompilerGeneratedAttribute]
private void <UpdateStatusBarPrefersHidden>b__55_0();
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__58_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.PathData : object {
    [CompilerGeneratedAttribute]
private CGPath <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonzeroFillRule>k__BackingField;
    public CGPath Data { get; public set; }
    public bool IsNonzeroFillRule { get; public set; }
    [CompilerGeneratedAttribute]
public CGPath get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(CGPath value);
    [CompilerGeneratedAttribute]
public bool get_IsNonzeroFillRule();
    [CompilerGeneratedAttribute]
public void set_IsNonzeroFillRule(bool value);
}
public class Xamarin.Forms.Platform.iOS.PathRenderer : ShapeRenderer`2<Path, PathView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Path> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdatePath();
}
public class Xamarin.Forms.Platform.iOS.PathView : ShapeView {
    public void UpdatePath(PathData path);
}
public class Xamarin.Forms.Platform.iOS.PhoneMasterDetailRenderer : UIViewController {
    private UIView _clickOffView;
    private UIViewController _detailController;
    private bool _disposed;
    private EventTracker _events;
    private UIViewController _masterController;
    private UIPanGestureRecognizer _panGesture;
    private bool _presented;
    private UIGestureRecognizer _tapGesture;
    private VisualElementTracker _tracker;
    private bool _applyShadow;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page Page { get; }
    private MasterDetailPage MasterDetailPage { get; }
    private bool Presented { get; private set; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    private Page get_Page();
    private MasterDetailPage get_MasterDetailPage();
    private bool get_Presented();
    private void set_Presented(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void AddClickOffView();
    private void EmptyContainers();
    private void HandleMasterPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void LayoutChildren(bool animated);
    private void PackContainers();
    private void PageOnSizeChanged(object sender, EventArgs eventArgs);
    private void RemoveClickOffView();
    private void UpdateBackground();
    private void UpdateMasterDetailContainers();
    private void UpdateLeftBarButton();
    private void UpdateApplyShadow(bool value);
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    private void ToggleAccessibilityElementsHidden();
    private void UpdatePanGesture();
    private bool IsSwipeView(UIView view);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private void ApplyDetailShadow(nfloat percent);
    [CompilerGeneratedAttribute]
private void <ViewDidLoad>b__35_0();
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__47_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.PickerRenderer : PickerRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.PickerRendererBase`1 : ViewRenderer`2<Picker, TControl> {
    private UIPickerView _picker;
    private UIColor _defaultTextColor;
    private bool _disposed;
    private bool _useLegacyColorManagement;
    private Color _defaultPlaceholderColor;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEditing(object sender, EventArgs eventArgs);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void RowsCollectionChanged(object sender, EventArgs e);
    protected void UpdateCharacterSpacing();
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdatePlaceholder();
    protected virtual void UpdateAttributedPlaceholder(NSAttributedString nsAttributedString);
    private void UpdatePicker();
    private void UpdatePickerFromModel(PickerSource<TControl> s);
    private void UpdatePickerNativeSize(string oldText);
    private void UpdatePickerSelectedIndex(int formsIndex);
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    protected internal virtual void UpdateTextColor();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.Platform : BindableObject {
    internal static BindableProperty RendererProperty;
    private int _alertPadding;
    private List`1<Page> _modals;
    private List`1<Page> _previousModals;
    private PlatformRenderer _renderer;
    private bool _animateModals;
    private bool _appeared;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    internal UIViewController ViewController { get; }
    internal Page Page { get; internal set; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.ModalStack { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.NavigationStack { get; }
    internal static UIEdgeInsets SafeAreaInsetsForWindow { get; }
    private static Platform();
    internal UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
internal Page get_Page();
    [CompilerGeneratedAttribute]
internal void set_Page(Page value);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_ModalStack();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_NavigationStack();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.Platform/<Xamarin-Forms-INavigation-PopModalAsync>d__25")]
private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    public static SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    public static IVisualElementRenderer CreateRenderer(VisualElement element);
    public static IVisualElementRenderer GetRenderer(VisualElement bindable);
    public static void SetRenderer(VisualElement bindable, IVisualElementRenderer value);
    protected virtual void OnBindingContextChanged();
    internal static UIEdgeInsets get_SafeAreaInsetsForWindow();
    internal void DidAppear();
    internal void LayoutSubviews();
    internal void SetPage(Page newRoot);
    internal void WillAppear();
    private void AddChild(VisualElement view);
    private static void HandleChildRemoved(object sender, ElementEventArgs e);
    private bool PageIsChildOfPlatform(Page page);
    private UIAlertAction CreateActionWithWindowHide(string text, UIAlertActionStyle style, Action setResult, UIWindow window);
    private void PresentAlert(AlertArguments arguments);
    private void PresentPrompt(PromptArguments arguments);
    private void PresentActionSheet(ActionSheetArguments arguments);
    private static void PresentPopUp(UIWindow window, UIAlertController alert, ActionSheetArguments arguments);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.Platform/<PresentModal>d__52")]
private Task PresentModal(Page modal, bool animated);
    private void EndEditing();
    internal static string ResolveMsAppDataUri(Uri uri);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    internal void SubscribeToAlertsAndActionSheets();
    private static bool IsModalPresentedFullScreen(Page modal);
    internal void UnsubscribeFromAlertsAndActionsSheets();
    internal void MarkForRemoval();
    internal void CleanUpPages();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.PlatformConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, T> OnThisPlatform(T element);
}
public abstract class Xamarin.Forms.Platform.iOS.PlatformEffect : PlatformEffect`2<UIView, UIView> {
}
internal class Xamarin.Forms.Platform.iOS.PlatformRenderer : UIViewController {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    public Platform Platform { get; public set; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    public bool ShouldAutomaticallyForwardRotationMethods { get; }
    [PreserveAttribute]
internal PlatformRenderer(Platform platform);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Platform value);
    public virtual UIInterfaceOrientationMask GetSupportedInterfaceOrientations();
    public virtual UIInterfaceOrientation PreferredInterfaceOrientationForPresentation();
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController ChildViewControllerForStatusBarStyle();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    public virtual bool ShouldAutorotate();
    public virtual bool ShouldAutorotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation);
    public virtual bool get_ShouldAutomaticallyForwardRotationMethods();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.PointCollectionExtensions : object {
    [ExtensionAttribute]
public static CGPoint[] ToCGPoints(PointCollection pointCollection);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.PointExtensions : object {
    [ExtensionAttribute]
public static Point ToPoint(CGPoint point);
    [ExtensionAttribute]
public static CGPoint ToPointF(Point point);
}
public class Xamarin.Forms.Platform.iOS.PolygonRenderer : ShapeRenderer`2<Polygon, PolygonView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polygon> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    protected virtual void Dispose(bool disposing);
    private void UpdatePoints();
    public void UpdateFillRule();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.iOS.PolygonView : ShapeView {
    public void UpdatePoints(CGPoint[] points);
    public void UpdateFillMode(bool fillMode);
}
public class Xamarin.Forms.Platform.iOS.PolylineRenderer : ShapeRenderer`2<Polyline, PolylineView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polyline> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdatePoints();
    public void UpdateFillRule();
}
public class Xamarin.Forms.Platform.iOS.PolylineView : ShapeView {
    public void UpdatePoints(CGPoint[] points);
    public void UpdateFillMode(bool fillMode);
}
public class Xamarin.Forms.Platform.iOS.ProgressBarRenderer : ViewRenderer`2<ProgressBar, UIProgressView> {
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    private void UpdateProgressColor();
    private void UpdateProgress();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.PropertyChangedEventArgsExtensions : object {
    [ExtensionAttribute]
public static bool Is(PropertyChangedEventArgs args, BindableProperty property);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2, BindableProperty p3);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2, BindableProperty p3, BindableProperty p4);
}
public class Xamarin.Forms.Platform.iOS.RadioButtonCALayer : CALayer {
    private static float _checkLineWidth;
    private static float _containerLineWidth;
    private static bool _fillsOnChecked;
    private static float _checkSize;
    private static float _containerInset;
    private static float _checkInset;
    private static UIColor _checkBorderStrokeColor;
    private static UIColor _checkBorderFillColor;
    private static UIColor _checkMarkStrokeColor;
    private static UIColor _checkMarkFillColor;
    private UIButton _nativeControl;
    private RadioButton _radioButton;
    private CAShapeLayer _checkLayer;
    private CAShapeLayer _containerLayer;
    public RadioButtonCALayer(RadioButton radioButton, UIButton nativeControl);
    public virtual void Display();
    public virtual void LayoutSublayers();
    private void InitializeLayers();
    private void ColorLayers();
    private void LayoutLayers();
    protected virtual CGRect GetFrame(CGRect bounds);
    protected virtual CGRect GetCheckFrame(CGRect bounds);
    protected virtual CGPath GetContainerPath(CGRect frame);
    protected virtual CGPath GetCheckPath(CGRect frame);
}
public class Xamarin.Forms.Platform.iOS.RadioButtonRenderer : ViewRenderer`2<RadioButton, UIButton> {
    private UIColor _buttonTextColorDefaultDisabled;
    private UIColor _buttonTextColorDefaultHighlighted;
    private UIColor _buttonTextColorDefaultNormal;
    private bool _useLegacyColorManagement;
    private bool _titleChanged;
    private CGSize _titleSize;
    private UIEdgeInsets _paddingDelta;
    private CALayer _radioButtonLayer;
    private nfloat _minimumButtonHeight;
    private static UIControlState[] s_controlStates;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    private static RadioButtonRenderer();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<RadioButton> e);
    protected virtual UIButton CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetAccessibilityLabel();
    protected virtual CALayer CreateRadioBoxLayer();
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    private void SetRadioBoxLayer(CALayer layer);
    private void SetControlPropertiesFromProxy();
    private void OnButtonTouchUpInside(object sender, EventArgs eventArgs);
    private void OnButtonTouchDown(object sender, EventArgs eventArgs);
    private void UpdateFont();
    private void UpdateText();
    private void UpdateTextColor();
    protected virtual void UpdatePadding(UIButton button);
    private void UpdateContentEdge(UIButton button, Nullable`1<UIEdgeInsets> delta);
    private void ClearEdgeInsets(UIButton button);
    private void ComputeEdgeInsets(UIButton button, ButtonContentLayout layout);
}
internal class Xamarin.Forms.Platform.iOS.ReadOnlyField : NoCaretField {
    private HashSet`1<string> enableActions;
    public virtual bool CanPerform(Selector action, NSObject withSender);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.RectangleExtensions : object {
    [ExtensionAttribute]
public static Rectangle ToRectangle(CGRect rect);
    [ExtensionAttribute]
public static CGRect ToRectangleF(Rectangle rect);
}
public class Xamarin.Forms.Platform.iOS.RectangleRenderer : ShapeRenderer`2<Rectangle, RectView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Rectangle> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateRadiusX();
    private void UpdateRadiusY();
}
public class Xamarin.Forms.Platform.iOS.RectView : ShapeView {
    [CompilerGeneratedAttribute]
private nfloat <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <RadiusY>k__BackingField;
    public nfloat RadiusX { get; public set; }
    public nfloat RadiusY { get; public set; }
    [CompilerGeneratedAttribute]
public void set_RadiusX(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_RadiusX();
    [CompilerGeneratedAttribute]
public void set_RadiusY(nfloat value);
    [CompilerGeneratedAttribute]
public nfloat get_RadiusY();
    private void UpdateShape();
    public void UpdateRadiusX(double radiusX);
    public void UpdateRadiusY(double radiusY);
}
public class Xamarin.Forms.Platform.iOS.RefreshViewRenderer : ViewRenderer`2<RefreshView, UIView> {
    private bool _isDisposed;
    private bool _isRefreshing;
    private bool _usingLargeTitles;
    private nfloat _originalY;
    private nfloat _refreshControlHeight;
    private UIView _refreshControlParent;
    private UIRefreshControl _refreshControl;
    public bool IsRefreshing { get; public set; }
    public bool get_IsRefreshing();
    public void set_IsRefreshing(bool value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<RefreshView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected virtual void Dispose(bool disposing);
    private bool TryOffsetRefresh(UIView view, bool refreshing);
    private bool TryRemoveRefresh(UIView view, int index);
    private bool TryInsertRefresh(UIView view, int index);
    private void UpdateColors();
    private void UpdateIsRefreshing();
    private void UpdateIsEnabled();
    private bool CanUseRefreshControlProperty();
    private void OnRefresh(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
}
public static class Xamarin.Forms.Platform.iOS.RendererFactory : object {
    [ObsoleteAttribute("GetRenderer is obsolete as of version 2.0.1. Please use Platform.CreateRenderer instead.")]
[EditorBrowsableAttribute("1")]
public static IVisualElementRenderer GetRenderer(VisualElement view);
}
public class Xamarin.Forms.Platform.iOS.RendererPool : object {
    private Dictionary`2<Type, Stack`1<IVisualElementRenderer>> _freeRenderers;
    private VisualElement _oldElement;
    private IVisualElementRenderer _parent;
    public RendererPool(IVisualElementRenderer renderer, VisualElement oldElement);
    public IVisualElementRenderer GetFreeRenderer(VisualElement view);
    public void UpdateNewElement(VisualElement newElement);
    private void ClearRenderers(IVisualElementRenderer renderer);
    private void FillChildrenWithRenderers(VisualElement element);
    private void PushRenderer(IVisualElementRenderer renderer);
    private void UpdateRenderers(Element newElement);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Forms.Platform.iOS.Resources.StringResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Cancel { get; }
    internal static string More { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Cancel();
    internal static string get_More();
}
[PreserveAttribute]
internal class Xamarin.Forms.Platform.iOS.ResourcesProvider : object {
    private ResourceDictionary _dictionary;
    public sealed virtual IResourceDictionary GetSystemResources();
    private Style GenerateListItemDetailTextStyle();
    private Style GenerateListItemTextStyle();
    private Style GenerateStyle(UIFont font);
    private void UpdateStyles();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object sender, UIContentSizeCategoryChangedEventArgs args);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Platform.iOS.SafeShellNavBarAppearanceTracker : ShellNavBarAppearanceTracker {
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Platform.iOS.SafeShellTabBarAppearanceTracker : object {
    private UIColor _defaultBarTint;
    private UIColor _defaultTint;
    private UIColor _defaultUnselectedTint;
    public virtual void ResetAppearance(UITabBarController controller);
    public virtual void SetAppearance(UITabBarController controller, ShellAppearance appearance);
    public virtual void UpdateLayout(UITabBarController controller);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ScrollToPositionExtensions : object {
    [ExtensionAttribute]
public static UICollectionViewScrollPosition ToCollectionViewScrollPosition(ScrollToPosition scrollToPosition, UICollectionViewScrollDirection scrollDirection, bool isLtr);
    [ExtensionAttribute]
public static UICollectionViewScrollPosition ToHorizontalCollectionViewScrollPosition(ScrollToPosition scrollToPosition, bool isLtr);
    [ExtensionAttribute]
public static UICollectionViewScrollPosition ToVerticalCollectionViewScrollPosition(ScrollToPosition scrollToPosition);
}
public class Xamarin.Forms.Platform.iOS.ScrollViewRenderer : UIScrollView {
    private EventTracker _events;
    private KeyboardInsetTracker _insetTracker;
    private VisualElementPackager _packager;
    private CGRect _previousFrame;
    private ScrollToRequestedEventArgs _requestedScroll;
    private VisualElementTracker _tracker;
    private bool _checkedForRtlScroll;
    private bool _previousLTR;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private ScrollView ScrollView { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private ScrollView get_ScrollView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void LayoutSubviews();
    private void UpdateFlowDirection();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateIsEnabled();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    private void HandleScrollAnimationEnded(object sender, EventArgs e);
    private void HandleScrolled(object sender, EventArgs e);
    private void OnNativeControlUpdated(object sender, EventArgs eventArgs);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateDelaysContentTouches();
    private void UpdateBackgroundColor();
    private void UpdateBackground();
    private void UpdateContentSize();
    private CGSize RetrieveElementContentSize();
    private void UpdateScrollPosition();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private UIWindow <SetElement>b__21_0();
    [CompilerGeneratedAttribute]
private void <SetElement>b__21_1(UIEdgeInsets insets);
    [CompilerGeneratedAttribute]
private void <SetElement>b__21_2(CGPoint point);
}
public class Xamarin.Forms.Platform.iOS.SearchBarRenderer : ViewRenderer`2<SearchBar, UISearchBar> {
    private UIColor _cancelButtonTextColorDefaultDisabled;
    private UIColor _cancelButtonTextColorDefaultHighlighted;
    private UIColor _cancelButtonTextColorDefaultNormal;
    private UIColor _defaultTextColor;
    private UIColor _defaultTintColor;
    private UITextField _textField;
    private bool _textWasTyped;
    private string _typedText;
    private bool _useLegacyColorManagement;
    private UIToolbar _numericAccessoryView;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SearchBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    private void OnCancelClicked(object sender, EventArgs args);
    private void OnEditingEnded(object sender, EventArgs e);
    private void OnEditingStarted(object sender, EventArgs e);
    private void OnSearchButtonClicked(object sender, EventArgs e);
    private void OnTextChanged(object sender, UISearchBarTextChangedEventArgs a);
    private void UpdateCharacterSpacing();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    public virtual void UpdateCancelButton();
    private void UpdateFont();
    private void UpdateIsEnabled();
    private void UpdatePlaceholder();
    private void UpdateText();
    private void UpdateOnTextChanged();
    private void UpdateTextColor();
    private void UpdateMaxLength();
    private bool ShouldChangeText(UISearchBar searchBar, NSRange range, string text);
    private void UpdateKeyboard();
    private UIToolbar CreateNumericKeyboardAccessoryView();
    private void UpdateSearchBarStyle();
}
public class Xamarin.Forms.Platform.iOS.SearchHandlerAppearanceTracker : object {
    private UIColor _cancelButtonTextColorDefaultDisabled;
    private UIColor _cancelButtonTextColorDefaultHighlighted;
    private UIColor _cancelButtonTextColorDefaultNormal;
    private UIColor _defaultTextColor;
    private UIColor _defaultTintColor;
    private UIColor _defaultClearIconTintColor;
    private UIColor _defaultPlaceholderTintColor;
    private bool _hasCustomBackground;
    private UIColor _defaultBackgroundColor;
    private SearchHandler _searchHandler;
    private UISearchBar _uiSearchBar;
    private UIToolbar _numericAccessoryView;
    private bool _disposed;
    public SearchHandlerAppearanceTracker(UISearchBar searchBar, SearchHandler searchHandler);
    public void UpdateSearchBarColors();
    internal void UpdateFlowDirection(Shell shell);
    private void SearchHandlerFocusChangeRequested(object sender, FocusRequestArgs e);
    private void SearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void GetDefaultSearchBarColors(UISearchBar searchBar);
    private void UpdateFont(UITextField textField);
    private void UpdateSearchBarBackgroundColor(UITextField textField);
    private void UpdateCancelButtonColor(UIButton cancelButton);
    private void UpdateSearchBarPlaceholder(UITextField textField);
    private void UpdateTextTransform(UITextField textField);
    private void UpdateTextColor(UITextField textField);
    private void UpdateSearchBarTintColor(Color targetColor);
    private void UpdateSearchButtonIconColor(Color targetColor);
    private void UpdateClearPlaceholderIconColor(Color targetColor);
    private void UpdateClearIconColor(Color targetColor);
    private void UpdateSearchBarHorizontalTextAlignment(UITextField textField);
    private void UpdateSearchBarVerticalTextAlignment(UITextField textField);
    private void UpdateKeyboard();
    private void OnEditingEnded(object sender, EventArgs e);
    private void OnEditingStarted(object sender, EventArgs e);
    private void OnTextChanged(object sender, UISearchBarTextChangedEventArgs e);
    private void OnSearchButtonClicked(object sender, EventArgs e);
    private UIToolbar CreateNumericKeyboardAccessoryView();
    private static void SetSearchBarIconColor(UIImageView imageView, Color targetColor, UIColor defaultTintColor);
    private static void SetSearchBarIconColor(UIButton button, Color targetColor, UIColor defaultTintColor);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Platform.iOS.SelectableItemsViewController`1 : StructuredItemsViewController`1<TItemsView> {
    public SelectableItemsViewController`1(TItemsView selectableItemsView, ItemsViewLayout layout);
    protected virtual UICollectionViewDelegateFlowLayout CreateDelegator();
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
    internal void SelectItem(object selectedItem);
    internal void ClearSelection();
    private void FormsSelectItem(NSIndexPath indexPath);
    private void FormsDeselectItem(NSIndexPath indexPath);
    internal void UpdateNativeSelection();
    internal void UpdateSelectionMode();
    private void SynchronizeNativeSelectionWithSelectedItems();
    private bool ShouldNotBeSelected(object item, IList`1<object> selectedItems);
}
public class Xamarin.Forms.Platform.iOS.SelectableItemsViewDelegator`2 : ItemsViewDelegator`2<TItemsView, TViewController> {
    public SelectableItemsViewDelegator`2(ItemsViewLayout itemsViewLayout, TViewController itemsViewController);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
}
public class Xamarin.Forms.Platform.iOS.SelectableItemsViewRenderer`2 : StructuredItemsViewRenderer`2<TItemsView, TViewController> {
    protected virtual TViewController CreateController(TItemsView itemsView, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual void UpdateNativeSelection();
    protected virtual void UpdateSelectionMode();
    protected virtual void UpdateItemsSource();
}
[PreserveAttribute]
internal class Xamarin.Forms.Platform.iOS.ShadowEffect : PlatformEffect {
    private UIView ShadowView { get; }
    private UIView get_ShadowView();
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    protected virtual void OnElementPropertyChanged(PropertyChangedEventArgs args);
    private void UpdateShadow();
}
public class Xamarin.Forms.Platform.iOS.ShapeLayer : CALayer {
    private CGPath _path;
    private CGRect _pathFillBounds;
    private CGRect _pathStrokeBounds;
    private CGPath _renderPath;
    private CGRect _renderPathFill;
    private CGRect _renderPathStroke;
    private bool _fillMode;
    private Brush _stroke;
    private Brush _fill;
    private nfloat _strokeWidth;
    private nfloat[] _strokeDash;
    private nfloat _dashOffset;
    private Stretch _stretch;
    private CGLineCap _strokeLineCap;
    private CGLineJoin _strokeLineJoin;
    private nfloat _strokeMiterLimit;
    public virtual void DrawInContext(CGContext ctx);
    public void UpdateShape(CGPath path);
    public void UpdateFillMode(bool fillMode);
    public SizeRequest GetDesiredSize();
    public void UpdateSize(CGSize size);
    public void UpdateAspect(Stretch stretch);
    public void UpdateFill(Brush fill);
    public void UpdateStroke(Brush stroke);
    public void UpdateStrokeThickness(double strokeWidth);
    public void UpdateStrokeDash(nfloat[] dash);
    public void UpdateStrokeDashOffset(nfloat dashOffset);
    public void UpdateStrokeLineCap(CGLineCap strokeLineCap);
    public void UpdateStrokeLineJoin(CGLineJoin strokeLineJoin);
    public void UpdateStrokeMiterLimit(nfloat strokeMiterLimit);
    private void BuildRenderPath();
    private void RenderShape(CGContext graphics);
    private void RenderBrush(CGContext graphics, CGRect pathBounds, GradientBrush brush);
    private void UpdatePathStrokeBounds();
}
public class Xamarin.Forms.Platform.iOS.ShapeRenderer`2 : ViewRenderer`2<TShape, TNativeShape> {
    private double _height;
    private double _width;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TShape> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private void UpdateAspect();
    private void UpdateSize();
    private void UpdateFill();
    private void UpdateStroke();
    private void UpdateStrokeThickness();
    private void UpdateStrokeDashArray();
    private void UpdateStrokeDashOffset();
    private void UpdateStrokeLineCap();
    private void UpdateStrokeLineJoin();
    private void UpdateStrokeMiterLimit();
}
public class Xamarin.Forms.Platform.iOS.ShapeView : UIView {
    [CompilerGeneratedAttribute]
private ShapeLayer <ShapeLayer>k__BackingField;
    public ShapeLayer ShapeLayer { get; private set; }
    [CompilerGeneratedAttribute]
private void set_ShapeLayer(ShapeLayer value);
    [CompilerGeneratedAttribute]
public ShapeLayer get_ShapeLayer();
}
public class Xamarin.Forms.Platform.iOS.ShellFlyoutContentRenderer : UIViewController {
    private UIVisualEffectView _blurView;
    private UIImageView _bgImage;
    private IShellContext _shellContext;
    private UIContainerView _headerView;
    private ShellTableViewController _tableViewController;
    [CompilerGeneratedAttribute]
private EventHandler WillAppear;
    [CompilerGeneratedAttribute]
private EventHandler WillDisappear;
    public UIViewController ViewController { get; }
    public ShellFlyoutContentRenderer(IShellContext context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillAppear(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillDisappear(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillDisappear(EventHandler value);
    protected virtual ShellTableViewController CreateShellTableViewController();
    protected virtual void HandleShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFlowDirection();
    protected virtual void UpdateBackground();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellFlyoutContentRenderer/<UpdateFlyoutBgImageAsync>d__16")]
private void UpdateFlyoutBgImageAsync();
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    private void OnElementSelected(Element element);
}
public class Xamarin.Forms.Platform.iOS.ShellFlyoutRenderer : UIViewController {
    private static string FlyoutAnimationName;
    private bool _disposed;
    private FlyoutBehavior _flyoutBehavior;
    private bool _gestureActive;
    private bool _isOpen;
    private UIViewPropertyAnimator _flyoutAnimation;
    private Brush _backdropBrush;
    [CompilerGeneratedAttribute]
private UIViewAnimationCurve <AnimationCurve>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnimationDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellFlyoutTransition <FlyoutTransition>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private UIViewController <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer <Flyout>k__BackingField;
    [CompilerGeneratedAttribute]
private UIPanGestureRecognizer <PanGestureRecognizer>k__BackingField;
    [CompilerGeneratedAttribute]
private Shell <Shell>k__BackingField;
    [CompilerGeneratedAttribute]
private UIView <TapoffView>k__BackingField;
    private UIKeyCommand[] tabCommands;
    private UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.View { get; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.ViewController { get; }
    public UIViewAnimationCurve AnimationCurve { get; public set; }
    public int AnimationDuration { get; public set; }
    private double AnimationDurationInSeconds { get; }
    public IShellFlyoutTransition FlyoutTransition { get; public set; }
    private IShellContext Context { get; private set; }
    private UIViewController Detail { get; private set; }
    private IShellFlyoutContentRenderer Flyout { get; private set; }
    private bool IsOpen { get; private set; }
    private UIPanGestureRecognizer PanGestureRecognizer { get; private set; }
    private Shell Shell { get; private set; }
    private IShellController ShellController { get; }
    private UIView TapoffView { get; private set; }
    public UIKeyCommand[] KeyCommands { get; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_View();
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_ViewController();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.AttachFlyout(IShellContext context, UIViewController content);
    private bool IsSwipeView(UIView view);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    [CompilerGeneratedAttribute]
public UIViewAnimationCurve get_AnimationCurve();
    [CompilerGeneratedAttribute]
public void set_AnimationCurve(UIViewAnimationCurve value);
    [CompilerGeneratedAttribute]
public int get_AnimationDuration();
    [CompilerGeneratedAttribute]
public void set_AnimationDuration(int value);
    private double get_AnimationDurationInSeconds();
    [CompilerGeneratedAttribute]
public IShellFlyoutTransition get_FlyoutTransition();
    [CompilerGeneratedAttribute]
public void set_FlyoutTransition(IShellFlyoutTransition value);
    [CompilerGeneratedAttribute]
private IShellContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IShellContext value);
    [CompilerGeneratedAttribute]
private UIViewController get_Detail();
    [CompilerGeneratedAttribute]
private void set_Detail(UIViewController value);
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer get_Flyout();
    [CompilerGeneratedAttribute]
private void set_Flyout(IShellFlyoutContentRenderer value);
    private bool get_IsOpen();
    private void set_IsOpen(bool value);
    [CompilerGeneratedAttribute]
private UIPanGestureRecognizer get_PanGestureRecognizer();
    [CompilerGeneratedAttribute]
private void set_PanGestureRecognizer(UIPanGestureRecognizer value);
    [CompilerGeneratedAttribute]
private Shell get_Shell();
    [CompilerGeneratedAttribute]
private void set_Shell(Shell value);
    private IShellController get_ShellController();
    [CompilerGeneratedAttribute]
private UIView get_TapoffView();
    [CompilerGeneratedAttribute]
private void set_TapoffView(UIView value);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFlowDirection(bool readdViews);
    private void UpdateTapoffViewBackgroundColor();
    private void AddTapoffView();
    public void FocusSearch(bool forwardDirection);
    public virtual UIKeyCommand[] get_KeyCommands();
    public UIView get_NativeView();
    public UIViewController get_ViewController();
    [ExportAttribute("tabForward:")]
[PreserveAttribute]
private void TabForward(UIKeyCommand cmd);
    [ExportAttribute("tabBackward:")]
[PreserveAttribute]
private void TabBackward(UIKeyCommand cmd);
    private void HandlePanGesture(UIPanGestureRecognizer pan);
    private void LayoutSidebar(bool animate, bool cancelExisting);
    private void RemoveTapoffView();
    [CompilerGeneratedAttribute]
private void <AddTapoffView>b__65_0(UITapGestureRecognizer t);
    [CompilerGeneratedAttribute]
private void <LayoutSidebar>b__77_2(UIViewAnimatingPosition p);
    [CompilerGeneratedAttribute]
private void <LayoutSidebar>g__UpdateTapoffView|77_0();
}
public class Xamarin.Forms.Platform.iOS.ShellItemRenderer : UITabBarController {
    private IShellContext _context;
    private Dictionary`2<UIViewController, IShellSectionRenderer> _sectionRenderers;
    private IShellTabBarAppearanceTracker _appearanceTracker;
    private ShellSection _currentSection;
    private Page _displayedPage;
    private bool _disposed;
    private ShellItem _shellItem;
    private bool _switched;
    [CompilerGeneratedAttribute]
private IShellSectionRenderer <CurrentRenderer>k__BackingField;
    public ShellItem ShellItem { get; public set; }
    public IShellItemController ShellItemController { get; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellItemRenderer.ViewController { get; }
    private IShellSectionRenderer CurrentRenderer { get; private set; }
    public UIViewController SelectedViewController { get; public set; }
    public ShellItemRenderer(IShellContext context);
    public sealed virtual ShellItem get_ShellItem();
    public sealed virtual void set_ShellItem(ShellItem value);
    public IShellItemController get_ShellItemController();
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellItemRenderer.get_ViewController();
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    [CompilerGeneratedAttribute]
private IShellSectionRenderer get_CurrentRenderer();
    [CompilerGeneratedAttribute]
private void set_CurrentRenderer(IShellSectionRenderer value);
    public virtual UIViewController get_SelectedViewController();
    public virtual void set_SelectedViewController(UIViewController value);
    [ExportAttribute("navigationController:didShowViewController:animated:")]
public virtual void DidShowViewController(UINavigationController navigationController, UIViewController viewController, bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IDisconnectable.Disconnect();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnShellItemSet(ShellItem shellItem);
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateShellAppearance(ShellAppearance appearance);
    private void AddRenderer(IShellSectionRenderer renderer);
    private void CreateTabRenderers();
    private void GoTo(ShellSection shellSection);
    private void OnDisplayedPageChanged(Page page);
    private void OnDisplayedPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void RemoveRenderer(IShellSectionRenderer renderer);
    private IShellSectionRenderer RendererForShellContent(ShellSection shellSection);
    private IShellSectionRenderer RendererForViewController(UIViewController viewController);
    public virtual void ViewWillLayoutSubviews();
    private void UpdateTabBarHidden();
    [CompilerGeneratedAttribute]
private bool <ViewDidLoad>b__26_0(UITabBarController tabController, UIViewController viewController);
}
public class Xamarin.Forms.Platform.iOS.ShellItemTransition : object {
    public sealed virtual Task Transition(IShellItemRenderer oldRenderer, IShellItemRenderer newRenderer);
}
public class Xamarin.Forms.Platform.iOS.ShellNavBarAppearanceTracker : object {
    private UIColor _defaultBarTint;
    private UIColor _defaultTint;
    private UIStringAttributes _defaultTitleAttributes;
    private float _shadowOpacity;
    private CGColor _shadowColor;
    public sealed virtual void UpdateLayout(UINavigationController controller);
    public sealed virtual void ResetAppearance(UINavigationController controller);
    public sealed virtual void SetAppearance(UINavigationController controller, ShellAppearance appearance);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public virtual void SetHasShadow(UINavigationController controller, bool hasShadow);
}
public class Xamarin.Forms.Platform.iOS.ShellPageRendererTracker : object {
    [CompilerGeneratedAttribute]
private bool <IsRootPage>k__BackingField;
    private IShellContext _context;
    private bool _disposed;
    private FlyoutBehavior _flyoutBehavior;
    private WeakReference`1<UIViewController> _rendererRef;
    private IShellSearchResultsRenderer _resultsRenderer;
    private UISearchController _searchController;
    private SearchHandler _searchHandler;
    private Page _page;
    private NSCache _nSCache;
    private SearchHandlerAppearanceTracker _searchHandlerAppearanceTracker;
    [CompilerGeneratedAttribute]
private BackButtonBehavior <BackButtonBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private UINavigationItem <NavigationItem>k__BackingField;
    public bool IsRootPage { get; public set; }
    public UIViewController ViewController { get; public set; }
    public Page Page { get; public set; }
    private BackButtonBehavior BackButtonBehavior { get; private set; }
    private UINavigationItem NavigationItem { get; private set; }
    private SearchHandler SearchHandler { get; private set; }
    public ShellPageRendererTracker(IShellContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRootPage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsRootPage(bool value);
    public sealed virtual UIViewController get_ViewController();
    public sealed virtual void set_ViewController(UIViewController value);
    public sealed virtual Page get_Page();
    public sealed virtual void set_Page(Page value);
    [CompilerGeneratedAttribute]
private BackButtonBehavior get_BackButtonBehavior();
    [CompilerGeneratedAttribute]
private void set_BackButtonBehavior(BackButtonBehavior value);
    [CompilerGeneratedAttribute]
private UINavigationItem get_NavigationItem();
    [CompilerGeneratedAttribute]
private void set_NavigationItem(UINavigationItem value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<OnFlyoutBehaviorChanged>d__29")]
public sealed virtual void OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    protected virtual void HandleShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<OnBackButtonBehaviorPropertyChanged>d__31")]
protected virtual void OnBackButtonBehaviorPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateTabBarVisible();
    protected virtual void UpdateTitle();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<OnPageSet>d__35")]
protected virtual void OnPageSet(Page oldPage, Page newPage);
    protected virtual void OnRendererSet();
    protected virtual void UpdateTitleView();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<UpdateToolbarItems>d__38")]
protected virtual Task UpdateToolbarItems();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<UpdateLeftToolbarItems>d__39")]
private Task UpdateLeftToolbarItems();
    private void LeftBarButtonItemHandler(UIViewController controller, bool isRootPage);
    private UIImage DrawHamburger();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<OnToolbarItemsChanged>d__42")]
private void OnToolbarItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<SetBackButtonBehavior>d__43")]
private void SetBackButtonBehavior(BackButtonBehavior value);
    private void OnBackButtonCommandCanExecuteChanged(object sender, EventArgs e);
    private SearchHandler get_SearchHandler();
    private void set_SearchHandler(SearchHandler value);
    protected virtual void OnSearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void RemoveSearchController(UINavigationItem navigationItem);
    protected virtual void UpdateSearchIsEnabled(UISearchController searchController);
    protected virtual void UpdateSearchVisibility(UISearchController searchController);
    private void UpdateFlowDirection();
    private void AttachSearchController();
    private void BookmarkButtonClicked(object sender, EventArgs e);
    private void DettachSearchController();
    private void OnSearchItemSelected(object sender, object e);
    private void SearchButtonClicked(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellPageRendererTracker/<SetSearchBarIcon>d__59")]
private void SetSearchBarIcon(UISearchBar searchBar, ImageSource source, UISearchBarIcon icon);
    private void PageAppearing(object sender, EventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <UpdateLeftToolbarItems>b__39_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <UpdateLeftToolbarItems>b__39_1(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <AttachSearchController>b__54_0(UISearchController sc);
}
public class Xamarin.Forms.Platform.iOS.ShellRenderer : UIViewController {
    private IShellItemRenderer _currentShellItemRenderer;
    private bool _disposed;
    private IShellFlyoutRenderer _flyoutRenderer;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    private bool Xamarin.Forms.Platform.iOS.IShellContext.AllowFlyoutGesture { get; }
    private IShellItemRenderer Xamarin.Forms.Platform.iOS.IShellContext.CurrentShellItemRenderer { get; }
    private IShellFlyoutRenderer FlyoutRenderer { get; private set; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public Shell Shell { get; }
    public UIViewController ViewController { get; }
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IShellContext.get_AllowFlyoutGesture();
    private sealed virtual override IShellItemRenderer Xamarin.Forms.Platform.iOS.IShellContext.get_CurrentShellItemRenderer();
    private sealed virtual override IShellNavBarAppearanceTracker Xamarin.Forms.Platform.iOS.IShellContext.CreateNavBarAppearanceTracker();
    private sealed virtual override IShellPageRendererTracker Xamarin.Forms.Platform.iOS.IShellContext.CreatePageRendererTracker();
    private sealed virtual override IShellFlyoutContentRenderer Xamarin.Forms.Platform.iOS.IShellContext.CreateShellFlyoutContentRenderer();
    private sealed virtual override IShellSearchResultsRenderer Xamarin.Forms.Platform.iOS.IShellContext.CreateShellSearchResultsRenderer();
    private sealed virtual override IShellSectionRenderer Xamarin.Forms.Platform.iOS.IShellContext.CreateShellSectionRenderer(ShellSection shellSection);
    private sealed virtual override IShellTabBarAppearanceTracker Xamarin.Forms.Platform.iOS.IShellContext.CreateTabBarAppearanceTracker();
    private IShellFlyoutRenderer get_FlyoutRenderer();
    private void set_FlyoutRenderer(IShellFlyoutRenderer value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    public sealed virtual UIView get_NativeView();
    public sealed virtual Shell get_Shell();
    public sealed virtual UIViewController get_ViewController();
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual void RegisterEffect(Effect effect);
    public sealed virtual void SetElement(VisualElement element);
    public virtual void SetElementSize(Size size);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual IShellFlyoutRenderer CreateFlyoutRenderer();
    protected virtual IShellNavBarAppearanceTracker CreateNavBarAppearanceTracker();
    protected virtual IShellPageRendererTracker CreatePageRendererTracker();
    protected virtual IShellFlyoutContentRenderer CreateShellFlyoutContentRenderer();
    protected virtual IShellItemRenderer CreateShellItemRenderer(ShellItem item);
    protected virtual IShellItemTransition CreateShellItemTransition();
    protected virtual IShellSearchResultsRenderer CreateShellSearchResultsRenderer();
    protected virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection shellSection);
    protected virtual IShellTabBarAppearanceTracker CreateTabBarAppearanceTracker();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnCurrentItemChanged();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFlowDirection(bool readdViews);
    protected virtual void OnElementSet(Shell element);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellRenderer/<SetCurrentShellItemController>d__50")]
protected void SetCurrentShellItemController(IShellItemRenderer value);
    protected virtual void UpdateBackgroundColor();
    private void SetupCurrentShellItem();
}
public class Xamarin.Forms.Platform.iOS.ShellScrollViewTracker : object {
    private bool _disposed;
    private bool _isInShell;
    private bool _isInItems;
    private IVisualElementRenderer _renderer;
    private UIScrollView _scrollView;
    private ShellSection _shellSection;
    private Thickness _lastInset;
    private double _tabThickness;
    private IShellSectionController ShellSectionController { get; }
    public ShellScrollViewTracker(IVisualElementRenderer renderer);
    private sealed virtual override void Xamarin.Forms.IShellContentInsetObserver.OnInsetChanged(Thickness inset, double tabThickness);
    private IShellSectionController get_ShellSectionController();
    public void OnLayoutSubviews();
    public bool Reset();
    private void UpdateContentInset(Thickness inset, double tabThickness);
    private void UpdateVerticalBounce();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.iOS.ShellSearchResultsRenderer : UITableViewController {
    private IShellContext _context;
    private DataTemplate _defaultTemplate;
    [CompilerGeneratedAttribute]
private EventHandler`1<object> ItemSelected;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <DeleteRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <InsertRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <ReloadRowsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <ReloadSectionsAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchHandler <SearchHandler>k__BackingField;
    private SearchHandler Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.SearchHandler { get; private set; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.ViewController { get; }
    private DataTemplate DefaultTemplate { get; }
    protected UITableViewRowAnimation DeleteRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation InsertRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadRowsAnimation { get; protected set; }
    protected UITableViewRowAnimation ReloadSectionsAnimation { get; protected set; }
    private ISearchHandlerController SearchController { get; }
    private SearchHandler SearchHandler { get; private set; }
    public ShellSearchResultsRenderer(IShellContext context);
    private sealed virtual override SearchHandler Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.get_SearchHandler();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.set_SearchHandler(SearchHandler value);
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellSearchResultsRenderer.get_ViewController();
    private DataTemplate get_DefaultTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ItemSelected(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ItemSelected(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_DeleteRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_DeleteRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_InsertRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_InsertRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_ReloadRowsAnimation();
    [CompilerGeneratedAttribute]
protected void set_ReloadRowsAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
protected UITableViewRowAnimation get_ReloadSectionsAnimation();
    [CompilerGeneratedAttribute]
protected void set_ReloadSectionsAnimation(UITableViewRowAnimation value);
    private ISearchHandlerController get_SearchController();
    [CompilerGeneratedAttribute]
private SearchHandler get_SearchHandler();
    [CompilerGeneratedAttribute]
private void set_SearchHandler(SearchHandler value);
    protected virtual void Dispose(bool disposing);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual nint RowsInSection(UITableView tableView, nint section);
    private NSIndexPath[] GetPaths(int section, int index, int count);
    private void OnListProxyChanged(object sender, ListProxyChangedEventArgs e);
    private void OnProxyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnSearchHandlerSet();
    [CompilerGeneratedAttribute]
private object <get_DefaultTemplate>b__8_0();
}
public class Xamarin.Forms.Platform.iOS.ShellSectionRenderer : UINavigationController {
    [CompilerGeneratedAttribute]
private bool <IsInMoreTab>k__BackingField;
    private IShellContext _context;
    private Dictionary`2<Element, IShellPageRendererTracker> _trackers;
    private IShellNavBarAppearanceTracker _appearanceTracker;
    private Dictionary`2<UIViewController, TaskCompletionSource`1<bool>> _completionTasks;
    private Page _displayedPage;
    private bool _disposed;
    private bool _firstLayoutCompleted;
    private TaskCompletionSource`1<bool> _popCompletionTask;
    private IShellSectionRootRenderer _renderer;
    private ShellSection _shellSection;
    private bool _ignorePopCall;
    public bool IsInMoreTab { get; public set; }
    public ShellSection ShellSection { get; public set; }
    private IShellSectionController ShellSectionController { get; }
    public UIViewController ViewController { get; }
    public ShellSectionRenderer(IShellContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInMoreTab();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInMoreTab(bool value);
    public sealed virtual ShellSection get_ShellSection();
    public sealed virtual void set_ShellSection(ShellSection value);
    private IShellSectionController get_ShellSectionController();
    public sealed virtual UIViewController get_ViewController();
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    [ExportAttribute("navigationBar:shouldPopItem:")]
[PreserveAttribute]
public bool ShouldPopItem(UINavigationBar navigationBar, UINavigationItem item);
    public virtual void ViewWillAppear(bool animated);
    internal void UpdateFlowDirection();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IDisconnectable.Disconnect();
    protected virtual void Dispose(bool disposing);
    protected virtual void HandleShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual IShellSectionRootRenderer CreateShellSectionRootRenderer(ShellSection shellSection, IShellContext shellContext);
    protected virtual void LoadPages();
    protected virtual void OnDisplayedPageChanged(Page page);
    protected virtual void OnInsertRequested(NavigationRequestedEventArgs e);
    protected virtual void OnNavigationRequested(object sender, NavigationRequestedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellSectionRenderer/<OnPopRequested>d__38")]
protected virtual void OnPopRequested(NavigationRequestedEventArgs e);
    public virtual UIViewController[] PopToRootViewController(bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellSectionRenderer/<ProcessPopToRoot>d__40")]
private void ProcessPopToRoot();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellSectionRenderer/<OnPopToRootRequested>d__41")]
protected virtual void OnPopToRootRequested(NavigationRequestedEventArgs e);
    protected virtual void OnPushRequested(NavigationRequestedEventArgs e);
    protected virtual void OnRemoveRequested(NavigationRequestedEventArgs e);
    protected virtual void OnShellSectionSet();
    protected virtual void UpdateTabBarItem();
    private void DisposePage(Page page, bool calledFromDispose);
    private Element ElementForViewController(UIViewController viewController);
    private void OnDisplayedPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void PushPage(Page page, bool animated, TaskCompletionSource`1<bool> completionSource);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.ShellSectionRenderer/<SendPoppedOnCompletion>d__50")]
private void SendPoppedOnCompletion(Task popTask);
    private bool ShouldPop();
    private void UpdateNavigationBarHidden();
    private void UpdateNavigationBarHasShadow();
    private void UpdateShadowImages();
    [CompilerGeneratedAttribute]
private void <ShouldPopItem>b__24_0();
    [CompilerGeneratedAttribute]
private void <UpdateTabBarItem>b__45_0(UIImage icon);
}
public class Xamarin.Forms.Platform.iOS.ShellSectionRootHeader : UICollectionViewController {
    private Color _defaultBackgroundColor;
    private Color _defaultForegroundColor;
    private Color _defaultUnselectedColor;
    private static NSString CellId;
    private IShellContext _shellContext;
    private UIView _bar;
    private UIView _bottomShadow;
    private Color _selectedColor;
    private Color _unselectedColor;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private double <SelectedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    public double SelectedIndex { get; public set; }
    public ShellSection ShellSection { get; public set; }
    private IShellSectionController ShellSectionController { get; }
    public UIViewController ViewController { get; }
    [PreserveAttribute]
public ShellSectionRootHeader(IShellContext shellContext);
    private static ShellSectionRootHeader();
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    protected virtual void ResetAppearance();
    protected virtual void SetAppearance(ShellAppearance appearance);
    private void SetValues(Color backgroundColor, Color foregroundColor, Color unselectedColor);
    [CompilerGeneratedAttribute]
public double get_SelectedIndex();
    [CompilerGeneratedAttribute]
public void set_SelectedIndex(double value);
    [CompilerGeneratedAttribute]
public sealed virtual ShellSection get_ShellSection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShellSection(ShellSection value);
    private IShellSectionController get_ShellSectionController();
    public sealed virtual UIViewController get_ViewController();
    public virtual bool CanMoveItem(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual nint GetItemsCount(UICollectionView collectionView, nint section);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual nint NumberOfSections(UICollectionView collectionView);
    public virtual bool ShouldSelectItem(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    protected virtual Type GetCellType();
    protected virtual void Dispose(bool disposing);
    protected void LayoutBar();
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateSelectedIndex(bool animated);
    private void OnShellSectionItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ReloadData();
}
public class Xamarin.Forms.Platform.iOS.ShellSectionRootRenderer : UIViewController {
    private static int HeaderHeight;
    private IShellContext _shellContext;
    private UIView _blurView;
    private UIView _containerArea;
    private ShellContent _currentContent;
    private int _currentIndex;
    private IShellSectionRootHeader _header;
    private IVisualElementRenderer _isAnimatingOut;
    private Dictionary`2<ShellContent, IVisualElementRenderer> _renderers;
    private IShellPageRendererTracker _tracker;
    private bool _didLayoutSubviews;
    private int _lastTabThickness;
    private Thickness _lastInset;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    private bool Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.ShowNavBar { get; }
    private UIViewController Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.ViewController { get; }
    private ShellSection ShellSection { get; private set; }
    private IShellSectionController ShellSectionController { get; }
    public ShellSectionRootRenderer(ShellSection shellSection, IShellContext shellContext);
    private sealed virtual override bool Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.get_ShowNavBar();
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellSectionRootRenderer.get_ViewController();
    [CompilerGeneratedAttribute]
private ShellSection get_ShellSection();
    [CompilerGeneratedAttribute]
private void set_ShellSection(ShellSection value);
    private IShellSectionController get_ShellSectionController();
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewSafeAreaInsetsDidChange();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IDisconnectable.Disconnect();
    protected virtual void Dispose(bool disposing);
    protected virtual void LayoutRenderers();
    protected virtual void LoadRenderers();
    protected virtual void HandleShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual IShellSectionRootHeader CreateShellSectionRootHeader(IShellContext shellContext);
    protected virtual void UpdateHeaderVisibility();
    private void UpdateFlowDirection();
    private void OnShellSectionItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private IVisualElementRenderer SetPageRenderer(Page page, ShellContent shellContent);
    private void LayoutHeader();
}
public class Xamarin.Forms.Platform.iOS.ShellTabBarAppearanceTracker : SafeShellTabBarAppearanceTracker {
}
public class Xamarin.Forms.Platform.iOS.ShellTableViewController : UITableViewController {
    private IShellContext _context;
    private UIContainerView _headerView;
    private ShellTableViewSource _source;
    private double _headerMin;
    private double _headerOffset;
    private double _headerSize;
    private bool _isDisposed;
    private Action`1<Element> _onElementSelected;
    private IShellController ShellController { get; }
    private double HeaderMax { get; }
    private double HeaderTopMargin { get; }
    public ShellTableViewController(IShellContext context, UIContainerView headerView, Action`1<Element> onElementSelected);
    private IShellController get_ShellController();
    protected ShellTableViewSource CreateShellTableViewSource();
    private void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnHeaderSizeChanged(object sender, EventArgs e);
    private void OnStructureChanged(object sender, EventArgs e);
    private void UpdateVerticalScrollMode();
    public void LayoutParallax();
    private void SetHeaderContentInset();
    public virtual void ViewDidLoad();
    protected virtual void Dispose(bool disposing);
    private void OnScrolled(object sender, UIScrollView e);
    private double get_HeaderMax();
    private double get_HeaderTopMargin();
}
public class Xamarin.Forms.Platform.iOS.ShellTableViewSource : UITableViewSource {
    private IShellContext _context;
    private Action`1<Element> _onElementSelected;
    private List`1<List`1<Element>> _groups;
    private Dictionary`2<Element, View> _views;
    [CompilerGeneratedAttribute]
private EventHandler`1<UIScrollView> ScrolledEvent;
    private IShellController ShellController { get; }
    public List`1<List`1<Element>> Groups { get; }
    protected DataTemplate DefaultItemTemplate { get; }
    protected DataTemplate DefaultMenuItemTemplate { get; }
    public ShellTableViewSource(IShellContext context, Action`1<Element> onElementSelected);
    private IShellController get_ShellController();
    [CompilerGeneratedAttribute]
public void add_ScrolledEvent(EventHandler`1<UIScrollView> value);
    [CompilerGeneratedAttribute]
public void remove_ScrolledEvent(EventHandler`1<UIScrollView> value);
    public List`1<List`1<Element>> get_Groups();
    protected virtual DataTemplate get_DefaultItemTemplate();
    protected virtual DataTemplate get_DefaultMenuItemTemplate();
    public void ClearCache();
    public virtual nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat GetHeightForFooter(UITableView tableView, nint section);
    public virtual UIView GetViewForFooter(UITableView tableView, nint section);
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nint RowsInSection(UITableView tableview, nint section);
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual void WillDisplay(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.SizeExtensions : object {
    [ExtensionAttribute]
public static CGSize ToSizeF(Size size);
}
public class Xamarin.Forms.Platform.iOS.SizeThatFitsDelegate : MulticastDelegate {
    public SizeThatFitsDelegate(object object, IntPtr method);
    public virtual Nullable`1<CGSize> Invoke(CGSize size);
    public virtual IAsyncResult BeginInvoke(CGSize size, AsyncCallback callback, object object);
    public virtual Nullable`1<CGSize> EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.iOS.SlideFlyoutTransition : object {
    public sealed virtual void LayoutViews(CGRect bounds, nfloat openPercent, UIView flyout, UIView shell, FlyoutBehavior behavior);
}
public class Xamarin.Forms.Platform.iOS.SliderRenderer : ViewRenderer`2<Slider, UISlider> {
    private CGSize _fitSize;
    private UIColor defaultmintrackcolor;
    private UIColor defaultmaxtrackcolor;
    private UIColor defaultthumbcolor;
    private UITapGestureRecognizer _sliderTapRecognizer;
    private bool _disposed;
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    private void UpdateSliderColors();
    private void UpdateMinimumTrackColor();
    private void UpdateMaximumTrackColor();
    private void UpdateThumbColor();
    private void UpdateThumbImage();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnControlValueChanged(object sender, EventArgs eventArgs);
    private void OnTouchDownControlEvent(object sender, EventArgs e);
    private void OnTouchUpControlEvent(object sender, EventArgs e);
    private void UpdateTapRecognizer();
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void UpdateValue();
    [CompilerGeneratedAttribute]
private void <UpdateThumbImage>b__14_0(UIImage uiimage);
    [CompilerGeneratedAttribute]
private void <UpdateTapRecognizer>b__19_0(UITapGestureRecognizer recognizer);
}
internal class Xamarin.Forms.Platform.iOS.SnapHelpers : object {
    public static CGPoint AdjustContentOffset(CGPoint proposedContentOffset, CGRect itemFrame, CGRect viewport, SnapPointsAlignment alignment, UICollectionViewScrollDirection scrollDirection);
    public static CGPoint FindAlignmentTarget(SnapPointsAlignment snapPointsAlignment, CGPoint contentOffset, UICollectionView collectionView, UICollectionViewScrollDirection scrollDirection);
    public static UICollectionViewLayoutAttributes FindBestSnapCandidate(UICollectionViewLayoutAttributes[] items, CGRect viewport, CGPoint alignmentTarget);
    private static nfloat Area(CGRect rect);
    private static CGPoint Center(CGRect rect);
    private static nfloat DistanceSquared(CGRect rect, CGPoint target);
    private static int Clamp(int n, int min, int max);
    private static nfloat FindAlignmentTarget(SnapPointsAlignment snapPointsAlignment, nfloat start, nfloat startInset, nfloat end, nfloat endInset);
    private static CGPoint GetViewportOffset(CGRect itemFrame, CGRect viewport, SnapPointsAlignment snapPointsAlignment, UICollectionViewScrollDirection scrollDirection);
    private static bool IsAtLeastHalfVisible(UICollectionViewLayoutAttributes item, CGRect viewport);
    private static UICollectionViewLayoutAttributes Nearer(UICollectionViewLayoutAttributes a, UICollectionViewLayoutAttributes b, CGPoint target);
    public static UICollectionViewLayoutAttributes FindNextItem(UICollectionViewLayoutAttributes[] items, UICollectionViewScrollDirection direction, int step, CGPoint scrollingVelocity, int currentIndex);
}
public class Xamarin.Forms.Platform.iOS.StepperRenderer : ViewRenderer`2<Stepper, UIStepper> {
    private bool _disposed;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnValueChanged(object sender, EventArgs e);
    private void UpdateIncrement();
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void UpdateValue();
}
public class Xamarin.Forms.Platform.iOS.StreamImagesourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.StreamImagesourceHandler/<LoadImageAsync>d__1")]
public sealed virtual Task`1<UIImage> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.StreamImagesourceHandler/<LoadImageAnimationAsync>d__2")]
public sealed virtual Task`1<FormsCAKeyFrameAnimation> LoadImageAnimationAsync(ImageSource imagesource, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.iOS.StructuredItemsViewController`1 : ItemsViewController`1<TItemsView> {
    public static int HeaderTag;
    public static int FooterTag;
    private bool _disposed;
    private UIView _headerUIView;
    private VisualElement _headerViewFormsElement;
    private UIView _footerUIView;
    private VisualElement _footerViewFormsElement;
    protected bool IsHorizontal { get; }
    public StructuredItemsViewController`1(TItemsView structuredItemsView, ItemsViewLayout layout);
    protected virtual void Dispose(bool disposing);
    protected virtual bool get_IsHorizontal();
    protected virtual CGRect DetermineEmptyViewFrame();
    public virtual void ViewWillLayoutSubviews();
    internal void UpdateFooterView();
    internal void UpdateHeaderView();
    internal void UpdateSubview(object view, DataTemplate viewTemplate, nint viewTag, UIView& uiView, VisualElement& formsElement);
    private void UpdateHeaderFooterPosition();
    protected virtual void HandleFormsElementMeasureInvalidated(VisualElement formsElement);
    internal void UpdateLayoutMeasurements();
}
public class Xamarin.Forms.Platform.iOS.StructuredItemsViewRenderer`2 : ItemsViewRenderer`2<TItemsView, TViewController> {
    protected virtual TViewController CreateController(TItemsView itemsView, ItemsViewLayout layout);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual ItemsViewLayout SelectLayout();
    protected virtual void UpdateHeaderView();
    protected virtual void UpdateFooterView();
    public virtual void LayoutSubviews();
}
public class Xamarin.Forms.Platform.iOS.SwipeViewRenderer : ViewRenderer`2<SwipeView, UIView> {
    private static float MinimumOpenSwipeThresholdPercentage;
    private static float OpenSwipeThresholdPercentage;
    private static double SwipeThreshold;
    private static double SwipeItemWidth;
    private static double SwipeAnimationDuration;
    private static double SwipeMinimumDelta;
    private Dictionary`2<ISwipeItem, object> _swipeItems;
    private UITapGestureRecognizer _tapGestureRecognizer;
    private UIPanGestureRecognizer _panGestureRecognizer;
    private View _scrollParent;
    private UIView _contentView;
    private UIStackView _actionView;
    private SwipeTransitionMode _swipeTransitionMode;
    private Nullable`1<SwipeDirection> _swipeDirection;
    private CGPoint _initialPoint;
    private bool _isTouchDown;
    private bool _isSwiping;
    private double _swipeOffset;
    private double _swipeThreshold;
    private CGRect _originalBounds;
    private List`1<CGRect> _swipeItemsRect;
    private double _previousScrollX;
    private double _previousScrollY;
    private int _previousFirstVisibleIndex;
    private bool _isSwipeEnabled;
    private bool _isScrollEnabled;
    private bool _isResettingSwipe;
    private bool _isOpen;
    private bool _isDisposed;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SwipeView> e);
    protected virtual UIView CreateNativeControl();
    public virtual void WillMoveToWindow(UIWindow window);
    public virtual void LayoutSubviews();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    public virtual void TouchesCancelled(NSSet touches, UIEvent evt);
    protected virtual void Dispose(bool disposing);
    public virtual UIView HitTest(CGPoint point, UIEvent uievent);
    private UIView HitTest(UIView view, CGPoint point, UIEvent uievent);
    private bool OnShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch);
    private void UpdateContent();
    private void HandleTap();
    private void HandlePan(UIPanGestureRecognizer panGestureRecognizer);
    private UIView CreateEmptyContent();
    private void UpdateIsSwipeEnabled();
    private bool HasSwipeItems();
    private bool IsHorizontalSwipe();
    private bool IsValidSwipeItems(SwipeItems swipeItems);
    private void UpdateSwipeItems();
    private void LayoutSwipeItems(List`1<UIView> childs);
    private List`1<UIView> GetNativeSwipeItems();
    private void OnSwipeItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateIsVisibleSwipeItem(ISwipeItem item);
    private UIButton CreateSwipeItem(SwipeItem formsSwipeItem);
    private UIView CreateSwipeItemView(SwipeItemView formsSwipeItemView);
    private void UpdateSwipeItemViewLayout(SwipeItemView swipeItemView);
    private void UpdateSwipeTransitionMode();
    private void UpdateSwipeItemInsets(UIButton button, float spacing);
    private Color GetSwipeItemColor(Color backgroundColor);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.SwipeViewRenderer/<UpdateSwipeItemIconImage>d__62")]
private void UpdateSwipeItemIconImage(UIButton swipeButton, SwipeItem swipeItem);
    private UIImage MaxResizeSwipeItemIconImage(UIImage sourceImage, nfloat maxWidth, nfloat maxHeight);
    private void HandleTouchInteractions(GestureStatus status, CGPoint point);
    private void ProcessTouchDown(CGPoint point);
    private void ProcessTouchMove(CGPoint point);
    private void ProcessTouchUp(CGPoint point);
    private void IsParentScrollEnabled(bool scrollEnabled);
    private bool CanProcessTouchSwipeItems(CGPoint point);
    private bool TouchInsideContent(CGPoint point);
    private bool TouchInsideContent(double x1, double y1, double x2, double y2, double x, double y);
    private SwipeItems GetSwipeItemsByDirection();
    private void Swipe();
    private double ValidateSwipeOffset(double offset);
    private void UnsubscribeSwipeItemEvents();
    private void DisposeSwipeItems();
    private void ResetSwipeToInitialPosition();
    private void ResetSwipe(bool animated);
    private void ValidateSwipeThreshold();
    private void SwipeToThreshold(bool animated);
    private double GetSwipeThreshold();
    private double GetSwipeThreshold(SwipeItems swipeItems);
    private double CalculateSwipeThreshold();
    private double ValidateSwipeThreshold(double swipeThreshold);
    private Size GetSwipeItemSize(ISwipeItem swipeItem);
    private double GetSwipeItemHeight();
    private bool ValidateSwipeDirection();
    private double GetSwipeOffset(CGPoint initialPoint, CGPoint endPoint);
    private void ProcessTouchSwipeItems(CGPoint point);
    private UIViewController GetViewController();
    private UINavigationController GetUINavigationController(UIViewController controller);
    private void ExecuteSwipeItem(ISwipeItem item);
    private void UpdateIsOpen(bool isOpen);
    private void OnParentScrolled(object sender, ScrolledEventArgs e);
    private void OnParentScrolled(object sender, ItemsViewScrolledEventArgs e);
    private void OnOpenRequested(object sender, OpenSwipeEventArgs e);
    private void ProgrammaticallyOpenSwipeItem(OpenSwipeItem openSwipeItem);
    private void OnCloseRequested(object sender, EventArgs e);
    private void RaiseSwipeStarted();
    private void RaiseSwipeChanging();
    private void RaiseSwipeEnded();
    [CompilerGeneratedAttribute]
private void <ResetSwipe>b__78_0();
    [CompilerGeneratedAttribute]
private void <ResetSwipe>b__78_1();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__80_0();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__80_1();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__80_2();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__80_3();
}
public class Xamarin.Forms.Platform.iOS.SwitchCellRenderer : CellRenderer {
    private static string CellName;
    private UIColor _defaultOnColor;
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void OnSwitchValueChanged(object sender, EventArgs eventArgs);
    private void UpdateFlowDirection(CellTableViewCell cell, SwitchCell switchCell);
    private void UpdateIsEnabled(CellTableViewCell cell, SwitchCell switchCell);
    private void UpdateOnColor(CellTableViewCell cell, SwitchCell switchCell);
}
public class Xamarin.Forms.Platform.iOS.SwitchRenderer : ViewRenderer`2<Switch, UISwitch> {
    private UIColor _defaultOnColor;
    private UIColor _defaultThumbColor;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    private void UpdateOnColor();
    private void UpdateThumbColor();
    private void OnControlValueChanged(object sender, EventArgs e);
    private void OnElementToggled(object sender, EventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.iOS.TabbedRenderer : UITabBarController {
    private bool _barBackgroundColorWasSet;
    private bool _barTextColorWasSet;
    private UIColor _defaultBarTextColor;
    private bool _defaultBarTextColorSet;
    private UIColor _defaultBarColor;
    private bool _defaultBarColorSet;
    private Nullable`1<bool> _defaultBarTranslucent;
    private bool _loaded;
    private Size _queuedSize;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page Page { get; }
    public UIViewController SelectedViewController { get; public set; }
    protected TabbedPage Tabbed { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    private Page get_Page();
    public virtual UIViewController get_SelectedViewController();
    public virtual void set_SelectedViewController(UIViewController value);
    protected TabbedPage get_Tabbed();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private UIViewController GetViewController(Page page);
    private void HandleFinishedCustomizingViewControllers(object sender, UITabBarCustomizeChangeEventArgs e);
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    private void UpdateCurrentPagePreferredStatusBarUpdateAnimation();
    private void UpdatePrefersStatusBarHiddenOnPages();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    private void UpdatePrefersHomeIndicatorAutoHiddenOnPages();
    private void Reset();
    private void SetControllers();
    private void SetupPage(Page page, int index);
    private void TeardownPage(Page page, int index);
    private void UpdateBarBackgroundColor();
    private void UpdateBarBackground();
    private void UpdateBarTextColor();
    private void UpdateBarTranslucent();
    private void UpdateChildrenOrderIndex(UIViewController[] viewControllers);
    private void UpdateCurrentPage();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.TabbedRenderer/<SetTabBarItem>d__59")]
private void SetTabBarItem(IVisualElementRenderer renderer);
    private void UpdateSelectedTabColors();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.TabbedRenderer/<GetIcon>d__61")]
protected virtual Task`1<Tuple`2<UIImage, UIImage>> GetIcon(Page page);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__40_0(object o, int i, bool c);
    [CompilerGeneratedAttribute]
private void <OnPagesChanged>b__40_1(object o, int i);
}
public class Xamarin.Forms.Platform.iOS.TabletMasterDetailRenderer : UISplitViewController {
    private UIViewController _detailController;
    private bool _disposed;
    private EventTracker _events;
    private InnerDelegate _innerDelegate;
    private nfloat _masterWidth;
    private EventedViewController _masterController;
    private MasterDetailPage _masterDetailPage;
    private VisualElementTracker _tracker;
    private CGSize _previousSize;
    private CGSize _previousViewDidLayoutSize;
    private UISplitViewControllerDisplayMode _previousDisplayMode;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private Page PageController { get; }
    private Element ElementController { get; }
    private bool IsMasterVisible { get; }
    protected MasterDetailPage MasterDetailPage { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    public UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }
    private Page get_PageController();
    private Element get_ElementController();
    private bool get_IsMasterVisible();
    protected MasterDetailPage get_MasterDetailPage();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual UIViewController get_ViewController();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    private void UpdateMasterBehavior(CGSize newBounds);
    public virtual void ViewWillDisappear(bool animated);
    public virtual void ViewWillLayoutSubviews();
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    public virtual UIViewController ChildViewControllerForStatusBarHidden();
    public virtual UIViewController get_ChildViewControllerForHomeIndicatorAutoHidden();
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void ClearControllers();
    private void HandleMasterPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void ViewWillTransitionToSize(CGSize toSize, IUIViewControllerTransitionCoordinator coordinator);
    private void MasterControllerDidAppear(object sender, EventArgs e);
    private void MasterControllerWillDisappear(object sender, EventArgs e);
    private void PerformButtonSelector();
    private void ToggleMaster();
    private void UpdateBackground();
    private void UpdateControllers();
    private void UpdateFlowDirection();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__55_0(UIImage bgImage);
}
public class Xamarin.Forms.Platform.iOS.TabletShellFlyoutRenderer : UISplitViewController {
    private IShellContext _context;
    private UIViewController _content;
    private bool _isPresented;
    private FlyoutBehavior _flyoutBehavior;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer <FlyoutContent>k__BackingField;
    private UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.ViewController { get; }
    private UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.View { get; }
    private IShellFlyoutContentRenderer FlyoutContent { get; private set; }
    private sealed virtual override UIViewController Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_ViewController();
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.get_View();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IShellFlyoutRenderer.AttachFlyout(IShellContext context, UIViewController content);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    [CompilerGeneratedAttribute]
private IShellFlyoutContentRenderer get_FlyoutContent();
    [CompilerGeneratedAttribute]
private void set_FlyoutContent(IShellFlyoutContentRenderer value);
    private void OnFlyoutContentWillAppear(object sender, EventArgs e);
    private void OnFlyoutContentWillDisappear(object sender, EventArgs e);
    protected virtual void HandleShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void ViewWillAppear(bool animated);
    private void UpdateFlowDirection(bool readdViews);
    protected virtual void ToggleFlyout();
    protected virtual void OnFlyoutIsPresentedChanged();
    public virtual void ViewDidLoad();
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    protected virtual void Dispose(bool disposing);
    private bool TryToUpdatePresentsWithGesture(bool value);
    private bool IsSwipeView(UIView view);
}
public class Xamarin.Forms.Platform.iOS.TableViewModelRenderer : UITableViewSource {
    private Dictionary`2<nint, Cell> _headerCells;
    protected bool HasBoundGestures;
    protected UITableView Table;
    protected TableView View;
    [CompilerGeneratedAttribute]
private bool <AutomaticallyDeselect>k__BackingField;
    public bool AutomaticallyDeselect { get; public set; }
    public TableViewModelRenderer(TableView model);
    [CompilerGeneratedAttribute]
public bool get_AutomaticallyDeselect();
    [CompilerGeneratedAttribute]
public void set_AutomaticallyDeselect(bool value);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat GetHeightForHeader(UITableView tableView, nint section);
    public virtual UIView GetViewForHeader(UITableView tableView, nint section);
    public virtual void WillDisplayHeaderView(UITableView tableView, UIView headerView, nint section);
    public void LongPress(UILongPressGestureRecognizer gesture);
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nint RowsInSection(UITableView tableview, nint section);
    public virtual String[] SectionIndexTitles(UITableView tableView);
    public virtual string TitleForHeader(UITableView tableView, nint section);
    private void BindGestures(UITableView tableview);
    private void Tap(UITapGestureRecognizer gesture);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.iOS.TableViewRenderer : ViewRenderer`2<TableView, UITableView> {
    private static int DefaultRowHeight;
    private KeyboardInsetTracker _insetTracker;
    private UIView _originalBackgroundView;
    private CGRect _previousFrame;
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateNativeWidget();
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    private void SetSource();
    private void UpdateBackgroundView();
    private void UpdateRowHeight();
    private void UpdateEstimatedRowHeight();
    [CompilerGeneratedAttribute]
private UIWindow <OnElementChanged>b__8_0();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__8_1(UIEdgeInsets insets);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__8_2(CGPoint point);
}
public abstract class Xamarin.Forms.Platform.iOS.TemplatedCell : ItemsViewCell {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ContentSizeChanged;
    protected CGSize ConstrainedSize;
    protected nfloat ConstrainedDimension;
    private DataTemplate _currentTemplate;
    private Size _size;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <VisualElementRenderer>k__BackingField;
    internal IVisualElementRenderer VisualElementRenderer { get; private set; }
    public bool Selected { get; public set; }
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
protected TemplatedCell(CGRect frame);
    [CompilerGeneratedAttribute]
public void add_ContentSizeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContentSizeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal IVisualElementRenderer get_VisualElementRenderer();
    [CompilerGeneratedAttribute]
private void set_VisualElementRenderer(IVisualElementRenderer value);
    public virtual void ConstrainTo(CGSize constraint);
    public virtual void ConstrainTo(nfloat constant);
    protected void ClearConstraints();
    public virtual UICollectionViewLayoutAttributes PreferredLayoutAttributesFittingAttributes(UICollectionViewLayoutAttributes layoutAttributes);
    public void Bind(DataTemplate template, object bindingContext, ItemsView itemsView);
    private void SetRenderer(IVisualElementRenderer renderer);
    protected void Layout(CGSize constraints);
    private void ClearSubviews();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    protected abstract virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
    private void MeasureInvalidated(object sender, EventArgs args);
    protected void OnContentSizeChanged();
}
internal static class Xamarin.Forms.Platform.iOS.TemplateHelpers : object {
    public static IVisualElementRenderer CreateRenderer(View view);
    public static ValueTuple`2<UIView, VisualElement> RealizeView(object view, DataTemplate viewTemplate, ItemsView itemsView);
}
public class Xamarin.Forms.Platform.iOS.TextCellRenderer : CellRenderer {
    private Color DefaultDetailColor;
    private Color DefaultTextColor;
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
    protected virtual void HandleCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateAutomationId(CellTableViewCell tvc, TextCell cell);
    protected virtual void HandlePropertyChanged(object sender, PropertyChangedEventArgs args);
    private static void UpdateIsEnabled(CellTableViewCell cell, TextCell entryCell);
}
public class Xamarin.Forms.Platform.iOS.TimePickerRenderer : TimePickerRendererBase`1<UITextField> {
    protected virtual UITextField CreateNativeControl();
}
public abstract class Xamarin.Forms.Platform.iOS.TimePickerRendererBase`1 : ViewRenderer`2<TimePicker, TControl> {
    private UIDatePicker _picker;
    private UIColor _defaultTextColor;
    private bool _disposed;
    private bool _useLegacyColorManagement;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual TControl CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void OnValueChanged(object sender, EventArgs e);
    private void UpdateFlowDirection();
    protected internal virtual void UpdateFont();
    protected internal virtual void UpdateTextColor();
    private void UpdateCharacterSpacing();
    private void UpdateTime();
    private void UpdateElementTime();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ToolbarItemExtensions : object {
    [ExtensionAttribute]
public static UIBarButtonItem ToUIBarButtonItem(ToolbarItem item, bool forceName);
    [ExtensionAttribute]
public static UIBarButtonItem ToUIBarButtonItem(ToolbarItem item, bool forceName, bool forcePrimary);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.TransformExtensions : object {
    [ExtensionAttribute]
public static CGAffineTransform ToCGAffineTransform(Transform transform);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.iOS.UIApplicationExtensions : object {
    [ExtensionAttribute]
public static UIWindow GetKeyWindow(UIApplication application);
}
public class Xamarin.Forms.Platform.iOS.UIContainerCell : UITableViewCell {
    private IVisualElementRenderer _renderer;
    private object _bindingContext;
    [CompilerGeneratedAttribute]
private View <View>k__BackingField;
    public View View { get; }
    public object BindingContext { get; public set; }
    public UIContainerCell(string cellId, View view);
    [CompilerGeneratedAttribute]
public View get_View();
    public object get_BindingContext();
    public void set_BindingContext(object value);
    public virtual void LayoutSubviews();
    private void UpdateVisualState();
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.iOS.UIContainerView : UIView {
    private View _view;
    private IVisualElementRenderer _renderer;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler HeaderSizeChanged;
    [CompilerGeneratedAttribute]
private double <MeasuredHeight>k__BackingField;
    internal double MeasuredHeight { get; private set; }
    public Thickness Margin { get; }
    public UIContainerView(View view);
    [CompilerGeneratedAttribute]
internal void add_HeaderSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_HeaderSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal double get_MeasuredHeight();
    [CompilerGeneratedAttribute]
private void set_MeasuredHeight(double value);
    internal bool MeasureIfNeeded();
    public Thickness get_Margin();
    private void ReMeasure();
    private void OnMeasureInvalidated(object sender, EventArgs e);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.UIViewExtensions : object {
    [ExtensionAttribute]
public static UIImage ConvertToImage(UIView view);
    [ExtensionAttribute]
internal static T GetParentOfType(UIView view);
    [ExtensionAttribute]
public static IEnumerable`1<UIView> Descendants(UIView self);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.iOS.UIViewExtensions/<DescendantsTree>d__3")]
[ExtensionAttribute]
internal static IEnumerable`1<UIView> DescendantsTree(UIView self);
    [ExtensionAttribute]
public static SizeRequest GetSizeRequest(UIView self, double widthConstraint, double heightConstraint, double minimumWidth, double minimumHeight);
    [ExtensionAttribute]
public static void SetBinding(UIView view, string propertyName, BindingBase bindingBase, string updateSourceEventName);
    [ExtensionAttribute]
public static void SetBinding(UIView self, BindableProperty targetProperty, BindingBase binding);
    [ExtensionAttribute]
public static void SetValue(UIView target, BindableProperty targetProperty, object value);
    [ExtensionAttribute]
public static void SetBindingContext(UIView target, object bindingContext, Func`2<UIView, IEnumerable`1<UIView>> getChildren);
    [ExtensionAttribute]
internal static void TransferbindablePropertiesToWrapper(UIView target, View wrapper);
    [ExtensionAttribute]
internal static T FindDescendantView(UIView view);
    [ExtensionAttribute]
internal static UIView FindFirstResponder(UIView view);
}
public class Xamarin.Forms.Platform.iOS.UnEvenTableViewModelRenderer : TableViewModelRenderer {
    public UnEvenTableViewModelRenderer(TableView model);
    public virtual nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath);
}
internal class Xamarin.Forms.Platform.iOS.VerticalCell : WidthConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public VerticalCell(CGRect frame);
    private static VerticalCell();
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.VerticalDefaultCell : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public VerticalDefaultCell(CGRect frame);
    private static VerticalDefaultCell();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.VerticalDefaultSupplementalView : DefaultCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public VerticalDefaultSupplementalView(CGRect frame);
    private static VerticalDefaultSupplementalView();
    public virtual void ConstrainTo(CGSize constraint);
    public virtual CGSize Measure();
}
internal class Xamarin.Forms.Platform.iOS.VerticalSupplementaryView : WidthConstrainedTemplatedCell {
    public static NSString ReuseId;
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public VerticalSupplementaryView(CGRect frame);
    private static VerticalSupplementaryView();
    public virtual CGSize Measure();
}
public class Xamarin.Forms.Platform.iOS.ViewCellRenderer : CellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.ViewExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Page> GetParentPages(Page target);
    [ExtensionAttribute]
internal static T FindParentOfType(VisualElement element);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.iOS.ViewExtensions/<GetParentsPath>d__2")]
[ExtensionAttribute]
internal static IEnumerable`1<Element> GetParentsPath(VisualElement self);
}
public abstract class Xamarin.Forms.Platform.iOS.ViewRenderer : ViewRenderer`2<View, UIView> {
}
public abstract class Xamarin.Forms.Platform.iOS.ViewRenderer`2 : VisualElementRenderer`1<TView> {
    private string _defaultAccessibilityLabel;
    private string _defaultAccessibilityHint;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private UIColor _defaultColor;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> _elementPropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanging;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanged;
    [CompilerGeneratedAttribute]
private TNativeView <Control>k__BackingField;
    private protected bool IsElementOrControlEmpty { get; }
    public TNativeView Control { get; private set; }
    private UIView Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.Control { get; }
    private UIView Xamarin.Forms.Platform.iOS.ITabStop.TabStop { get; }
    protected bool ManageNativeControlLifetime { get; }
    [CompilerGeneratedAttribute]
private void add__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__controlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanged(EventHandler value);
    private protected bool get_IsElementOrControlEmpty();
    protected virtual TNativeView CreateNativeControl();
    [CompilerGeneratedAttribute]
public sealed virtual TNativeView get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(TNativeView value);
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.get_Control();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.add_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.remove_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.add_ControlChanged(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualNativeElementRenderer.remove_ControlChanged(EventHandler value);
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.ITabStop.get_TabStop();
    public virtual void LayoutSubviews();
    public virtual CGSize SizeThatFits(CGSize size);
    protected virtual bool get_ManageNativeControlLifetime();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAccessibilityHint();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetIsAccessibilityElement();
    protected virtual void SetAutomationId(string id);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected void SetNativeControl(TNativeView uiview);
    public virtual void TraitCollectionDidChange(UITraitCollection previousTraitCollection);
    internal virtual void SendVisualElementInitialized(VisualElement element, UIView nativeView);
    private void UpdateBackgroundColor();
    private void UpdateBackground();
    private void UpdateIsEnabled();
    private void UpdateFlowDirection();
    private void ViewOnFocusChangeRequested(object sender, FocusRequestArgs focusRequestArgs);
}
public class Xamarin.Forms.Platform.iOS.VisualElementChangedEventArgs : ElementChangedEventArgs`1<VisualElement> {
    public VisualElementChangedEventArgs(VisualElement oldElement, VisualElement newElement);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.iOS.VisualElementExtensions : object {
    [ExtensionAttribute]
public static IVisualElementRenderer GetRenderer(VisualElement self);
    [ExtensionAttribute]
internal static bool UseLegacyColorManagement(T element);
}
public class Xamarin.Forms.Platform.iOS.VisualElementPackager : object {
    private VisualElement _element;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    private IElementController ElementController { get; }
    protected IVisualElementRenderer Renderer { get; protected set; }
    public VisualElementPackager(IVisualElementRenderer renderer);
    private VisualElementPackager(IVisualElementRenderer renderer, VisualElement element, bool isHeadless);
    private IElementController get_ElementController();
    [CompilerGeneratedAttribute]
protected IVisualElementRenderer get_Renderer();
    [CompilerGeneratedAttribute]
protected void set_Renderer(IVisualElementRenderer value);
    public sealed virtual void Dispose();
    public void Load();
    internal void Disconnect();
    private void Disconnect(VisualElement oldElement);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnChildAdded(VisualElement view);
    protected virtual void OnChildRemoved(VisualElement view);
    private void EnsureChildrenOrder();
    private void OnChildAdded(object sender, ElementEventArgs e);
    private void OnChildRemoved(object sender, ElementEventArgs e);
    private void OnRendererElementChanged(object sender, VisualElementChangedEventArgs args);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
    private void UpdateChildrenOrder(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.iOS.VisualElementRenderer`1 : UIView {
    private UIColor _defaultColor;
    private List`1<EventHandler`1<VisualElementChangedEventArgs>> _elementChangedHandlers;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private string _defaultAccessibilityLabel;
    private string _defaultAccessibilityHint;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private EventTracker _events;
    private VisualElementRendererFlags _flags;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    private UIVisualEffectView _blur;
    private BlurEffectStyle _previousBlur;
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementChangedEventArgs`1<TElement>> ElementChanged;
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TabStop>k__BackingField;
    private UIKeyCommand[] tabCommands;
    public UIColor BackgroundColor { get; public set; }
    public TElement Element { get; private set; }
    protected bool AutoPackage { get; protected set; }
    protected bool AutoTrack { get; protected set; }
    public bool CanBecomeFirstResponder { get; }
    private VisualElement Xamarin.Forms.Platform.iOS.IVisualElementRenderer.Element { get; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    protected int TabIndex { get; protected set; }
    protected bool TabStop { get; protected set; }
    public UIKeyCommand[] KeyCommands { get; }
    public sealed virtual UIColor get_BackgroundColor();
    public sealed virtual void set_BackgroundColor(UIColor value);
    [CompilerGeneratedAttribute]
public sealed virtual TElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TElement value);
    protected bool get_AutoPackage();
    protected void set_AutoPackage(bool value);
    protected bool get_AutoTrack();
    protected void set_AutoTrack(bool value);
    public static void RegisterEffect(Effect effect, UIView container, UIView control);
    public virtual bool get_CanBecomeFirstResponder();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.iOS.IVisualElementRenderer.get_Element();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIView get_NativeView();
    protected internal virtual UIView GetControl();
    private sealed virtual override void Xamarin.Forms.Platform.iOS.IVisualElementRenderer.SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public virtual UIViewController get_ViewController();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
protected int get_TabIndex();
    [CompilerGeneratedAttribute]
protected void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
protected bool get_TabStop();
    [CompilerGeneratedAttribute]
protected void set_TabStop(bool value);
    protected void UpdateTabStop();
    protected void UpdateTabIndex();
    public UIView FocusSearch(bool forwardDirection);
    public virtual UIKeyCommand[] get_KeyCommands();
    [ExportAttribute("tabForward:")]
[PreserveAttribute]
private void TabForward(UIKeyCommand cmd);
    [ExportAttribute("tabBackward:")]
[PreserveAttribute]
private void TabBackward(UIKeyCommand cmd);
    public void SetElement(TElement element);
    public virtual CGSize SizeThatFits(CGSize size);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAccessibilityHint();
    protected virtual void SetAccessibilityLabel();
    protected virtual void SetIsAccessibilityElement();
    protected virtual void SetAutomationId(string id);
    protected virtual void SetBackgroundColor(Color color);
    protected virtual void SetBackground(Brush brush);
    protected virtual void SetBlur(BlurEffectStyle blur);
    protected virtual void UpdateNativeWidget();
    internal virtual void SendVisualElementInitialized(VisualElement element, UIView nativeView);
    private void UpdateClipToBounds();
    private void UpdateParentPageAccessibilityElements();
    private static bool IsOnViewCell(Element element);
    [CompilerGeneratedAttribute]
private void <SetElement>b__62_0(object sender, EventArgs e);
}
[FlagsAttribute]
public enum Xamarin.Forms.Platform.iOS.VisualElementRendererFlags : Enum {
    public int value__;
    public static VisualElementRendererFlags Disposed;
    public static VisualElementRendererFlags AutoTrack;
    public static VisualElementRendererFlags AutoPackage;
}
public class Xamarin.Forms.Platform.iOS.VisualElementTracker : object {
    private static string ClipShapeLayer;
    private EventHandler`1<EventArg`1<VisualElement>> _batchCommittedHandler;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private EventHandler _sizeChangedEventHandler;
    private bool _disposed;
    private VisualElement _element;
    private bool _isInteractive;
    private Rectangle _lastBounds;
    private CALayer _layer;
    private CGPoint _originalAnchor;
    private int _updateCount;
    [CompilerGeneratedAttribute]
private bool <TrackFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler NativeControlUpdated;
    private bool TrackFrame { get; private set; }
    private IVisualElementRenderer Renderer { get; private set; }
    public VisualElementTracker(IVisualElementRenderer renderer);
    public VisualElementTracker(IVisualElementRenderer renderer, bool trackFrame);
    [CompilerGeneratedAttribute]
private bool get_TrackFrame();
    [CompilerGeneratedAttribute]
private void set_TrackFrame(bool value);
    [CompilerGeneratedAttribute]
private IVisualElementRenderer get_Renderer();
    [CompilerGeneratedAttribute]
private void set_Renderer(IVisualElementRenderer value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public void add_NativeControlUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NativeControlUpdated(EventHandler value);
    internal void Disconnect();
    private void Disconnect(VisualElement oldElement);
    protected virtual void Dispose(bool disposing);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleRedrawNeeded(object sender, EventArgs e);
    private void HandleSizeChanged(object sender, EventArgs e);
    private void OnRendererElementChanged(object s, VisualElementChangedEventArgs e);
    private void OnUpdateNativeControl(CALayer caLayer);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
    private void UpdateNativeControl();
    private void UpdateClip();
    private bool ShouldUpdateClip();
}
[ObsoleteAttribute("WebViewRenderer is obsolete as of 4.4.0. Please use the WkWebViewRenderer instead.")]
public class Xamarin.Forms.Platform.iOS.WebViewRenderer : UIWebView {
    private EventTracker _events;
    private bool _ignoreSourceChanges;
    private WebNavigationEvent _lastBackForwardEvent;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private WebView WebView { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private UIView Xamarin.Forms.Platform.iOS.ITabStop.TabStop { get; }
    private WebView get_WebView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual void LoadHtml(string html, string baseUrl);
    public sealed virtual void LoadUrl(string url);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Load();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WebViewRenderer/<OnEvaluateJavaScriptRequested>d__26")]
private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
    private void UpdateCanGoBackForward();
    public sealed virtual UIView get_NativeView();
    public sealed virtual UIViewController get_ViewController();
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.ITabStop.get_TabStop();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
}
internal abstract class Xamarin.Forms.Platform.iOS.WidthConstrainedTemplatedCell : TemplatedCell {
    [ExportAttribute("initWithFrame:")]
[PreserveAttribute]
public WidthConstrainedTemplatedCell(CGRect frame);
    public virtual void ConstrainTo(CGSize constraint);
    protected virtual ValueTuple`2<bool, Size> NeedsContentSizeUpdate(Size currentSize);
}
public class Xamarin.Forms.Platform.iOS.WkWebViewRenderer : WKWebView {
    private EventTracker _events;
    private bool _ignoreSourceChanges;
    private WebNavigationEvent _lastBackForwardEvent;
    private VisualElementPackager _packager;
    private VisualElementTracker _tracker;
    private static WKProcessPool _sharedPool;
    private bool _disposed;
    private static int _sharedPoolCount;
    private static bool _firstLoadFinished;
    private string _pendingUrl;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private HashSet`1<string> _loadedCookies;
    private WebView WebView { get; }
    public VisualElement Element { get; private set; }
    public UIView NativeView { get; }
    public UIViewController ViewController { get; }
    private UIView Xamarin.Forms.Platform.iOS.ITabStop.TabStop { get; }
    [PreserveAttribute]
public WkWebViewRenderer(WKWebViewConfiguration config);
    private static WKWebViewConfiguration CreateConfiguration();
    private WebView get_WebView();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual void SetElement(VisualElement element);
    public sealed virtual void SetElementSize(Size size);
    public sealed virtual void LoadHtml(string html, string baseUrl);
    public virtual void MovedToWindow();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<LoadUrl>d__27")]
public sealed virtual void LoadUrl(string url);
    private bool HasCookiesToLoad(string url);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private Uri CreateUriForCookies(string url);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<GetCookiesFromNativeStore>d__34")]
private Task`1<List`1<NSHttpCookie>> GetCookiesFromNativeStore(string url);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<InitialCookiePreloadIfNecessary>d__35")]
private Task InitialCookiePreloadIfNecessary(string url);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<SyncNativeCookiesToElement>d__36")]
internal Task SyncNativeCookiesToElement(string url);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<SyncNativeCookies>d__37")]
private Task SyncNativeCookies(string url);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<SetCookie>d__38")]
private Task SetCookie(List`1<Cookie> cookies);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<DeleteCookies>d__39")]
private Task DeleteCookies(List`1<NSHttpCookie> cookies);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Load();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<OnEvaluateJavaScriptRequested>d__43")]
private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.iOS.WkWebViewRenderer/<OnReloadRequested>d__46")]
private void OnReloadRequested(object sender, EventArgs eventArgs);
    private void UpdateCanGoBackForward();
    private string GetCookieString(List`1<Cookie> existingCookies);
    public sealed virtual UIView get_NativeView();
    public sealed virtual UIViewController get_ViewController();
    private sealed virtual override UIView Xamarin.Forms.Platform.iOS.ITabStop.get_TabStop();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
}
internal class Xamarin.Forms.StreamWrapper : Stream {
    private Stream _wrapped;
    private IDisposable _additionalDisposable;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamWrapper(Stream wrapped);
    public StreamWrapper(Stream wrapped, IDisposable additionalDisposable);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.StreamWrapper/<GetStreamAsync>d__24")]
public static Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken, HttpClient client);
}
public class Xamarin.Forms.ViewInitializedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UIView <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <View>k__BackingField;
    public UIView NativeView { get; internal set; }
    public VisualElement View { get; internal set; }
    [CompilerGeneratedAttribute]
public UIView get_NativeView();
    [CompilerGeneratedAttribute]
internal void set_NativeView(UIView value);
    [CompilerGeneratedAttribute]
public VisualElement get_View();
    [CompilerGeneratedAttribute]
internal void set_View(VisualElement value);
}
