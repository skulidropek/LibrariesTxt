internal class ThisAssembly : object {
}
public enum Xamarin.Forms.AndroidTitleBarVisibility : Enum {
    public int value__;
    public static AndroidTitleBarVisibility Default;
    public static AndroidTitleBarVisibility Never;
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportCellAttribute : HandlerAttribute {
    public ExportCellAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportImageSourceHandlerAttribute : HandlerAttribute {
    public ExportImageSourceHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportRendererAttribute : HandlerAttribute {
    public ExportRendererAttribute(Type handler, Type target);
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals);
}
internal static class Xamarin.Forms.Flags : object {
    internal static string UseLegacyRenderers;
}
[ExtensionAttribute]
public static class Xamarin.Forms.Forms : object {
    private static int TabletCrossover;
    private static Nullable`1<BuildVersionCodes> s_sdkInt;
    private static Nullable`1<bool> s_is29OrNewer;
    private static Nullable`1<bool> s_isJellyBeanMr1OrNewer;
    private static Nullable`1<bool> s_isLollipopOrNewer;
    private static Nullable`1<bool> s_isMarshmallowOrNewer;
    private static Nullable`1<bool> s_isNougatOrNewer;
    private static Nullable`1<bool> s_isOreoOrNewer;
    private static Nullable`1<bool> s_isPieOrNewer;
    [CompilerGeneratedAttribute]
private static Context <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private static Context <ApplicationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <FlagsSet>k__BackingField;
    private static bool _ColorButtonNormalSet;
    private static Color _ColorButtonNormal;
    [CompilerGeneratedAttribute]
private static Color <ColorButtonNormalOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ViewInitializedEventArgs> ViewInitialized;
    private static IReadOnlyList`1<string> s_flags;
    [ObsoleteAttribute("Context is obsolete as of version 2.5. Please use a local context instead.")]
[EditorBrowsableAttribute("1")]
public static Context Context { get; internal set; }
    internal static Context ApplicationContext { get; private set; }
    public static bool IsInitialized { get; private set; }
    private static bool FlagsSet { get; private set; }
    public static Color ColorButtonNormalOverride { get; public set; }
    internal static BuildVersionCodes SdkInt { get; }
    internal static bool Is29OrNewer { get; }
    internal static bool IsJellyBeanMr1OrNewer { get; }
    internal static bool IsLollipopOrNewer { get; }
    internal static bool IsMarshmallowOrNewer { get; }
    internal static bool IsNougatOrNewer { get; }
    internal static bool IsOreoOrNewer { get; }
    internal static bool IsPieOrNewer { get; }
    public static IReadOnlyList`1<string> Flags { get; }
    private static Forms();
    [CompilerGeneratedAttribute]
public static Context get_Context();
    [CompilerGeneratedAttribute]
internal static void set_Context(Context value);
    [CompilerGeneratedAttribute]
internal static Context get_ApplicationContext();
    [CompilerGeneratedAttribute]
private static void set_ApplicationContext(Context value);
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
private static bool get_FlagsSet();
    [CompilerGeneratedAttribute]
private static void set_FlagsSet(bool value);
    [CompilerGeneratedAttribute]
public static Color get_ColorButtonNormalOverride();
    [CompilerGeneratedAttribute]
public static void set_ColorButtonNormalOverride(Color value);
    internal static BuildVersionCodes get_SdkInt();
    internal static bool get_Is29OrNewer();
    internal static bool get_IsJellyBeanMr1OrNewer();
    internal static bool get_IsLollipopOrNewer();
    internal static bool get_IsMarshmallowOrNewer();
    internal static bool get_IsNougatOrNewer();
    internal static bool get_IsOreoOrNewer();
    internal static bool get_IsPieOrNewer();
    public static float GetFontSizeNormal(Context context);
    public static Color GetColorButtonNormal(Context context);
    public static void Init(Context activity, Bundle bundle);
    public static void Init(Context activity, Bundle bundle, Assembly resourceAssembly);
    public static void Init(InitializationOptions options);
    [ObsoleteAttribute("SetTitleBarVisibility(AndroidTitleBarVisibility) is obsolete as of version 2.5. Please use SetTitleBarVisibility(Activity, AndroidTitleBarVisibility) instead.")]
[EditorBrowsableAttribute("1")]
public static void SetTitleBarVisibility(AndroidTitleBarVisibility visibility);
    public static void SetTitleBarVisibility(Activity activity, AndroidTitleBarVisibility visibility);
    [CompilerGeneratedAttribute]
public static void add_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [ExtensionAttribute]
internal static void SendViewInitialized(VisualElement self, View nativeView);
    private static void SetupInit(Context activity, Assembly resourceAssembly, Nullable`1<InitializationOptions> maybeOptions);
    private static TargetIdiom DetectIdiom(UiMode uiMode);
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    private static Color GetAccentColor(Context context);
    private static Color GetButtonColor(Context context);
}
public class Xamarin.Forms.InitializationOptions : ValueType {
    public Context Activity;
    public Bundle Bundle;
    public Assembly ResourceAssembly;
    public HandlerAttribute[] Handlers;
    public EffectScope[] EffectScopes;
    public InitializationFlags Flags;
    public InitializationOptions(Context activity, Bundle bundle, Assembly resourceAssembly);
}
internal class Xamarin.Forms.Internals.Crc64 : HashAlgorithm {
    private static Crc64 _instance;
    private static UInt64[] Table;
    private ulong crc;
    private ulong length;
    private static UInt32[] _lookup32;
    public static Crc64 Instance { get; }
    private static Crc64();
    public static Crc64 get_Instance();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private static UInt32[] CreateLookup32();
    private static string ByteArrayToHexViaLookup32(Byte[] bytes);
    public static string GetHash(string input);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.AccessibilityExtensions : object {
    [ExtensionAttribute]
public static string SetContentDescription(View Control, Element Element, string _defaultContentDescription);
    [ExtensionAttribute]
public static Nullable`1<bool> SetFocusable(View Control, Element Element, Nullable`1<bool> _defaultFocusable);
    [ExtensionAttribute]
public static Nullable`1<bool> SetFocusable(View Control, Element Element, Nullable`1<bool> _defaultFocusable, Nullable`1<ImportantForAccessibility> _defaultImportantForAccessibility);
    [ExtensionAttribute]
public static string SetHint(TextView Control, Element Element, string _defaultHint);
    [ExtensionAttribute]
public static void SetLabeledBy(View Control, Element Element);
    [ExtensionAttribute]
public static Nullable`1<int> SetLabelFor(View Control, Nullable`1<int> id, Nullable`1<int> _defaultLabelFor);
    [ExtensionAttribute]
public static string SetNavigationContentDescription(Toolbar Control, Element Element, string _defaultNavigationContentDescription);
    [ExtensionAttribute]
public static void SetTitleOrContentDescription(IMenuItem Control, ToolbarItem Element);
    [ExtensionAttribute]
public static void SetTitleOrContentDescription(IMenuItem Control, MenuItem Element);
    private static string ConcatenateNameAndHint(Element Element);
}
[ObsoleteAttribute("ActionSheetRenderer is obsolete as of version 1.3.2. ActionSheet now uses default implementation.")]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Platform.Android.ActionSheetRenderer : Dialog {
    private ActionSheetArguments _arguments;
    private LinearLayout _layout;
    internal ActionSheetRenderer(ActionSheetArguments actionSheetArguments);
    private sealed virtual override void Android.Views.View.IOnClickListener.OnClick(View v);
    public virtual void Cancel();
    public virtual void OnAttachedToWindow();
    protected virtual void OnCreate(Bundle savedInstanceState);
    private Button AddButton(string name);
}
[FlagsAttribute]
public enum Xamarin.Forms.Platform.Android.ActivationFlags : Enum {
    public long value__;
    public static ActivationFlags DisableSetStatusBarColor;
}
public class Xamarin.Forms.Platform.Android.ActivationOptions : ValueType {
    public Bundle Bundle;
    public ActivationFlags Flags;
    public ActivationOptions(Bundle bundle);
}
public class Xamarin.Forms.Platform.Android.ActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, ProgressBar> {
    public ActivityIndicatorRenderer(Context context);
    protected virtual ProgressBar CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateColor();
    private void UpdateVisibility();
}
public static class Xamarin.Forms.Platform.Android.ActivityResultCallbackRegistry : object {
    private static ConcurrentDictionary`2<int, Action`2<Result, Intent>> s_activityResultCallbacks;
    private static int s_nextActivityResultCallbackKey;
    private static ActivityResultCallbackRegistry();
    public static void InvokeCallback(int requestCode, Result resultCode, Intent data);
    internal static int RegisterActivityResultCallback(Action`2<Result, Intent> callback);
    internal static void UnregisterActivityResultCallback(int requestCode);
}
internal class Xamarin.Forms.Platform.Android.AdapterNotifier : object {
    private Adapter _adapter;
    public AdapterNotifier(Adapter adapter);
    public sealed virtual void NotifyDataSetChanged();
    public sealed virtual void NotifyItemChanged(IItemsViewSource source, int startIndex);
    public sealed virtual void NotifyItemInserted(IItemsViewSource source, int startIndex);
    public sealed virtual void NotifyItemMoved(IItemsViewSource source, int fromPosition, int toPosition);
    public sealed virtual void NotifyItemRangeChanged(IItemsViewSource source, int start, int end);
    public sealed virtual void NotifyItemRangeInserted(IItemsViewSource source, int startIndex, int count);
    public sealed virtual void NotifyItemRangeRemoved(IItemsViewSource source, int startIndex, int count);
    public sealed virtual void NotifyItemRemoved(IItemsViewSource source, int startIndex);
    internal bool IsValidAdapter();
}
public class Xamarin.Forms.Platform.Android.AHorizontalScrollView : HorizontalScrollView {
    private ScrollViewRenderer _renderer;
    [CompilerGeneratedAttribute]
private bool <IsBidirectional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Xamarin.Forms.Platform.Android.IScrollView.ScrollBarsInitialized>k__BackingField;
    internal bool IsBidirectional { get; internal set; }
    public bool HorizontalScrollBarEnabled { get; public set; }
    private bool Xamarin.Forms.Platform.Android.IScrollView.ScrollBarsInitialized { get; private set; }
    public AHorizontalScrollView(Context context, ScrollViewRenderer renderer);
    [CompilerGeneratedAttribute]
internal bool get_IsBidirectional();
    [CompilerGeneratedAttribute]
internal void set_IsBidirectional(bool value);
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    public virtual bool OnTouchEvent(MotionEvent ev);
    protected virtual void OnScrollChanged(int l, int t, int oldl, int oldt);
    public virtual void Draw(Canvas canvas);
    public virtual bool get_HorizontalScrollBarEnabled();
    public virtual void set_HorizontalScrollBarEnabled(bool value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IScrollView.AwakenScrollBars();
    [CompilerGeneratedAttribute]
private sealed virtual override bool Xamarin.Forms.Platform.Android.IScrollView.get_ScrollBarsInitialized();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.Platform.Android.IScrollView.set_ScrollBarsInitialized(bool value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.AlignmentExtensions : object {
    [ExtensionAttribute]
internal static TextAlignment ToTextAlignment(TextAlignment alignment);
    [ExtensionAttribute]
internal static GravityFlags ToHorizontalGravityFlags(TextAlignment alignment);
    [ExtensionAttribute]
internal static GravityFlags ToVerticalGravityFlags(TextAlignment alignment);
}
[ObsoleteAttribute("AndroidActivity is obsolete as of version 1.3.0. Please use FormsApplicationActivity instead.")]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Platform.Android.AndroidActivity : FormsApplicationActivity {
}
public class Xamarin.Forms.Platform.Android.AndroidAppIndexProvider : object {
    [CompilerGeneratedAttribute]
private IAppLinks <AppLinks>k__BackingField;
    private static string AppLinksAssemblyName;
    private static string AppLinksClassName;
    public IAppLinks AppLinks { get; }
    public AndroidAppIndexProvider(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual IAppLinks get_AppLinks();
}
internal enum Xamarin.Forms.Platform.Android.AndroidApplicationLifecycleState : Enum {
    public int value__;
    public static AndroidApplicationLifecycleState Uninitialized;
    public static AndroidApplicationLifecycleState OnCreate;
    public static AndroidApplicationLifecycleState OnStart;
    public static AndroidApplicationLifecycleState OnResume;
    public static AndroidApplicationLifecycleState OnPause;
    public static AndroidApplicationLifecycleState OnStop;
    public static AndroidApplicationLifecycleState OnRestart;
    public static AndroidApplicationLifecycleState OnDestroy;
}
internal class Xamarin.Forms.Platform.Android.AndroidGIFImageParser : GIFImageParser {
    private Context _context;
    private int _sourceDensity;
    private int _targetDensity;
    private Bitmap _currentBitmap;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private FormsAnimationDrawable <Animation>k__BackingField;
    public FormsAnimationDrawable Animation { get; private set; }
    public AndroidGIFImageParser(Context context, int sourceDensity, int targetDensity);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public FormsAnimationDrawable get_Animation();
    [CompilerGeneratedAttribute]
private void set_Animation(FormsAnimationDrawable value);
    protected virtual void StartParsing();
    protected virtual void AddBitmap(GIFHeader header, GIFBitmap gifBitmap, bool ignoreImageData);
    protected virtual void FinishedParsing();
    protected virtual void Dispose(bool disposing);
}
internal class Xamarin.Forms.Platform.Android.AndroidTicker : Ticker {
    private ValueAnimator _val;
    private bool _animatorEnabled;
    public bool SystemEnabled { get; }
    public virtual bool get_SystemEnabled();
    internal void CheckAnimationEnabledStatus();
    private static bool IsAnimatorEnabled();
    public sealed virtual void Dispose();
    protected virtual void DisableTimer();
    protected virtual void EnableTimer();
    private void OnValOnUpdate(object sender, AnimatorUpdateEventArgs e);
    [CompilerGeneratedAttribute]
private void <DisableTimer>b__8_0();
}
public class Xamarin.Forms.Platform.Android.AppCompat.ButtonRenderer : ViewRenderer`2<Button, AppCompatButton> {
    private BorderBackgroundManager _backgroundTracker;
    private TextColorSwitcher _textColorSwitcher;
    private float _defaultFontSize;
    private Typeface _defaultTypeface;
    private bool _isDisposed;
    private ButtonLayoutManager _buttonLayoutManager;
    private string _defaultContentDescription;
    private Button NativeButton { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowRadius { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDx { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDy { get; }
    private Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowColor { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.View { get; }
    private AppCompatButton Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.View { get; }
    private bool Xamarin.Forms.Platform.Android.IDisposedState.IsDisposed { get; }
    public ButtonRenderer(Context context);
    private Button get_NativeButton();
    protected virtual void SetContentDescription();
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Android.Views.View.IOnAttachStateChangeListener.OnViewAttachedToWindow(View attachedView);
    private sealed virtual override void Android.Views.View.IOnAttachStateChangeListener.OnViewDetachedFromWindow(View detachedView);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual AppCompatButton CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    private void UpdateAll();
    private void UpdateEnabled();
    private void UpdateFont();
    private void UpdateTextColor();
    private void UpdateCharacterSpacing();
    private sealed virtual override void Android.Views.View.IOnClickListener.OnClick(View v);
    private sealed virtual override bool Android.Views.View.IOnTouchListener.OnTouch(View v, MotionEvent e);
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowRadius();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDx();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDy();
    private sealed virtual override Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowColor();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultPadding();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultShadow();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.IsShadowEnabled();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_View();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override AppCompatButton Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.get_View();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IDisposedState.get_IsDisposed();
}
public class Xamarin.Forms.Platform.Android.AppCompat.CarouselPageRenderer : VisualElementRenderer`1<CarouselPage> {
    private bool _disposed;
    private FormsViewPager _viewPager;
    private Page _previousPage;
    private FragmentManager _fragmentManager;
    private IPageController PageController { get; }
    private FragmentManager FragmentManager { get; }
    public CarouselPageRenderer(Context context);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageScrolled(int position, float positionOffset, int positionOffsetPixels);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageScrollStateChanged(int state);
    private IPageController get_PageController();
    private FragmentManager get_FragmentManager();
    private sealed virtual override void Xamarin.Forms.Platform.Android.AppCompat.IManageFragments.SetFragmentManager(FragmentManager childFragmentManager);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageSelected(int position);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CarouselPage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    private void OnChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ScrollToCurrentPage();
}
internal class Xamarin.Forms.Platform.Android.AppCompat.FormsFragmentPagerAdapter`1 : FragmentPagerAdapter {
    private MultiPage`1<T> _page;
    private FragmentManager _fragmentManager;
    private List`1<Fragment> _fragments;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private int <CountOverride>k__BackingField;
    public int Count { get; }
    public int CountOverride { get; public set; }
    public FormsFragmentPagerAdapter`1(MultiPage`1<T> page, FragmentManager fragmentManager);
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
public int get_CountOverride();
    [CompilerGeneratedAttribute]
public void set_CountOverride(int value);
    public virtual Fragment GetItem(int position);
    public virtual long GetItemId(int position);
    public virtual int GetItemPosition(Object objectValue);
    public virtual ICharSequence GetPageTitleFormatted(int position);
    public virtual void RestoreState(IParcelable state, ClassLoader loader);
    protected virtual void Dispose(bool disposing);
}
internal class Xamarin.Forms.Platform.Android.AppCompat.FormsViewPager : ViewPager {
    [CompilerGeneratedAttribute]
private bool <EnableGesture>k__BackingField;
    public bool EnableGesture { get; public set; }
    public FormsViewPager(Context context);
    public FormsViewPager(Context context, IAttributeSet attrs);
    protected FormsViewPager(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public bool get_EnableGesture();
    [CompilerGeneratedAttribute]
public void set_EnableGesture(bool value);
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    public virtual bool OnTouchEvent(MotionEvent e);
}
internal class Xamarin.Forms.Platform.Android.AppCompat.FragmentContainer : Fragment {
    private WeakReference _pageRenderer;
    private Action`1<PageContainer> _onCreateCallback;
    private PageContainer _pageContainer;
    private IVisualElementRenderer _visualElementRenderer;
    private bool _isVisible;
    public Page Page { get; }
    private IPageController PageController { get; }
    public FragmentContainer(Page page);
    protected FragmentContainer(IntPtr javaReference, JniHandleOwnership transfer);
    public virtual Page get_Page();
    private IPageController get_PageController();
    public static Fragment CreateInstance(Page page);
    public void SetOnCreateCallback(Action`1<PageContainer> callback);
    protected virtual PageContainer CreatePageContainer(Context context, IVisualElementRenderer child, bool inFragment);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    public virtual void OnDestroyView();
    public virtual void OnHiddenChanged(bool hidden);
    public virtual void OnPause();
    public virtual void OnResume();
    private void SendLifecycleEvent(bool isAppearing);
}
public class Xamarin.Forms.Platform.Android.AppCompat.FrameRenderer : FrameRenderer {
    public FrameRenderer(Context context);
}
internal interface Xamarin.Forms.Platform.Android.AppCompat.IManageFragments {
    public abstract virtual void SetFragmentManager(FragmentManager fragmentManager);
}
internal class Xamarin.Forms.Platform.Android.AppCompat.MasterDetailContainer : MasterDetailContainer {
    private PageContainer _pageContainer;
    private FragmentManager _fragmentManager;
    private bool _isMaster;
    private MasterDetailPage _parent;
    private Fragment _currentFragment;
    private bool _disposed;
    private FragmentTransaction _transaction;
    [CompilerGeneratedAttribute]
private bool <MarkedForDispose>k__BackingField;
    public bool MarkedForDispose { get; internal set; }
    private FragmentManager FragmentManager { get; }
    public MasterDetailContainer(MasterDetailPage parent, bool isMaster, Context context);
    [CompilerGeneratedAttribute]
public bool get_MarkedForDispose();
    [CompilerGeneratedAttribute]
internal void set_MarkedForDispose(bool value);
    private FragmentManager get_FragmentManager();
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    public void UpdateFlowDirection();
    protected virtual void AddChildView(VisualElement childView);
    protected virtual void OnAttachedToWindow();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void SetFragmentManager(FragmentManager fragmentManager);
    private void ExecuteTransaction(FragmentTransaction transaction);
    [CompilerGeneratedAttribute]
private void <AddChildView>b__16_0(PageContainer pc);
}
public class Xamarin.Forms.Platform.Android.AppCompat.MasterDetailPageRenderer : DrawerLayout {
    private static UInt32 DefaultScrimColor;
    private int _currentLockMode;
    private MasterDetailContainer _detailLayout;
    private MasterDetailContainer _masterLayout;
    private bool _disposed;
    private bool _isPresentingFromCore;
    private bool _presented;
    private VisualElementTracker _tracker;
    private FragmentManager _fragmentManager;
    private string _defaultContentDescription;
    private string _defaultHint;
    [CompilerGeneratedAttribute]
private MasterDetailPage <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Xamarin.Forms.Platform.Android.ILifeCycleState.MarkedForDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private MasterDetailPage Element { get; private set; }
    private IMasterDetailPageController MasterDetailPageController { get; }
    private bool Presented { get; private set; }
    private IPageController MasterPageController { get; }
    private IPageController DetailPageController { get; }
    private IPageController PageController { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private bool Xamarin.Forms.Platform.Android.ILifeCycleState.MarkedForDispose { get; private set; }
    public MasterDetailPageRenderer(Context context);
    [CompilerGeneratedAttribute]
private MasterDetailPage get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(MasterDetailPage value);
    private IMasterDetailPageController get_MasterDetailPageController();
    private bool get_Presented();
    private void set_Presented(bool value);
    private IPageController get_MasterPageController();
    private IPageController get_DetailPageController();
    private IPageController get_PageController();
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerClosed(View drawerView);
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerOpened(View drawerView);
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerSlide(View drawerView, float slideOffset);
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerStateChanged(int newState);
    private sealed virtual override void Xamarin.Forms.Platform.Android.AppCompat.IManageFragments.SetFragmentManager(FragmentManager fragmentManager);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    [CompilerGeneratedAttribute]
private sealed virtual override bool Xamarin.Forms.Platform.Android.ILifeCycleState.get_MarkedForDispose();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.Platform.Android.ILifeCycleState.set_MarkedForDispose(bool value);
    protected virtual void SetAutomationId(string id);
    protected virtual void SetContentDescription();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(VisualElement oldElement, VisualElement newElement);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.AppCompat.MasterDetailPageRenderer/<DeviceInfoPropertyChanged>d__62")]
private void DeviceInfoPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private bool HasAncestorNavigationPage(Element element);
    private void HandleMasterPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void MasterDetailPageAppearing(object sender, EventArgs e);
    private void MasterDetailPageDisappearing(object sender, EventArgs e);
    private void OnBackButtonPressed(object sender, BackButtonPressedEventArgs backButtonPressedEventArgs);
    private void SetGestureState();
    private void SetLockMode(int lockMode);
    private void UpdateBackgroundColor(Page view);
    private void UpdateBackgroundImage(Page view);
    private void UpdateDetail();
    private void UpdateFlowDirection();
    private void UpdateIsPresented();
    private void UpdateMaster();
    private void UpdateSplitViewLayout();
    [CompilerGeneratedAttribute]
private void <UpdateBackgroundImage>b__78_0(Drawable drawable);
    [CompilerGeneratedAttribute]
private void <UpdateDetail>g__Update|79_0();
    [CompilerGeneratedAttribute]
private void <UpdateMaster>g__Update|82_0();
}
public class Xamarin.Forms.Platform.Android.AppCompat.NavigationPageRenderer : VisualElementRenderer`1<NavigationPage> {
    private List`1<Fragment> _fragmentStack;
    private Drawable _backgroundDrawable;
    private Page _current;
    private bool _disposed;
    private ActionBarDrawerToggle _drawerToggle;
    private FragmentManager _fragmentManager;
    private int _lastActionBarHeight;
    private int _statusbarHeight;
    private Toolbar _toolbar;
    private ToolbarTracker _toolbarTracker;
    private DrawerMultiplexedListener _drawerListener;
    private DrawerLayout _drawerLayout;
    private MasterDetailPage _masterDetailPage;
    private bool _toolbarVisible;
    private IVisualElementRenderer _titleViewRenderer;
    private Container _titleView;
    private ImageView _titleIconView;
    private ImageSource _imageSource;
    private bool _isAttachedToWindow;
    private Platform _platform;
    private string _defaultNavigationContentDescription;
    private List`1<IMenuItem> _currentMenuItems;
    private List`1<ToolbarItem> _currentToolbarItems;
    [CompilerGeneratedAttribute]
private int <TransitionDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Xamarin.Forms.Platform.Android.ILifeCycleState.MarkedForDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerTopPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerBottomPadding>k__BackingField;
    protected int TransitionDuration { get; protected set; }
    private bool Xamarin.Forms.Platform.Android.ILifeCycleState.MarkedForDispose { get; private set; }
    private INavigationPageController NavigationPageController { get; }
    private Platform Platform { get; }
    internal int ContainerTopPadding { get; internal set; }
    internal int ContainerBottomPadding { get; internal set; }
    private Page Current { get; private set; }
    private FragmentManager FragmentManager { get; }
    private IPageController PageController { get; }
    private bool ToolbarVisible { get; private set; }
    public NavigationPageRenderer(Context context);
    [CompilerGeneratedAttribute]
protected virtual int get_TransitionDuration();
    [CompilerGeneratedAttribute]
protected virtual void set_TransitionDuration(int value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool Xamarin.Forms.Platform.Android.ILifeCycleState.get_MarkedForDispose();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.Platform.Android.ILifeCycleState.set_MarkedForDispose(bool value);
    private INavigationPageController get_NavigationPageController();
    private Platform get_Platform();
    [CompilerGeneratedAttribute]
internal int get_ContainerTopPadding();
    [CompilerGeneratedAttribute]
internal void set_ContainerTopPadding(int value);
    [CompilerGeneratedAttribute]
internal int get_ContainerBottomPadding();
    [CompilerGeneratedAttribute]
internal void set_ContainerBottomPadding(int value);
    private Page get_Current();
    private void set_Current(Page value);
    private FragmentManager get_FragmentManager();
    private IPageController get_PageController();
    private bool get_ToolbarVisible();
    private void set_ToolbarVisible(bool value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.AppCompat.IManageFragments.SetFragmentManager(FragmentManager childFragmentManager);
    public Task`1<bool> PopToRootAsync(Page page, bool animated);
    public Task`1<bool> PopViewAsync(Page page, bool animated);
    public Task`1<bool> PushViewAsync(Page page, bool animated);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NavigationPage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void SetupPageTransition(FragmentTransaction transaction, bool isPush);
    internal int GetNavBarHeight();
    private int ActionBarHeight();
    private void AnimateArrowIn();
    private int GetStatusBarHeight();
    private void AnimateArrowOut();
    public sealed virtual void OnClick(View v);
    private void CurrentOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.AppCompat.NavigationPageRenderer/<DeviceInfoPropertyChanged>d__73")]
private void DeviceInfoPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void InsertPageBefore(Page page, Page before);
    private void OnInsertPageBeforeRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopped(object sender, NavigationRequestedEventArgs e);
    private void OnPoppedToRoot(object sender, NavigationRequestedEventArgs e);
    protected virtual Task`1<bool> OnPopToRootAsync(Page page, bool animated);
    protected virtual Task`1<bool> OnPopViewAsync(Page page, bool animated);
    protected virtual Task`1<bool> OnPushAsync(Page view, bool animated);
    private void OnPushed(object sender, NavigationRequestedEventArgs e);
    private void OnRemovePageRequested(object sender, NavigationRequestedEventArgs e);
    private void RegisterToolbar();
    private Fragment GetPageFragment(Page page);
    private void RemovePage(Page page);
    private void ResetToolbar();
    private void SetupToolbar();
    private Task`1<bool> SwitchContentAsync(Page page, bool animated, bool removed, bool popToRoot);
    private Fragment GetFragment(Page page, bool removed, bool popToRoot);
    private void ToolbarTrackerOnCollectionChanged(object sender, EventArgs eventArgs);
    private void UpdateMenu();
    protected virtual void OnToolbarItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateMenuItemIcon(Context context, IMenuItem menuItem, ToolbarItem toolBarItem);
    private void UpdateToolbar();
    private void UpdateTitleIcon();
    private void UpdateTitleView();
    private void AddTransitionTimer(TaskCompletionSource`1<bool> tcs, Fragment fragment, FragmentManager fragmentManager, IReadOnlyCollection`1<Fragment> fragmentsToRemove, int duration, bool shouldUpdateToolbar);
    private void PushCurrentPages();
    [CompilerGeneratedAttribute]
private bool <RemovePage>b__85_0();
}
public class Xamarin.Forms.Platform.Android.AppCompat.PickerRenderer : PickerRendererBase`1<EditText> {
    private TextColorSwitcher _textColorSwitcher;
    private TextColorSwitcher _hintColorSwitcher;
    protected EditText EditText { get; }
    public PickerRenderer(Context context);
    protected virtual EditText CreateNativeControl();
    protected virtual EditText get_EditText();
    protected virtual void UpdateTitleColor();
    protected virtual void UpdateTextColor();
    protected virtual void UpdatePlaceHolderText();
    protected virtual void UpdateGravity();
}
public abstract class Xamarin.Forms.Platform.Android.AppCompat.PickerRendererBase`1 : ViewRenderer`2<Picker, TControl> {
    private AlertDialog _dialog;
    private bool _disposed;
    private EntryAccessibilityDelegate _pickerAccessibilityDelegate;
    protected EditText EditText { get; }
    public PickerRendererBase`1(Context context);
    protected abstract virtual EditText get_EditText();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IPickerRenderer.OnClick();
    private void RowsCollectionChanged(object sender, EventArgs e);
    private void UpdateFont();
    protected void UpdateCharacterSpacing();
    private void UpdatePicker();
    protected abstract virtual void UpdateTextColor();
    protected abstract virtual void UpdateTitleColor();
    protected abstract virtual void UpdatePlaceHolderText();
    protected abstract virtual void UpdateGravity();
}
internal class Xamarin.Forms.Platform.Android.AppCompat.Platform : BindableObject {
    private Context _context;
    private PlatformRenderer _renderer;
    private bool _disposed;
    private bool _navAnimationInProgress;
    private NavigationModel _navModel;
    private NavigationModel _previousNavModel;
    [CompilerGeneratedAttribute]
private static string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    internal static string PackageName { get; private set; }
    internal bool NavAnimationInProgress { get; internal set; }
    private Page Page { get; private set; }
    private IPageController CurrentPageController { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.ModalStack { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.NavigationStack { get; }
    public Platform(Context context);
    [CompilerGeneratedAttribute]
internal static string get_PackageName();
    [CompilerGeneratedAttribute]
private static void set_PackageName(string value);
    internal static string GetPackageName();
    internal bool get_NavAnimationInProgress();
    internal void set_NavAnimationInProgress(bool value);
    [CompilerGeneratedAttribute]
private Page get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(Page value);
    private IPageController get_CurrentPageController();
    public sealed virtual void Dispose();
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_ModalStack();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_NavigationStack();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.AppCompat.Platform/<Xamarin-Forms-INavigation-PushModalAsync>d__36")]
private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    public static SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IPlatformLayout.OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnBindingContextChanged();
    internal void SettingNewPage();
    internal void SetPage(Page newRoot);
    private void UpdateAccessibilityImportance(Page page, ImportantForAccessibility importantForAccessibility, bool forceFocus);
    private void SetPageInternal(Page newRoot);
    private void Cleanup(List`1<View> viewsToRemove, List`1<IVisualElementRenderer> renderersToDispose);
    private void AddChild(Page page, bool layout);
    private bool HandleBackPressed(object sender, EventArgs e);
    private void LayoutRootPage(Page page, int width, int height);
    private Task PresentModal(Page modal, bool animated);
    internal static int GenerateViewId();
    public static ViewGroup op_Implicit(Platform canvas);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
}
internal class Xamarin.Forms.Platform.Android.AppCompat.ShellFragmentContainer : FragmentContainer {
    private Page _page;
    [CompilerGeneratedAttribute]
private ShellContent <ShellContentTab>k__BackingField;
    public ShellContent ShellContentTab { get; private set; }
    public Page Page { get; }
    public ShellFragmentContainer(ShellContent shellContent);
    [CompilerGeneratedAttribute]
public ShellContent get_ShellContentTab();
    [CompilerGeneratedAttribute]
private void set_ShellContentTab(ShellContent value);
    public virtual Page get_Page();
    protected virtual PageContainer CreatePageContainer(Context context, IVisualElementRenderer child, bool inFragment);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    public virtual void OnDestroyView();
    public virtual void OnDestroy();
}
public class Xamarin.Forms.Platform.Android.AppCompat.SwitchRenderer : ViewRenderer`2<Switch, SwitchCompat> {
    private bool _disposed;
    private Drawable _defaultTrackDrawable;
    private string _defaultContentDescription;
    private bool _changedThumbColor;
    public SwitchRenderer(Context context);
    protected virtual void SetContentDescription();
    private sealed virtual override void Android.Widget.CompoundButton.IOnCheckedChangeListener.OnCheckedChanged(CompoundButton buttonView, bool isChecked);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual SwitchCompat CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateOnColor();
    private void UpdateThumbColor();
    private void HandleToggled(object sender, EventArgs e);
    private void UpdateEnabled();
}
public class Xamarin.Forms.Platform.Android.AppCompat.TabbedPageRenderer : VisualElementRenderer`1<TabbedPage> {
    private Drawable _backgroundDrawable;
    private Drawable _wrappedBackgroundDrawable;
    private ColorStateList _originalTabTextColors;
    private ColorStateList _orignalTabIconColors;
    private ColorStateList _newTabTextColors;
    private ColorStateList _newTabIconColors;
    private bool _disposed;
    private FragmentManager _fragmentManager;
    private TabLayout _tabLayout;
    private BottomNavigationView _bottomNavigationView;
    private RelativeLayout _relativeLayout;
    private FormsViewPager _viewPager;
    private Page _previousPage;
    private Int32[] _checkedStateSet;
    private Int32[] _selectedStateSet;
    private Int32[] _emptyStateSet;
    private int _defaultARGBColor;
    private Color _defaultAndroidColor;
    private Platform _platform;
    private Platform Platform { get; }
    private FragmentManager FragmentManager { get; }
    private bool IsBottomTabPlacement { get; }
    public Color BarItemColor { get; }
    public Color BarSelectedItemColor { get; }
    private IPageController PageController { get; }
    private bool IsDisposed { get; }
    public TabbedPageRenderer(Context context);
    private Platform get_Platform();
    private FragmentManager get_FragmentManager();
    private bool get_IsBottomTabPlacement();
    public Color get_BarItemColor();
    public Color get_BarSelectedItemColor();
    private IPageController get_PageController();
    private sealed virtual override void Xamarin.Forms.Platform.Android.AppCompat.IManageFragments.SetFragmentManager(FragmentManager childFragmentManager);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageScrolled(int position, float positionOffset, int positionOffsetPixels);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageScrollStateChanged(int state);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageSelected(int position);
    private sealed virtual override void Google.Android.Material.Tabs.TabLayout.IOnTabSelectedListener.OnTabReselected(Tab tab);
    private sealed virtual override void Google.Android.Material.Tabs.TabLayout.IOnTabSelectedListener.OnTabSelected(Tab tab);
    private sealed virtual override void Google.Android.Material.Tabs.TabLayout.IOnTabSelectedListener.OnTabUnselected(Tab tab);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TabbedPage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetNavigationRendererPadding(int paddingTop, int paddingBottom);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    private void OnChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private FormsViewPager CreateFormsViewPager(Context context, TabbedPage tabbedPage);
    private void TeardownPage(Page page);
    private void SetupPage(Page page);
    private void Reset();
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ScrollToCurrentPage();
    private void UpdateIgnoreContainerAreas();
    private void UpdateOffscreenPageLimit();
    private void UpdateSwipePaging();
    private void UpdateTabBarTranslation(int position, float offset);
    private List`1<ValueTuple`3<string, ImageSource, bool>> CreateTabList();
    private void SetupBottomNavigationView(NotifyCollectionChangedEventArgs e);
    private void UpdateTabIcons();
    [ObsoleteAttribute("GetIconDrawable is obsolete as of 4.0.0. Please override SetTabIconImageSource instead.")]
[EditorBrowsableAttribute("1")]
protected virtual Drawable GetIconDrawable(FileImageSource icon);
    [ObsoleteAttribute("SetTabIcon is obsolete as of 4.0.0. Please use SetTabIconImageSource instead.")]
[EditorBrowsableAttribute("1")]
protected virtual void SetTabIcon(Tab tab, FileImageSource icon);
    protected virtual void SetTabIconImageSource(Tab tab, Drawable icon);
    private void SetTabIconImageSource(Page page, Tab tab);
    private void UpdateBarBackgroundColor();
    private void UpdateBarBackground();
    protected virtual ColorStateList GetItemTextColorStates();
    protected virtual ColorStateList GetItemIconTintColorState();
    public sealed virtual bool OnNavigationItemSelected(IMenuItem item);
    private void OnMoreSheetDismissed(object sender, EventArgs e);
    private void OnMoreItemSelected(int selectedIndex, BottomSheetDialog dialog);
    private bool get_IsDisposed();
    private void UpdateItemIconColor();
    private void UpdateBarTextColor();
    private void SetIconColorFilter(Tab tab);
    private void SetIconColorFilter(Tab tab, bool selected);
    private Int32[] GetSelectedStateSet();
    private Int32[] GetEmptyStateSet();
    private Int32[] GetStateSet(IList`1<int> stateSet);
    private ColorStateList GetColorStateList(int defaultColor, int checkedColor);
    [CompilerGeneratedAttribute]
private void <OnChildrenCollectionChanged>b__47_0(object o, int i, bool c);
    [CompilerGeneratedAttribute]
private void <OnChildrenCollectionChanged>b__47_1(object o, int i);
}
public abstract class Xamarin.Forms.Platform.Android.AppCompat.ViewRenderer`2 : ViewRenderer`2<TView, TControl> {
    protected ViewRenderer`2(Context context);
}
internal static class Xamarin.Forms.Platform.Android.BackgroundManager : object {
    public static void Init(IVisualElementRenderer renderer);
    public static void Dispose(IVisualElementRenderer renderer);
    private static void UpdateBackgroundColor(View Control, VisualElement Element, Nullable`1<Color> color);
    private static void UpdateBackground(View Control, VisualElement Element);
    private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Android.BaseCellView : LinearLayout {
    public static double DefaultMinHeight;
    private Color _androidDefaultTextColor;
    private Cell _cell;
    private TextView _detailText;
    private ImageView _imageView;
    private TextView _mainText;
    private Color _defaultDetailColor;
    private Color _defaultMainTextColor;
    private Color _detailTextColor;
    private string _detailTextText;
    private ImageSource _imageSource;
    private Color _mainTextColor;
    private string _mainTextText;
    [CompilerGeneratedAttribute]
private View <AccessoryView>k__BackingField;
    public View AccessoryView { get; private set; }
    public string DetailText { get; public set; }
    public string MainText { get; public set; }
    private Element Xamarin.Forms.INativeElementView.Element { get; }
    public BaseCellView(Context context, Cell cell);
    [CompilerGeneratedAttribute]
public View get_AccessoryView();
    [CompilerGeneratedAttribute]
private void set_AccessoryView(View value);
    public string get_DetailText();
    public void set_DetailText(string value);
    public string get_MainText();
    public void set_MainText(string value);
    private sealed virtual override Element Xamarin.Forms.INativeElementView.get_Element();
    public void SetAccessoryView(View view);
    public void SetDefaultMainTextColor(Color defaultColor);
    public void SetDetailTextColor(Color color);
    public void SetImageSource(ImageSource source);
    public void SetImageVisible(bool visible);
    public void SetIsEnabled(bool isEnable);
    public void SetMainTextColor(Color color);
    public void SetRenderHeight(double height);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.BaseCellView/<UpdateBitmap>d__34")]
private void UpdateBitmap(ImageSource source, ImageSource previousSource);
}
internal class Xamarin.Forms.Platform.Android.BorderBackgroundManager : object {
    private Drawable _defaultDrawable;
    private BorderDrawable _backgroundDrawable;
    private RippleDrawable _rippleDrawable;
    private bool _drawableEnabled;
    private bool _disposed;
    private IBorderVisualElementRenderer _renderer;
    private IBorderElement _borderElement;
    private bool _drawOutlineWithBackground;
    [CompilerGeneratedAttribute]
private bool <DrawOutlineWithBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private INotifyPropertyChanged <BorderPropertyChanged>k__BackingField;
    private VisualElement Element { get; }
    private View Control { get; }
    public bool DrawOutlineWithBackground { get; public set; }
    public BorderDrawable BackgroundDrawable { get; }
    public IBorderElement BorderElement { get; private set; }
    private INotifyPropertyChanged BorderPropertyChanged { get; private set; }
    public BorderBackgroundManager(IBorderVisualElementRenderer renderer);
    public BorderBackgroundManager(IBorderVisualElementRenderer renderer, bool drawOutlineWithBackground);
    private VisualElement get_Element();
    private View get_Control();
    [CompilerGeneratedAttribute]
public bool get_DrawOutlineWithBackground();
    [CompilerGeneratedAttribute]
public void set_DrawOutlineWithBackground(bool value);
    public BorderDrawable get_BackgroundDrawable();
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    public IBorderElement get_BorderElement();
    private void set_BorderElement(IBorderElement value);
    [CompilerGeneratedAttribute]
private INotifyPropertyChanged get_BorderPropertyChanged();
    [CompilerGeneratedAttribute]
private void set_BorderPropertyChanged(INotifyPropertyChanged value);
    public void UpdateDrawable();
    public void Reset();
    public void UpdateBackgroundColor();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void BorderElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
internal class Xamarin.Forms.Platform.Android.BorderDrawable : Drawable {
    public static int DefaultCornerRadius;
    private Func`2<double, float> _convertToPixels;
    private bool _isDisposed;
    private Bitmap _normalBitmap;
    private bool _pressed;
    private Bitmap _pressedBitmap;
    private float _paddingLeft;
    private float _paddingTop;
    private Color _defaultColor;
    private bool _drawOutlineWithBackground;
    private Color _shadowColor;
    private float _shadowDx;
    private float _shadowDy;
    private float _shadowRadius;
    [CompilerGeneratedAttribute]
private IBorderElement <BorderElement>k__BackingField;
    private float PaddingLeft { get; private set; }
    private float PaddingTop { get; private set; }
    public IBorderElement BorderElement { get; public set; }
    public bool IsStateful { get; }
    public int Opacity { get; }
    public Color BackgroundColor { get; }
    public Color PressedBackgroundColor { get; }
    public BorderDrawable(Func`2<double, float> convertToPixels, Color defaultColor, bool drawOutlineWithBackground);
    private float get_PaddingLeft();
    private void set_PaddingLeft(float value);
    private float get_PaddingTop();
    private void set_PaddingTop(float value);
    [CompilerGeneratedAttribute]
public IBorderElement get_BorderElement();
    [CompilerGeneratedAttribute]
public void set_BorderElement(IBorderElement value);
    public virtual bool get_IsStateful();
    public virtual int get_Opacity();
    public virtual void Draw(Canvas canvas);
    public BorderDrawable SetShadow(float dy, float dx, Color color, float radius);
    public BorderDrawable SetPadding(float top, float left);
    public void Reset();
    public virtual void SetAlpha(int alpha);
    public virtual void SetColorFilter(ColorFilter cf);
    public Color get_BackgroundColor();
    public Color get_PressedBackgroundColor();
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnStateChange(Int32[] state);
    private Bitmap CreateBitmap(bool pressed, int width, int height);
    private void DrawBackground(Canvas canvas, int width, int height, bool pressed);
    private float ConvertCornerRadiusToPixels();
    public RectF GetPaddingBounds(int width, int height);
    public void DrawCircle(Canvas canvas, int width, int height, Action`1<Canvas> finishDraw);
    public void DrawOutline(Canvas canvas, int width, int height);
}
internal class Xamarin.Forms.Platform.Android.BottomNavigationViewTracker : object {
    private bool _isDisposed;
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.BottomNavigationViewUtils : object {
    internal static int MoreTabId;
    public static Drawable CreateItemBackgroundDrawable();
    internal static void UpdateEnabled(bool tabEnabled, IMenuItem menuItem);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.BottomNavigationViewUtils/<SetupMenu>d__3")]
internal static void SetupMenu(IMenu menu, int maxBottomItems, List`1<ValueTuple`3<string, ImageSource, bool>> items, int currentIndex, BottomNavigationView bottomView, Context context);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.BottomNavigationViewUtils/<SetMenuItemIcon>d__4")]
private static Task SetMenuItemIcon(IMenuItem menuItem, ImageSource source, Context context);
    public static BottomSheetDialog CreateMoreBottomSheet(Action`2<int, BottomSheetDialog> selectCallback, Context context, List`1<ValueTuple`3<string, ImageSource, bool>> items);
    internal static BottomSheetDialog CreateMoreBottomSheet(Action`2<int, BottomSheetDialog> selectCallback, Context context, List`1<ValueTuple`3<string, ImageSource, bool>> items, int maxItemCount);
    [ExtensionAttribute]
public static void SetShiftMode(BottomNavigationView bottomNavigationView, bool enableShiftMode, bool enableItemShiftMode);
}
public class Xamarin.Forms.Platform.Android.BoxRenderer : VisualElementRenderer`1<BoxView> {
    private bool _disposed;
    private GradientDrawable _backgroundDrawable;
    private MotionEventHelper _motionEventHelper;
    public BoxRenderer(Context context);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    private void UpdateBoxView();
    private void UpdateBoxBackground();
    protected virtual void Dispose(bool disposing);
    private void UpdateCornerRadius();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.BrushExtensions : object {
    [ExtensionAttribute]
public static void UpdateBackground(View view, Brush brush);
    [ExtensionAttribute]
public static void UpdateBackground(Paint paint, Brush brush, int height, int width);
    [ExtensionAttribute]
public static void UpdateBackground(GradientDrawable gradientDrawable, Brush brush, int height, int width);
    [ExtensionAttribute]
public static bool UseGradients(GradientDrawable gradientDrawable);
    internal static bool IsValidGradient(GradientStopCollection gradients);
    [ExtensionAttribute]
internal static void SetPaintGradient(View view, Brush brush);
    [ExtensionAttribute]
internal static void SetGradientOrientation(GradientDrawable drawable, double angle);
    [ExtensionAttribute]
internal static Tuple`2<Int32[], Single[]> GetGradientBrushData(GradientBrush gradientBrush);
}
public static class Xamarin.Forms.Platform.Android.ButtonElementManager : object {
    public static bool OnTouch(VisualElement element, IButtonController buttonController, View v, MotionEvent e);
    public static void OnClick(VisualElement element, IButtonController buttonController, View v);
}
public class Xamarin.Forms.Platform.Android.ButtonLayoutManager : object {
    private ButtonContentLayout _imageOnlyLayout;
    private Rect _drawableBounds;
    private bool _disposed;
    private IButtonLayoutRenderer _renderer;
    private Nullable`1<Thickness> _defaultPaddingPix;
    private Button _element;
    private bool _alignIconWithText;
    private bool _preserveInitialPadding;
    private bool _borderAdjustsPadding;
    private bool _maintainLegacyMeasurements;
    private bool _hasLayoutOccurred;
    private ITransformationMethod _defaultTransformationMethod;
    private bool _elementAlreadyChanged;
    private Button View { get; }
    private Context Context { get; }
    public ButtonLayoutManager(IButtonLayoutRenderer renderer);
    public ButtonLayoutManager(IButtonLayoutRenderer renderer, bool alignIconWithText, bool preserveInitialPadding, bool borderAdjustsPadding, bool maintainLegacyMeasurements);
    private Button get_View();
    private Context get_Context();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    public void OnLayout(bool changed, int left, int top, int right, int bottom);
    public void OnViewAttachedToWindow(View attachedView);
    public void OnViewDetachedFromWindow(View detachedView);
    public void Update();
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdatePadding();
    private bool UpdateTextAndImage();
    private void UpdateImage();
}
public class Xamarin.Forms.Platform.Android.ButtonRenderer : ViewRenderer`2<Button, Button> {
    private BorderBackgroundManager _backgroundTracker;
    private TextColorSwitcher _textColorSwitcher;
    private float _defaultFontSize;
    private Typeface _defaultTypeface;
    private bool _isDisposed;
    private int _imageHeight;
    private Thickness _paddingDeltaPix;
    private IVisualElementRenderer _visualElementRenderer;
    private Button NativeButton { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowRadius { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDx { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDy { get; }
    private Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowColor { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.View { get; }
    public ButtonRenderer(Context context);
    private Button get_NativeButton();
    public sealed virtual void OnViewAttachedToWindow(View attachedView);
    public sealed virtual void OnViewDetachedFromWindow(View detachedView);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void Dispose(bool disposing);
    protected virtual Button CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    private void UpdateAll();
    private void UpdateBitmap();
    private void UpdateEnabled();
    private void UpdateFont();
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateCharacterSpacing();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowRadius();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDx();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDy();
    private sealed virtual override Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowColor();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultPadding();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultShadow();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.IsShadowEnabled();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_View();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private void UpdatePadding();
    private void UpdateContentEdge(Nullable`1<Thickness> delta);
    [CompilerGeneratedAttribute]
private void <UpdateBitmap>b__23_0(Drawable image);
    [CompilerGeneratedAttribute]
private void <UpdateBitmap>b__23_1(Drawable image);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.CanvasExtensions : object {
    [ExtensionAttribute]
public static void ClipShape(Canvas canvas, Context context, VisualElement element);
}
internal class Xamarin.Forms.Platform.Android.CarouselPageAdapter : PagerAdapter {
    private Context _context;
    private ViewPager _pager;
    private bool _ignoreAndroidSelection;
    private CarouselPage _page;
    private IElementController ElementController { get; }
    public int Count { get; }
    public CarouselPageAdapter(ViewPager pager, CarouselPage page, Context context);
    private IElementController get_ElementController();
    public virtual int get_Count();
    public sealed virtual void OnPageScrolled(int position, float positionOffset, int positionOffsetPixels);
    public sealed virtual void OnPageScrollStateChanged(int state);
    public sealed virtual void OnPageSelected(int position);
    public virtual void DestroyItem(ViewGroup p0, int p1, Object p2);
    public virtual int GetItemPosition(Object item);
    public virtual Object InstantiateItem(ViewGroup container, int position);
    public virtual bool IsViewFromObject(View p0, Object p1);
    public void UpdateCurrentItem();
    protected virtual void Dispose(bool disposing);
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Android.CarouselPageRenderer : VisualElementRenderer`1<CarouselPage> {
    private ViewPager _viewPager;
    private Page _previousPage;
    private IPageController PageController { get; }
    public CarouselPageRenderer(Context context);
    private IPageController get_PageController();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CarouselPage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    private void UpdateCurrentItem();
}
public class Xamarin.Forms.Platform.Android.CarouselSpacingItemDecoration : ItemDecoration {
    private CarouselView _carouselView;
    private ItemsLayoutOrientation _orientation;
    private double _verticalSpacing;
    private double _adjustedVerticalSpacing;
    private double _horizontalSpacing;
    private double _adjustedHorizontalSpacing;
    public CarouselSpacingItemDecoration(IItemsLayout itemsLayout, CarouselView carouselView);
    public virtual void GetItemOffsets(Rect outRect, View view, RecyclerView parent, State state);
}
public class Xamarin.Forms.Platform.Android.CarouselViewRenderer : ItemsViewRenderer`3<ItemsView, ItemsViewAdapter`2<ItemsView, IItemsViewSource>, IItemsViewSource> {
    protected CarouselView Carousel;
    private ItemDecoration _itemDecoration;
    private bool _isSwipeEnabled;
    private int _oldPosition;
    private int _gotoPosition;
    private bool _noNeedForScroll;
    private bool _initialized;
    private bool _isVisible;
    private List`1<View> _oldViews;
    private CarouselViewwOnGlobalLayoutListener _carouselViewLayoutListener;
    public CarouselViewRenderer(Context context);
    protected virtual void Dispose(bool disposing);
    protected virtual void SetUpNewElement(ItemsView newElement);
    protected virtual RecyclerViewScrollListener`2<ItemsView, IItemsViewSource> CreateScrollListener();
    protected virtual void TearDownOldElement(ItemsView oldElement);
    protected virtual void UpdateItemsSource();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    protected virtual ItemDecoration CreateSpacingDecoration(IItemsLayout itemsLayout);
    protected virtual void UpdateItemSpacing();
    protected virtual IItemsLayout GetItemsLayout();
    private int GetItemWidth();
    private int GetItemHeight();
    private void UpdateIsSwipeEnabled();
    private void UpdateIsBounceEnabled();
    private void UpdatePeekAreaInsets();
    protected virtual void UpdateAdapter();
    private void UnsubscribeCollectionItemsSourceChanged(ItemsViewAdapter`2<ItemsView, IItemsViewSource> oldItemViewAdapter);
    private void CollectionItemsSourceChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateItemDecoration();
    private void UpdateInitialPosition();
    private void UpdatePositionFromVisibilityChanges();
    private void UpdateVisualStates();
    private void CarouselViewScrolled(object sender, ItemsViewScrolledEventArgs e);
    private void UpdatePosition(int position);
    private void SetCurrentItem(int carouselPosition);
    private void UpdateFromCurrentItem();
    private void UpdateFromPosition();
    private void AddLayoutListener();
    private void LayoutReady(object sender, EventArgs e);
    private void ClearLayoutListener();
    [CompilerGeneratedAttribute]
private ItemContentView <UpdateAdapter>b__26_0(View view, Context context);
}
public abstract class Xamarin.Forms.Platform.Android.CellAdapter : BaseAdapter`1<object> {
    private Context _context;
    private ActionMode _actionMode;
    private Cell _actionModeContext;
    private bool _actionModeNeedsUpdates;
    private View _contextView;
    private ActionMode _supportActionMode;
    [CompilerGeneratedAttribute]
private object <ActionModeObject>k__BackingField;
    internal Cell ActionModeContext { get; internal set; }
    internal object ActionModeObject { get; internal set; }
    internal View ContextView { get; internal set; }
    protected CellAdapter(Context context);
    internal Cell get_ActionModeContext();
    internal void set_ActionModeContext(Cell value);
    [CompilerGeneratedAttribute]
internal object get_ActionModeObject();
    [CompilerGeneratedAttribute]
internal void set_ActionModeObject(object value);
    internal View get_ContextView();
    internal void set_ContextView(View value);
    public sealed virtual bool OnActionItemClicked(ActionMode mode, IMenuItem item);
    private sealed virtual override bool AndroidX.AppCompat.View.ActionMode.ICallback.OnActionItemClicked(ActionMode mode, IMenuItem item);
    public sealed virtual bool OnCreateActionMode(ActionMode mode, IMenu menu);
    private sealed virtual override bool AndroidX.AppCompat.View.ActionMode.ICallback.OnCreateActionMode(ActionMode mode, IMenu menu);
    public sealed virtual void OnDestroyActionMode(ActionMode mode);
    private sealed virtual override void AndroidX.AppCompat.View.ActionMode.ICallback.OnDestroyActionMode(ActionMode mode);
    public sealed virtual bool OnPrepareActionMode(ActionMode mode, IMenu menu);
    private sealed virtual override bool AndroidX.AppCompat.View.ActionMode.ICallback.OnPrepareActionMode(ActionMode mode, IMenu menu);
    public sealed virtual void OnItemClick(AdapterView parent, View view, int position, long id);
    public sealed virtual bool OnItemLongClick(AdapterView parent, View view, int position, long id);
    protected abstract virtual Cell GetCellForPosition(int position);
    protected virtual void HandleItemClick(AdapterView parent, View view, int position, long id);
    protected void SetSelectedBackground(View view, bool isContextTarget);
    protected void UnsetSelectedBackground(View view);
    internal void CloseContextActions();
    private void CreateContextMenu(IMenu menu);
    private bool HandleContextMode(View view, int position);
    private void OnActionItemClickedImpl(IMenuItem item);
    private void OnContextActionCommandCanExecuteChanged(object sender, EventArgs eventArgs);
    private void OnContextActionPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnContextActionPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void OnContextItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnDestroyActionModeImpl();
    private bool OnPrepareActionModeImpl(IMenu menu);
}
public static class Xamarin.Forms.Platform.Android.CellFactory : object {
    public static View GetCell(Cell item, View convertView, ViewGroup parent, Context context, View view);
    private static void UpdateMinimumHeightFromParent(Context context, View view, TableView table);
    private static void UpdateMinimumHeightFromParent(Context context, View view, ListView listView);
}
public class Xamarin.Forms.Platform.Android.CellRenderer : object {
    private static PropertyChangedEventHandler PropertyChangedHandler;
    private static BindableProperty RendererProperty;
    private EventHandler _onForceUpdateSizeRequested;
    [CompilerGeneratedAttribute]
private View <ParentView>k__BackingField;
    [CompilerGeneratedAttribute]
private Cell <Cell>k__BackingField;
    public View ParentView { get; public set; }
    protected Cell Cell { get; protected set; }
    private static CellRenderer();
    [CompilerGeneratedAttribute]
public View get_ParentView();
    [CompilerGeneratedAttribute]
public void set_ParentView(View value);
    [CompilerGeneratedAttribute]
protected Cell get_Cell();
    [CompilerGeneratedAttribute]
protected void set_Cell(Cell value);
    public View GetCell(Cell item, View convertView, ViewGroup parent, Context context);
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
    protected virtual void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected void WireUpForceUpdateSizeRequested(Cell cell, View nativeCell);
    internal static CellRenderer GetRenderer(BindableObject cell);
    internal static void SetRenderer(BindableObject cell, CellRenderer renderer);
    private static void OnGlobalCellPropertyChanged(object sender, PropertyChangedEventArgs e);
}
internal class Xamarin.Forms.Platform.Android.CenterSnapHelper : NongreedySnapHelper {
    public virtual View FindSnapView(LayoutManager layoutManager);
}
internal class Xamarin.Forms.Platform.Android.CheckBoxDesignerRenderer : CheckBox {
    private bool _disposed;
    private Nullable`1<int> _defaultLabelFor;
    private VisualElementTracker _tracker;
    private VisualElementRenderer _visualElementRenderer;
    private IPlatformElementConfiguration`2<Android, CheckBox> _platformElementConfiguration;
    private CheckBox _checkBox;
    private static Int32[][] _checkedStates;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private CheckBox Element { get; private set; }
    private CheckBox Control { get; }
    public CheckBoxDesignerRenderer(Context context);
    private static CheckBoxDesignerRenderer();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private void Init();
    protected virtual void Dispose(bool disposing);
    private Size MinimumSize();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void Android.Widget.CompoundButton.IOnCheckedChangeListener.OnCheckedChanged(CompoundButton buttonView, bool isChecked);
    private void UpdateIsChecked();
    private ColorStateList GetColorStateList();
    private void UpdateBackgroundColor();
    private void UpdateBackground();
    private void UpdateOnColor();
    private sealed virtual override void Android.Views.View.IOnFocusChangeListener.OnFocusChange(View v, bool hasFocus);
    private IPlatformElementConfiguration`2<Android, CheckBox> OnThisPlatform();
    public sealed virtual void SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private CheckBox get_Element();
    private void set_Element(CheckBox value);
    private CheckBox get_Control();
}
public class Xamarin.Forms.Platform.Android.CheckBoxRenderer : CheckBoxRendererBase {
    public CheckBoxRenderer(Context context);
}
public class Xamarin.Forms.Platform.Android.CheckBoxRendererBase : AppCompatCheckBox {
    private bool _disposed;
    private Nullable`1<int> _defaultLabelFor;
    private VisualElementTracker _tracker;
    private VisualElementRenderer _visualElementRenderer;
    private IPlatformElementConfiguration`2<Android, CheckBox> _platformElementConfiguration;
    private CheckBox _checkBox;
    private static Int32[][] _checkedStates;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    protected CheckBox Element { get; private set; }
    protected AppCompatCheckBox Control { get; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    public CheckBoxRendererBase(Context context);
    public CheckBoxRendererBase(Context context, int defStyleAttr);
    private static CheckBoxRendererBase();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private void Init();
    protected virtual void Dispose(bool disposing);
    private Size MinimumSize();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void Android.Widget.CompoundButton.IOnCheckedChangeListener.OnCheckedChanged(CompoundButton buttonView, bool isChecked);
    private void UpdateIsChecked();
    protected virtual ColorStateList GetColorStateList();
    private void UpdateBackgroundColor();
    private void UpdateBackground();
    private void UpdateOnColor();
    private sealed virtual override void Android.Views.View.IOnFocusChangeListener.OnFocusChange(View v, bool hasFocus);
    private IPlatformElementConfiguration`2<Android, CheckBox> OnThisPlatform();
    public sealed virtual void SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    protected CheckBox get_Element();
    private void set_Element(CheckBox value);
    protected AppCompatCheckBox get_Control();
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
}
internal class Xamarin.Forms.Platform.Android.CircularProgress : ProgressBar {
    [CompilerGeneratedAttribute]
private int <MaxSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <DefaultColor>k__BackingField;
    private static int _paddingRatio;
    private static int _paddingRatio23;
    private bool _isRunning;
    private Color _backgroudColor;
    public int MaxSize { get; public set; }
    public int MinSize { get; public set; }
    public Color DefaultColor { get; public set; }
    private AnimatedVectorDrawable AnimatedDrawable { get; }
    public bool IsRunning { get; public set; }
    public CircularProgress(Context context, IAttributeSet attrs, int defStyleAttr);
    [CompilerGeneratedAttribute]
public int get_MaxSize();
    [CompilerGeneratedAttribute]
public void set_MaxSize(int value);
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [CompilerGeneratedAttribute]
public void set_MinSize(int value);
    [CompilerGeneratedAttribute]
public Color get_DefaultColor();
    [CompilerGeneratedAttribute]
public void set_DefaultColor(Color value);
    public virtual void Draw(Canvas canvas);
    public void SetColor(Color color);
    public void SetBackground(Color color, Brush brush);
    private AnimatedVectorDrawable get_AnimatedDrawable();
    public bool get_IsRunning();
    public void set_IsRunning(bool value);
    public virtual void Layout(int l, int t, int r, int b);
}
public class Xamarin.Forms.Platform.Android.CollectionView.RecyclerViewScrollListener`2 : OnScrollListener {
    private bool _disposed;
    private int _horizontalOffset;
    private int _verticalOffset;
    private TItemsView _itemsView;
    private ItemsViewAdapter`2<TItemsView, TItemsViewSource> _itemsViewAdapter;
    private bool _getCenteredItemOnXAndY;
    public RecyclerViewScrollListener`2(TItemsView itemsView, ItemsViewAdapter`2<TItemsView, TItemsViewSource> itemsViewAdapter);
    public RecyclerViewScrollListener`2(TItemsView itemsView, ItemsViewAdapter`2<TItemsView, TItemsViewSource> itemsViewAdapter, bool getCenteredItemOnXAndY);
    public virtual void OnScrolled(RecyclerView recyclerView, int dx, int dy);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.CollectionViewRenderer : GroupableItemsViewRenderer`3<GroupableItemsView, GroupableItemsViewAdapter`2<GroupableItemsView, IGroupableItemsViewSource>, IGroupableItemsViewSource> {
    public CollectionViewRenderer(Context context);
}
public class Xamarin.Forms.Platform.Android.ColorChangeRevealDrawable : AnimationDrawable {
    private Point _center;
    private Color _endColor;
    private Color _startColor;
    private float _progress;
    private bool _disposed;
    private ValueAnimator _animator;
    internal Color StartColor { get; }
    internal Color EndColor { get; }
    public ColorChangeRevealDrawable(Color startColor, Color endColor, Point center);
    internal Color get_StartColor();
    internal Color get_EndColor();
    public virtual void Draw(Canvas canvas);
    private void OnUpdate(object sender, AnimatorUpdateEventArgs e);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.ColorExtensions : object {
    public static Int32[][] States;
    private static ColorExtensions();
    [ExtensionAttribute]
public static Color ToAndroid(Color self);
    [ExtensionAttribute]
[ObsoleteAttribute("ToAndroid(this Color, int) is obsolete as of version 2.5. Please use ToAndroid(this Color, int, Context) instead.")]
[EditorBrowsableAttribute("1")]
public static Color ToAndroid(Color self, int defaultColorResourceId);
    [ExtensionAttribute]
public static Color ToAndroid(Color self, int defaultColorResourceId, Context context);
    [ExtensionAttribute]
public static Color ToAndroid(Color self, Color defaultColor);
    [ExtensionAttribute]
public static ColorStateList ToAndroidPreserveDisabled(Color color, ColorStateList defaults);
    [ExtensionAttribute]
public static Color ToColor(Color color);
}
internal class Xamarin.Forms.Platform.Android.ConditionalFocusLayout : LinearLayout {
    public ConditionalFocusLayout(IntPtr p, JniHandleOwnership o);
    public ConditionalFocusLayout(Context context);
    public sealed virtual bool OnTouch(View v, MotionEvent e);
    internal void ApplyTouchListenersToSpecialCells(Cell item);
    internal EditText GetEditText(IVisualElementRenderer renderer);
}
public class Xamarin.Forms.Platform.Android.ContainerView : ViewGroup {
    private Context _context;
    private IVisualElementRenderer _renderer;
    private View _view;
    [CompilerGeneratedAttribute]
private bool <MatchHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchWidth>k__BackingField;
    public bool MatchHeight { get; public set; }
    public bool MatchWidth { get; public set; }
    public View View { get; public set; }
    public ContainerView(Context context, View view);
    public ContainerView(Context context, IAttributeSet attribs);
    public ContainerView(Context context, IAttributeSet attribs, int defStyleAttr);
    protected ContainerView(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public bool get_MatchHeight();
    [CompilerGeneratedAttribute]
public void set_MatchHeight(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchWidth();
    [CompilerGeneratedAttribute]
public void set_MatchWidth(bool value);
    public View get_View();
    public void set_View(View value);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void LayoutView(double x, double y, double width, double height);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    protected virtual void OnViewSet(View view);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.ContextExtensions : object {
    private static float s_displayDensity;
    private static Nullable`1<bool> _isDesignerContext;
    private static ContextExtensions();
    [ExtensionAttribute]
public static double FromPixels(Context self, double pixels);
    [ExtensionAttribute]
public static Size FromPixels(Context context, double width, double height);
    [ExtensionAttribute]
public static void HideKeyboard(Context self, View view);
    [ExtensionAttribute]
public static void ShowKeyboard(Context self, View view);
    [ExtensionAttribute]
public static float ToPixels(Context self, double dp);
    [ExtensionAttribute]
public static bool HasRtlSupport(Context self);
    [ExtensionAttribute]
public static int TargetSdkVersion(Context self);
    [ExtensionAttribute]
internal static double GetThemeAttributeDp(Context self, int resource);
    private static void SetupMetrics(Context context);
    [ExtensionAttribute]
public static Activity GetActivity(Context context);
    [ExtensionAttribute]
internal static Context GetThemedContext(Context context);
    [ExtensionAttribute]
internal static bool IsDesignerContext(Context context);
    [ExtensionAttribute]
internal static void SetDesignerContext(Context context);
    internal static void SetDesignerContext(View view);
    [ExtensionAttribute]
internal static bool IsDesignerContext(View view);
    [ExtensionAttribute]
public static FragmentManager GetFragmentManager(Context context);
}
public class Xamarin.Forms.Platform.Android.CustomFrameLayout : FrameLayout {
    public CustomFrameLayout(Context context);
    public CustomFrameLayout(Context context, IAttributeSet attrs);
    public CustomFrameLayout(Context context, IAttributeSet attrs, int defStyleAttr);
    public CustomFrameLayout(Context context, IAttributeSet attrs, int defStyleAttr, int defStyleRes);
    protected CustomFrameLayout(IntPtr javaReference, JniHandleOwnership transfer);
    public virtual WindowInsets OnApplyWindowInsets(WindowInsets insets);
}
internal class Xamarin.Forms.Platform.Android.DataChangeObserver : AdapterDataObserver {
    private IntPtr _adapter;
    private Action _onDataChange;
    [CompilerGeneratedAttribute]
private bool <Observing>k__BackingField;
    public bool Observing { get; private set; }
    public DataChangeObserver(Action onDataChange);
    [CompilerGeneratedAttribute]
public bool get_Observing();
    [CompilerGeneratedAttribute]
private void set_Observing(bool value);
    public void Start(Adapter adapter);
    public void Stop(Adapter adapter);
    public virtual void OnChanged();
    public virtual void OnItemRangeInserted(int positionStart, int itemCount);
    public virtual void OnItemRangeChanged(int positionStart, int itemCount);
    public virtual void OnItemRangeChanged(int positionStart, int itemCount, Object payload);
    public virtual void OnItemRangeRemoved(int positionStart, int itemCount);
    public virtual void OnItemRangeMoved(int fromPosition, int toPosition, int itemCount);
    private bool IsValidAdapter(Adapter adapter);
}
public class Xamarin.Forms.Platform.Android.DatePickerRenderer : DatePickerRendererBase`1<EditText> {
    private TextColorSwitcher _textColorSwitcher;
    protected EditText EditText { get; }
    public DatePickerRenderer(Context context);
    protected virtual EditText CreateNativeControl();
    protected virtual EditText get_EditText();
    protected virtual void UpdateTextColor();
}
public abstract class Xamarin.Forms.Platform.Android.DatePickerRendererBase`1 : ViewRenderer`2<DatePicker, TControl> {
    private int _originalHintTextColor;
    private DatePickerDialog _dialog;
    private bool _disposed;
    protected EditText EditText { get; }
    public DatePickerRendererBase`1(Context context);
    protected abstract virtual EditText get_EditText();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    protected virtual DatePickerDialog CreateDatePickerDialog(int year, int month, int day);
    private void DeviceInfoPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IPickerRenderer.OnClick();
    private void ShowPickerDialog(int year, int month, int day);
    private void OnCancelButtonClicked(object sender, EventArgs e);
    private void SetDate(DateTime date);
    private void UpdateCharacterSpacing();
    private void UpdateFont();
    private void UpdateMaximumDate();
    private void UpdateMinimumDate();
    protected abstract virtual void UpdateTextColor();
}
internal class Xamarin.Forms.Platform.Android.DescendantFocusToggler : object {
    public sealed virtual bool RequestFocus(View control, Func`1<bool> baseRequestFocus);
}
internal class Xamarin.Forms.Platform.Android.Deserializer : object {
    private static string PropertyStoreFile;
    public sealed virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    public sealed virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.DoubleCollectionExtensions : object {
    [ExtensionAttribute]
public static Single[] ToArray(DoubleCollection doubleCollection);
}
internal class Xamarin.Forms.Platform.Android.DragAndDropGestureHandler : Object {
    private bool _isDisposed;
    private static Dictionary`2<VisualElement, DataPackage> _dragSource;
    [CompilerGeneratedAttribute]
private Func`1<View> <GetView>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<View> <GetControl>k__BackingField;
    private Func`1<View> GetView { get; }
    private Func`1<View> GetControl { get; }
    public DragAndDropGestureHandler(Func`1<View> getView, Func`1<View> getControl);
    [CompilerGeneratedAttribute]
private Func`1<View> get_GetView();
    [CompilerGeneratedAttribute]
private Func`1<View> get_GetControl();
    public bool HasAnyDragGestures();
    public bool HasAnyDropGestures();
    public void SetupHandlerForDrop();
    protected virtual void Dispose(bool disposing);
    private void SendEventArgs(Action`1<TRecognizer> func, View view);
    public sealed virtual bool OnDrag(View v, DragEvent e);
    private void HandleDropCompleted(View element);
    private bool HandleDragOver(DataPackage package);
    private void HandleDrop(object sender, DataPackage datapackage, ClipData clipData);
    public void OnLongPress(MotionEvent e);
    private Item ConvertToClipDataItem(ImageSource source, List`1<string> mimeTypes);
    [CompilerGeneratedAttribute]
private void <OnLongPress>b__18_0(DragGestureRecognizer rec);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.DrawableExtensions : object {
    public static BlendMode GetFilterMode(FilterMode mode);
    [ObsoleteAttribute]
private static Mode GetFilterModePre29(FilterMode mode);
    [ExtensionAttribute]
public static ColorFilter GetColorFilter(Drawable drawable);
    [ExtensionAttribute]
public static void SetColorFilter(Drawable drawable, ColorFilter colorFilter);
    [ExtensionAttribute]
public static void SetColorFilter(Drawable drawable, Color color, ColorFilter defaultColorFilter, FilterMode mode);
    [ExtensionAttribute]
public static void SetColorFilter(Drawable drawable, Color color, FilterMode mode);
    [ExtensionAttribute]
public static void SetColorFilter(Drawable drawable, Color color, FilterMode mode);
}
internal interface Xamarin.Forms.Platform.Android.DualScreen.IDualScreenService {
    public bool IsSpanned { get; }
    public bool IsLandscape { get; }
    public Size ScaledScreenSize { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnScreenChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnScreenChanged(EventHandler value);
    public abstract virtual bool get_IsSpanned();
    public abstract virtual bool get_IsLandscape();
    public abstract virtual Rectangle GetHinge();
    public abstract virtual Size get_ScaledScreenSize();
    public abstract virtual Nullable`1<Point> GetLocationOnScreen(VisualElement visualElement);
    public abstract virtual object WatchForChangesOnLayout(VisualElement visualElement, Action action);
    public abstract virtual void StopWatchingForChangesOnLayout(VisualElement visualElement, object handle);
    public abstract virtual Task`1<int> GetHingeAngleAsync();
}
internal abstract class Xamarin.Forms.Platform.Android.EdgeSnapHelper : NongreedySnapHelper {
    protected static OrientationHelper CreateOrientationHelper(LayoutManager layoutManager);
    protected static bool IsLayoutReversed(LayoutManager layoutManager);
    protected Int32[] CalculateDistanceToFinalSnap(LayoutManager layoutManager, View targetView, int direction);
    protected bool IsAtLeastHalfVisible(View view, LayoutManager layoutManager);
    protected abstract virtual int VisiblePortion(View view, OrientationHelper orientationHelper, bool rtl);
}
[ObsoleteAttribute("EditorEditText is obsolete as of version 2.4.0. Please use Xamarin.Forms.Platform.Android.FormsEditText instead.")]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Platform.Android.EditorEditText : FormsEditText {
    public EditorEditText(Context context);
}
public class Xamarin.Forms.Platform.Android.EditorRenderer : EditorRendererBase`1<FormsEditText> {
    private TextColorSwitcher _hintColorSwitcher;
    private TextColorSwitcher _textColorSwitcher;
    protected EditText EditText { get; }
    public EditorRenderer(Context context);
    protected virtual FormsEditText CreateNativeControl();
    protected virtual EditText get_EditText();
    protected virtual void UpdatePlaceholderColor();
    protected virtual void UpdateTextColor();
    protected virtual void OnAttachedToWindow();
}
public abstract class Xamarin.Forms.Platform.Android.EditorRendererBase`1 : ViewRenderer`2<Editor, TControl> {
    private bool _disposed;
    protected EditText EditText { get; }
    private IEditorController ElementController { get; }
    public EditorRendererBase`1(Context context);
    protected abstract virtual EditText get_EditText();
    private IEditorController get_ElementController();
    private sealed virtual override void Android.Text.ITextWatcher.AfterTextChanged(IEditable s);
    private sealed virtual override void Android.Text.ITextWatcher.BeforeTextChanged(ICharSequence s, int start, int count, int after);
    private sealed virtual override void Android.Text.ITextWatcher.OnTextChanged(ICharSequence s, int start, int before, int count);
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual NumberKeyListener GetDigitsKeyListener(InputTypes inputTypes);
    internal virtual void OnNativeFocusChanged(bool hasFocus);
    protected virtual void UpdateFont();
    private void UpdateInputType();
    private void UpdateCharacterSpacing();
    private void UpdateText();
    protected abstract virtual void UpdateTextColor();
    protected virtual void UpdatePlaceholderText();
    protected abstract virtual void UpdatePlaceholderColor();
    private void OnKeyboardBackPressed(object sender, EventArgs eventArgs);
    private void UpdateMaxLength();
    private string TrimToMaxLength(string currentText);
    private void UpdateIsReadOnly();
}
public class Xamarin.Forms.Platform.Android.ElementChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TElement <NewElement>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <OldElement>k__BackingField;
    public TElement NewElement { get; private set; }
    public TElement OldElement { get; private set; }
    public ElementChangedEventArgs`1(TElement oldElement, TElement newElement);
    [CompilerGeneratedAttribute]
public TElement get_NewElement();
    [CompilerGeneratedAttribute]
private void set_NewElement(TElement value);
    [CompilerGeneratedAttribute]
public TElement get_OldElement();
    [CompilerGeneratedAttribute]
private void set_OldElement(TElement value);
}
public class Xamarin.Forms.Platform.Android.ElementSelectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    public Element Element { get; public set; }
    [CompilerGeneratedAttribute]
public Element get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(Element value);
}
public static class Xamarin.Forms.Platform.Android.ElevationHelper : object {
    public static void SetElevation(View view, VisualElement element);
    internal static Nullable`1<float> GetElevation(View view);
    internal static Nullable`1<float> GetElevation(VisualElement element, Context context);
}
public class Xamarin.Forms.Platform.Android.EllipseRenderer : ShapeRenderer`2<Ellipse, EllipseView> {
    public EllipseRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Ellipse> args);
}
public class Xamarin.Forms.Platform.Android.EllipseView : ShapeView {
    public EllipseView(Context context);
    private void UpdateShape();
}
[PreserveAttribute]
public class Xamarin.Forms.Platform.Android.EmbeddedFontLoader : object {
    public sealed virtual ValueTuple`2<bool, string> LoadFont(EmbeddedFont font);
}
internal class Xamarin.Forms.Platform.Android.EmptySource : object {
    [CompilerGeneratedAttribute]
private bool <HasHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFooter>k__BackingField;
    public int Count { get; }
    public bool HasHeader { get; public set; }
    public bool HasFooter { get; public set; }
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasHeader(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasFooter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasFooter(bool value);
    public sealed virtual void Dispose();
    public sealed virtual bool IsHeader(int index);
    public sealed virtual bool IsFooter(int index);
    public sealed virtual int GetPosition(object item);
    public sealed virtual object GetItem(int position);
}
public class Xamarin.Forms.Platform.Android.EmptyViewAdapter : Adapter {
    private int _headerHeight;
    private int _headerViewType;
    private object _headerView;
    private DataTemplate _headerViewTemplate;
    private int _footerHeight;
    private int _footerViewType;
    private object _footerView;
    private DataTemplate _footerViewTemplate;
    private int _emptyItemViewType;
    private object _emptyView;
    private DataTemplate _emptyViewTemplate;
    protected ItemsView ItemsView;
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public object Footer { get; public set; }
    public DataTemplate FooterTemplate { get; public set; }
    public object EmptyView { get; public set; }
    public DataTemplate EmptyViewTemplate { get; public set; }
    public int ItemCount { get; }
    public EmptyViewAdapter(ItemsView itemsView);
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public object get_Footer();
    public void set_Footer(object value);
    public DataTemplate get_FooterTemplate();
    public void set_FooterTemplate(DataTemplate value);
    public object get_EmptyView();
    public void set_EmptyView(object value);
    public DataTemplate get_EmptyViewTemplate();
    public void set_EmptyViewTemplate(DataTemplate value);
    public virtual int get_ItemCount();
    public virtual void OnViewRecycled(Object holder);
    public virtual void OnBindViewHolder(ViewHolder holder, int position);
    public virtual ViewHolder OnCreateViewHolder(ViewGroup parent, int viewType);
    public virtual int GetItemViewType(int position);
    protected ViewHolder CreateHeaderFooterViewHolder(object content, DataTemplate template, Context context);
    protected ViewHolder CreateEmptyViewHolder(object content, DataTemplate template, ViewGroup parent);
    protected void BindTemplatedItemViewHolder(TemplatedItemViewHolder templatedItemViewHolder, object context);
    private bool IsHeader(int position);
    private bool IsFooter(int position);
    private bool IsEmpty(int position);
    private int GetHeight(ViewGroup parent);
    private int GetWidth(ViewGroup parent);
    private void UpdateHeaderFooterHeight(object item, bool isHeader);
}
internal class Xamarin.Forms.Platform.Android.EndSingleSnapHelper : SingleSnapHelper {
    public virtual Int32[] CalculateDistanceToFinalSnap(LayoutManager layoutManager, View targetView);
}
internal class Xamarin.Forms.Platform.Android.EndSnapHelper : EdgeSnapHelper {
    public virtual Int32[] CalculateDistanceToFinalSnap(LayoutManager layoutManager, View targetView);
    public virtual View FindSnapView(LayoutManager layoutManager);
    protected virtual int VisiblePortion(View view, OrientationHelper orientationHelper, bool rtl);
}
internal class Xamarin.Forms.Platform.Android.EntryAccessibilityDelegate : AccessibilityDelegate {
    private BindableObject _element;
    [CompilerGeneratedAttribute]
private string <ValueText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    public string ValueText { get; public set; }
    public string ClassName { get; public set; }
    public EntryAccessibilityDelegate(BindableObject Element);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public string get_ValueText();
    [CompilerGeneratedAttribute]
public void set_ValueText(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    public virtual void OnInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo info);
}
public class Xamarin.Forms.Platform.Android.EntryCellEditText : EditText {
    private SoftInput _startingMode;
    [CompilerGeneratedAttribute]
private EventHandler BackButtonPressed;
    public EntryCellEditText(Context context);
    public virtual bool OnKeyPreIme(Keycode keyCode, KeyEvent e);
    protected virtual void OnFocusChanged(bool gainFocus, FocusSearchDirection direction, Rect previouslyFocusedRect);
    [CompilerGeneratedAttribute]
internal void add_BackButtonPressed(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_BackButtonPressed(EventHandler value);
}
public class Xamarin.Forms.Platform.Android.EntryCellRenderer : CellRenderer {
    private EntryCellView _view;
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
    protected virtual void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual NumberKeyListener GetDigitsKeyListener(InputTypes inputTypes);
    private void OnEditingCompleted();
    private void OnTextChanged(string text);
    private void UpdateHeight();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateIsEnabled();
    private void UpdateKeyboard();
    private void UpdateLabel();
    private void UpdateLabelColor();
    private void UpdateFlowDirection();
    private void UpdatePlaceholder();
    private void UpdateText();
}
public class Xamarin.Forms.Platform.Android.EntryCellView : LinearLayout {
    public static double DefaultMinHeight;
    private Cell _cell;
    private TextView _label;
    private Color _labelTextColor;
    private string _labelTextText;
    [CompilerGeneratedAttribute]
private Action <EditingCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryCellEditText <EditText>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<bool> <FocusChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <TextChanged>k__BackingField;
    public Action EditingCompleted { get; public set; }
    public EntryCellEditText EditText { get; }
    public Action`1<bool> FocusChanged { get; public set; }
    public string LabelText { get; public set; }
    public Action`1<string> TextChanged { get; public set; }
    public Element Element { get; }
    public EntryCellView(Context context, Cell cell);
    [CompilerGeneratedAttribute]
public Action get_EditingCompleted();
    [CompilerGeneratedAttribute]
public void set_EditingCompleted(Action value);
    [CompilerGeneratedAttribute]
public EntryCellEditText get_EditText();
    [CompilerGeneratedAttribute]
public Action`1<bool> get_FocusChanged();
    [CompilerGeneratedAttribute]
public void set_FocusChanged(Action`1<bool> value);
    public string get_LabelText();
    public void set_LabelText(string value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_TextChanged();
    [CompilerGeneratedAttribute]
public void set_TextChanged(Action`1<string> value);
    public sealed virtual Element get_Element();
    private sealed virtual override bool Android.Widget.TextView.IOnEditorActionListener.OnEditorAction(TextView v, ImeAction actionId, KeyEvent e);
    private sealed virtual override void Android.Views.View.IOnFocusChangeListener.OnFocusChange(View view, bool hasFocus);
    private sealed virtual override void Android.Text.ITextWatcher.AfterTextChanged(IEditable s);
    private sealed virtual override void Android.Text.ITextWatcher.BeforeTextChanged(ICharSequence s, int start, int count, int after);
    private sealed virtual override void Android.Text.ITextWatcher.OnTextChanged(ICharSequence s, int start, int before, int count);
    public void SetLabelTextColor(Color color, int defaultColorResourceId);
    public void SetRenderHeight(double height);
    private void OnBackButtonPressed(object sender, EventArgs e);
    private void OnKeyboardDoneButtonPressed(object sender, EventArgs e);
}
[ObsoleteAttribute("EntryEditText is obsolete as of version 2.4.0. Please use Xamarin.Forms.Platform.Android.FormsEditText instead.")]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Platform.Android.EntryEditText : FormsEditText {
    public EntryEditText(Context context);
}
public class Xamarin.Forms.Platform.Android.EntryRenderer : EntryRendererBase`1<FormsEditText> {
    private TextColorSwitcher _hintColorSwitcher;
    private TextColorSwitcher _textColorSwitcher;
    protected EditText EditText { get; }
    public EntryRenderer(Context context);
    protected virtual FormsEditText CreateNativeControl();
    protected virtual EditText get_EditText();
    protected virtual void UpdateIsReadOnly();
    protected virtual void UpdatePlaceholderColor();
    protected virtual void UpdateColor();
    protected virtual void UpdateTextColor(Color color);
}
public abstract class Xamarin.Forms.Platform.Android.EntryRendererBase`1 : ViewRenderer`2<Entry, TControl> {
    private bool _disposed;
    private ImeAction _currentInputImeFlag;
    private bool _cursorPositionChangePending;
    private bool _selectionLengthChangePending;
    private bool _nativeSelectionIsUpdating;
    private Drawable _clearBtn;
    private IElementController ElementController { get; }
    protected EditText EditText { get; }
    public EntryRendererBase`1(Context context);
    private IElementController get_ElementController();
    protected abstract virtual EditText get_EditText();
    private sealed virtual override bool Android.Widget.TextView.IOnEditorActionListener.OnEditorAction(TextView v, ImeAction actionId, KeyEvent e);
    private sealed virtual override void Android.Text.ITextWatcher.AfterTextChanged(IEditable s);
    private sealed virtual override void Android.Text.ITextWatcher.BeforeTextChanged(ICharSequence s, int start, int count, int after);
    private sealed virtual override void Android.Text.ITextWatcher.OnTextChanged(ICharSequence s, int start, int before, int count);
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdatePlaceHolderText();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual NumberKeyListener GetDigitsKeyListener(InputTypes inputTypes);
    protected virtual void UpdateImeOptions();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    protected abstract virtual void UpdateColor();
    protected abstract virtual void UpdateTextColor(Color color);
    protected virtual void UpdateFont();
    private void UpdateInputType();
    protected abstract virtual void UpdatePlaceholderColor();
    private void OnKeyboardBackPressed(object sender, EventArgs eventArgs);
    private void UpdateMaxLength();
    private void UpdateCharacterSpacing();
    private void UpdateReturnType();
    private void SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void UpdateCursorSelection();
    private int GetSelectionEnd(int start);
    private int GetSelectionStart();
    private void SetCursorPositionFromRenderer(int start);
    private void SetSelectionLengthFromRenderer(int selectionLength);
    protected virtual void UpdateIsReadOnly();
    private void UpdateText();
    internal virtual void OnNativeFocusChanged(bool hasFocus);
    private void OnAfterTextChanged(IEditable s);
    private void EditTextTouched(object sender, TouchEventArgs e);
    private void UpdateClearBtnOnElementChanged();
    private void UpdateClearBtnOnPropertyChanged();
    private void UpdateClearBtnOnFocusChanged(bool isFocused);
    private void UpdateClearBtnOnTyping();
    private void UpdateClearBtn(bool showClearButton);
    protected virtual Drawable GetCloseButtonDrawable();
    private void ListenForCloseBtnTouch(bool listen);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.EntryRendererExtensions : object {
    [ExtensionAttribute]
internal static ImeAction ToAndroidImeAction(ReturnType returnType);
    [ExtensionAttribute]
public static ImeAction ToAndroidImeOptions(ImeFlags flags);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.Extensions : object {
    [ExtensionAttribute]
internal static IMenuItem FindMenuItemByNameOrIcon(IMenu menu, string menuName, string iconName);
    [ExtensionAttribute]
internal static DeviceOrientation ToDeviceOrientation(Orientation orientation);
    [ExtensionAttribute]
internal static bool IsHorizontal(ButtonContentLayout layout);
    [ExtensionAttribute]
internal static float ToEm(double pt);
}
internal class Xamarin.Forms.Platform.Android.FastRenderers.AutomationPropertiesProvider : object {
    private static string s_defaultDrawerId;
    private static string s_defaultDrawerIdOpenSuffix;
    private static string s_defaultDrawerIdCloseSuffix;
    private string _defaultContentDescription;
    private Nullable`1<bool> _defaultFocusable;
    private Nullable`1<ImportantForAccessibility> _defaultImportantForAccessibility;
    private string _defaultHint;
    private bool _disposed;
    private IVisualElementRenderer _renderer;
    private View Control { get; }
    private VisualElement Element { get; }
    public AutomationPropertiesProvider(IVisualElementRenderer renderer);
    private static AutomationPropertiesProvider();
    internal static void GetDrawerAccessibilityResources(Context context, MasterDetailPage page, Int32& resourceIdOpen, Int32& resourceIdClose);
    internal static void SetAutomationId(View control, Element element, string value);
    internal static void SetBasicContentDescription(View control, BindableObject bindableObject, String& defaultContentDescription);
    internal static void SetContentDescription(View control, BindableObject element, String& defaultContentDescription, String& defaultHint);
    internal static void SetFocusable(View control, Element element, Nullable`1& defaultFocusable, Nullable`1& defaultImportantForAccessibility);
    internal static void SetLabeledBy(View control, Element element);
    private static bool SetHint(View Control, BindableObject Element, String& defaultHint);
    private View get_Control();
    private VisualElement get_Element();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void SetAutomationId();
    private void SetContentDescription();
    private void SetFocusable();
    private bool SetHint();
    private void SetLabeledBy();
    internal static void AccessibilitySettingsChanged(View control, Element element, String& _defaultHint, String& _defaultContentDescription, Nullable`1& _defaultFocusable, Nullable`1& _defaultImportantForAccessibility);
    internal static void AccessibilitySettingsChanged(View control, Element element);
    internal static string ConcatenateNameAndHelpText(BindableObject Element);
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer : AppCompatButton {
    private float _defaultFontSize;
    private Nullable`1<int> _defaultLabelFor;
    private Typeface _defaultTypeface;
    private bool _isDisposed;
    private bool _inputTransparent;
    private Lazy`1<TextColorSwitcher> _textColorSwitcher;
    private AutomationPropertiesProvider _automationPropertiesProvider;
    private VisualElementTracker _tracker;
    private VisualElementRenderer _visualElementRenderer;
    private BorderBackgroundManager _backgroundTracker;
    private ButtonLayoutManager _buttonLayoutManager;
    private IPlatformElementConfiguration`2<Android, Button> _platformElementConfiguration;
    private Button _button;
    private bool _hasLayoutOccurred;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    protected Button Element { get; }
    protected AppCompatButton Control { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.Element { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private Button Button { get; private set; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowRadius { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDx { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDy { get; }
    private Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowColor { get; }
    private View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.View { get; }
    private AppCompatButton Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.View { get; }
    private Button Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.Element { get; }
    public ButtonRenderer(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    protected Button get_Element();
    protected AppCompatButton get_Control();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_Element();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private Button get_Button();
    private void set_Button(Button value);
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    private sealed virtual override void Android.Views.View.IOnClickListener.OnClick(View v);
    private sealed virtual override bool Android.Views.View.IOnTouchListener.OnTouch(View v, MotionEvent e);
    private sealed virtual override void Android.Views.View.IOnAttachStateChangeListener.OnViewAttachedToWindow(View attachedView);
    private sealed virtual override void Android.Views.View.IOnAttachStateChangeListener.OnViewDetachedFromWindow(View detachedView);
    private sealed virtual override void Android.Views.View.IOnFocusChangeListener.OnFocusChange(View v, bool hasFocus);
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    public virtual void Draw(Canvas canvas);
    protected virtual void Dispose(bool disposing);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    private void SetTracker(VisualElementTracker tracker);
    private void UpdateBackgroundColor();
    internal void OnNativeFocusChanged(bool hasFocus);
    internal void SendVisualElementInitialized(VisualElement element, View nativeView);
    private void Initialize();
    private void UpdateFont();
    private void UpdateInputTransparent();
    private void UpdateTextColor();
    private void UpdateCharacterSpacing();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowRadius();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDx();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDy();
    private sealed virtual override Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowColor();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultPadding();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultShadow();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.IsShadowEnabled();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_View();
    private IPlatformElementConfiguration`2<Android, Button> OnThisPlatform();
    private sealed virtual override AppCompatButton Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.get_View();
    private sealed virtual override Button Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.get_Element();
}
internal class Xamarin.Forms.Platform.Android.FastRenderers.EffectControlProvider : object {
    private View _control;
    private ViewGroup _container;
    public EffectControlProvider(View control);
    public EffectControlProvider(View control, ViewGroup container);
    public sealed virtual void RegisterEffect(Effect effect);
}
public class Xamarin.Forms.Platform.Android.FastRenderers.FrameRenderer : CardView {
    private float _defaultElevation;
    private float _defaultCornerRadius;
    private Nullable`1<int> _defaultLabelFor;
    private bool _hasLayoutOccurred;
    private bool _disposed;
    private Frame _element;
    private GradientDrawable _backgroundDrawable;
    private VisualElementPackager _visualElementPackager;
    private VisualElementTracker _visualElementTracker;
    private VisualElementRenderer _visualElementRenderer;
    private MotionEventHelper _motionEventHelper;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    protected CardView Control { get; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    protected Frame Element { get; protected set; }
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    public FrameRenderer(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    protected CardView get_Control();
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    protected Frame get_Element();
    protected void set_Element(Frame value);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Frame> e);
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    public virtual void Draw(Canvas canvas);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateClippedToBounds();
    private void UpdateBackgroundColor();
    private void UpdateBackground();
    private void UpdateBorderColor();
    private void UpdateShadow();
    private void UpdateCornerRadius();
}
public static class Xamarin.Forms.Platform.Android.FastRenderers.ImageElementManager : object {
    public static void Init(IVisualElementRenderer renderer);
    private static void OnLayoutChange(object sender, LayoutChangeEventArgs e);
    public static void Dispose(IVisualElementRenderer renderer);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FastRenderers.ImageElementManager/<OnElementChanged>d__3")]
private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FastRenderers.ImageElementManager/<OnElementPropertyChanged>d__4")]
private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FastRenderers.ImageElementManager/<StartStopAnimation>d__5")]
private static Task StartStopAnimation(IVisualElementRenderer renderer, IImageController imageController, IImageElement imageElement);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FastRenderers.ImageElementManager/<TryUpdateBitmap>d__6")]
private static Task TryUpdateBitmap(IImageRendererController rendererController, ImageView Control, IImageElement newImage, IImageElement previous);
    internal static void OnAnimationStopped(IElementController image, FormsAnimationDrawableStateEventArgs e);
    private static void UpdateAspect(IImageRendererController rendererController, ImageView Control, IImageElement newImage, IImageElement previous);
}
public class Xamarin.Forms.Platform.Android.FastRenderers.ImageRenderer : ImageView {
    private bool _hasLayoutOccurred;
    private bool _disposed;
    private Image _element;
    private bool _skipInvalidate;
    private Nullable`1<int> _defaultLabelFor;
    private VisualElementTracker _visualElementTracker;
    private VisualElementRenderer _visualElementRenderer;
    private MotionEventHelper _motionEventHelper;
    private IFormsAnimationDrawable _formsAnimationDrawable;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private bool Xamarin.Forms.Platform.Android.IImageRendererController.IsDisposed { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private bool Xamarin.Forms.Platform.Android.ILayoutChanges.HasLayoutOccurred { get; }
    protected ImageView Control { get; }
    protected Image Element { get; }
    public ImageRenderer(Context context);
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IImageRendererController.get_IsDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    public virtual void Invalidate();
    public virtual void Draw(Canvas canvas);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    public virtual bool OnTouchEvent(MotionEvent e);
    private Size MinimumSize();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IImageRendererController.SkipInvalidate();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IImageRendererController.SetFormsAnimationDrawable(IFormsAnimationDrawable value);
    private sealed virtual override bool Xamarin.Forms.Platform.Android.ILayoutChanges.get_HasLayoutOccurred();
    private void OnAnimationStopped(object sender, FormsAnimationDrawableStateEventArgs e);
    protected ImageView get_Control();
    protected Image get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.ILayoutChanges.add_LayoutChange(EventHandler`1<LayoutChangeEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.ILayoutChanges.remove_LayoutChange(EventHandler`1<LayoutChangeEventArgs> value);
}
public class Xamarin.Forms.Platform.Android.FastRenderers.LabelRenderer : FormsTextView {
    private Nullable`1<int> _defaultLabelFor;
    private bool _disposed;
    private Label _element;
    private ColorStateList _labelTextColorDefault;
    private int _lastConstraintHeight;
    private int _lastConstraintWidth;
    private Nullable`1<SizeRequest> _lastSizeRequest;
    private float _lastTextSize;
    private Typeface _lastTypeface;
    private Color _lastUpdateColor;
    private float _lineSpacingExtraDefault;
    private float _lineSpacingMultiplierDefault;
    private VisualElementTracker _visualElementTracker;
    private VisualElementRenderer _visualElementRenderer;
    private MotionEventHelper _motionEventHelper;
    private SpannableString _spannableString;
    private bool _hasLayoutOccurred;
    private bool _wasFormatted;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    protected Label Element { get; protected set; }
    protected TextView Control { get; }
    public LabelRenderer(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    protected Label get_Element();
    protected void set_Element(Label value);
    protected TextView get_Control();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    protected virtual void Dispose(bool disposing);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateColor();
    private void UpdateFont();
    private void UpdateTextDecorations();
    private void UpdateGravity();
    private void UpdateCharacterSpacing();
    private void UpdateLineBreakMode();
    private void UpdateMaxLines();
    private void UpdateText();
    private void UpdateLineHeight();
    private void UpdatePadding();
}
public class Xamarin.Forms.Platform.Android.FastRenderers.VisualElementRenderer : object {
    private bool _disposed;
    private IVisualElementRenderer _renderer;
    private GestureManager _gestureManager;
    private AutomationPropertiesProvider _automationPropertiesProvider;
    private EffectControlProvider _effectControlProvider;
    private VisualElement Element { get; }
    private View Control { get; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    public VisualElementRenderer(IVisualElementRenderer renderer);
    private VisualElement get_Element();
    private View get_Control();
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private void UpdateFlowDirection();
    public bool OnTouchEvent(MotionEvent e);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private void UpdateIsEnabled();
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Android.FileImageSourceHandler : object {
    [CompilerGeneratedAttribute]
private static bool <DecodeSynchronously>k__BackingField;
    internal static bool DecodeSynchronously { get; internal set; }
    [CompilerGeneratedAttribute]
internal static bool get_DecodeSynchronously();
    [CompilerGeneratedAttribute]
internal static void set_DecodeSynchronously(bool value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FileImageSourceHandler/<LoadImageAsync>d__4")]
public sealed virtual Task`1<Bitmap> LoadImageAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken);
    public sealed virtual Task LoadImageAsync(ImageSource imagesource, ImageView imageView, CancellationToken cancellationToken);
    public sealed virtual Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken, float scale);
}
internal enum Xamarin.Forms.Platform.Android.FilterMode : Enum {
    public int value__;
    public static FilterMode SrcIn;
    public static FilterMode Multiply;
    public static FilterMode SrcAtop;
    public static FilterMode Clear;
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.FlowDirectionExtensions : object {
    [ExtensionAttribute]
internal static FlowDirection ToFlowDirection(LayoutDirection direction);
    [ExtensionAttribute]
internal static void UpdateFlowDirection(View view, IVisualElementController controller);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.FontExtensions : object {
    private static ConcurrentDictionary`2<Tuple`2<string, FontAttributes>, Typeface> Typefaces;
    private static Typeface s_defaultTypeface;
    private static FontExtensions();
    [ExtensionAttribute]
public static float ToScaledPixel(Font self);
    [ExtensionAttribute]
internal static Typeface ToTypeFace(string fontfamily, FontAttributes attr);
    [ExtensionAttribute]
private static ValueTuple`2<bool, Typeface> TryGetFromAssets(string fontName);
    private static ValueTuple`2<bool, Typeface> LoadTypefaceFromAsset(string fontfamily);
    [ExtensionAttribute]
public static Typeface ToTypeface(Font self);
    [ExtensionAttribute]
internal static bool IsDefault(IFontElement self);
    private static bool IsAssetFontFamily(string name);
    [ExtensionAttribute]
internal static Typeface ToTypeface(IFontElement self);
    private static Typeface ToTypeface(string fontFamily, FontAttributes fontAttributes);
    private static Typeface CreateTypeface(Tuple`2<string, FontAttributes> key);
    public static TypefaceStyle ToTypefaceStyle(FontAttributes attrs);
    private static string FontNameToFontFile(string fontFamily);
}
public class Xamarin.Forms.Platform.Android.FontImageSourceHandler : object {
    public sealed virtual Task`1<Bitmap> LoadImageAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.FormattedStringExtensions : object {
    [ExtensionAttribute]
public static SpannableString ToAttributed(FormattedString formattedString, Font defaultFont, Color defaultForegroundColor, TextView view);
}
public class Xamarin.Forms.Platform.Android.FormsAnimationDrawable : AnimationDrawable {
    private static int DefaultBufferSize;
    private int _repeatCounter;
    private int _frameCount;
    private bool _finished;
    private bool _isRunning;
    [CompilerGeneratedAttribute]
private int <RepeatCount>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler AnimationStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<FormsAnimationDrawableStateEventArgs> AnimationStopped;
    public int RepeatCount { get; public set; }
    public bool IsRunning { get; }
    public Drawable ImageDrawable { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_RepeatCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RepeatCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnimationStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnimationStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnimationStopped(EventHandler`1<FormsAnimationDrawableStateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnimationStopped(EventHandler`1<FormsAnimationDrawableStateEventArgs> value);
    public virtual bool get_IsRunning();
    public sealed virtual Drawable get_ImageDrawable();
    public virtual void Start();
    public virtual void Stop();
    public virtual bool SelectDrawable(int index);
    public static Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FormsAnimationDrawable/<LoadImageAnimationAsync>d__24")]
public Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(StreamImageSource imagesource, Context context, CancellationToken cancelationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FormsAnimationDrawable/<LoadImageAnimationAsync>d__25")]
public static Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(FileImageSource imagesource, Context context, CancellationToken cancelationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FormsAnimationDrawable/<LoadImageAnimationAsync>d__26")]
public static Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(UriImageSource imagesource, Context context, CancellationToken cancelationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FormsAnimationDrawable/<GetFormsAnimationDrawableFromResource>d__27")]
internal static Task`1<FormsAnimationDrawable> GetFormsAnimationDrawableFromResource(int resourceId, Context context, Options options);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FormsAnimationDrawable/<GetFormsAnimationDrawableFromFile>d__28")]
internal static Task`1<FormsAnimationDrawable> GetFormsAnimationDrawableFromFile(string file, Context context, Options options);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.FormsAnimationDrawable/<GetFormsAnimationDrawableFromStream>d__29")]
internal static Task`1<FormsAnimationDrawable> GetFormsAnimationDrawableFromStream(Stream stream, Context context, Options options);
    [CompilerGeneratedAttribute]
private void <SelectDrawable>b__22_0();
}
public class Xamarin.Forms.Platform.Android.FormsAnimationDrawableStateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Finished>k__BackingField;
    public bool Finished { get; public set; }
    public FormsAnimationDrawableStateEventArgs(bool finished);
    [CompilerGeneratedAttribute]
public bool get_Finished();
    [CompilerGeneratedAttribute]
public void set_Finished(bool value);
}
public class Xamarin.Forms.Platform.Android.FormsAppCompatActivity : AppCompatActivity {
    private Application _application;
    private AndroidApplicationLifecycleState _currentState;
    private RelativeLayout _layout;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    private AndroidApplicationLifecycleState _previousState;
    private bool _renderersAdded;
    private bool _activityCreated;
    private bool _needMainPageAssign;
    private bool _powerSaveReceiverRegistered;
    private PowerSaveModeBroadcastReceiver _powerSaveModeBroadcastReceiver;
    private static ManualResetEventSlim PreviousActivityDestroying;
    [CompilerGeneratedAttribute]
private EventHandler ConfigurationChanged;
    [CompilerGeneratedAttribute]
private static BackButtonPressedEventHandler BackPressed;
    [CompilerGeneratedAttribute]
private static int <TabLayoutResource>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <ToolbarResource>k__BackingField;
    internal Platform Platform { get; private set; }
    protected bool AllowFragmentRestore { get; }
    public static int TabLayoutResource { get; public set; }
    public static int ToolbarResource { get; public set; }
    private static FormsAppCompatActivity();
    [CompilerGeneratedAttribute]
internal Platform get_Platform();
    [CompilerGeneratedAttribute]
private void set_Platform(Platform value);
    protected virtual bool get_AllowFragmentRestore();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigurationChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigurationChanged(EventHandler value);
    public virtual void OnBackPressed();
    public virtual void OnConfigurationChanged(Configuration newConfig);
    public virtual bool OnOptionsItemSelected(IMenuItem item);
    public void SetStatusBarColor(Color color);
    private static void RegisterHandler(Type target, Type handler, Type filter);
    private static void RegisterHandlers();
    protected void LoadApplication(Application application);
    protected virtual void OnActivityResult(int requestCode, Result resultCode, Intent data);
    protected void OnCreate(ActivationOptions options);
    protected virtual void OnCreate(Bundle savedInstanceState);
    private void OnCreate(Bundle savedInstanceState, ActivationFlags flags);
    protected virtual void OnDestroy();
    protected virtual void OnNewIntent(Intent intent);
    protected virtual void OnPause();
    protected virtual void OnRestart();
    protected virtual void OnResume();
    protected virtual void OnStart();
    protected virtual void OnStop();
    private void AppOnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void AppOnPropertyChanging(object sender, PropertyChangingEventArgs args);
    private void CheckForAppLink(Intent intent);
    private void InternalSetPage(Page page);
    private void OnStateChanged();
    private void RegisterHandlerForDefaultRenderer(Type target, Type handler, Type filter);
    private void SetMainPage();
    private void SettingMainPage();
    private void SetSoftInputMode();
    [CompilerGeneratedAttribute]
public static void add_BackPressed(BackButtonPressedEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_BackPressed(BackButtonPressedEventHandler value);
    [CompilerGeneratedAttribute]
public static int get_TabLayoutResource();
    [CompilerGeneratedAttribute]
public static void set_TabLayoutResource(int value);
    [CompilerGeneratedAttribute]
public static int get_ToolbarResource();
    [CompilerGeneratedAttribute]
public static void set_ToolbarResource(int value);
}
public class Xamarin.Forms.Platform.Android.FormsApplicationActivity : Activity {
    private Application _application;
    private AndroidApplicationLifecycleState _currentState;
    private LinearLayout _layout;
    private bool _powerSaveReceiverRegistered;
    private PowerSaveModeBroadcastReceiver _powerSaveModeBroadcastReceiver;
    private AndroidApplicationLifecycleState _previousState;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler ConfigurationChanged;
    [CompilerGeneratedAttribute]
private static BackButtonPressedEventHandler BackPressed;
    internal Platform Platform { get; private set; }
    [CompilerGeneratedAttribute]
internal Platform get_Platform();
    [CompilerGeneratedAttribute]
private void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigurationChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigurationChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public static void add_BackPressed(BackButtonPressedEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_BackPressed(BackButtonPressedEventHandler value);
    public virtual void OnBackPressed();
    public virtual void OnConfigurationChanged(Configuration newConfig);
    public virtual bool OnOptionsItemSelected(IMenuItem item);
    public virtual bool OnPrepareOptionsMenu(IMenu menu);
    [ObsoleteAttribute("SetPage is obsolete as of version 1.3.0. Please use protected LoadApplication (Application app) instead.")]
[EditorBrowsableAttribute("1")]
public void SetPage(Page page);
    protected void LoadApplication(Application application);
    protected virtual void OnActivityResult(int requestCode, Result resultCode, Intent data);
    protected virtual void OnCreate(Bundle savedInstanceState);
    protected virtual void OnDestroy();
    protected virtual void OnPause();
    protected virtual void OnRestart();
    protected virtual void OnResume();
    protected virtual void OnStart();
    protected virtual void OnStop();
    private void AppOnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void InternalSetPage(Page page);
    private void OnStateChanged();
    private void SetMainPage();
    private void SetSoftInputMode();
}
public class Xamarin.Forms.Platform.Android.FormsEditText : FormsEditTextBase {
    [CompilerGeneratedAttribute]
private EventHandler _onKeyboardBackPressed;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectionChangedEventArgs> _selectionChanged;
    public FormsEditText(Context context);
    public virtual bool OnKeyPreIme(Keycode keyCode, KeyEvent e);
    protected virtual void OnSelectionChanged(int selStart, int selEnd);
    [CompilerGeneratedAttribute]
private void add__onKeyboardBackPressed(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__onKeyboardBackPressed(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IFormsEditText.add_OnKeyboardBackPressed(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IFormsEditText.remove_OnKeyboardBackPressed(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__selectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__selectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IFormsEditText.add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IFormsEditText.remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
}
public class Xamarin.Forms.Platform.Android.FormsEditTextBase : EditText {
    private DescendantFocusToggler _descendantFocusToggler;
    public FormsEditTextBase(Context context);
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IDescendantFocusToggler.RequestFocus(View control, Func`1<bool> baseRequestFocus);
    public virtual bool RequestFocus(FocusSearchDirection direction, Rect previouslyFocusedRect);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0(FocusSearchDirection direction, Rect previouslyFocusedRect);
}
internal class Xamarin.Forms.Platform.Android.FormsImageView : ImageView {
    private bool _skipInvalidate;
    private bool Xamarin.Forms.Platform.Android.IImageRendererController.IsDisposed { get; }
    public FormsImageView(Context context);
    protected FormsImageView(IntPtr javaReference, JniHandleOwnership transfer);
    public virtual void Invalidate();
    public sealed virtual void SkipInvalidate();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IImageRendererController.SetFormsAnimationDrawable(IFormsAnimationDrawable formsAnimationDrawable);
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IImageRendererController.get_IsDisposed();
}
internal class Xamarin.Forms.Platform.Android.FormsSeekBar : SeekBar {
    private bool isTouching;
    public bool Pressed { get; public set; }
    public FormsSeekBar(Context context);
    public virtual bool OnTouchEvent(MotionEvent e);
    public virtual bool get_Pressed();
    public virtual void set_Pressed(bool value);
}
public class Xamarin.Forms.Platform.Android.FormsTextView : TextView {
    public FormsTextView(Context context);
    [ObsoleteAttribute]
public FormsTextView(Context context, IAttributeSet attrs);
    [ObsoleteAttribute]
public FormsTextView(Context context, IAttributeSet attrs, int defStyle);
    [ObsoleteAttribute]
protected FormsTextView(IntPtr javaReference, JniHandleOwnership transfer);
    [ObsoleteAttribute]
public void SkipNextInvalidate();
}
internal class Xamarin.Forms.Platform.Android.FormsVideoView : VideoView {
    [CompilerGeneratedAttribute]
private EventHandler MetadataRetrieved;
    [CompilerGeneratedAttribute]
private int <VideoHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VideoWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DurationTimeSpan>k__BackingField;
    public int VideoHeight { get; private set; }
    public int VideoWidth { get; private set; }
    public Nullable`1<TimeSpan> DurationTimeSpan { get; private set; }
    public TimeSpan Position { get; }
    public FormsVideoView(Context context);
    [CompilerGeneratedAttribute]
public void add_MetadataRetrieved(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MetadataRetrieved(EventHandler value);
    public virtual void SetVideoPath(string path);
    private void ExtractMetadata(MediaMetadataRetriever retriever);
    public virtual void SetVideoURI(Uri uri, IDictionary`2<string, string> headers);
    public virtual void SetVideoURI(Uri uri);
    private void GetMetaData(Uri uri, IDictionary`2<string, string> headers);
    [CompilerGeneratedAttribute]
public int get_VideoHeight();
    [CompilerGeneratedAttribute]
private void set_VideoHeight(int value);
    [CompilerGeneratedAttribute]
public int get_VideoWidth();
    [CompilerGeneratedAttribute]
private void set_VideoWidth(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DurationTimeSpan();
    [CompilerGeneratedAttribute]
private void set_DurationTimeSpan(Nullable`1<TimeSpan> value);
    public TimeSpan get_Position();
}
public class Xamarin.Forms.Platform.Android.FormsWebChromeClient : WebChromeClient {
    private Activity _activity;
    private List`1<int> _requestCodes;
    public virtual bool OnShowFileChooser(WebView webView, IValueCallback filePathCallback, FileChooserParams fileChooserParams);
    public void UnregisterCallbacks();
    protected bool ChooseFile(IValueCallback filePathCallback, Intent intent, string title);
    protected virtual void Dispose(bool disposing);
    protected virtual Object ParseResult(Result resultCode, Intent data);
    internal void SetContext(Context thisActivity);
}
public class Xamarin.Forms.Platform.Android.FormsWebViewClient : WebViewClient {
    private WebNavigationResult _navigationResult;
    private WebViewRenderer _renderer;
    private string _lastUrlNavigatedCancel;
    public FormsWebViewClient(WebViewRenderer renderer);
    protected FormsWebViewClient(IntPtr javaReference, JniHandleOwnership transfer);
    private bool SendNavigatingCanceled(string url);
    [ObsoleteAttribute("ShouldOverrideUrlLoading(view,url) is obsolete as of version 4.0.0. This method was deprecated in API level 24.")]
[EditorBrowsableAttribute("1")]
public virtual bool ShouldOverrideUrlLoading(WebView view, string url);
    public virtual bool ShouldOverrideUrlLoading(WebView view, IWebResourceRequest request);
    public virtual void OnPageStarted(WebView view, string url, Bitmap favicon);
    public virtual void OnPageFinished(WebView view, string url);
    [ObsoleteAttribute("OnReceivedError is obsolete as of version 2.3.0. This method was deprecated in API level 23.")]
[EditorBrowsableAttribute("1")]
public virtual void OnReceivedError(WebView view, ClientError errorCode, string description, string failingUrl);
    public virtual void OnReceivedError(WebView view, IWebResourceRequest request, WebResourceError error);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.FragmentManagerExtensions : object {
    [ExtensionAttribute]
public static FragmentTransaction RemoveEx(FragmentTransaction fragmentTransaction, Fragment fragment);
    [ExtensionAttribute]
public static FragmentTransaction AddEx(FragmentTransaction fragmentTransaction, int containerViewId, Fragment fragment);
    [ExtensionAttribute]
public static FragmentTransaction ReplaceEx(FragmentTransaction fragmentTransaction, int containerViewId, Fragment fragment);
    [ExtensionAttribute]
public static FragmentTransaction HideEx(FragmentTransaction fragmentTransaction, Fragment fragment);
    [ExtensionAttribute]
public static FragmentTransaction ShowEx(FragmentTransaction fragmentTransaction, Fragment fragment);
    [ExtensionAttribute]
public static FragmentTransaction SetTransitionEx(FragmentTransaction fragmentTransaction, int transit);
    [ExtensionAttribute]
public static int CommitAllowingStateLossEx(FragmentTransaction fragmentTransaction);
    [ExtensionAttribute]
public static bool ExecutePendingTransactionsEx(FragmentManager fragmentManager);
    [ExtensionAttribute]
public static FragmentTransaction BeginTransactionEx(FragmentManager fragmentManager);
}
public class Xamarin.Forms.Platform.Android.FrameRenderer : VisualElementRenderer`1<Frame> {
    private bool _disposed;
    private FrameDrawable _backgroundDrawable;
    private MotionEventHelper _motionEventHelper;
    public FrameRenderer(Context context);
    protected virtual void Dispose(bool disposing);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Frame> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFrameBackground();
}
public class Xamarin.Forms.Platform.Android.GenericAnimatorListener : AnimatorListenerAdapter {
    [CompilerGeneratedAttribute]
private Action`1<Animator> <OnCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Animator> <OnEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Animator> <OnRepeat>k__BackingField;
    public Action`1<Animator> OnCancel { get; public set; }
    public Action`1<Animator> OnEnd { get; public set; }
    public Action`1<Animator> OnRepeat { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<Animator> get_OnCancel();
    [CompilerGeneratedAttribute]
public void set_OnCancel(Action`1<Animator> value);
    [CompilerGeneratedAttribute]
public Action`1<Animator> get_OnEnd();
    [CompilerGeneratedAttribute]
public void set_OnEnd(Action`1<Animator> value);
    [CompilerGeneratedAttribute]
public Action`1<Animator> get_OnRepeat();
    [CompilerGeneratedAttribute]
public void set_OnRepeat(Action`1<Animator> value);
    public virtual void OnAnimationCancel(Animator animation);
    public virtual void OnAnimationEnd(Animator animation);
    public virtual void OnAnimationRepeat(Animator animation);
    protected virtual void JavaFinalize();
}
internal class Xamarin.Forms.Platform.Android.GenericGlobalLayoutListener : Object {
    private Action _callback;
    public GenericGlobalLayoutListener(Action callback);
    public sealed virtual void OnGlobalLayout();
    protected virtual void Dispose(bool disposing);
    internal void Invalidate();
}
internal class Xamarin.Forms.Platform.Android.GenericMenuClickListener : Object {
    private Action _callback;
    public GenericMenuClickListener(Action callback);
    public sealed virtual bool OnMenuItemClick(IMenuItem item);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.GeometryExtensions : object {
    [ExtensionAttribute]
public static Path ToAPath(Geometry geometry, Context context);
}
internal class Xamarin.Forms.Platform.Android.GestureManager : object {
    private IVisualElementRenderer _renderer;
    private Lazy`1<ScaleGestureDetector> _scaleDetector;
    private Lazy`1<TapAndPanGestureDetector> _tapAndPanAndSwipeDetector;
    private Lazy`1<DragAndDropGestureHandler> _dragAndDropGestureHandler;
    private bool _disposed;
    private bool _inputTransparent;
    private bool _isEnabled;
    private VisualElement Element { get; }
    private View View { get; }
    private View Control { get; }
    public GestureManager(IVisualElementRenderer renderer);
    private VisualElement get_Element();
    private View get_View();
    private View get_Control();
    public bool OnTouchEvent(MotionEvent e);
    public sealed virtual void Dispose();
    private bool DetectorsValid();
    private DragAndDropGestureHandler InitializeDragAndDropHandler();
    private TapAndPanGestureDetector InitializeTapAndPanAndSwipeDetector();
    private ScaleGestureDetector InitializeScaleDetector();
    private bool ViewHasPinchGestures();
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private void GestureCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateDragAndDrop();
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected void Dispose(bool disposing);
    private void UpdateInputTransparent();
    private void UpdateIsEnabled();
    [CompilerGeneratedAttribute]
private View <InitializeDragAndDropHandler>b__18_0();
    [CompilerGeneratedAttribute]
private View <InitializeDragAndDropHandler>b__18_1();
    [CompilerGeneratedAttribute]
private View <InitializeTapAndPanAndSwipeDetector>b__19_0();
    [CompilerGeneratedAttribute]
private IList`1<GestureElement> <InitializeTapAndPanAndSwipeDetector>b__19_1();
    [CompilerGeneratedAttribute]
private View <InitializeTapAndPanAndSwipeDetector>b__19_2();
    [CompilerGeneratedAttribute]
private View <InitializeTapAndPanAndSwipeDetector>b__19_3();
    [CompilerGeneratedAttribute]
private View <InitializeScaleDetector>b__20_0();
}
public class Xamarin.Forms.Platform.Android.GetDesiredSizeDelegate : MulticastDelegate {
    public GetDesiredSizeDelegate(object object, IntPtr method);
    public virtual Nullable`1<SizeRequest> Invoke(NativeViewWrapperRenderer renderer, int widthConstraint, int heightConstraint);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, int widthConstraint, int heightConstraint, AsyncCallback callback, object object);
    public virtual Nullable`1<SizeRequest> EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.Android.GradientStrokeDrawable : PaintDrawable {
    private Paint _strokePaint;
    private Color _backgroundColor;
    public void SetColor(Color backgroundColor);
    public void SetStroke(int strokeWidth, Color strokeColor);
    public void SetGradient(Brush brush);
    protected virtual void OnDraw(Shape shape, Canvas canvas, Paint paint);
}
internal class Xamarin.Forms.Platform.Android.GridLayoutSpanSizeLookup : SpanSizeLookup {
    private GridItemsLayout _gridItemsLayout;
    private RecyclerView _recyclerView;
    public GridLayoutSpanSizeLookup(GridItemsLayout gridItemsLayout, RecyclerView recyclerView);
    public virtual int GetSpanSize(int position);
}
public class Xamarin.Forms.Platform.Android.GroupableItemsViewAdapter`2 : SelectableItemsViewAdapter`2<TItemsView, TItemsViewSource> {
    protected internal GroupableItemsViewAdapter`2(TItemsView groupableItemsView, Func`3<View, Context, ItemContentView> createView);
    protected virtual TItemsViewSource CreateItemsSource();
    public virtual int GetItemViewType(int position);
    public virtual ViewHolder OnCreateViewHolder(ViewGroup parent, int viewType);
    public virtual void OnBindViewHolder(ViewHolder holder, int position);
}
public class Xamarin.Forms.Platform.Android.GroupableItemsViewRenderer`3 : SelectableItemsViewRenderer`3<TItemsView, TAdapter, TItemsViewSource> {
    public GroupableItemsViewRenderer`3(Context context);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual TAdapter CreateAdapter();
}
internal class Xamarin.Forms.Platform.Android.GroupedListViewAdapter : ListViewAdapter {
    private bool sectionDataValid;
    private SectionData[] Sections;
    private Object[] nativeSections;
    public GroupedListViewAdapter(Context context, ListView realListView, ListView listView);
    public sealed virtual int GetPositionForSection(int sectionIndex);
    public sealed virtual int GetSectionForPosition(int position);
    public sealed virtual Object[] GetSections();
    private void ValidateSectionData();
    protected virtual void InvalidateCount();
}
public interface Xamarin.Forms.Platform.Android.IAnimationSourceHandler {
    public abstract virtual Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken, float scale);
}
public interface Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer {
    public float ShadowRadius { get; }
    public float ShadowDx { get; }
    public float ShadowDy { get; }
    public Color ShadowColor { get; }
    public VisualElement Element { get; }
    public View View { get; }
    public abstract virtual float get_ShadowRadius();
    public abstract virtual float get_ShadowDx();
    public abstract virtual float get_ShadowDy();
    public abstract virtual Color get_ShadowColor();
    public abstract virtual bool UseDefaultPadding();
    public abstract virtual bool UseDefaultShadow();
    public abstract virtual bool IsShadowEnabled();
    public abstract virtual VisualElement get_Element();
    public abstract virtual View get_View();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
}
public interface Xamarin.Forms.Platform.Android.IButtonLayoutRenderer {
    public AppCompatButton View { get; }
    public Button Element { get; }
    public abstract virtual AppCompatButton get_View();
    public abstract virtual Button get_Element();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
}
internal interface Xamarin.Forms.Platform.Android.ICollectionChangedNotifier {
    public abstract virtual void NotifyDataSetChanged();
    public abstract virtual void NotifyItemChanged(IItemsViewSource source, int startIndex);
    public abstract virtual void NotifyItemInserted(IItemsViewSource source, int startIndex);
    public abstract virtual void NotifyItemMoved(IItemsViewSource source, int fromPosition, int toPosition);
    public abstract virtual void NotifyItemRangeChanged(IItemsViewSource source, int start, int end);
    public abstract virtual void NotifyItemRangeInserted(IItemsViewSource source, int startIndex, int count);
    public abstract virtual void NotifyItemRangeRemoved(IItemsViewSource source, int startIndex, int count);
    public abstract virtual void NotifyItemRemoved(IItemsViewSource source, int startIndex);
}
internal interface Xamarin.Forms.Platform.Android.IDescendantFocusToggler {
    public abstract virtual bool RequestFocus(View control, Func`1<bool> baseRequestFocus);
}
public interface Xamarin.Forms.Platform.Android.IDeviceInfoProvider {
    public Resources Resources { get; }
    public abstract virtual Resources get_Resources();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigurationChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigurationChanged(EventHandler value);
}
internal interface Xamarin.Forms.Platform.Android.IDisposedState {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
}
public interface Xamarin.Forms.Platform.Android.IFormsAnimationDrawable {
    public int RepeatCount { get; public set; }
    public bool IsRunning { get; }
    public Drawable ImageDrawable { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnimationStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnimationStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnimationStopped(EventHandler`1<FormsAnimationDrawableStateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnimationStopped(EventHandler`1<FormsAnimationDrawableStateEventArgs> value);
    public abstract virtual int get_RepeatCount();
    public abstract virtual void set_RepeatCount(int value);
    public abstract virtual bool get_IsRunning();
    public abstract virtual Drawable get_ImageDrawable();
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
internal interface Xamarin.Forms.Platform.Android.IFormsEditText {
    public abstract virtual bool OnKeyPreIme(Keycode keyCode, KeyEvent e);
    public abstract virtual bool RequestFocus(FocusSearchDirection direction, Rect previouslyFocusedRect);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnKeyboardBackPressed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnKeyboardBackPressed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
}
public interface Xamarin.Forms.Platform.Android.IGroupableItemsViewSource {
    public abstract virtual bool IsGroupHeader(int position);
    public abstract virtual bool IsGroupFooter(int position);
}
internal interface Xamarin.Forms.Platform.Android.IImageRendererController {
    public bool IsDisposed { get; }
    public abstract virtual void SkipInvalidate();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void SetFormsAnimationDrawable(IFormsAnimationDrawable formsAnimationDrawable);
}
public interface Xamarin.Forms.Platform.Android.IImageSourceHandler {
    public abstract virtual Task`1<Bitmap> LoadImageAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken);
}
public interface Xamarin.Forms.Platform.Android.IImageViewHandler {
    public abstract virtual Task LoadImageAsync(ImageSource imagesource, ImageView imageView, CancellationToken cancellationToken);
}
public interface Xamarin.Forms.Platform.Android.IItemsViewSource {
    public int Count { get; }
    public bool HasHeader { get; public set; }
    public bool HasFooter { get; public set; }
    public abstract virtual int get_Count();
    public abstract virtual int GetPosition(object item);
    public abstract virtual object GetItem(int position);
    public abstract virtual bool get_HasHeader();
    public abstract virtual void set_HasHeader(bool value);
    public abstract virtual bool get_HasFooter();
    public abstract virtual void set_HasFooter(bool value);
    public abstract virtual bool IsHeader(int position);
    public abstract virtual bool IsFooter(int position);
}
internal interface Xamarin.Forms.Platform.Android.ILayoutChanges {
    public bool HasLayoutOccurred { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_LayoutChange(EventHandler`1<LayoutChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LayoutChange(EventHandler`1<LayoutChangeEventArgs> value);
    public abstract virtual bool get_HasLayoutOccurred();
}
internal interface Xamarin.Forms.Platform.Android.ILifeCycleState {
    public bool MarkedForDispose { get; public set; }
    public abstract virtual bool get_MarkedForDispose();
    public abstract virtual void set_MarkedForDispose(bool value);
}
public class Xamarin.Forms.Platform.Android.ImageButtonRenderer : AppCompatImageButton {
    private bool _hasLayoutOccurred;
    private bool _inputTransparent;
    private bool _disposed;
    private bool _skipInvalidate;
    private Nullable`1<int> _defaultLabelFor;
    private VisualElementTracker _tracker;
    private VisualElementRenderer _visualElementRenderer;
    private BorderBackgroundManager _backgroundTracker;
    private IPlatformElementConfiguration`2<Android, ImageButton> _platformElementConfiguration;
    private ImageButton _imageButton;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private bool Xamarin.Forms.Platform.Android.IDisposedState.IsDisposed { get; }
    public ImageButton Element { get; private set; }
    private bool Xamarin.Forms.Platform.Android.IImageRendererController.IsDisposed { get; }
    private AppCompatImageButton Control { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowRadius { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDx { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDy { get; }
    private Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowColor { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.View { get; }
    private bool Xamarin.Forms.Platform.Android.ILayoutChanges.HasLayoutOccurred { get; }
    public ImageButtonRenderer(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IDisposedState.get_IsDisposed();
    public ImageButton get_Element();
    private void set_Element(ImageButton value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IImageRendererController.SkipInvalidate();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IImageRendererController.get_IsDisposed();
    private AppCompatImageButton get_Control();
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    protected virtual void Dispose(bool disposing);
    public virtual void Invalidate();
    private Size MinimumSize();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageButton> e);
    public virtual void Draw(Canvas canvas);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    public virtual bool OnTouchEvent(MotionEvent e);
    private void UpdatePadding();
    private void UpdateInputTransparent();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void Android.Views.View.IOnFocusChangeListener.OnFocusChange(View v, bool hasFocus);
    private sealed virtual override void Android.Views.View.IOnClickListener.OnClick(View v);
    private sealed virtual override bool Android.Views.View.IOnTouchListener.OnTouch(View v, MotionEvent e);
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowRadius();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDx();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDy();
    private sealed virtual override Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowColor();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.IsShadowEnabled();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultPadding();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultShadow();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_View();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.ILayoutChanges.get_HasLayoutOccurred();
    private IPlatformElementConfiguration`2<Android, ImageButton> OnThisPlatform();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IImageRendererController.SetFormsAnimationDrawable(IFormsAnimationDrawable value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.ILayoutChanges.add_LayoutChange(EventHandler`1<LayoutChangeEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.ILayoutChanges.remove_LayoutChange(EventHandler`1<LayoutChangeEventArgs> value);
}
internal class Xamarin.Forms.Platform.Android.ImageCache : object {
    private FormsLruCache _lruCache;
    private ConcurrentDictionary`2<string, SemaphoreSlim> _waiting;
    private void Put(string key, TimeSpan cacheValidity, Bitmap cacheObject);
    public Task`1<Object> GetAsync(string cacheKey, TimeSpan cacheValidity, Func`1<Task`1<Object>> createMethod);
}
public class Xamarin.Forms.Platform.Android.ImageCellRenderer : TextCellRenderer {
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
    protected virtual void OnCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateImage();
    private void UpdateFlowDirection();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.ImageExtensions : object {
    private static ScaleType s_fill;
    private static ScaleType s_aspectFill;
    private static ScaleType s_aspectFit;
    [ExtensionAttribute]
public static ScaleType ToScaleType(Aspect aspect);
}
public class Xamarin.Forms.Platform.Android.ImageLoaderSourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ImageLoaderSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<Bitmap> LoadImageAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken);
    public sealed virtual Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.Android.ImageRenderer : ViewRenderer`2<Image, ImageView> {
    private bool _isDisposed;
    private MotionEventHelper _motionEventHelper;
    public ImageRenderer(Context context);
    protected virtual void Dispose(bool disposing);
    protected virtual ImageView CreateNativeControl();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ImageRenderer/<OnElementChanged>d__6")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ImageRenderer/<OnElementPropertyChanged>d__7")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateAnimations();
    private void UpdateAspect();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ImageRenderer/<TryUpdateBitmap>d__10")]
protected virtual Task TryUpdateBitmap(Image previous);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ImageRenderer/<UpdateBitmap>d__11")]
protected Task UpdateBitmap(Image previous);
    public virtual bool OnTouchEvent(MotionEvent e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Image> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.ImageViewExtensions : object {
    [ExtensionAttribute]
public static Task UpdateBitmap(ImageView imageView, IImageElement newView, IImageElement previousView);
    [ExtensionAttribute]
public static Task UpdateBitmap(ImageView imageView, ImageSource newImageSource, ImageSource previousImageSourc);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ImageViewExtensions/<UpdateBitmap>d__2")]
[ExtensionAttribute]
private static Task UpdateBitmap(ImageView imageView, IImageElement newView, IImageElement previousView, ImageSource newImageSource, ImageSource previousImageSource);
    [ExtensionAttribute]
internal static void Reset(IFormsAnimationDrawable formsAnimation);
    [ExtensionAttribute]
public static void Reset(ImageView imageView);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ImageViewExtensions/<SetImage>d__5")]
[ExtensionAttribute]
internal static void SetImage(ImageView image, ImageSource source, Context context);
    [CompilerGeneratedAttribute]
internal static bool <UpdateBitmap>g__SourceIsNotChanged|2_0(IImageElement imageElement, ImageSource imageSource);
}
public class Xamarin.Forms.Platform.Android.IndicatorViewRenderer : LinearLayout {
    private VisualElementTracker _visualElementTracker;
    private VisualElementRenderer _visualElementRenderer;
    private static int DefaultPadding;
    protected IndicatorView IndicatorView;
    private Nullable`1<int> _defaultLabelFor;
    private bool _disposed;
    private int _selectedIndex;
    private Color _currentPageIndicatorTintColor;
    private ShapeType _shapeType;
    private Drawable _currentPageShape;
    private Drawable _pageShape;
    private Color _pageIndicatorTintColor;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    private bool IsVisible { get; }
    public VisualElement Element { get; }
    public VisualElementTracker Tracker { get; }
    public ViewGroup ViewGroup { get; }
    public View View { get; }
    public IndicatorViewRenderer(Context context);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    private bool get_IsVisible();
    public sealed virtual VisualElement get_Element();
    public sealed virtual VisualElementTracker get_Tracker();
    public sealed virtual ViewGroup get_ViewGroup();
    public sealed virtual View get_View();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    protected virtual void Dispose(bool disposing);
    private void OnElementChanged(IndicatorView oldElement, IndicatorView newElement);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<IndicatorView> elementChangedEvent);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void UpdateBackgroundColor(Nullable`1<Color> color);
    private void SetUpNewElement(IndicatorView newElement);
    private void UpdateSelectedIndicator();
    private void UpdateItemsSource();
    private void TearDownOldElement(IndicatorView oldElement);
    private void UpdateIndicatorCount();
    private void ResetIndicators();
    private void UpdateIndicatorTemplate();
    private void UpdateIndicators();
    private void UpdateHidesForSinglePage();
    private void UpdateShapes();
    private Drawable GetShape(Color color);
    private int GetMaximumVisible();
}
internal class Xamarin.Forms.Platform.Android.InnerGestureListener : Object {
    private TapGestureHandler _tapGestureHandler;
    private PanGestureHandler _panGestureHandler;
    private SwipeGestureHandler _swipeGestureHandler;
    private DragAndDropGestureHandler _dragAndDropGestureHandler;
    private bool _isScrolling;
    private float _lastX;
    private float _lastY;
    private bool _disposed;
    private Func`3<float, float, bool> _swipeDelegate;
    private Func`1<bool> _swipeCompletedDelegate;
    private Func`1<bool> _scrollCompleteDelegate;
    private Func`4<float, float, int, bool> _scrollDelegate;
    private Func`2<int, bool> _scrollStartedDelegate;
    private Func`3<int, Point, bool> _tapDelegate;
    private Func`2<int, IEnumerable`1<TapGestureRecognizer>> _tapGestureRecognizers;
    public bool EnableLongPressGestures { get; }
    public InnerGestureListener(TapGestureHandler tapGestureHandler, PanGestureHandler panGestureHandler, SwipeGestureHandler swipeGestureHandler, DragAndDropGestureHandler dragAndDropGestureHandler);
    internal InnerGestureListener(IntPtr handle, JniHandleOwnership ownership);
    public bool get_EnableLongPressGestures();
    private bool HasAnyGestures();
    private sealed virtual override bool Android.Views.GestureDetector.IOnDoubleTapListener.OnDoubleTap(MotionEvent e);
    private sealed virtual override bool Android.Views.GestureDetector.IOnDoubleTapListener.OnDoubleTapEvent(MotionEvent e);
    private sealed virtual override bool Android.Views.GestureDetector.IOnGestureListener.OnDown(MotionEvent e);
    private sealed virtual override bool Android.Views.GestureDetector.IOnGestureListener.OnFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY);
    private sealed virtual override void Android.Views.GestureDetector.IOnGestureListener.OnLongPress(MotionEvent e);
    private sealed virtual override bool Android.Views.GestureDetector.IOnGestureListener.OnScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY);
    private sealed virtual override void Android.Views.GestureDetector.IOnGestureListener.OnShowPress(MotionEvent e);
    private sealed virtual override bool Android.Views.GestureDetector.IOnGestureListener.OnSingleTapUp(MotionEvent e);
    private sealed virtual override bool Android.Views.GestureDetector.IOnDoubleTapListener.OnSingleTapConfirmed(MotionEvent e);
    protected virtual void Dispose(bool disposing);
    private void SetStartingPosition(MotionEvent e1);
    private bool StartScrolling(MotionEvent e2);
    internal void EndScrolling();
    private bool HasDoubleTapHandler();
    private bool HasSingleTapHandler();
}
internal class Xamarin.Forms.Platform.Android.InnerScaleListener : SimpleOnScaleGestureListener {
    private Func`3<float, Point, bool> _pinchDelegate;
    private Action _pinchEndedDelegate;
    private Func`2<double, double> _fromPixels;
    private Func`2<Point, bool> _pinchStartedDelegate;
    public InnerScaleListener(PinchGestureHandler pinchGestureHandler, Func`2<double, double> fromPixels);
    internal InnerScaleListener(IntPtr handle, JniHandleOwnership ownership);
    public virtual bool OnScale(ScaleGestureDetector detector);
    public virtual bool OnScaleBegin(ScaleGestureDetector detector);
    public virtual void OnScaleEnd(ScaleGestureDetector detector);
    protected virtual void Dispose(bool disposing);
}
internal interface Xamarin.Forms.Platform.Android.IOrderedTraversalController {
    public abstract virtual void UpdateTraversalOrder();
}
public interface Xamarin.Forms.Platform.Android.IPickerRenderer {
    public abstract virtual void OnClick();
}
internal interface Xamarin.Forms.Platform.Android.IPlatformLayout {
    public abstract virtual void OnLayout(bool changed, int l, int t, int r, int b);
}
public interface Xamarin.Forms.Platform.Android.IPopupTrigger {
    public bool ShowPopupOnFocus { get; public set; }
    public abstract virtual bool get_ShowPopupOnFocus();
    public abstract virtual void set_ShowPopupOnFocus(bool value);
}
internal interface Xamarin.Forms.Platform.Android.IScrollView {
    public bool ScrollBarsInitialized { get; public set; }
    public bool ScrollbarFadingEnabled { get; public set; }
    public abstract virtual bool get_ScrollBarsInitialized();
    public abstract virtual void set_ScrollBarsInitialized(bool value);
    public abstract virtual bool get_ScrollbarFadingEnabled();
    public abstract virtual void set_ScrollbarFadingEnabled(bool value);
    public abstract virtual void AwakenScrollBars();
}
public interface Xamarin.Forms.Platform.Android.IShellBottomNavViewAppearanceTracker {
    public abstract virtual void SetAppearance(BottomNavigationView bottomView, IShellAppearanceElement appearance);
    public abstract virtual void ResetAppearance(BottomNavigationView bottomView);
}
public interface Xamarin.Forms.Platform.Android.IShellContext {
    public Context AndroidContext { get; }
    public DrawerLayout CurrentDrawerLayout { get; }
    public Shell Shell { get; }
    public abstract virtual Context get_AndroidContext();
    public abstract virtual DrawerLayout get_CurrentDrawerLayout();
    public abstract virtual Shell get_Shell();
    public abstract virtual IShellObservableFragment CreateFragmentForPage(Page page);
    public abstract virtual IShellFlyoutContentRenderer CreateShellFlyoutContentRenderer();
    public abstract virtual IShellItemRenderer CreateShellItemRenderer(ShellItem shellItem);
    public abstract virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection shellSection);
    public abstract virtual IShellToolbarTracker CreateTrackerForToolbar(Toolbar toolbar);
    public abstract virtual IShellToolbarAppearanceTracker CreateToolbarAppearanceTracker();
    public abstract virtual IShellTabLayoutAppearanceTracker CreateTabLayoutAppearanceTracker(ShellSection shellSection);
    public abstract virtual IShellBottomNavViewAppearanceTracker CreateBottomNavViewAppearanceTracker(ShellItem shellItem);
}
public interface Xamarin.Forms.Platform.Android.IShellFlyoutContentRenderer {
    public View AndroidView { get; }
    public abstract virtual View get_AndroidView();
}
public interface Xamarin.Forms.Platform.Android.IShellFlyoutRenderer {
    public View AndroidView { get; }
    public abstract virtual View get_AndroidView();
    public abstract virtual void AttachFlyout(IShellContext context, View content);
}
public interface Xamarin.Forms.Platform.Android.IShellItemRenderer {
    public Fragment Fragment { get; }
    public ShellItem ShellItem { get; public set; }
    public abstract virtual Fragment get_Fragment();
    public abstract virtual ShellItem get_ShellItem();
    public abstract virtual void set_ShellItem(ShellItem value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Destroyed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Destroyed(EventHandler value);
}
public interface Xamarin.Forms.Platform.Android.IShellObservableFragment {
    public Fragment Fragment { get; }
    public abstract virtual Fragment get_Fragment();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnimationFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnimationFinished(EventHandler value);
}
public interface Xamarin.Forms.Platform.Android.IShellSearchView {
    public View View { get; }
    public SearchHandler SearchHandler { get; public set; }
    public bool ShowKeyboardOnAttached { get; public set; }
    public abstract virtual View get_View();
    public abstract virtual SearchHandler get_SearchHandler();
    public abstract virtual void set_SearchHandler(SearchHandler value);
    public abstract virtual void LoadView();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SearchConfirmed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SearchConfirmed(EventHandler value);
    public abstract virtual bool get_ShowKeyboardOnAttached();
    public abstract virtual void set_ShowKeyboardOnAttached(bool value);
}
public interface Xamarin.Forms.Platform.Android.IShellSectionRenderer {
    public ShellSection ShellSection { get; public set; }
    public abstract virtual ShellSection get_ShellSection();
    public abstract virtual void set_ShellSection(ShellSection value);
}
public interface Xamarin.Forms.Platform.Android.IShellTabLayoutAppearanceTracker {
    public abstract virtual void SetAppearance(TabLayout tabLayout, ShellAppearance appearance);
    public abstract virtual void ResetAppearance(TabLayout tabLayout);
}
public interface Xamarin.Forms.Platform.Android.IShellToolbarAppearanceTracker {
    public abstract virtual void SetAppearance(Toolbar toolbar, IShellToolbarTracker toolbarTracker, ShellAppearance appearance);
    public abstract virtual void ResetAppearance(Toolbar toolbar, IShellToolbarTracker toolbarTracker);
}
public interface Xamarin.Forms.Platform.Android.IShellToolbarTracker {
    public Page Page { get; public set; }
    public bool CanNavigateBack { get; public set; }
    public Color TintColor { get; public set; }
    public abstract virtual Page get_Page();
    public abstract virtual void set_Page(Page value);
    public abstract virtual bool get_CanNavigateBack();
    public abstract virtual void set_CanNavigateBack(bool value);
    public abstract virtual Color get_TintColor();
    public abstract virtual void set_TintColor(Color value);
}
public interface Xamarin.Forms.Platform.Android.IStepperRenderer {
    public Stepper Element { get; }
    public Button UpButton { get; }
    public Button DownButton { get; }
    public abstract virtual Stepper get_Element();
    public abstract virtual Button get_UpButton();
    public abstract virtual Button get_DownButton();
    public abstract virtual Button CreateButton();
}
public interface Xamarin.Forms.Platform.Android.ITabStop {
    public View TabStop { get; }
    public abstract virtual View get_TabStop();
}
public class Xamarin.Forms.Platform.Android.ItemContentView : ViewGroup {
    protected IVisualElementRenderer Content;
    private Nullable`1<Size> _size;
    private Action`1<Size> _reportMeasure;
    internal IVisualElementRenderer VisualElementRenderer { get; }
    public ItemContentView(Context context);
    internal void ClickOn();
    internal void RealizeContent(View view);
    private void ElementMeasureInvalidated(object sender, EventArgs e);
    internal IVisualElementRenderer get_VisualElementRenderer();
    internal void Recycle();
    internal void HandleItemSizingStrategy(Action`1<Size> reportMeasure, Nullable`1<Size> size);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    private static IVisualElementRenderer CreateRenderer(View view, Context context);
}
internal static class Xamarin.Forms.Platform.Android.ItemsSourceFactory : object {
    public static IItemsViewSource Create(IEnumerable itemsSource, ICollectionChangedNotifier notifier);
    public static IItemsViewSource Create(IEnumerable itemsSource, Adapter adapter);
    public static IItemsViewSource Create(ItemsView itemsView, Adapter adapter);
    public static IGroupableItemsViewSource Create(GroupableItemsView itemsView, Adapter adapter);
}
public class Xamarin.Forms.Platform.Android.ItemsViewAdapter`2 : Adapter {
    protected TItemsView ItemsView;
    private Func`3<View, Context, ItemContentView> _createItemContentView;
    protected internal TItemsViewSource ItemsSource;
    private bool _disposed;
    private bool _usingItemTemplate;
    public int ItemCount { get; }
    protected internal ItemsViewAdapter`2(TItemsView itemsView, Func`3<View, Context, ItemContentView> createItemContentView);
    protected virtual TItemsViewSource CreateItemsSource();
    protected virtual void ItemsViewPropertyChanged(object sender, PropertyChangedEventArgs property);
    public virtual void OnViewRecycled(Object holder);
    public virtual void OnBindViewHolder(ViewHolder holder, int position);
    public virtual ViewHolder OnCreateViewHolder(ViewGroup parent, int viewType);
    public virtual int get_ItemCount();
    public virtual int GetItemViewType(int position);
    protected virtual void Dispose(bool disposing);
    public virtual int GetPositionForItem(object item);
    protected virtual void BindTemplatedItemViewHolder(TemplatedItemViewHolder templatedItemViewHolder, object context);
    private void UpdateItemsSource();
    private void UpdateUsingItemTemplate();
}
public abstract class Xamarin.Forms.Platform.Android.ItemsViewRenderer`3 : RecyclerView {
    private AutomationPropertiesProvider _automationPropertiesProvider;
    private EffectControlProvider _effectControlProvider;
    protected TAdapter ItemsViewAdapter;
    private Nullable`1<int> _defaultLabelFor;
    private bool _disposed;
    protected TItemsView ItemsView;
    [CompilerGeneratedAttribute]
private IItemsLayout <ItemsLayout>k__BackingField;
    private SnapManager _snapManager;
    private ScrollHelper _scrollHelper;
    private RecyclerViewScrollListener`2<TItemsView, TItemsViewSource> _recyclerViewScrollListener;
    private EmptyViewAdapter _emptyViewAdapter;
    private DataChangeObserver _emptyCollectionObserver;
    private DataChangeObserver _itemsUpdateScrollObserver;
    private ScrollBarVisibility _defaultHorizontalScrollVisibility;
    private ScrollBarVisibility _defaultVerticalScrollVisibility;
    private ItemDecoration _itemDecoration;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    [CompilerGeneratedAttribute]
private VisualElementTracker <Tracker>k__BackingField;
    protected IItemsLayout ItemsLayout { get; private set; }
    private ScrollHelper ScrollHelper { get; }
    public VisualElement Element { get; }
    public VisualElementTracker Tracker { get; private set; }
    public View View { get; }
    public ViewGroup ViewGroup { get; }
    public ItemsViewRenderer`3(Context context);
    [CompilerGeneratedAttribute]
protected IItemsLayout get_ItemsLayout();
    [CompilerGeneratedAttribute]
private void set_ItemsLayout(IItemsLayout value);
    private ScrollHelper get_ScrollHelper();
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElementTracker get_Tracker();
    [CompilerGeneratedAttribute]
private void set_Tracker(VisualElementTracker value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    public sealed virtual View get_View();
    public sealed virtual ViewGroup get_ViewGroup();
    protected virtual void Dispose(bool disposing);
    protected virtual LayoutManager SelectLayoutManager(IItemsLayout layoutSpecification);
    private GridLayoutManager CreateGridLayout(GridItemsLayout gridItemsLayout);
    private void OnElementChanged(ItemsView oldElement, ItemsView newElement);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ItemsView> elementChangedEvent);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void UpdateItemsSource();
    protected virtual TAdapter CreateAdapter();
    protected virtual void UpdateAdapter();
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual RecyclerViewScrollListener`2<TItemsView, TItemsViewSource> CreateScrollListener();
    protected abstract virtual IItemsLayout GetItemsLayout();
    protected virtual void UpdateVerticalScrollBarVisibility();
    protected virtual void UpdateHorizontalScrollBarVisibility();
    protected virtual void TearDownOldElement(ItemsView oldElement);
    protected virtual void LayoutPropertyChanged(object sender, PropertyChangedEventArgs propertyChanged);
    protected virtual void UpdateSnapBehavior();
    protected virtual SnapManager GetSnapManager();
    protected virtual void UpdateBackgroundColor(Nullable`1<Color> color);
    protected virtual void UpdateBackground(Brush brush);
    protected virtual void UpdateFlowDirection();
    protected virtual void UpdateEmptyView();
    protected virtual void UpdateItemsUpdatingScrollMode();
    protected virtual void ReconcileFlowDirectionAndLayout();
    protected virtual int DetermineTargetPosition(ScrollToRequestEventArgs args);
    protected virtual void UpdateItemSpacing();
    protected virtual ItemDecoration CreateSpacingDecoration(IItemsLayout itemsLayout);
    private void ScrollToRequested(object sender, ScrollToRequestEventArgs args);
    protected virtual void ScrollTo(ScrollToRequestEventArgs args);
    protected virtual void UpdateLayoutManager();
    internal void UpdateEmptyViewVisibility();
    internal void AdjustScrollForItemUpdate();
    private void AddOrUpdateScrollListener();
    private void RemoveScrollListener();
}
public static class Xamarin.Forms.Platform.Android.ItemViewType : object {
    public static int TextItem;
    public static int TemplatedItem;
    public static int Header;
    public static int Footer;
    public static int GroupHeader;
    public static int GroupFooter;
}
public interface Xamarin.Forms.Platform.Android.IViewRenderer {
    public abstract virtual void MeasureExactly();
}
public interface Xamarin.Forms.Platform.Android.IVisualElementRenderer {
    public VisualElement Element { get; }
    public VisualElementTracker Tracker { get; }
    [ObsoleteAttribute("ViewGroup is obsolete as of version 2.3.5. Please use View instead.")]
[EditorBrowsableAttribute("1")]
public ViewGroup ViewGroup { get; }
    public View View { get; }
    public abstract virtual VisualElement get_Element();
    public abstract virtual VisualElementTracker get_Tracker();
    public abstract virtual ViewGroup get_ViewGroup();
    public abstract virtual View get_View();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    public abstract virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    public abstract virtual void SetElement(VisualElement element);
    public abstract virtual void SetLabelFor(Nullable`1<int> id);
    public abstract virtual void UpdateLayout();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.JavaObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsDisposed(Object obj);
    [ExtensionAttribute]
public static bool IsAlive(Object obj);
    [ExtensionAttribute]
public static bool IsDisposed(IJavaObject obj);
    [ExtensionAttribute]
public static bool IsAlive(IJavaObject obj);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.KeyboardExtensions : object {
    [ExtensionAttribute]
public static InputTypes ToInputType(Keyboard self);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.KeyboardManager : object {
    [ExtensionAttribute]
internal static void HideKeyboard(View inputView, bool overrideValidation);
    [ExtensionAttribute]
internal static void ShowKeyboard(TextView inputView);
    [ExtensionAttribute]
internal static void ShowKeyboard(SearchView searchView);
    [ExtensionAttribute]
internal static void ShowKeyboard(View view);
    [ExtensionAttribute]
internal static void PostShowKeyboard(View view);
}
public class Xamarin.Forms.Platform.Android.LabelRenderer : ViewRenderer`2<Label, TextView> {
    private ColorStateList _labelTextColorDefault;
    private float _lineSpacingExtraDefault;
    private float _lineSpacingMultiplierDefault;
    private int _lastConstraintHeight;
    private int _lastConstraintWidth;
    private Nullable`1<SizeRequest> _lastSizeRequest;
    private float _lastTextSize;
    private Typeface _lastTypeface;
    private Color _lastUpdateColor;
    private FormsTextView _view;
    private bool _wasFormatted;
    private MotionEventHelper _motionEventHelper;
    private SpannableString _spannableString;
    public LabelRenderer(Context context);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual TextView CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFlowDirection();
    private void UpdateColor();
    private void UpdateFont();
    private void UpdateTextDecorations();
    private void UpdateGravity();
    private void UpdateLineBreakMode();
    private void UpdateCharacterSpacing();
    private void UpdateLineHeight();
    private void UpdateMaxLines();
    private void UpdateText();
    private void UpdatePadding();
    public virtual bool OnTouchEvent(MotionEvent e);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.LayoutExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<View> children, View view, GetDesiredSizeDelegate getDesiredSizeDelegate, OnLayoutDelegate onLayoutDelegate, OnMeasureDelegate onMeasureDelegate);
    [ExtensionAttribute]
public static View ToView(View view, GetDesiredSizeDelegate getDesiredSizeDelegate, OnLayoutDelegate onLayoutDelegate, OnMeasureDelegate onMeasureDelegate);
}
public class Xamarin.Forms.Platform.Android.LineRenderer : ShapeRenderer`2<Line, LineView> {
    public LineRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Line> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateX1();
    private void UpdateY1();
    private void UpdateX2();
    private void UpdateY2();
}
public class Xamarin.Forms.Platform.Android.LineView : ShapeView {
    private float _x1;
    private float _y1;
    private float _x2;
    private float _y2;
    public LineView(Context context);
    private void UpdateShape();
    public void UpdateX1(float x1);
    public void UpdateY1(float y1);
    public void UpdateX2(float x2);
    public void UpdateY2(float y2);
}
internal class Xamarin.Forms.Platform.Android.ListSource : object {
    private IList _itemsSource;
    [CompilerGeneratedAttribute]
private bool <HasHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFooter>k__BackingField;
    public int Count { get; }
    public bool HasHeader { get; public set; }
    public bool HasFooter { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    private object System.Collections.IList.Item { get; private set; }
    public ListSource(IEnumerable`1<object> enumerable);
    public ListSource(IEnumerable enumerable);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasHeader(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasFooter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasFooter(bool value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Dispose();
    public sealed virtual bool IsFooter(int index);
    public sealed virtual bool IsHeader(int index);
    public sealed virtual int GetPosition(object item);
    public sealed virtual object GetItem(int position);
    private int AdjustIndexRequest(int index);
    private int AdjustPosition(int index);
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void Clear();
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.Android.ListViewAdapter : CellAdapter {
    private bool _disposed;
    private static object DefaultItemTypeOrDataTemplate;
    private static int DefaultGroupHeaderTemplateId;
    private static int DefaultItemTemplateId;
    private static int s_dividerHorizontalDarkId;
    internal static BindableProperty IsSelectedProperty;
    private Context _context;
    protected ListView _listView;
    private ListView _realListView;
    private Dictionary`2<DataTemplate, int> _templateToId;
    private List`1<ConditionalFocusLayout> _layoutsCreated;
    private int _dataTemplateIncrementer;
    private int _listCount;
    private Dictionary`2<object, Cell> _prototypicalCellByTypeOrDataTemplate;
    private bool _fromNative;
    private View _lastSelected;
    private WeakReference`1<Cell> _selectedCell;
    [CompilerGeneratedAttribute]
private View <FooterView>k__BackingField;
    [CompilerGeneratedAttribute]
private View <HeaderView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttachedToWindow>k__BackingField;
    private IListViewController Controller { get; }
    protected ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    public int Count { get; }
    public View FooterView { get; public set; }
    public bool HasStableIds { get; }
    public View HeaderView { get; public set; }
    public bool IsAttachedToWindow { get; public set; }
    public object Item { get; }
    public int ViewTypeCount { get; }
    public ListViewAdapter(Context context, ListView realListView, ListView listView);
    private static ListViewAdapter();
    private IListViewController get_Controller();
    protected ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
public View get_FooterView();
    [CompilerGeneratedAttribute]
public void set_FooterView(View value);
    public virtual bool get_HasStableIds();
    [CompilerGeneratedAttribute]
public View get_HeaderView();
    [CompilerGeneratedAttribute]
public void set_HeaderView(View value);
    [CompilerGeneratedAttribute]
public bool get_IsAttachedToWindow();
    [CompilerGeneratedAttribute]
public void set_IsAttachedToWindow(bool value);
    public virtual object get_Item(int index);
    public virtual int get_ViewTypeCount();
    public virtual bool AreAllItemsEnabled();
    public virtual long GetItemId(int position);
    public virtual int GetItemViewType(int position);
    public virtual View GetView(int position, View convertView, ViewGroup parent);
    internal void InvalidatePrototypicalCellCache();
    internal ITemplatedItemsList`1<Cell> GetTemplatedItemsListForPath(int indexPath);
    internal DataTemplate GetDataTemplateForPath(int indexPath);
    internal Type GetItemTypeForPath(int indexPath);
    internal Cell GetCellForPath(int indexPath);
    internal Cell GetPrototypicalCell(int indexPath);
    public virtual bool IsEnabled(int position);
    protected virtual void Dispose(bool disposing);
    protected virtual Cell GetCellForPosition(int position);
    protected virtual void HandleItemClick(AdapterView parent, View view, int position, long id);
    private void DisposeCells();
    private void DisposeOfConditionalFocusLayout(ConditionalFocusLayout layout);
    private List`1<Cell> GetCellsFromPosition(int position, int take);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnDataChanged();
    private void OnGroupedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnItemSelected(object sender, SelectedItemChangedEventArgs eventArg);
    private void Select(int index, View view);
    private void SelectItem(object item);
    private void UpdateSeparatorVisibility(Cell cell, bool cellIsBeingReused, bool isHeader, bool nextCellIsHeader, bool isSeparatorVisible, ConditionalFocusLayout layout, View& bline);
    private void UpdateSeparatorColor(bool isHeader, View bline);
    private Cell GetNewGroupHeaderCell(ITemplatedItemsList`1<Cell> group);
    protected virtual void InvalidateCount();
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_0(ListViewAdapter lva);
}
public class Xamarin.Forms.Platform.Android.ListViewRenderer : ViewRenderer`2<ListView, ListView> {
    private ListViewAdapter _adapter;
    private bool _disposed;
    private IVisualElementRenderer _headerRenderer;
    private IVisualElementRenderer _footerRenderer;
    private Container _headerView;
    private Container _footerView;
    private bool _isAttached;
    private ScrollToRequestedEventArgs _pendingScrollTo;
    private SwipeRefreshLayout _refresh;
    private ScrollBarVisibility _defaultHorizontalScrollVisibility;
    private ScrollBarVisibility _defaultVerticalScrollVisibility;
    private IListViewController Controller { get; }
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    public ListViewRenderer(Context context);
    private IListViewController get_Controller();
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    private sealed virtual override void AndroidX.SwipeRefreshLayout.Widget.SwipeRefreshLayout.IOnRefreshListener.OnRefresh();
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    protected virtual SwipeRefreshLayout CreateNativePullToRefresh(Context context);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual ListView CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ListView> e);
    internal void ClickOn(View viewCell);
    internal void LongClickOn(View viewCell);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateFooter();
    private void UpdateHeader();
    private void UpdateIsRefreshing(bool isInitialValue);
    private void UpdateIsSwipeToRefreshEnabled();
    private void UpdateFastScrollEnabled();
    private void UpdateSelectionMode();
    private void UpdateSpinnerColor();
    private void UpdateHorizontalScrollBarVisibility();
    private void UpdateVerticalScrollBarVisibility();
    [CompilerGeneratedAttribute]
private void <UpdateIsRefreshing>b__32_0();
}
internal class Xamarin.Forms.Platform.Android.LocalizedDigitsKeyListener : NumberKeyListener {
    private char _decimalSeparator;
    private static char SignCharacter;
    private static Dictionary`2<char, LocalizedDigitsKeyListener> s_unsignedCache;
    private static Dictionary`2<char, LocalizedDigitsKeyListener> s_signedCache;
    [CompilerGeneratedAttribute]
private InputTypes <InputType>k__BackingField;
    private Char[] _acceptedChars;
    public InputTypes InputType { get; }
    protected LocalizedDigitsKeyListener(InputTypes inputTypes, char decimalSeparator);
    private static char GetDecimalSeparator();
    public static NumberKeyListener Create(InputTypes inputTypes);
    public static LocalizedDigitsKeyListener GetInstance(InputTypes inputTypes, char decimalSeparator);
    private static LocalizedDigitsKeyListener GetInstance(InputTypes inputTypes, char decimalSeparator, Dictionary`2& cache);
    [CompilerGeneratedAttribute]
public virtual InputTypes get_InputType();
    protected virtual Char[] GetAcceptedChars();
    private static bool IsSignChar(char c);
    private bool IsDecimalPointChar(char c);
    public virtual ICharSequence FilterFormatted(ICharSequence source, int start, int end, ISpanned dest, int dstart, int dend);
}
internal class Xamarin.Forms.Platform.Android.MasterDetailContainer : ViewGroup {
    private static int DefaultMasterSize;
    private static int DefaultSmallMasterSize;
    private bool _isMaster;
    private MasterDetailPage _parent;
    private VisualElement _childView;
    [CompilerGeneratedAttribute]
private int <TopPadding>k__BackingField;
    private IMasterDetailPageController MasterDetailPageController { get; }
    public VisualElement ChildView { get; public set; }
    public int TopPadding { get; public set; }
    private double DefaultWidthMaster { get; }
    public MasterDetailContainer(MasterDetailPage parent, bool isMaster, Context context);
    public MasterDetailContainer(IntPtr javaReference, JniHandleOwnership transfer);
    private IMasterDetailPageController get_MasterDetailPageController();
    public VisualElement get_ChildView();
    public void set_ChildView(VisualElement value);
    protected virtual void AddChildView(VisualElement childView);
    [CompilerGeneratedAttribute]
public int get_TopPadding();
    [CompilerGeneratedAttribute]
public void set_TopPadding(int value);
    private double get_DefaultWidthMaster();
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    private void DisposeChildRenderers();
    private Rectangle GetBounds(bool isMasterPage, int left, int top, int right, int bottom);
    protected void SetDefaultBackgroundColor(IVisualElementRenderer renderer);
}
public class Xamarin.Forms.Platform.Android.MasterDetailRenderer : DrawerLayout {
    private static UInt32 DefaultScrimColor;
    private int _currentLockMode;
    private MasterDetailContainer _detailLayout;
    private bool _isPresentingFromCore;
    private MasterDetailContainer _masterLayout;
    private MasterDetailPage _page;
    private bool _presented;
    private Platform _platform;
    private string _defaultContentDescription;
    private string _defaultHint;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    [CompilerGeneratedAttribute]
private VisualElementTracker <Tracker>k__BackingField;
    private Platform Platform { get; }
    private IMasterDetailPageController MasterDetailPageController { get; }
    public bool Presented { get; public set; }
    private IPageController MasterPageController { get; }
    private IPageController DetailPageController { get; }
    private IPageController PageController { get; }
    public VisualElement Element { get; }
    public VisualElementTracker Tracker { get; private set; }
    public ViewGroup ViewGroup { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    public MasterDetailRenderer(Context context);
    private Platform get_Platform();
    private IMasterDetailPageController get_MasterDetailPageController();
    public bool get_Presented();
    public void set_Presented(bool value);
    private IPageController get_MasterPageController();
    private IPageController get_DetailPageController();
    private IPageController get_PageController();
    public sealed virtual void OnDrawerClosed(View drawerView);
    public sealed virtual void OnDrawerOpened(View drawerView);
    public sealed virtual void OnDrawerSlide(View drawerView, float slideOffset);
    public sealed virtual void OnDrawerStateChanged(int newState);
    public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    public sealed virtual void SetElement(VisualElement element);
    protected virtual void SetAutomationId(string id);
    protected virtual void SetContentDescription();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElementTracker get_Tracker();
    [CompilerGeneratedAttribute]
private void set_Tracker(VisualElementTracker value);
    public sealed virtual void UpdateLayout();
    public sealed virtual ViewGroup get_ViewGroup();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(VisualElement oldElement, VisualElement newElement);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.MasterDetailRenderer/<DeviceInfoPropertyChanged>d__58")]
private void DeviceInfoPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleMasterPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void MasterDetailPageAppearing(object sender, EventArgs e);
    private void MasterDetailPageDisappearing(object sender, EventArgs e);
    private void OnBackButtonPressed(object sender, BackButtonPressedEventArgs backButtonPressedEventArgs);
    private void SetGestureState();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private void SetLockMode(int lockMode);
    private void UpdateBackgroundColor(Page view);
    private void UpdateBackground(Page view);
    private void UpdateBackgroundImage(Page view);
    private void UpdateDetail();
    private void UpdateIsPresented();
    private void UpdateMaster();
    private void UpdateSplitViewLayout();
    [CompilerGeneratedAttribute]
private void <UpdateBackgroundImage>b__69_0(Drawable drawable);
    [CompilerGeneratedAttribute]
private void <UpdateDetail>g__Update|70_0();
    [CompilerGeneratedAttribute]
private void <UpdateMaster>g__Update|72_0();
}
internal static class Xamarin.Forms.Platform.Android.MeasureSpecFactory : object {
    public static int GetSize(int measureSpec);
    public static int MakeMeasureSpec(int size, MeasureSpecMode mode);
}
public class Xamarin.Forms.Platform.Android.MediaElementRenderer : FrameLayout {
    private bool _isDisposed;
    private Nullable`1<int> _defaultLabelFor;
    [CompilerGeneratedAttribute]
private MediaElement <MediaElement>k__BackingField;
    private AutomationPropertiesProvider _automationPropertiesProvider;
    private EffectControlProvider _effectControlProvider;
    private VisualElementTracker _tracker;
    private MediaController _controller;
    private MediaPlayer _mediaPlayer;
    private FormsVideoView _view;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    private MediaElement MediaElement { get; private set; }
    private IMediaElementController Controller { get; }
    public VisualElement Element { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    public MediaElementRenderer(Context context);
    [CompilerGeneratedAttribute]
private MediaElement get_MediaElement();
    [CompilerGeneratedAttribute]
private void set_MediaElement(MediaElement value);
    private IMediaElementController get_Controller();
    public sealed virtual VisualElement get_Element();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    private void UnsubscribeFromEvents(MediaElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private void StateRequested(object sender, StateRequested e);
    private void OnPositionRequested(object sender, EventArgs e);
    private void SeekRequested(object sender, SeekRequested e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private void SetTracker(VisualElementTracker tracker);
    private void UpdateBackgroundColor();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    protected virtual void Dispose(bool disposing);
    private void OnElementChanged(ElementChangedEventArgs`1<MediaElement> e);
    private void MetadataRetrieved(object sender, EventArgs e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual void RegisterEffect(Effect effect);
    private void UpdateKeepScreenOn();
    private void UpdateShowPlaybackControls();
    private void UpdateSource();
    private sealed virtual override void Android.Media.MediaPlayer.IOnCompletionListener.OnCompletion(MediaPlayer mp);
    private sealed virtual override void Android.Media.MediaPlayer.IOnPreparedListener.OnPrepared(MediaPlayer mp);
    private void UpdateLayoutParameters();
    private void ReleaseControl();
    private sealed virtual override bool Android.Media.MediaPlayer.IOnErrorListener.OnError(MediaPlayer mp, MediaError what, int extra);
    private sealed virtual override bool Android.Media.MediaPlayer.IOnInfoListener.OnInfo(MediaPlayer mp, MediaInfo what, int extra);
    private void Mp_BufferingUpdate(object sender, BufferingUpdateEventArgs e);
}
internal class Xamarin.Forms.Platform.Android.MotionEventHelper : object {
    private VisualElement _element;
    private bool _isInViewCell;
    public bool HandleMotionEvent(IViewParent parent, MotionEvent motionEvent);
    public void UpdateElement(VisualElement element);
    private bool ShouldPassThroughElement();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.NativeBindingExtensions : object {
    [ExtensionAttribute]
public static void SetBinding(View view, string propertyName, BindingBase binding, string updateSourceEventName);
    [ExtensionAttribute]
public static void SetBinding(View view, BindableProperty targetProperty, BindingBase binding);
    [ExtensionAttribute]
public static void SetValue(View target, BindableProperty targetProperty, object value);
    [ExtensionAttribute]
public static void SetBindingContext(View target, object bindingContext, Func`2<View, IEnumerable`1<View>> getChildren);
    [ExtensionAttribute]
internal static void TransferBindablePropertiesToWrapper(View target, View wrapper);
}
internal class Xamarin.Forms.Platform.Android.NativeBindingService : object {
    public sealed virtual bool TrySetBinding(object target, string propertyName, BindingBase binding);
    public sealed virtual bool TrySetBinding(object target, BindableProperty property, BindingBase binding);
    public sealed virtual bool TrySetValue(object target, BindableProperty property, object value);
}
internal class Xamarin.Forms.Platform.Android.NativeValueConverterService : object {
    public sealed virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
public class Xamarin.Forms.Platform.Android.NativeViewWrapper : View {
    [CompilerGeneratedAttribute]
private GetDesiredSizeDelegate <GetDesiredSizeDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private View <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private OnLayoutDelegate <OnLayoutDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private OnMeasureDelegate <OnMeasureDelegate>k__BackingField;
    public GetDesiredSizeDelegate GetDesiredSizeDelegate { get; }
    public View NativeView { get; }
    public OnLayoutDelegate OnLayoutDelegate { get; }
    public OnMeasureDelegate OnMeasureDelegate { get; }
    public NativeViewWrapper(View nativeView, GetDesiredSizeDelegate getDesiredSizeDelegate, OnLayoutDelegate onLayoutDelegate, OnMeasureDelegate onMeasureDelegate);
    [CompilerGeneratedAttribute]
public GetDesiredSizeDelegate get_GetDesiredSizeDelegate();
    [CompilerGeneratedAttribute]
public View get_NativeView();
    [CompilerGeneratedAttribute]
public OnLayoutDelegate get_OnLayoutDelegate();
    [CompilerGeneratedAttribute]
public OnMeasureDelegate get_OnMeasureDelegate();
    protected virtual void OnBindingContextChanged();
}
public class Xamarin.Forms.Platform.Android.NativeViewWrapperRenderer : ViewRenderer`2<NativeViewWrapper, View> {
    protected bool ManageNativeControlLifetime { get; }
    public NativeViewWrapperRenderer(Context context);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual View CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NativeViewWrapper> e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    protected virtual bool get_ManageNativeControlLifetime();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_0(object sender, LayoutChangeEventArgs args);
}
public class Xamarin.Forms.Platform.Android.NavigationRenderer : VisualElementRenderer`1<NavigationPage> {
    private static ViewPropertyAnimator s_currentAnimation;
    private Page _current;
    private bool _disposed;
    private Platform _platform;
    private Platform Platform { get; }
    private IPageController PageController { get; }
    public NavigationRenderer(Context context);
    private Platform get_Platform();
    public Task`1<bool> PopToRootAsync(Page page, bool animated);
    public Task`1<bool> PopViewAsync(Page page, bool animated);
    public Task`1<bool> PushViewAsync(Page page, bool animated);
    private IPageController get_PageController();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NavigationPage> e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual Task`1<bool> OnPopToRootAsync(Page page, bool animated);
    protected virtual Task`1<bool> OnPopViewAsync(Page page, bool animated);
    protected virtual Task`1<bool> OnPushAsync(Page view, bool animated);
    private void UpdateActionBar();
    private void InsertPageBefore(Page page, Page before);
    private void OnInsertPageBeforeRequested(object sender, NavigationRequestedEventArgs e);
    private void OnPopped(object sender, NavigationRequestedEventArgs e);
    private void OnPoppedToRoot(object sender, NavigationRequestedEventArgs e);
    private void OnPushed(object sender, NavigationRequestedEventArgs e);
    private void OnRemovePageRequested(object sender, NavigationRequestedEventArgs e);
    private void RemovePage(Page page);
    private Task`1<bool> SwitchContentAsync(Page view, bool animated, bool removed);
    [CompilerGeneratedAttribute]
private bool <UpdateActionBar>b__21_0();
}
internal abstract class Xamarin.Forms.Platform.Android.NongreedySnapHelper : LinearSnapHelper {
    [CompilerGeneratedAttribute]
private bool <CanSnap>k__BackingField;
    private bool _disposed;
    private RecyclerView _recyclerView;
    private InitialScrollListener _initialScrollListener;
    protected bool CanSnap { get; protected set; }
    [CompilerGeneratedAttribute]
protected bool get_CanSnap();
    [CompilerGeneratedAttribute]
protected void set_CanSnap(bool value);
    public virtual void AttachToRecyclerView(RecyclerView recyclerView);
    protected virtual void Dispose(bool disposing);
    private void StartListeningForScroll();
    private void StopListeningForScroll();
}
internal class Xamarin.Forms.Platform.Android.ObjectJavaBox`1 : Object {
    [CompilerGeneratedAttribute]
private T <Instance>k__BackingField;
    public T Instance { get; public set; }
    public ObjectJavaBox`1(T instance);
    [CompilerGeneratedAttribute]
public T get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(T value);
}
internal class Xamarin.Forms.Platform.Android.ObservableGroupedSource : object {
    private ICollectionChangedNotifier _notifier;
    private IList _groupSource;
    private List`1<IItemsViewSource> _groups;
    private bool _hasGroupHeaders;
    private bool _hasGroupFooters;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private bool <HasHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFooter>k__BackingField;
    public int Count { get; }
    public bool HasHeader { get; public set; }
    public bool HasFooter { get; public set; }
    public ObservableGroupedSource(GroupableItemsView groupableItemsView, ICollectionChangedNotifier notifier);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasHeader(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasFooter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasFooter(bool value);
    public sealed virtual void Dispose();
    public sealed virtual bool IsFooter(int position);
    public sealed virtual bool IsHeader(int position);
    public sealed virtual bool IsGroupHeader(int position);
    public sealed virtual bool IsGroupFooter(int position);
    public sealed virtual int GetPosition(object item);
    public sealed virtual object GetItem(int position);
    public sealed virtual void NotifyDataSetChanged();
    public sealed virtual void NotifyItemChanged(IItemsViewSource group, int localIndex);
    public sealed virtual void NotifyItemInserted(IItemsViewSource group, int localIndex);
    public sealed virtual void NotifyItemMoved(IItemsViewSource group, int localFromIndex, int localToIndex);
    public sealed virtual void NotifyItemRangeChanged(IItemsViewSource group, int localStartIndex, int localEndIndex);
    public sealed virtual void NotifyItemRangeInserted(IItemsViewSource group, int localIndex, int count);
    public sealed virtual void NotifyItemRangeRemoved(IItemsViewSource group, int localIndex, int count);
    public sealed virtual void NotifyItemRemoved(IItemsViewSource group, int localIndex);
    protected virtual void Dispose(bool disposing);
    private void UpdateGroupTracking();
    private void ClearGroupTracking();
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void CollectionChanged(NotifyCollectionChangedEventArgs args);
    private void Reload();
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    private int GetAbsolutePosition(IItemsViewSource group, int indexInGroup);
    private ValueTuple`2<int, int> GetGroupAndIndex(int absolutePosition);
    private int AdjustIndexForHeader(int index);
    private int AdjustPositionForHeader(int position);
    private int CountItemsInGroups(int groupStartIndex, int groupCount);
}
internal class Xamarin.Forms.Platform.Android.ObservableItemsSource : object {
    private IEnumerable _itemsSource;
    private ICollectionChangedNotifier _notifier;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionItemsSourceChanged;
    [CompilerGeneratedAttribute]
private bool <HasHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFooter>k__BackingField;
    public int Count { get; }
    public bool HasHeader { get; public set; }
    public bool HasFooter { get; public set; }
    public ObservableItemsSource(IEnumerable itemSource, ICollectionChangedNotifier notifier);
    [CompilerGeneratedAttribute]
internal void add_CollectionItemsSourceChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CollectionItemsSourceChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasHeader(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasFooter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasFooter(bool value);
    public sealed virtual void Dispose();
    public sealed virtual bool IsFooter(int index);
    public sealed virtual bool IsHeader(int index);
    public sealed virtual int GetPosition(object item);
    public sealed virtual object GetItem(int position);
    protected virtual void Dispose(bool disposing);
    private int AdjustIndexForHeader(int index);
    private int AdjustPositionForHeader(int position);
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void CollectionChanged(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    internal int ItemsCount();
    internal object ElementAt(int index);
    internal int IndexOf(object item);
}
public class Xamarin.Forms.Platform.Android.OnLayoutDelegate : MulticastDelegate {
    public OnLayoutDelegate(object object, IntPtr method);
    public virtual bool Invoke(NativeViewWrapperRenderer renderer, bool changed, int l, int t, int r, int b);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, bool changed, int l, int t, int r, int b, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.Android.OnMeasureDelegate : MulticastDelegate {
    public OnMeasureDelegate(object object, IntPtr method);
    public virtual bool Invoke(NativeViewWrapperRenderer renderer, int widthMeasureSpec, int heightMeasureSpec);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, int widthMeasureSpec, int heightMeasureSpec, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.Android.OpenGLViewRenderer : ViewRenderer`2<OpenGLView, GLSurfaceView> {
    private bool _disposed;
    public OpenGLViewRenderer(Context context);
    protected virtual void Dispose(bool disposing);
    protected virtual GLSurfaceView CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<OpenGLView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Render(object sender, EventArgs eventArgs);
    private void SetRenderMode();
}
internal class Xamarin.Forms.Platform.Android.PageContainer : ViewGroup {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Child>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInFragment>k__BackingField;
    public IVisualElementRenderer Child { get; public set; }
    public bool IsInFragment { get; public set; }
    public PageContainer(Context context, IVisualElementRenderer child, bool inFragment);
    protected PageContainer(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public IVisualElementRenderer get_Child();
    [CompilerGeneratedAttribute]
public void set_Child(IVisualElementRenderer value);
    [CompilerGeneratedAttribute]
public bool get_IsInFragment();
    [CompilerGeneratedAttribute]
public void set_IsInFragment(bool value);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.PageExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("ContentPage.CreateFragment() is obsolete as of version 3.2. Please use ContentPage.CreateSupportFragment() instead.")]
[EditorBrowsableAttribute("1")]
public static Fragment CreateFragment(ContentPage view, Context context);
    [ExtensionAttribute]
public static Fragment CreateSupportFragment(ContentPage view, Context context);
}
public class Xamarin.Forms.Platform.Android.PageRenderer : VisualElementRenderer`1<Page> {
    private double _previousHeight;
    private bool _isDisposed;
    private IPageController PageController { get; }
    private IOrderedTraversalController OrderedTraversalController { get; }
    public PageRenderer(Context context);
    public virtual bool OnTouchEvent(MotionEvent e);
    private IPageController get_PageController();
    private IOrderedTraversalController get_OrderedTraversalController();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Page> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateHeight();
    private void UpdateBackground(bool setBkndColorEvenWhenItsDefault);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IOrderedTraversalController.UpdateTraversalOrder();
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
}
internal class Xamarin.Forms.Platform.Android.PanGestureHandler : object {
    private Func`2<double, double> _pixelTranslation;
    [CompilerGeneratedAttribute]
private Func`1<View> <GetView>k__BackingField;
    private Func`1<View> GetView { get; }
    public PanGestureHandler(Func`1<View> getView, Func`2<double, double> pixelTranslation);
    [CompilerGeneratedAttribute]
private Func`1<View> get_GetView();
    public bool OnPan(float x, float y, int pointerCount);
    public bool OnPanComplete();
    public bool OnPanStarted(int pointerCount);
    public bool HasAnyGestures();
}
public class Xamarin.Forms.Platform.Android.PathRenderer : ShapeRenderer`2<Path, PathView> {
    public PathRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Path> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateData();
    private void UpdateRenderTransform();
}
public class Xamarin.Forms.Platform.Android.PathView : ShapeView {
    public PathView(Context context);
    public void UpdateData(Path path);
    public void UpdateTransform(Matrix transform);
}
public class Xamarin.Forms.Platform.Android.PickerEditText : FormsEditTextBase {
    [CompilerGeneratedAttribute]
private bool <ShowPopupOnFocus>k__BackingField;
    public bool ShowPopupOnFocus { get; public set; }
    public PickerEditText(Context context);
    public PickerEditText(Context context, IPickerRenderer pickerRenderer);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowPopupOnFocus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowPopupOnFocus(bool value);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnFocusChanged(bool gainFocus, FocusSearchDirection direction, Rect previouslyFocusedRect);
    protected virtual void Dispose(bool disposing);
}
internal static class Xamarin.Forms.Platform.Android.PickerManager : object {
    private static HashSet`1<Keycode> AvailableKeys;
    private static PickerManager();
    public static void Init(EditText editText);
    public static void OnTouchEvent(EditText sender, MotionEvent e);
    public static void OnFocusChanged(bool gainFocus, EditText sender, IPopupTrigger popupTrigger);
    private static void OnKeyPress(object sender, KeyEventArgs e);
    public static void Dispose(EditText editText);
    public static ICharSequence GetTitle(Color titleColor, string title);
}
public class Xamarin.Forms.Platform.Android.PickerRenderer : ViewRenderer`2<Picker, EditText> {
    private AlertDialog _dialog;
    private bool _isDisposed;
    private TextColorSwitcher _textColorSwitcher;
    private int _originalHintTextColor;
    private EntryAccessibilityDelegate _pickerAccessibilityDelegate;
    private IElementController ElementController { get; }
    public PickerRenderer(Context context);
    private IElementController get_ElementController();
    protected virtual void Dispose(bool disposing);
    protected virtual EditText CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IPickerRenderer.OnClick();
    private void RowsCollectionChanged(object sender, EventArgs e);
    private void UpdateCharacterSpacing();
    private void UpdateFont();
    private void UpdatePicker();
    private void UpdateTextColor();
    private void UpdateGravity();
}
internal class Xamarin.Forms.Platform.Android.PinchGestureHandler : object {
    private double _pinchStartingScale;
    [CompilerGeneratedAttribute]
private Func`1<View> <GetView>k__BackingField;
    private Func`1<View> GetView { get; }
    private PinchGestureRecognizer PinchGesture { get; }
    public PinchGestureHandler(Func`1<View> getView);
    [CompilerGeneratedAttribute]
private Func`1<View> get_GetView();
    private PinchGestureRecognizer get_PinchGesture();
    public bool OnPinch(float scale, Point scalePoint);
    public void OnPinchEnded();
    public bool OnPinchStarted(Point scalePoint);
}
public class Xamarin.Forms.Platform.Android.Platform : BindableObject {
    [CompilerGeneratedAttribute]
private static string <PackageName>k__BackingField;
    internal static string CloseContextActionsSignalName;
    internal static BindableProperty RendererProperty;
    private Context _context;
    private Activity _activity;
    private PlatformRenderer _renderer;
    private ToolbarTracker _toolbarTracker;
    private NavigationPage _currentNavigationPage;
    private TabbedPage _currentTabbedPage;
    private Color _defaultActionBarTitleTextColor;
    private bool _disposed;
    private bool _ignoreAndroidSelection;
    private Page _navigationPageCurrentPage;
    private NavigationModel _navModel;
    private bool _embedded;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private MasterDetailPage <CurrentMasterDetailPage>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionBarDrawerToggle <MasterDetailPageToggle>k__BackingField;
    private static int s_id;
    internal static BindableProperty PageContextProperty;
    private bool _navAnimationInProgress;
    internal static string PackageName { get; private set; }
    private IMasterDetailPageController MasterDetailPageController { get; }
    internal Page Page { get; private set; }
    private IPageController CurrentPageController { get; }
    private ActionBar ActionBar { get; }
    private MasterDetailPage CurrentMasterDetailPage { get; private set; }
    private NavigationPage CurrentNavigationPage { get; private set; }
    private TabbedPage CurrentTabbedPage { get; private set; }
    private ActionBarDrawerToggle MasterDetailPageToggle { get; private set; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.ModalStack { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.NavigationStack { get; }
    internal bool NavAnimationInProgress { get; internal set; }
    internal Platform(Context context, bool embedded);
    internal Platform(Context context);
    private static Platform();
    [CompilerGeneratedAttribute]
internal static string get_PackageName();
    [CompilerGeneratedAttribute]
private static void set_PackageName(string value);
    internal static string GetPackageName();
    private IMasterDetailPageController get_MasterDetailPageController();
    [CompilerGeneratedAttribute]
internal Page get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(Page value);
    private IPageController get_CurrentPageController();
    private ActionBar get_ActionBar();
    [CompilerGeneratedAttribute]
private MasterDetailPage get_CurrentMasterDetailPage();
    [CompilerGeneratedAttribute]
private void set_CurrentMasterDetailPage(MasterDetailPage value);
    private NavigationPage get_CurrentNavigationPage();
    private void set_CurrentNavigationPage(NavigationPage value);
    private TabbedPage get_CurrentTabbedPage();
    private void set_CurrentTabbedPage(TabbedPage value);
    [CompilerGeneratedAttribute]
private ActionBarDrawerToggle get_MasterDetailPageToggle();
    [CompilerGeneratedAttribute]
private void set_MasterDetailPageToggle(ActionBarDrawerToggle value);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_ModalStack();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_NavigationStack();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.Platform/<Xamarin-Forms-INavigation-PushModalAsync>d__59")]
private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    public static void ClearRenderer(View renderedView);
    [ObsoleteAttribute("CreateRenderer(VisualElement) is obsolete as of version 2.5. Please use CreateRendererWithContext(VisualElement, Context) instead.")]
[EditorBrowsableAttribute("1")]
public static IVisualElementRenderer CreateRenderer(VisualElement element);
    internal static IVisualElementRenderer CreateRenderer(VisualElement element, Context context);
    public static IVisualElementRenderer CreateRendererWithContext(VisualElement element, Context context);
    public static IVisualElementRenderer GetRenderer(VisualElement bindable);
    public static void SetRenderer(VisualElement bindable, IVisualElementRenderer value);
    public void UpdateActionBarTextColor();
    protected virtual void OnBindingContextChanged();
    internal static IVisualElementRenderer CreateRenderer(VisualElement element, FragmentManager fragmentManager, Context context);
    internal ViewGroup GetViewGroup();
    internal void PrepareMenu(IMenu menu);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.Platform/<SendHomeClicked>d__72")]
internal void SendHomeClicked();
    internal void SetPage(Page newRoot);
    internal void UpdateActionBar();
    internal void UpdateActionBarBackgroundColor();
    internal void UpdateMasterDetailToggle(bool update);
    private void AddChild(VisualElement view, bool layout);
    private Tab AddTab(Page page, int index);
    private List`1<Page> AncestorPagesOfPage(Page root);
    private void ClearMasterDetailToggle();
    private void CurrentNavigationPageOnPopped(object sender, NavigationEventArgs eventArg);
    private void CurrentNavigationPageOnPoppedToRoot(object sender, EventArgs eventArgs);
    private void CurrentNavigationPageOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void CurrentNavigationPageOnPushed(object sender, NavigationEventArgs eventArg);
    private void CurrentTabbedPageChildrenChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void CurrentTabbedPageOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SelectTab();
    private Drawable GetActionBarBackgroundDrawable();
    private void GetNewMasterDetailToggle();
    private bool HandleBackPressed(object sender, EventArgs e);
    private void HandleToolbarItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HideActionBar();
    private void NavigationPageCurrentPageOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void PagePropertyChanged(object sender, PropertyChangedEventArgs args);
    private Task PresentModal(Page modal, bool animated);
    private void RegisterNavPageCurrent(Page page);
    private void ReloadToolbarItems();
    private void RemoveTab(Page page, int index);
    private void Reset();
    private void SetActionBarTextColor();
    private Color SetDefaultActionBarTitleTextColor();
    private bool ShouldShowActionBarTitleArea();
    private bool ShouldUpdateActionBarUpColor();
    private void ShowActionBar();
    private void ToolbarTrackerOnCollectionChanged(object sender, EventArgs eventArgs);
    private bool UpButtonShouldNavigate();
    private void UpdateActionBarHomeAsUp(ActionBar actionBar);
    private void UpdateActionBarTitle();
    private void UpdateActionBarUpImageColor();
    internal static int GenerateViewId();
    internal static void SetPageContext(BindableObject bindable, Context context);
    private static Context GetPreviewerContext(Element element);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IPlatformLayout.OnLayout(bool changed, int l, int t, int r, int b);
    public static SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    internal bool get_NavAnimationInProgress();
    internal void set_NavAnimationInProgress(bool value);
    internal static string ResolveMsAppDataUri(Uri uri);
    [CompilerGeneratedAttribute]
private void <CurrentTabbedPageChildrenChanged>b__85_0(object o, int index, bool create);
    [CompilerGeneratedAttribute]
private void <CurrentTabbedPageChildrenChanged>b__85_1(object o, int index);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.PlatformConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, T> OnThisPlatform(T element);
}
public abstract class Xamarin.Forms.Platform.Android.PlatformEffect : PlatformEffect`2<ViewGroup, View> {
}
internal class Xamarin.Forms.Platform.Android.PlatformRenderer : ViewGroup {
    private IPlatformLayout _canvas;
    private Point _downPosition;
    private DateTime _downTime;
    public PlatformRenderer(Context context, IPlatformLayout canvas);
    public virtual bool DispatchTouchEvent(MotionEvent e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
}
public class Xamarin.Forms.Platform.Android.PolygonRenderer : ShapeRenderer`2<Polygon, PolygonView> {
    public PolygonRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polygon> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    protected virtual void Dispose(bool disposing);
    private void UpdatePoints();
    private void UpdateFillRule();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Android.PolygonView : ShapeView {
    private PointCollection _points;
    private bool _fillMode;
    public PolygonView(Context context);
    private void UpdateShape();
    public void UpdatePoints(PointCollection points);
    public void UpdateFillMode(bool fillMode);
}
public class Xamarin.Forms.Platform.Android.PolylineRenderer : ShapeRenderer`2<Polyline, PolylineView> {
    public PolylineRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polyline> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdatePoints();
    private void UpdateFillRule();
}
public class Xamarin.Forms.Platform.Android.PolylineView : ShapeView {
    private PointCollection _points;
    private bool _fillMode;
    public PolylineView(Context context);
    private void UpdateShape();
    public void UpdatePoints(PointCollection points);
    public void UpdateFillMode(bool fillMode);
}
internal static class Xamarin.Forms.Platform.Android.PopupManager : object {
    private static List`1<PopupRequestHelper> s_subscriptions;
    private static PopupManager();
    internal static void Subscribe(Activity context);
    internal static void Unsubscribe(Context context);
    internal static void ResetBusyCount(Activity context);
}
public class Xamarin.Forms.Platform.Android.PositionalSmoothScroller : LinearSmoothScroller {
    private ScrollToPosition _scrollToPosition;
    protected int VerticalSnapPreference { get; }
    protected int HorizontalSnapPreference { get; }
    private int SnapPreference { get; }
    public PositionalSmoothScroller(Context context, ScrollToPosition scrollToPosition);
    protected virtual int get_VerticalSnapPreference();
    protected virtual int get_HorizontalSnapPreference();
    public virtual int CalculateDtToFit(int viewStart, int viewEnd, int boxStart, int boxEnd, int snapPreference);
    private int get_SnapPreference();
}
[BroadcastReceiverAttribute]
public class Xamarin.Forms.Platform.Android.PowerSaveModeBroadcastReceiver : BroadcastReceiver {
    public virtual void OnReceive(Context context, Intent intent);
    public void CheckAnimationEnabledStatus();
}
public class Xamarin.Forms.Platform.Android.ProgressBarRenderer : ViewRenderer`2<ProgressBar, ProgressBar> {
    public ProgressBarRenderer(Context context);
    protected virtual ProgressBar CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected internal virtual void UpdateProgressColor();
    private void UpdateProgress();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.PropertyChangedEventArgsExtensions : object {
    [ExtensionAttribute]
public static bool Is(PropertyChangedEventArgs args, BindableProperty property);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2, BindableProperty p3);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2, BindableProperty p3, BindableProperty p4);
}
public class Xamarin.Forms.Platform.Android.RadioButtonRenderer : AppCompatRadioButton {
    private float _defaultFontSize;
    private Nullable`1<int> _defaultLabelFor;
    private Typeface _defaultTypeface;
    private bool _isDisposed;
    private bool _inputTransparent;
    private Lazy`1<TextColorSwitcher> _textColorSwitcher;
    private AutomationPropertiesProvider _automationPropertiesProvider;
    private VisualElementTracker _tracker;
    private VisualElementRenderer _visualElementRenderer;
    private BorderBackgroundManager _backgroundTracker;
    private ButtonLayoutManager _buttonLayoutManager;
    private IPlatformElementConfiguration`2<Android, Button> _platformElementConfiguration;
    private Button _button;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    protected Button Element { get; }
    protected AppCompatRadioButton Control { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.Element { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.ViewGroup { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private Button Button { get; private set; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowRadius { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDx { get; }
    private float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowDy { get; }
    private Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.ShadowColor { get; }
    private View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.View { get; }
    private AppCompatButton Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.View { get; }
    private Button Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.Element { get; }
    public RadioButtonRenderer(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    protected Button get_Element();
    protected AppCompatRadioButton get_Control();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_Element();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    private sealed virtual override ViewGroup Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_ViewGroup();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private Button get_Button();
    private void set_Button(Button value);
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    private sealed virtual override void Android.Views.View.IOnClickListener.OnClick(View v);
    private sealed virtual override bool Android.Views.View.IOnTouchListener.OnTouch(View v, MotionEvent e);
    private sealed virtual override void Android.Views.View.IOnAttachStateChangeListener.OnViewAttachedToWindow(View attachedView);
    private sealed virtual override void Android.Views.View.IOnAttachStateChangeListener.OnViewDetachedFromWindow(View detachedView);
    private sealed virtual override void Android.Views.View.IOnFocusChangeListener.OnFocusChange(View v, bool hasFocus);
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    protected virtual void Dispose(bool disposing);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    private void SetTracker(VisualElementTracker tracker);
    private void UpdateBackgroundColor();
    internal void OnNativeFocusChanged(bool hasFocus);
    internal void SendVisualElementInitialized(VisualElement element, View nativeView);
    private void Initialize();
    private void UpdateFont();
    private void UpdateInputTransparent();
    private void UpdateTextColor();
    private void UpdateIsChecked();
    private sealed virtual override void Android.Widget.CompoundButton.IOnCheckedChangeListener.OnCheckedChanged(CompoundButton buttonView, bool isChecked);
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowRadius();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDx();
    private sealed virtual override float Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowDy();
    private sealed virtual override Color Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_ShadowColor();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultPadding();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.UseDefaultShadow();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.IsShadowEnabled();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IBorderVisualElementRenderer.get_View();
    private IPlatformElementConfiguration`2<Android, Button> OnThisPlatform();
    private sealed virtual override AppCompatButton Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.get_View();
    private sealed virtual override Button Xamarin.Forms.Platform.Android.IButtonLayoutRenderer.get_Element();
}
public class Xamarin.Forms.Platform.Android.RectangleRenderer : ShapeRenderer`2<Rectangle, RectView> {
    public RectangleRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Rectangle> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateRadiusX();
    private void UpdateRadiusY();
}
public class Xamarin.Forms.Platform.Android.RectView : ShapeView {
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    public float RadiusX { get; public set; }
    public float RadiusY { get; public set; }
    public RectView(Context context);
    [CompilerGeneratedAttribute]
public void set_RadiusX(float value);
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public void set_RadiusY(float value);
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    private void UpdateShape();
    public void UpdateRadiusX(double radiusX);
    public void UpdateRadiusY(double radiusY);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.RecyclerExtensions : object {
    [ExtensionAttribute]
public static int CalculateCenterItemIndex(RecyclerView recyclerView, int firstVisibleItemIndex, LinearLayoutManager linearLayoutManager, bool lookCenteredOnXAndY);
}
public class Xamarin.Forms.Platform.Android.RefreshViewRenderer : SwipeRefreshLayout {
    private bool _isDisposed;
    private bool _init;
    private bool _refreshing;
    private IVisualElementRenderer _renderer;
    private Nullable`1<int> _defaultLabelFor;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    [CompilerGeneratedAttribute]
private VisualElementTracker <Tracker>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    public VisualElementTracker Tracker { get; private set; }
    public ViewGroup ViewGroup { get; }
    public View View { get; }
    public SwipeRefreshLayout SwipeRefreshLayout { get; }
    public VisualElement Element { get; private set; }
    public RefreshView RefreshView { get; }
    public bool Refreshing { get; public set; }
    public RefreshViewRenderer(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElementTracker get_Tracker();
    [CompilerGeneratedAttribute]
private void set_Tracker(VisualElementTracker value);
    public sealed virtual ViewGroup get_ViewGroup();
    public sealed virtual View get_View();
    public SwipeRefreshLayout get_SwipeRefreshLayout();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(VisualElement value);
    public RefreshView get_RefreshView();
    public virtual bool get_Refreshing();
    public virtual void set_Refreshing(bool value);
    public virtual bool CanChildScrollUp();
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    public sealed virtual void SetElement(VisualElement element);
    private void UpdateContent();
    private void UpdateColors();
    private void UpdateIsRefreshing();
    private void UpdateIsEnabled();
    private bool CanScrollUp(View view);
    private bool CanScrollUpViewByType(View view);
    public sealed virtual void OnRefresh();
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    public sealed virtual void UpdateLayout();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void SetLabelFor(Nullable`1<int> id);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private void OnRegisterEffect(PlatformEffect effect);
}
public static class Xamarin.Forms.Platform.Android.RendererFactory : object {
    [ObsoleteAttribute("GetRenderer is obsolete as of version 2.0.1. Please use Platform.CreateRenderer instead.")]
[EditorBrowsableAttribute("1")]
public static IVisualElementRenderer GetRenderer(VisualElement view);
}
public class Xamarin.Forms.Platform.Android.RendererPool : object {
    private Dictionary`2<Type, Stack`1<IVisualElementRenderer>> _freeRenderers;
    private VisualElement _oldElement;
    private IVisualElementRenderer _parent;
    public RendererPool(IVisualElementRenderer renderer, VisualElement oldElement);
    public void ClearChildrenRenderers();
    public IVisualElementRenderer GetFreeRenderer(VisualElement view);
    private void ClearChildrenRenderers(VisualElement view);
    private void PushRenderer(IVisualElementRenderer renderer);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class Xamarin.Forms.Platform.Android.Resource : object {
    private static Resource();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.ResourceManager : object {
    private static string _drawableDefType;
    private static Lazy`1<ImageCache> _lruCache;
    private static Assembly _assembly;
    private static Type _drawableClass;
    private static Type _resourceClass;
    private static Type _styleClass;
    private static Type _layoutClass;
    public static Type DrawableClass { get; public set; }
    public static Type ResourceClass { get; public set; }
    public static Type StyleClass { get; public set; }
    public static Type LayoutClass { get; public set; }
    private static ResourceManager();
    private static ImageCache GetCache();
    private static Type FindType(string name, string altName);
    public static Type get_DrawableClass();
    public static void set_DrawableClass(Type value);
    public static Type get_ResourceClass();
    public static void set_ResourceClass(Type value);
    public static Type get_StyleClass();
    public static void set_StyleClass(Type value);
    public static Type get_LayoutClass();
    public static void set_LayoutClass(Type value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ResourceManager/<GetFormsDrawableAsync>d__21")]
[ExtensionAttribute]
internal static Task`1<Drawable> GetFormsDrawableAsync(Context context, ImageSource imageSource, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ResourceManager/<GetFormsBitmapAsync>d__22")]
[ExtensionAttribute]
internal static Task`1<Bitmap> GetFormsBitmapAsync(Context context, ImageSource imageSource, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static bool IsDrawableSourceValid(IVisualElementRenderer renderer, BindableObject bindable, BindableObject& element);
    [ExtensionAttribute]
internal static Task ApplyDrawableAsync(IShellContext shellContext, BindableObject bindable, BindableProperty imageSourceProperty, Action`1<Drawable> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task ApplyDrawableAsync(IVisualElementRenderer renderer, BindableProperty imageSourceProperty, Context context, Action`1<Drawable> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ResourceManager/<ApplyDrawableAsync>d__26")]
[ExtensionAttribute]
internal static Task ApplyDrawableAsync(IVisualElementRenderer renderer, BindableObject bindable, BindableProperty imageSourceProperty, Context context, Action`1<Drawable> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ResourceManager/<ApplyDrawableAsync>d__27")]
[ExtensionAttribute]
internal static Task ApplyDrawableAsync(Context context, BindableObject bindable, BindableProperty imageSourceProperty, Action`1<Drawable> onSet, Action`1<bool> onLoading, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Bitmap GetBitmap(Resources resource, FileImageSource fileImageSource);
    [ExtensionAttribute]
public static Bitmap GetBitmap(Resources resource, string name);
    [ExtensionAttribute]
public static Bitmap GetBitmap(Resources resource, string name, Context context);
    [ExtensionAttribute]
public static Task`1<Bitmap> GetBitmapAsync(Resources resource, string name);
    [ExtensionAttribute]
public static Task`1<Bitmap> GetBitmapAsync(Resources resource, string name, Context context);
    [ExtensionAttribute]
[ObsoleteAttribute("GetDrawable(this Resources, string) is obsolete as of version 2.5. Please use GetDrawable(this Context, string) instead.")]
[EditorBrowsableAttribute("1")]
public static Drawable GetDrawable(Resources resource, string name);
    [EditorBrowsableAttribute("1")]
private static void LogInfoToPreviewer(string message);
    [ExtensionAttribute]
public static Drawable GetDrawable(Context context, string name);
    public static int GetDrawableByName(string name);
    public static int GetResourceByName(string name);
    public static int GetLayoutByName(string name);
    [ExtensionAttribute]
public static int GetLayout(Context context, string name);
    public static int GetStyleByName(string name);
    [ExtensionAttribute]
public static int GetStyle(Context context, string name);
    public static void Init(Assembly masterAssembly);
    private static int IdFromTitle(string title, Type type);
    private static int IdFromTitle(string title, Type resourceType, string defType, Resources resource);
    private static int IdFromTitle(string title, Type resourceType, string defType, Context context);
    private static int IdFromTitle(string title, Type resourceType, string defType, Resources resource, string packageName);
    private static int GetId(Type type, string memberName);
}
internal class Xamarin.Forms.Platform.Android.ResourcesProvider : object {
    private ResourceDictionary _dictionary;
    public sealed virtual IResourceDictionary GetSystemResources();
    public Style GetStyle(int style);
    private void UpdateStyles();
}
internal class Xamarin.Forms.Platform.Android.ScrollHelper : OnScrollListener {
    private RecyclerView _recyclerView;
    private Action _pendingScrollAdjustment;
    private bool _undoNextScrollAdjustment;
    private bool _maintainingScrollOffsets;
    private int _lastScrollX;
    private int _lastScrollY;
    private int _lastDeltaX;
    private int _lastDeltaY;
    public ScrollHelper(RecyclerView recyclerView);
    public void UndoNextScrollAdjustment();
    public void AdjustScroll();
    public void AnimateScrollToPosition(int index, ScrollToPosition scrollToPosition);
    public void JumpScrollToPosition(int index, ScrollToPosition scrollToPosition, bool uniformSize);
    private Rect GetViewRect(int index);
    private void AdjustVerticalScroll(int index, ScrollToPosition scrollToPosition);
    private void AdjustHorizontalScroll(int index, ScrollToPosition scrollToPosition);
    private void TrackOffsets();
    public virtual void OnScrolled(RecyclerView recyclerView, int dx, int dy);
}
internal class Xamarin.Forms.Platform.Android.ScrollLayoutManager : LinearLayoutManager {
    [CompilerGeneratedAttribute]
private ScrollMode <ScrollVertically>k__BackingField;
    public ScrollMode ScrollVertically { get; public set; }
    public ScrollLayoutManager(Context context, int orientation, bool reverseLayout);
    [CompilerGeneratedAttribute]
public ScrollMode get_ScrollVertically();
    [CompilerGeneratedAttribute]
public void set_ScrollVertically(ScrollMode value);
    private int GetVisibleChildCount();
    public virtual bool CanScrollVertically();
}
internal class Xamarin.Forms.Platform.Android.ScrollViewContainer : ViewGroup {
    private ScrollView _parent;
    private View _childView;
    private bool _isDisposed;
    public View ChildView { get; public set; }
    public ScrollViewContainer(ScrollView parent, Context context);
    public View get_ChildView();
    public void set_ChildView(View value);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.ScrollViewExtensions : object {
    [ExtensionAttribute]
internal static void HandleScrollBarVisibilityChange(IScrollView scrollView);
}
public class Xamarin.Forms.Platform.Android.ScrollViewRenderer : NestedScrollView {
    private ScrollViewContainer _container;
    private HorizontalScrollView _hScrollView;
    private ScrollBarVisibility _defaultHorizontalScrollVisibility;
    private ScrollBarVisibility _defaultVerticalScrollVisibility;
    private bool _isAttached;
    internal bool ShouldSkipOnTouch;
    private bool _isBidirectional;
    private ScrollView _view;
    private int _previousBottom;
    private bool _isEnabled;
    private bool _disposed;
    private LayoutDirection _prevLayoutDirection;
    private bool _checkedForRtlScroll;
    [CompilerGeneratedAttribute]
private float <LastX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LastY>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    [CompilerGeneratedAttribute]
private VisualElementTracker <Tracker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Xamarin.Forms.Platform.Android.IScrollView.ScrollBarsInitialized>k__BackingField;
    protected IScrollViewController Controller { get; }
    internal float LastX { get; internal set; }
    internal float LastY { get; internal set; }
    public VisualElement Element { get; }
    public VisualElementTracker Tracker { get; private set; }
    public ViewGroup ViewGroup { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    private bool Xamarin.Forms.Platform.Android.IScrollView.ScrollBarsInitialized { get; private set; }
    public ScrollViewRenderer(Context context);
    protected IScrollViewController get_Controller();
    [CompilerGeneratedAttribute]
internal float get_LastX();
    [CompilerGeneratedAttribute]
internal void set_LastX(float value);
    [CompilerGeneratedAttribute]
internal float get_LastY();
    [CompilerGeneratedAttribute]
internal void set_LastY(float value);
    public sealed virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    public sealed virtual void SetElement(VisualElement element);
    private void HandleLayoutChanged(object sender, EventArgs e);
    private void UpdateFlowDirection();
    [CompilerGeneratedAttribute]
public sealed virtual VisualElementTracker get_Tracker();
    [CompilerGeneratedAttribute]
private void set_Tracker(VisualElementTracker value);
    public sealed virtual void UpdateLayout();
    public sealed virtual ViewGroup get_ViewGroup();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    public virtual void Draw(Canvas canvas);
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    public virtual bool OnTouchEvent(MotionEvent ev);
    protected virtual void Dispose(bool disposing);
    public virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    protected virtual void OnScrollChanged(int l, int t, int oldl, int oldt);
    internal void UpdateScrollPosition(double x, double y);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private void OnRegisterEffect(PlatformEffect effect);
    private static int GetDistance(double start, double position, double v);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateIsEnabled();
    private void LoadContent();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ScrollViewRenderer/<OnScrollToRequested>d__65")]
private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    private void UpdateBackgroundColor();
    private void UpdateBackground();
    private void UpdateOrientation();
    private void UpdateHorizontalScrollBarVisibility();
    private void UpdateVerticalScrollBarVisibility();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IScrollView.AwakenScrollBars();
    [CompilerGeneratedAttribute]
private sealed virtual override bool Xamarin.Forms.Platform.Android.IScrollView.get_ScrollBarsInitialized();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.Platform.Android.IScrollView.set_ScrollBarsInitialized(bool value);
    [CompilerGeneratedAttribute]
private void <OnLayout>b__56_0();
}
public class Xamarin.Forms.Platform.Android.SearchBarRenderer : ViewRenderer`2<SearchBar, SearchView> {
    private EditText _editText;
    private InputTypes _inputType;
    private TextColorSwitcher _textColorSwitcher;
    private TextColorSwitcher _hintColorSwitcher;
    private float _defaultHeight { get; }
    public SearchBarRenderer(Context context);
    private float get__defaultHeight();
    private sealed virtual override bool Android.Widget.SearchView.IOnQueryTextListener.OnQueryTextChange(string newText);
    private sealed virtual override bool Android.Widget.SearchView.IOnQueryTextListener.OnQueryTextSubmit(string query);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual SearchView CreateNativeControl();
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SearchBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    internal virtual void OnNativeFocusChanged(bool hasFocus);
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateCancelButtonColor();
    private void UpdateEnabled();
    private void ClearFocus(SearchView view);
    private void UpdateFont();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private void UpdateText();
    private void UpdateCharacterSpacing();
    private void UpdateTextColor();
    private void UpdateMaxLength();
    private void UpdateInputType();
    protected virtual NumberKeyListener GetDigitsKeyListener(InputTypes inputTypes);
}
public class Xamarin.Forms.Platform.Android.SearchHandlerAppearanceTracker : object {
    private SearchHandler _searchHandler;
    private bool _disposed;
    private View _control;
    private EditText _editText;
    private InputTypes _inputType;
    private TextColorSwitcher _textColorSwitcher;
    private TextColorSwitcher _hintColorSwitcher;
    public SearchHandlerAppearanceTracker(IShellSearchView searchView);
    protected virtual void SearchHandlerFocusChangeRequested(object sender, FocusRequestArgs e);
    protected virtual void SearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateSearchBarColors();
    private void UpdateFont();
    private void UpdatePlaceholderColor();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateTextTransform();
    private void UpdateBackgroundColor();
    private void UpdateCancelButtonColor();
    private void UpdateClearIconColor();
    private void UpdateClearPlaceholderIconColor();
    private void UpdateTextColor();
    private void UpdateImageButtonIconColor(string tagName, Color toColor);
    private void UpdateInputType();
    protected virtual NumberKeyListener GetDigitsKeyListener(InputTypes inputTypes);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Platform.Android.SelectableItemsViewAdapter`2 : StructuredItemsViewAdapter`2<TItemsView, TItemsSource> {
    private List`1<SelectableViewHolder> _currentViewHolders;
    protected internal SelectableItemsViewAdapter`2(TItemsView selectableItemsView, Func`3<View, Context, ItemContentView> createView);
    public virtual void OnBindViewHolder(ViewHolder holder, int position);
    public virtual void OnViewRecycled(Object holder);
    internal void ClearNativeSelection();
    internal void MarkNativeSelection(object selectedItem);
    private Int32[] GetSelectedPositions();
    private bool PositionIsSelected(int position);
    private void SelectableClicked(object sender, int adapterPosition);
    private void UpdateFormsSelection(int adapterPosition);
}
public class Xamarin.Forms.Platform.Android.SelectableItemsViewRenderer`3 : StructuredItemsViewRenderer`3<TItemsView, TAdapter, TItemsViewSource> {
    public SelectableItemsViewRenderer`3(Context context);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual TAdapter CreateAdapter();
    private void UpdateNativeSelection();
}
public abstract class Xamarin.Forms.Platform.Android.SelectableViewHolder : ViewHolder {
    private bool _isSelected;
    private Drawable _selectedDrawable;
    private Drawable _selectableItemDrawable;
    private bool _isSelectionEnabled;
    [CompilerGeneratedAttribute]
private EventHandler`1<int> Clicked;
    public bool IsSelected { get; public set; }
    protected SelectableViewHolder(View itemView, bool isSelectionEnabled);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public sealed virtual void OnClick(View view);
    [CompilerGeneratedAttribute]
public void add_Clicked(EventHandler`1<int> value);
    [CompilerGeneratedAttribute]
public void remove_Clicked(EventHandler`1<int> value);
    protected virtual void OnSelectedChanged();
    protected virtual void OnViewHolderClicked(int adapterPosition);
    private void SetSelectionStates(bool isSelected);
    private Drawable GetSelectedDrawable();
    private Drawable GetSelectableItemDrawable();
}
public class Xamarin.Forms.Platform.Android.SelectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public int Start { get; private set; }
    public int End { get; private set; }
    public SelectionChangedEventArgs(int start, int end);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
private void set_End(int value);
}
public class Xamarin.Forms.Platform.Android.ShapeRenderer`2 : ViewRenderer`2<TShape, TNativeShape> {
    private double _height;
    private double _width;
    public ShapeRenderer`2(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TShape> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    private void UpdateSize();
    private void UpdateAspect();
    private void UpdateFill();
    private void UpdateStroke();
    private void UpdateStrokeThickness();
    private void UpdateStrokeDashArray();
    private void UpdateStrokeDashOffset();
    private void UpdateStrokeLineCap();
    private void UpdateStrokeLineJoin();
    private void UpdateStrokeMiterLimit();
}
public class Xamarin.Forms.Platform.Android.ShapeView : View {
    private ShapeDrawable _drawable;
    protected float _density;
    private Path _path;
    private RectF _pathFillBounds;
    private RectF _pathStrokeBounds;
    private Brush _stroke;
    private Brush _fill;
    private Shader _strokeShader;
    private Shader _fillShader;
    private float _strokeWidth;
    private Single[] _strokeDash;
    private float _strokeDashOffset;
    private Stretch _aspect;
    private Matrix _transform;
    public ShapeView(Context context);
    protected virtual void OnDraw(Canvas canvas);
    public void UpdateShape(Path path);
    public void UpdateShapeTransform(Matrix matrix);
    public SizeRequest GetDesiredSize();
    public void UpdateAspect(Stretch aspect);
    public void UpdateFill(Brush fill);
    public void UpdateStroke(Brush stroke);
    public void UpdateStrokeThickness(float strokeWidth);
    public void UpdateStrokeDashArray(Single[] dash);
    public void UpdateStrokeDashOffset(float strokeDashOffset);
    public void UpdateStrokeDash();
    public void UpdateStrokeLineCap(Cap strokeCap);
    public void UpdateStrokeLineJoin(Join strokeJoin);
    public void UpdateStrokeMiterLimit(float strokeMiterLimit);
    public void UpdateSize(double width, double height);
    protected void UpdatePathShape();
    private Matrix CreateMatrix();
    private void UpdatePathStrokeBounds();
    private LinearGradient CreateLinearGradient(LinearGradientBrush linearGradientBrush, RectF pathBounds);
    private RadialGradient CreateRadialGradient(RadialGradientBrush radialGradientBrush, RectF pathBounds);
}
public class Xamarin.Forms.Platform.Android.ShellBottomNavViewAppearanceTracker : object {
    private IShellContext _shellContext;
    private ShellItem _shellItem;
    private ColorStateList _defaultList;
    private bool _disposed;
    private ColorStateList _colorStateList;
    public ShellBottomNavViewAppearanceTracker(IShellContext shellContext, ShellItem shellItem);
    public virtual void ResetAppearance(BottomNavigationView bottomView);
    public virtual void SetAppearance(BottomNavigationView bottomView, IShellAppearanceElement appearance);
    protected virtual void SetBackgroundColor(BottomNavigationView bottomView, Color color);
    private ColorStateList MakeColorStateList(Color titleColor, Color disabledColor, Color unselectedColor);
    private ColorStateList MakeColorStateList(int titleColorInt, int disabledColorInt, int defaultColor);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.ShellContentFragment : Fragment {
    private IShellContext _shellContext;
    private IShellToolbarAppearanceTracker _appearanceTracker;
    private Page _page;
    private IVisualElementRenderer _renderer;
    private View _root;
    private ShellPageContainer _shellPageContainer;
    private ShellContent _shellContent;
    private Toolbar _toolbar;
    private IShellToolbarTracker _toolbarTracker;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler AnimationFinished;
    public Fragment Fragment { get; }
    public ShellContentFragment(IShellContext shellContext, ShellContent shellContent);
    public ShellContentFragment(IShellContext shellContext, Page page);
    private sealed virtual override void Android.Views.Animations.Animation.IAnimationListener.OnAnimationEnd(Animation animation);
    private sealed virtual override void Android.Views.Animations.Animation.IAnimationListener.OnAnimationRepeat(Animation animation);
    private sealed virtual override void Android.Views.Animations.Animation.IAnimationListener.OnAnimationStart(Animation animation);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnimationFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnimationFinished(EventHandler value);
    public sealed virtual Fragment get_Fragment();
    public virtual Animation OnCreateAnimation(int transit, bool enter, int nextAnim);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    private void Destroy();
    protected virtual void Dispose(bool disposing);
    public virtual void OnDestroy();
    protected virtual void ResetAppearance();
    protected virtual void SetAppearance(ShellAppearance appearance);
}
public class Xamarin.Forms.Platform.Android.ShellFlyoutRecyclerAdapter : Adapter {
    private IShellContext _shellContext;
    private List`1<AdapterListItem> _listItems;
    private Dictionary`2<int, DataTemplate> _templateMap;
    private Action`1<Element> _selectedCallback;
    private bool _disposed;
    private ElementViewHolder _elementViewHolder;
    public int ItemCount { get; }
    protected Shell Shell { get; }
    private IShellController ShellController { get; }
    protected DataTemplate DefaultItemTemplate { get; }
    protected DataTemplate DefaultMenuItemTemplate { get; }
    public ShellFlyoutRecyclerAdapter(IShellContext shellContext, Action`1<Element> selectedCallback);
    public virtual int get_ItemCount();
    protected Shell get_Shell();
    private IShellController get_ShellController();
    protected virtual DataTemplate get_DefaultItemTemplate();
    protected virtual DataTemplate get_DefaultMenuItemTemplate();
    public virtual int GetItemViewType(int position);
    public virtual void OnBindViewHolder(ViewHolder holder, int position);
    public virtual ViewHolder OnCreateViewHolder(ViewGroup parent, int viewType);
    protected virtual List`1<AdapterListItem> GenerateItemList();
    protected virtual void OnShellStructureChanged(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.ShellFlyoutRenderer : DrawerLayout {
    private static UInt32 DefaultScrimColor;
    private IShellContext _shellContext;
    private View _content;
    private IShellFlyoutContentRenderer _flyoutContent;
    private int _flyoutWidth;
    private int _currentLockMode;
    private bool _disposed;
    private Brush _scrimBrush;
    private Paint _scrimPaint;
    private int _previousHeight;
    private int _previousWidth;
    private int _scrimOpacity;
    private FlyoutBehavior _behavior;
    private View Xamarin.Forms.Platform.Android.IShellFlyoutRenderer.AndroidView { get; }
    private Shell Shell { get; }
    private IShellController ShellController { get; }
    public ShellFlyoutRenderer(IShellContext shellContext, Context context);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private sealed virtual override View Xamarin.Forms.Platform.Android.IShellFlyoutRenderer.get_AndroidView();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IShellFlyoutRenderer.AttachFlyout(IShellContext context, View content);
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerClosed(View drawerView);
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerOpened(View drawerView);
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerSlide(View drawerView, float slideOffset);
    private sealed virtual override void AndroidX.DrawerLayout.Widget.DrawerLayout.IDrawerListener.OnDrawerStateChanged(int newState);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    private Shell get_Shell();
    private IShellController get_ShellController();
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    protected virtual bool DrawChild(Canvas canvas, View child, long drawingTime);
    protected virtual void AttachFlyout(IShellContext context, View content);
    protected virtual void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateDrawerLockMode(FlyoutBehavior behavior);
    private void UpdateScrim(Brush backdrop);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.ShellFlyoutTemplatedContentRenderer : Object {
    private IShellContext _shellContext;
    private bool _disposed;
    private HeaderContainer _headerView;
    private ViewGroup _rootView;
    private Drawable _defaultBackgroundColor;
    private ImageView _bgImage;
    private AppBarLayout _appBar;
    private RecyclerView _recycler;
    private ShellFlyoutRecyclerAdapter _adapter;
    private View _flyoutHeader;
    private int _actionBarHeight;
    private ScrollLayoutManager _layoutManager;
    public View AndroidView { get; }
    public ShellFlyoutTemplatedContentRenderer(IShellContext shellContext);
    public sealed virtual View get_AndroidView();
    protected virtual void LoadView(IShellContext shellContext);
    private void OnFlyoutHeaderMeasureInvalidated(object sender, EventArgs e);
    protected void OnElementSelected(Element element);
    protected virtual void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFlyoutHeader();
    private void UpdateVerticalScrollMode();
    protected virtual void UpdateFlyoutBackground();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ShellFlyoutTemplatedContentRenderer/<UpdateFlyoutBgImageAsync>d__22")]
private void UpdateFlyoutBgImageAsync();
    protected virtual void UpdateFlyoutHeaderBehavior();
    public sealed virtual void OnOffsetChanged(AppBarLayout appBarLayout, int verticalOffset);
    protected virtual void Dispose(bool disposing);
}
internal class Xamarin.Forms.Platform.Android.ShellFragmentPagerAdapter : FragmentPagerAdapter {
    private bool _disposed;
    private ShellSection _shellSection;
    [CompilerGeneratedAttribute]
private int <CountOverride>k__BackingField;
    private IShellSectionController SectionController { get; }
    public int CountOverride { get; public set; }
    public int Count { get; }
    public ShellFragmentPagerAdapter(ShellSection shellSection, FragmentManager fragmentManager);
    private IShellSectionController get_SectionController();
    protected virtual void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
public int get_CountOverride();
    [CompilerGeneratedAttribute]
public void set_CountOverride(int value);
    public virtual int get_Count();
    public virtual Fragment GetItem(int position);
    public virtual long GetItemId(int position);
    public virtual int GetItemPosition(Object objectValue);
    public virtual ICharSequence GetPageTitleFormatted(int position);
    public virtual void RestoreState(IParcelable state, ClassLoader loader);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.ShellItemRenderer : ShellItemRendererBase {
    protected static int MoreTabId;
    private BottomNavigationView _bottomView;
    private FrameLayout _navigationArea;
    private View _outerLayout;
    private IShellBottomNavViewAppearanceTracker _appearanceTracker;
    private BottomNavigationViewTracker _bottomNavigationTracker;
    private BottomSheetDialog _bottomSheetDialog;
    private bool _disposed;
    public IShellItemController ShellItemController { get; }
    public ShellItemRenderer(IShellContext shellContext);
    private sealed virtual override bool Google.Android.Material.BottomNavigation.BottomNavigationView.IOnNavigationItemSelectedListener.OnNavigationItemSelected(IMenuItem item);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    public IShellItemController get_ShellItemController();
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    private void Destroy();
    protected virtual void Dispose(bool disposing);
    public virtual void OnDestroy();
    protected virtual void SetAppearance(ShellAppearance appearance);
    protected virtual bool ChangeSection(ShellSection shellSection);
    protected virtual Drawable CreateItemBackgroundDrawable();
    [ObsoleteAttribute("Use CreateMoreBottomSheet(Action<int, BottomSheetDialog> selectCallback)")]
protected virtual BottomSheetDialog CreateMoreBottomSheet(Action`2<ShellSection, BottomSheetDialog> selectCallback);
    protected virtual BottomSheetDialog CreateMoreBottomSheet(Action`2<int, BottomSheetDialog> selectCallback);
    protected virtual ViewGroup GetNavigationTarget();
    protected virtual void OnShellSectionChanged();
    protected virtual void OnDisplayedPageChanged(Page newPage, Page oldPage);
    protected virtual bool OnItemSelected(IMenuItem item);
    private void OnMoreItemSelected(int shellSectionIndex, BottomSheetDialog dialog);
    protected virtual void OnMoreItemSelected(ShellSection shellSection, BottomSheetDialog dialog);
    private List`1<ValueTuple`3<string, ImageSource, bool>> CreateTabList(ShellItem shellItem);
    protected virtual void OnMoreSheetDismissed(object sender, EventArgs e);
    protected virtual void OnShellItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnTabReselected(ShellSection shellSection);
    protected virtual void ResetAppearance();
    protected virtual void SetupMenu(IMenu menu, int maxBottomItems, ShellItem shellItem);
    protected virtual void UpdateShellSectionEnabled(ShellSection shellSection, IMenuItem menuItem);
    private void OnDisplayedElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetupMenu();
    private void UpdateTabBarVisibility();
}
public abstract class Xamarin.Forms.Platform.Android.ShellItemRendererBase : Fragment {
    [CompilerGeneratedAttribute]
private EventHandler Destroyed;
    private Dictionary`2<Element, IShellObservableFragment> _fragmentMap;
    private IShellObservableFragment _currentFragment;
    private ShellSection _shellSection;
    private Page _displayedPage;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IShellContext <ShellContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellItem <ShellItem>k__BackingField;
    private Fragment Xamarin.Forms.Platform.Android.IShellItemRenderer.Fragment { get; }
    private ShellItem Xamarin.Forms.Platform.Android.IShellItemRenderer.ShellItem { get; private set; }
    protected ShellSection ShellSection { get; protected set; }
    protected Page DisplayedPage { get; protected set; }
    protected IShellContext ShellContext { get; }
    protected ShellItem ShellItem { get; private set; }
    protected ShellItemRendererBase(IShellContext shellContext);
    private sealed virtual override Fragment Xamarin.Forms.Platform.Android.IShellItemRenderer.get_Fragment();
    private sealed virtual override ShellItem Xamarin.Forms.Platform.Android.IShellItemRenderer.get_ShellItem();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IShellItemRenderer.set_ShellItem(ShellItem value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Destroyed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Destroyed(EventHandler value);
    protected ShellSection get_ShellSection();
    protected void set_ShellSection(ShellSection value);
    protected Page get_DisplayedPage();
    protected void set_DisplayedPage(Page value);
    [CompilerGeneratedAttribute]
protected IShellContext get_ShellContext();
    [CompilerGeneratedAttribute]
protected ShellItem get_ShellItem();
    [CompilerGeneratedAttribute]
private void set_ShellItem(ShellItem value);
    protected virtual IShellObservableFragment CreateFragmentForPage(Page page);
    private void Destroy();
    public virtual void OnDestroy();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual ViewGroup GetNavigationTarget();
    protected virtual IShellObservableFragment GetOrCreateFragmentForTab(ShellSection shellSection);
    protected virtual Task`1<bool> HandleFragmentUpdate(ShellNavigationSource navSource, ShellSection shellSection, Page page, bool animated);
    protected virtual void HookEvents(ShellItem shellItem);
    protected virtual void HookChildEvents(ShellSection shellSection);
    protected virtual void OnShellSectionChanged();
    protected virtual void OnDisplayedPageChanged(Page newPage, Page oldPage);
    protected virtual void OnNavigationRequested(object sender, NavigationRequestedEventArgs e);
    protected virtual void OnShellItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnShellItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void SetupAnimation(ShellNavigationSource navSource, FragmentTransaction t, Page page);
    protected virtual void UnhookEvents(ShellItem shellItem);
    protected virtual void UnhookChildEvents(ShellSection shellSection);
    protected virtual void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateDisplayedPage(Page page);
    private void RemoveAllButCurrent(Fragment skip);
    private void RemoveAllPushedPages(ShellSection shellSection, bool keepCurrent);
    private void RemoveFragment(Fragment fragment);
}
internal class Xamarin.Forms.Platform.Android.ShellPageContainer : PageContainer {
    public ShellPageContainer(Context context, IVisualElementRenderer child, bool inFragment);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
}
public class Xamarin.Forms.Platform.Android.ShellRenderer : object {
    public static Color DefaultBackgroundColor;
    public static Color DefaultForegroundColor;
    public static Color DefaultTitleColor;
    public static Color DefaultUnselectedColor;
    private bool _disposed;
    private IShellFlyoutRenderer _flyoutRenderer;
    private FrameLayout _frameLayout;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> _elementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> _elementPropertyChanged;
    [CompilerGeneratedAttribute]
private Context <AndroidContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Shell <Element>k__BackingField;
    private IShellItemRenderer _currentRenderer;
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    private VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.Tracker { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    [EditorBrowsableAttribute("1")]
public ViewGroup ViewGroup { get; }
    private Context Xamarin.Forms.Platform.Android.IShellContext.AndroidContext { get; }
    private DrawerLayout Xamarin.Forms.Platform.Android.IShellContext.CurrentDrawerLayout { get; }
    private Shell Xamarin.Forms.Platform.Android.IShellContext.Shell { get; }
    protected Context AndroidContext { get; }
    protected Shell Element { get; private set; }
    private FragmentManager FragmentManager { get; }
    public ShellRenderer(Context context);
    private static ShellRenderer();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override VisualElementTracker Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Tracker();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    public sealed virtual ViewGroup get_ViewGroup();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.Android.IVisualElementRenderer.GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
    [EditorBrowsableAttribute("1")]
public sealed virtual void UpdateLayout();
    private sealed virtual override Context Xamarin.Forms.Platform.Android.IShellContext.get_AndroidContext();
    private sealed virtual override DrawerLayout Xamarin.Forms.Platform.Android.IShellContext.get_CurrentDrawerLayout();
    private sealed virtual override Shell Xamarin.Forms.Platform.Android.IShellContext.get_Shell();
    private sealed virtual override IShellObservableFragment Xamarin.Forms.Platform.Android.IShellContext.CreateFragmentForPage(Page page);
    private sealed virtual override IShellFlyoutContentRenderer Xamarin.Forms.Platform.Android.IShellContext.CreateShellFlyoutContentRenderer();
    private sealed virtual override IShellItemRenderer Xamarin.Forms.Platform.Android.IShellContext.CreateShellItemRenderer(ShellItem shellItem);
    private sealed virtual override IShellSectionRenderer Xamarin.Forms.Platform.Android.IShellContext.CreateShellSectionRenderer(ShellSection shellSection);
    private sealed virtual override IShellToolbarTracker Xamarin.Forms.Platform.Android.IShellContext.CreateTrackerForToolbar(Toolbar toolbar);
    private sealed virtual override IShellToolbarAppearanceTracker Xamarin.Forms.Platform.Android.IShellContext.CreateToolbarAppearanceTracker();
    private sealed virtual override IShellTabLayoutAppearanceTracker Xamarin.Forms.Platform.Android.IShellContext.CreateTabLayoutAppearanceTracker(ShellSection shellSection);
    private sealed virtual override IShellBottomNavViewAppearanceTracker Xamarin.Forms.Platform.Android.IShellContext.CreateBottomNavViewAppearanceTracker(ShellItem shellItem);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    [CompilerGeneratedAttribute]
private void add__elementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__elementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
protected Context get_AndroidContext();
    [CompilerGeneratedAttribute]
protected Shell get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(Shell value);
    private FragmentManager get_FragmentManager();
    protected virtual IShellObservableFragment CreateFragmentForPage(Page page);
    protected virtual IShellFlyoutContentRenderer CreateShellFlyoutContentRenderer();
    protected virtual IShellFlyoutRenderer CreateShellFlyoutRenderer();
    protected virtual IShellItemRenderer CreateShellItemRenderer(ShellItem shellItem);
    protected virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection shellSection);
    protected virtual IShellToolbarTracker CreateTrackerForToolbar(Toolbar toolbar);
    protected virtual IShellToolbarAppearanceTracker CreateToolbarAppearanceTracker();
    protected virtual IShellTabLayoutAppearanceTracker CreateTabLayoutAppearanceTracker(ShellSection shellSection);
    protected virtual IShellBottomNavViewAppearanceTracker CreateBottomNavViewAppearanceTracker(ShellItem shellItem);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnElementSet(Shell shell);
    protected virtual void SwitchFragment(FragmentManager manager, View targetView, ShellItem newItem, bool animate);
    private void OnElementSizeChanged(object sender, EventArgs e);
    private void UpdateStatusBarColor(ShellAppearance appearance);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.ShellSearchView : FrameLayout {
    [CompilerGeneratedAttribute]
private EventHandler SearchConfirmed;
    [CompilerGeneratedAttribute]
private SearchHandler <SearchHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowKeyboardOnAttached>k__BackingField;
    private IShellContext _shellContext;
    private CardView _cardView;
    private ImageButton _clearButton;
    private ImageButton _clearPlaceholderButton;
    private ImageButton _searchButton;
    private AppCompatAutoCompleteTextView _textBlock;
    private bool _disposed;
    private SearchHandlerAppearanceTracker _searchHandlerAppearanceTracker;
    public SearchHandler SearchHandler { get; public set; }
    public bool ShowKeyboardOnAttached { get; public set; }
    private View Xamarin.Forms.Platform.Android.IShellSearchView.View { get; }
    private ISearchHandlerController Controller { get; }
    public ShellSearchView(Context context, IShellContext shellContext);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SearchConfirmed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SearchConfirmed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual SearchHandler get_SearchHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SearchHandler(SearchHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowKeyboardOnAttached();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowKeyboardOnAttached(bool value);
    private sealed virtual override View Xamarin.Forms.Platform.Android.IShellSearchView.get_View();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IShellSearchView.LoadView();
    protected virtual SearchHandlerAppearanceTracker CreateSearchHandlerAppearanceTracker();
    private sealed virtual override void Android.Text.ITextWatcher.AfterTextChanged(IEditable s);
    private sealed virtual override void Android.Text.ITextWatcher.BeforeTextChanged(ICharSequence s, int start, int count, int after);
    private sealed virtual override void Android.Text.ITextWatcher.OnTextChanged(ICharSequence s, int start, int before, int count);
    private ISearchHandlerController get_Controller();
    private sealed virtual override bool Android.Widget.TextView.IOnEditorActionListener.OnEditorAction(TextView v, ImeAction actionId, KeyEvent e);
    protected virtual void Dispose(bool disposing);
    protected virtual void LoadView(SearchHandler searchHandler);
    protected virtual void OnSearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ShellSearchView/<OnAttachedToWindow>d__33")]
protected virtual void OnAttachedToWindow();
    protected virtual void OnClearButtonClicked(object sender, EventArgs e);
    protected virtual void OnClearPlaceholderButtonClicked(object sender, EventArgs e);
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    protected virtual void OnSearchButtonClicked(object sender, EventArgs e);
    private ImageButton CreateImageButton(Context context, BindableObject bindable, BindableProperty property, int defaultImage, int leftMargin, int rightMargin, string tag);
    private void OnTextBlockItemClicked(object sender, ItemClickEventArgs e);
    private void UpdateClearButtonState();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
}
public class Xamarin.Forms.Platform.Android.ShellSearchViewAdapter : BaseAdapter {
    public static string DoNotUpdateMarker;
    private SearchHandler _searchHandler;
    private IShellContext _shellContext;
    private DataTemplate _defaultTemplate;
    private Filter _filter;
    private IReadOnlyList`1<object> _emptyList;
    private bool _disposed;
    private IReadOnlyList`1<object> ListProxy { get; }
    public Filter Filter { get; }
    public int Count { get; }
    private DataTemplate DefaultTemplate { get; }
    private ISearchHandlerController SearchController { get; }
    public ShellSearchViewAdapter(SearchHandler searchHandler, IShellContext shellContext);
    private IReadOnlyList`1<object> get_ListProxy();
    protected virtual void Dispose(bool disposing);
    public sealed virtual Filter get_Filter();
    public virtual int get_Count();
    private DataTemplate get_DefaultTemplate();
    private ISearchHandlerController get_SearchController();
    public virtual Object GetItem(int position);
    public virtual long GetItemId(int position);
    public virtual View GetView(int position, View convertView, ViewGroup parent);
    protected virtual void OnSearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnListPropxyChanged(object sender, ListProxyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private object <get_DefaultTemplate>b__16_0();
}
public class Xamarin.Forms.Platform.Android.ShellSectionRenderer : Fragment {
    private IShellContext _shellContext;
    private View _rootView;
    private bool _selecting;
    private TabLayout _tablayout;
    private IShellTabLayoutAppearanceTracker _tabLayoutAppearanceTracker;
    private Toolbar _toolbar;
    private IShellToolbarAppearanceTracker _toolbarAppearanceTracker;
    private IShellToolbarTracker _toolbarTracker;
    private FormsViewPager _viewPager;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler AnimationFinished;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    private Fragment Xamarin.Forms.Platform.Android.IShellObservableFragment.Fragment { get; }
    public ShellSection ShellSection { get; public set; }
    private IShellSectionController SectionController { get; }
    public ShellSectionRenderer(IShellContext shellContext);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageScrolled(int position, float positionOffset, int positionOffsetPixels);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageScrollStateChanged(int state);
    private sealed virtual override void AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener.OnPageSelected(int position);
    private void UpdateCurrentItem(ShellContent content);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private sealed virtual override void Android.Views.View.IOnClickListener.OnClick(View v);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnimationFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnimationFinished(EventHandler value);
    private sealed virtual override Fragment Xamarin.Forms.Platform.Android.IShellObservableFragment.get_Fragment();
    [CompilerGeneratedAttribute]
public sealed virtual ShellSection get_ShellSection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShellSection(ShellSection value);
    private IShellSectionController get_SectionController();
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    private void OnTabLayoutChange(object sender, LayoutChangeEventArgs e);
    private void Destroy();
    public virtual void OnDestroy();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAnimationFinished(EventArgs e);
    protected virtual void OnItemsCollectionChagned(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnShellItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void ResetAppearance();
    protected virtual void SetAppearance(ShellAppearance appearance);
    private void HookEvents();
    private void UnhookEvents();
}
public class Xamarin.Forms.Platform.Android.ShellTabLayoutAppearanceTracker : object {
    private bool _disposed;
    private IShellContext _shellContext;
    public ShellTabLayoutAppearanceTracker(IShellContext shellContext);
    public virtual void ResetAppearance(TabLayout tabLayout);
    public virtual void SetAppearance(TabLayout tabLayout, ShellAppearance appearance);
    protected virtual void SetColors(TabLayout tabLayout, Color foreground, Color background, Color title, Color unselected);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.ShellToolbarAppearanceTracker : object {
    private bool _disposed;
    private IShellContext _shellContext;
    private int _titleTextColor;
    public ShellToolbarAppearanceTracker(IShellContext shellContext);
    public virtual void SetAppearance(Toolbar toolbar, IShellToolbarTracker toolbarTracker, ShellAppearance appearance);
    public virtual void ResetAppearance(Toolbar toolbar, IShellToolbarTracker toolbarTracker);
    protected virtual void SetColors(Toolbar toolbar, IShellToolbarTracker toolbarTracker, Color foreground, Color background, Color title);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.ShellToolbarTracker : Object {
    private bool _canNavigateBack;
    private bool _disposed;
    private DrawerLayout _drawerLayout;
    private ActionBarDrawerToggle _drawerToggle;
    private FlyoutBehavior _flyoutBehavior;
    private Page _page;
    private SearchHandler _searchHandler;
    private IShellSearchView _searchView;
    private ContainerView _titleViewContainer;
    private IShellContext _shellContext;
    private Color _tintColor;
    private Toolbar _toolbar;
    private AppBarLayout _appBar;
    private float _appBarElevation;
    private GenericGlobalLayoutListener _globalLayoutListener;
    private List`1<IMenuItem> _currentMenuItems;
    private List`1<ToolbarItem> _currentToolbarItems;
    private BackButtonBehavior _backButtonBehavior;
    public bool CanNavigateBack { get; public set; }
    public Page Page { get; public set; }
    public Color TintColor { get; public set; }
    protected SearchHandler SearchHandler { get; protected set; }
    public ShellToolbarTracker(IShellContext shellContext, Toolbar toolbar, DrawerLayout drawerLayout);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    public sealed virtual bool get_CanNavigateBack();
    public sealed virtual void set_CanNavigateBack(bool value);
    public sealed virtual Page get_Page();
    public sealed virtual void set_Page(Page value);
    public sealed virtual Color get_TintColor();
    public sealed virtual void set_TintColor(Color value);
    protected SearchHandler get_SearchHandler();
    protected void set_SearchHandler(SearchHandler value);
    private sealed virtual override void Android.Views.View.IOnClickListener.OnClick(View v);
    protected virtual void Dispose(bool disposing);
    protected virtual IShellSearchView GetSearchView(Context context);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ShellToolbarTracker/<OnNavigateBack>d__34")]
protected virtual void OnNavigateBack();
    protected virtual void OnPageChanged(Page oldPage, Page newPage);
    protected virtual void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnBackButtonBehaviorChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnPageToolbarItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnSearchConfirmed(object sender, EventArgs e);
    protected virtual void OnSearchHandlerChanged(SearchHandler oldValue, SearchHandler newValue);
    protected virtual void OnSearchHandlerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private ImageSource GetFlyoutIcon(BackButtonBehavior backButtonHandler, Page page);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.ShellToolbarTracker/<UpdateLeftBarButtonItem>d__44")]
protected virtual void UpdateLeftBarButtonItem(Context context, Toolbar toolbar, DrawerLayout drawerLayout, Page page);
    protected virtual Task UpdateDrawerArrow(Context context, Toolbar toolbar, DrawerLayout drawerLayout);
    protected virtual void UpdateToolbarIconAccessibilityText(Toolbar toolbar, Shell shell);
    protected virtual Task UpdateDrawerArrowFromBackButtonBehavior(Context context, Toolbar toolbar, DrawerLayout drawerLayout, BackButtonBehavior backButtonHandler);
    protected virtual Task UpdateDrawerArrowFromFlyoutIcon(Context context, ActionBarDrawerToggle actionBarDrawerToggle);
    protected virtual void UpdateMenuItemIcon(Context context, IMenuItem menuItem, ToolbarItem toolBarItem);
    protected virtual void UpdateNavBarVisible(Toolbar toolbar, Page page);
    private void UpdateNavBarHasShadow(Page page);
    protected virtual void UpdatePageTitle(Toolbar toolbar, Page page);
    protected virtual void UpdateTitleView(Context context, Toolbar toolbar, View titleView);
    protected virtual void UpdateToolbarItems(Toolbar toolbar, Page page);
    private void OnToolbarItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnSearchViewAttachedToWindow(object sender, ViewAttachedToWindowEventArgs e);
    private void UpdateLeftBarButtonItem();
    private void UpdateTitleView();
    private void UpdateToolbarItems();
    [CompilerGeneratedAttribute]
private void <.ctor>b__18_0();
}
internal class Xamarin.Forms.Platform.Android.SimpleViewHolder : ViewHolder {
    [CompilerGeneratedAttribute]
private View <View>k__BackingField;
    public View View { get; }
    public SimpleViewHolder(View itemView, View rootElement);
    [CompilerGeneratedAttribute]
public View get_View();
    public void Recycle(ItemsView itemsView);
    public static SimpleViewHolder FromText(string text, Context context, bool fill);
    public static SimpleViewHolder FromFormsView(View formsView, Context context, Func`1<int> width, Func`1<int> height, ItemsView container);
    public static SimpleViewHolder FromFormsView(View formsView, Context context);
}
internal class Xamarin.Forms.Platform.Android.SingleSnapHelper : PagerSnapHelper {
    protected int CurrentTargetPosition;
    private int _previousCount;
    protected static OrientationHelper CreateOrientationHelper(LayoutManager layoutManager);
    protected static bool IsLayoutReversed(LayoutManager layoutManager);
    public virtual View FindSnapView(LayoutManager layoutManager);
    public virtual int FindTargetSnapPosition(LayoutManager layoutManager, int velocityX, int velocityY);
    internal void ResetCurrentTargetPosition();
}
internal class Xamarin.Forms.Platform.Android.SizedItemContentView : ItemContentView {
    private Func`1<int> _width;
    private Func`1<int> _height;
    public SizedItemContentView(Context context, Func`1<int> width, Func`1<int> height);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
}
public class Xamarin.Forms.Platform.Android.SliderRenderer : ViewRenderer`2<Slider, SeekBar> {
    private double _max;
    private double _min;
    private ColorStateList defaultprogresstintlist;
    private ColorStateList defaultprogressbackgroundtintlist;
    private ColorFilter defaultthumbcolorfilter;
    private Drawable defaultthumb;
    private Mode defaultprogresstintmode;
    private Mode defaultprogressbackgroundtintmode;
    private double Value { get; private set; }
    private SeekBar NativeSeekbar { get; }
    public SliderRenderer(Context context);
    private double get_Value();
    private void set_Value(double value);
    private sealed virtual override void Android.Widget.SeekBar.IOnSeekBarChangeListener.OnProgressChanged(SeekBar seekBar, int progress, bool fromUser);
    private sealed virtual override void Android.Widget.SeekBar.IOnSeekBarChangeListener.OnStartTrackingTouch(SeekBar seekBar);
    private sealed virtual override void Android.Widget.SeekBar.IOnSeekBarChangeListener.OnStopTrackingTouch(SeekBar seekBar);
    protected virtual SeekBar CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    private SeekBar get_NativeSeekbar();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateSliderColors();
    private void UpdateMinimumTrackColor();
    private void UpdateMaximumTrackColor();
    private void UpdateThumbColor();
    private void UpdateThumbImage();
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    [CompilerGeneratedAttribute]
private void <UpdateThumbImage>b__25_0(Drawable drawable);
}
public class Xamarin.Forms.Platform.Android.SnapManager : object {
    private IItemsLayout _itemsLayout;
    private RecyclerView _recyclerView;
    private SnapHelper _snapHelper;
    public SnapManager(IItemsLayout itemsLayout, RecyclerView recyclerView);
    internal void UpdateSnapBehavior();
    protected virtual SnapHelper CreateSnapHelper(SnapPointsType snapPointsType, SnapPointsAlignment alignment);
    internal SnapHelper GetCurrentSnapHelper();
    private void DetachSnapHelper();
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Platform.Android.SpacingItemDecoration : ItemDecoration {
    private ItemsLayoutOrientation _orientation;
    private double _verticalSpacing;
    private double _adjustedVerticalSpacing;
    private double _horizontalSpacing;
    private double _adjustedHorizontalSpacing;
    public SpacingItemDecoration(IItemsLayout itemsLayout);
    public virtual void GetItemOffsets(Rect outRect, View view, RecyclerView parent, State state);
}
internal class Xamarin.Forms.Platform.Android.StartSingleSnapHelper : SingleSnapHelper {
    public virtual Int32[] CalculateDistanceToFinalSnap(LayoutManager layoutManager, View targetView);
}
internal class Xamarin.Forms.Platform.Android.StartSnapHelper : EdgeSnapHelper {
    public virtual Int32[] CalculateDistanceToFinalSnap(LayoutManager layoutManager, View targetView);
    public virtual View FindSnapView(LayoutManager layoutManager);
    protected virtual int VisiblePortion(View view, OrientationHelper orientationHelper, bool rtl);
}
public class Xamarin.Forms.Platform.Android.StepperRenderer : ViewRenderer`2<Stepper, LinearLayout> {
    private Button _downButton;
    private Button _upButton;
    private Stepper Xamarin.Forms.Platform.Android.IStepperRenderer.Element { get; }
    private Button Xamarin.Forms.Platform.Android.IStepperRenderer.UpButton { get; }
    private Button Xamarin.Forms.Platform.Android.IStepperRenderer.DownButton { get; }
    public StepperRenderer(Context context);
    protected virtual LinearLayout CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override Stepper Xamarin.Forms.Platform.Android.IStepperRenderer.get_Element();
    private sealed virtual override Button Xamarin.Forms.Platform.Android.IStepperRenderer.get_UpButton();
    private sealed virtual override Button Xamarin.Forms.Platform.Android.IStepperRenderer.get_DownButton();
    private sealed virtual override Button Xamarin.Forms.Platform.Android.IStepperRenderer.CreateButton();
}
public static class Xamarin.Forms.Platform.Android.StepperRendererManager : object {
    public static void CreateStepperButtons(IStepperRenderer renderer, TButton& downButton, TButton& upButton);
    public static void UpdateButtons(IStepperRenderer renderer, TButton downButton, TButton upButton, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Android.StreamImagesourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Android.StreamImagesourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<Bitmap> LoadImageAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken);
    public sealed virtual Task`1<IFormsAnimationDrawable> LoadImageAnimationAsync(ImageSource imagesource, Context context, CancellationToken cancelationToken, float scale);
}
public class Xamarin.Forms.Platform.Android.StructuredItemsViewAdapter`2 : ItemsViewAdapter`2<TItemsView, TItemsViewSource> {
    private Nullable`1<Size> _size;
    protected internal StructuredItemsViewAdapter`2(TItemsView itemsView, Func`3<View, Context, ItemContentView> createItemContentView);
    protected virtual void ItemsViewPropertyChanged(object sender, PropertyChangedEventArgs property);
    public virtual int GetItemViewType(int position);
    public virtual ViewHolder OnCreateViewHolder(ViewGroup parent, int viewType);
    public virtual void OnBindViewHolder(ViewHolder holder, int position);
    protected virtual void BindTemplatedItemViewHolder(TemplatedItemViewHolder templatedItemViewHolder, object context);
    private void UpdateHasHeader();
    private void UpdateHasFooter();
    private bool IsHeader(int position);
    private bool IsFooter(int position);
    protected ViewHolder CreateHeaderFooterViewHolder(object content, DataTemplate template, Context context);
    private void SetStaticSize(Size size);
}
public class Xamarin.Forms.Platform.Android.StructuredItemsViewRenderer`3 : ItemsViewRenderer`3<TItemsView, TAdapter, TItemsViewSource> {
    private StructuredItemsView _itemsView;
    public StructuredItemsViewRenderer`3(Context context);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual TAdapter CreateAdapter();
    protected virtual void SetUpNewElement(TItemsView newElement);
    protected virtual IItemsLayout GetItemsLayout();
}
internal class Xamarin.Forms.Platform.Android.SwipeGestureHandler : object {
    private Func`2<double, double> _pixelTranslation;
    [CompilerGeneratedAttribute]
private Func`1<View> <GetView>k__BackingField;
    private Func`1<View> GetView { get; }
    public SwipeGestureHandler(Func`1<View> getView, Func`2<double, double> pixelTranslation);
    [CompilerGeneratedAttribute]
private Func`1<View> get_GetView();
    public bool OnSwipe(float x, float y);
    public bool OnSwipeComplete();
    public bool HasAnyGestures();
}
public class Xamarin.Forms.Platform.Android.SwipeViewRenderer : ViewRenderer`2<SwipeView, View> {
    private static float OpenSwipeThresholdPercentage;
    private static int SwipeThreshold;
    private static int SwipeItemWidth;
    private static long SwipeAnimationDuration;
    private static float SwipeMinimumDelta;
    private Dictionary`2<ISwipeItem, object> _swipeItems;
    private Context _context;
    private View _scrollParent;
    private View _contentView;
    private LinearLayoutCompat _actionView;
    private SwipeTransitionMode _swipeTransitionMode;
    private float _downX;
    private float _downY;
    private float _density;
    private bool _isTouchDown;
    private bool _isSwiping;
    private PointF _initialPoint;
    private Nullable`1<SwipeDirection> _swipeDirection;
    private float _swipeOffset;
    private float _swipeThreshold;
    private double _previousScrollX;
    private double _previousScrollY;
    private bool _isSwipeEnabled;
    private bool _isResettingSwipe;
    private bool _isOpen;
    private bool _isDisposed;
    public SwipeViewRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SwipeView> e);
    protected virtual View CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual Size MinimumSize();
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    protected virtual void OnAttachedToWindow();
    protected virtual void Dispose(bool disposing);
    public virtual bool OnTouchEvent(MotionEvent e);
    private bool ShouldInterceptTouch(MotionEvent e);
    public virtual bool OnInterceptTouchEvent(MotionEvent e);
    public virtual bool DispatchTouchEvent(MotionEvent e);
    private void PropagateParentTouch();
    private void UpdateContent();
    private View CreateEmptyContent();
    private View CreateContent();
    private SwipeItems GetSwipeItemsByDirection();
    private SwipeItems GetSwipeItemsByDirection(SwipeDirection swipeDirection);
    private bool HasSwipeItems();
    private bool IsHorizontalSwipe();
    private bool IsValidSwipeItems(SwipeItems swipeItems);
    private bool ProcessSwipingInteractions(MotionEvent e);
    private bool HandleTouchInteractions(GestureStatus status, PointF point);
    private bool ProcessTouchDown(PointF point);
    private bool ProcessTouchMove(PointF point);
    private bool ProcessTouchUp();
    private bool CanProcessTouchSwipeItems(PointF point);
    private bool TouchInsideContent(PointF point);
    private bool TouchInsideContent(double x1, double y1, double x2, double y2, double x, double y);
    private bool ValidateSwipeDirection();
    private float GetSwipeOffset(PointF initialPoint, PointF endPoint);
    private float GetSwipeContentOffset();
    private void UpdateSwipeItems();
    private void LayoutSwipeItems(List`1<View> childs);
    private void OnSwipeItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateIsVisibleSwipeItem(ISwipeItem item);
    private List`1<View> GetNativeSwipeItems();
    private View CreateSwipeItem(SwipeItem formsSwipeItem);
    private View CreateSwipeItemView(SwipeItemView swipeItemView);
    private void UpdateSwipeItemViewLayout(SwipeItemView swipeItemView);
    private void UpdateIsSwipeEnabled();
    private void UpdateSwipeTransitionMode();
    private Color GetSwipeItemColor(Color backgroundColor);
    private void UnsubscribeSwipeItemEvents();
    private void DisposeSwipeItems();
    private void Swipe();
    private void ResetSwipeToInitialPosition();
    private void ResetSwipe(bool animated);
    private void SwipeToThreshold(bool animated);
    private float ValidateSwipeOffset(float offset);
    private void ValidateSwipeThreshold();
    private float GetSwipeThreshold();
    private float GetSwipeThreshold(SwipeItems swipeItems);
    private float CalculateSwipeThreshold();
    private float ValidateSwipeThreshold(float swipeThreshold);
    private Size GetSwipeItemSize(ISwipeItem swipeItem);
    private float GetSwipeItemHeight();
    private void ProcessTouchSwipeItems(PointF point);
    private void ExecuteSwipeItem(ISwipeItem item);
    private void OnOpenRequested(object sender, OpenSwipeEventArgs e);
    private void ProgrammaticallyOpenSwipeItem(OpenSwipeItem openSwipeItem);
    private void UpdateIsOpen(bool isOpen);
    private void OnCloseRequested(object sender, EventArgs e);
    private void OnParentScrolled(object sender, ScrolledEventArgs e);
    private void OnParentScrolled(object sender, ItemsViewScrolledEventArgs e);
    private void RaiseSwipeStarted();
    private void RaiseSwipeChanging();
    private void RaiseSwipeEnded();
    [CompilerGeneratedAttribute]
private void <ResetSwipe>b__75_0();
    [CompilerGeneratedAttribute]
private void <ResetSwipe>b__75_1();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_0();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_1();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_2();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_3();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_4();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_5();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_6();
    [CompilerGeneratedAttribute]
private void <SwipeToThreshold>b__76_7();
}
public class Xamarin.Forms.Platform.Android.SwitchCellRenderer : CellRenderer {
    private SwitchCellView _view;
    private Drawable _defaultTrackDrawable;
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
    protected virtual void OnCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateChecked();
    private void UpdateIsEnabled(SwitchCellView cell, SwitchCell switchCell);
    private void UpdateFlowDirection();
    private void UpdateHeight();
    private void UpdateText();
    private void UpdateOnColor(SwitchCellView cell, SwitchCell switchCell);
}
public class Xamarin.Forms.Platform.Android.SwitchCellView : BaseCellView {
    [CompilerGeneratedAttribute]
private SwitchCell <Cell>k__BackingField;
    public SwitchCell Cell { get; public set; }
    public SwitchCellView(Context context, Cell cell);
    [CompilerGeneratedAttribute]
public SwitchCell get_Cell();
    [CompilerGeneratedAttribute]
public void set_Cell(SwitchCell value);
    public sealed virtual void OnCheckedChanged(CompoundButton buttonView, bool isChecked);
}
public class Xamarin.Forms.Platform.Android.SwitchRenderer : ViewRenderer`2<Switch, Switch> {
    private Drawable _defaultTrackDrawable;
    private bool _changedThumbColor;
    public SwitchRenderer(Context context);
    private sealed virtual override void Android.Widget.CompoundButton.IOnCheckedChangeListener.OnCheckedChanged(CompoundButton buttonView, bool isChecked);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual void Dispose(bool disposing);
    protected virtual Switch CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateOnColor();
    private void UpdateThumbColor();
    private void HandleToggled(object sender, EventArgs e);
    private void UpdateEnabled();
}
public class Xamarin.Forms.Platform.Android.TabbedRenderer : VisualElementRenderer`1<TabbedPage> {
    private IPageController PageController { get; }
    public TabbedRenderer(Context context);
    private IPageController get_PageController();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TabbedPage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SwitchContent(Page view);
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.Platform.Android.TableViewModelRenderer : CellAdapter {
    private TableView _view;
    protected Context Context;
    private Cell _restoreFocus;
    private Cell[] _cellCache;
    private Boolean[] _isHeaderCache;
    private Boolean[] _nextIsHeaderCache;
    private ITableViewController Controller { get; }
    private Cell[] CellCache { get; }
    private Boolean[] IsHeaderCache { get; }
    private Boolean[] NextIsHeaderCache { get; }
    public int Count { get; }
    public object Item { get; }
    public int ViewTypeCount { get; }
    public TableViewModelRenderer(Context context, ListView listView, TableView view);
    private ITableViewController get_Controller();
    private Cell[] get_CellCache();
    private Boolean[] get_IsHeaderCache();
    private Boolean[] get_NextIsHeaderCache();
    public virtual int get_Count();
    public virtual object get_Item(int position);
    public virtual int get_ViewTypeCount();
    public virtual bool AreAllItemsEnabled();
    public virtual long GetItemId(int position);
    public virtual View GetView(int position, View convertView, ViewGroup parent);
    public virtual bool IsEnabled(int position);
    protected virtual Cell GetCellForPosition(int position);
    protected virtual void HandleItemClick(AdapterView parent, View nview, int position, long id);
    private Cell GetCellForPosition(int position, Boolean& isHeader, Boolean& nextIsHeader);
    private void FillCache();
    private void InvalidateCellCache();
    private void OnModelChanged(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.Android.TableViewRenderer : ViewRenderer`2<TableView, ListView> {
    private TableViewModelRenderer _adapter;
    private bool _disposed;
    public TableViewRenderer(Context context);
    protected virtual TableViewModelRenderer GetModelRenderer(ListView listView, TableView view);
    protected virtual Size MinimumSize();
    protected virtual ListView CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    protected virtual void OnAttachedToWindow();
    protected virtual void Dispose(bool disposing);
}
internal class Xamarin.Forms.Platform.Android.TapGestureHandler : object {
    [CompilerGeneratedAttribute]
private Func`1<IList`1<GestureElement>> <GetChildElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<View> <GetView>k__BackingField;
    private Func`1<IList`1<GestureElement>> GetChildElements { get; }
    private Func`1<View> GetView { get; }
    public TapGestureHandler(Func`1<View> getView, Func`1<IList`1<GestureElement>> getChildElements);
    [CompilerGeneratedAttribute]
private Func`1<IList`1<GestureElement>> get_GetChildElements();
    [CompilerGeneratedAttribute]
private Func`1<View> get_GetView();
    public void OnSingleClick();
    public bool OnTap(int count, Point point);
    public bool HasAnyGestures();
    public IEnumerable`1<TapGestureRecognizer> TapGestureRecognizers(int count);
}
public class Xamarin.Forms.Platform.Android.TemplatedItemViewHolder : SelectableViewHolder {
    private ItemContentView _itemContentView;
    private DataTemplate _template;
    private DataTemplate _selectedTemplate;
    [CompilerGeneratedAttribute]
private View <View>k__BackingField;
    public View View { get; private set; }
    public TemplatedItemViewHolder(ItemContentView itemContentView, DataTemplate template, bool isSelectionEnabled);
    [CompilerGeneratedAttribute]
public View get_View();
    [CompilerGeneratedAttribute]
private void set_View(View value);
    protected virtual void OnSelectedChanged();
    public void Recycle(ItemsView itemsView);
    public void Bind(object itemBindingContext, ItemsView itemsView, Action`1<Size> reportMeasure, Nullable`1<Size> size);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.TextAlignmentExtensions : object {
    [ExtensionAttribute]
internal static void UpdateHorizontalAlignment(EditText view, TextAlignment alignment, bool hasRtlSupport, GravityFlags orMask);
    [ExtensionAttribute]
internal static void UpdateVerticalAlignment(EditText view, TextAlignment alignment, GravityFlags orMask);
    [ExtensionAttribute]
internal static void UpdateTextAlignment(EditText view, TextAlignment horizontal, TextAlignment vertical);
}
public class Xamarin.Forms.Platform.Android.TextCellRenderer : CellRenderer {
    [CompilerGeneratedAttribute]
private TextCellView <View>k__BackingField;
    internal TextCellView View { get; private set; }
    [CompilerGeneratedAttribute]
internal TextCellView get_View();
    [CompilerGeneratedAttribute]
private void set_View(TextCellView value);
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
    protected virtual void OnCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateAutomationId();
    private void UpdateDetailText();
    private void UpdateHeight();
    private void UpdateIsEnabled();
    private void UpdateFlowDirection();
    private void UpdateMainText();
}
internal class Xamarin.Forms.Platform.Android.TextColorSwitcher : object {
    private static Int32[][] s_colorStates;
    private ColorStateList _defaultTextColors;
    private bool _useLegacyColorManagement;
    private Color _currentTextColor;
    public TextColorSwitcher(ColorStateList textColors, bool useLegacyColorManagement);
    private static TextColorSwitcher();
    public void UpdateTextColor(TextView control, Color color, Action`1<ColorStateList> setColor);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.TextViewExtensions : object {
    [ExtensionAttribute]
public static void SetMaxLines(TextView textView, Label label);
    [ExtensionAttribute]
private static void SetMaxLines(TextView textView, Label label, int lines);
    [ExtensionAttribute]
public static void SetLineBreakMode(TextView textView, Label label);
    [ExtensionAttribute]
public static void RecalculateSpanPositions(TextView textView, Label element, SpannableString spannableString, SizeRequest finalSize);
}
internal class Xamarin.Forms.Platform.Android.TextViewHolder : SelectableViewHolder {
    [CompilerGeneratedAttribute]
private TextView <TextView>k__BackingField;
    public TextView TextView { get; }
    public TextViewHolder(TextView itemView, bool isSelectionEnabled);
    [CompilerGeneratedAttribute]
public TextView get_TextView();
}
public class Xamarin.Forms.Platform.Android.TimePickerRenderer : TimePickerRendererBase`1<EditText> {
    private TextColorSwitcher _textColorSwitcher;
    protected EditText EditText { get; }
    public TimePickerRenderer(Context context);
    protected virtual EditText CreateNativeControl();
    protected virtual EditText get_EditText();
    protected virtual void UpdateTextColor();
}
public abstract class Xamarin.Forms.Platform.Android.TimePickerRendererBase`1 : ViewRenderer`2<TimePicker, TControl> {
    private AlertDialog _dialog;
    private bool _disposed;
    private bool Is24HourView { get; }
    protected EditText EditText { get; }
    private IElementController ElementController { get; }
    public TimePickerRendererBase`1(Context context);
    private bool get_Is24HourView();
    protected abstract virtual EditText get_EditText();
    private IElementController get_ElementController();
    private sealed virtual override void Android.App.TimePickerDialog.IOnTimeSetListener.OnTimeSet(TimePicker view, int hourOfDay, int minute);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    protected virtual TimePickerDialog CreateTimePickerDialog(int hours, int minutes);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IPickerRenderer.OnClick();
    private void OnCancelButtonClicked(object sender, EventArgs e);
    private void SetTime(TimeSpan time);
    private void UpdateFont();
    private void UpdateCharacterSpacing();
    protected abstract virtual void UpdateTextColor();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.ToolbarExtensions : object {
    private static int DefaultDisabledToolbarAlpha;
    [ExtensionAttribute]
public static void DisposeMenuItems(Toolbar toolbar, IEnumerable`1<ToolbarItem> toolbarItems, PropertyChangedEventHandler toolbarItemChanged);
    [ExtensionAttribute]
public static void UpdateMenuItems(Toolbar toolbar, IEnumerable`1<ToolbarItem> sortedToolbarItems, Context context, Nullable`1<Color> tintColor, PropertyChangedEventHandler toolbarItemChanged, List`1<IMenuItem> menuItemsCreated, List`1<ToolbarItem> toolbarItemsCreated, Action`3<Context, IMenuItem, ToolbarItem> updateMenuItemIcon);
    internal static void UpdateMenuItem(Toolbar toolbar, ToolbarItem item, Nullable`1<int> menuItemIndex, Context context, Nullable`1<Color> tintColor, PropertyChangedEventHandler toolbarItemChanged, List`1<IMenuItem> menuItemsCreated, List`1<ToolbarItem> toolbarItemsCreated, Action`3<Context, IMenuItem, ToolbarItem> updateMenuItemIcon);
    internal static void UpdateMenuItemIcon(Context context, IMenuItem menuItem, ToolbarItem toolBarItem, Nullable`1<Color> tintColor);
    [ExtensionAttribute]
public static void OnToolbarItemPropertyChanged(Toolbar toolbar, PropertyChangedEventArgs e, ToolbarItem toolbarItem, ICollection`1<ToolbarItem> toolbarItems, Context context, Nullable`1<Color> tintColor, PropertyChangedEventHandler toolbarItemChanged, List`1<IMenuItem> currentMenuItems, List`1<ToolbarItem> currentToolbarItems, Action`3<Context, IMenuItem, ToolbarItem> updateMenuItemIcon);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.TransformExtensions : object {
    [ExtensionAttribute]
public static Matrix ToAndroid(Transform transform, float density);
}
internal class Xamarin.Forms.Platform.Android.UngroupedItemsSource : object {
    private IItemsViewSource _source;
    public int Count { get; }
    public bool HasHeader { get; public set; }
    public bool HasFooter { get; public set; }
    public UngroupedItemsSource(IItemsViewSource source);
    public sealed virtual int get_Count();
    public sealed virtual bool get_HasHeader();
    public sealed virtual void set_HasHeader(bool value);
    public sealed virtual bool get_HasFooter();
    public sealed virtual void set_HasFooter(bool value);
    public sealed virtual void Dispose();
    public sealed virtual object GetItem(int position);
    public sealed virtual int GetPosition(object item);
    public sealed virtual bool IsFooter(int position);
    public sealed virtual bool IsGroupFooter(int position);
    public sealed virtual bool IsGroupHeader(int position);
    public sealed virtual bool IsHeader(int position);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.ViewCellExtensions : object {
    [ExtensionAttribute]
public static bool IsInViewCell(VisualElement element);
}
public class Xamarin.Forms.Platform.Android.ViewCellRenderer : CellRenderer {
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.ViewExtensions : object {
    private static int s_apiLevel;
    private static ViewExtensions();
    [ExtensionAttribute]
public static void RemoveFromParent(View view);
    [ExtensionAttribute]
public static void SetBackground(View view, Drawable drawable);
    [ExtensionAttribute]
public static void SetWindowBackground(View view);
    [ExtensionAttribute]
public static void EnsureId(View view);
    [ExtensionAttribute]
public static bool GetClipToOutline(View view);
    [ExtensionAttribute]
public static void SetClipToOutline(View view, bool value);
    [ExtensionAttribute]
public static void SetClipToOutline(View view, bool value, VisualElement element);
    [ExtensionAttribute]
public static bool SetElevation(View view, float value);
    [ExtensionAttribute]
internal static void MaybeRequestLayout(View view);
    [ExtensionAttribute]
internal static T GetParentOfType(IViewParent view);
    [ExtensionAttribute]
internal static T GetParentOfType(View view);
    [ExtensionAttribute]
internal static T FindParentOfType(VisualElement element);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.Android.ViewExtensions/<GetParentsPath>d__14")]
[ExtensionAttribute]
internal static IEnumerable`1<Element> GetParentsPath(VisualElement self);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Android.ViewGroupExtensions : object {
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.Android.ViewGroupExtensions/<GetChildrenOfType>d__0`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> GetChildrenOfType(ViewGroup self);
}
public class Xamarin.Forms.Platform.Android.ViewPool : object {
    private Dictionary`2<Type, Stack`1<View>> _freeViews;
    private ViewGroup _viewGroup;
    private bool _disposed;
    public ViewPool(ViewGroup viewGroup);
    public sealed virtual void Dispose();
    public void ClearChildren();
    public TView GetFreeView();
    private void ClearChildren(ViewGroup group);
}
public abstract class Xamarin.Forms.Platform.Android.ViewRenderer : ViewRenderer`2<View, View> {
    protected ViewRenderer(Context context);
}
public abstract class Xamarin.Forms.Platform.Android.ViewRenderer`2 : VisualElementRenderer`1<TView> {
    private ViewGroup _container;
    private string _defaultContentDescription;
    private Nullable`1<bool> _defaultFocusable;
    private Nullable`1<ImportantForAccessibility> _defaultImportantForAccessibility;
    private string _defaultHint;
    private bool _disposed;
    private EventHandler`1<FocusRequestArgs> _focusChangeHandler;
    private SoftInput _startingInputMode;
    [CompilerGeneratedAttribute]
private TNativeView <Control>k__BackingField;
    public TNativeView Control { get; private set; }
    protected View ControlUsedForAutomation { get; }
    private View Xamarin.Forms.Platform.Android.ITabStop.TabStop { get; }
    protected ViewRenderer`2(Context context);
    protected virtual TNativeView CreateNativeControl();
    [CompilerGeneratedAttribute]
public TNativeView get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(TNativeView value);
    protected virtual View get_ControlUsedForAutomation();
    private sealed virtual override View Xamarin.Forms.Platform.Android.ITabStop.get_TabStop();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IViewRenderer.MeasureExactly();
    internal static void MeasureExactly(View control, VisualElement element, Context context);
    private sealed virtual override void Android.Views.View.IOnFocusChangeListener.OnFocusChange(View v, bool hasFocus);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAutomationId(string id);
    protected virtual void SetContentDescription();
    protected virtual void SetFocusable();
    protected void SetNativeControl(TNativeView control);
    protected virtual void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    internal virtual void OnNativeFocusChanged(bool hasFocus);
    internal virtual void SendVisualElementInitialized(VisualElement element, View nativeView);
    internal void SetNativeControl(TNativeView control, ViewGroup container);
    private void SetLabeledBy();
    private void UpdateIsEnabled();
    private void UpdateFlowDirection();
    [CompilerGeneratedAttribute]
private void <OnFocusChangeRequested>b__32_0();
}
public class Xamarin.Forms.Platform.Android.VisualElementChangedEventArgs : ElementChangedEventArgs`1<VisualElement> {
    public VisualElementChangedEventArgs(VisualElement oldElement, VisualElement newElement);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Android.VisualElementExtensions : object {
    [ExtensionAttribute]
public static IVisualElementRenderer GetRenderer(VisualElement self);
    [ExtensionAttribute]
internal static bool UseLegacyColorManagement(T element);
    [ExtensionAttribute]
internal static bool IsAttachedToRoot(VisualElement Element);
}
public class Xamarin.Forms.Platform.Android.VisualElementPackager : object {
    private EventHandler`1<ElementEventArgs> _childAddedHandler;
    private EventHandler`1<ElementEventArgs> _childRemovedHandler;
    private EventHandler _childReorderedHandler;
    private List`1<IVisualElementRenderer> _childViews;
    private Dictionary`2<BindableObject, VisualElementPackager> _childPackagers;
    private bool _disposed;
    private IVisualElementRenderer _renderer;
    private VisualElement _element;
    private IElementController ElementController { get; }
    public VisualElementPackager(IVisualElementRenderer renderer, VisualElement element);
    private IElementController get_ElementController();
    private void OnInitialLayoutChange(object sender, LayoutChangeEventArgs e);
    private void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Load();
    private void AddChild(VisualElement view, IVisualElementRenderer oldRenderer, RendererPool pool, bool sameChildren);
    private void EnsureChildOrder();
    private void EnsureChildOrder(bool onlyUpdateElevations);
    private void OnChildAdded(object sender, ElementEventArgs e);
    private void OnChildRemoved(object sender, ElementEventArgs e);
    private void OnChildrenReordered(object sender, EventArgs e);
    private void RemoveChild(VisualElement view);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
}
public abstract class Xamarin.Forms.Platform.Android.VisualElementRenderer`1 : FormsViewGroup {
    private List`1<EventHandler`1<VisualElementChangedEventArgs>> _elementChangedHandlers;
    private VisualElementRendererFlags _flags;
    private string _defaultContentDescription;
    private Nullable`1<bool> _defaultFocusable;
    private Nullable`1<ImportantForAccessibility> _defaultImportantForAccessibility;
    private string _defaultHint;
    private bool _cascadeInputTransparent;
    private VisualElementPackager _packager;
    private PropertyChangedEventHandler _propertyChangeHandler;
    private GestureManager _gestureManager;
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElementTracker <Tracker>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TabStop>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementChangedEventArgs`1<TElement>> ElementChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> ElementPropertyChanged;
    public TElement Element { get; private set; }
    protected bool AutoPackage { get; protected set; }
    protected bool AutoTrack { get; protected set; }
    private View View { get; }
    private VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.Element { get; }
    public VisualElementTracker Tracker { get; private set; }
    protected int TabIndex { get; protected set; }
    protected bool TabStop { get; protected set; }
    public ViewGroup ViewGroup { get; }
    private View Xamarin.Forms.Platform.Android.IVisualElementRenderer.View { get; }
    protected bool ManageNativeControlLifetime { get; }
    private bool Xamarin.Forms.Platform.Android.IDisposedState.IsDisposed { get; }
    protected VisualElementRenderer`1(Context context);
    public virtual bool OnTouchEvent(MotionEvent e);
    public virtual bool OnInterceptTouchEvent(MotionEvent ev);
    public virtual bool DispatchTouchEvent(MotionEvent e);
    [CompilerGeneratedAttribute]
public sealed virtual TElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TElement value);
    protected bool get_AutoPackage();
    protected void set_AutoPackage(bool value);
    protected bool get_AutoTrack();
    protected void set_AutoTrack(bool value);
    private View get_View();
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_Element();
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetElement(VisualElement element);
    [CompilerGeneratedAttribute]
public sealed virtual VisualElementTracker get_Tracker();
    [CompilerGeneratedAttribute]
private void set_Tracker(VisualElementTracker value);
    public sealed virtual void UpdateLayout();
    [CompilerGeneratedAttribute]
protected int get_TabIndex();
    [CompilerGeneratedAttribute]
protected void set_TabIndex(int value);
    [CompilerGeneratedAttribute]
protected bool get_TabStop();
    [CompilerGeneratedAttribute]
protected void set_TabStop(bool value);
    protected void UpdateTabStop();
    protected void UpdateTabIndex();
    private bool CheckCustomNextFocus(View focused, FocusSearchDirection direction);
    public virtual View FocusSearch(View focused, FocusSearchDirection direction);
    public sealed virtual ViewGroup get_ViewGroup();
    private sealed virtual override View Xamarin.Forms.Platform.Android.IVisualElementRenderer.get_View();
    [CompilerGeneratedAttribute]
public void add_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
public void remove_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    public void SetElement(TElement element);
    protected virtual bool get_ManageNativeControlLifetime();
    private bool CheckFlagsForDisposed();
    private sealed virtual override bool Xamarin.Forms.Platform.Android.IDisposedState.get_IsDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnConfigurationChanged(Configuration newConfig);
    protected virtual Size MinimumSize();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    public virtual void Draw(Canvas canvas);
    private static void UpdateLayout(IEnumerable`1<Element> children);
    private void UpdateParentPageTraversalOrder();
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAutomationId(string id);
    protected virtual void SetContentDescription();
    protected virtual void SetFocusable();
    private void UpdateInputTransparent();
    private void UpdateInputTransparentInherited();
    protected void SetPackager(VisualElementPackager packager);
    protected void SetTracker(VisualElementTracker tracker);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    internal virtual void SendVisualElementInitialized(VisualElement element, View nativeView);
    private sealed virtual override void Xamarin.Forms.Platform.Android.IVisualElementRenderer.SetLabelFor(Nullable`1<int> id);
}
[FlagsAttribute]
public enum Xamarin.Forms.Platform.Android.VisualElementRendererFlags : Enum {
    public int value__;
    public static VisualElementRendererFlags Disposed;
    public static VisualElementRendererFlags AutoTrack;
    public static VisualElementRendererFlags AutoPackage;
}
public class Xamarin.Forms.Platform.Android.VisualElementTracker : object {
    private EventHandler`1<EventArg`1<VisualElement>> _batchCommittedHandler;
    private IList`1<string> _batchedProperties;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private Context _context;
    private bool _disposed;
    private VisualElement _element;
    private bool _initialUpdateNeeded;
    private bool _layoutNeeded;
    private IVisualElementRenderer _renderer;
    private AttachTracker _attachTracker;
    public VisualElementTracker(IVisualElementRenderer renderer);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void UpdateLayout();
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void HandleRedrawNeeded(object sender, EventArg`1<VisualElement> e);
    private void HandleViewAttachedToWindow();
    private void RendererOnElementChanged(object sender, VisualElementChangedEventArgs args);
    private void SetElement(VisualElement oldElement, VisualElement newElement);
    private void UpdateAnchorX();
    private void UpdateAnchorY();
    private void UpdateClipToBounds();
    private void UpdateClip();
    private void UpdateIsVisible();
    private void UpdateNativeView(object sender, EventArgs e);
    private void UpdateOpacity();
    private void UpdateRotation();
    private void UpdateRotationX();
    private void UpdateRotationY();
    private void UpdateScale();
    private void UpdateTranslationX();
    private void UpdateTranslationY();
    private void UpdateIsEnabled();
}
public class Xamarin.Forms.Platform.Android.WebViewRenderer : ViewRenderer`2<WebView, WebView> {
    public static string AssetBaseUrl;
    private WebNavigationEvent _eventState;
    private WebViewClient _webViewClient;
    private FormsWebChromeClient _webChromeClient;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private bool <IgnoreSourceChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlCanceled>k__BackingField;
    private HashSet`1<string> _loadedCookies;
    protected internal IWebViewController ElementController { get; }
    protected internal bool IgnoreSourceChanges { get; protected internal set; }
    protected internal string UrlCanceled { get; protected internal set; }
    public WebViewRenderer(Context context);
    protected internal IWebViewController get_ElementController();
    [CompilerGeneratedAttribute]
protected internal bool get_IgnoreSourceChanges();
    [CompilerGeneratedAttribute]
protected internal void set_IgnoreSourceChanges(bool value);
    [CompilerGeneratedAttribute]
protected internal string get_UrlCanceled();
    [CompilerGeneratedAttribute]
protected internal void set_UrlCanceled(string value);
    public sealed virtual void LoadHtml(string html, string baseUrl);
    public sealed virtual void LoadUrl(string url);
    private void LoadUrl(string url, bool fireNavigatingCanceled);
    protected internal bool SendNavigatingCanceled(string url);
    protected virtual void Dispose(bool disposing);
    protected virtual WebViewClient GetWebViewClient();
    protected virtual FormsWebChromeClient GetFormsWebChromeClient();
    protected virtual Size MinimumSize();
    protected virtual WebView CreateNativeControl();
    internal WebNavigationEvent GetCurrentWebNavigationEvent();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<WebView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private Uri CreateUriForCookies(string url);
    private CookieCollection GetCookiesFromNativeStore(string url);
    private void InitialCookiePreloadIfNecessary(string url);
    internal void SyncNativeCookiesToElement(string url);
    private void SyncNativeCookies(string url);
    private void Load();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
    protected internal void UpdateCanGoBackForward();
    private void UpdateMixedContentMode();
    private void UpdateEnableZoomControls();
    private void UpdateDisplayZoomControls();
}
internal class Xamarin.Forms.StreamWrapper : Stream {
    private Stream _wrapped;
    private IDisposable _additionalDisposable;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamWrapper(Stream wrapped);
    public StreamWrapper(Stream wrapped, IDisposable additionalDisposable);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.StreamWrapper/<GetStreamAsync>d__24")]
public static Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken, HttpClient client);
}
public class Xamarin.Forms.ViewInitializedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private View <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <View>k__BackingField;
    public View NativeView { get; internal set; }
    public VisualElement View { get; internal set; }
    [CompilerGeneratedAttribute]
public View get_NativeView();
    [CompilerGeneratedAttribute]
internal void set_NativeView(View value);
    [CompilerGeneratedAttribute]
public VisualElement get_View();
    [CompilerGeneratedAttribute]
internal void set_View(VisualElement value);
}
