[DefaultMemberAttribute("Item")]
internal class Cadenza.Collections.OrderedDictionary`2 : object {
    private Dictionary`2<TKey, TValue> _dict;
    private List`1<TKey> _keyOrder;
    private ICollection`1<KeyValuePair`2<TKey, TValue>> _kvpCollection;
    private ReadOnlyCollection`1<TKey> _roKeys;
    private ReadOnlyValueCollection<TKey, TValue> _roValues;
    public IEqualityComparer`1<TKey> Comparer { get; }
    public TValue Item { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Item { get; private set; }
    public OrderedDictionary`2(int capacity);
    public OrderedDictionary`2(IEqualityComparer`1<TKey> equalityComparer);
    public OrderedDictionary`2(int capacity, IEqualityComparer`1<TKey> equalityComparer);
    public OrderedDictionary`2(ICollection`1<KeyValuePair`2<TKey, TValue>> dictionary);
    public OrderedDictionary`2(ICollection`1<KeyValuePair`2<TKey, TValue>> dictionary, IEqualityComparer`1<TKey> equalityComparer);
    public IEqualityComparer`1<TKey> get_Comparer();
    public TValue get_Item(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Cadenza.Collections.OrderedDictionary`2/<GetEnumerator>d__36")]
public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IndexOf(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Insert(int index, KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.set_Item(int index, KeyValuePair`2<TKey, TValue> value);
    public sealed virtual void RemoveAt(int index);
    public bool ContainsValue(TValue value);
    public int IndexOf(TKey key);
    public int IndexOf(TKey key, int startIndex);
    public int IndexOf(TKey key, int startIndex, int count);
    public void Insert(int index, TKey key, TValue value);
    public void Move(int oldIndex, int newIndex);
}
internal class ThisAssembly : object {
}
internal enum Xamarin.Flex.AlignContent : Enum {
    public int value__;
    public static AlignContent Stretch;
    public static AlignContent Center;
    public static AlignContent Start;
    public static AlignContent End;
    public static AlignContent SpaceBetween;
    public static AlignContent SpaceAround;
    public static AlignContent SpaceEvenly;
}
internal enum Xamarin.Flex.AlignItems : Enum {
    public int value__;
    public static AlignItems Stretch;
    public static AlignItems Center;
    public static AlignItems Start;
    public static AlignItems End;
}
internal enum Xamarin.Flex.AlignSelf : Enum {
    public int value__;
    public static AlignSelf Auto;
    public static AlignSelf Stretch;
    public static AlignSelf Center;
    public static AlignSelf Start;
    public static AlignSelf End;
}
internal class Xamarin.Flex.Basis : ValueType {
    private bool _isRelative;
    private bool _isLength;
    private float _length;
    public static Basis Auto;
    public bool IsRelative { get; }
    public bool IsAuto { get; }
    public float Length { get; }
    public Basis(float length, bool isRelative);
    private static Basis();
    public bool get_IsRelative();
    public bool get_IsAuto();
    public float get_Length();
}
internal enum Xamarin.Flex.Direction : Enum {
    public int value__;
    public static Direction Row;
    public static Direction RowReverse;
    public static Direction Column;
    public static Direction ColumnReverse;
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Flex.Item : object {
    [CompilerGeneratedAttribute]
private Single[] <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Item> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldOrderChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private AlignContent <AlignContent>k__BackingField;
    [CompilerGeneratedAttribute]
private AlignItems <AlignItems>k__BackingField;
    [CompilerGeneratedAttribute]
private AlignSelf <AlignSelf>k__BackingField;
    [CompilerGeneratedAttribute]
private Basis <Basis>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private Direction <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Grow>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private Justify <JustifyContent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MarginBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MarginLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MarginRight>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MarginTop>k__BackingField;
    private int order;
    [CompilerGeneratedAttribute]
private float <PaddingBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private float <PaddingLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private float <PaddingRight>k__BackingField;
    [CompilerGeneratedAttribute]
private float <PaddingTop>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Shrink>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Wrap <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
private SelfSizingDelegate <SelfSizing>k__BackingField;
    public Single[] Frame { get; }
    public Item Parent { get; private set; }
    private IList`1<Item> Children { get; private set; }
    private bool ShouldOrderChildren { get; private set; }
    public AlignContent AlignContent { get; public set; }
    public AlignItems AlignItems { get; public set; }
    public AlignSelf AlignSelf { get; public set; }
    public Basis Basis { get; public set; }
    public float Bottom { get; public set; }
    public Direction Direction { get; public set; }
    public float Grow { get; public set; }
    public float Height { get; public set; }
    public bool IsVisible { get; public set; }
    public Justify JustifyContent { get; public set; }
    public float Left { get; public set; }
    public float MarginBottom { get; public set; }
    public float MarginLeft { get; public set; }
    public float MarginRight { get; public set; }
    public float MarginTop { get; public set; }
    public int Order { get; public set; }
    public float PaddingBottom { get; public set; }
    public float PaddingLeft { get; public set; }
    public float PaddingRight { get; public set; }
    public float PaddingTop { get; public set; }
    public Position Position { get; public set; }
    public float Right { get; public set; }
    public float Shrink { get; public set; }
    public float Top { get; public set; }
    public float Width { get; public set; }
    public Wrap Wrap { get; public set; }
    public int Count { get; }
    public Item Item { get; }
    public Item Root { get; }
    public SelfSizingDelegate SelfSizing { get; public set; }
    public Item(float width, float height);
    [CompilerGeneratedAttribute]
public Single[] get_Frame();
    [CompilerGeneratedAttribute]
public Item get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Item value);
    [CompilerGeneratedAttribute]
private IList`1<Item> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IList`1<Item> value);
    [CompilerGeneratedAttribute]
private bool get_ShouldOrderChildren();
    [CompilerGeneratedAttribute]
private void set_ShouldOrderChildren(bool value);
    [CompilerGeneratedAttribute]
public AlignContent get_AlignContent();
    [CompilerGeneratedAttribute]
public void set_AlignContent(AlignContent value);
    [CompilerGeneratedAttribute]
public AlignItems get_AlignItems();
    [CompilerGeneratedAttribute]
public void set_AlignItems(AlignItems value);
    [CompilerGeneratedAttribute]
public AlignSelf get_AlignSelf();
    [CompilerGeneratedAttribute]
public void set_AlignSelf(AlignSelf value);
    [CompilerGeneratedAttribute]
public Basis get_Basis();
    [CompilerGeneratedAttribute]
public void set_Basis(Basis value);
    [CompilerGeneratedAttribute]
public float get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(float value);
    [CompilerGeneratedAttribute]
public Direction get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(Direction value);
    [CompilerGeneratedAttribute]
public float get_Grow();
    [CompilerGeneratedAttribute]
public void set_Grow(float value);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public Justify get_JustifyContent();
    [CompilerGeneratedAttribute]
public void set_JustifyContent(Justify value);
    [CompilerGeneratedAttribute]
public float get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(float value);
    [CompilerGeneratedAttribute]
public float get_MarginBottom();
    [CompilerGeneratedAttribute]
public void set_MarginBottom(float value);
    [CompilerGeneratedAttribute]
public float get_MarginLeft();
    [CompilerGeneratedAttribute]
public void set_MarginLeft(float value);
    [CompilerGeneratedAttribute]
public float get_MarginRight();
    [CompilerGeneratedAttribute]
public void set_MarginRight(float value);
    [CompilerGeneratedAttribute]
public float get_MarginTop();
    [CompilerGeneratedAttribute]
public void set_MarginTop(float value);
    public int get_Order();
    public void set_Order(int value);
    [CompilerGeneratedAttribute]
public float get_PaddingBottom();
    [CompilerGeneratedAttribute]
public void set_PaddingBottom(float value);
    [CompilerGeneratedAttribute]
public float get_PaddingLeft();
    [CompilerGeneratedAttribute]
public void set_PaddingLeft(float value);
    [CompilerGeneratedAttribute]
public float get_PaddingRight();
    [CompilerGeneratedAttribute]
public void set_PaddingRight(float value);
    [CompilerGeneratedAttribute]
public float get_PaddingTop();
    [CompilerGeneratedAttribute]
public void set_PaddingTop(float value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public float get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(float value);
    [CompilerGeneratedAttribute]
public float get_Shrink();
    [CompilerGeneratedAttribute]
public void set_Shrink(float value);
    [CompilerGeneratedAttribute]
public float get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(float value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [CompilerGeneratedAttribute]
public Wrap get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(Wrap value);
    public void Add(Item child);
    public void InsertAt(int index, Item child);
    public Item RemoveAt(UInt32 index);
    public int get_Count();
    public Item ItemAt(int index);
    public Item get_Item(int index);
    public Item get_Root();
    public void Layout();
    [CompilerGeneratedAttribute]
public SelfSizingDelegate get_SelfSizing();
    [CompilerGeneratedAttribute]
public void set_SelfSizing(SelfSizingDelegate value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<Item> System.Collections.Generic.IEnumerable<Xamarin.Flex.Item>.GetEnumerator();
    private void ValidateChild(Item child);
    private static void layout_item(Item item, float width, float height);
    private float MarginThickness(bool vertical);
    private static void layout_align(Justify align, float flex_dim, int children_count, Single& pos_p, Single& spacing_p);
    private static void layout_align(AlignContent align, float flex_dim, UInt32 children_count, Single& pos_p, Single& spacing_p);
    private static void layout_items(Item item, int child_begin, int child_end, int children_count, flex_layout& layout);
    private static float absolute_size(float val, float pos1, float pos2, float dim);
    private static float absolute_pos(float pos1, float pos2, float size, float dim);
    private static AlignItems child_align(Item child, Item parent);
}
internal enum Xamarin.Flex.Justify : Enum {
    public int value__;
    public static Justify Center;
    public static Justify Start;
    public static Justify End;
    public static Justify SpaceBetween;
    public static Justify SpaceAround;
    public static Justify SpaceEvenly;
}
internal enum Xamarin.Flex.Position : Enum {
    public int value__;
    public static Position Relative;
    public static Position Absolute;
}
internal enum Xamarin.Flex.Wrap : Enum {
    public int value__;
    public static Wrap NoWrap;
    public static Wrap Wrap;
    public static Wrap WrapReverse;
}
public class Xamarin.Forms.AbsoluteLayout : Layout`1<View> {
    public static BindableProperty LayoutFlagsProperty;
    public static BindableProperty LayoutBoundsProperty;
    private AbsoluteElementCollection _children;
    private Lazy`1<PlatformConfigurationRegistry`1<AbsoluteLayout>> _platformConfigurationRegistry;
    public static double AutoSize { get; }
    public IAbsoluteList`1<View> Children { get; }
    private static AbsoluteLayout();
    public sealed virtual IPlatformElementConfiguration`2<T, AbsoluteLayout> On();
    public static double get_AutoSize();
    public IAbsoluteList`1<View> get_Children();
    [TypeConverterAttribute("Xamarin.Forms.BoundsTypeConverter")]
public static Rectangle GetLayoutBounds(BindableObject bindable);
    public static AbsoluteLayoutFlags GetLayoutFlags(BindableObject bindable);
    public static void SetLayoutBounds(BindableObject bindable, Rectangle bounds);
    public static void SetLayoutFlags(BindableObject bindable, AbsoluteLayoutFlags flags);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual void OnChildAdded(Element child);
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    internal virtual void ComputeConstraintForView(View view);
    private void ChildOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static SizeRequest ComputeBoundingRegionDesiredSize(View view);
    private static Rectangle ComputeLayoutForRegion(View view, Size region);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<AbsoluteLayout> <.ctor>b__4_0();
}
[FlagsAttribute]
public enum Xamarin.Forms.AbsoluteLayoutFlags : Enum {
    public int value__;
    public static AbsoluteLayoutFlags None;
    public static AbsoluteLayoutFlags XProportional;
    public static AbsoluteLayoutFlags YProportional;
    public static AbsoluteLayoutFlags WidthProportional;
    public static AbsoluteLayoutFlags HeightProportional;
    public static AbsoluteLayoutFlags PositionProportional;
    public static AbsoluteLayoutFlags SizeProportional;
    public static AbsoluteLayoutFlags All;
}
[TypeConverterAttribute("Xamarin.Forms.AcceleratorTypeConverter")]
public class Xamarin.Forms.Accelerator : object {
    private static char Separator;
    private string _text;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Keys>k__BackingField;
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<string> Modifiers { get; public set; }
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<string> Keys { get; public set; }
    internal Accelerator(string text);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(IEnumerable`1<string> value);
    public static Accelerator FromString(string text);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(Accelerator other);
    public virtual int GetHashCode();
    public static Accelerator op_Implicit(string accelerator);
}
public class Xamarin.Forms.AcceleratorTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public enum Xamarin.Forms.AccessKeyPlacement : Enum {
    public int value__;
    public static AccessKeyPlacement Auto;
    public static AccessKeyPlacement Top;
    public static AccessKeyPlacement Bottom;
    public static AccessKeyPlacement Right;
    public static AccessKeyPlacement Left;
    public static AccessKeyPlacement Center;
}
[RenderWithAttribute("Xamarin.Forms.Platform._ActivityIndicatorRenderer")]
public class Xamarin.Forms.ActivityIndicator : View {
    public static BindableProperty IsRunningProperty;
    public static BindableProperty ColorProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<ActivityIndicator>> _platformConfigurationRegistry;
    public Color Color { get; public set; }
    public bool IsRunning { get; public set; }
    private static ActivityIndicator();
    public sealed virtual Color get_Color();
    public void set_Color(Color value);
    public bool get_IsRunning();
    public void set_IsRunning(bool value);
    public sealed virtual IPlatformElementConfiguration`2<T, ActivityIndicator> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<ActivityIndicator> <.ctor>b__3_0();
}
public class Xamarin.Forms.AdaptiveTrigger : StateTriggerBase {
    public static BindableProperty MinWindowHeightProperty;
    public static BindableProperty MinWindowWidthProperty;
    public double MinWindowHeight { get; public set; }
    public double MinWindowWidth { get; public set; }
    private static AdaptiveTrigger();
    public double get_MinWindowHeight();
    public void set_MinWindowHeight(double value);
    private static void OnMinWindowHeightChanged(BindableObject bindable, object oldvalue, object newvalue);
    public double get_MinWindowWidth();
    public void set_MinWindowWidth(double value);
    private static void OnMinWindowWidthChanged(BindableObject bindable, object oldvalue, object newvalue);
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    private void OnSizeChanged(object sender, EventArgs e);
    private void UpdateState();
}
internal class Xamarin.Forms.AnimatableKey : object {
    [CompilerGeneratedAttribute]
private WeakReference`1<IAnimatable> <Animatable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Handle>k__BackingField;
    public WeakReference`1<IAnimatable> Animatable { get; }
    public string Handle { get; }
    public AnimatableKey(IAnimatable animatable, string handle);
    [CompilerGeneratedAttribute]
public WeakReference`1<IAnimatable> get_Animatable();
    [CompilerGeneratedAttribute]
public string get_Handle();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected bool Equals(AnimatableKey other);
}
public class Xamarin.Forms.Animation : object {
    private List`1<Animation> _children;
    private Easing _easing;
    private Action _finished;
    private Action`1<double> _step;
    private double _beginAt;
    private double _finishAt;
    private bool _finishedTriggered;
    public static bool IsEnabled { get; }
    public Animation(Action`1<double> callback, double start, double end, Easing easing, Action finished);
    public sealed virtual IEnumerator GetEnumerator();
    public void Add(double beginAt, double finishAt, Animation animation);
    public void Commit(IAnimatable owner, string name, UInt32 rate, UInt32 length, Easing easing, Action`2<double, bool> finished, Func`1<bool> repeat);
    public Action`1<double> GetCallback();
    internal void ResetChildren();
    public Animation Insert(double beginAt, double finishAt, Animation animation);
    public Animation WithConcurrent(Animation animation, double beginAt, double finishAt);
    public Animation WithConcurrent(Action`1<double> callback, double start, double end, Easing easing, double beginAt, double finishAt);
    public static bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private void <GetCallback>b__12_0(double f);
}
[ExtensionAttribute]
public static class Xamarin.Forms.AnimationExtensions : object {
    private static Dictionary`2<AnimatableKey, Info> s_animations;
    private static Dictionary`2<AnimatableKey, int> s_kinetics;
    private static AnimationExtensions();
    [ExtensionAttribute]
public static bool AbortAnimation(IAnimatable self, string handle);
    [ExtensionAttribute]
public static void Animate(IAnimatable self, string name, Animation animation, UInt32 rate, UInt32 length, Easing easing, Action`2<double, bool> finished, Func`1<bool> repeat);
    [ExtensionAttribute]
public static void Animate(IAnimatable self, string name, Action`1<double> callback, double start, double end, UInt32 rate, UInt32 length, Easing easing, Action`2<double, bool> finished, Func`1<bool> repeat);
    [ExtensionAttribute]
public static void Animate(IAnimatable self, string name, Action`1<double> callback, UInt32 rate, UInt32 length, Easing easing, Action`2<double, bool> finished, Func`1<bool> repeat);
    [ExtensionAttribute]
public static void Animate(IAnimatable self, string name, Func`2<double, T> transform, Action`1<T> callback, UInt32 rate, UInt32 length, Easing easing, Action`2<T, bool> finished, Func`1<bool> repeat);
    [ExtensionAttribute]
public static void AnimateKinetic(IAnimatable self, string name, Func`3<double, double, bool> callback, double velocity, double drag, Action finished);
    [ExtensionAttribute]
public static bool AnimationIsRunning(IAnimatable self, string handle);
    public static Func`2<double, double> Interpolate(double start, double end, double reverseVal, bool reverse);
    [ExtensionAttribute]
public static IDisposable Batch(IAnimatable self);
    private static void AbortAnimation(AnimatableKey key);
    private static void AbortKinetic(AnimatableKey key);
    private static void AnimateInternal(IAnimatable self, string name, Func`2<double, T> transform, Action`1<T> callback, UInt32 rate, UInt32 length, Easing easing, Action`2<T, bool> finished, Func`1<bool> repeat);
    private static void AnimateKineticInternal(IAnimatable self, string name, Func`3<double, double, bool> callback, double velocity, double drag, Action finished);
    private static void HandleTweenerFinished(object o, EventArgs args);
    private static void HandleTweenerUpdated(object o, EventArgs args);
    private static void DoAction(IAnimatable self, Action action);
}
public class Xamarin.Forms.Application : Element {
    private WeakEventManager _weakEventManager;
    private Task`1<IDictionary`2<string, object>> _propertiesTask;
    private Lazy`1<PlatformConfigurationRegistry`1<Application>> _platformConfigurationRegistry;
    private IAppIndexingProvider _appIndexProvider;
    private ReadOnlyCollection`1<Element> _logicalChildren;
    private Page _mainPage;
    private static SemaphoreSlim SaveSemaphore;
    [CompilerGeneratedAttribute]
private static bool <LogWarningsToApplicationOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private static Application <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationProxy <NavigationProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PanGestureId>k__BackingField;
    [CompilerGeneratedAttribute]
private IResourceDictionary <SystemResources>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<Element> <InternalChildren>k__BackingField;
    private ResourceDictionary _resources;
    private bool _themeChangedFiring;
    private OSAppTheme _lastAppTheme;
    private OSAppTheme _userAppTheme;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModalPoppedEventArgs> ModalPopped;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModalPoppingEventArgs> ModalPopping;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModalPushedEventArgs> ModalPushed;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModalPushingEventArgs> ModalPushing;
    [CompilerGeneratedAttribute]
private EventHandler`1<Page> PageAppearing;
    [CompilerGeneratedAttribute]
private EventHandler`1<Page> PageDisappearing;
    [CompilerGeneratedAttribute]
private EventHandler PopCanceled;
    public IDispatcher Dispatcher { get; }
    [ObsoleteAttribute("Assign the LogWarningsListener")]
public static bool LogWarningsToApplicationOutput { get; public set; }
    public IAppLinks AppLinks { get; }
    public static Application Current { get; public set; }
    public Page MainPage { get; public set; }
    public IDictionary`2<string, object> Properties { get; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    [EditorBrowsableAttribute("1")]
public NavigationProxy NavigationProxy { get; private set; }
    [EditorBrowsableAttribute("1")]
public int PanGestureId { get; public set; }
    internal IResourceDictionary SystemResources { get; }
    private ObservableCollection`1<Element> InternalChildren { get; }
    private bool Xamarin.Forms.IResourcesProvider.IsResourcesCreated { get; }
    public ResourceDictionary Resources { get; public set; }
    public OSAppTheme UserAppTheme { get; public set; }
    public OSAppTheme RequestedTheme { get; }
    private static Application();
    public virtual IDispatcher get_Dispatcher();
    [CompilerGeneratedAttribute]
public static bool get_LogWarningsToApplicationOutput();
    [CompilerGeneratedAttribute]
public static void set_LogWarningsToApplicationOutput(bool value);
    public void Quit();
    public IAppLinks get_AppLinks();
    [EditorBrowsableAttribute("1")]
public static void SetCurrentApplication(Application value);
    [CompilerGeneratedAttribute]
public static Application get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(Application value);
    public Page get_MainPage();
    public void set_MainPage(Page value);
    public IDictionary`2<string, object> get_Properties();
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    [CompilerGeneratedAttribute]
public NavigationProxy get_NavigationProxy();
    [CompilerGeneratedAttribute]
private void set_NavigationProxy(NavigationProxy value);
    [CompilerGeneratedAttribute]
public int get_PanGestureId();
    [CompilerGeneratedAttribute]
public void set_PanGestureId(int value);
    [CompilerGeneratedAttribute]
internal IResourceDictionary get_SystemResources();
    [CompilerGeneratedAttribute]
private ObservableCollection`1<Element> get_InternalChildren();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SetAppIndexingProvider(IAppIndexingProvider provider);
    private sealed virtual override bool Xamarin.Forms.IResourcesProvider.get_IsResourcesCreated();
    public sealed virtual ResourceDictionary get_Resources();
    public sealed virtual void set_Resources(ResourceDictionary value);
    public OSAppTheme get_UserAppTheme();
    public void set_UserAppTheme(OSAppTheme value);
    public OSAppTheme get_RequestedTheme();
    public void add_RequestedThemeChanged(EventHandler`1<AppThemeChangedEventArgs> value);
    public void remove_RequestedThemeChanged(EventHandler`1<AppThemeChangedEventArgs> value);
    [EditorBrowsableAttribute("1")]
public void TriggerThemeChanged(AppThemeChangedEventArgs args);
    private void TriggerThemeChangedActual(AppThemeChangedEventArgs args);
    [CompilerGeneratedAttribute]
public void add_ModalPopped(EventHandler`1<ModalPoppedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ModalPopped(EventHandler`1<ModalPoppedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ModalPopping(EventHandler`1<ModalPoppingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ModalPopping(EventHandler`1<ModalPoppingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ModalPushed(EventHandler`1<ModalPushedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ModalPushed(EventHandler`1<ModalPushedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ModalPushing(EventHandler`1<ModalPushingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ModalPushing(EventHandler`1<ModalPushingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PageAppearing(EventHandler`1<Page> value);
    [CompilerGeneratedAttribute]
public void remove_PageAppearing(EventHandler`1<Page> value);
    [CompilerGeneratedAttribute]
public void add_PageDisappearing(EventHandler`1<Page> value);
    [CompilerGeneratedAttribute]
public void remove_PageDisappearing(EventHandler`1<Page> value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Application/<SaveProperties>d__81")]
private void SaveProperties();
    [AsyncStateMachineAttribute("Xamarin.Forms.Application/<SavePropertiesAsync>d__82")]
public Task SavePropertiesAsync();
    internal void SavePropertiesAsFireAndForget();
    public sealed virtual IPlatformElementConfiguration`2<T, Application> On();
    protected virtual void OnAppLinkRequestReceived(Uri uri);
    protected virtual void OnParentSet();
    protected virtual void OnResume();
    protected virtual void OnSleep();
    protected virtual void OnStart();
    [EditorBrowsableAttribute("1")]
public static void ClearCurrent();
    [EditorBrowsableAttribute("1")]
public static bool IsApplicationOrNull(Element element);
    internal virtual void OnParentResourcesChanged(IEnumerable`1<KeyValuePair`2<string, object>> values);
    [CompilerGeneratedAttribute]
internal void add_PopCanceled(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PopCanceled(EventHandler value);
    [EditorBrowsableAttribute("1")]
public void SendOnAppLinkRequestReceived(Uri uri);
    [EditorBrowsableAttribute("1")]
public void SendResume();
    [EditorBrowsableAttribute("1")]
public void SendSleep();
    [EditorBrowsableAttribute("1")]
public Task SendSleepAsync();
    [EditorBrowsableAttribute("1")]
public void SendStart();
    [AsyncStateMachineAttribute("Xamarin.Forms.Application/<GetPropertiesAsync>d__101")]
private Task`1<IDictionary`2<string, object>> GetPropertiesAsync();
    internal void OnPageAppearing(Page page);
    internal void OnPageDisappearing(Page page);
    private void OnModalPopped(Page modalPage);
    private bool OnModalPopping(Page modalPage);
    private void OnModalPushed(Page modalPage);
    private void OnModalPushing(Page modalPage);
    private void OnPopCanceled();
    [AsyncStateMachineAttribute("Xamarin.Forms.Application/<SetPropertiesAsync>d__109")]
private Task SetPropertiesAsync();
    protected internal virtual void CleanUp();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Application> <.ctor>b__13_0();
}
public class Xamarin.Forms.AppLinkEntry : Element {
    private Dictionary`2<string, string> keyValues;
    public static BindableProperty TitleProperty;
    public static BindableProperty DescriptionProperty;
    public static BindableProperty ThumbnailProperty;
    public static BindableProperty AppLinkUriProperty;
    public static BindableProperty IsLinkActiveProperty;
    public Uri AppLinkUri { get; public set; }
    public string Description { get; public set; }
    public bool IsLinkActive { get; public set; }
    public IDictionary`2<string, string> KeyValues { get; }
    public ImageSource Thumbnail { get; public set; }
    public string Title { get; public set; }
    private static AppLinkEntry();
    public sealed virtual Uri get_AppLinkUri();
    public sealed virtual void set_AppLinkUri(Uri value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual bool get_IsLinkActive();
    public sealed virtual void set_IsLinkActive(bool value);
    public sealed virtual IDictionary`2<string, string> get_KeyValues();
    public sealed virtual ImageSource get_Thumbnail();
    public sealed virtual void set_Thumbnail(ImageSource value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public static AppLinkEntry FromUri(Uri uri);
    public virtual string ToString();
}
internal class Xamarin.Forms.AppThemeBinding : BindingBase {
    private WeakReference`1<BindableObject> _weakTarget;
    private BindableProperty _targetProperty;
    private object _light;
    private object _dark;
    private bool _isLightSet;
    private bool _isDarkSet;
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    public object Light { get; public set; }
    public object Dark { get; public set; }
    public object Default { get; public set; }
    internal virtual BindingBase Clone();
    internal virtual void Apply(bool fromTarget);
    internal virtual void Apply(object context, BindableObject bindObj, BindableProperty targetProperty, bool fromBindingContextChanged);
    internal virtual void Unapply(bool fromBindingContextChanged);
    private void ApplyCore();
    public object get_Light();
    public void set_Light(object value);
    public object get_Dark();
    public void set_Dark(object value);
    [CompilerGeneratedAttribute]
public object get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(object value);
    private object GetValue();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(object o, AppThemeChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1();
}
public class Xamarin.Forms.AppThemeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private OSAppTheme <RequestedTheme>k__BackingField;
    public OSAppTheme RequestedTheme { get; }
    public AppThemeChangedEventArgs(OSAppTheme appTheme);
    [CompilerGeneratedAttribute]
public OSAppTheme get_RequestedTheme();
}
public enum Xamarin.Forms.Aspect : Enum {
    public int value__;
    public static Aspect AspectFit;
    public static Aspect AspectFill;
    public static Aspect Fill;
}
internal class Xamarin.Forms.AttachedCollection`1 : ObservableCollection`1<T> {
    private List`1<WeakReference> _associatedObjects;
    private static int CleanupTrigger;
    private int _cleanupThreshold;
    public AttachedCollection`1(IEnumerable`1<T> collection);
    public AttachedCollection`1(IList`1<T> list);
    public sealed virtual void AttachTo(BindableObject bindable);
    public sealed virtual void DetachFrom(BindableObject bindable);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, T item);
    protected virtual void OnAttachedTo(BindableObject bindable);
    protected virtual void OnDetachingFrom(BindableObject bindable);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    private void CleanUpWeakReferences();
}
public class Xamarin.Forms.AutomationProperties : object {
    public static BindableProperty HelpTextProperty;
    public static BindableProperty IsInAccessibleTreeProperty;
    public static BindableProperty LabeledByProperty;
    public static BindableProperty NameProperty;
    private static AutomationProperties();
    public static string GetHelpText(BindableObject bindable);
    public static Nullable`1<bool> GetIsInAccessibleTree(BindableObject bindable);
    [TypeConverterAttribute("Xamarin.Forms.ReferenceTypeConverter")]
public static VisualElement GetLabeledBy(BindableObject bindable);
    public static string GetName(BindableObject bindable);
    public static void SetHelpText(BindableObject bindable, string value);
    public static void SetIsInAccessibleTree(BindableObject bindable, Nullable`1<bool> value);
    public static void SetLabeledBy(BindableObject bindable, VisualElement value);
    public static void SetName(BindableObject bindable, string value);
}
public class Xamarin.Forms.BackButtonBehavior : BindableObject {
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty IconOverrideProperty;
    public static BindableProperty IsEnabledProperty;
    public static BindableProperty TextOverrideProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public ImageSource IconOverride { get; public set; }
    public bool IsEnabled { get; public set; }
    public string TextOverride { get; public set; }
    unknown bool IsEnabledCore {private set; }
    private static BackButtonBehavior();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public ImageSource get_IconOverride();
    public void set_IconOverride(ImageSource value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_TextOverride();
    public void set_TextOverride(string value);
    private void set_IsEnabledCore(bool value);
    private static void OnCommandChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCommandParameterChanged(BindableObject bindable, object oldValue, object newValue);
    private void CanExecuteChanged(object sender, EventArgs e);
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void OnCommandParameterChanged();
}
public class Xamarin.Forms.BackButtonPressedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
internal static class Xamarin.Forms.BarElement : object {
    public static BindableProperty BarBackgroundColorProperty;
    public static BindableProperty BarBackgroundProperty;
    public static BindableProperty BarTextColorProperty;
    private static BarElement();
}
public abstract class Xamarin.Forms.BaseMenuItem : Element {
}
[DebuggerDisplayAttribute("Title = {Title}, Route = {Route}")]
public class Xamarin.Forms.BaseShellItem : NavigableElement {
    [CompilerGeneratedAttribute]
private EventHandler Appearing;
    [CompilerGeneratedAttribute]
private EventHandler Disappearing;
    private bool _hasAppearing;
    private static string DefaultFlyoutItemLabelStyle;
    private static string DefaultFlyoutItemImageStyle;
    private static string DefaultFlyoutItemLayoutStyle;
    internal static BindablePropertyKey IsCheckedPropertyKey;
    public static BindableProperty FlyoutIconProperty;
    public static BindableProperty IconProperty;
    public static BindableProperty IsCheckedProperty;
    public static BindableProperty IsEnabledProperty;
    public static BindableProperty TitleProperty;
    public static BindableProperty TabIndexProperty;
    public static BindableProperty IsTabStopProperty;
    public static BindableProperty IsVisibleProperty;
    private IVisual _effectiveVisual;
    private EffectiveFlowDirection _effectiveFlowDirection;
    public ImageSource FlyoutIcon { get; public set; }
    public ImageSource Icon { get; public set; }
    public bool IsChecked { get; }
    public bool IsEnabled { get; public set; }
    public string Route { get; public set; }
    public string Title { get; public set; }
    public int TabIndex { get; public set; }
    public bool IsTabStop { get; public set; }
    public bool IsVisible { get; public set; }
    private IVisual Xamarin.Forms.IVisualController.EffectiveVisual { get; private set; }
    private IVisual Xamarin.Forms.IVisualController.Visual { get; }
    private EffectiveFlowDirection Xamarin.Forms.IFlowDirectionController.EffectiveFlowDirection { get; private set; }
    private bool Xamarin.Forms.IFlowDirectionController.ApplyEffectiveFlowDirectionToChildContainer { get; }
    private double Xamarin.Forms.IFlowDirectionController.Width { get; }
    private static BaseShellItem();
    [CompilerGeneratedAttribute]
public void add_Appearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Appearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Disappearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disappearing(EventHandler value);
    private static void OnTabIndexPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object TabIndexDefaultValueCreator(BindableObject bindable);
    private static void OnTabStopPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object TabStopDefaultValueCreator(BindableObject bindable);
    public ImageSource get_FlyoutIcon();
    public void set_FlyoutIcon(ImageSource value);
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    public bool get_IsChecked();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_Route();
    public void set_Route(string value);
    public string get_Title();
    public void set_Title(string value);
    public sealed virtual int get_TabIndex();
    public sealed virtual void set_TabIndex(int value);
    protected virtual void OnTabIndexPropertyChanged(int oldValue, int newValue);
    protected virtual int TabIndexDefaultValueCreator();
    public sealed virtual bool get_IsTabStop();
    public sealed virtual void set_IsTabStop(bool value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    internal bool IsPartOfVisibleTree();
    internal virtual void SendAppearing();
    internal virtual void SendDisappearing();
    protected virtual void OnAppearing();
    protected virtual void OnDisappearing();
    internal void OnAppearing(Action action);
    protected virtual void OnTabStopPropertyChanged(bool oldValue, bool newValue);
    protected virtual bool TabStopDefaultValueCreator();
    private sealed virtual override IVisual Xamarin.Forms.IVisualController.get_EffectiveVisual();
    private sealed virtual override void Xamarin.Forms.IVisualController.set_EffectiveVisual(IVisual value);
    private sealed virtual override IVisual Xamarin.Forms.IVisualController.get_Visual();
    private static void OnIconChanged(BindableObject bindable, object oldValue, object newValue);
    protected virtual void OnPropertyChanged(string propertyName);
    internal static void PropagateFromParent(BindableProperty property, Element me);
    internal static void Propagate(BindableProperty property, BindableObject from, BindableObject to, bool onlyToImplicit);
    private sealed virtual override void Xamarin.Forms.IPropertyPropagationController.PropagatePropertyChanged(string propertyName);
    private sealed virtual override EffectiveFlowDirection Xamarin.Forms.IFlowDirectionController.get_EffectiveFlowDirection();
    private sealed virtual override void Xamarin.Forms.IFlowDirectionController.set_EffectiveFlowDirection(EffectiveFlowDirection value);
    private sealed virtual override bool Xamarin.Forms.IFlowDirectionController.get_ApplyEffectiveFlowDirectionToChildContainer();
    private sealed virtual override double Xamarin.Forms.IFlowDirectionController.get_Width();
    internal virtual void ApplyQueryAttributes(IDictionary`2<string, string> query);
    private static void UpdateFlyoutItemStyles(Grid flyoutItemCell, IStyleSelectable source);
    internal static DataTemplate CreateDefaultFlyoutItemCell(IStyleSelectable styleSelectable, string textBinding, string iconBinding);
}
public abstract class Xamarin.Forms.BaseSwipeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SwipeDirection <SwipeDirection>k__BackingField;
    public SwipeDirection SwipeDirection { get; public set; }
    protected BaseSwipeEventArgs(SwipeDirection swipeDirection);
    [CompilerGeneratedAttribute]
public SwipeDirection get_SwipeDirection();
    [CompilerGeneratedAttribute]
public void set_SwipeDirection(SwipeDirection value);
}
public abstract class Xamarin.Forms.Behavior : BindableObject {
    [CompilerGeneratedAttribute]
private Type <AssociatedType>k__BackingField;
    protected Type AssociatedType { get; }
    internal Behavior(Type associatedType);
    [CompilerGeneratedAttribute]
protected Type get_AssociatedType();
    private sealed virtual override void Xamarin.Forms.IAttachedObject.AttachTo(BindableObject bindable);
    private sealed virtual override void Xamarin.Forms.IAttachedObject.DetachFrom(BindableObject bindable);
    protected virtual void OnAttachedTo(BindableObject bindable);
    protected virtual void OnDetachingFrom(BindableObject bindable);
}
public abstract class Xamarin.Forms.Behavior`1 : Behavior {
    protected virtual void OnAttachedTo(BindableObject bindable);
    protected virtual void OnAttachedTo(T bindable);
    protected virtual void OnDetachingFrom(BindableObject bindable);
    protected virtual void OnDetachingFrom(T bindable);
}
public static class Xamarin.Forms.BindableLayout : object {
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty ItemTemplateSelectorProperty;
    private static BindableProperty BindableLayoutControllerProperty;
    public static BindableProperty EmptyViewProperty;
    public static BindableProperty EmptyViewTemplateProperty;
    private static BindableLayout();
    public static void SetItemsSource(BindableObject b, IEnumerable value);
    public static IEnumerable GetItemsSource(BindableObject b);
    public static void SetItemTemplate(BindableObject b, DataTemplate value);
    public static DataTemplate GetItemTemplate(BindableObject b);
    public static void SetItemTemplateSelector(BindableObject b, DataTemplateSelector value);
    public static DataTemplateSelector GetItemTemplateSelector(BindableObject b);
    public static object GetEmptyView(BindableObject b);
    public static void SetEmptyView(BindableObject b, object value);
    public static DataTemplate GetEmptyViewTemplate(BindableObject b);
    public static void SetEmptyViewTemplate(BindableObject b, DataTemplate value);
    private static BindableLayoutController GetBindableLayoutController(BindableObject b);
    private static void SetBindableLayoutController(BindableObject b, BindableLayoutController value);
    private static void OnControllerChanged(BindableObject b, BindableLayoutController oldC, BindableLayoutController newC);
}
internal class Xamarin.Forms.BindableLayoutController : object {
    private WeakReference`1<Layout`1<View>> _layoutWeakReference;
    private IEnumerable _itemsSource;
    private DataTemplate _itemTemplate;
    private DataTemplateSelector _itemTemplateSelector;
    private bool _isBatchUpdate;
    private object _emptyView;
    private DataTemplate _emptyViewTemplate;
    private View _currentEmptyView;
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public object EmptyView { get; public set; }
    public DataTemplate EmptyViewTemplate { get; public set; }
    public BindableLayoutController(Layout`1<View> layout);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    public object get_EmptyView();
    public void set_EmptyView(object value);
    public DataTemplate get_EmptyViewTemplate();
    public void set_EmptyViewTemplate(DataTemplate value);
    internal void StartBatchUpdate();
    internal void EndBatchUpdate();
    private void SetItemsSource(IEnumerable itemsSource);
    private void SetItemTemplate(DataTemplate itemTemplate);
    private void SetItemTemplateSelector(DataTemplateSelector itemTemplateSelector);
    private void SetEmptyView(object emptyView);
    private void SetEmptyViewTemplate(DataTemplate emptyViewTemplate);
    private void CreateChildren();
    private void UpdateEmptyView(Layout`1<View> layout);
    private View CreateItemView(object item, Layout`1<View> layout);
    private View CreateItemView(object item, DataTemplate dataTemplate);
    private View CreateEmptyView(object emptyView, DataTemplate dataTemplate);
    private void ItemsSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public abstract class Xamarin.Forms.BindableObject : object {
    private IDispatcher _dispatcher;
    private Dictionary`2<BindableProperty, BindablePropertyContext> _properties;
    private bool _applying;
    private object _inheritedContext;
    public static BindableProperty BindingContextProperty;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
private EventHandler BindingContextChanged;
    public IDispatcher Dispatcher { get; internal set; }
    public object BindingContext { get; public set; }
    private static BindableObject();
    public virtual IDispatcher get_Dispatcher();
    internal virtual void set_Dispatcher(IDispatcher value);
    public object get_BindingContext();
    public void set_BindingContext(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BindingContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BindingContextChanged(EventHandler value);
    public void ClearValue(BindableProperty property);
    internal void ClearValue(BindableProperty property, bool fromStyle);
    public void ClearValue(BindablePropertyKey propertyKey);
    private void ClearValue(BindableProperty property, bool fromStyle, bool checkAccess);
    public object GetValue(BindableProperty property);
    internal ValueTuple`2[] GetValues(BindableProperty[] propArray);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("GetValues is obsolete as of 4.0.0. Please use GetValue instead.")]
public Object[] GetValues(BindableProperty property0, BindableProperty property1);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("GetValues is obsolete as of 4.0.0. Please use GetValue instead.")]
public Object[] GetValues(BindableProperty property0, BindableProperty property1, BindableProperty property2);
    public bool IsSet(BindableProperty targetProperty);
    public void RemoveBinding(BindableProperty property);
    public void SetBinding(BindableProperty targetProperty, BindingBase binding);
    internal void SetBinding(BindableProperty targetProperty, BindingBase binding, bool fromStyle);
    [EditorBrowsableAttribute("1")]
public static void SetInheritedBindingContext(BindableObject bindable, object value);
    protected void ApplyBindings();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanging(string propertyName);
    protected void UnapplyBindings();
    internal bool GetIsBound(BindableProperty targetProperty);
    internal virtual void OnRemoveDynamicResource(BindableProperty property);
    internal virtual void OnSetDynamicResource(BindableProperty property, string key);
    internal void RemoveDynamicResource(BindableProperty property);
    private bool CanBeSetFromStyle(BindableProperty property);
    private sealed virtual override void Xamarin.Forms.Internals.IDynamicResourceHandler.SetDynamicResource(BindableProperty property, string key);
    internal void SetDynamicResource(BindableProperty property, string key);
    internal void SetDynamicResource(BindableProperty property, string key, bool fromStyle);
    public void SetValue(BindableProperty property, object value);
    public void SetValue(BindablePropertyKey propertyKey, object value);
    internal void SetValue(BindableProperty property, object value, bool fromStyle);
    private void SetValue(BindableProperty property, object value, bool fromStyle, bool checkAccess);
    internal void SetValueCore(BindablePropertyKey propertyKey, object value, SetValueFlags attributes);
    [EditorBrowsableAttribute("1")]
public void SetValueCore(BindableProperty property, object value, SetValueFlags attributes);
    internal void SetValueCore(BindableProperty property, object value, SetValueFlags attributes, SetValuePrivateFlags privateAttributes);
    private void SetValueActual(BindableProperty property, BindablePropertyContext context, object value, bool currentlyApplying, SetValueFlags attributes, bool silent);
    internal void ApplyBindings(bool skipBindingContext, bool fromBindingContextChanged);
    private static void BindingContextPropertyBindingChanging(BindableObject bindable, BindingBase oldBindingBase, BindingBase newBindingBase);
    private static void BindingContextPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private BindablePropertyContext CreateAndAddContext(BindableProperty property);
    private BindablePropertyContext GetContext(BindableProperty property);
    private BindablePropertyContext GetOrCreateContext(BindableProperty property);
    private void RemoveBinding(BindableProperty property, BindablePropertyContext context);
    public void CoerceValue(BindableProperty property);
    public void CoerceValue(BindablePropertyKey propertyKey);
    private void CoerceValue(BindableProperty property, bool checkAccess);
}
[ExtensionAttribute]
public static class Xamarin.Forms.BindableObjectExtensions : object {
    [ExtensionAttribute]
internal static void PropagateBindingContext(BindableObject self, IList`1<T> children);
    [ExtensionAttribute]
internal static void PropagateBindingContext(BindableObject self, IList`1<T> children, Action`2<BindableObject, object> setChildBindingContext);
    [ExtensionAttribute]
public static void SetBinding(BindableObject self, BindableProperty targetProperty, string path, BindingMode mode, IValueConverter converter, string stringFormat);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
[ExtensionAttribute]
public static void SetBinding(BindableObject self, BindableProperty targetProperty, Expression`1<Func`2<TSource, object>> sourceProperty, BindingMode mode, IValueConverter converter, string stringFormat);
    [ExtensionAttribute]
public static T GetPropertyIfSet(BindableObject bindableObject, BindableProperty bindableProperty, T returnIfNotSet);
    [ExtensionAttribute]
public static void SetOnAppTheme(BindableObject self, BindableProperty targetProperty, T light, T dark);
    [ExtensionAttribute]
public static void SetAppThemeColor(BindableObject self, BindableProperty targetProperty, Color light, Color dark);
}
[TypeConverterAttribute("Xamarin.Forms.BindablePropertyConverter")]
[DebuggerDisplayAttribute("{PropertyName}")]
public class Xamarin.Forms.BindableProperty : object {
    private static Dictionary`2<Type, TypeConverter> KnownTypeConverters;
    private static Dictionary`2<Type, IValueConverter> KnownIValueConverters;
    private static Dictionary`2<Type, Type[]> SimpleConvertTypes;
    public static object UnsetValue;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMode <DefaultBindingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private BindablePropertyBindingChanging <BindingChanging>k__BackingField;
    [CompilerGeneratedAttribute]
private CoerceValueDelegate <CoerceValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateDefaultValueDelegate <DefaultValueCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingPropertyChangedDelegate <PropertyChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingPropertyChangingDelegate <PropertyChanging>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <ReturnTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidateValueDelegate <ValidateValue>k__BackingField;
    public Type DeclaringType { get; private set; }
    public BindingMode DefaultBindingMode { get; private set; }
    public object DefaultValue { get; }
    public bool IsReadOnly { get; private set; }
    public string PropertyName { get; }
    public Type ReturnType { get; }
    internal BindablePropertyBindingChanging BindingChanging { get; private set; }
    internal CoerceValueDelegate CoerceValue { get; private set; }
    internal CreateDefaultValueDelegate DefaultValueCreator { get; }
    internal BindingPropertyChangedDelegate PropertyChanged { get; private set; }
    internal BindingPropertyChangingDelegate PropertyChanging { get; private set; }
    internal TypeInfo ReturnTypeInfo { get; }
    internal ValidateValueDelegate ValidateValue { get; private set; }
    private BindableProperty(string propertyName, Type returnType, Type declaringType, object defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate validateValue, BindingPropertyChangedDelegate propertyChanged, BindingPropertyChangingDelegate propertyChanging, CoerceValueDelegate coerceValue, BindablePropertyBindingChanging bindingChanging, bool isReadOnly, CreateDefaultValueDelegate defaultValueCreator);
    private static BindableProperty();
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
private void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public BindingMode get_DefaultBindingMode();
    [CompilerGeneratedAttribute]
private void set_DefaultBindingMode(BindingMode value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
internal BindablePropertyBindingChanging get_BindingChanging();
    [CompilerGeneratedAttribute]
private void set_BindingChanging(BindablePropertyBindingChanging value);
    [CompilerGeneratedAttribute]
internal CoerceValueDelegate get_CoerceValue();
    [CompilerGeneratedAttribute]
private void set_CoerceValue(CoerceValueDelegate value);
    [CompilerGeneratedAttribute]
internal CreateDefaultValueDelegate get_DefaultValueCreator();
    [CompilerGeneratedAttribute]
internal BindingPropertyChangedDelegate get_PropertyChanged();
    [CompilerGeneratedAttribute]
private void set_PropertyChanged(BindingPropertyChangedDelegate value);
    [CompilerGeneratedAttribute]
internal BindingPropertyChangingDelegate get_PropertyChanging();
    [CompilerGeneratedAttribute]
private void set_PropertyChanging(BindingPropertyChangingDelegate value);
    [CompilerGeneratedAttribute]
internal TypeInfo get_ReturnTypeInfo();
    [CompilerGeneratedAttribute]
internal ValidateValueDelegate get_ValidateValue();
    [CompilerGeneratedAttribute]
private void set_ValidateValue(ValidateValueDelegate value);
    [ObsoleteAttribute("Create<> (generic) is obsolete as of version 2.1.0 and is no longer supported.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty Create(Expression`1<Func`2<TDeclarer, TPropertyType>> getter, TPropertyType defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate`1<TPropertyType> validateValue, BindingPropertyChangedDelegate`1<TPropertyType> propertyChanged, BindingPropertyChangingDelegate`1<TPropertyType> propertyChanging, CoerceValueDelegate`1<TPropertyType> coerceValue, CreateDefaultValueDelegate`2<TDeclarer, TPropertyType> defaultValueCreator);
    public static BindableProperty Create(string propertyName, Type returnType, Type declaringType, object defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate validateValue, BindingPropertyChangedDelegate propertyChanged, BindingPropertyChangingDelegate propertyChanging, CoerceValueDelegate coerceValue, CreateDefaultValueDelegate defaultValueCreator);
    [ObsoleteAttribute("CreateAttached<> (generic) is obsolete as of version 2.1.0 and is no longer supported.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty CreateAttached(Expression`1<Func`2<BindableObject, TPropertyType>> staticgetter, TPropertyType defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate`1<TPropertyType> validateValue, BindingPropertyChangedDelegate`1<TPropertyType> propertyChanged, BindingPropertyChangingDelegate`1<TPropertyType> propertyChanging, CoerceValueDelegate`1<TPropertyType> coerceValue, CreateDefaultValueDelegate`2<BindableObject, TPropertyType> defaultValueCreator);
    public static BindableProperty CreateAttached(string propertyName, Type returnType, Type declaringType, object defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate validateValue, BindingPropertyChangedDelegate propertyChanged, BindingPropertyChangingDelegate propertyChanging, CoerceValueDelegate coerceValue, CreateDefaultValueDelegate defaultValueCreator);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("CreateAttachedReadOnly<> (generic) is obsolete as of version 2.1.0 and is no longer supported.")]
public static BindablePropertyKey CreateAttachedReadOnly(Expression`1<Func`2<BindableObject, TPropertyType>> staticgetter, TPropertyType defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate`1<TPropertyType> validateValue, BindingPropertyChangedDelegate`1<TPropertyType> propertyChanged, BindingPropertyChangingDelegate`1<TPropertyType> propertyChanging, CoerceValueDelegate`1<TPropertyType> coerceValue, CreateDefaultValueDelegate`2<BindableObject, TPropertyType> defaultValueCreator);
    public static BindablePropertyKey CreateAttachedReadOnly(string propertyName, Type returnType, Type declaringType, object defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate validateValue, BindingPropertyChangedDelegate propertyChanged, BindingPropertyChangingDelegate propertyChanging, CoerceValueDelegate coerceValue, CreateDefaultValueDelegate defaultValueCreator);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("CreateReadOnly<> (generic) is obsolete as of version 2.1.0 and is no longer supported.")]
public static BindablePropertyKey CreateReadOnly(Expression`1<Func`2<TDeclarer, TPropertyType>> getter, TPropertyType defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate`1<TPropertyType> validateValue, BindingPropertyChangedDelegate`1<TPropertyType> propertyChanged, BindingPropertyChangingDelegate`1<TPropertyType> propertyChanging, CoerceValueDelegate`1<TPropertyType> coerceValue, CreateDefaultValueDelegate`2<TDeclarer, TPropertyType> defaultValueCreator);
    public static BindablePropertyKey CreateReadOnly(string propertyName, Type returnType, Type declaringType, object defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate validateValue, BindingPropertyChangedDelegate propertyChanged, BindingPropertyChangingDelegate propertyChanging, CoerceValueDelegate coerceValue, CreateDefaultValueDelegate defaultValueCreator);
    [ObsoleteAttribute("Create<> (generic) is obsolete as of version 2.1.0 and is no longer supported.")]
[EditorBrowsableAttribute("1")]
internal static BindableProperty Create(Expression`1<Func`2<TDeclarer, TPropertyType>> getter, TPropertyType defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate`1<TPropertyType> validateValue, BindingPropertyChangedDelegate`1<TPropertyType> propertyChanged, BindingPropertyChangingDelegate`1<TPropertyType> propertyChanging, CoerceValueDelegate`1<TPropertyType> coerceValue, BindablePropertyBindingChanging bindingChanging, bool isReadOnly, CreateDefaultValueDelegate`2<TDeclarer, TPropertyType> defaultValueCreator);
    internal static BindableProperty Create(string propertyName, Type returnType, Type declaringType, object defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate validateValue, BindingPropertyChangedDelegate propertyChanged, BindingPropertyChangingDelegate propertyChanging, CoerceValueDelegate coerceValue, BindablePropertyBindingChanging bindingChanging, CreateDefaultValueDelegate defaultValueCreator);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("CreateAttached<> (generic) is obsolete as of version 2.1.0 and is no longer supported.")]
internal static BindableProperty CreateAttached(Expression`1<Func`2<BindableObject, TPropertyType>> staticgetter, TPropertyType defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate`1<TPropertyType> validateValue, BindingPropertyChangedDelegate`1<TPropertyType> propertyChanged, BindingPropertyChangingDelegate`1<TPropertyType> propertyChanging, CoerceValueDelegate`1<TPropertyType> coerceValue, BindablePropertyBindingChanging bindingChanging, bool isReadOnly, CreateDefaultValueDelegate`2<BindableObject, TPropertyType> defaultValueCreator);
    internal static BindableProperty CreateAttached(string propertyName, Type returnType, Type declaringType, object defaultValue, BindingMode defaultBindingMode, ValidateValueDelegate validateValue, BindingPropertyChangedDelegate propertyChanged, BindingPropertyChangingDelegate propertyChanging, CoerceValueDelegate coerceValue, BindablePropertyBindingChanging bindingChanging, bool isReadOnly, CreateDefaultValueDelegate defaultValueCreator);
    internal object GetDefaultValue(BindableObject bindable);
    internal bool TryConvert(Object& value);
}
[TypeConversionAttribute("Xamarin.Forms.BindableProperty")]
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.BindablePropertyConverter")]
public class Xamarin.Forms.BindablePropertyConverter : TypeConverter {
    private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFrom(CultureInfo culture, object value, IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFromInvariantString(string value, IServiceProvider serviceProvider);
    public virtual object ConvertFromInvariantString(string value);
    private BindableProperty ConvertFrom(Type type, string propertyName, IXmlLineInfo lineinfo);
    private Type FindTypeForVisualState(IProvideParentValues parentValueProvider, IXmlLineInfo lineInfo);
}
public class Xamarin.Forms.BindablePropertyKey : object {
    [CompilerGeneratedAttribute]
private BindableProperty <BindableProperty>k__BackingField;
    public BindableProperty BindableProperty { get; private set; }
    internal BindablePropertyKey(BindableProperty property);
    [CompilerGeneratedAttribute]
public BindableProperty get_BindableProperty();
    [CompilerGeneratedAttribute]
private void set_BindableProperty(BindableProperty value);
}
public class Xamarin.Forms.Binding : BindingBase {
    internal static string SelfPath;
    private IValueConverter _converter;
    private object _converterParameter;
    private BindingExpression _expression;
    private string _path;
    private object _source;
    private string _updateSourceEventName;
    public static object DoNothing;
    public IValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public string Path { get; public set; }
    public object Source { get; public set; }
    [EditorBrowsableAttribute("1")]
public string UpdateSourceEventName { get; public set; }
    public Binding(string path, BindingMode mode, IValueConverter converter, object converterParameter, string stringFormat, object source);
    private static Binding();
    public IValueConverter get_Converter();
    public void set_Converter(IValueConverter value);
    public object get_ConverterParameter();
    public void set_ConverterParameter(object value);
    public string get_Path();
    public void set_Path(string value);
    public object get_Source();
    public void set_Source(object value);
    public string get_UpdateSourceEventName();
    public void set_UpdateSourceEventName(string value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public static Binding Create(Expression`1<Func`2<TSource, object>> propertyGetter, BindingMode mode, IValueConverter converter, object converterParameter, string stringFormat);
    internal virtual void Apply(bool fromTarget);
    internal virtual void Apply(object context, BindableObject bindObj, BindableProperty targetProperty, bool fromBindingContextChanged);
    [AsyncStateMachineAttribute("Xamarin.Forms.Binding/<ApplyRelativeSourceBinding>d__28")]
private void ApplyRelativeSourceBinding(BindableObject targetObject, BindableProperty targetProperty);
    private void ApplyAncestorTypeBinding(BindableObject actualTarget, Element relativeSourceTarget, BindableProperty targetProperty, Element currentElement, int currentLevel, List`1<Element> chain, object lastMatchingBctx);
    private bool ElementFitsAncestorTypeAndLevel(Element element, Int32& level, Object& lastPotentialBctx);
    internal virtual BindingBase Clone();
    internal virtual object GetSourceValue(object value, Type targetPropertyType);
    internal virtual object GetTargetValue(object value, Type sourcePropertyType);
    internal virtual void Unapply(bool fromBindingContextChanged);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private static string GetBindingPath(Expression`1<Func`2<TSource, object>> propertyGetter);
}
public abstract class Xamarin.Forms.BindingBase : object {
    private static ConditionalWeakTable`2<IEnumerable, CollectionSynchronizationContext> SynchronizedCollections;
    private BindingMode _mode;
    private string _stringFormat;
    private object _targetNullValue;
    private object _fallbackValue;
    private WeakReference`1<Element> _relativeSourceTargetOverride;
    [CompilerGeneratedAttribute]
private bool <AllowChaining>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsApplied>k__BackingField;
    public BindingMode Mode { get; public set; }
    public string StringFormat { get; public set; }
    public object TargetNullValue { get; public set; }
    public object FallbackValue { get; public set; }
    internal bool AllowChaining { get; internal set; }
    internal object Context { get; internal set; }
    internal bool IsApplied { get; private set; }
    internal Element RelativeSourceTargetOverride { get; internal set; }
    private static BindingBase();
    public BindingMode get_Mode();
    public void set_Mode(BindingMode value);
    public string get_StringFormat();
    public void set_StringFormat(string value);
    public object get_TargetNullValue();
    public void set_TargetNullValue(object value);
    public object get_FallbackValue();
    public void set_FallbackValue(object value);
    [CompilerGeneratedAttribute]
internal bool get_AllowChaining();
    [CompilerGeneratedAttribute]
internal void set_AllowChaining(bool value);
    [CompilerGeneratedAttribute]
internal object get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(object value);
    [CompilerGeneratedAttribute]
internal bool get_IsApplied();
    [CompilerGeneratedAttribute]
private void set_IsApplied(bool value);
    internal Element get_RelativeSourceTargetOverride();
    internal void set_RelativeSourceTargetOverride(Element value);
    public static void DisableCollectionSynchronization(IEnumerable collection);
    public static void EnableCollectionSynchronization(IEnumerable collection, object context, CollectionSynchronizationCallback callback);
    protected void ThrowIfApplied();
    internal virtual void Apply(bool fromTarget);
    internal virtual void Apply(object context, BindableObject bindObj, BindableProperty targetProperty, bool fromBindingContextChanged);
    internal abstract virtual BindingBase Clone();
    internal virtual object GetSourceValue(object value, Type targetPropertyType);
    internal bool TryFormat(string format, object arg0, String& value);
    internal bool TryFormat(string format, Object[] args, String& value);
    internal virtual object GetTargetValue(object value, Type sourcePropertyType);
    internal static bool TryGetSynchronizedCollection(IEnumerable collection, CollectionSynchronizationContext& synchronizationContext);
    internal virtual void Unapply(bool fromBindingContextChanged);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.BindingBaseExtensions : object {
    [ExtensionAttribute]
public static BindingMode GetRealizedMode(BindingBase self, BindableProperty property);
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.PassthroughValueProvider")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.BindingCondition : Condition {
    private BindableProperty _boundProperty;
    private BindingBase _binding;
    private object _triggerValue;
    private static IValueConverterProvider s_valueConverter;
    public BindingBase Binding { get; public set; }
    public object Value { get; public set; }
    private static BindingCondition();
    public BindingBase get_Binding();
    public void set_Binding(BindingBase value);
    public object get_Value();
    public void set_Value(object value);
    private sealed virtual override object Xamarin.Forms.Xaml.IValueProvider.ProvideValue(IServiceProvider serviceProvider);
    internal virtual bool GetState(BindableObject bindable);
    internal virtual void SetUp(BindableObject bindable);
    internal virtual void TearDown(BindableObject bindable);
    private bool EqualsToValue(object other);
    private void OnBoundPropertyChanged(BindableObject bindable, object oldValue, object newValue);
}
internal class Xamarin.Forms.BindingExpression : object {
    internal static string PropertyNotFoundErrorMessage;
    private static Char[] ExpressionSplit;
    private List`1<BindingExpressionPart> _parts;
    private BindableProperty _targetProperty;
    private WeakReference`1<object> _weakSource;
    private WeakReference`1<BindableObject> _weakTarget;
    private List`1<WeakReference`1<Element>> _ancestryChain;
    private bool _isBindingContextRelativeSource;
    [CompilerGeneratedAttribute]
private BindingBase <Binding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    private static Type[] DecimalTypes;
    internal BindingBase Binding { get; }
    internal string Path { get; }
    internal BindingExpression(BindingBase binding, string path);
    private static BindingExpression();
    [CompilerGeneratedAttribute]
internal BindingBase get_Binding();
    [CompilerGeneratedAttribute]
internal string get_Path();
    internal void Apply(bool fromTarget);
    internal void Apply(object sourceObject, BindableObject target, BindableProperty property);
    internal void Unapply();
    private void ApplyCore(object sourceObject, BindableObject target, BindableProperty property, bool fromTarget);
    private void ParsePath();
    private PropertyInfo GetIndexer(TypeInfo sourceType, string indexerName, string content);
    private void SetupPart(TypeInfo sourceType, BindingExpressionPart part);
    internal static bool TryConvert(Object& value, BindableProperty targetProperty, Type convertTo, bool toTarget);
    internal void SubscribeToAncestryChanges(List`1<Element> chain, bool includeBindingContext, bool rootIsSource);
    private void ClearAncestryChangeSubscriptions(int beginningWith);
    private int FindAncestryIndex(Element elem);
    private void OnElementBindingContextChanged(object sender, EventArgs e);
    private void OnElementParentSet(object sender, EventArgs e);
}
public enum Xamarin.Forms.BindingMode : Enum {
    public int value__;
    public static BindingMode Default;
    public static BindingMode TwoWay;
    public static BindingMode OneWay;
    public static BindingMode OneWayToSource;
    public static BindingMode OneTime;
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.BindingTypeConverter")]
[TypeConversionAttribute("Xamarin.Forms.Binding")]
public class Xamarin.Forms.BindingTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
internal static class Xamarin.Forms.BorderElement : object {
    public static int DefaultCornerRadius;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty BorderWidthProperty;
    public static BindableProperty CornerRadiusProperty;
    private static BorderElement();
    private static void OnBorderColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.Forms.BoundsConstraint : object {
    private Func`1<Rectangle> _measureFunc;
    [CompilerGeneratedAttribute]
private bool <CreatedFromExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<View> <RelativeTo>k__BackingField;
    internal bool CreatedFromExpression { get; internal set; }
    internal IEnumerable`1<View> RelativeTo { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_CreatedFromExpression();
    [CompilerGeneratedAttribute]
internal void set_CreatedFromExpression(bool value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<View> get_RelativeTo();
    [CompilerGeneratedAttribute]
internal void set_RelativeTo(IEnumerable`1<View> value);
    public static BoundsConstraint FromExpression(Expression`1<Func`1<Rectangle>> expression, IEnumerable`1<View> parents);
    internal static BoundsConstraint FromExpression(Expression`1<Func`1<Rectangle>> expression, bool fromExpression, IEnumerable`1<View> parents);
    internal Rectangle Compute();
}
[TypeConversionAttribute("Xamarin.Forms.Rectangle")]
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.BoundsTypeConverter")]
public class Xamarin.Forms.BoundsTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._BoxViewRenderer")]
public class Xamarin.Forms.BoxView : View {
    public static BindableProperty ColorProperty;
    public static BindableProperty CornerRadiusProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<BoxView>> _platformConfigurationRegistry;
    public Color Color { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    private static BoxView();
    public sealed virtual Color get_Color();
    public void set_Color(Color value);
    public sealed virtual CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public sealed virtual IPlatformElementConfiguration`2<T, BoxView> On();
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<BoxView> <.ctor>b__3_0();
}
[TypeConverterAttribute("Xamarin.Forms.BrushTypeConverter")]
public abstract class Xamarin.Forms.Brush : BindableObject {
    public static SolidColorBrush AliceBlue;
    public static SolidColorBrush AntiqueWhite;
    public static SolidColorBrush Aqua;
    public static SolidColorBrush Aquamarine;
    public static SolidColorBrush Azure;
    public static SolidColorBrush Beige;
    public static SolidColorBrush Bisque;
    public static SolidColorBrush Black;
    public static SolidColorBrush BlanchedAlmond;
    public static SolidColorBrush Blue;
    public static SolidColorBrush BlueViolet;
    public static SolidColorBrush Brown;
    public static SolidColorBrush BurlyWood;
    public static SolidColorBrush CadetBlue;
    public static SolidColorBrush Chartreuse;
    public static SolidColorBrush Chocolate;
    public static SolidColorBrush Coral;
    public static SolidColorBrush CornflowerBlue;
    public static SolidColorBrush Cornsilk;
    public static SolidColorBrush Crimson;
    public static SolidColorBrush Cyan;
    public static SolidColorBrush DarkBlue;
    public static SolidColorBrush DarkCyan;
    public static SolidColorBrush DarkGoldenrod;
    public static SolidColorBrush DarkGray;
    public static SolidColorBrush DarkGreen;
    public static SolidColorBrush DarkKhaki;
    public static SolidColorBrush DarkMagenta;
    public static SolidColorBrush DarkOliveGreen;
    public static SolidColorBrush DarkOrange;
    public static SolidColorBrush DarkOrchid;
    public static SolidColorBrush DarkRed;
    public static SolidColorBrush DarkSalmon;
    public static SolidColorBrush DarkSeaGreen;
    public static SolidColorBrush DarkSlateBlue;
    public static SolidColorBrush DarkSlateGray;
    public static SolidColorBrush DarkTurquoise;
    public static SolidColorBrush DarkViolet;
    public static SolidColorBrush DeepPink;
    public static SolidColorBrush DeepSkyBlue;
    public static SolidColorBrush DimGray;
    public static SolidColorBrush DodgerBlue;
    public static SolidColorBrush Firebrick;
    public static SolidColorBrush FloralWhite;
    public static SolidColorBrush ForestGreen;
    public static SolidColorBrush Fuchsia;
    public static SolidColorBrush Gainsboro;
    public static SolidColorBrush GhostWhite;
    public static SolidColorBrush Gold;
    public static SolidColorBrush Goldenrod;
    public static SolidColorBrush Gray;
    public static SolidColorBrush Green;
    public static SolidColorBrush GreenYellow;
    public static SolidColorBrush Honeydew;
    public static SolidColorBrush HotPink;
    public static SolidColorBrush IndianRed;
    public static SolidColorBrush Indigo;
    public static SolidColorBrush Ivory;
    public static SolidColorBrush Khaki;
    public static SolidColorBrush Lavender;
    public static SolidColorBrush LavenderBlush;
    public static SolidColorBrush LawnGreen;
    public static SolidColorBrush LemonChiffon;
    public static SolidColorBrush LightBlue;
    public static SolidColorBrush LightCoral;
    public static SolidColorBrush LightCyan;
    public static SolidColorBrush LightGoldenrodYellow;
    public static SolidColorBrush LightGray;
    public static SolidColorBrush LightGreen;
    public static SolidColorBrush LightPink;
    public static SolidColorBrush LightSalmon;
    public static SolidColorBrush LightSeaGreen;
    public static SolidColorBrush LightSkyBlue;
    public static SolidColorBrush LightSlateGray;
    public static SolidColorBrush LightSteelBlue;
    public static SolidColorBrush LightYellow;
    public static SolidColorBrush Lime;
    public static SolidColorBrush LimeGreen;
    public static SolidColorBrush Linen;
    public static SolidColorBrush Magenta;
    public static SolidColorBrush Maroon;
    public static SolidColorBrush MediumAquamarine;
    public static SolidColorBrush MediumBlue;
    public static SolidColorBrush MediumOrchid;
    public static SolidColorBrush MediumPurple;
    public static SolidColorBrush MediumSeaGreen;
    public static SolidColorBrush MediumSlateBlue;
    public static SolidColorBrush MediumSpringGreen;
    public static SolidColorBrush MediumTurquoise;
    public static SolidColorBrush MediumVioletRed;
    public static SolidColorBrush MidnightBlue;
    public static SolidColorBrush MintCream;
    public static SolidColorBrush MistyRose;
    public static SolidColorBrush Moccasin;
    public static SolidColorBrush NavajoWhite;
    public static SolidColorBrush Navy;
    public static SolidColorBrush OldLace;
    public static SolidColorBrush Olive;
    public static SolidColorBrush OliveDrab;
    public static SolidColorBrush Orange;
    public static SolidColorBrush OrangeRed;
    public static SolidColorBrush Orchid;
    public static SolidColorBrush PaleGoldenrod;
    public static SolidColorBrush PaleGreen;
    public static SolidColorBrush PaleTurquoise;
    public static SolidColorBrush PaleVioletRed;
    public static SolidColorBrush PapayaWhip;
    public static SolidColorBrush PeachPuff;
    public static SolidColorBrush Peru;
    public static SolidColorBrush Pink;
    public static SolidColorBrush Plum;
    public static SolidColorBrush PowderBlue;
    public static SolidColorBrush Purple;
    public static SolidColorBrush Red;
    public static SolidColorBrush RosyBrown;
    public static SolidColorBrush RoyalBlue;
    public static SolidColorBrush SaddleBrown;
    public static SolidColorBrush Salmon;
    public static SolidColorBrush SandyBrown;
    public static SolidColorBrush SeaGreen;
    public static SolidColorBrush SeaShell;
    public static SolidColorBrush Sienna;
    public static SolidColorBrush Silver;
    public static SolidColorBrush SkyBlue;
    public static SolidColorBrush SlateBlue;
    public static SolidColorBrush SlateGray;
    public static SolidColorBrush Snow;
    public static SolidColorBrush SpringGreen;
    public static SolidColorBrush SteelBlue;
    public static SolidColorBrush Tan;
    public static SolidColorBrush Teal;
    public static SolidColorBrush Thistle;
    public static SolidColorBrush Tomato;
    public static SolidColorBrush Transparent;
    public static SolidColorBrush Turquoise;
    public static SolidColorBrush Violet;
    public static SolidColorBrush Wheat;
    public static SolidColorBrush White;
    public static SolidColorBrush WhiteSmoke;
    public static SolidColorBrush Yellow;
    public static SolidColorBrush YellowGreen;
    public static Brush Default { get; }
    public bool IsEmpty { get; }
    private static Brush();
    public static Brush get_Default();
    public abstract virtual bool get_IsEmpty();
    public static bool IsNullOrEmpty(Brush brush);
}
public class Xamarin.Forms.BrushTypeConverter : TypeConverter {
    public static string LinearGradient;
    public static string RadialGradient;
    public static string Rgb;
    public static string Rgba;
    public static string Hsl;
    public static string Hsla;
    private ColorTypeConverter _colorTypeConverter;
    public virtual object ConvertFromInvariantString(string value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._ButtonRenderer")]
public class Xamarin.Forms.Button : View {
    private static int DefaultBorderRadius;
    private static double DefaultSpacing;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty ContentLayoutProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty FontProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty TextTransformProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty BorderWidthProperty;
    public static BindableProperty BorderColorProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BorderRadiusProperty is obsolete as of 2.5.0. Please use CornerRadius instead.")]
public static BindableProperty BorderRadiusProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty ImageSourceProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ImageProperty is obsolete as of 4.0.0. Please use ImageSourceProperty instead.")]
public static BindableProperty ImageProperty;
    public static BindableProperty PaddingProperty;
    internal static BindablePropertyKey IsPressedPropertyKey;
    public static BindableProperty IsPressedProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Button>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler Clicked;
    [CompilerGeneratedAttribute]
private EventHandler Pressed;
    [CompilerGeneratedAttribute]
private EventHandler Released;
    private bool cornerOrBorderRadiusSetting;
    public Thickness Padding { get; public set; }
    public Color BorderColor { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BorderRadius is obsolete as of 2.5.0. Please use CornerRadius instead.")]
public int BorderRadius { get; public set; }
    public int CornerRadius { get; public set; }
    public double BorderWidth { get; public set; }
    public ButtonContentLayout ContentLayout { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public Font Font { get; public set; }
    public ImageSource ImageSource { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Image is obsolete as of 4.0.0. Please use ImageSource instead.")]
public FileImageSource Image { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public double CharacterSpacing { get; public set; }
    unknown bool Xamarin.Forms.Internals.IButtonElement.IsEnabledCore {private set; }
    public bool IsPressed { get; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public TextTransform TextTransform { get; public set; }
    private Aspect Xamarin.Forms.IImageElement.Aspect { get; }
    private ImageSource Xamarin.Forms.IImageElement.Source { get; }
    private bool Xamarin.Forms.IImageElement.IsOpaque { get; }
    private int Xamarin.Forms.IBorderElement.CornerRadiusDefaultValue { get; }
    private Color Xamarin.Forms.IBorderElement.BorderColorDefaultValue { get; }
    private double Xamarin.Forms.IBorderElement.BorderWidthDefaultValue { get; }
    private bool Xamarin.Forms.IImageElement.IsLoading { get; }
    private bool Xamarin.Forms.IImageElement.IsAnimationPlaying { get; }
    private static Button();
    public sealed virtual Thickness get_Padding();
    public void set_Padding(Thickness value);
    private sealed virtual override Thickness Xamarin.Forms.IPaddingElement.PaddingDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.IPaddingElement.OnPaddingPropertyChanged(Thickness oldValue, Thickness newValue);
    public sealed virtual Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public sealed virtual int get_CornerRadius();
    public void set_CornerRadius(int value);
    public sealed virtual double get_BorderWidth();
    public void set_BorderWidth(double value);
    public ButtonContentLayout get_ContentLayout();
    public void set_ContentLayout(ButtonContentLayout value);
    public sealed virtual ICommand get_Command();
    public sealed virtual void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public sealed virtual void set_CommandParameter(object value);
    public Font get_Font();
    public void set_Font(Font value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public FileImageSource get_Image();
    public void set_Image(FileImageSource value);
    public string get_Text();
    public void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.set_IsEnabledCore(bool value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendClicked();
    public sealed virtual bool get_IsPressed();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.SetIsPressed(bool isPressed);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPressed();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendReleased();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.PropagateUpClicked();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.PropagateUpPressed();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.PropagateUpReleased();
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    [CompilerGeneratedAttribute]
public void add_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Pressed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Pressed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Released(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Released(EventHandler value);
    public sealed virtual IPlatformElementConfiguration`2<T, Button> On();
    protected internal virtual void ChangeVisualState();
    protected virtual void OnBindingContextChanged();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    private sealed virtual override Aspect Xamarin.Forms.IImageElement.get_Aspect();
    private sealed virtual override ImageSource Xamarin.Forms.IImageElement.get_Source();
    private sealed virtual override bool Xamarin.Forms.IImageElement.get_IsOpaque();
    private sealed virtual override void Xamarin.Forms.IImageElement.RaiseImageSourcePropertyChanged();
    private sealed virtual override int Xamarin.Forms.IBorderElement.get_CornerRadiusDefaultValue();
    private sealed virtual override Color Xamarin.Forms.IBorderElement.get_BorderColorDefaultValue();
    private sealed virtual override double Xamarin.Forms.IBorderElement.get_BorderWidthDefaultValue();
    private static void BorderRadiusPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private static void CornerRadiusPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.IBorderElement.OnBorderColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override bool Xamarin.Forms.IImageController.GetLoadAsAnimation();
    private sealed virtual override bool Xamarin.Forms.IImageElement.get_IsLoading();
    private sealed virtual override bool Xamarin.Forms.IImageElement.get_IsAnimationPlaying();
    private sealed virtual override void Xamarin.Forms.IImageElement.OnImageSourceSourceChanged(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.OnCommandCanExecuteChanged(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.IImageController.SetIsLoading(bool isLoading);
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsCornerRadiusSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderWidthSet();
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    public virtual string UpdateFormsText(string source, TextTransform textTransform);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Button> <.ctor>b__99_0();
}
internal static class Xamarin.Forms.ButtonElement : object {
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static string PressedVisualState;
    private static ButtonElement();
    private static void OnCommandChanged(BindableObject bo, object o, object n);
    private static void OnCommandChanging(BindableObject bo, object o, object n);
    public static void CommandChanged(IButtonElement sender);
    public static void CommandCanExecuteChanged(object sender, EventArgs e);
    public static void ElementClicked(VisualElement visualElement, IButtonElement ButtonElementManager);
    public static void ElementPressed(VisualElement visualElement, IButtonElement ButtonElementManager);
    public static void ElementReleased(VisualElement visualElement, IButtonElement ButtonElementManager);
}
[FlagsAttribute]
public enum Xamarin.Forms.ButtonsMask : Enum {
    public int value__;
    public static ButtonsMask Primary;
    public static ButtonsMask Secondary;
}
[TypeConversionAttribute("Xamarin.Forms.LinearItemsLayout")]
public class Xamarin.Forms.CarouselLayoutTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._CarouselPageRenderer")]
public class Xamarin.Forms.CarouselPage : MultiPage`1<ContentPage> {
    private Lazy`1<PlatformConfigurationRegistry`1<CarouselPage>> _platformConfigurationRegistry;
    public sealed virtual IPlatformElementConfiguration`2<T, CarouselPage> On();
    protected virtual ContentPage CreateDefault(object item);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<CarouselPage> <.ctor>b__1_0();
}
[RenderWithAttribute("Xamarin.Forms.Platform._CarouselViewRenderer")]
public class Xamarin.Forms.CarouselView : ItemsView {
    public static string CurrentItemVisualState;
    public static string NextItemVisualState;
    public static string PreviousItemVisualState;
    public static string DefaultItemVisualState;
    public static BindableProperty PeekAreaInsetsProperty;
    private static BindablePropertyKey VisibleViewsPropertyKey;
    public static BindableProperty VisibleViewsProperty;
    private static BindablePropertyKey IsDraggingPropertyKey;
    public static BindableProperty IsDraggingProperty;
    public static BindableProperty IsBounceEnabledProperty;
    public static BindableProperty IsSwipeEnabledProperty;
    public static BindableProperty IsScrollAnimatedProperty;
    public static BindableProperty CurrentItemProperty;
    public static BindableProperty CurrentItemChangedCommandProperty;
    public static BindableProperty CurrentItemChangedCommandParameterProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty PositionChangedCommandProperty;
    public static BindableProperty PositionChangedCommandParameterProperty;
    public static BindableProperty ItemsLayoutProperty;
    [CompilerGeneratedAttribute]
private bool <IsScrolling>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<CurrentItemChangedEventArgs> CurrentItemChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionChangedEventArgs> PositionChanged;
    public Thickness PeekAreaInsets { get; public set; }
    public ObservableCollection`1<View> VisibleViews { get; }
    public bool IsDragging { get; }
    public bool IsBounceEnabled { get; public set; }
    public bool IsSwipeEnabled { get; public set; }
    public bool IsScrollAnimated { get; public set; }
    public object CurrentItem { get; public set; }
    public ICommand CurrentItemChangedCommand { get; public set; }
    public object CurrentItemChangedCommandParameter { get; public set; }
    public int Position { get; public set; }
    public ICommand PositionChangedCommand { get; public set; }
    public object PositionChangedCommandParameter { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.CarouselLayoutTypeConverter")]
public LinearItemsLayout ItemsLayout { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ReferenceTypeConverter")]
unknown IndicatorView IndicatorView {public set; }
    [EditorBrowsableAttribute("1")]
public bool IsScrolling { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool AnimatePositionChanges { get; }
    [EditorBrowsableAttribute("1")]
public bool AnimateCurrentItemChanges { get; }
    private static CarouselView();
    public Thickness get_PeekAreaInsets();
    public void set_PeekAreaInsets(Thickness value);
    public ObservableCollection`1<View> get_VisibleViews();
    public bool get_IsDragging();
    public bool get_IsBounceEnabled();
    public void set_IsBounceEnabled(bool value);
    public bool get_IsSwipeEnabled();
    public void set_IsSwipeEnabled(bool value);
    public bool get_IsScrollAnimated();
    public void set_IsScrollAnimated(bool value);
    public object get_CurrentItem();
    public void set_CurrentItem(object value);
    public ICommand get_CurrentItemChangedCommand();
    public void set_CurrentItemChangedCommand(ICommand value);
    public object get_CurrentItemChangedCommandParameter();
    public void set_CurrentItemChangedCommandParameter(object value);
    private static void CurrentItemPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public int get_Position();
    public void set_Position(int value);
    public ICommand get_PositionChangedCommand();
    public void set_PositionChangedCommand(ICommand value);
    public object get_PositionChangedCommandParameter();
    public void set_PositionChangedCommandParameter(object value);
    public LinearItemsLayout get_ItemsLayout();
    public void set_ItemsLayout(LinearItemsLayout value);
    public void set_IndicatorView(IndicatorView value);
    private static void LinkToIndicatorView(CarouselView carouselView, IndicatorView indicatorView);
    [CompilerGeneratedAttribute]
public bool get_IsScrolling();
    [CompilerGeneratedAttribute]
public void set_IsScrolling(bool value);
    [CompilerGeneratedAttribute]
public void add_CurrentItemChanged(EventHandler`1<CurrentItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CurrentItemChanged(EventHandler`1<CurrentItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PositionChanged(EventHandler`1<PositionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PositionChanged(EventHandler`1<PositionChangedEventArgs> value);
    [EditorBrowsableAttribute("1")]
public static void VerifyCarouselViewFlagEnabled(string constructorHint, string memberName);
    protected virtual void OnPositionChanged(PositionChangedEventArgs args);
    protected virtual void OnCurrentItemChanged(EventArgs args);
    private static void PositionPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [EditorBrowsableAttribute("1")]
public void SetIsDragging(bool value);
    public virtual bool get_AnimatePositionChanges();
    public virtual bool get_AnimateCurrentItemChanges();
}
internal class Xamarin.Forms.CastingEnumerator`2 : object {
    private IEnumerator`1<TFrom> _enumerator;
    private bool _disposed;
    private object System.Collections.IEnumerator.Current { get; }
    public T Current { get; }
    public CastingEnumerator`2(IEnumerator`1<TFrom> enumerator);
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual T get_Current();
}
public abstract class Xamarin.Forms.Cell : Element {
    public static int DefaultCellHeight;
    public static BindableProperty IsEnabledProperty;
    private ObservableCollection`1<MenuItem> _contextActions;
    private Lazy`1<ElementConfiguration> _elementConfiguration;
    private double _height;
    private bool _nextCallToForceUpdateSizeQueued;
    private EffectiveFlowDirection _effectiveFlowDirection;
    private IVisual _effectiveVisual;
    [CompilerGeneratedAttribute]
private bool <IsContextActionsLegacyModeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Appearing;
    [CompilerGeneratedAttribute]
private EventHandler Disappearing;
    [CompilerGeneratedAttribute]
private EventHandler ForceUpdateSizeRequested;
    [CompilerGeneratedAttribute]
private EventHandler Tapped;
    private EffectiveFlowDirection Xamarin.Forms.IFlowDirectionController.EffectiveFlowDirection { get; private set; }
    private IVisual Xamarin.Forms.IVisualController.EffectiveVisual { get; private set; }
    private IVisual Xamarin.Forms.IVisualController.Visual { get; }
    private bool Xamarin.Forms.IFlowDirectionController.ApplyEffectiveFlowDirectionToChildContainer { get; }
    private IFlowDirectionController FlowController { get; }
    private IPropertyPropagationController PropertyPropagationController { get; }
    public IList`1<MenuItem> ContextActions { get; }
    public bool HasContextActions { get; }
    public bool IsContextActionsLegacyModeEnabled { get; public set; }
    public double Height { get; public set; }
    public bool IsEnabled { get; public set; }
    public double RenderHeight { get; }
    private double Xamarin.Forms.IFlowDirectionController.Width { get; }
    private static Cell();
    private sealed virtual override EffectiveFlowDirection Xamarin.Forms.IFlowDirectionController.get_EffectiveFlowDirection();
    private sealed virtual override void Xamarin.Forms.IFlowDirectionController.set_EffectiveFlowDirection(EffectiveFlowDirection value);
    private sealed virtual override IVisual Xamarin.Forms.IVisualController.get_EffectiveVisual();
    private sealed virtual override void Xamarin.Forms.IVisualController.set_EffectiveVisual(IVisual value);
    private sealed virtual override IVisual Xamarin.Forms.IVisualController.get_Visual();
    private sealed virtual override bool Xamarin.Forms.IFlowDirectionController.get_ApplyEffectiveFlowDirectionToChildContainer();
    private IFlowDirectionController get_FlowController();
    private IPropertyPropagationController get_PropertyPropagationController();
    public IList`1<MenuItem> get_ContextActions();
    public bool get_HasContextActions();
    [CompilerGeneratedAttribute]
public bool get_IsContextActionsLegacyModeEnabled();
    [CompilerGeneratedAttribute]
public void set_IsContextActionsLegacyModeEnabled(bool value);
    public double get_Height();
    public void set_Height(double value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public double get_RenderHeight();
    private sealed virtual override double Xamarin.Forms.IFlowDirectionController.get_Width();
    [CompilerGeneratedAttribute]
public void add_Appearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Appearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Disappearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disappearing(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ForceUpdateSizeRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ForceUpdateSizeRequested(EventHandler value);
    public void ForceUpdateSize();
    [CompilerGeneratedAttribute]
public void add_Tapped(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Tapped(EventHandler value);
    protected internal virtual void OnTapped();
    protected virtual void OnAppearing();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnDisappearing();
    protected virtual void OnParentSet();
    protected virtual void OnPropertyChanging(string propertyName);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendAppearing();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendDisappearing();
    private sealed virtual override void Xamarin.Forms.IPropertyPropagationController.PropagatePropertyChanged(string propertyName);
    private void OnContextActionsChanged(object sender, NotifyCollectionChangedEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Cell/<OnForceUpdateSizeRequested>d__64")]
private void OnForceUpdateSizeRequested();
    private static void OnIsEnabledPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private void OnParentPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnParentPropertyChanging(object sender, PropertyChangingEventArgs e);
    public IPlatformElementConfiguration`2<T, Cell> On();
    private IElementConfiguration`1<Cell> GetElementConfiguration();
    [CompilerGeneratedAttribute]
private ElementConfiguration <.ctor>b__6_0();
}
internal class Xamarin.Forms.ChatKeyboard : Keyboard {
}
[RenderWithAttribute("Xamarin.Forms.Platform._CheckBoxRenderer")]
public class Xamarin.Forms.CheckBox : View {
    private Lazy`1<PlatformConfigurationRegistry`1<CheckBox>> _platformConfigurationRegistry;
    public static string IsCheckedVisualState;
    public static BindableProperty IsCheckedProperty;
    public static BindableProperty ColorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<CheckedChangedEventArgs> CheckedChanged;
    public Color Color { get; public set; }
    public bool IsChecked { get; public set; }
    private Color Xamarin.Forms.IBorderElement.BorderColor { get; }
    private int Xamarin.Forms.IBorderElement.CornerRadius { get; }
    private double Xamarin.Forms.IBorderElement.BorderWidth { get; }
    private int Xamarin.Forms.IBorderElement.CornerRadiusDefaultValue { get; }
    private Color Xamarin.Forms.IBorderElement.BorderColorDefaultValue { get; }
    private double Xamarin.Forms.IBorderElement.BorderWidthDefaultValue { get; }
    private static CheckBox();
    public sealed virtual Color get_Color();
    public void set_Color(Color value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    protected internal virtual void ChangeVisualState();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler`1<CheckedChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler`1<CheckedChangedEventArgs> value);
    public sealed virtual IPlatformElementConfiguration`2<T, CheckBox> On();
    private sealed virtual override void Xamarin.Forms.IBorderElement.OnBorderColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override Color Xamarin.Forms.IBorderElement.get_BorderColor();
    private sealed virtual override int Xamarin.Forms.IBorderElement.get_CornerRadius();
    private sealed virtual override double Xamarin.Forms.IBorderElement.get_BorderWidth();
    private sealed virtual override int Xamarin.Forms.IBorderElement.get_CornerRadiusDefaultValue();
    private sealed virtual override Color Xamarin.Forms.IBorderElement.get_BorderColorDefaultValue();
    private sealed virtual override double Xamarin.Forms.IBorderElement.get_BorderWidthDefaultValue();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsCornerRadiusSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderWidthSet();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<CheckBox> <.ctor>b__7_0();
}
public class Xamarin.Forms.CheckedChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; private set; }
    public CheckedChangedEventArgs(bool value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(bool value);
}
internal class Xamarin.Forms.ChildCollectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventArgs <Args>k__BackingField;
    public NotifyCollectionChangedEventArgs Args { get; private set; }
    public ChildCollectionChangedEventArgs(NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
public NotifyCollectionChangedEventArgs get_Args();
    [CompilerGeneratedAttribute]
private void set_Args(NotifyCollectionChangedEventArgs value);
}
public class Xamarin.Forms.ChildGestureRecognizer : object {
    private IGestureRecognizer _gestureRecognizer;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IGestureRecognizer GestureRecognizer { get; public set; }
    public IGestureRecognizer get_GestureRecognizer();
    public void set_GestureRecognizer(IGestureRecognizer value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void OnPropertyChanged(string propertyName);
}
public enum Xamarin.Forms.ClearButtonVisibility : Enum {
    public int value__;
    public static ClearButtonVisibility Never;
    public static ClearButtonVisibility WhileEditing;
}
public class Xamarin.Forms.ClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ButtonsMask <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parameter>k__BackingField;
    public ButtonsMask Buttons { get; private set; }
    public object Parameter { get; private set; }
    public ClickedEventArgs(ButtonsMask buttons, object commandParameter);
    [CompilerGeneratedAttribute]
public ButtonsMask get_Buttons();
    [CompilerGeneratedAttribute]
private void set_Buttons(ButtonsMask value);
    [CompilerGeneratedAttribute]
public object get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(object value);
}
public class Xamarin.Forms.ClickGestureRecognizer : GestureRecognizer {
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty NumberOfClicksRequiredProperty;
    public static BindableProperty ButtonsProperty;
    [CompilerGeneratedAttribute]
private EventHandler Clicked;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public int NumberOfClicksRequired { get; public set; }
    public ButtonsMask Buttons { get; public set; }
    private static ClickGestureRecognizer();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public int get_NumberOfClicksRequired();
    public void set_NumberOfClicksRequired(int value);
    public ButtonsMask get_Buttons();
    public void set_Buttons(ButtonsMask value);
    [CompilerGeneratedAttribute]
public void add_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Clicked(EventHandler value);
    [EditorBrowsableAttribute("1")]
public void SendClicked(View sender, ButtonsMask buttons);
}
public class Xamarin.Forms.CollectionSynchronizationCallback : MulticastDelegate {
    public CollectionSynchronizationCallback(object object, IntPtr method);
    public virtual void Invoke(IEnumerable collection, object context, Action accessMethod, bool writeAccess);
    public virtual IAsyncResult BeginInvoke(IEnumerable collection, object context, Action accessMethod, bool writeAccess, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.CollectionSynchronizationContext : object {
    [CompilerGeneratedAttribute]
private CollectionSynchronizationCallback <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference <ContextReference>k__BackingField;
    internal CollectionSynchronizationCallback Callback { get; private set; }
    internal object Context { get; }
    internal WeakReference ContextReference { get; }
    internal CollectionSynchronizationContext(object context, CollectionSynchronizationCallback callback);
    [CompilerGeneratedAttribute]
internal CollectionSynchronizationCallback get_Callback();
    [CompilerGeneratedAttribute]
private void set_Callback(CollectionSynchronizationCallback value);
    internal object get_Context();
    [CompilerGeneratedAttribute]
internal WeakReference get_ContextReference();
}
[RenderWithAttribute("Xamarin.Forms.Platform._CollectionViewRenderer")]
public class Xamarin.Forms.CollectionView : GroupableItemsView {
}
[TypeConverterAttribute("Xamarin.Forms.ColorTypeConverter")]
[DebuggerDisplayAttribute("R={R}, G={G}, B={B}, A={A}, Hue={Hue}, Saturation={Saturation}, Luminosity={Luminosity}")]
public class Xamarin.Forms.Color : ValueType {
    private Mode _mode;
    [CompilerGeneratedAttribute]
private static Color <Accent>k__BackingField;
    private float _a;
    private float _r;
    private float _g;
    private float _b;
    private float _hue;
    private float _saturation;
    private float _luminosity;
    public static Color AliceBlue;
    public static Color AntiqueWhite;
    public static Color Aqua;
    public static Color Aquamarine;
    public static Color Azure;
    public static Color Beige;
    public static Color Bisque;
    public static Color Black;
    public static Color BlanchedAlmond;
    public static Color Blue;
    public static Color BlueViolet;
    public static Color Brown;
    public static Color BurlyWood;
    public static Color CadetBlue;
    public static Color Chartreuse;
    public static Color Chocolate;
    public static Color Coral;
    public static Color CornflowerBlue;
    public static Color Cornsilk;
    public static Color Crimson;
    public static Color Cyan;
    public static Color DarkBlue;
    public static Color DarkCyan;
    public static Color DarkGoldenrod;
    public static Color DarkGray;
    public static Color DarkGreen;
    public static Color DarkKhaki;
    public static Color DarkMagenta;
    public static Color DarkOliveGreen;
    public static Color DarkOrange;
    public static Color DarkOrchid;
    public static Color DarkRed;
    public static Color DarkSalmon;
    public static Color DarkSeaGreen;
    public static Color DarkSlateBlue;
    public static Color DarkSlateGray;
    public static Color DarkTurquoise;
    public static Color DarkViolet;
    public static Color DeepPink;
    public static Color DeepSkyBlue;
    public static Color DimGray;
    public static Color DodgerBlue;
    public static Color Firebrick;
    public static Color FloralWhite;
    public static Color ForestGreen;
    public static Color Fuchsia;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Fuschia is obsolete as of version 1.3.0. Please use Fuchsia instead.")]
public static Color Fuschia;
    public static Color Gainsboro;
    public static Color GhostWhite;
    public static Color Gold;
    public static Color Goldenrod;
    public static Color Gray;
    public static Color Green;
    public static Color GreenYellow;
    public static Color Honeydew;
    public static Color HotPink;
    public static Color IndianRed;
    public static Color Indigo;
    public static Color Ivory;
    public static Color Khaki;
    public static Color Lavender;
    public static Color LavenderBlush;
    public static Color LawnGreen;
    public static Color LemonChiffon;
    public static Color LightBlue;
    public static Color LightCoral;
    public static Color LightCyan;
    public static Color LightGoldenrodYellow;
    public static Color LightGray;
    public static Color LightGreen;
    public static Color LightPink;
    public static Color LightSalmon;
    public static Color LightSeaGreen;
    public static Color LightSkyBlue;
    public static Color LightSlateGray;
    public static Color LightSteelBlue;
    public static Color LightYellow;
    public static Color Lime;
    public static Color LimeGreen;
    public static Color Linen;
    public static Color Magenta;
    public static Color Maroon;
    public static Color MediumAquamarine;
    public static Color MediumBlue;
    public static Color MediumOrchid;
    public static Color MediumPurple;
    public static Color MediumSeaGreen;
    public static Color MediumSlateBlue;
    public static Color MediumSpringGreen;
    public static Color MediumTurquoise;
    public static Color MediumVioletRed;
    public static Color MidnightBlue;
    public static Color MintCream;
    public static Color MistyRose;
    public static Color Moccasin;
    public static Color NavajoWhite;
    public static Color Navy;
    public static Color OldLace;
    public static Color Olive;
    public static Color OliveDrab;
    public static Color Orange;
    public static Color OrangeRed;
    public static Color Orchid;
    public static Color PaleGoldenrod;
    public static Color PaleGreen;
    public static Color PaleTurquoise;
    public static Color PaleVioletRed;
    public static Color PapayaWhip;
    public static Color PeachPuff;
    public static Color Peru;
    public static Color Pink;
    public static Color Plum;
    public static Color PowderBlue;
    public static Color Purple;
    public static Color Red;
    public static Color RosyBrown;
    public static Color RoyalBlue;
    public static Color SaddleBrown;
    public static Color Salmon;
    public static Color SandyBrown;
    public static Color SeaGreen;
    public static Color SeaShell;
    public static Color Sienna;
    public static Color Silver;
    public static Color SkyBlue;
    public static Color SlateBlue;
    public static Color SlateGray;
    public static Color Snow;
    public static Color SpringGreen;
    public static Color SteelBlue;
    public static Color Tan;
    public static Color Teal;
    public static Color Thistle;
    public static Color Tomato;
    public static Color Transparent;
    public static Color Turquoise;
    public static Color Violet;
    public static Color Wheat;
    public static Color White;
    public static Color WhiteSmoke;
    public static Color Yellow;
    public static Color YellowGreen;
    public static Color Default { get; }
    [EditorBrowsableAttribute("1")]
public bool IsDefault { get; }
    public static Color Accent { get; internal set; }
    public double A { get; }
    public double R { get; }
    public double G { get; }
    public double B { get; }
    public double Hue { get; }
    public double Saturation { get; }
    public double Luminosity { get; }
    public Color(double r, double g, double b, double a);
    private Color(double w, double x, double y, double z, Mode mode);
    private Color(int r, int g, int b);
    private Color(int r, int g, int b, int a);
    public Color(double r, double g, double b);
    public Color(double value);
    private static Color();
    public static Color get_Default();
    public bool get_IsDefault();
    [EditorBrowsableAttribute("1")]
public static void SetAccent(Color value);
    [CompilerGeneratedAttribute]
public static Color get_Accent();
    [CompilerGeneratedAttribute]
internal static void set_Accent(Color value);
    public double get_A();
    public double get_R();
    public double get_G();
    public double get_B();
    public double get_Hue();
    public double get_Saturation();
    public double get_Luminosity();
    public Color MultiplyAlpha(double alpha);
    public Color AddLuminosity(double delta);
    public Color WithHue(double hue);
    public Color WithSaturation(double saturation);
    public Color WithLuminosity(double luminosity);
    private static void ConvertToRgb(float hue, float saturation, float luminosity, Mode mode, Single& r, Single& g, Single& b);
    private static void ConvertToHsl(float r, float g, float b, Mode mode, Single& h, Single& s, Single& l);
    public static bool op_Equality(Color color1, Color color2);
    public static bool op_Inequality(Color color1, Color color2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static bool EqualsInner(Color color1, Color color2);
    public virtual string ToString();
    public string ToHex();
    private static UInt32 ToHex(char c);
    private static UInt32 ToHexD(char c);
    public static Color FromHex(string hex);
    public static Color FromUint(UInt32 argb);
    public static Color FromRgba(int r, int g, int b, int a);
    public static Color FromRgb(int r, int g, int b);
    public static Color FromRgba(double r, double g, double b, double a);
    public static Color FromRgb(double r, double g, double b);
    public static Color FromHsla(double h, double s, double l, double a);
    public static Color FromHsva(double h, double s, double v, double a);
    public static Color FromHsv(double h, double s, double v);
    public static Color FromHsva(int h, int s, int v, int a);
    public static Color FromHsv(int h, int s, int v);
    public static Color op_Implicit(Color color);
    public static Color op_Implicit(Color color);
}
internal static class Xamarin.Forms.ColorElement : object {
    public static BindableProperty ColorProperty;
    private static ColorElement();
}
[TypeConversionAttribute("Xamarin.Forms.Color")]
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.ColorTypeConverter")]
public class Xamarin.Forms.ColorTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
    private static double ParseColorValue(string elem, int maxValue, bool acceptPercent);
    private static double ParseOpacity(string elem);
}
public class Xamarin.Forms.ColumnDefinition : BindableObject {
    public static BindableProperty WidthProperty;
    [CompilerGeneratedAttribute]
private double <ActualWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler SizeChanged;
    public GridLength Width { get; public set; }
    internal double ActualWidth { get; internal set; }
    internal double MinimumWidth { get; internal set; }
    private static ColumnDefinition();
    public GridLength get_Width();
    public void set_Width(GridLength value);
    [CompilerGeneratedAttribute]
internal double get_ActualWidth();
    [CompilerGeneratedAttribute]
internal void set_ActualWidth(double value);
    [CompilerGeneratedAttribute]
internal double get_MinimumWidth();
    [CompilerGeneratedAttribute]
internal void set_MinimumWidth(double value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SizeChanged(EventHandler value);
    private void OnSizeChanged();
}
public class Xamarin.Forms.ColumnDefinitionCollection : DefinitionCollection`1<ColumnDefinition> {
}
[TypeConversionAttribute("Xamarin.Forms.ColumnDefinitionCollection")]
public class Xamarin.Forms.ColumnDefinitionCollectionTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.Command : object {
    private Func`2<object, bool> _canExecute;
    private Action`1<object> _execute;
    private WeakEventManager _weakEventManager;
    public Command(Action`1<object> execute);
    public Command(Action execute);
    public Command(Action`1<object> execute, Func`2<object, bool> canExecute);
    public Command(Action execute, Func`1<bool> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void Execute(object parameter);
    public void ChangeCanExecute();
}
public class Xamarin.Forms.Command`1 : Command {
    public Command`1(Action`1<T> execute);
    public Command`1(Action`1<T> execute, Func`2<T, bool> canExecute);
    private static bool IsValidParameter(object o);
}
public class Xamarin.Forms.CompareStateTrigger : StateTriggerBase {
    public static BindableProperty PropertyProperty;
    public static BindableProperty ValueProperty;
    public object Property { get; public set; }
    public object Value { get; public set; }
    private static CompareStateTrigger();
    public object get_Property();
    public void set_Property(object value);
    private static void OnPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    public object get_Value();
    public void set_Value(object value);
    private static void OnValueChanged(BindableObject bindable, object oldvalue, object newvalue);
    protected virtual void OnAttached();
    private void UpdateState();
    private bool AreEqual(object value1, object value2);
    private bool AreEqualType(object value1, object value2);
    private object ConvertToEnum(Type enumType, object value);
}
public static class Xamarin.Forms.CompressedLayout : object {
    public static BindableProperty IsHeadlessProperty;
    private static BindablePropertyKey HeadlessOffsetPropertyKey;
    [EditorBrowsableAttribute("1")]
public static BindableProperty HeadlessOffsetProperty;
    private static CompressedLayout();
    public static bool GetIsHeadless(BindableObject bindable);
    public static void SetIsHeadless(BindableObject bindable, bool value);
    private static void OnIsHeadlessPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [EditorBrowsableAttribute("1")]
public static Point GetHeadlessOffset(BindableObject bindable);
    internal static void SetHeadlessOffset(BindableObject bindable, Point value);
}
public abstract class Xamarin.Forms.Condition : object {
    private Action`3<BindableObject, bool, bool> _conditionChanged;
    private bool _isSealed;
    internal Action`3<BindableObject, bool, bool> ConditionChanged { get; internal set; }
    internal bool IsSealed { get; internal set; }
    internal Action`3<BindableObject, bool, bool> get_ConditionChanged();
    internal void set_ConditionChanged(Action`3<BindableObject, bool, bool> value);
    internal bool get_IsSealed();
    internal void set_IsSealed(bool value);
    internal abstract virtual bool GetState(BindableObject bindable);
    internal virtual void OnSealed();
    internal abstract virtual void SetUp(BindableObject bindable);
    internal abstract virtual void TearDown(BindableObject bindable);
}
public class Xamarin.Forms.Configuration`2 : object {
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    public TElement Element { get; }
    public Configuration`2(TElement element);
    [CompilerGeneratedAttribute]
public sealed virtual TElement get_Element();
    public static Configuration`2<TPlatform, TElement> Create(TElement element);
}
[TypeConverterAttribute("Xamarin.Forms.ConstraintTypeConverter")]
public class Xamarin.Forms.Constraint : object {
    private Func`2<RelativeLayout, double> _measureFunc;
    [CompilerGeneratedAttribute]
private IEnumerable`1<View> <RelativeTo>k__BackingField;
    internal IEnumerable`1<View> RelativeTo { get; internal set; }
    [CompilerGeneratedAttribute]
internal IEnumerable`1<View> get_RelativeTo();
    [CompilerGeneratedAttribute]
internal void set_RelativeTo(IEnumerable`1<View> value);
    public static Constraint Constant(double size);
    public static Constraint FromExpression(Expression`1<Func`1<double>> expression);
    public static Constraint RelativeToParent(Func`2<RelativeLayout, double> measure);
    public static Constraint RelativeToView(View view, Func`3<RelativeLayout, View, double> measure);
    internal double Compute(RelativeLayout parent);
}
public class Xamarin.Forms.ConstraintExpression : object {
    [CompilerGeneratedAttribute]
private double <Constant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Factor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstraintType <Type>k__BackingField;
    public double Constant { get; public set; }
    public string ElementName { get; public set; }
    public double Factor { get; public set; }
    public string Property { get; public set; }
    public ConstraintType Type { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Constant();
    [CompilerGeneratedAttribute]
public void set_Constant(double value);
    [CompilerGeneratedAttribute]
public string get_ElementName();
    [CompilerGeneratedAttribute]
public void set_ElementName(string value);
    [CompilerGeneratedAttribute]
public double get_Factor();
    [CompilerGeneratedAttribute]
public void set_Factor(double value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public ConstraintType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ConstraintType value);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual Constraint ProvideValue(IServiceProvider serviceProvider);
}
public enum Xamarin.Forms.ConstraintType : Enum {
    public int value__;
    public static ConstraintType RelativeToParent;
    public static ConstraintType RelativeToView;
    public static ConstraintType Constant;
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.ConstraintTypeConverter")]
[TypeConversionAttribute("Xamarin.Forms.Constraint")]
public class Xamarin.Forms.ConstraintTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[ContentPropertyAttribute("Content")]
public class Xamarin.Forms.ContentPage : TemplatedPage {
    public static BindableProperty ContentProperty;
    public View Content { get; public set; }
    private static ContentPage();
    public View get_Content();
    public void set_Content(View value);
    protected virtual void OnBindingContextChanged();
    internal virtual void OnControlTemplateChanged(ControlTemplate oldValue, ControlTemplate newValue);
}
public class Xamarin.Forms.ContentPresenter : Layout {
    public static BindableProperty ContentProperty;
    public View Content { get; public set; }
    private static ContentPresenter();
    public View get_Content();
    public void set_Content(View value);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    internal virtual void Clear();
    internal virtual void ComputeConstraintForView(View view);
    internal virtual void SetChildInheritedBindingContext(Element child, object context);
    [AsyncStateMachineAttribute("Xamarin.Forms.ContentPresenter/<OnContentChanged>d__10")]
private static void OnContentChanged(BindableObject bindable, object oldValue, object newValue);
}
[AttributeUsageAttribute("4")]
public class Xamarin.Forms.ContentPropertyAttribute : Attribute {
    internal static String[] ContentPropertyTypes;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ContentPropertyAttribute(string name);
    private static ContentPropertyAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
}
[ContentPropertyAttribute("Content")]
public class Xamarin.Forms.ContentView : TemplatedView {
    public static BindableProperty ContentProperty;
    public View Content { get; public set; }
    private static ContentView();
    public View get_Content();
    public void set_Content(View value);
    protected virtual void OnBindingContextChanged();
    internal virtual void OnControlTemplateChanged(ControlTemplate oldValue, ControlTemplate newValue);
}
public class Xamarin.Forms.ControlTemplate : ElementTemplate {
    public ControlTemplate(Type type);
}
internal static class Xamarin.Forms.Core.Markup.Markup : object {
    private static bool isExperimentalFlagSet;
    internal static void VerifyExperimental(string memberName, string constructorHint);
    internal static void ClearExperimental();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Core.ShellExtensions : object {
    [ExtensionAttribute]
public static T SearchForRoute(Shell shell, string route);
    [ExtensionAttribute]
public static BaseShellItem SearchForRoute(Shell shell, string route);
    [ExtensionAttribute]
public static T SearchForRoute(BaseShellItem shell, string route);
    [ExtensionAttribute]
public static BaseShellItem SearchForRoute(BaseShellItem shell, string route);
    [ExtensionAttribute]
public static BaseShellItem SearchForPart(IShellController shell, Func`2<BaseShellItem, bool> searchBy);
    [ExtensionAttribute]
public static BaseShellItem SearchForPart(BaseShellItem part, Func`2<BaseShellItem, bool> searchBy);
}
internal static class Xamarin.Forms.CornerElement : object {
    public static BindableProperty CornerRadiusProperty;
    private static CornerElement();
}
[TypeConverterAttribute("Xamarin.Forms.CornerRadiusTypeConverter")]
[DebuggerDisplayAttribute("TopLeft={TopLeft}, TopRight={TopRight}, BottomLeft={BottomLeft}, BottomRight={BottomRight}")]
public class Xamarin.Forms.CornerRadius : ValueType {
    private bool _isParameterized;
    [CompilerGeneratedAttribute]
private double <TopLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TopRight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BottomLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BottomRight>k__BackingField;
    public double TopLeft { get; }
    public double TopRight { get; }
    public double BottomLeft { get; }
    public double BottomRight { get; }
    public CornerRadius(double uniformRadius);
    public CornerRadius(double topLeft, double topRight, double bottomLeft, double bottomRight);
    [CompilerGeneratedAttribute]
public double get_TopLeft();
    [CompilerGeneratedAttribute]
public double get_TopRight();
    [CompilerGeneratedAttribute]
public double get_BottomLeft();
    [CompilerGeneratedAttribute]
public double get_BottomRight();
    public static CornerRadius op_Implicit(double uniformRadius);
    private bool Equals(CornerRadius other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CornerRadius left, CornerRadius right);
    public static bool op_Inequality(CornerRadius left, CornerRadius right);
    public void Deconstruct(Double& topLeft, Double& topRight, Double& bottomLeft, Double& bottomRight);
}
[TypeConversionAttribute("Xamarin.Forms.CornerRadius")]
public class Xamarin.Forms.CornerRadiusTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.CurrentItemChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <PreviousItem>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CurrentItem>k__BackingField;
    public object PreviousItem { get; }
    public object CurrentItem { get; }
    internal CurrentItemChangedEventArgs(object previousItem, object currentItem);
    [CompilerGeneratedAttribute]
public object get_PreviousItem();
    [CompilerGeneratedAttribute]
public object get_CurrentItem();
}
public class Xamarin.Forms.DataPackage : object {
    [CompilerGeneratedAttribute]
private DataPackagePropertySet <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPackagePropertySet <PropertiesInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public DataPackagePropertySet Properties { get; }
    internal DataPackagePropertySet PropertiesInternal { get; }
    public ImageSource Image { get; public set; }
    public string Text { get; public set; }
    public DataPackageView View { get; }
    [CompilerGeneratedAttribute]
public DataPackagePropertySet get_Properties();
    [CompilerGeneratedAttribute]
internal DataPackagePropertySet get_PropertiesInternal();
    [CompilerGeneratedAttribute]
public ImageSource get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(ImageSource value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public DataPackageView get_View();
    internal DataPackage Clone();
}
[FlagsAttribute]
public enum Xamarin.Forms.DataPackageOperation : Enum {
    public int value__;
    public static DataPackageOperation None;
    public static DataPackageOperation Copy;
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.DataPackagePropertySet : object {
    private Dictionary`2<string, object> _propertyBag;
    public object Item { get; public set; }
    public int Count { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<object> Values { get; }
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public int get_Count();
    public IEnumerable`1<string> get_Keys();
    public IEnumerable`1<object> get_Values();
    public void Add(string key, object value);
    public bool ContainsKey(string key);
    public IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public bool TryGetValue(string key, Object& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.DataPackagePropertySetView : object {
    public DataPackagePropertySet _dataPackagePropertySet;
    public object Item { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<object> Values { get; }
    public int Count { get; }
    public DataPackagePropertySetView(DataPackagePropertySet dataPackagePropertySet);
    public sealed virtual object get_Item(string key);
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual IEnumerable`1<object> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Xamarin.Forms.DataPackageView : object {
    [CompilerGeneratedAttribute]
private DataPackage <DataPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPackagePropertySetView <PropertiesInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPackagePropertySetView <Properties>k__BackingField;
    private DataPackage DataPackage { get; }
    internal DataPackagePropertySetView PropertiesInternal { get; }
    public DataPackagePropertySetView Properties { get; }
    internal DataPackageView(DataPackage dataPackage);
    [CompilerGeneratedAttribute]
private DataPackage get_DataPackage();
    [CompilerGeneratedAttribute]
internal DataPackagePropertySetView get_PropertiesInternal();
    [CompilerGeneratedAttribute]
public DataPackagePropertySetView get_Properties();
    public Task`1<ImageSource> GetImageAsync();
    public Task`1<string> GetTextAsync();
}
public class Xamarin.Forms.DataTemplate : ElementTemplate {
    private static int idCounter;
    private int _id;
    private string _idString;
    [CompilerGeneratedAttribute]
private IDictionary`2<BindableProperty, BindingBase> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<BindableProperty, object> <Values>k__BackingField;
    public IDictionary`2<BindableProperty, BindingBase> Bindings { get; }
    public IDictionary`2<BindableProperty, object> Values { get; }
    private string Xamarin.Forms.Internals.IDataTemplateController.IdString { get; }
    private int Xamarin.Forms.Internals.IDataTemplateController.Id { get; }
    public DataTemplate(Type type);
    public DataTemplate(Func`1<object> loadTemplate);
    private static DataTemplate();
    [CompilerGeneratedAttribute]
public IDictionary`2<BindableProperty, BindingBase> get_Bindings();
    [CompilerGeneratedAttribute]
public IDictionary`2<BindableProperty, object> get_Values();
    private sealed virtual override string Xamarin.Forms.Internals.IDataTemplateController.get_IdString();
    private sealed virtual override int Xamarin.Forms.Internals.IDataTemplateController.get_Id();
    public void SetBinding(BindableProperty property, BindingBase binding);
    public void SetValue(BindableProperty property, object value);
    internal virtual void SetupContent(object item);
    private void ApplyBindings(object item);
    private void ApplyValues(object item);
}
public abstract class Xamarin.Forms.DataTemplateSelector : DataTemplate {
    private Dictionary`2<Type, DataTemplate> _dataTemplates;
    public DataTemplate SelectTemplate(object item, BindableObject container);
    protected abstract virtual DataTemplate OnSelectTemplate(object item, BindableObject container);
}
[ContentPropertyAttribute("Setters")]
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.PassthroughValueProvider")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.DataTrigger : TriggerBase {
    public BindingBase Binding { get; public set; }
    public IList`1<Setter> Setters { get; }
    public object Value { get; public set; }
    public DataTrigger(Type targetType);
    public BindingBase get_Binding();
    public void set_Binding(BindingBase value);
    public IList`1<Setter> get_Setters();
    public object get_Value();
    public void set_Value(object value);
    private sealed virtual override object Xamarin.Forms.Xaml.IValueProvider.ProvideValue(IServiceProvider serviceProvider);
}
public class Xamarin.Forms.DateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <NewDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <OldDate>k__BackingField;
    public DateTime NewDate { get; private set; }
    public DateTime OldDate { get; private set; }
    public DateChangedEventArgs(DateTime oldDate, DateTime newDate);
    [CompilerGeneratedAttribute]
public DateTime get_NewDate();
    [CompilerGeneratedAttribute]
private void set_NewDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_OldDate();
    [CompilerGeneratedAttribute]
private void set_OldDate(DateTime value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._DatePickerRenderer")]
public class Xamarin.Forms.DatePicker : View {
    public static BindableProperty FormatProperty;
    public static BindableProperty DateProperty;
    public static BindableProperty MinimumDateProperty;
    public static BindableProperty MaximumDateProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty TextTransformProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<DatePicker>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateChangedEventArgs> DateSelected;
    public DateTime Date { get; public set; }
    public string Format { get; public set; }
    public TextTransform TextTransform { get; public set; }
    public DateTime MaximumDate { get; public set; }
    public DateTime MinimumDate { get; public set; }
    public Color TextColor { get; public set; }
    public double CharacterSpacing { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    private static DatePicker();
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public string get_Format();
    public void set_Format(string value);
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    public DateTime get_MaximumDate();
    public void set_MaximumDate(DateTime value);
    public DateTime get_MinimumDate();
    public void set_MinimumDate(DateTime value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    public virtual string UpdateFormsText(string source, TextTransform textTransform);
    [CompilerGeneratedAttribute]
public void add_DateSelected(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DateSelected(EventHandler`1<DateChangedEventArgs> value);
    private static object CoerceDate(BindableObject bindable, object value);
    private static object CoerceMaximumDate(BindableObject bindable, object value);
    private static object CoerceMinimumDate(BindableObject bindable, object value);
    private static void DatePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static bool ValidateMaximumDate(BindableObject bindable, object value);
    private static bool ValidateMinimumDate(BindableObject bindable, object value);
    public sealed virtual IPlatformElementConfiguration`2<T, DatePicker> On();
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<DatePicker> <.ctor>b__11_0();
}
internal static class Xamarin.Forms.DecorableTextElement : object {
    public static BindableProperty TextDecorationsProperty;
    private static DecorableTextElement();
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.DefinitionCollection`1 : object {
    private List`1<T> _internalList;
    [CompilerGeneratedAttribute]
private EventHandler ItemSizeChanged;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void RemoveAt(int index);
    [CompilerGeneratedAttribute]
public void add_ItemSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ItemSizeChanged(EventHandler value);
    private void OnItemSizeChanged(object sender, EventArgs e);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.DependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Implementor>k__BackingField;
    internal Type Implementor { get; private set; }
    public DependencyAttribute(Type implementorType);
    [CompilerGeneratedAttribute]
internal Type get_Implementor();
    [CompilerGeneratedAttribute]
private void set_Implementor(Type value);
}
public enum Xamarin.Forms.DependencyFetchTarget : Enum {
    public int value__;
    public static DependencyFetchTarget GlobalInstance;
    public static DependencyFetchTarget NewInstance;
}
public static class Xamarin.Forms.DependencyService : object {
    private static bool s_initialized;
    private static object s_dependencyLock;
    private static object s_initializeLock;
    private static List`1<Type> DependencyTypes;
    private static Dictionary`2<Type, DependencyData> DependencyImplementations;
    private static DependencyService();
    public static T Resolve(DependencyFetchTarget fallbackFetchTarget);
    public static T Get(DependencyFetchTarget fetchTarget);
    public static void Register();
    public static void Register();
    public static void RegisterSingleton(T instance);
    private static Type FindImplementor(Type target);
    private static void Initialize();
    internal static void Initialize(Assembly[] assemblies);
}
public static class Xamarin.Forms.DesignMode : object {
    [CompilerGeneratedAttribute]
private static bool <IsDesignModeEnabled>k__BackingField;
    public static bool IsDesignModeEnabled { get; internal set; }
    [CompilerGeneratedAttribute]
public static bool get_IsDesignModeEnabled();
    [CompilerGeneratedAttribute]
internal static void set_IsDesignModeEnabled(bool value);
}
public static class Xamarin.Forms.Device : object {
    public static string iOS;
    public static string Android;
    public static string UWP;
    public static string macOS;
    public static string GTK;
    public static string Tizen;
    public static string WPF;
    [EditorBrowsableAttribute("1")]
public static DeviceInfo info;
    private static IPlatformServices s_platformServices;
    [CompilerGeneratedAttribute]
private static TargetIdiom <Idiom>k__BackingField;
    [CompilerGeneratedAttribute]
private static FlowDirection <FlowDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private static IReadOnlyList`1<string> <Flags>k__BackingField;
    public static TargetIdiom Idiom { get; internal set; }
    [ObsoleteAttribute("TargetPlatform is obsolete as of version 2.3.4. Please use RuntimePlatform instead.")]
[EditorBrowsableAttribute("1")]
public static TargetPlatform OS { get; }
    public static string RuntimePlatform { get; }
    [EditorBrowsableAttribute("1")]
public static DeviceInfo Info { get; public set; }
    public static FlowDirection FlowDirection { get; internal set; }
    [EditorBrowsableAttribute("1")]
public static bool IsInvokeRequired { get; }
    [EditorBrowsableAttribute("1")]
public static IPlatformServices PlatformServices { get; public set; }
    [EditorBrowsableAttribute("1")]
public static IReadOnlyList`1<string> Flags { get; private set; }
    [EditorBrowsableAttribute("1")]
public static void SetIdiom(TargetIdiom value);
    [CompilerGeneratedAttribute]
public static TargetIdiom get_Idiom();
    [CompilerGeneratedAttribute]
internal static void set_Idiom(TargetIdiom value);
    [EditorBrowsableAttribute("1")]
public static void SetTargetIdiom(TargetIdiom value);
    public static TargetPlatform get_OS();
    public static string get_RuntimePlatform();
    public static DeviceInfo get_Info();
    public static void set_Info(DeviceInfo value);
    [EditorBrowsableAttribute("1")]
public static void SetFlowDirection(FlowDirection value);
    [CompilerGeneratedAttribute]
public static FlowDirection get_FlowDirection();
    [CompilerGeneratedAttribute]
internal static void set_FlowDirection(FlowDirection value);
    public static bool get_IsInvokeRequired();
    public static IPlatformServices get_PlatformServices();
    public static void set_PlatformServices(IPlatformServices value);
    [CompilerGeneratedAttribute]
public static IReadOnlyList`1<string> get_Flags();
    [CompilerGeneratedAttribute]
private static void set_Flags(IReadOnlyList`1<string> value);
    [EditorBrowsableAttribute("1")]
public static void SetFlags(IReadOnlyList`1<string> flags);
    public static void BeginInvokeOnMainThread(Action action);
    public static Task`1<T> InvokeOnMainThreadAsync(Func`1<T> func);
    public static Task InvokeOnMainThreadAsync(Action action);
    public static Task`1<T> InvokeOnMainThreadAsync(Func`1<Task`1<T>> funcTask);
    public static Task InvokeOnMainThreadAsync(Func`1<Task> funcTask);
    [AsyncStateMachineAttribute("Xamarin.Forms.Device/<GetMainThreadSynchronizationContextAsync>d__42")]
public static Task`1<SynchronizationContext> GetMainThreadSynchronizationContextAsync();
    public static double GetNamedSize(NamedSize size, Element targetElement);
    public static double GetNamedSize(NamedSize size, Type targetElementType);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OnPlatform is obsolete as of version 2.3.4. Please use 'switch (Device.RuntimePlatform)' instead.")]
public static void OnPlatform(Action iOS, Action Android, Action WinPhone, Action Default);
    [ObsoleteAttribute("OnPlatform<> (generic) is obsolete as of version 2.3.4. Please use 'switch (Device.RuntimePlatform)' instead.")]
[EditorBrowsableAttribute("1")]
public static T OnPlatform(T iOS, T Android, T WinPhone);
    [ObsoleteAttribute("OpenUri is obsolete as of version 4.3.0. Use Launcher.OpenAsync (or CanOpenAsync, or TryOpenAsync) from Xamarin.Essentials instead.")]
public static void OpenUri(Uri uri);
    public static void StartTimer(TimeSpan interval, Func`1<bool> callback);
    [EditorBrowsableAttribute("1")]
public static Assembly[] GetAssemblies();
    [EditorBrowsableAttribute("1")]
public static double GetNamedSize(NamedSize size, Type targetElementType, bool useOldSizes);
    public static Color GetNamedColor(string name);
    internal static Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken);
}
public class Xamarin.Forms.DeviceStateTrigger : StateTriggerBase {
    public static BindableProperty DeviceProperty;
    public string Device { get; public set; }
    private static DeviceStateTrigger();
    public string get_Device();
    public void set_Device(string value);
    private static void OnDeviceChanged(BindableObject bindable, object oldvalue, object newvalue);
    private void UpdateState();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.DispatcherExtensions : object {
    private static IDispatcherProvider s_current;
    private static IDispatcher s_default;
    [ExtensionAttribute]
public static IDispatcher GetDispatcher(BindableObject bindableObject);
    [ExtensionAttribute]
public static void Dispatch(IDispatcher dispatcher, Action action);
}
[TypeConverterAttribute("Xamarin.Forms.DoubleCollectionConverter")]
public class Xamarin.Forms.DoubleCollection : ObservableCollection`1<double> {
}
public class Xamarin.Forms.DoubleCollectionConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.DragEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataPackage <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPackageOperation <AcceptedOperation>k__BackingField;
    public DataPackage Data { get; }
    public DataPackageOperation AcceptedOperation { get; public set; }
    public DragEventArgs(DataPackage dataPackage);
    [CompilerGeneratedAttribute]
public DataPackage get_Data();
    [CompilerGeneratedAttribute]
public DataPackageOperation get_AcceptedOperation();
    [CompilerGeneratedAttribute]
public void set_AcceptedOperation(DataPackageOperation value);
}
public class Xamarin.Forms.DragGestureRecognizer : GestureRecognizer {
    public static BindableProperty CanDragProperty;
    public static BindableProperty DropCompletedCommandProperty;
    public static BindableProperty DropCompletedCommandParameterProperty;
    public static BindableProperty DragStartingCommandProperty;
    public static BindableProperty DragStartingCommandParameterProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<DropCompletedEventArgs> DropCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<DragStartingEventArgs> DragStarting;
    public bool CanDrag { get; public set; }
    public ICommand DropCompletedCommand { get; public set; }
    public object DropCompletedCommandParameter { get; public set; }
    public ICommand DragStartingCommand { get; public set; }
    public object DragStartingCommandParameter { get; public set; }
    private static DragGestureRecognizer();
    [CompilerGeneratedAttribute]
public void add_DropCompleted(EventHandler`1<DropCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DropCompleted(EventHandler`1<DropCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DragStarting(EventHandler`1<DragStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DragStarting(EventHandler`1<DragStartingEventArgs> value);
    public bool get_CanDrag();
    public void set_CanDrag(bool value);
    public ICommand get_DropCompletedCommand();
    public void set_DropCompletedCommand(ICommand value);
    public object get_DropCompletedCommandParameter();
    public void set_DropCompletedCommandParameter(object value);
    public ICommand get_DragStartingCommand();
    public void set_DragStartingCommand(ICommand value);
    public object get_DragStartingCommandParameter();
    public void set_DragStartingCommandParameter(object value);
    [EditorBrowsableAttribute("1")]
public void SendDropCompleted(DropCompletedEventArgs args);
    [EditorBrowsableAttribute("1")]
public DragStartingEventArgs SendDragStarting(VisualElement element);
    private void SendDragStarting(DragStartingEventArgs args, VisualElement element);
}
public class Xamarin.Forms.DragStartingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPackage <Data>k__BackingField;
    public bool Handled { get; public set; }
    public bool Cancel { get; public set; }
    public DataPackage Data { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    [CompilerGeneratedAttribute]
public DataPackage get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(DataPackage value);
}
public class Xamarin.Forms.DropCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataPackageOperation <DropResult>k__BackingField;
    private DataPackageOperation DropResult { get; }
    [CompilerGeneratedAttribute]
private DataPackageOperation get_DropResult();
}
public class Xamarin.Forms.DropEventArgs : object {
    [CompilerGeneratedAttribute]
private DataPackageView <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public DataPackageView Data { get; }
    public bool Handled { get; public set; }
    public DropEventArgs(DataPackageView view);
    [CompilerGeneratedAttribute]
public DataPackageView get_Data();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class Xamarin.Forms.DropGestureRecognizer : GestureRecognizer {
    public static BindableProperty AllowDropProperty;
    public static BindableProperty DragOverCommandProperty;
    public static BindableProperty DragOverCommandParameterProperty;
    public static BindableProperty DropCommandProperty;
    public static BindableProperty DropCommandParameterProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<DragEventArgs> DragOver;
    [CompilerGeneratedAttribute]
private EventHandler`1<DropEventArgs> Drop;
    public bool AllowDrop { get; public set; }
    public ICommand DragOverCommand { get; public set; }
    public object DragOverCommandParameter { get; public set; }
    public ICommand DropCommand { get; public set; }
    public object DropCommandParameter { get; public set; }
    private static DropGestureRecognizer();
    [CompilerGeneratedAttribute]
public void add_DragOver(EventHandler`1<DragEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DragOver(EventHandler`1<DragEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Drop(EventHandler`1<DropEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Drop(EventHandler`1<DropEventArgs> value);
    public bool get_AllowDrop();
    public void set_AllowDrop(bool value);
    public ICommand get_DragOverCommand();
    public void set_DragOverCommand(ICommand value);
    public object get_DragOverCommandParameter();
    public void set_DragOverCommandParameter(object value);
    public ICommand get_DropCommand();
    public void set_DropCommand(ICommand value);
    public object get_DropCommandParameter();
    public void set_DropCommandParameter(object value);
    [EditorBrowsableAttribute("1")]
public void SendDragOver(DragEventArgs args);
    [AsyncStateMachineAttribute("Xamarin.Forms.DropGestureRecognizer/<SendDrop>d__28")]
[EditorBrowsableAttribute("1")]
public Task SendDrop(DropEventArgs args, VisualElement element);
}
internal interface Xamarin.Forms.DualScreen.IDualScreenService {
    public bool IsSpanned { get; }
    public bool IsLandscape { get; }
    public Size ScaledScreenSize { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnScreenChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnScreenChanged(EventHandler value);
    public abstract virtual bool get_IsSpanned();
    public abstract virtual bool get_IsLandscape();
    public abstract virtual Rectangle GetHinge();
    public abstract virtual Size get_ScaledScreenSize();
    public abstract virtual Nullable`1<Point> GetLocationOnScreen(VisualElement visualElement);
    public abstract virtual object WatchForChangesOnLayout(VisualElement visualElement, Action action);
    public abstract virtual void StopWatchingForChangesOnLayout(VisualElement visualElement, object handle);
    public abstract virtual Task`1<int> GetHingeAngleAsync();
}
public class Xamarin.Forms.Easing : object {
    public static Easing Linear;
    public static Easing SinOut;
    public static Easing SinIn;
    public static Easing SinInOut;
    public static Easing CubicIn;
    public static Easing CubicOut;
    public static Easing CubicInOut;
    public static Easing BounceOut;
    public static Easing BounceIn;
    public static Easing SpringIn;
    public static Easing SpringOut;
    private Func`2<double, double> _easingFunc;
    private static Easing();
    public Easing(Func`2<double, double> easingFunc);
    public double Ease(double v);
    public static Easing op_Implicit(Func`2<double, double> func);
}
[RenderWithAttribute("Xamarin.Forms.Platform._EditorRenderer")]
public class Xamarin.Forms.Editor : InputView {
    public static BindableProperty TextProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty PlaceholderColorProperty;
    public static BindableProperty IsTextPredictionEnabledProperty;
    public static BindableProperty AutoSizeProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Editor>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler Completed;
    public EditorAutoSizeOption AutoSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public bool IsTextPredictionEnabled { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    private static Editor();
    public EditorAutoSizeOption get_AutoSize();
    public void set_AutoSize(EditorAutoSizeOption value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public bool get_IsTextPredictionEnabled();
    public void set_IsTextPredictionEnabled(bool value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    protected void UpdateAutoSizeOption();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler value);
    public sealed virtual IPlatformElementConfiguration`2<T, Editor> On();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendCompleted();
    protected virtual void OnTextChanged(string oldValue, string newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Editor> <.ctor>b__35_0();
}
public enum Xamarin.Forms.EditorAutoSizeOption : Enum {
    public int value__;
    public static EditorAutoSizeOption Disabled;
    public static EditorAutoSizeOption TextChanges;
}
public abstract class Xamarin.Forms.Effect : object {
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolveId>k__BackingField;
    public Element Element { get; internal set; }
    public bool IsAttached { get; private set; }
    public string ResolveId { get; internal set; }
    [CompilerGeneratedAttribute]
public Element get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(Element value);
    [CompilerGeneratedAttribute]
public bool get_IsAttached();
    [CompilerGeneratedAttribute]
private void set_IsAttached(bool value);
    [CompilerGeneratedAttribute]
public string get_ResolveId();
    [CompilerGeneratedAttribute]
internal void set_ResolveId(string value);
    public static Effect Resolve(string name);
    protected abstract virtual void OnAttached();
    protected abstract virtual void OnDetached();
    internal virtual void ClearEffect();
    internal virtual void SendAttached();
    internal virtual void SendDetached();
    internal virtual void SendOnElementPropertyChanged(PropertyChangedEventArgs args);
}
[FlagsAttribute]
public enum Xamarin.Forms.EffectiveFlowDirection : Enum {
    public int value__;
    public static EffectiveFlowDirection RightToLeft;
    public static EffectiveFlowDirection Explicit;
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static class Xamarin.Forms.EffectiveFlowDirectionExtensions : object {
    [ExtensionAttribute]
internal static EffectiveFlowDirection ToEffectiveFlowDirection(FlowDirection self, bool isExplicit);
    [ExtensionAttribute]
internal static FlowDirection ToFlowDirection(EffectiveFlowDirection self);
    [ExtensionAttribute]
public static bool IsRightToLeft(EffectiveFlowDirection self);
    [ExtensionAttribute]
public static bool IsLeftToRight(EffectiveFlowDirection self);
    [ExtensionAttribute]
public static bool IsImplicit(EffectiveFlowDirection self);
    [ExtensionAttribute]
public static bool IsExplicit(EffectiveFlowDirection self);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.EffectiveVisualExtensions : object {
    [ExtensionAttribute]
public static bool IsDefault(IVisual visual);
    [ExtensionAttribute]
public static bool IsMatchParent(IVisual visual);
    [ExtensionAttribute]
public static bool IsMaterial(IVisual visual);
}
public abstract class Xamarin.Forms.Element : BindableObject {
    public static BindableProperty MenuProperty;
    internal static ReadOnlyCollection`1<Element> EmptyChildren;
    public static BindableProperty AutomationIdProperty;
    public static BindableProperty ClassIdProperty;
    private IList`1<BindableObject> _bindableResources;
    private List`1<Action`2<object, ResourcesChangedEventArgs>> _changeHandlers;
    private Dictionary`2<BindableProperty, string> _dynamicResources;
    private IEffectControlProvider _effectControlProvider;
    private TrackableCollection`1<Effect> _effects;
    private Nullable`1<Guid> _id;
    private Element _parentOverride;
    private string _styleId;
    [CompilerGeneratedAttribute]
private bool <Owned>k__BackingField;
    [CompilerGeneratedAttribute]
private Element <RealParent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTemplateRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementEventArgs> ChildAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementEventArgs> ChildRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementEventArgs> DescendantAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementEventArgs> DescendantRemoved;
    [CompilerGeneratedAttribute]
private EventHandler ParentSet;
    private IPlatform _platform;
    [CompilerGeneratedAttribute]
private EventHandler PlatformSet;
    internal string _cssFallbackTypeName;
    private String[] _styleSelectableNameAndBaseNames;
    public string AutomationId { get; public set; }
    public string ClassId { get; public set; }
    public IList`1<Effect> Effects { get; }
    public Guid Id { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ParentView is obsolete as of version 2.1.0. Please use Parent instead.")]
public VisualElement ParentView { get; }
    public string StyleId { get; public set; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    internal IEnumerable`1<Element> AllChildren { get; }
    internal IEnumerable`1<Element> ChildrenNotDrawnByThisElement { get; }
    [EditorBrowsableAttribute("1")]
public ReadOnlyCollection`1<Element> LogicalChildren { get; }
    internal bool Owned { get; internal set; }
    internal Element ParentOverride { get; internal set; }
    [EditorBrowsableAttribute("1")]
public Element RealParent { get; private set; }
    private Dictionary`2<BindableProperty, string> DynamicResources { get; }
    public Element Parent { get; public set; }
    internal bool IsTemplateRoot { get; internal set; }
    [EditorBrowsableAttribute("1")]
public IEffectControlProvider EffectControlProvider { get; public set; }
    [ObsoleteAttribute("IPlatform is obsolete as of 3.5.0. Do not use this property.")]
[EditorBrowsableAttribute("1")]
public IPlatform Platform { get; public set; }
    private IEnumerable`1<IStyleSelectable> Xamarin.Forms.StyleSheets.IStyleSelectable.Children { get; }
    private IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.Classes { get; }
    private string Xamarin.Forms.StyleSheets.IStyleSelectable.Id { get; }
    private String[] Xamarin.Forms.StyleSheets.IStyleSelectable.NameAndBases { get; }
    private IStyleSelectable Xamarin.Forms.StyleSheets.IStyleSelectable.Parent { get; }
    private static Element();
    public static Menu GetMenu(BindableObject bindable);
    public static void SetMenu(BindableObject bindable, Menu menu);
    public string get_AutomationId();
    public void set_AutomationId(string value);
    public string get_ClassId();
    public void set_ClassId(string value);
    public IList`1<Effect> get_Effects();
    public Guid get_Id();
    public VisualElement get_ParentView();
    public string get_StyleId();
    public void set_StyleId(string value);
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    [IteratorStateMachineAttribute("Xamarin.Forms.Element/<get_AllChildren>d__32")]
internal IEnumerable`1<Element> get_AllChildren();
    internal virtual IEnumerable`1<Element> get_ChildrenNotDrawnByThisElement();
    public sealed virtual ReadOnlyCollection`1<Element> get_LogicalChildren();
    [CompilerGeneratedAttribute]
internal bool get_Owned();
    [CompilerGeneratedAttribute]
internal void set_Owned(bool value);
    internal Element get_ParentOverride();
    internal void set_ParentOverride(Element value);
    [CompilerGeneratedAttribute]
public sealed virtual Element get_RealParent();
    [CompilerGeneratedAttribute]
private void set_RealParent(Element value);
    private Dictionary`2<BindableProperty, string> get_DynamicResources();
    private sealed virtual override void Xamarin.Forms.IElement.AddResourcesChangedListener(Action`2<object, ResourcesChangedEventArgs> onchanged);
    public sealed virtual Element get_Parent();
    public sealed virtual void set_Parent(Element value);
    [CompilerGeneratedAttribute]
internal bool get_IsTemplateRoot();
    [CompilerGeneratedAttribute]
internal void set_IsTemplateRoot(bool value);
    private sealed virtual override void Xamarin.Forms.IElement.RemoveResourcesChangedListener(Action`2<object, ResourcesChangedEventArgs> onchanged);
    public sealed virtual IEffectControlProvider get_EffectControlProvider();
    public sealed virtual void set_EffectControlProvider(IEffectControlProvider value);
    private sealed virtual override void Xamarin.Forms.IElementController.SetValueFromRenderer(BindableProperty property, object value);
    [EditorBrowsableAttribute("1")]
public void SetValueFromRenderer(BindableProperty property, object value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SetValueFromRenderer(BindablePropertyKey property, object value);
    [EditorBrowsableAttribute("1")]
public sealed virtual bool EffectIsAttached(string name);
    public sealed virtual object FindByName(string name);
    private sealed virtual override void Xamarin.Forms.Internals.INameScope.RegisterName(string name, object scopedElement);
    [CompilerGeneratedAttribute]
public void add_ChildAdded(EventHandler`1<ElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildAdded(EventHandler`1<ElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ChildRemoved(EventHandler`1<ElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildRemoved(EventHandler`1<ElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DescendantAdded(EventHandler`1<ElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DescendantAdded(EventHandler`1<ElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DescendantRemoved(EventHandler`1<ElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DescendantRemoved(EventHandler`1<ElementEventArgs> value);
    public void RemoveDynamicResource(BindableProperty property);
    public void SetDynamicResource(BindableProperty property, string key);
    protected virtual void OnBindingContextChanged();
    protected virtual void OnChildAdded(Element child);
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    protected virtual void OnParentSet();
    protected virtual void OnPropertyChanged(string propertyName);
    [IteratorStateMachineAttribute("Xamarin.Forms.Element/<Descendants>d__88")]
[EditorBrowsableAttribute("1")]
public sealed virtual IEnumerable`1<Element> Descendants();
    internal virtual void OnParentResourcesChanged(object sender, ResourcesChangedEventArgs e);
    internal virtual void OnParentResourcesChanged(IEnumerable`1<KeyValuePair`2<string, object>> values);
    internal virtual void OnRemoveDynamicResource(BindableProperty property);
    internal virtual void OnResourcesChanged(object sender, ResourcesChangedEventArgs e);
    internal void OnResourcesChanged(IEnumerable`1<KeyValuePair`2<string, object>> values);
    internal virtual void OnSetDynamicResource(BindableProperty property, string key);
    [CompilerGeneratedAttribute]
internal void add_ParentSet(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ParentSet(EventHandler value);
    internal virtual void SetChildInheritedBindingContext(Element child, object context);
    [IteratorStateMachineAttribute("Xamarin.Forms.Element/<VisibleDescendants>d__99")]
internal IEnumerable`1<Element> VisibleDescendants();
    private void AttachEffect(Effect effect);
    private void EffectsOnClearing(object sender, EventArgs eventArgs);
    private void EffectsOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal INameScope GetNameScope();
    private void OnDescendantAdded(Element child);
    private void OnDescendantRemoved(Element child);
    private void OnResourceChanged(BindableProperty property, object value);
    public sealed virtual IPlatform get_Platform();
    public sealed virtual void set_Platform(IPlatform value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PlatformSet(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PlatformSet(EventHandler value);
    private sealed virtual override IEnumerable`1<IStyleSelectable> Xamarin.Forms.StyleSheets.IStyleSelectable.get_Children();
    private sealed virtual override IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.get_Classes();
    private sealed virtual override string Xamarin.Forms.StyleSheets.IStyleSelectable.get_Id();
    private sealed virtual override String[] Xamarin.Forms.StyleSheets.IStyleSelectable.get_NameAndBases();
    private sealed virtual override IStyleSelectable Xamarin.Forms.StyleSheets.IStyleSelectable.get_Parent();
    internal void ApplyStyleSheets();
    private void ApplyStyleSheets(List`1<StyleSheet> sheets, Element element);
    [CompilerGeneratedAttribute]
private void <OnBindingContextChanged>b__82_0(BindableObject child, object bc);
}
internal class Xamarin.Forms.ElementCollection`1 : ObservableWrapper`2<Element, T> {
    public ElementCollection`1(ObservableCollection`1<Element> list);
}
public class Xamarin.Forms.ElementEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    public Element Element { get; private set; }
    public ElementEventArgs(Element element);
    [CompilerGeneratedAttribute]
public Element get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(Element value);
}
public class Xamarin.Forms.ElementTemplate : object {
    private List`1<Action`2<object, ResourcesChangedEventArgs>> _changeHandlers;
    private Element _parent;
    private bool _canRecycle;
    [CompilerGeneratedAttribute]
private Func`1<object> <LoadTemplate>k__BackingField;
    private Func`1<object> LoadTemplate { get; private set; }
    private Func`1<object> Xamarin.Forms.Internals.IDataTemplate.LoadTemplate { get; private set; }
    internal bool CanRecycle { get; }
    private Element Xamarin.Forms.IElement.Parent { get; private set; }
    internal ElementTemplate(Type type);
    internal ElementTemplate(Func`1<object> loadTemplate);
    [CompilerGeneratedAttribute]
private Func`1<object> get_LoadTemplate();
    [CompilerGeneratedAttribute]
private void set_LoadTemplate(Func`1<object> value);
    private sealed virtual override Func`1<object> Xamarin.Forms.Internals.IDataTemplate.get_LoadTemplate();
    private sealed virtual override void Xamarin.Forms.Internals.IDataTemplate.set_LoadTemplate(Func`1<object> value);
    private sealed virtual override void Xamarin.Forms.IElement.AddResourcesChangedListener(Action`2<object, ResourcesChangedEventArgs> onchanged);
    internal bool get_CanRecycle();
    private sealed virtual override Element Xamarin.Forms.IElement.get_Parent();
    private sealed virtual override void Xamarin.Forms.IElement.set_Parent(Element value);
    private sealed virtual override void Xamarin.Forms.IElement.RemoveResourcesChangedListener(Action`2<object, ResourcesChangedEventArgs> onchanged);
    public object CreateContent();
    internal virtual void SetupContent(object item);
    private void OnResourcesChanged(object sender, ResourcesChangedEventArgs e);
}
internal class Xamarin.Forms.EmailKeyboard : Keyboard {
}
public class Xamarin.Forms.EmbeddedFont : object {
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ResourceStream>k__BackingField;
    public string FontName { get; public set; }
    public Stream ResourceStream { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public Stream get_ResourceStream();
    [CompilerGeneratedAttribute]
public void set_ResourceStream(Stream value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._EntryRenderer")]
public class Xamarin.Forms.Entry : InputView {
    public static BindableProperty ReturnTypeProperty;
    public static BindableProperty ReturnCommandProperty;
    public static BindableProperty ReturnCommandParameterProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty PlaceholderColorProperty;
    public static BindableProperty IsPasswordProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty HorizontalTextAlignmentProperty;
    public static BindableProperty VerticalTextAlignmentProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty IsTextPredictionEnabledProperty;
    public static BindableProperty CursorPositionProperty;
    public static BindableProperty SelectionLengthProperty;
    public static BindableProperty ClearButtonVisibilityProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Entry>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler Completed;
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public bool IsPassword { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public bool IsTextPredictionEnabled { get; public set; }
    public ReturnType ReturnType { get; public set; }
    public int CursorPosition { get; public set; }
    public int SelectionLength { get; public set; }
    public ICommand ReturnCommand { get; public set; }
    public object ReturnCommandParameter { get; public set; }
    public ClearButtonVisibility ClearButtonVisibility { get; public set; }
    private static Entry();
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public void set_VerticalTextAlignment(TextAlignment value);
    public bool get_IsPassword();
    public void set_IsPassword(bool value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    public bool get_IsTextPredictionEnabled();
    public void set_IsTextPredictionEnabled(bool value);
    public ReturnType get_ReturnType();
    public void set_ReturnType(ReturnType value);
    public int get_CursorPosition();
    public void set_CursorPosition(int value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public ICommand get_ReturnCommand();
    public void set_ReturnCommand(ICommand value);
    public object get_ReturnCommandParameter();
    public void set_ReturnCommandParameter(object value);
    public ClearButtonVisibility get_ClearButtonVisibility();
    public void set_ClearButtonVisibility(ClearButtonVisibility value);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendCompleted();
    public sealed virtual IPlatformElementConfiguration`2<T, Entry> On();
    private sealed virtual override void Xamarin.Forms.ITextAlignmentElement.OnHorizontalTextAlignmentPropertyChanged(TextAlignment oldValue, TextAlignment newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Entry> <.ctor>b__19_0();
}
public class Xamarin.Forms.EntryCell : Cell {
    public static BindableProperty TextProperty;
    public static BindableProperty LabelProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty LabelColorProperty;
    public static BindableProperty KeyboardProperty;
    public static BindableProperty HorizontalTextAlignmentProperty;
    public static BindableProperty VerticalTextAlignmentProperty;
    [ObsoleteAttribute("XAlignProperty is obsolete as of version 2.0.0. Please use HorizontalTextAlignmentProperty instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty XAlignProperty;
    [CompilerGeneratedAttribute]
private EventHandler Completed;
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public Keyboard Keyboard { get; public set; }
    public string Label { get; public set; }
    public Color LabelColor { get; public set; }
    public string Placeholder { get; public set; }
    public string Text { get; public set; }
    [ObsoleteAttribute("XAlign is obsolete as of version 2.0.0. Please use HorizontalTextAlignment instead.")]
[EditorBrowsableAttribute("1")]
public TextAlignment XAlign { get; public set; }
    private static EntryCell();
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public void set_VerticalTextAlignment(TextAlignment value);
    public Keyboard get_Keyboard();
    public void set_Keyboard(Keyboard value);
    public string get_Label();
    public void set_Label(string value);
    public Color get_LabelColor();
    public void set_LabelColor(Color value);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public string get_Text();
    public void set_Text(string value);
    public TextAlignment get_XAlign();
    public void set_XAlign(TextAlignment value);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendCompleted();
    private sealed virtual override void Xamarin.Forms.ITextAlignmentElement.OnHorizontalTextAlignmentPropertyChanged(TextAlignment oldValue, TextAlignment newValue);
}
[ContentPropertyAttribute("Actions")]
public class Xamarin.Forms.EventTrigger : TriggerBase {
    private static MethodInfo s_handlerinfo;
    private List`1<BindableObject> _associatedObjects;
    private EventInfo _eventinfo;
    private string _eventname;
    private Delegate _handlerdelegate;
    [CompilerGeneratedAttribute]
private IList`1<TriggerAction> <Actions>k__BackingField;
    public IList`1<TriggerAction> Actions { get; }
    public string Event { get; public set; }
    private static EventTrigger();
    [CompilerGeneratedAttribute]
public IList`1<TriggerAction> get_Actions();
    public string get_Event();
    public void set_Event(string value);
    internal virtual void OnAttachedTo(BindableObject bindable);
    internal virtual void OnDetachingFrom(BindableObject bindable);
    internal virtual void OnSeal();
    private void AttachHandlerTo(BindableObject bindable);
    private void DetachHandlerFrom(BindableObject bindable);
    [PreserveAttribute]
private void OnEventTriggered(object sender, EventArgs e);
}
[ContentPropertyAttribute("Content")]
public class Xamarin.Forms.Expander : TemplatedView {
    private static string ExpandAnimationName;
    private static UInt32 DefaultAnimationLength;
    private static double EnabledOpacity;
    private static double DisabledOpacity;
    [CompilerGeneratedAttribute]
private EventHandler Tapped;
    public static BindableProperty HeaderProperty;
    public static BindableProperty ContentProperty;
    public static BindableProperty ContentTemplateProperty;
    public static BindableProperty IsExpandedProperty;
    public static BindableProperty ExpandAnimationLengthProperty;
    public static BindableProperty CollapseAnimationLengthProperty;
    public static BindableProperty ExpandAnimationEasingProperty;
    public static BindableProperty CollapseAnimationEasingProperty;
    public static BindableProperty StateProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty ForceUpdateSizeCommandProperty;
    private DataTemplate _previousTemplate;
    private double _lastVisibleHeight;
    private double _previousWidth;
    private double _startHeight;
    private double _endHeight;
    private bool _shouldIgnoreContentSetting;
    private bool _shouldIgnoreAnimation;
    private static bool isExperimentalFlagSet;
    [CompilerGeneratedAttribute]
private StackLayout <ExpanderLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentView <ContentHolder>k__BackingField;
    private StackLayout ExpanderLayout { get; }
    private ContentView ContentHolder { get; private set; }
    private double ContentHeightRequest { get; }
    public View Header { get; public set; }
    public View Content { get; public set; }
    public DataTemplate ContentTemplate { get; public set; }
    public bool IsExpanded { get; public set; }
    public UInt32 ExpandAnimationLength { get; public set; }
    public UInt32 CollapseAnimationLength { get; public set; }
    public Easing ExpandAnimationEasing { get; public set; }
    public Easing CollapseAnimationEasing { get; public set; }
    public ExpanderState State { get; public set; }
    public object CommandParameter { get; public set; }
    public ICommand Command { get; public set; }
    public ICommand ForceUpdateSizeCommand { get; public set; }
    private static Expander();
    [CompilerGeneratedAttribute]
public void add_Tapped(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Tapped(EventHandler value);
    internal static void VerifyExperimental(string memberName, string constructorHint);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private StackLayout get_ExpanderLayout();
    [CompilerGeneratedAttribute]
private ContentView get_ContentHolder();
    [CompilerGeneratedAttribute]
private void set_ContentHolder(ContentView value);
    private double get_ContentHeightRequest();
    public View get_Header();
    public void set_Header(View value);
    public View get_Content();
    public void set_Content(View value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public UInt32 get_ExpandAnimationLength();
    public void set_ExpandAnimationLength(UInt32 value);
    public UInt32 get_CollapseAnimationLength();
    public void set_CollapseAnimationLength(UInt32 value);
    public Easing get_ExpandAnimationEasing();
    public void set_ExpandAnimationEasing(Easing value);
    public Easing get_CollapseAnimationEasing();
    public void set_CollapseAnimationEasing(Easing value);
    public ExpanderState get_State();
    public void set_State(ExpanderState value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public ICommand get_ForceUpdateSizeCommand();
    public void set_ForceUpdateSizeCommand(ICommand value);
    public void ForceUpdateSize();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnSizeAllocated(double width, double height);
    private void OnIsExpandedChanged(bool isBindingContextChanged);
    private void SetHeader(View oldHeader);
    private void SetContent(bool isForceUpdate, bool isBindingContextChanged);
    private void SetContent();
    private View CreateContent();
    private void InvokeAnimation();
    private void OnIsEnabledChanged();
    [CompilerGeneratedAttribute]
private void <SetHeader>b__80_0(object parameter);
    [CompilerGeneratedAttribute]
private void <InvokeAnimation>b__84_0(double v);
    [CompilerGeneratedAttribute]
private void <InvokeAnimation>b__84_1(double value, bool isInterrupted);
}
public enum Xamarin.Forms.ExpanderState : Enum {
    public int value__;
    public static ExpanderState Expanding;
    public static ExpanderState Expanded;
    public static ExpanderState Collapsing;
    public static ExpanderState Collapsed;
}
internal static class Xamarin.Forms.ExperimentalFlags : object {
    internal static string ShellUWPExperimental;
    internal static string CarouselViewExperimental;
    internal static string SwipeViewExperimental;
    internal static string MediaElementExperimental;
    internal static string MarkupExperimental;
    internal static string ExpanderExperimental;
    internal static string RadioButtonExperimental;
    internal static string ShapesExperimental;
    internal static string BrushExperimental;
    internal static string DragAndDropExperimental;
    [EditorBrowsableAttribute("1")]
public static void VerifyFlagEnabled(string coreComponentName, string flagName, string constructorHint, string memberName);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportEffectAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    internal string Id { get; private set; }
    internal Type Type { get; private set; }
    public ExportEffectAttribute(Type effectType, string uniqueName);
    [CompilerGeneratedAttribute]
internal string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
internal Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
[PreserveAttribute]
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportFontAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmbeddedFontResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFileName>k__BackingField;
    public string Alias { get; public set; }
    public string EmbeddedFontResourceId { get; public set; }
    public string FontFileName { get; }
    public ExportFontAttribute(string fontFileName);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_EmbeddedFontResourceId();
    [CompilerGeneratedAttribute]
public void set_EmbeddedFontResourceId(string value);
    [CompilerGeneratedAttribute]
public string get_FontFileName();
}
internal class Xamarin.Forms.FallbackDispatcher : object {
    public bool IsInvokeRequired { get; }
    public sealed virtual bool get_IsInvokeRequired();
    public sealed virtual void BeginInvokeOnMainThread(Action action);
}
[TypeConverterAttribute("Xamarin.Forms.FileImageSourceConverter")]
public class Xamarin.Forms.FileImageSource : ImageSource {
    public static BindableProperty FileProperty;
    public bool IsEmpty { get; }
    public string File { get; public set; }
    private static FileImageSource();
    public virtual bool get_IsEmpty();
    public string get_File();
    public void set_File(string value);
    public virtual Task`1<bool> Cancel();
    public virtual string ToString();
    public static FileImageSource op_Implicit(string file);
    public static string op_Implicit(FileImageSource file);
    protected virtual void OnPropertyChanged(string propertyName);
}
[TypeConversionAttribute("Xamarin.Forms.FileImageSource")]
public class Xamarin.Forms.FileImageSourceConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConverterAttribute("Xamarin.Forms.FileMediaSourceConverter")]
public class Xamarin.Forms.FileMediaSource : MediaSource {
    public static BindableProperty FileProperty;
    public string File { get; public set; }
    private static FileMediaSource();
    public string get_File();
    public void set_File(string value);
    public virtual string ToString();
    public static FileMediaSource op_Implicit(string file);
    public static string op_Implicit(FileMediaSource file);
    protected virtual void OnPropertyChanged(string propertyName);
}
[TypeConversionAttribute("Xamarin.Forms.FileMediaSource")]
public class Xamarin.Forms.FileMediaSourceConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConverterAttribute("Xamarin.Forms.FlexAlignContentTypeConverter")]
public enum Xamarin.Forms.FlexAlignContent : Enum {
    public int value__;
    public static FlexAlignContent Stretch;
    public static FlexAlignContent Center;
    public static FlexAlignContent Start;
    public static FlexAlignContent End;
    public static FlexAlignContent SpaceBetween;
    public static FlexAlignContent SpaceAround;
    public static FlexAlignContent SpaceEvenly;
}
[TypeConversionAttribute("Xamarin.Forms.FlexAlignContent")]
public class Xamarin.Forms.FlexAlignContentTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConverterAttribute("Xamarin.Forms.FlexAlignItemsTypeConverter")]
public enum Xamarin.Forms.FlexAlignItems : Enum {
    public int value__;
    public static FlexAlignItems Stretch;
    public static FlexAlignItems Center;
    public static FlexAlignItems Start;
    public static FlexAlignItems End;
}
[TypeConversionAttribute("Xamarin.Forms.FlexAlignItems")]
public class Xamarin.Forms.FlexAlignItemsTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConverterAttribute("Xamarin.Forms.FlexAlignSelfTypeConverter")]
public enum Xamarin.Forms.FlexAlignSelf : Enum {
    public int value__;
    public static FlexAlignSelf Auto;
    public static FlexAlignSelf Stretch;
    public static FlexAlignSelf Center;
    public static FlexAlignSelf Start;
    public static FlexAlignSelf End;
}
[TypeConversionAttribute("Xamarin.Forms.FlexAlignSelf")]
public class Xamarin.Forms.FlexAlignSelfTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConverterAttribute("Xamarin.Forms.FlexBasis/FlexBasisTypeConverter")]
public class Xamarin.Forms.FlexBasis : ValueType {
    private bool _isLength;
    private bool _isRelative;
    public static FlexBasis Auto;
    [CompilerGeneratedAttribute]
private float <Length>k__BackingField;
    public float Length { get; }
    internal bool IsAuto { get; }
    internal bool IsRelative { get; }
    public FlexBasis(float length, bool isRelative);
    private static FlexBasis();
    [CompilerGeneratedAttribute]
public float get_Length();
    internal bool get_IsAuto();
    internal bool get_IsRelative();
    public static FlexBasis op_Implicit(float length);
}
[TypeConverterAttribute("Xamarin.Forms.FlexDirectionTypeConverter")]
public enum Xamarin.Forms.FlexDirection : Enum {
    public int value__;
    public static FlexDirection Column;
    public static FlexDirection ColumnReverse;
    public static FlexDirection Row;
    public static FlexDirection RowReverse;
}
[TypeConversionAttribute("Xamarin.Forms.FlexDirection")]
public class Xamarin.Forms.FlexDirectionTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.FlexExtensions : object {
    [ExtensionAttribute]
public static int IndexOf(Item parent, Item child);
    [ExtensionAttribute]
public static void Remove(Item parent, Item child);
    [ExtensionAttribute]
public static Rectangle GetFrame(Item item);
    [ExtensionAttribute]
public static Size GetConstraints(Item item);
    [ExtensionAttribute]
public static Basis ToFlexBasis(FlexBasis basis);
}
[TypeConverterAttribute("Xamarin.Forms.FlexJustifyTypeConverter")]
public enum Xamarin.Forms.FlexJustify : Enum {
    public int value__;
    public static FlexJustify Start;
    public static FlexJustify Center;
    public static FlexJustify End;
    public static FlexJustify SpaceBetween;
    public static FlexJustify SpaceAround;
    public static FlexJustify SpaceEvenly;
}
[TypeConversionAttribute("Xamarin.Forms.FlexJustify")]
public class Xamarin.Forms.FlexJustifyTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.FlexLayout : Layout`1<View> {
    public static BindableProperty DirectionProperty;
    public static BindableProperty JustifyContentProperty;
    public static BindableProperty AlignContentProperty;
    public static BindableProperty AlignItemsProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty WrapProperty;
    private static BindableProperty FlexItemProperty;
    public static BindableProperty OrderProperty;
    public static BindableProperty GrowProperty;
    public static BindableProperty ShrinkProperty;
    public static BindableProperty AlignSelfProperty;
    public static BindableProperty BasisProperty;
    private Item _root;
    private bool _measuring;
    public FlexDirection Direction { get; public set; }
    public FlexJustify JustifyContent { get; public set; }
    public FlexAlignContent AlignContent { get; public set; }
    public FlexAlignItems AlignItems { get; public set; }
    public FlexPosition Position { get; public set; }
    public FlexWrap Wrap { get; public set; }
    private static FlexLayout();
    public FlexDirection get_Direction();
    public void set_Direction(FlexDirection value);
    public FlexJustify get_JustifyContent();
    public void set_JustifyContent(FlexJustify value);
    public FlexAlignContent get_AlignContent();
    public void set_AlignContent(FlexAlignContent value);
    public FlexAlignItems get_AlignItems();
    public void set_AlignItems(FlexAlignItems value);
    public FlexPosition get_Position();
    public void set_Position(FlexPosition value);
    public FlexWrap get_Wrap();
    public void set_Wrap(FlexWrap value);
    private static Item GetFlexItem(BindableObject bindable);
    private static void SetFlexItem(BindableObject bindable, Item node);
    public static int GetOrder(BindableObject bindable);
    public static void SetOrder(BindableObject bindable, int value);
    public static float GetGrow(BindableObject bindable);
    public static void SetGrow(BindableObject bindable, float value);
    public static float GetShrink(BindableObject bindable);
    public static void SetShrink(BindableObject bindable, float value);
    public static FlexAlignSelf GetAlignSelf(BindableObject bindable);
    public static void SetAlignSelf(BindableObject bindable, FlexAlignSelf value);
    public static FlexBasis GetBasis(BindableObject bindable);
    public static void SetBasis(BindableObject bindable, FlexBasis value);
    private static void OnOrderPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnGrowPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnShrinkPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnAlignSelfPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnBasisPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnDirectionPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnJustifyContentPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnAlignContentPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnAlignItemsPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnPositionPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnWrapPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    internal virtual void OnIsPlatformEnabledChanged();
    protected virtual void OnParentSet();
    private void PopulateLayout();
    private void InitLayoutProperties(Item item);
    private void ClearLayout();
    protected virtual void OnAdded(View view);
    protected virtual void OnRemoved(View view);
    private void AddChild(View view);
    private void InitItemProperties(View view, Item item);
    private void RemoveChild(View view);
    private void OnChildPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    private void Layout(double width, double height);
}
public enum Xamarin.Forms.FlexPosition : Enum {
    public int value__;
    public static FlexPosition Relative;
    public static FlexPosition Absolute;
}
[TypeConverterAttribute("Xamarin.Forms.FlexWrapTypeConverter")]
public enum Xamarin.Forms.FlexWrap : Enum {
    public int value__;
    public static FlexWrap NoWrap;
    public static FlexWrap Wrap;
    public static FlexWrap Reverse;
}
[TypeConversionAttribute("Xamarin.Forms.FlexWrap")]
public class Xamarin.Forms.FlexWrapTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConverterAttribute("Xamarin.Forms.FlowDirectionConverter")]
public enum Xamarin.Forms.FlowDirection : Enum {
    public int value__;
    public static FlowDirection MatchParent;
    public static FlowDirection LeftToRight;
    public static FlowDirection RightToLeft;
}
[TypeConversionAttribute("Xamarin.Forms.FlowDirection")]
public class Xamarin.Forms.FlowDirectionConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public enum Xamarin.Forms.FlyoutBehavior : Enum {
    public int value__;
    public static FlyoutBehavior Disabled;
    public static FlyoutBehavior Flyout;
    public static FlyoutBehavior Locked;
}
public enum Xamarin.Forms.FlyoutDisplayOptions : Enum {
    public int value__;
    public static FlyoutDisplayOptions AsSingleItem;
    public static FlyoutDisplayOptions AsMultipleItems;
}
public enum Xamarin.Forms.FlyoutHeaderBehavior : Enum {
    public int value__;
    public static FlyoutHeaderBehavior Default;
    public static FlyoutHeaderBehavior Fixed;
    public static FlyoutHeaderBehavior Scroll;
    public static FlyoutHeaderBehavior CollapseOnScroll;
}
[EditorBrowsableAttribute("0")]
public class Xamarin.Forms.FlyoutItem : ShellItem {
    public static string LabelStyle;
    public static string ImageStyle;
    public static string LayoutStyle;
    public static BindableProperty IsVisibleProperty;
    private static FlyoutItem();
    public static bool GetIsVisible(BindableObject obj);
    public static void SetIsVisible(BindableObject obj, bool isVisible);
    private static void OnFlyoutItemIsVisibleChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.Forms.FocusEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsFocused>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <VisualElement>k__BackingField;
    public bool IsFocused { get; private set; }
    public VisualElement VisualElement { get; private set; }
    public FocusEventArgs(VisualElement visualElement, bool isFocused);
    [CompilerGeneratedAttribute]
public bool get_IsFocused();
    [CompilerGeneratedAttribute]
private void set_IsFocused(bool value);
    [CompilerGeneratedAttribute]
public VisualElement get_VisualElement();
    [CompilerGeneratedAttribute]
private void set_VisualElement(VisualElement value);
}
[TypeConverterAttribute("Xamarin.Forms.FontTypeConverter")]
public class Xamarin.Forms.Font : ValueType {
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedSize <NamedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private FontAttributes <FontAttributes>k__BackingField;
    public string FontFamily { get; private set; }
    public double FontSize { get; private set; }
    public NamedSize NamedSize { get; private set; }
    public FontAttributes FontAttributes { get; private set; }
    public bool IsDefault { get; }
    public bool UseNamedSize { get; }
    public static Font Default { get; }
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
private void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
private void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public NamedSize get_NamedSize();
    [CompilerGeneratedAttribute]
private void set_NamedSize(NamedSize value);
    [CompilerGeneratedAttribute]
public FontAttributes get_FontAttributes();
    [CompilerGeneratedAttribute]
private void set_FontAttributes(FontAttributes value);
    public bool get_IsDefault();
    public bool get_UseNamedSize();
    public static Font get_Default();
    public Font WithSize(double size);
    public Font WithSize(NamedSize size);
    public Font WithAttributes(FontAttributes fontAttributes);
    public static Font OfSize(string name, double size);
    public static Font OfSize(string name, NamedSize size);
    public static Font SystemFontOfSize(double size);
    public static Font SystemFontOfSize(NamedSize size);
    public static Font SystemFontOfSize(double size, FontAttributes attributes);
    public static Font SystemFontOfSize(NamedSize size, FontAttributes attributes);
    [ObsoleteAttribute("BoldSystemFontOfSize is obsolete as of version 1.2.0. Please use SystemFontOfSize (double, FontAttributes) instead.")]
[EditorBrowsableAttribute("1")]
public static Font BoldSystemFontOfSize(double size);
    [ObsoleteAttribute("BoldSystemFontOfSize is obsolete as of version 1.2.0. Please use SystemFontOfSize (NamedSize, FontAttributes) instead.")]
[EditorBrowsableAttribute("1")]
public static Font BoldSystemFontOfSize(NamedSize size);
    private bool Equals(Font other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Font left, Font right);
    public static bool op_Inequality(Font left, Font right);
    public virtual string ToString();
}
[FlagsAttribute]
[TypeConverterAttribute("Xamarin.Forms.FontAttributesConverter")]
public enum Xamarin.Forms.FontAttributes : Enum {
    public int value__;
    public static FontAttributes None;
    public static FontAttributes Bold;
    public static FontAttributes Italic;
}
[TypeConversionAttribute("Xamarin.Forms.FontAttributes")]
public class Xamarin.Forms.FontAttributesConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
    private static FontAttributes ParseSingleAttribute(string part, string originalvalue);
}
internal static class Xamarin.Forms.FontElement : object {
    public static BindableProperty FontProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    private static BindableProperty CancelEventsProperty;
    private static FontElement();
    private static bool GetCancelEvents(BindableObject bindable);
    private static void SetCancelEvents(BindableObject bindable, bool value);
    private static void OnFontPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFontFamilyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFontSizeChanged(BindableObject bindable, object oldValue, object newValue);
    private static object FontSizeDefaultValueCreator(BindableObject bindable);
    private static void OnFontAttributesChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.Forms.FontFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostScriptName>k__BackingField;
    public static String[] Extensions;
    public string FileName { get; public set; }
    public string Extension { get; public set; }
    public string PostScriptName { get; public set; }
    private static FontFile();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    public string FileNameWithExtension(string extension);
    public string FileNameWithExtension();
    [CompilerGeneratedAttribute]
public string get_PostScriptName();
    [CompilerGeneratedAttribute]
public void set_PostScriptName(string value);
    public string GetPostScriptNameWithSpaces();
    public static FontFile FromString(string input);
    [IteratorStateMachineAttribute("Xamarin.Forms.FontFile/<GetFontName>d__17")]
private static IEnumerable`1<string> GetFontName(string fontFamily);
}
public class Xamarin.Forms.FontImageSource : ImageSource {
    public static BindableProperty ColorProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty GlyphProperty;
    public static BindableProperty SizeProperty;
    public bool IsEmpty { get; }
    public Color Color { get; public set; }
    public string FontFamily { get; public set; }
    public string Glyph { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double Size { get; public set; }
    private static FontImageSource();
    public virtual bool get_IsEmpty();
    public Color get_Color();
    public void set_Color(Color value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_Glyph();
    public void set_Glyph(string value);
    public double get_Size();
    public void set_Size(double value);
}
[TypeConversionAttribute("System.Double")]
public class Xamarin.Forms.FontSizeConverter : TypeConverter {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("IExtendedTypeConverter.ConvertFrom is obsolete as of version 2.2.0. Please use ConvertFromInvariantString (string, IServiceProvider) instead.")]
private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFrom(CultureInfo culture, object value, IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFromInvariantString(string value, IServiceProvider serviceProvider);
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConversionAttribute("Xamarin.Forms.Font")]
public class Xamarin.Forms.FontTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[ContentPropertyAttribute("Spans")]
public class Xamarin.Forms.FormattedString : Element {
    private SpanCollection _spans;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler SpansCollectionChanged;
    public IList`1<Span> Spans { get; }
    [CompilerGeneratedAttribute]
internal void add_SpansCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_SpansCollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnBindingContextChanged();
    public IList`1<Span> get_Spans();
    public static string op_Explicit(FormattedString formatted);
    public static FormattedString op_Implicit(string text);
    public virtual string ToString();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnItemPropertyChanging(object sender, PropertyChangingEventArgs e);
}
[RenderWithAttribute("Xamarin.Forms.Platform._FrameRenderer")]
[ContentPropertyAttribute("Content")]
public class Xamarin.Forms.Frame : ContentView {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OutlineColorProperty is obsolete as of version 3.0.0. Please use BorderColorProperty instead.")]
public static BindableProperty OutlineColorProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty HasShadowProperty;
    public static BindableProperty CornerRadiusProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Frame>> _platformConfigurationRegistry;
    public bool HasShadow { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OutlineColor is obsolete as of version 3.0.0. Please use BorderColor instead.")]
public Color OutlineColor { get; public set; }
    public Color BorderColor { get; public set; }
    public float CornerRadius { get; public set; }
    private int Xamarin.Forms.IBorderElement.CornerRadius { get; }
    private double Xamarin.Forms.IBorderElement.BorderWidth { get; }
    private int Xamarin.Forms.IBorderElement.CornerRadiusDefaultValue { get; }
    private Color Xamarin.Forms.IBorderElement.BorderColorDefaultValue { get; }
    private double Xamarin.Forms.IBorderElement.BorderWidthDefaultValue { get; }
    private static Frame();
    private sealed virtual override Thickness Xamarin.Forms.IPaddingElement.PaddingDefaultValueCreator();
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public Color get_OutlineColor();
    public void set_OutlineColor(Color value);
    public sealed virtual Color get_BorderColor();
    public void set_BorderColor(Color value);
    public float get_CornerRadius();
    public void set_CornerRadius(float value);
    private sealed virtual override int Xamarin.Forms.IBorderElement.get_CornerRadius();
    private sealed virtual override double Xamarin.Forms.IBorderElement.get_BorderWidth();
    private sealed virtual override int Xamarin.Forms.IBorderElement.get_CornerRadiusDefaultValue();
    private sealed virtual override Color Xamarin.Forms.IBorderElement.get_BorderColorDefaultValue();
    private sealed virtual override double Xamarin.Forms.IBorderElement.get_BorderWidthDefaultValue();
    public sealed virtual IPlatformElementConfiguration`2<T, Frame> On();
    private sealed virtual override void Xamarin.Forms.IBorderElement.OnBorderColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsCornerRadiusSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderWidthSet();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Frame> <.ctor>b__5_0();
}
public class Xamarin.Forms.GestureElement : Element {
    private GestureRecognizerCollection _gestureRecognizers;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler GestureRecognizersCollectionChanged;
    [CompilerGeneratedAttribute]
private Region <Xamarin.Forms.Internals.ISpatialElement.Region>k__BackingField;
    private Region Xamarin.Forms.Internals.ISpatialElement.Region { get; private set; }
    public IList`1<IGestureRecognizer> GestureRecognizers { get; }
    [CompilerGeneratedAttribute]
internal void add_GestureRecognizersCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_GestureRecognizersCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
private sealed virtual override Region Xamarin.Forms.Internals.ISpatialElement.get_Region();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.Internals.ISpatialElement.set_Region(Region value);
    public sealed virtual IList`1<IGestureRecognizer> get_GestureRecognizers();
    internal virtual void ValidateGesture(IGestureRecognizer gesture);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>g__AddItems|4_1(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__RemoveItems|4_2(<>c__DisplayClass4_0& );
}
public class Xamarin.Forms.GestureRecognizer : Element {
}
public enum Xamarin.Forms.GestureState : Enum {
    public int value__;
    public static GestureState Began;
    public static GestureState Update;
    public static GestureState Ended;
    public static GestureState Failed;
    public static GestureState Cancelled;
    public static GestureState Possible;
}
public enum Xamarin.Forms.GestureStatus : Enum {
    public int value__;
    public static GestureStatus Started;
    public static GestureStatus Running;
    public static GestureStatus Completed;
    public static GestureStatus Canceled;
}
[ContentPropertyAttribute("GradientStops")]
public abstract class Xamarin.Forms.GradientBrush : Brush {
    private static bool IsExperimentalFlagSet;
    public static BindableProperty GradientStopsProperty;
    public GradientStopCollection GradientStops { get; public set; }
    private static GradientBrush();
    internal static void VerifyExperimental(string memberName, string constructorHint);
    public GradientStopCollection get_GradientStops();
    public void set_GradientStops(GradientStopCollection value);
}
public class Xamarin.Forms.GradientStop : BindableObject {
    public static BindableProperty ColorProperty;
    public static BindableProperty OffsetProperty;
    public Color Color { get; public set; }
    public float Offset { get; public set; }
    public GradientStop(Color color, float offset);
    private static GradientStop();
    public Color get_Color();
    public void set_Color(Color value);
    public float get_Offset();
    public void set_Offset(float value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Forms.GradientStopCollection : ObservableCollection`1<GradientStop> {
}
public class Xamarin.Forms.Grid : Layout`1<View> {
    public static BindableProperty RowProperty;
    public static BindableProperty RowSpanProperty;
    public static BindableProperty ColumnProperty;
    public static BindableProperty ColumnSpanProperty;
    public static BindableProperty RowSpacingProperty;
    public static BindableProperty ColumnSpacingProperty;
    public static BindableProperty ColumnDefinitionsProperty;
    public static BindableProperty RowDefinitionsProperty;
    private GridElementCollection _children;
    private Lazy`1<PlatformConfigurationRegistry`1<Grid>> _platformConfigurationRegistry;
    public IGridList`1<View> Children { get; }
    [TypeConverterAttribute("Xamarin.Forms.ColumnDefinitionCollectionTypeConverter")]
public ColumnDefinitionCollection ColumnDefinitions { get; public set; }
    public double ColumnSpacing { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.RowDefinitionCollectionTypeConverter")]
public RowDefinitionCollection RowDefinitions { get; public set; }
    public double RowSpacing { get; public set; }
    private static Grid();
    public sealed virtual IPlatformElementConfiguration`2<T, Grid> On();
    public IGridList`1<View> get_Children();
    public ColumnDefinitionCollection get_ColumnDefinitions();
    public void set_ColumnDefinitions(ColumnDefinitionCollection value);
    public double get_ColumnSpacing();
    public void set_ColumnSpacing(double value);
    public RowDefinitionCollection get_RowDefinitions();
    public void set_RowDefinitions(RowDefinitionCollection value);
    public double get_RowSpacing();
    public void set_RowSpacing(double value);
    public static int GetColumn(BindableObject bindable);
    public static int GetColumnSpan(BindableObject bindable);
    public static int GetRow(BindableObject bindable);
    public static int GetRowSpan(BindableObject bindable);
    public static void SetColumn(BindableObject bindable, int value);
    public static void SetColumnSpan(BindableObject bindable, int value);
    public static void SetRow(BindableObject bindable, int value);
    public static void SetRowSpan(BindableObject bindable, int value);
    protected virtual void OnAdded(View view);
    protected virtual void OnBindingContextChanged();
    protected virtual void OnRemoved(View view);
    internal virtual void ComputeConstraintForView(View view);
    [EditorBrowsableAttribute("1")]
public sealed virtual void InvalidateMeasureInernalNonVirtual(InvalidationTrigger trigger);
    private void OnDefinitionChanged(object sender, EventArgs args);
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateInheritedBindingContexts();
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Grid> <.ctor>b__10_0();
}
public class Xamarin.Forms.GridItemsLayout : ItemsLayout {
    public static BindableProperty SpanProperty;
    public static BindableProperty VerticalItemSpacingProperty;
    public static BindableProperty HorizontalItemSpacingProperty;
    public int Span { get; public set; }
    public double VerticalItemSpacing { get; public set; }
    public double HorizontalItemSpacing { get; public set; }
    public GridItemsLayout(ItemsLayoutOrientation orientation);
    public GridItemsLayout(int span, ItemsLayoutOrientation orientation);
    private static GridItemsLayout();
    public int get_Span();
    public void set_Span(int value);
    public double get_VerticalItemSpacing();
    public void set_VerticalItemSpacing(double value);
    public double get_HorizontalItemSpacing();
    public void set_HorizontalItemSpacing(double value);
}
[TypeConverterAttribute("Xamarin.Forms.GridLengthTypeConverter")]
[DebuggerDisplayAttribute("{Value}.{GridUnitType}")]
public class Xamarin.Forms.GridLength : ValueType {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private GridUnitType <GridUnitType>k__BackingField;
    public static GridLength Auto { get; }
    public static GridLength Star { get; }
    public double Value { get; }
    public GridUnitType GridUnitType { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public GridLength(double value);
    public GridLength(double value, GridUnitType type);
    public static GridLength get_Auto();
    public static GridLength get_Star();
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public GridUnitType get_GridUnitType();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public virtual bool Equals(object obj);
    private bool Equals(GridLength other);
    public virtual int GetHashCode();
    public static GridLength op_Implicit(double absoluteValue);
    public virtual string ToString();
}
[TypeConversionAttribute("Xamarin.Forms.GridLength")]
public class Xamarin.Forms.GridLengthTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public enum Xamarin.Forms.GridUnitType : Enum {
    public int value__;
    public static GridUnitType Absolute;
    public static GridUnitType Star;
    public static GridUnitType Auto;
}
public class Xamarin.Forms.GroupableItemsView : SelectableItemsView {
    public static BindableProperty IsGroupedProperty;
    public static BindableProperty GroupHeaderTemplateProperty;
    public static BindableProperty GroupFooterTemplateProperty;
    public bool IsGrouped { get; public set; }
    public DataTemplate GroupHeaderTemplate { get; public set; }
    public DataTemplate GroupFooterTemplate { get; public set; }
    private static GroupableItemsView();
    public bool get_IsGrouped();
    public void set_IsGrouped(bool value);
    public DataTemplate get_GroupHeaderTemplate();
    public void set_GroupHeaderTemplate(DataTemplate value);
    public DataTemplate get_GroupFooterTemplate();
    public void set_GroupFooterTemplate(DataTemplate value);
}
[AttributeUsageAttribute("1")]
public abstract class Xamarin.Forms.HandlerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private short <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <SupportedVisuals>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [EditorBrowsableAttribute("1")]
public short Priority { get; public set; }
    internal Type[] SupportedVisuals { get; private set; }
    internal Type HandlerType { get; private set; }
    internal Type TargetType { get; private set; }
    protected HandlerAttribute(Type handler, Type target);
    protected HandlerAttribute(Type handler, Type target, Type[] supportedVisuals);
    [CompilerGeneratedAttribute]
public short get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(short value);
    [CompilerGeneratedAttribute]
internal Type[] get_SupportedVisuals();
    [CompilerGeneratedAttribute]
private void set_SupportedVisuals(Type[] value);
    [CompilerGeneratedAttribute]
internal Type get_HandlerType();
    [CompilerGeneratedAttribute]
private void set_HandlerType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_TargetType();
    [CompilerGeneratedAttribute]
private void set_TargetType(Type value);
    public virtual bool ShouldRegister();
}
public class Xamarin.Forms.HtmlWebViewSource : WebViewSource {
    public static BindableProperty HtmlProperty;
    public static BindableProperty BaseUrlProperty;
    public string BaseUrl { get; public set; }
    public string Html { get; public set; }
    private static HtmlWebViewSource();
    public string get_BaseUrl();
    public void set_BaseUrl(string value);
    public string get_Html();
    public void set_Html(string value);
    [EditorBrowsableAttribute("1")]
public virtual void Load(IWebViewDelegate renderer);
}
public interface Xamarin.Forms.IAnimatable {
    public abstract virtual void BatchBegin();
    public abstract virtual void BatchCommit();
}
public interface Xamarin.Forms.IAppearanceObserver {
    public abstract virtual void OnAppearanceChanged(ShellAppearance appearance);
}
public interface Xamarin.Forms.IAppIndexingProvider {
    public IAppLinks AppLinks { get; }
    public abstract virtual IAppLinks get_AppLinks();
}
public interface Xamarin.Forms.IApplicationController {
    public abstract virtual void SetAppIndexingProvider(IAppIndexingProvider appIndexing);
}
public interface Xamarin.Forms.IAppLinkEntry {
    public Uri AppLinkUri { get; public set; }
    public string Description { get; public set; }
    public bool IsLinkActive { get; public set; }
    public IDictionary`2<string, string> KeyValues { get; }
    public ImageSource Thumbnail { get; public set; }
    public string Title { get; public set; }
    public abstract virtual Uri get_AppLinkUri();
    public abstract virtual void set_AppLinkUri(Uri value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual bool get_IsLinkActive();
    public abstract virtual void set_IsLinkActive(bool value);
    public abstract virtual IDictionary`2<string, string> get_KeyValues();
    public abstract virtual ImageSource get_Thumbnail();
    public abstract virtual void set_Thumbnail(ImageSource value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
}
public interface Xamarin.Forms.IAppLinks {
    public abstract virtual void DeregisterLink(IAppLinkEntry appLink);
    public abstract virtual void DeregisterLink(Uri appLinkUri);
    public abstract virtual void RegisterLink(IAppLinkEntry appLink);
}
internal interface Xamarin.Forms.IAttachedObject {
    public abstract virtual void AttachTo(BindableObject bindable);
    public abstract virtual void DetachFrom(BindableObject bindable);
}
internal interface Xamarin.Forms.IBarElement {
    public Color BarBackgroundColor { get; }
    public Brush BarBackground { get; }
    public Color BarTextColor { get; }
    public abstract virtual Color get_BarBackgroundColor();
    public abstract virtual Brush get_BarBackground();
    public abstract virtual Color get_BarTextColor();
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.IBorderElement {
    public Color BorderColor { get; }
    public int CornerRadius { get; }
    public Color BackgroundColor { get; }
    public Brush Background { get; }
    public double BorderWidth { get; }
    public int CornerRadiusDefaultValue { get; }
    public Color BorderColorDefaultValue { get; }
    public double BorderWidthDefaultValue { get; }
    public abstract virtual Color get_BorderColor();
    public abstract virtual int get_CornerRadius();
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual Brush get_Background();
    public abstract virtual double get_BorderWidth();
    public abstract virtual void OnBorderColorPropertyChanged(Color oldValue, Color newValue);
    public abstract virtual bool IsCornerRadiusSet();
    public abstract virtual bool IsBackgroundColorSet();
    public abstract virtual bool IsBackgroundSet();
    public abstract virtual bool IsBorderColorSet();
    public abstract virtual bool IsBorderWidthSet();
    public abstract virtual int get_CornerRadiusDefaultValue();
    public abstract virtual Color get_BorderColorDefaultValue();
    public abstract virtual double get_BorderWidthDefaultValue();
}
public interface Xamarin.Forms.IButtonController {
    public abstract virtual void SendClicked();
    public abstract virtual void SendPressed();
    public abstract virtual void SendReleased();
}
public interface Xamarin.Forms.ICellController {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ForceUpdateSizeRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ForceUpdateSizeRequested(EventHandler value);
    public abstract virtual void SendAppearing();
    public abstract virtual void SendDisappearing();
}
internal interface Xamarin.Forms.IColorElement {
    public Color Color { get; }
    public abstract virtual Color get_Color();
}
public interface Xamarin.Forms.IConfigElement`1 {
    public T Element { get; }
    public abstract virtual T get_Element();
}
public interface Xamarin.Forms.IConfigPlatform {
}
internal interface Xamarin.Forms.IControlTemplated {
    public ControlTemplate ControlTemplate { get; public set; }
    public IList`1<Element> InternalChildren { get; }
    public Element TemplateRoot { get; public set; }
    public abstract virtual ControlTemplate get_ControlTemplate();
    public abstract virtual void set_ControlTemplate(ControlTemplate value);
    public abstract virtual IList`1<Element> get_InternalChildren();
    public abstract virtual Element get_TemplateRoot();
    public abstract virtual void set_TemplateRoot(Element value);
    public abstract virtual void OnControlTemplateChanged(ControlTemplate oldValue, ControlTemplate newValue);
    public abstract virtual void OnApplyTemplate();
}
internal interface Xamarin.Forms.ICornerElement {
    public CornerRadius CornerRadius { get; }
    public abstract virtual CornerRadius get_CornerRadius();
}
public interface Xamarin.Forms.IDecorableTextElement {
    public TextDecorations TextDecorations { get; public set; }
    public abstract virtual TextDecorations get_TextDecorations();
    public abstract virtual void set_TextDecorations(TextDecorations value);
}
public interface Xamarin.Forms.IDefinition {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SizeChanged(EventHandler value);
}
public interface Xamarin.Forms.IDispatcher {
    public bool IsInvokeRequired { get; }
    public abstract virtual void BeginInvokeOnMainThread(Action action);
    public abstract virtual bool get_IsInvokeRequired();
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.IDispatcherProvider {
    public abstract virtual IDispatcher GetDispatcher(object context);
}
public interface Xamarin.Forms.IEditorController {
    public abstract virtual void SendCompleted();
}
public interface Xamarin.Forms.IEffectControlProvider {
    public abstract virtual void RegisterEffect(Effect effect);
}
internal interface Xamarin.Forms.IElement {
    public Element Parent { get; public set; }
    public abstract virtual Element get_Parent();
    public abstract virtual void set_Parent(Element value);
    public abstract virtual void AddResourcesChangedListener(Action`2<object, ResourcesChangedEventArgs> onchanged);
    public abstract virtual void RemoveResourcesChangedListener(Action`2<object, ResourcesChangedEventArgs> onchanged);
}
public interface Xamarin.Forms.IElementConfiguration`1 {
    public abstract virtual IPlatformElementConfiguration`2<T, TElement> On();
}
public interface Xamarin.Forms.IElementController {
    public IEffectControlProvider EffectControlProvider { get; public set; }
    public ReadOnlyCollection`1<Element> LogicalChildren { get; }
    public Element RealParent { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("IPlatform is obsolete as of 3.5.0. Do not use this property.")]
public IPlatform Platform { get; public set; }
    public abstract virtual IEffectControlProvider get_EffectControlProvider();
    public abstract virtual void set_EffectControlProvider(IEffectControlProvider value);
    public abstract virtual bool EffectIsAttached(string name);
    public abstract virtual void SetValueFromRenderer(BindableProperty property, object value);
    public abstract virtual void SetValueFromRenderer(BindablePropertyKey propertyKey, object value);
    public abstract virtual ReadOnlyCollection`1<Element> get_LogicalChildren();
    public abstract virtual Element get_RealParent();
    public abstract virtual IEnumerable`1<Element> Descendants();
    public abstract virtual IPlatform get_Platform();
    public abstract virtual void set_Platform(IPlatform value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlatformSet(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlatformSet(EventHandler value);
}
public interface Xamarin.Forms.IEmbeddedFontLoader {
    public abstract virtual ValueTuple`2<bool, string> LoadFont(EmbeddedFont font);
}
public interface Xamarin.Forms.IEntryCellController {
    public abstract virtual void SendCompleted();
}
public interface Xamarin.Forms.IEntryController {
    public abstract virtual void SendCompleted();
}
public interface Xamarin.Forms.IExtendedTypeConverter {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("IExtendedTypeConverter.ConvertFrom is obsolete as of version 2.2.0. Please use ConvertFromInvariantString (string, IServiceProvider) instead.")]
public abstract virtual object ConvertFrom(CultureInfo culture, object value, IServiceProvider serviceProvider);
    public abstract virtual object ConvertFromInvariantString(string value, IServiceProvider serviceProvider);
}
internal interface Xamarin.Forms.IFlowDirectionController {
    public EffectiveFlowDirection EffectiveFlowDirection { get; public set; }
    public double Width { get; }
    public bool ApplyEffectiveFlowDirectionToChildContainer { get; }
    public abstract virtual EffectiveFlowDirection get_EffectiveFlowDirection();
    public abstract virtual void set_EffectiveFlowDirection(EffectiveFlowDirection value);
    public abstract virtual double get_Width();
    public abstract virtual bool get_ApplyEffectiveFlowDirectionToChildContainer();
}
public interface Xamarin.Forms.IFlyoutBehaviorObserver {
    public abstract virtual void OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
}
public interface Xamarin.Forms.IGestureRecognizer {
}
public interface Xamarin.Forms.IGestureRecognizers {
    public IList`1<IGestureRecognizer> GestureRecognizers { get; }
    public abstract virtual IList`1<IGestureRecognizer> get_GestureRecognizers();
}
public interface Xamarin.Forms.IGridController {
    public abstract virtual void InvalidateMeasureInernalNonVirtual(InvalidationTrigger trigger);
}
public interface Xamarin.Forms.IImageController {
    public abstract virtual void SetIsLoading(bool isLoading);
    public abstract virtual bool GetLoadAsAnimation();
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.IImageElement {
    public Aspect Aspect { get; }
    public ImageSource Source { get; }
    public bool IsOpaque { get; }
    public bool IsLoading { get; }
    public bool IsAnimationPlaying { get; }
    public abstract virtual Aspect get_Aspect();
    public abstract virtual ImageSource get_Source();
    public abstract virtual bool get_IsOpaque();
    public abstract virtual void RaiseImageSourcePropertyChanged();
    public abstract virtual void OnImageSourceSourceChanged(object sender, EventArgs e);
    public abstract virtual bool get_IsLoading();
    public abstract virtual bool get_IsAnimationPlaying();
}
[TypeConverterAttribute("Xamarin.Forms.ItemsLayoutTypeConverter")]
public interface Xamarin.Forms.IItemsLayout {
}
public interface Xamarin.Forms.IItemsView`1 {
    public abstract virtual T CreateDefault(object item);
    public abstract virtual void SetupContent(T content, int index);
    public abstract virtual void UnhookContent(T content);
}
public interface Xamarin.Forms.IItemViewController {
    public int Count { get; }
    public abstract virtual void BindView(View view, object item);
    public abstract virtual View CreateView(object itemType);
    public abstract virtual object GetItem(int index);
    public abstract virtual object GetItemType(object item);
    public abstract virtual int get_Count();
}
public interface Xamarin.Forms.ILayout {
    [CompilerGeneratedAttribute]
public abstract virtual void add_LayoutChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LayoutChanged(EventHandler value);
}
public interface Xamarin.Forms.ILayoutController {
    public IReadOnlyList`1<Element> Children { get; }
    public abstract virtual IReadOnlyList`1<Element> get_Children();
}
public interface Xamarin.Forms.IListProxy {
    public IEnumerable ProxiedEnumerable { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual IEnumerable get_ProxiedEnumerable();
    public abstract virtual bool TryGetValue(int index, Object& value);
}
public interface Xamarin.Forms.IListViewController {
    public ListViewCachingStrategy CachingStrategy { get; }
    public Element FooterElement { get; }
    public Element HeaderElement { get; }
    public bool RefreshAllowed { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    public abstract virtual ListViewCachingStrategy get_CachingStrategy();
    public abstract virtual Element get_FooterElement();
    public abstract virtual Element get_HeaderElement();
    public abstract virtual bool get_RefreshAllowed();
    public abstract virtual Cell CreateDefaultCell(object item);
    public abstract virtual string GetDisplayTextFromGroup(object cell);
    public abstract virtual void NotifyRowTapped(int index, int inGroupIndex, Cell cell);
    public abstract virtual void NotifyRowTapped(int index, Cell cell);
    public abstract virtual void SendCellAppearing(Cell cell);
    public abstract virtual void SendCellDisappearing(Cell cell);
    public abstract virtual void SendRefreshing();
}
[RenderWithAttribute("Xamarin.Forms.Platform._ImageRenderer")]
public class Xamarin.Forms.Image : View {
    public static BindableProperty SourceProperty;
    public static BindableProperty AspectProperty;
    public static BindableProperty IsOpaqueProperty;
    internal static BindablePropertyKey IsLoadingPropertyKey;
    public static BindableProperty IsLoadingProperty;
    public static BindableProperty IsAnimationPlayingProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Image>> _platformConfigurationRegistry;
    public Aspect Aspect { get; public set; }
    public bool IsLoading { get; }
    public bool IsOpaque { get; public set; }
    public bool IsAnimationPlaying { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ImageSourceConverter")]
public ImageSource Source { get; public set; }
    private static Image();
    public sealed virtual Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public sealed virtual bool get_IsLoading();
    public sealed virtual bool get_IsOpaque();
    public void set_IsOpaque(bool value);
    public sealed virtual bool get_IsAnimationPlaying();
    public void set_IsAnimationPlaying(bool value);
    public sealed virtual ImageSource get_Source();
    public void set_Source(ImageSource value);
    private sealed virtual override bool Xamarin.Forms.IImageController.GetLoadAsAnimation();
    protected virtual void OnBindingContextChanged();
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SetIsLoading(bool isLoading);
    public sealed virtual IPlatformElementConfiguration`2<T, Image> On();
    private sealed virtual override void Xamarin.Forms.IImageElement.OnImageSourceSourceChanged(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.IImageElement.RaiseImageSourcePropertyChanged();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Image> <.ctor>b__7_0();
}
[RenderWithAttribute("Xamarin.Forms.Platform._ImageButtonRenderer")]
public class Xamarin.Forms.ImageButton : View {
    private static int DefaultCornerRadius;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty BorderWidthProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty AspectProperty;
    public static BindableProperty IsOpaqueProperty;
    internal static BindablePropertyKey IsLoadingPropertyKey;
    public static BindableProperty IsLoadingProperty;
    internal static BindablePropertyKey IsPressedPropertyKey;
    public static BindableProperty IsPressedProperty;
    public static BindableProperty PaddingProperty;
    [CompilerGeneratedAttribute]
private EventHandler Clicked;
    [CompilerGeneratedAttribute]
private EventHandler Pressed;
    [CompilerGeneratedAttribute]
private EventHandler Released;
    private Lazy`1<PlatformConfigurationRegistry`1<ImageButton>> _platformConfigurationRegistry;
    public Color BorderColor { get; public set; }
    public int CornerRadius { get; public set; }
    public double BorderWidth { get; public set; }
    public Aspect Aspect { get; public set; }
    public bool IsLoading { get; }
    public bool IsPressed { get; }
    public bool IsOpaque { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ImageSourceConverter")]
public ImageSource Source { get; public set; }
    unknown bool Xamarin.Forms.Internals.IButtonElement.IsEnabledCore {private set; }
    private int Xamarin.Forms.IBorderElement.CornerRadiusDefaultValue { get; }
    private Color Xamarin.Forms.IBorderElement.BorderColorDefaultValue { get; }
    private double Xamarin.Forms.IBorderElement.BorderWidthDefaultValue { get; }
    public Thickness Padding { get; public set; }
    private bool Xamarin.Forms.IImageElement.IsAnimationPlaying { get; }
    private static ImageButton();
    [CompilerGeneratedAttribute]
public void add_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Pressed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Pressed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Released(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Released(EventHandler value);
    public sealed virtual Color get_BorderColor();
    public void set_BorderColor(Color value);
    public sealed virtual int get_CornerRadius();
    public void set_CornerRadius(int value);
    public sealed virtual double get_BorderWidth();
    public void set_BorderWidth(double value);
    public sealed virtual Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public sealed virtual bool get_IsLoading();
    public sealed virtual bool get_IsPressed();
    public sealed virtual bool get_IsOpaque();
    public void set_IsOpaque(bool value);
    public sealed virtual ICommand get_Command();
    public sealed virtual void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public sealed virtual void set_CommandParameter(object value);
    public sealed virtual ImageSource get_Source();
    public void set_Source(ImageSource value);
    private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.set_IsEnabledCore(bool value);
    protected virtual void OnBindingContextChanged();
    protected internal virtual void ChangeVisualState();
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    public sealed virtual IPlatformElementConfiguration`2<T, ImageButton> On();
    private sealed virtual override int Xamarin.Forms.IBorderElement.get_CornerRadiusDefaultValue();
    private sealed virtual override Color Xamarin.Forms.IBorderElement.get_BorderColorDefaultValue();
    private sealed virtual override double Xamarin.Forms.IBorderElement.get_BorderWidthDefaultValue();
    private sealed virtual override void Xamarin.Forms.IBorderElement.OnBorderColorPropertyChanged(Color oldValue, Color newValue);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SetIsLoading(bool isLoading);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SetIsPressed(bool isPressed);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendClicked();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPressed();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendReleased();
    public sealed virtual void PropagateUpClicked();
    public sealed virtual void PropagateUpPressed();
    public sealed virtual void PropagateUpReleased();
    public sealed virtual void RaiseImageSourcePropertyChanged();
    public sealed virtual Thickness get_Padding();
    public void set_Padding(Thickness value);
    private sealed virtual override Thickness Xamarin.Forms.IPaddingElement.PaddingDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.IPaddingElement.OnPaddingPropertyChanged(Thickness oldValue, Thickness newValue);
    private sealed virtual override void Xamarin.Forms.IImageElement.OnImageSourceSourceChanged(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.Internals.IButtonElement.OnCommandCanExecuteChanged(object sender, EventArgs e);
    private sealed virtual override bool Xamarin.Forms.IImageElement.get_IsAnimationPlaying();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsCornerRadiusSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBackgroundSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderColorSet();
    private sealed virtual override bool Xamarin.Forms.IBorderElement.IsBorderWidthSet();
    private sealed virtual override bool Xamarin.Forms.IImageController.GetLoadAsAnimation();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<ImageButton> <.ctor>b__24_0();
}
public class Xamarin.Forms.ImageCell : TextCell {
    public static BindableProperty ImageSourceProperty;
    [TypeConverterAttribute("Xamarin.Forms.ImageSourceConverter")]
public ImageSource ImageSource { get; public set; }
    private static ImageCell();
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    protected virtual void OnBindingContextChanged();
    private void OnSourceChanged(object sender, EventArgs eventArgs);
    private void OnSourcePropertyChanged(ImageSource oldvalue, ImageSource newvalue);
    private void OnSourcePropertyChanging(ImageSource oldvalue, ImageSource newvalue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object sender, EventArgs e);
}
internal static class Xamarin.Forms.ImageElement : object {
    public static BindableProperty ImageProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty AspectProperty;
    public static BindableProperty IsOpaqueProperty;
    internal static BindableProperty IsAnimationPlayingProperty;
    private static ImageElement();
    private static void OnImageSourceChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnImageSourceChanging(BindableObject bindable, object oldValue, object newValue);
    public static SizeRequest Measure(IImageElement ImageElementManager, SizeRequest desiredSize, double widthConstraint, double heightConstraint);
    public static void OnBindingContextChanged(IImageElement image, VisualElement visualElement);
    public static void ImageSourceChanging(ImageSource oldImageSource);
    [AsyncStateMachineAttribute("Xamarin.Forms.ImageElement/<CancelOldValue>d__10")]
private static void CancelOldValue(ImageSource oldvalue);
    private static void ImageSourceChanged(BindableObject bindable, ImageSource newSource);
    public static void ImageSourceSourceChanged(object sender, EventArgs e);
    internal static bool GetLoadAsAnimation(BindableObject bindable);
}
[TypeConverterAttribute("Xamarin.Forms.ImageSourceConverter")]
public abstract class Xamarin.Forms.ImageSource : Element {
    private object _synchandle;
    private CancellationTokenSource _cancellationTokenSource;
    private TaskCompletionSource`1<bool> _completionSource;
    private WeakEventManager _weakEventManager;
    public bool IsEmpty { get; }
    protected CancellationTokenSource CancellationTokenSource { get; private set; }
    private bool IsLoading { get; }
    public virtual bool get_IsEmpty();
    protected CancellationTokenSource get_CancellationTokenSource();
    private void set_CancellationTokenSource(CancellationTokenSource value);
    private bool get_IsLoading();
    public virtual Task`1<bool> Cancel();
    public static ImageSource FromFile(string file);
    public static ImageSource FromResource(string resource, Type resolvingType);
    public static ImageSource FromResource(string resource, Assembly sourceAssembly);
    public static ImageSource FromStream(Func`1<Stream> stream);
    public static ImageSource FromUri(Uri uri);
    public static ImageSource op_Implicit(string source);
    public static ImageSource op_Implicit(Uri uri);
    protected void OnLoadingCompleted(bool cancelled);
    protected void OnLoadingStarted();
    protected void OnSourceChanged();
    internal void add_SourceChanged(EventHandler value);
    internal void remove_SourceChanged(EventHandler value);
}
[TypeConversionAttribute("Xamarin.Forms.ImageSource")]
public class Xamarin.Forms.ImageSourceConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public interface Xamarin.Forms.IMasterDetailPageController {
    public bool CanChangeIsPresented { get; public set; }
    public Rectangle DetailBounds { get; public set; }
    public Rectangle MasterBounds { get; public set; }
    public bool ShouldShowSplitMode { get; }
    public abstract virtual bool get_CanChangeIsPresented();
    public abstract virtual void set_CanChangeIsPresented(bool value);
    public abstract virtual Rectangle get_DetailBounds();
    public abstract virtual void set_DetailBounds(Rectangle value);
    public abstract virtual Rectangle get_MasterBounds();
    public abstract virtual void set_MasterBounds(Rectangle value);
    public abstract virtual bool get_ShouldShowSplitMode();
    public abstract virtual void UpdateMasterBehavior();
    [CompilerGeneratedAttribute]
public abstract virtual void add_BackButtonPressed(EventHandler`1<BackButtonPressedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BackButtonPressed(EventHandler`1<BackButtonPressedEventArgs> value);
}
public interface Xamarin.Forms.IMediaElementController {
    public double BufferingProgress { get; public set; }
    public MediaElementState CurrentState { get; public set; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public TimeSpan Position { get; public set; }
    public int VideoHeight { get; public set; }
    public int VideoWidth { get; public set; }
    public double Volume { get; public set; }
    public abstract virtual double get_BufferingProgress();
    public abstract virtual void set_BufferingProgress(double value);
    public abstract virtual MediaElementState get_CurrentState();
    public abstract virtual void set_CurrentState(MediaElementState value);
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    public abstract virtual void set_Duration(Nullable`1<TimeSpan> value);
    public abstract virtual TimeSpan get_Position();
    public abstract virtual void set_Position(TimeSpan value);
    public abstract virtual int get_VideoHeight();
    public abstract virtual void set_VideoHeight(int value);
    public abstract virtual int get_VideoWidth();
    public abstract virtual void set_VideoWidth(int value);
    public abstract virtual double get_Volume();
    public abstract virtual void set_Volume(double value);
    public abstract virtual void OnMediaEnded();
    public abstract virtual void OnMediaFailed();
    public abstract virtual void OnMediaOpened();
    public abstract virtual void OnSeekCompleted();
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.IMenuItemController {
    public bool IsEnabled { get; public set; }
    [ObsoleteAttribute("This property is obsolete as of 3.5.0. Please use MenuItem.IsEnabledProperty.PropertyName instead.")]
public string IsEnabledPropertyName { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual void Activate();
    public abstract virtual string get_IsEnabledPropertyName();
}
public interface Xamarin.Forms.IMessagingCenter {
    public abstract virtual void Send(TSender sender, string message, TArgs args);
    public abstract virtual void Send(TSender sender, string message);
    public abstract virtual void Subscribe(object subscriber, string message, Action`2<TSender, TArgs> callback, TSender source);
    public abstract virtual void Subscribe(object subscriber, string message, Action`1<TSender> callback, TSender source);
    public abstract virtual void Unsubscribe(object subscriber, string message);
    public abstract virtual void Unsubscribe(object subscriber, string message);
}
public interface Xamarin.Forms.IMultiPageController`1 {
    public abstract virtual T GetPageByIndex(int index);
}
public interface Xamarin.Forms.IMultiValueConverter {
    public abstract virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public interface Xamarin.Forms.INativeElementView {
    public Element Element { get; }
    public abstract virtual Element get_Element();
}
public interface Xamarin.Forms.INavigation {
    public IReadOnlyList`1<Page> ModalStack { get; }
    public IReadOnlyList`1<Page> NavigationStack { get; }
    public abstract virtual IReadOnlyList`1<Page> get_ModalStack();
    public abstract virtual IReadOnlyList`1<Page> get_NavigationStack();
    public abstract virtual void InsertPageBefore(Page page, Page before);
    public abstract virtual Task`1<Page> PopAsync();
    public abstract virtual Task`1<Page> PopAsync(bool animated);
    public abstract virtual Task`1<Page> PopModalAsync();
    public abstract virtual Task`1<Page> PopModalAsync(bool animated);
    public abstract virtual Task PopToRootAsync();
    public abstract virtual Task PopToRootAsync(bool animated);
    public abstract virtual Task PushAsync(Page page);
    public abstract virtual Task PushAsync(Page page, bool animated);
    public abstract virtual Task PushModalAsync(Page page);
    public abstract virtual Task PushModalAsync(Page page, bool animated);
    public abstract virtual void RemovePage(Page page);
}
public interface Xamarin.Forms.INavigationPageController {
    public IEnumerable`1<Page> Pages { get; }
    public int StackDepth { get; }
    public abstract virtual Task`1<Page> RemoveAsyncInner(Page page, bool animated, bool fast);
    public abstract virtual Page Peek(int depth);
    public abstract virtual IEnumerable`1<Page> get_Pages();
    public abstract virtual int get_StackDepth();
    public abstract virtual Task`1<Page> PopAsyncInner(bool animated, bool fast);
    [CompilerGeneratedAttribute]
public abstract virtual void add_InsertPageBeforeRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InsertPageBeforeRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PopRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PopRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PopToRootRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PopToRootRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PushRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PushRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemovePageRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemovePageRequested(EventHandler`1<NavigationRequestedEventArgs> value);
}
public enum Xamarin.Forms.IndicatorShape : Enum {
    public int value__;
    public static IndicatorShape Circle;
    public static IndicatorShape Square;
}
internal class Xamarin.Forms.IndicatorStackLayout : StackLayout {
    private IndicatorView _indicatorView;
    public IndicatorStackLayout(IndicatorView indicatorView);
    private void _indicatorViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ResetIndicatorStyles();
    internal void ResetIndicators();
    internal void ResetIndicatorCount(int oldCount);
    private void ResetIndicatorStylesNonBatch();
    private Color GetColorOrDefault(Color color, Color defaultColor);
    private void AddExtraIndicatorItems();
    private void RemoveRedundantIndicatorItems();
    public void Remove();
    [CompilerGeneratedAttribute]
private void <AddExtraIndicatorItems>b__8_0(object sender, EventArgs args);
}
[ContentPropertyAttribute("IndicatorLayout")]
[RenderWithAttribute("Xamarin.Forms.Platform._IndicatorViewRenderer")]
public class Xamarin.Forms.IndicatorView : TemplatedView {
    private static int DefaultPadding;
    public static BindableProperty IndicatorsShapeProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty CountProperty;
    public static BindableProperty MaximumVisibleProperty;
    public static BindableProperty IndicatorTemplateProperty;
    public static BindableProperty HideSingleProperty;
    public static BindableProperty IndicatorColorProperty;
    public static BindableProperty SelectedIndicatorColorProperty;
    public static BindableProperty IndicatorSizeProperty;
    public static BindableProperty ItemsSourceProperty;
    private static BindableProperty IndicatorLayoutProperty;
    public IndicatorShape IndicatorsShape { get; public set; }
    public Layout`1<View> IndicatorLayout { get; public set; }
    public int Position { get; public set; }
    public int Count { get; public set; }
    public int MaximumVisible { get; public set; }
    public DataTemplate IndicatorTemplate { get; public set; }
    public bool HideSingle { get; public set; }
    public Color IndicatorColor { get; public set; }
    public Color SelectedIndicatorColor { get; public set; }
    public double IndicatorSize { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    private static IndicatorView();
    public IndicatorShape get_IndicatorsShape();
    public void set_IndicatorsShape(IndicatorShape value);
    public Layout`1<View> get_IndicatorLayout();
    public void set_IndicatorLayout(Layout`1<View> value);
    public int get_Position();
    public void set_Position(int value);
    public int get_Count();
    public void set_Count(int value);
    public int get_MaximumVisible();
    public void set_MaximumVisible(int value);
    public DataTemplate get_IndicatorTemplate();
    public void set_IndicatorTemplate(DataTemplate value);
    public bool get_HideSingle();
    public void set_HideSingle(bool value);
    public Color get_IndicatorColor();
    public void set_IndicatorColor(Color value);
    public Color get_SelectedIndicatorColor();
    public void set_SelectedIndicatorColor(Color value);
    public double get_IndicatorSize();
    public void set_IndicatorSize(double value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    private static void UpdateIndicatorLayout(IndicatorView indicatorView, object newValue);
    private void ResetItemsSource(IEnumerable oldItemsSource);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
[FlagsAttribute]
public enum Xamarin.Forms.InitializationFlags : Enum {
    public long value__;
    public static InitializationFlags DisableCss;
}
public class Xamarin.Forms.InputView : View {
    public static BindableProperty TextProperty;
    public static BindableProperty KeyboardProperty;
    public static BindableProperty IsSpellCheckEnabledProperty;
    public static BindableProperty MaxLengthProperty;
    public static BindableProperty IsReadOnlyProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty PlaceholderColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty TextTransformProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<TextChangedEventArgs> TextChanged;
    public int MaxLength { get; public set; }
    public string Text { get; public set; }
    public Keyboard Keyboard { get; public set; }
    public bool IsSpellCheckEnabled { get; public set; }
    public bool IsReadOnly { get; public set; }
    public string Placeholder { get; public set; }
    public Color PlaceholderColor { get; public set; }
    public Color TextColor { get; public set; }
    public double CharacterSpacing { get; public set; }
    public TextTransform TextTransform { get; public set; }
    private static InputView();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_Text();
    public void set_Text(string value);
    public Keyboard get_Keyboard();
    public void set_Keyboard(Keyboard value);
    public bool get_IsSpellCheckEnabled();
    public void set_IsSpellCheckEnabled(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public sealed virtual string get_Placeholder();
    public void set_Placeholder(string value);
    public sealed virtual Color get_PlaceholderColor();
    public void set_PlaceholderColor(Color value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    [CompilerGeneratedAttribute]
public void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    protected virtual void OnTextChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    public sealed virtual void OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    public sealed virtual string UpdateFormsText(string original, TextTransform transform);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.ActionSheetArguments : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destruction>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<string> <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public IEnumerable`1<string> Buttons { get; private set; }
    public string Cancel { get; private set; }
    public string Destruction { get; private set; }
    public TaskCompletionSource`1<string> Result { get; }
    public string Title { get; private set; }
    public ActionSheetArguments(string title, string cancel, string destruction, IEnumerable`1<string> buttons);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Buttons();
    [CompilerGeneratedAttribute]
private void set_Buttons(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Cancel();
    [CompilerGeneratedAttribute]
private void set_Cancel(string value);
    [CompilerGeneratedAttribute]
public string get_Destruction();
    [CompilerGeneratedAttribute]
private void set_Destruction(string value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<string> get_Result();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    public void SetResult(string result);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.AlertArguments : object {
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Accept { get; private set; }
    public string Cancel { get; private set; }
    public string Message { get; private set; }
    public TaskCompletionSource`1<bool> Result { get; }
    public string Title { get; private set; }
    public AlertArguments(string title, string message, string accept, string cancel);
    [CompilerGeneratedAttribute]
public string get_Accept();
    [CompilerGeneratedAttribute]
private void set_Accept(string value);
    [CompilerGeneratedAttribute]
public string get_Cancel();
    [CompilerGeneratedAttribute]
private void set_Cancel(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<bool> get_Result();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    public void SetResult(bool result);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.AsyncValue`1 : object {
    private T _defaultValue;
    private Task`1<T> _valueTask;
    private bool _isRunning;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool IsRunning { get; public set; }
    public T Value { get; }
    public static AsyncValue`1<T> Null { get; }
    public AsyncValue`1(Task`1<T> valueTask, T defaultValue);
    public bool get_IsRunning();
    public void set_IsRunning(bool value);
    public T get_Value();
    public static AsyncValue`1<T> get_Null();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__3_0(Task`1<T> t);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(Task`1<T> t);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.AsyncValueExtensions : object {
    [ExtensionAttribute]
public static AsyncValue`1<T> AsAsyncValue(Task`1<T> valueTask, T defaultValue);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.CellExtensions : object {
    [ExtensionAttribute]
public static bool GetIsGroupHeader(TItem cell);
    [ExtensionAttribute]
public static void SetIsGroupHeader(TItem cell, bool value);
    [ExtensionAttribute]
public static TItem GetGroupHeaderContent(TItem cell);
    [ExtensionAttribute]
public static int GetIndex(TItem cell);
    [ExtensionAttribute]
public static ITemplatedItemsList`1<TItem> GetGroup(TItem cell);
    [ExtensionAttribute]
public static Tuple`2<int, int> GetPath(Cell cell);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Internals.ContentPageEx : object {
    private static long MS;
    public static List`1<ProfileDatum> Data;
    private static ContentPageEx();
    private static void ASSERT(bool condition);
    private static long GatherTicks(Int32& i);
    private static void AppendProfile(StringBuilder sb, long profiledMs, bool showZeros);
    [ExtensionAttribute]
public static void LoadProfile(ContentPage page);
}
internal class Xamarin.Forms.Internals.Crc64 : HashAlgorithm {
    private static Crc64 _instance;
    private static UInt64[] Table;
    private ulong crc;
    private ulong length;
    private static UInt32[] _lookup32;
    public static Crc64 Instance { get; }
    private static Crc64();
    public static Crc64 get_Instance();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private static UInt32[] CreateLookup32();
    private static string ByteArrayToHexViaLookup32(Byte[] bytes);
    public static string GetHash(string input);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.CustomKeyboard : Keyboard {
    [CompilerGeneratedAttribute]
private KeyboardFlags <Flags>k__BackingField;
    public KeyboardFlags Flags { get; private set; }
    internal CustomKeyboard(KeyboardFlags flags);
    [CompilerGeneratedAttribute]
public KeyboardFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(KeyboardFlags value);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static class Xamarin.Forms.Internals.DataTemplateExtensions : object {
    [ExtensionAttribute]
public static DataTemplate SelectDataTemplate(DataTemplate self, object item, BindableObject container);
    [ExtensionAttribute]
public static object CreateContent(DataTemplate self, object item, BindableObject container);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.DelegateLogListener : LogListener {
    private Action`2<string, string> _log;
    public DelegateLogListener(Action`2<string, string> log);
    public virtual void Warning(string category, string message);
}
public static class Xamarin.Forms.Internals.DependencyResolver : object {
    private static Type _defaultVisualType;
    [CompilerGeneratedAttribute]
private static Func`3<Type, Object[], object> <Resolver>k__BackingField;
    private static Func`3<Type, Object[], object> Resolver { get; private set; }
    private static DependencyResolver();
    [CompilerGeneratedAttribute]
private static Func`3<Type, Object[], object> get_Resolver();
    [CompilerGeneratedAttribute]
private static void set_Resolver(Func`3<Type, Object[], object> value);
    public static void ResolveUsing(Func`3<Type, Object[], object> resolver);
    public static void ResolveUsing(Func`2<Type, object> resolver);
    internal static object Resolve(Type type, Object[] args);
    internal static object ResolveOrCreate(Type type);
    internal static object ResolveOrCreate(Type type, object source, Type visualType, Object[] args);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.Forms.Internals.DeviceInfo : object {
    private DeviceOrientation _currentOrientation;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public DeviceOrientation CurrentOrientation { get; public set; }
    public Size PixelScreenSize { get; }
    public Size ScaledScreenSize { get; }
    public double ScalingFactor { get; }
    public DeviceOrientation get_CurrentOrientation();
    public void set_CurrentOrientation(DeviceOrientation value);
    public virtual double DisplayRound(double value);
    public abstract virtual Size get_PixelScreenSize();
    public abstract virtual Size get_ScaledScreenSize();
    public abstract virtual double get_ScalingFactor();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnPropertyChanged(string propertyName);
}
[EditorBrowsableAttribute("1")]
public enum Xamarin.Forms.Internals.DeviceOrientation : Enum {
    public int value__;
    public static DeviceOrientation Portrait;
    public static DeviceOrientation Landscape;
    public static DeviceOrientation PortraitUp;
    public static DeviceOrientation PortraitDown;
    public static DeviceOrientation LandscapeLeft;
    public static DeviceOrientation LandscapeRight;
    public static DeviceOrientation Other;
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.DeviceOrientationExtensions : object {
    [ExtensionAttribute]
public static bool IsLandscape(DeviceOrientation orientation);
    [ExtensionAttribute]
public static bool IsPortrait(DeviceOrientation orientation);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.DynamicResource : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; private set; }
    public DynamicResource(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.EffectUtilities : object {
    public static void RegisterEffectControlProvider(IEffectControlProvider self, IElementController oldElement, IElementController newElement);
    public static void UnregisterEffectControlProvider(IEffectControlProvider self, IElementController element);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.EnumerableExtensions : object {
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Xamarin.Forms.Internals.EnumerableExtensions/<GetChildGesturesFor>d__0`1")]
public static IEnumerable`1<T> GetChildGesturesFor(IEnumerable`1<GestureElement> elements, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Xamarin.Forms.Internals.EnumerableExtensions/<GetGesturesFor>d__1`1")]
public static IEnumerable`1<T> GetGesturesFor(IEnumerable`1<IGestureRecognizer> gestures, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Xamarin.Forms.Internals.EnumerableExtensions/<Append>d__2`1")]
internal static IEnumerable`1<T> Append(IEnumerable`1<T> enumerable, T item);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
    [ExtensionAttribute]
public static IDictionary`2<TKey, List`1<TSource>> GroupToDictionary(IEnumerable`1<TSource> enumeration, Func`2<TSource, TKey> func);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> enumerable, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> enumerable, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Xamarin.Forms.Internals.EnumerableExtensions/<Prepend>d__7`1")]
public static IEnumerable`1<T> Prepend(IEnumerable`1<T> enumerable, T item);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.EvalRequested : EventArgs {
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    public string Script { get; }
    public EvalRequested(string script);
    [CompilerGeneratedAttribute]
public string get_Script();
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.EvaluateJavaScriptDelegate : MulticastDelegate {
    public EvaluateJavaScriptDelegate(object object, IntPtr method);
    public virtual Task`1<string> Invoke(string script);
    public virtual IAsyncResult BeginInvoke(string script, AsyncCallback callback, object object);
    public virtual Task`1<string> EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.EventArg`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; }
    public EventArg`1(T data);
    [CompilerGeneratedAttribute]
public T get_Data();
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.Forms.Internals.ExpressionSearch : object {
    [CompilerGeneratedAttribute]
private static IExpressionSearch <Default>k__BackingField;
    public static IExpressionSearch Default { get; public set; }
    [CompilerGeneratedAttribute]
public static IExpressionSearch get_Default();
    [CompilerGeneratedAttribute]
public static void set_Default(IExpressionSearch value);
}
public static class Xamarin.Forms.Internals.FontRegistrar : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Dictionary`2<string, ValueTuple`2<ExportFontAttribute, Assembly>> EmbeddedFonts;
    private static Dictionary`2<string, ValueTuple`2<bool, string>> fontLookupCache;
    private static FontRegistrar();
    public static void Register(ExportFontAttribute fontAttribute, Assembly assembly);
    public static ValueTuple`2<bool, string> HasFont(string font);
    private static Stream GetEmbeddedResourceStream(Assembly assembly, string resourceFileName);
    private static bool IsFile(string path, string file);
}
public class Xamarin.Forms.Internals.GIFBitmap : object {
    [CompilerGeneratedAttribute]
private Int32[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DataPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposeMethod <Dispose>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTransparent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransparencyIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInterlaced>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LoopCount>k__BackingField;
    [CompilerGeneratedAttribute]
private GIFColorTable <ColorTable>k__BackingField;
    private static string NetscapeApplicationExtensionID;
    private GIFHeader _header;
    public Int32[] Data { get; public set; }
    public long DataPosition { get; private set; }
    public Rect Bounds { get; private set; }
    public DisposeMethod Dispose { get; private set; }
    public int BackgroundColor { get; private set; }
    public bool IsTransparent { get; private set; }
    public int TransparencyIndex { get; private set; }
    public bool IsInterlaced { get; private set; }
    public int Delay { get; private set; }
    public int LoopCount { get; private set; }
    public GIFColorTable ColorTable { get; private set; }
    private GIFBitmap(GIFHeader header);
    [CompilerGeneratedAttribute]
public Int32[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Int32[] value);
    [CompilerGeneratedAttribute]
public long get_DataPosition();
    [CompilerGeneratedAttribute]
private void set_DataPosition(long value);
    [CompilerGeneratedAttribute]
public Rect get_Bounds();
    [CompilerGeneratedAttribute]
private void set_Bounds(Rect value);
    [CompilerGeneratedAttribute]
public DisposeMethod get_Dispose();
    [CompilerGeneratedAttribute]
private void set_Dispose(DisposeMethod value);
    [CompilerGeneratedAttribute]
public int get_BackgroundColor();
    [CompilerGeneratedAttribute]
private void set_BackgroundColor(int value);
    [CompilerGeneratedAttribute]
public bool get_IsTransparent();
    [CompilerGeneratedAttribute]
private void set_IsTransparent(bool value);
    [CompilerGeneratedAttribute]
public int get_TransparencyIndex();
    [CompilerGeneratedAttribute]
private void set_TransparencyIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsInterlaced();
    [CompilerGeneratedAttribute]
private void set_IsInterlaced(bool value);
    [CompilerGeneratedAttribute]
public int get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(int value);
    [CompilerGeneratedAttribute]
public int get_LoopCount();
    [CompilerGeneratedAttribute]
private void set_LoopCount(int value);
    [CompilerGeneratedAttribute]
public GIFColorTable get_ColorTable();
    [CompilerGeneratedAttribute]
private void set_ColorTable(GIFColorTable value);
    private void SetDisposeMethod(int flags);
    private void SetTransparency(int flags, int index);
    private void SetDelay(int delay);
    private bool UseLocalColorTable(int flags);
    private short LocalColorTableSize(int flags);
    private bool UseInterlace(int flags);
    private void ParseGraphicControlExtension(GIFDecoderStreamReader stream);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFBitmap/<ParseNetscapeApplicationExtensionAsync>d__57")]
private Task ParseNetscapeApplicationExtensionAsync(GIFDecoderStreamReader stream);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFBitmap/<ParseApplicationExtensionAsync>d__58")]
private Task ParseApplicationExtensionAsync(GIFDecoderStreamReader stream);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFBitmap/<ParseGIFBitmapHeaderAsync>d__59")]
private Task ParseGIFBitmapHeaderAsync(GIFDecoderStreamReader stream);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFBitmap/<ParseImageDescriptorAsync>d__60")]
private Task ParseImageDescriptorAsync(GIFDecoderStreamReader stream, GIFBitmapDecoder decoder, GIFBitmap previousBitmap, bool ignoreImageData);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFBitmap/<ParseExtensionAsync>d__61")]
private Task ParseExtensionAsync(GIFDecoderStreamReader stream);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFBitmap/<CreateBitmapAsync>d__62")]
public static Task`1<GIFBitmap> CreateBitmapAsync(GIFDecoderStreamReader stream, GIFHeader header, GIFBitmapDecoder decoder, GIFBitmap previousBitmap, bool ignoreImageData);
}
public class Xamarin.Forms.Internals.GIFBitmapDecoder : object {
    private Int16[] _prefix;
    private Byte[] _suffix;
    private Byte[] _pixelStack;
    private Byte[] _pixels;
    private static int DecoderStackSize;
    private void InitializeBuffers(int pixelCount);
    private void RestoreToBackground(GIFHeader header, GIFBitmap currentBitmap, GIFBitmap previousBitmap, Int32[] bitmapData);
    public void Compose(GIFHeader header, GIFBitmap currentBitmap, GIFBitmap previousBitmap);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFBitmapDecoder/<DecodeAsync>d__8")]
public Task DecodeAsync(GIFDecoderStreamReader stream, int width, int height);
}
public class Xamarin.Forms.Internals.GIFColorTable : object {
    private Int32[] _colorTable;
    private Byte[] _colorData;
    private short _size;
    private int _transparencyIndex;
    private int _oldColorValue;
    public Int32[] Data { get; }
    private GIFColorTable(short size);
    public Int32[] get_Data();
    public void SetTransparency(int transparencyIndex);
    public void ResetTransparency();
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFColorTable/<CreateColorTableAsync>d__10")]
public static Task`1<GIFColorTable> CreateColorTableAsync(GIFDecoderStreamReader stream, short size);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFColorTable/<ParseAsync>d__11")]
private Task ParseAsync(GIFDecoderStreamReader stream);
}
public class Xamarin.Forms.Internals.GIFDecoderFormatException : Exception {
    public GIFDecoderFormatException(string message);
    public GIFDecoderFormatException(string message, Exception innerException);
}
public class Xamarin.Forms.Internals.GIFDecoderStreamReader : object {
    private Stream _stream;
    private long _currentPosition;
    private int _currentBlockSize;
    private Byte[] _blockBuffer;
    public long CurrentPosition { get; }
    public Byte[] CurrentBlockBuffer { get; }
    public int CurrentBlockSize { get; }
    public GIFDecoderStreamReader(Stream stream);
    public long get_CurrentPosition();
    public Byte[] get_CurrentBlockBuffer();
    public int get_CurrentBlockSize();
    public int Read();
    public int ReadShort();
    public string ReadString(int length);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFDecoderStreamReader/<ReadAsync>d__14")]
public Task`1<int> ReadAsync(Byte[] buffer, int toRead);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFDecoderStreamReader/<ReadBlockAsync>d__15")]
public Task`1<int> ReadBlockAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFDecoderStreamReader/<SkipBlockAsync>d__16")]
public Task SkipBlockAsync();
}
public class Xamarin.Forms.Internals.GIFHeader : object {
    [CompilerGeneratedAttribute]
private string <TypeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackgroundColorIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private GIFColorTable <GlobalColorTable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PixelAspectRatio>k__BackingField;
    public string TypeIdentifier { get; private set; }
    public string Version { get; private set; }
    public int Width { get; private set; }
    public int Height { get; private set; }
    public int BackgroundColorIndex { get; private set; }
    public int BackgroundColor { get; private set; }
    public GIFColorTable GlobalColorTable { get; private set; }
    public int PixelAspectRatio { get; private set; }
    public bool IsGIFHeader { get; }
    [CompilerGeneratedAttribute]
public string get_TypeIdentifier();
    [CompilerGeneratedAttribute]
private void set_TypeIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_BackgroundColorIndex();
    [CompilerGeneratedAttribute]
private void set_BackgroundColorIndex(int value);
    [CompilerGeneratedAttribute]
public int get_BackgroundColor();
    [CompilerGeneratedAttribute]
private void set_BackgroundColor(int value);
    [CompilerGeneratedAttribute]
public GIFColorTable get_GlobalColorTable();
    [CompilerGeneratedAttribute]
private void set_GlobalColorTable(GIFColorTable value);
    [CompilerGeneratedAttribute]
public int get_PixelAspectRatio();
    [CompilerGeneratedAttribute]
private void set_PixelAspectRatio(int value);
    public bool get_IsGIFHeader();
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFHeader/<CreateHeaderAsync>d__35")]
public static Task`1<GIFHeader> CreateHeaderAsync(GIFDecoderStreamReader stream, bool skipTypeIdentifier);
    private bool UseGlobalColorTable(int flags);
    private short GlobalColorTableSize(int flags);
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFHeader/<ParseAsync>d__38")]
private Task ParseAsync(GIFDecoderStreamReader stream, bool skipTypeIdentifier);
}
public abstract class Xamarin.Forms.Internals.GIFImageParser : object {
    protected abstract virtual void StartParsing();
    protected abstract virtual void AddBitmap(GIFHeader header, GIFBitmap bitmap, bool ignoreImageData);
    protected abstract virtual void FinishedParsing();
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.GIFImageParser/<ParseAsync>d__3")]
public Task ParseAsync(Stream stream, bool skipTypeIdentifier, bool ignoreImageData);
}
[EditorBrowsableAttribute("1")]
internal interface Xamarin.Forms.Internals.IButtonElement {
    public object CommandParameter { get; public set; }
    public ICommand Command { get; public set; }
    public bool IsPressed { get; }
    unknown bool IsEnabledCore {public set; }
    public abstract virtual object get_CommandParameter();
    public abstract virtual void set_CommandParameter(object value);
    public abstract virtual ICommand get_Command();
    public abstract virtual void set_Command(ICommand value);
    public abstract virtual bool get_IsPressed();
    public abstract virtual void PropagateUpClicked();
    public abstract virtual void PropagateUpPressed();
    public abstract virtual void PropagateUpReleased();
    public abstract virtual void SetIsPressed(bool isPressed);
    public abstract virtual void OnCommandCanExecuteChanged(object sender, EventArgs e);
    public abstract virtual void set_IsEnabledCore(bool value);
}
[ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IDataTemplate {
    public Func`1<object> LoadTemplate { get; public set; }
    public abstract virtual Func`1<object> get_LoadTemplate();
    public abstract virtual void set_LoadTemplate(Func`1<object> value);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IDataTemplateController {
    public int Id { get; }
    public string IdString { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_IdString();
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IDeserializer {
    public abstract virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    public abstract virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IDynamicResourceHandler {
    public abstract virtual void SetDynamicResource(BindableProperty property, string key);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IExpressionSearch {
    public abstract virtual List`1<T> FindObjects(Expression expression);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IFontElement {
    public FontAttributes FontAttributes { get; }
    public string FontFamily { get; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; }
    public abstract virtual FontAttributes get_FontAttributes();
    public abstract virtual string get_FontFamily();
    public abstract virtual double get_FontSize();
    public abstract virtual void OnFontFamilyChanged(string oldValue, string newValue);
    public abstract virtual void OnFontSizeChanged(double oldValue, double newValue);
    public abstract virtual double FontSizeDefaultValueCreator();
    public abstract virtual void OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    public abstract virtual void OnFontChanged(Font oldValue, Font newValue);
}
public interface Xamarin.Forms.Internals.IGestureController {
    public IList`1<IGestureRecognizer> CompositeGestureRecognizers { get; }
    public abstract virtual IList`1<GestureElement> GetChildElements(Point point);
    public abstract virtual IList`1<IGestureRecognizer> get_CompositeGestureRecognizers();
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IIsolatedStorageFile {
    public abstract virtual Task CreateDirectoryAsync(string path);
    public abstract virtual Task`1<bool> GetDirectoryExistsAsync(string path);
    public abstract virtual Task`1<bool> GetFileExistsAsync(string path);
    public abstract virtual Task`1<DateTimeOffset> GetLastWriteTimeAsync(string path);
    public abstract virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access);
    public abstract virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access, FileShare share);
}
[EditorBrowsableAttribute("1")]
internal interface Xamarin.Forms.Internals.ILineHeightElement {
    public double LineHeight { get; }
    public abstract virtual double get_LineHeight();
    public abstract virtual void OnLineHeightChanged(double oldValue, double newValue);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.INameScope {
    public abstract virtual object FindByName(string name);
    public abstract virtual void RegisterName(string name, object scopedElement);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.INavigationProxy {
    public NavigationProxy NavigationProxy { get; }
    public abstract virtual NavigationProxy get_NavigationProxy();
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum Xamarin.Forms.Internals.InvalidationTrigger : Enum {
    public int value__;
    public static InvalidationTrigger Undefined;
    public static InvalidationTrigger MeasureChanged;
    public static InvalidationTrigger HorizontalOptionsChanged;
    public static InvalidationTrigger VerticalOptionsChanged;
    public static InvalidationTrigger SizeRequestChanged;
    public static InvalidationTrigger RendererReady;
    public static InvalidationTrigger MarginChanged;
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IPerformanceProvider {
    public abstract virtual void Stop(string reference, string tag, string path, string member);
    public abstract virtual void Start(string reference, string tag, string path, string member);
}
[ObsoleteAttribute("This interface is obsolete as of 3.5.0. Do not use it.")]
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IPlatform {
    [ObsoleteAttribute("This method is obsolete as of 3.5.0. Please use the static Platform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint) method instead")]
public abstract virtual SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IPlatformServices {
    public bool IsInvokeRequired { get; }
    public OSAppTheme RequestedTheme { get; }
    public string RuntimePlatform { get; }
    public abstract virtual bool get_IsInvokeRequired();
    public abstract virtual void BeginInvokeOnMainThread(Action action);
    public abstract virtual Ticker CreateTicker();
    public abstract virtual Assembly[] GetAssemblies();
    public abstract virtual string GetHash(string input);
    [ObsoleteAttribute("GetMD5Hash is obsolete as of version 4.7.0")]
public abstract virtual string GetMD5Hash(string input);
    public abstract virtual double GetNamedSize(NamedSize size, Type targetElementType, bool useOldSizes);
    public abstract virtual Color GetNamedColor(string name);
    public abstract virtual OSAppTheme get_RequestedTheme();
    public abstract virtual Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken);
    public abstract virtual IIsolatedStorageFile GetUserStoreForApplication();
    public abstract virtual void OpenUriAction(Uri uri);
    public abstract virtual void StartTimer(TimeSpan interval, Func`1<bool> callback);
    public abstract virtual string get_RuntimePlatform();
    public abstract virtual void QuitApplication();
    public abstract virtual SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.IResourceDictionary {
    public abstract virtual bool TryGetValue(string key, Object& value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValuesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValuesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
}
public interface Xamarin.Forms.Internals.ISpatialElement {
    public Region Region { get; public set; }
    public abstract virtual Region get_Region();
    public abstract virtual void set_Region(Region value);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Internals.ISystemResourcesProvider {
    public abstract virtual IResourceDictionary GetSystemResources();
}
[EditorBrowsableAttribute("1")]
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.Internals.LockableObservableListWrapper : object {
    public ObservableCollection`1<string> _list;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public bool IsLocked { get; public set; }
    public string Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
public void set_IsLocked(bool value);
    private void ThrowOnLocked();
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public void InternalAdd(string item);
    public sealed virtual void Add(string item);
    public void InternalClear();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual int IndexOf(string item);
    public void InternalInsert(int index, string item);
    public sealed virtual void Insert(int index, string item);
    public bool InternalRemove(string item);
    public sealed virtual bool Remove(string item);
    public void InternalRemoveAt(int index);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.Log : object {
    [CompilerGeneratedAttribute]
private static IList`1<LogListener> <Listeners>k__BackingField;
    public static IList`1<LogListener> Listeners { get; }
    private static Log();
    [CompilerGeneratedAttribute]
public static IList`1<LogListener> get_Listeners();
    public static void Warning(string category, string message);
    public static void Warning(string category, string format, Object[] args);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.Forms.Internals.LogListener : object {
    public abstract virtual void Warning(string category, string message);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.NameScope : object {
    public static BindableProperty NameScopeProperty;
    private Dictionary`2<string, object> _names;
    private static NameScope();
    private sealed virtual override object Xamarin.Forms.Internals.INameScope.FindByName(string name);
    private sealed virtual override void Xamarin.Forms.Internals.INameScope.RegisterName(string name, object scopedElement);
    public static INameScope GetNameScope(BindableObject bindable);
    public static void SetNameScope(BindableObject bindable, INameScope value);
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.NativeBindingHelpers : object {
    public static void SetBinding(TNativeView target, string targetProperty, BindingBase bindingBase, string updateSourceEventName);
    public static void SetBinding(TNativeView target, string targetProperty, BindingBase bindingBase, INotifyPropertyChanged propertyChanged);
    private static BindableProperty CreateBindableProperty(string targetProperty, Type propertyType, object defaultValue);
    private static void SetNativeValue(TNativeView target, string targetProperty, object newValue);
    private static void SetValueFromNative(TNativeView target, string targetProperty, BindableProperty bindableProperty);
    private static void SetValueFromRenderer(BindableObject bindable, BindableProperty property, object value);
    public static void SetBinding(TNativeView target, BindableProperty targetProperty, BindingBase binding);
    public static void SetValue(TNativeView target, BindableProperty targetProperty, object value);
    public static void SetBindingContext(TNativeView target, object bindingContext, Func`2<TNativeView, IEnumerable`1<TNativeView>> getChild);
    public static void TransferBindablePropertiesToWrapper(TNativeView nativeView, TNativeWrapper wrapper);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.NavigationModel : object {
    private List`1<Page> _modalStack;
    private List`1<List`1<Page>> _navTree;
    public Page CurrentPage { get; }
    public IEnumerable`1<Page> Modals { get; }
    public IEnumerable`1<Page> Roots { get; }
    public IReadOnlyList`1<IReadOnlyList`1<Page>> Tree { get; }
    public Page get_CurrentPage();
    public IEnumerable`1<Page> get_Modals();
    [IteratorStateMachineAttribute("Xamarin.Forms.Internals.NavigationModel/<get_Roots>d__7")]
public IEnumerable`1<Page> get_Roots();
    public IReadOnlyList`1<IReadOnlyList`1<Page>> get_Tree();
    public void Clear();
    public void InsertPageBefore(Page page, Page before);
    public Page Pop(Page ancestralNav);
    public Page PopModal();
    public Page PopTopPage();
    public void PopToRoot(Page ancestralNav);
    public void Push(Page page, Page ancestralNav);
    public void PushModal(Page page);
    public bool RemovePage(Page page);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.NavigationProxy : object {
    private INavigation _inner;
    private Lazy`1<List`1<Page>> _modalStack;
    private Lazy`1<List`1<Page>> _pushStack;
    public INavigation Inner { get; public set; }
    public IReadOnlyList`1<Page> ModalStack { get; }
    public IReadOnlyList`1<Page> NavigationStack { get; }
    public INavigation get_Inner();
    public void set_Inner(INavigation value);
    public sealed virtual void InsertPageBefore(Page page, Page before);
    public sealed virtual IReadOnlyList`1<Page> get_ModalStack();
    public sealed virtual IReadOnlyList`1<Page> get_NavigationStack();
    public sealed virtual Task`1<Page> PopAsync();
    public sealed virtual Task`1<Page> PopAsync(bool animated);
    public sealed virtual Task`1<Page> PopModalAsync();
    public sealed virtual Task`1<Page> PopModalAsync(bool animated);
    public sealed virtual Task PopToRootAsync();
    public sealed virtual Task PopToRootAsync(bool animated);
    public sealed virtual Task PushAsync(Page root);
    public sealed virtual Task PushAsync(Page root, bool animated);
    public sealed virtual Task PushModalAsync(Page modal);
    public sealed virtual Task PushModalAsync(Page modal, bool animated);
    public sealed virtual void RemovePage(Page page);
    protected virtual IReadOnlyList`1<Page> GetModalStack();
    protected virtual IReadOnlyList`1<Page> GetNavigationStack();
    protected virtual void OnInsertPageBefore(Page page, Page before);
    protected virtual Task`1<Page> OnPopAsync(bool animated);
    protected virtual Task`1<Page> OnPopModal(bool animated);
    protected virtual Task OnPopToRootAsync(bool animated);
    protected virtual Task OnPushAsync(Page page, bool animated);
    protected virtual Task OnPushModal(Page modal, bool animated);
    protected virtual void OnRemovePage(Page page);
    private Page Pop();
    private Page PopModal();
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.NavigationRequestedEventArgs : NavigationEventArgs {
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    [CompilerGeneratedAttribute]
private Page <BeforePage>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<bool> <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationRequestType <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Realize>k__BackingField;
    public bool Animated { get; public set; }
    public Page BeforePage { get; public set; }
    public Task`1<bool> Task { get; public set; }
    public NavigationRequestType RequestType { get; public set; }
    [ObsoleteAttribute("This property is obsolete as of 3.5.0.")]
public bool Realize { get; public set; }
    public NavigationRequestedEventArgs(Page page, bool animated);
    public NavigationRequestedEventArgs(Page page, Page before, bool animated);
    [ObsoleteAttribute("This constructor is obsolete as of 3.5.0. Please use NavigationRequestedEventArgs(Page page, bool animated) instead.")]
public NavigationRequestedEventArgs(Page page, bool animated, bool realize);
    [CompilerGeneratedAttribute]
public bool get_Animated();
    [CompilerGeneratedAttribute]
public void set_Animated(bool value);
    [CompilerGeneratedAttribute]
public Page get_BeforePage();
    [CompilerGeneratedAttribute]
public void set_BeforePage(Page value);
    [CompilerGeneratedAttribute]
public Task`1<bool> get_Task();
    [CompilerGeneratedAttribute]
public void set_Task(Task`1<bool> value);
    [CompilerGeneratedAttribute]
public NavigationRequestType get_RequestType();
    [CompilerGeneratedAttribute]
public void set_RequestType(NavigationRequestType value);
    [CompilerGeneratedAttribute]
public bool get_Realize();
    [CompilerGeneratedAttribute]
public void set_Realize(bool value);
}
[EditorBrowsableAttribute("1")]
public enum Xamarin.Forms.Internals.NavigationRequestType : Enum {
    public int value__;
    public static NavigationRequestType Unknown;
    public static NavigationRequestType Push;
    public static NavigationRequestType Pop;
    public static NavigationRequestType PopToRoot;
    public static NavigationRequestType Insert;
    public static NavigationRequestType Remove;
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsEx : NotifyCollectionChangedEventArgs {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, IList changedItems);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, IList newItems, IList oldItems);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, IList changedItems, int startingIndex);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, object changedItem);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, object changedItem, int index);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, object newItem, object oldItem);
    public NotifyCollectionChangedEventArgsEx(int count, NotifyCollectionChangedAction action, object newItem, object oldItem, int index);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions : object {
    [ExtensionAttribute]
public static void Apply(NotifyCollectionChangedEventArgs self, IList`1<TFrom> from, IList`1<object> to);
    [ExtensionAttribute]
public static NotifyCollectionChangedAction Apply(NotifyCollectionChangedEventArgs self, Action`3<object, int, bool> insert, Action`2<object, int> removeAt, Action reset);
    [ExtensionAttribute]
public static NotifyCollectionChangedEventArgsEx WithCount(NotifyCollectionChangedEventArgs e, int count);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.NumericExtensions : object {
    [ExtensionAttribute]
public static double Clamp(double self, double min, double max);
    [ExtensionAttribute]
public static int Clamp(int self, int min, int max);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static class Xamarin.Forms.Internals.PageExtensions : object {
    [ExtensionAttribute]
public static Page AncestorToRoot(Page page);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.Performance : object {
    private static long Reference;
    [CompilerGeneratedAttribute]
private static IPerformanceProvider <Provider>k__BackingField;
    public static IPerformanceProvider Provider { get; private set; }
    [CompilerGeneratedAttribute]
public static IPerformanceProvider get_Provider();
    [CompilerGeneratedAttribute]
private static void set_Provider(IPerformanceProvider value);
    public static void SetProvider(IPerformanceProvider instance);
    public static void Start(String& reference, string tag, string path, string member);
    public static void Start(string reference, string tag, string path, string member);
    public static void Stop(string reference, string tag, string path, string member);
    internal static IDisposable StartNew(string tag, string path, string member);
}
[AttributeUsageAttribute("32767")]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
    public PreserveAttribute(bool allMembers, bool conditional);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.Profile : ValueType {
    private static int Capacity;
    public static List`1<Datum> Data;
    [CompilerGeneratedAttribute]
private static bool <IsEnabled>k__BackingField;
    private static Stack`1<Profile> Stack;
    private static int Depth;
    private static bool Running;
    private static Stopwatch Stopwatch;
    private long _start;
    private string _name;
    private int _slot;
    [EditorBrowsableAttribute("1")]
public static bool IsEnabled { get; private set; }
    private Profile(string name, string id, int line);
    [CompilerGeneratedAttribute]
public static bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private static void set_IsEnabled(bool value);
    [EditorBrowsableAttribute("1")]
public static void Enable();
    public static void Start();
    public static void Stop();
    public static void FrameBegin(string name, int line);
    public static void FrameEnd(string name);
    public static void FramePartition(string id, int line);
    private static void FrameBeginBody(string name, string id, int line);
    private static void FrameEndBody(string name);
    private static void FramePartitionBody(string id, int line);
    public sealed virtual void Dispose();
}
public class Xamarin.Forms.Internals.ProfileDatum : object {
    public string Name;
    public string Id;
    public long Ticks;
    public long SubTicks;
    public int Depth;
    public string Path;
    public int Line;
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.PromptArguments : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitialValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Keyboard <Keyboard>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<string> <Result>k__BackingField;
    public string Title { get; }
    public string Message { get; }
    public string Accept { get; }
    public string Cancel { get; }
    public string Placeholder { get; }
    public string InitialValue { get; }
    public int MaxLength { get; }
    public Keyboard Keyboard { get; }
    public TaskCompletionSource`1<string> Result { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("PromptArguments overload is obsolete as of version 4.5.0 and is no longer supported.")]
public PromptArguments(string title, string message, string accept, string cancel, string placeholder, int maxLength, Keyboard keyboard);
    public PromptArguments(string title, string message, string accept, string cancel, string placeholder, int maxLength, Keyboard keyboard, string initialValue);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Accept();
    [CompilerGeneratedAttribute]
public string get_Cancel();
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public string get_InitialValue();
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
public Keyboard get_Keyboard();
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<string> get_Result();
    public void SetResult(string text);
}
public static class Xamarin.Forms.Internals.PropertyPropagationExtensions : object {
    internal static void PropagatePropertyChanged(string propertyName, Element element, IEnumerable children);
    public static void PropagatePropertyChanged(string propertyName, Element target, Element source);
    internal static void PropagateFlowDirection(Element target, Element source);
    internal static void SetFlowDirectionFromParent(Element child);
    internal static void PropagateVisual(Element target, Element source);
    internal static void SetVisualfromParent(Element child);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.ReflectionExtensions : object {
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, Func`2<FieldInfo, bool> predicate);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name);
    [ExtensionAttribute]
public static IEnumerable`1<FieldInfo> GetFields(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name);
    [ExtensionAttribute]
internal static Object[] GetCustomAttributesSafe(Assembly assembly, Type attrType);
    [ExtensionAttribute]
public static Type[] GetExportedTypes(Assembly assembly);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type self, Type c);
    [ExtensionAttribute]
public static bool IsInstanceOfType(Type self, object o);
    [IteratorStateMachineAttribute("Xamarin.Forms.Internals.ReflectionExtensions/<GetParts>d__9`1")]
private static IEnumerable`1<T> GetParts(Type type, Func`2<TypeInfo, IEnumerable`1<T>> selector);
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.Registrar : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, Type> <Effects>k__BackingField;
    private static bool DisableCSS;
    private static Lazy`1<Dictionary`2<string, IList`1<StylePropertyAttribute>>> LazyStyleProperties;
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Assembly> <ExtraAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private static Registrar`1<IRegisterable> <Registered>k__BackingField;
    internal static Dictionary`2<string, Type> Effects { get; }
    internal static Dictionary`2<string, IList`1<StylePropertyAttribute>> StyleProperties { get; }
    public static IEnumerable`1<Assembly> ExtraAssemblies { get; public set; }
    public static Registrar`1<IRegisterable> Registered { get; internal set; }
    private static Registrar();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, Type> get_Effects();
    internal static Dictionary`2<string, IList`1<StylePropertyAttribute>> get_StyleProperties();
    [CompilerGeneratedAttribute]
public static IEnumerable`1<Assembly> get_ExtraAssemblies();
    [CompilerGeneratedAttribute]
public static void set_ExtraAssemblies(IEnumerable`1<Assembly> value);
    [CompilerGeneratedAttribute]
public static Registrar`1<IRegisterable> get_Registered();
    [CompilerGeneratedAttribute]
internal static void set_Registered(Registrar`1<IRegisterable> value);
    public static void RegisterRenderers(HandlerAttribute[] attributes);
    public static void RegisterStylesheets(InitializationFlags flags);
    private static Dictionary`2<string, IList`1<StylePropertyAttribute>> LoadStyleSheets();
    public static void RegisterEffects(string resolutionName, ExportEffectAttribute[] effectAttributes);
    public static void RegisterAll(Type[] attrTypes);
    public static void RegisterAll(Type[] attrTypes, InitializationFlags flags);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.Registrar`1 : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, Dictionary`2<Type, ValueTuple`2<Type, short>>> _handlers;
    private static Type _defaultVisualType;
    private static Type _materialVisualType;
    private static Type[] _defaultVisualRenderers;
    private static Registrar`1();
    public void Register(Type tview, Type trender, Type[] supportedVisuals, short priority);
    public void Register(Type tview, Type trender, Type[] supportedVisual);
    public void Register(Type tview, Type trender);
    internal TRegistrable GetHandler(Type type);
    internal TRegistrable GetHandler(Type type, Type visualType);
    internal TRegistrable GetHandler(Type type, object source, IVisual visual, Object[] args);
    public TOut GetHandler(Type type);
    public TOut GetHandler(Type type, Object[] args);
    public TOut GetHandlerForObject(object obj);
    public TOut GetHandlerForObject(object obj, Object[] args);
    public Type GetHandlerType(Type viewType);
    public Type GetHandlerType(Type viewType, Type visualType);
    public Type GetHandlerTypeForObject(object obj);
    private bool LookupHandlerType(Type viewType, Type visualType, ValueTuple`2& handlerType);
    private void RegisterRenderWithTypes(Type viewType, Type visualType);
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.ResourceLoader : object {
    private static Func`3<AssemblyName, string, string> resourceProvider;
    private static Func`2<ResourceLoadingQuery, ResourceLoadingResponse> _resourceProvider2;
    private static Action`1<Exception> exceptionHandler1;
    [CompilerGeneratedAttribute]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`1<ValueTuple`2<Exception, string>> <ExceptionHandler2>k__BackingField;
    [ObsoleteAttribute("You shouldn't have used this one to begin with, don't use the other one either")]
[EditorBrowsableAttribute("1")]
public static Func`3<AssemblyName, string, string> ResourceProvider { get; internal set; }
    public static Func`2<ResourceLoadingQuery, ResourceLoadingResponse> ResourceProvider2 { get; internal set; }
    [ObsoleteAttribute("2 is better than 1")]
internal static Action`1<Exception> ExceptionHandler { get; internal set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Action`1<ValueTuple`2<Exception, string>> ExceptionHandler2 { get; internal set; }
    public static Func`3<AssemblyName, string, string> get_ResourceProvider();
    internal static void set_ResourceProvider(Func`3<AssemblyName, string, string> value);
    public static Func`2<ResourceLoadingQuery, ResourceLoadingResponse> get_ResourceProvider2();
    internal static void set_ResourceProvider2(Func`2<ResourceLoadingQuery, ResourceLoadingResponse> value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Can't touch this")]
public static bool CanProvideContentFor(ResourceLoadingQuery rlq);
    internal static Action`1<Exception> get_ExceptionHandler();
    internal static void set_ExceptionHandler(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
internal static Action`1<ValueTuple`2<Exception, string>> get_ExceptionHandler2();
    [CompilerGeneratedAttribute]
internal static void set_ExceptionHandler2(Action`1<ValueTuple`2<Exception, string>> value);
    public static Func`2<string, string> get_ResourceProvider();
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.ResourcesChangedEventArgs : EventArgs {
    public static ResourcesChangedEventArgs StyleSheets;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, object>> <Values>k__BackingField;
    public IEnumerable`1<KeyValuePair`2<string, object>> Values { get; private set; }
    public ResourcesChangedEventArgs(IEnumerable`1<KeyValuePair`2<string, object>> values);
    private static ResourcesChangedEventArgs();
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, object>> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IEnumerable`1<KeyValuePair`2<string, object>> value);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum Xamarin.Forms.Internals.SetValueFlags : Enum {
    public int value__;
    public static SetValueFlags None;
    public static SetValueFlags ClearOneWayBindings;
    public static SetValueFlags ClearTwoWayBindings;
    public static SetValueFlags ClearDynamicResource;
    public static SetValueFlags RaiseOnEqual;
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.SwipeDirectionHelper : object {
    public static SwipeDirection GetSwipeDirection(Point initialPoint, Point endPoint);
    internal static double GetAngleFromPoints(double x1, double y1, double x2, double y2);
    internal static SwipeDirection GetSwipeDirectionFromAngle(double angle);
    internal static bool IsAngleInRange(double angle, float init, float end);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.Forms.Internals.TableModel : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArg`1<object>> ItemLongPressed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArg`1<object>> ItemSelected;
    public virtual Cell GetCell(int section, int row);
    public virtual Cell GetHeaderCell(int section);
    public abstract virtual object GetItem(int section, int row);
    public abstract virtual int GetRowCount(int section);
    public abstract virtual int GetSectionCount();
    public virtual String[] GetSectionIndexTitles();
    public virtual string GetSectionTitle(int section);
    public virtual Color GetSectionTextColor(int section);
    [CompilerGeneratedAttribute]
public void add_ItemLongPressed(EventHandler`1<EventArg`1<object>> value);
    [CompilerGeneratedAttribute]
public void remove_ItemLongPressed(EventHandler`1<EventArg`1<object>> value);
    [CompilerGeneratedAttribute]
public void add_ItemSelected(EventHandler`1<EventArg`1<object>> value);
    [CompilerGeneratedAttribute]
public void remove_ItemSelected(EventHandler`1<EventArg`1<object>> value);
    public sealed virtual void RowLongPressed(int section, int row);
    public void RowLongPressed(object item);
    public sealed virtual void RowSelected(int section, int row);
    public sealed virtual void RowSelected(object item);
    protected virtual void OnRowLongPressed(object item);
    protected virtual void OnRowSelected(object item);
}
[EditorBrowsableAttribute("1")]
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.Internals.TemplatedItemsList`2 : BindableObject {
    public static BindableProperty NameProperty;
    public static BindableProperty ShortNameProperty;
    private static BindablePropertyKey HeaderContentPropertyKey;
    internal static BindablePropertyKey ListProxyPropertyKey;
    private static BindableProperty GroupProperty;
    private static BindableProperty IndexProperty;
    private static BindablePropertyKey IsGroupHeaderPropertyKey;
    private BindableProperty _itemSourceProperty;
    private BindableProperty _itemTemplateProperty;
    private TView _itemsView;
    private List`1<TItem> _templatedObjects;
    private bool _disposed;
    private BindingBase _groupDisplayBinding;
    private OrderedDictionary`2<object, TemplatedItemsList`2<TView, TItem>> _groupedItems;
    private DataTemplate _groupHeaderTemplate;
    private BindingBase _groupShortNameBinding;
    private ShortNamesProxy<TView, TItem> _shortNames;
    [CompilerGeneratedAttribute]
private BindableProperty <GroupHeaderTemplateProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableProperty <IsGroupingEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplatedItemsList`2<TView, TItem> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableProperty <ProgressiveLoadingProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler GroupedCollectionChanged;
    public BindingBase GroupDisplayBinding { get; public set; }
    public DataTemplate GroupHeaderTemplate { get; public set; }
    public BindableProperty GroupHeaderTemplateProperty { get; public set; }
    public BindingBase GroupShortNameBinding { get; public set; }
    public TItem HeaderContent { get; private set; }
    public bool IsGroupingEnabled { get; }
    public BindableProperty IsGroupingEnabledProperty { get; public set; }
    public IEnumerable ItemsSource { get; }
    public string Name { get; public set; }
    public TemplatedItemsList`2<TView, TItem> Parent { get; }
    public BindableProperty ProgressiveLoadingProperty { get; public set; }
    public string ShortName { get; public set; }
    public IReadOnlyList`1<string> ShortNames { get; }
    internal ListViewCachingStrategy CachingStrategy { get; }
    internal IListProxy ListProxy { get; private set; }
    private IListProxy Xamarin.Forms.ITemplatedItemsList<TItem>.ListProxy { get; }
    private DataTemplate ItemTemplate { get; }
    private bool ProgressiveLoading { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    public TItem Item { get; }
    private object Xamarin.Forms.ITemplatedItemsList<TItem>.BindingContext { get; }
    internal TemplatedItemsList`2(TView itemsView, BindableProperty itemSourceProperty, BindableProperty itemTemplateProperty);
    internal TemplatedItemsList`2(TemplatedItemsList`2<TView, TItem> parent, IEnumerable itemSource, TView itemsView, BindableProperty itemTemplateProperty, int windowSize);
    private static TemplatedItemsList`2();
    private sealed virtual override void Xamarin.Forms.ITemplatedItemsList<TItem>.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void Xamarin.Forms.ITemplatedItemsList<TItem>.remove_PropertyChanged(PropertyChangedEventHandler value);
    public BindingBase get_GroupDisplayBinding();
    public void set_GroupDisplayBinding(BindingBase value);
    public DataTemplate get_GroupHeaderTemplate();
    public void set_GroupHeaderTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
public BindableProperty get_GroupHeaderTemplateProperty();
    [CompilerGeneratedAttribute]
public void set_GroupHeaderTemplateProperty(BindableProperty value);
    public BindingBase get_GroupShortNameBinding();
    public void set_GroupShortNameBinding(BindingBase value);
    public sealed virtual TItem get_HeaderContent();
    private void set_HeaderContent(TItem value);
    public bool get_IsGroupingEnabled();
    [CompilerGeneratedAttribute]
public BindableProperty get_IsGroupingEnabledProperty();
    [CompilerGeneratedAttribute]
public void set_IsGroupingEnabledProperty(BindableProperty value);
    public sealed virtual IEnumerable get_ItemsSource();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public TemplatedItemsList`2<TView, TItem> get_Parent();
    [CompilerGeneratedAttribute]
public BindableProperty get_ProgressiveLoadingProperty();
    [CompilerGeneratedAttribute]
public void set_ProgressiveLoadingProperty(BindableProperty value);
    public string get_ShortName();
    public void set_ShortName(string value);
    public sealed virtual IReadOnlyList`1<string> get_ShortNames();
    internal ListViewCachingStrategy get_CachingStrategy();
    internal IListProxy get_ListProxy();
    private void set_ListProxy(IListProxy value);
    private sealed virtual override IListProxy Xamarin.Forms.ITemplatedItemsList<TItem>.get_ListProxy();
    private DataTemplate get_ItemTemplate();
    private bool get_ProgressiveLoading();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void Dispose();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Xamarin.Forms.Internals.TemplatedItemsList`2/<GetEnumerator>d__79")]
public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object item);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object item);
    private sealed virtual override int System.Collections.IList.IndexOf(object item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object item);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object item);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual int get_Count();
    public sealed virtual TItem get_Item(int index);
    public int GetDescendantCount();
    public sealed virtual int GetGlobalIndexForGroup(ITemplatedItemsList`1<TItem> group);
    public int GetGlobalIndexOfGroup(object item);
    public sealed virtual int GetGlobalIndexOfItem(object item);
    public int GetGlobalIndexOfItem(object group, object item);
    public sealed virtual Tuple`2<int, int> GetGroupAndIndexOfItem(object item);
    public sealed virtual Tuple`2<int, int> GetGroupAndIndexOfItem(object group, object item);
    public sealed virtual int GetGroupIndexFromGlobal(int globalIndex, Int32& leftOver);
    [CompilerGeneratedAttribute]
public void add_GroupedCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GroupedCollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void Xamarin.Forms.ITemplatedItemsList<TItem>.add_GroupedCollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void Xamarin.Forms.ITemplatedItemsList<TItem>.remove_GroupedCollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual int IndexOf(TItem item);
    [EditorBrowsableAttribute("1")]
public sealed virtual DataTemplate SelectDataTemplate(object item);
    public sealed virtual TItem ActivateContent(int index, object item);
    public TItem CreateContent(int index, object item, bool insert);
    internal void ForceUpdate();
    internal TemplatedItemsList`2<TView, TItem> GetGroup(int index);
    private sealed virtual override ITemplatedItemsList`1<TItem> Xamarin.Forms.ITemplatedItemsList<TItem>.GetGroup(int index);
    internal static TemplatedItemsList`2<TView, TItem> GetGroup(TItem item);
    internal static int GetIndex(TItem item);
    internal static bool GetIsGroupHeader(BindableObject bindable);
    internal TItem GetOrCreateContent(int index, object item);
    internal static void SetIsGroupHeader(BindableObject bindable, bool value);
    internal TItem UpdateContent(TItem content, int index, object item);
    internal TItem UpdateContent(TItem content, int index);
    private sealed virtual override TItem Xamarin.Forms.ITemplatedItemsList<TItem>.UpdateContent(TItem content, int index);
    internal TItem UpdateHeader(TItem content, int groupIndex);
    private sealed virtual override TItem Xamarin.Forms.ITemplatedItemsList<TItem>.UpdateHeader(TItem content, int groupIndex);
    private void BindableOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private IList ConvertContent(int startingIndex, IList items, bool forceCreate, bool setIndex);
    private IEnumerable GetItemsViewSource();
    private sealed virtual override object Xamarin.Forms.ITemplatedItemsList<TItem>.get_BindingContext();
    private void GroupedReset();
    private TemplatedItemsList`2<TView, TItem> InsertGrouped(object item, int index);
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void OnCollectionChangedGrouped(NotifyCollectionChangedEventArgs e);
    private void OnGroupingEnabledChanged();
    private void OnHeaderTemplateChanged();
    private void OnInfiniteScrollingChanged();
    private void OnInnerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnItemsSourceChanged(bool fromGrouping);
    private void OnItemTemplateChanged();
    private static void OnListProxyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnProxyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnShortNameBindingChanged();
    private static void SetGroup(TItem item, TemplatedItemsList`2<TView, TItem> group);
    private static void SetIndex(TItem item, int index);
    private void SplitCollectionChangedItems(NotifyCollectionChangedEventArgs e);
    private void UnhookAndClear();
    [AsyncStateMachineAttribute("Xamarin.Forms.Internals.TemplatedItemsList`2/<UnhookItem>d__154")]
private void UnhookItem(TItem item);
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.Internals.TextTransformUtilites : object {
    [EditorBrowsableAttribute("1")]
public static string GetTransformedText(string source, TextTransform textTransform);
    [EditorBrowsableAttribute("1")]
public static void SetPlainText(InputView inputView, string nativeText);
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.Forms.Internals.Ticker : object {
    private static Ticker s_ticker;
    private Stopwatch _stopwatch;
    private List`1<Tuple`2<int, Func`2<long, bool>>> _timeouts;
    private int _count;
    private bool _enabled;
    public bool SystemEnabled { get; }
    public static Ticker Default { get; internal set; }
    public virtual bool get_SystemEnabled();
    protected void OnSystemEnabledChanged();
    public static void SetDefault(Ticker ticker);
    internal static void set_Default(Ticker value);
    public static Ticker get_Default();
    protected virtual Ticker GetTickerInstance();
    public virtual int Insert(Func`2<long, bool> timeout);
    public virtual void Remove(int handle);
    public virtual void Remove(int handle, IDispatcher dispatcher);
    private void RemoveTimeout(int handle);
    protected abstract virtual void DisableTimer();
    protected abstract virtual void EnableTimer();
    protected void SendFinish();
    protected void SendSignals(int timestep);
    protected void SendSignals(long step);
    private void Disable();
    private void Enable();
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.ToolbarTracker : object {
    private int _masterDetails;
    private Page _target;
    private ToolBarItemComparer _toolBarItemComparer;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Page> <AdditionalTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SeparateMasterDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler CollectionChanged;
    public IEnumerable`1<Page> AdditionalTargets { get; public set; }
    public bool HaveMasterDetail { get; }
    public bool SeparateMasterDetail { get; public set; }
    public Page Target { get; public set; }
    public IEnumerable`1<ToolbarItem> ToolbarItems { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<Page> get_AdditionalTargets();
    [CompilerGeneratedAttribute]
public void set_AdditionalTargets(IEnumerable`1<Page> value);
    public bool get_HaveMasterDetail();
    [CompilerGeneratedAttribute]
public bool get_SeparateMasterDetail();
    [CompilerGeneratedAttribute]
public void set_SeparateMasterDetail(bool value);
    public Page get_Target();
    public void set_Target(Page value);
    public IEnumerable`1<ToolbarItem> get_ToolbarItems();
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(EventHandler value);
    private void EmitCollectionChanged();
    private List`1<ToolbarItem> GetCurrentToolbarItems(Page page);
    private void OnChildAdded(object sender, ElementEventArgs eventArgs);
    private void OnChildRemoved(object sender, ElementEventArgs eventArgs);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    private void RegisterChildPage(Page page);
    private void TrackTarget(Page page);
    private void UnregisterChildPage(Page page);
    private void UntrackTarget(Page page);
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Internals.TypedBinding`2 : TypedBindingBase {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TSource, ValueTuple`2<TProperty, bool>> _getter;
    private Action`2<TSource, TProperty> _setter;
    private PropertyChangedProxy[] _handlers;
    private WeakReference`1<object> _weakSource;
    private WeakReference`1<BindableObject> _weakTarget;
    private BindableProperty _targetProperty;
    [ObsoleteAttribute("deprecated one. kept for backcompat")]
[EditorBrowsableAttribute("1")]
public TypedBinding`2(Func`2<TSource, TProperty> getter, Action`2<TSource, TProperty> setter, Tuple`2[] handlers);
    public TypedBinding`2(Func`2<TSource, ValueTuple`2<TProperty, bool>> getter, Action`2<TSource, TProperty> setter, Tuple`2[] handlers);
    internal virtual void Apply(bool fromTarget);
    internal virtual void Apply(object context, BindableObject bindObj, BindableProperty targetProperty, bool fromBindingContextChanged);
    internal virtual BindingBase Clone();
    internal virtual object GetSourceValue(object value, Type targetPropertyType);
    internal virtual object GetTargetValue(object value, Type sourcePropertyType);
    internal virtual void Unapply(bool fromBindingContextChanged);
    internal void ApplyCore(object sourceObject, BindableObject target, BindableProperty property, bool fromTarget);
    private void Subscribe(TSource sourceObject);
    private void Unsubscribe();
}
[EditorBrowsableAttribute("1")]
public abstract class Xamarin.Forms.Internals.TypedBindingBase : BindingBase {
    private IValueConverter _converter;
    private object _converterParameter;
    private object _source;
    private string _updateSourceEventName;
    public IValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public object Source { get; public set; }
    internal string UpdateSourceEventName { get; internal set; }
    public IValueConverter get_Converter();
    public void set_Converter(IValueConverter value);
    public object get_ConverterParameter();
    public void set_ConverterParameter(object value);
    public object get_Source();
    public void set_Source(object value);
    internal string get_UpdateSourceEventName();
    internal void set_UpdateSourceEventName(string value);
}
internal class Xamarin.Forms.InvalidationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private InvalidationTrigger <Trigger>k__BackingField;
    public InvalidationTrigger Trigger { get; private set; }
    public InvalidationEventArgs(InvalidationTrigger trigger);
    [CompilerGeneratedAttribute]
public InvalidationTrigger get_Trigger();
    [CompilerGeneratedAttribute]
private void set_Trigger(InvalidationTrigger value);
}
public class Xamarin.Forms.InvalidNavigationException : Exception {
    public InvalidNavigationException(string message);
    public InvalidNavigationException(string message, Exception innerException);
    protected InvalidNavigationException(SerializationInfo info, StreamingContext context);
}
public interface Xamarin.Forms.IOpenGlViewController {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DisplayRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DisplayRequested(EventHandler value);
}
internal interface Xamarin.Forms.IPaddingElement {
    public Thickness Padding { get; }
    public abstract virtual Thickness get_Padding();
    public abstract virtual void OnPaddingPropertyChanged(Thickness oldValue, Thickness newValue);
    public abstract virtual Thickness PaddingDefaultValueCreator();
}
public interface Xamarin.Forms.IPageContainer`1 {
    public T CurrentPage { get; }
    public abstract virtual T get_CurrentPage();
}
public interface Xamarin.Forms.IPageController {
    public Rectangle ContainerArea { get; public set; }
    public bool IgnoresContainerArea { get; public set; }
    public ObservableCollection`1<Element> InternalChildren { get; }
    public abstract virtual Rectangle get_ContainerArea();
    public abstract virtual void set_ContainerArea(Rectangle value);
    public abstract virtual bool get_IgnoresContainerArea();
    public abstract virtual void set_IgnoresContainerArea(bool value);
    public abstract virtual ObservableCollection`1<Element> get_InternalChildren();
    public abstract virtual void SendAppearing();
    public abstract virtual void SendDisappearing();
}
public interface Xamarin.Forms.IPanGestureController {
    public abstract virtual void SendPan(Element sender, double totalX, double totalY, int gestureId);
    public abstract virtual void SendPanCanceled(Element sender, int gestureId);
    public abstract virtual void SendPanCompleted(Element sender, int gestureId);
    public abstract virtual void SendPanStarted(Element sender, int gestureId);
}
public interface Xamarin.Forms.IPinchGestureController {
    public bool IsPinching { get; public set; }
    public abstract virtual bool get_IsPinching();
    public abstract virtual void set_IsPinching(bool value);
    public abstract virtual void SendPinch(Element sender, double scale, Point currentScalePoint);
    public abstract virtual void SendPinchCanceled(Element sender);
    public abstract virtual void SendPinchEnded(Element sender);
    public abstract virtual void SendPinchStarted(Element sender, Point intialScalePoint);
}
internal interface Xamarin.Forms.IPlaceholderElement {
    public string Placeholder { get; }
    public Color PlaceholderColor { get; }
    public abstract virtual string get_Placeholder();
    public abstract virtual Color get_PlaceholderColor();
}
public interface Xamarin.Forms.IPlatformElementConfiguration`2 {
}
internal interface Xamarin.Forms.IPropertyPropagationController {
    public abstract virtual void PropagatePropertyChanged(string propertyName);
}
public interface Xamarin.Forms.IQueryAttributable {
    public abstract virtual void ApplyQueryAttributes(IDictionary`2<string, string> query);
}
public interface Xamarin.Forms.IRegisterable {
}
internal interface Xamarin.Forms.IResourcesLoader {
    public abstract virtual T CreateFromResource(string resourcePath, Assembly assembly, IXmlLineInfo lineInfo);
    public abstract virtual string GetResource(string resourcePath, Assembly assembly, object target, IXmlLineInfo lineInfo);
}
internal interface Xamarin.Forms.IResourcesProvider {
    public bool IsResourcesCreated { get; }
    public ResourceDictionary Resources { get; public set; }
    public abstract virtual bool get_IsResourcesCreated();
    public abstract virtual ResourceDictionary get_Resources();
    public abstract virtual void set_Resources(ResourceDictionary value);
}
public interface Xamarin.Forms.IScrollViewController {
    public Rectangle LayoutAreaOverride { get; public set; }
    public abstract virtual Point GetScrollPositionForElement(VisualElement item, ScrollToPosition position);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    public abstract virtual void SendScrollFinished();
    public abstract virtual void SetScrolledPosition(double x, double y);
    public abstract virtual Rectangle get_LayoutAreaOverride();
    public abstract virtual void set_LayoutAreaOverride(Rectangle value);
}
public interface Xamarin.Forms.ISearchBarController {
    public abstract virtual void OnSearchButtonPressed();
}
public interface Xamarin.Forms.ISearchHandlerController {
    public IReadOnlyList`1<object> ListProxy { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ListProxyChanged(EventHandler`1<ListProxyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ListProxyChanged(EventHandler`1<ListProxyChangedEventArgs> value);
    public abstract virtual IReadOnlyList`1<object> get_ListProxy();
    public abstract virtual void ClearPlaceholderClicked();
    public abstract virtual void ItemSelected(object obj);
    public abstract virtual void QueryConfirmed();
}
public interface Xamarin.Forms.IShellAppearanceElement {
    public Color EffectiveTabBarBackgroundColor { get; }
    public Color EffectiveTabBarDisabledColor { get; }
    public Color EffectiveTabBarForegroundColor { get; }
    public Color EffectiveTabBarTitleColor { get; }
    public Color EffectiveTabBarUnselectedColor { get; }
    public abstract virtual Color get_EffectiveTabBarBackgroundColor();
    public abstract virtual Color get_EffectiveTabBarDisabledColor();
    public abstract virtual Color get_EffectiveTabBarForegroundColor();
    public abstract virtual Color get_EffectiveTabBarTitleColor();
    public abstract virtual Color get_EffectiveTabBarUnselectedColor();
}
public interface Xamarin.Forms.IShellContentController {
    public Page Page { get; }
    public abstract virtual Page GetOrCreateContent();
    public abstract virtual void RecyclePage(Page page);
    public abstract virtual Page get_Page();
    [CompilerGeneratedAttribute]
public abstract virtual void add_IsPageVisibleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IsPageVisibleChanged(EventHandler value);
}
public interface Xamarin.Forms.IShellContentInsetObserver {
    public abstract virtual void OnInsetChanged(Thickness inset, double tabThickness);
}
public interface Xamarin.Forms.IShellController {
    public View FlyoutHeader { get; }
    public ImageSource FlyoutIcon { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_StructureChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StructureChanged(EventHandler value);
    public abstract virtual View get_FlyoutHeader();
    public abstract virtual ImageSource get_FlyoutIcon();
    public abstract virtual void AddAppearanceObserver(IAppearanceObserver observer, Element pivot);
    public abstract virtual void AddFlyoutBehaviorObserver(IFlyoutBehaviorObserver observer);
    public abstract virtual void AppearanceChanged(Element source, bool appearanceSet);
    public abstract virtual List`1<List`1<Element>> GenerateFlyoutGrouping();
    public abstract virtual ShellNavigationState GetNavigationState(ShellItem shellItem, ShellSection shellSection, ShellContent shellContent, bool includeStack);
    public abstract virtual void OnFlyoutItemSelected(Element element);
    public abstract virtual Task OnFlyoutItemSelectedAsync(Element element);
    public abstract virtual bool ProposeNavigation(ShellNavigationSource source, ShellItem item, ShellSection shellSection, ShellContent shellContent, IReadOnlyList`1<Page> stack, bool canCancel);
    public abstract virtual bool RemoveAppearanceObserver(IAppearanceObserver observer);
    public abstract virtual bool RemoveFlyoutBehaviorObserver(IFlyoutBehaviorObserver observer);
    public abstract virtual void UpdateCurrentState(ShellNavigationSource source);
    public abstract virtual ReadOnlyCollection`1<ShellItem> GetItems();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual DataTemplate GetFlyoutItemDataTemplate(BindableObject bo);
}
public interface Xamarin.Forms.IShellItemController {
    public bool ShowTabs { get; }
    public abstract virtual bool ProposeSection(ShellSection shellSection, bool setValue);
    public abstract virtual ReadOnlyCollection`1<ShellSection> GetItems();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual bool get_ShowTabs();
}
public interface Xamarin.Forms.IShellSectionController {
    public Page PresentedPage { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_NavigationRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NavigationRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    public abstract virtual Page get_PresentedPage();
    public abstract virtual void AddContentInsetObserver(IShellContentInsetObserver observer);
    public abstract virtual void AddDisplayedPageObserver(object observer, Action`1<Page> callback);
    public abstract virtual bool RemoveContentInsetObserver(IShellContentInsetObserver observer);
    public abstract virtual bool RemoveDisplayedPageObserver(object observer);
    public abstract virtual void SendInsetChanged(Thickness inset, double tabThickness);
    public abstract virtual void SendPopping(Task poppingCompleted);
    public abstract virtual void SendPoppingToRoot(Task finishedPopping);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public abstract virtual void SendPopped();
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public abstract virtual void SendPopping(Page page);
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public abstract virtual void SendPopped(Page page);
    public abstract virtual ReadOnlyCollection`1<ShellContent> GetItems();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.ISliderController {
    public abstract virtual void SendDragStarted();
    public abstract virtual void SendDragCompleted();
}
public interface Xamarin.Forms.IStreamImageSource {
    public abstract virtual Task`1<Stream> GetStreamAsync(CancellationToken userToken);
}
internal interface Xamarin.Forms.IStyle {
    public Type TargetType { get; }
    public abstract virtual Type get_TargetType();
    public abstract virtual void Apply(BindableObject bindable);
    public abstract virtual void UnApply(BindableObject bindable);
}
internal interface Xamarin.Forms.IStyleElement {
    public Style Style { get; }
    public abstract virtual Style get_Style();
}
public interface Xamarin.Forms.ISwipeGestureController {
    public abstract virtual void SendSwipe(Element sender, double totalX, double totalY);
    public abstract virtual bool DetectSwipe(View sender, SwipeDirection direction);
}
public interface Xamarin.Forms.ISwipeItem {
    public bool IsVisible { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
    public abstract virtual ICommand get_Command();
    public abstract virtual void set_Command(ICommand value);
    public abstract virtual object get_CommandParameter();
    public abstract virtual void set_CommandParameter(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Invoked(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Invoked(EventHandler`1<EventArgs> value);
    public abstract virtual void OnInvoked();
}
public interface Xamarin.Forms.ISwipeViewController {
    public bool IsOpen { get; public set; }
    public abstract virtual bool get_IsOpen();
    public abstract virtual void set_IsOpen(bool value);
    public abstract virtual void SendSwipeStarted(SwipeStartedEventArgs args);
    public abstract virtual void SendSwipeChanging(SwipeChangingEventArgs args);
    public abstract virtual void SendSwipeEnded(SwipeEndedEventArgs args);
}
public interface Xamarin.Forms.ITableModel {
    public abstract virtual Cell GetCell(int section, int row);
    public abstract virtual Cell GetHeaderCell(int section);
    public abstract virtual object GetItem(int section, int row);
    public abstract virtual int GetRowCount(int section);
    public abstract virtual int GetSectionCount();
    public abstract virtual String[] GetSectionIndexTitles();
    public abstract virtual string GetSectionTitle(int section);
    public abstract virtual Color GetSectionTextColor(int section);
    public abstract virtual void RowLongPressed(int section, int row);
    public abstract virtual void RowSelected(object item);
    public abstract virtual void RowSelected(int section, int row);
}
public interface Xamarin.Forms.ITableViewController {
    public ITableModel Model { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModelChanged(EventHandler value);
    public abstract virtual ITableModel get_Model();
}
public interface Xamarin.Forms.ITabStopElement {
    public int TabIndex { get; public set; }
    public bool IsTabStop { get; public set; }
    public abstract virtual int get_TabIndex();
    public abstract virtual void set_TabIndex(int value);
    public abstract virtual bool get_IsTabStop();
    public abstract virtual void set_IsTabStop(bool value);
}
public interface Xamarin.Forms.ITemplatedItemsList`1 {
    public object BindingContext { get; }
    public string Name { get; public set; }
    public TItem HeaderContent { get; }
    public IEnumerable ItemsSource { get; }
    public IReadOnlyList`1<string> ShortNames { get; }
    public IListProxy ListProxy { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_GroupedCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GroupedCollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual object get_BindingContext();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual TItem get_HeaderContent();
    public abstract virtual IEnumerable get_ItemsSource();
    public abstract virtual IReadOnlyList`1<string> get_ShortNames();
    public abstract virtual IListProxy get_ListProxy();
    public abstract virtual DataTemplate SelectDataTemplate(object item);
    public abstract virtual int GetGlobalIndexForGroup(ITemplatedItemsList`1<TItem> group);
    public abstract virtual int GetGlobalIndexOfItem(object item);
    public abstract virtual ITemplatedItemsList`1<TItem> GetGroup(int index);
    public abstract virtual Tuple`2<int, int> GetGroupAndIndexOfItem(object item);
    public abstract virtual Tuple`2<int, int> GetGroupAndIndexOfItem(object group, object item);
    public abstract virtual int GetGroupIndexFromGlobal(int globalIndex, Int32& leftOver);
    public abstract virtual int IndexOf(TItem item);
    public abstract virtual TItem ActivateContent(int index, object item);
    public abstract virtual TItem UpdateContent(TItem content, int index);
    public abstract virtual TItem UpdateHeader(TItem content, int groupIndex);
}
public interface Xamarin.Forms.ITemplatedItemsListScrollToRequestedEventArgs {
    public object Group { get; }
    public object Item { get; }
    public abstract virtual object get_Group();
    public abstract virtual object get_Item();
}
public interface Xamarin.Forms.ITemplatedItemsView`1 {
    public IListProxy ListProxy { get; }
    public ITemplatedItemsList`1<TItem> TemplatedItems { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual IListProxy get_ListProxy();
    public abstract virtual ITemplatedItemsList`1<TItem> get_TemplatedItems();
}
public enum Xamarin.Forms.ItemSizingStrategy : Enum {
    public int value__;
    public static ItemSizingStrategy MeasureAllItems;
    public static ItemSizingStrategy MeasureFirstItem;
}
public abstract class Xamarin.Forms.ItemsLayout : BindableObject {
    [CompilerGeneratedAttribute]
private ItemsLayoutOrientation <Orientation>k__BackingField;
    public static BindableProperty SnapPointsAlignmentProperty;
    public static BindableProperty SnapPointsTypeProperty;
    public ItemsLayoutOrientation Orientation { get; }
    public SnapPointsAlignment SnapPointsAlignment { get; public set; }
    public SnapPointsType SnapPointsType { get; public set; }
    protected ItemsLayout(ItemsLayoutOrientation orientation);
    private static ItemsLayout();
    [CompilerGeneratedAttribute]
public ItemsLayoutOrientation get_Orientation();
    public SnapPointsAlignment get_SnapPointsAlignment();
    public void set_SnapPointsAlignment(SnapPointsAlignment value);
    public SnapPointsType get_SnapPointsType();
    public void set_SnapPointsType(SnapPointsType value);
}
public enum Xamarin.Forms.ItemsLayoutOrientation : Enum {
    public int value__;
    public static ItemsLayoutOrientation Vertical;
    public static ItemsLayoutOrientation Horizontal;
}
[TypeConversionAttribute("Xamarin.Forms.IItemsLayout")]
public class Xamarin.Forms.ItemsLayoutTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public enum Xamarin.Forms.ItemsUpdatingScrollMode : Enum {
    public int value__;
    public static ItemsUpdatingScrollMode KeepItemsInView;
    public static ItemsUpdatingScrollMode KeepScrollOffset;
    public static ItemsUpdatingScrollMode KeepLastItemInView;
}
public abstract class Xamarin.Forms.ItemsView : View {
    private List`1<Element> _logicalChildren;
    public static BindableProperty EmptyViewProperty;
    public static BindableProperty EmptyViewTemplateProperty;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty RemainingItemsThresholdReachedCommandProperty;
    public static BindableProperty RemainingItemsThresholdReachedCommandParameterProperty;
    public static BindableProperty HorizontalScrollBarVisibilityProperty;
    public static BindableProperty VerticalScrollBarVisibilityProperty;
    public static BindableProperty RemainingItemsThresholdProperty;
    internal static BindableProperty InternalItemsLayoutProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty ItemsUpdatingScrollModeProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<ScrollToRequestEventArgs> ScrollToRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<ItemsViewScrolledEventArgs> Scrolled;
    [CompilerGeneratedAttribute]
private EventHandler RemainingItemsThresholdReached;
    public object EmptyView { get; public set; }
    public DataTemplate EmptyViewTemplate { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public ICommand RemainingItemsThresholdReachedCommand { get; public set; }
    public object RemainingItemsThresholdReachedCommandParameter { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public int RemainingItemsThreshold { get; public set; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    protected IItemsLayout InternalItemsLayout { get; protected set; }
    public DataTemplate ItemTemplate { get; public set; }
    public ItemsUpdatingScrollMode ItemsUpdatingScrollMode { get; public set; }
    private static ItemsView();
    public object get_EmptyView();
    public void set_EmptyView(object value);
    public DataTemplate get_EmptyViewTemplate();
    public void set_EmptyViewTemplate(DataTemplate value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public ICommand get_RemainingItemsThresholdReachedCommand();
    public void set_RemainingItemsThresholdReachedCommand(ICommand value);
    public object get_RemainingItemsThresholdReachedCommandParameter();
    public void set_RemainingItemsThresholdReachedCommandParameter(object value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public int get_RemainingItemsThreshold();
    public void set_RemainingItemsThreshold(int value);
    public void AddLogicalChild(Element element);
    public void RemoveLogicalChild(Element element);
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    private static void OnInternalItemsLayoutPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    protected IItemsLayout get_InternalItemsLayout();
    protected void set_InternalItemsLayout(IItemsLayout value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public ItemsUpdatingScrollMode get_ItemsUpdatingScrollMode();
    public void set_ItemsUpdatingScrollMode(ItemsUpdatingScrollMode value);
    public void ScrollTo(int index, int groupIndex, ScrollToPosition position, bool animate);
    public void ScrollTo(object item, object group, ScrollToPosition position, bool animate);
    public void SendRemainingItemsThresholdReached();
    public void SendScrolled(ItemsViewScrolledEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ScrollToRequested(EventHandler`1<ScrollToRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ScrollToRequested(EventHandler`1<ScrollToRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Scrolled(EventHandler`1<ItemsViewScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(EventHandler`1<ItemsViewScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RemainingItemsThresholdReached(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RemainingItemsThresholdReached(EventHandler value);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    protected virtual void OnScrollToRequested(ScrollToRequestEventArgs e);
    protected virtual void OnRemainingItemsThresholdReached();
    protected virtual void OnScrolled(ItemsViewScrolledEventArgs e);
    protected virtual void OnBindingContextChanged();
}
public abstract class Xamarin.Forms.ItemsView`1 : View {
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    [CompilerGeneratedAttribute]
private TemplatedItemsList`2<ItemsView`1<TVisual>, TVisual> <TemplatedItems>k__BackingField;
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    private IListProxy Xamarin.Forms.ITemplatedItemsView<TVisual>.ListProxy { get; }
    private ITemplatedItemsList`1<TVisual> Xamarin.Forms.ITemplatedItemsView<TVisual>.TemplatedItems { get; }
    [EditorBrowsableAttribute("1")]
public TemplatedItemsList`2<ItemsView`1<TVisual>, TVisual> TemplatedItems { get; }
    private static ItemsView`1();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    private sealed virtual override IListProxy Xamarin.Forms.ITemplatedItemsView<TVisual>.get_ListProxy();
    private sealed virtual override ITemplatedItemsList`1<TVisual> Xamarin.Forms.ITemplatedItemsView<TVisual>.get_TemplatedItems();
    [CompilerGeneratedAttribute]
public TemplatedItemsList`2<ItemsView`1<TVisual>, TVisual> get_TemplatedItems();
    private sealed virtual override TVisual Xamarin.Forms.IItemsView<TVisual>.CreateDefault(object item);
    private sealed virtual override void Xamarin.Forms.IItemsView<TVisual>.SetupContent(TVisual content, int index);
    private sealed virtual override void Xamarin.Forms.IItemsView<TVisual>.UnhookContent(TVisual content);
    protected abstract virtual TVisual CreateDefault(object item);
    protected virtual void SetupContent(TVisual content, int index);
    protected virtual void UnhookContent(TVisual content);
    private static void OnItemsSourceChanged(BindableObject bindable, object oldValue, object newValue);
    protected virtual bool ValidateItemTemplate(DataTemplate template);
}
public class Xamarin.Forms.ItemsViewScrolledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <HorizontalDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstVisibleItemIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CenterItemIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastVisibleItemIndex>k__BackingField;
    public double HorizontalDelta { get; public set; }
    public double VerticalDelta { get; public set; }
    public double HorizontalOffset { get; public set; }
    public double VerticalOffset { get; public set; }
    public int FirstVisibleItemIndex { get; public set; }
    public int CenterItemIndex { get; public set; }
    public int LastVisibleItemIndex { get; public set; }
    [CompilerGeneratedAttribute]
public double get_HorizontalDelta();
    [CompilerGeneratedAttribute]
public void set_HorizontalDelta(double value);
    [CompilerGeneratedAttribute]
public double get_VerticalDelta();
    [CompilerGeneratedAttribute]
public void set_VerticalDelta(double value);
    [CompilerGeneratedAttribute]
public double get_HorizontalOffset();
    [CompilerGeneratedAttribute]
public void set_HorizontalOffset(double value);
    [CompilerGeneratedAttribute]
public double get_VerticalOffset();
    [CompilerGeneratedAttribute]
public void set_VerticalOffset(double value);
    [CompilerGeneratedAttribute]
public int get_FirstVisibleItemIndex();
    [CompilerGeneratedAttribute]
public void set_FirstVisibleItemIndex(int value);
    [CompilerGeneratedAttribute]
public int get_CenterItemIndex();
    [CompilerGeneratedAttribute]
public void set_CenterItemIndex(int value);
    [CompilerGeneratedAttribute]
public int get_LastVisibleItemIndex();
    [CompilerGeneratedAttribute]
public void set_LastVisibleItemIndex(int value);
}
public class Xamarin.Forms.ItemTappedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemIndex>k__BackingField;
    public object Group { get; private set; }
    public object Item { get; private set; }
    public int ItemIndex { get; private set; }
    [ObsoleteAttribute("Please use the constructor that reports the items index")]
public ItemTappedEventArgs(object group, object item);
    public ItemTappedEventArgs(object group, object item, int itemIndex);
    [CompilerGeneratedAttribute]
public object get_Group();
    [CompilerGeneratedAttribute]
private void set_Group(object value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
private void set_ItemIndex(int value);
}
public class Xamarin.Forms.ItemVisibilityEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemIndex>k__BackingField;
    public object Item { get; private set; }
    public int ItemIndex { get; private set; }
    [ObsoleteAttribute("Please use the constructor that reports the items index")]
public ItemVisibilityEventArgs(object item);
    public ItemVisibilityEventArgs(object item, int itemIndex);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
private void set_ItemIndex(int value);
}
internal interface Xamarin.Forms.ITextAlignmentElement {
    public TextAlignment HorizontalTextAlignment { get; }
    public TextAlignment VerticalTextAlignment { get; }
    public abstract virtual TextAlignment get_HorizontalTextAlignment();
    public abstract virtual TextAlignment get_VerticalTextAlignment();
    public abstract virtual void OnHorizontalTextAlignmentPropertyChanged(TextAlignment oldValue, TextAlignment newValue);
}
internal interface Xamarin.Forms.ITextElement {
    public Color TextColor { get; }
    public double CharacterSpacing { get; }
    public TextTransform TextTransform { get; public set; }
    public abstract virtual Color get_TextColor();
    public abstract virtual void OnTextColorPropertyChanged(Color oldValue, Color newValue);
    public abstract virtual double get_CharacterSpacing();
    public abstract virtual void OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    public abstract virtual TextTransform get_TextTransform();
    public abstract virtual void set_TextTransform(TextTransform value);
    public abstract virtual void OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    public abstract virtual string UpdateFormsText(string original, TextTransform transform);
}
public interface Xamarin.Forms.IValueConverter {
    public abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface Xamarin.Forms.IViewContainer`1 {
    public IList`1<T> Children { get; }
    public abstract virtual IList`1<T> get_Children();
}
public interface Xamarin.Forms.IViewController {
}
[TypeConverterAttribute("Xamarin.Forms.VisualTypeConverter")]
public interface Xamarin.Forms.IVisual {
}
internal interface Xamarin.Forms.IVisualController {
    public IVisual EffectiveVisual { get; public set; }
    public IVisual Visual { get; }
    public abstract virtual IVisual get_EffectiveVisual();
    public abstract virtual void set_EffectiveVisual(IVisual value);
    public abstract virtual IVisual get_Visual();
}
public interface Xamarin.Forms.IVisualElementController {
    public bool Batched { get; }
    public bool DisableLayout { get; public set; }
    public EffectiveFlowDirection EffectiveFlowDirection { get; }
    public bool IsInNativeLayout { get; public set; }
    public bool IsNativeStateConsistent { get; public set; }
    public bool IsPlatformEnabled { get; public set; }
    public NavigationProxy NavigationProxy { get; }
    public abstract virtual void NativeSizeChanged();
    public abstract virtual void InvalidateMeasure(InvalidationTrigger trigger);
    public abstract virtual bool get_Batched();
    public abstract virtual bool get_DisableLayout();
    public abstract virtual void set_DisableLayout(bool value);
    public abstract virtual EffectiveFlowDirection get_EffectiveFlowDirection();
    public abstract virtual bool get_IsInNativeLayout();
    public abstract virtual void set_IsInNativeLayout(bool value);
    public abstract virtual bool get_IsNativeStateConsistent();
    public abstract virtual void set_IsNativeStateConsistent(bool value);
    public abstract virtual bool get_IsPlatformEnabled();
    public abstract virtual void set_IsPlatformEnabled(bool value);
    public abstract virtual NavigationProxy get_NavigationProxy();
    [CompilerGeneratedAttribute]
public abstract virtual void add_BatchCommitted(EventHandler`1<EventArg`1<VisualElement>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BatchCommitted(EventHandler`1<EventArg`1<VisualElement>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FocusChangeRequested(EventHandler`1<FocusRequestArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FocusChangeRequested(EventHandler`1<FocusRequestArgs> value);
}
public interface Xamarin.Forms.IWebViewController {
    public bool CanGoBack { get; public set; }
    public bool CanGoForward { get; public set; }
    public abstract virtual bool get_CanGoBack();
    public abstract virtual void set_CanGoBack(bool value);
    public abstract virtual bool get_CanGoForward();
    public abstract virtual void set_CanGoForward(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EvalRequested(EventHandler`1<EvalRequested> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EvalRequested(EventHandler`1<EvalRequested> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EvaluateJavaScriptRequested(EvaluateJavaScriptDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EvaluateJavaScriptRequested(EvaluateJavaScriptDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GoBackRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GoBackRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GoForwardRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GoForwardRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReloadRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReloadRequested(EventHandler value);
    public abstract virtual void SendNavigated(WebNavigatedEventArgs args);
    public abstract virtual void SendNavigating(WebNavigatingEventArgs args);
}
public interface Xamarin.Forms.IWebViewDelegate {
    public abstract virtual void LoadHtml(string html, string baseUrl);
    public abstract virtual void LoadUrl(string url);
}
[TypeConverterAttribute("Xamarin.Forms.KeyboardTypeConverter")]
public class Xamarin.Forms.Keyboard : object {
    private static Keyboard s_plain;
    private static Keyboard s_def;
    private static Keyboard s_email;
    private static Keyboard s_text;
    private static Keyboard s_url;
    private static Keyboard s_numeric;
    private static Keyboard s_telephone;
    private static Keyboard s_chat;
    public static Keyboard Plain { get; }
    public static Keyboard Chat { get; }
    public static Keyboard Default { get; }
    public static Keyboard Email { get; }
    public static Keyboard Numeric { get; }
    public static Keyboard Telephone { get; }
    public static Keyboard Text { get; }
    public static Keyboard Url { get; }
    public static Keyboard get_Plain();
    public static Keyboard get_Chat();
    public static Keyboard get_Default();
    public static Keyboard get_Email();
    public static Keyboard get_Numeric();
    public static Keyboard get_Telephone();
    public static Keyboard get_Text();
    public static Keyboard get_Url();
    public static Keyboard Create(KeyboardFlags flags);
}
[FlagsAttribute]
public enum Xamarin.Forms.KeyboardFlags : Enum {
    public int value__;
    public static KeyboardFlags None;
    public static KeyboardFlags CapitalizeSentence;
    public static KeyboardFlags Spellcheck;
    public static KeyboardFlags Suggestions;
    public static KeyboardFlags CapitalizeWord;
    public static KeyboardFlags CapitalizeCharacter;
    public static KeyboardFlags CapitalizeNone;
    public static KeyboardFlags All;
}
[TypeConversionAttribute("Xamarin.Forms.Keyboard")]
public class Xamarin.Forms.KeyboardTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[ContentPropertyAttribute("Text")]
[RenderWithAttribute("Xamarin.Forms.Platform._LabelRenderer")]
public class Xamarin.Forms.Label : View {
    public static BindableProperty HorizontalTextAlignmentProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("XAlignProperty is obsolete as of version 2.0.0. Please use HorizontalTextAlignmentProperty instead.")]
public static BindableProperty XAlignProperty;
    public static BindableProperty VerticalTextAlignmentProperty;
    [ObsoleteAttribute("YAlignProperty is obsolete as of version 2.0.0. Please use VerticalTextAlignmentProperty instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty YAlignProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty FontProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty TextTransformProperty;
    public static BindableProperty TextDecorationsProperty;
    public static BindableProperty FormattedTextProperty;
    public static BindableProperty LineBreakModeProperty;
    public static BindableProperty LineHeightProperty;
    public static BindableProperty MaxLinesProperty;
    public static BindableProperty PaddingProperty;
    public static BindableProperty TextTypeProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Label>> _platformConfigurationRegistry;
    public TextTransform TextTransform { get; public set; }
    [ObsoleteAttribute("Font is obsolete as of version 1.3.0. Please use the Font attributes which are on the class itself.")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    public FormattedString FormattedText { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public LineBreakMode LineBreakMode { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public double CharacterSpacing { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("XAlign is obsolete as of version 2.0.0. Please use HorizontalTextAlignment instead.")]
public TextAlignment XAlign { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("YAlign is obsolete as of version 2.0.0. Please use VerticalTextAlignment instead.")]
public TextAlignment YAlign { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public TextDecorations TextDecorations { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public double LineHeight { get; public set; }
    public int MaxLines { get; public set; }
    public Thickness Padding { get; public set; }
    public TextType TextType { get; public set; }
    private static Label();
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    public virtual string UpdateFormsText(string source, TextTransform textTransform);
    protected virtual void OnBindingContextChanged();
    public Font get_Font();
    public void set_Font(Font value);
    public FormattedString get_FormattedText();
    public void set_FormattedText(FormattedString value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public void set_HorizontalTextAlignment(TextAlignment value);
    public LineBreakMode get_LineBreakMode();
    public void set_LineBreakMode(LineBreakMode value);
    public string get_Text();
    public void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public void set_VerticalTextAlignment(TextAlignment value);
    public TextAlignment get_XAlign();
    public void set_XAlign(TextAlignment value);
    public TextAlignment get_YAlign();
    public void set_YAlign(TextAlignment value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual TextDecorations get_TextDecorations();
    public sealed virtual void set_TextDecorations(TextDecorations value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    public sealed virtual double get_LineHeight();
    public void set_LineHeight(double value);
    public int get_MaxLines();
    public void set_MaxLines(int value);
    public sealed virtual Thickness get_Padding();
    public void set_Padding(Thickness value);
    public TextType get_TextType();
    public void set_TextType(TextType value);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    private sealed virtual override void Xamarin.Forms.Internals.ILineHeightElement.OnLineHeightChanged(double oldValue, double newValue);
    private void OnFormattedTextChanging(object sender, PropertyChangingEventArgs e);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    private void OnFormattedTextChanged(object sender, PropertyChangedEventArgs e);
    private void SetupSpans(IEnumerable spans);
    private void SetupSpanGestureRecognizers(IEnumerable gestureRecognizers);
    private void RemoveSpans(IEnumerable spans);
    private void RemoveSpanGestureRecognizers(IEnumerable gestureRecognizers);
    private void Span_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Span_GestureRecognizer_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private sealed virtual override void Xamarin.Forms.ITextAlignmentElement.OnHorizontalTextAlignmentPropertyChanged(TextAlignment oldValue, TextAlignment newValue);
    private static void OnTextPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private static void OnVerticalTextAlignmentPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public sealed virtual IPlatformElementConfiguration`2<T, Label> On();
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    public virtual IList`1<GestureElement> GetChildElements(Point point);
    private sealed virtual override Thickness Xamarin.Forms.IPaddingElement.PaddingDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.IPaddingElement.OnPaddingPropertyChanged(Thickness oldValue, Thickness newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Label> <.ctor>b__24_0();
}
public abstract class Xamarin.Forms.Layout : View {
    public static BindableProperty IsClippedToBoundsProperty;
    public static BindableProperty CascadeInputTransparentProperty;
    public static BindableProperty PaddingProperty;
    private static IList`1<KeyValuePair`2<Layout, int>> s_resolutionList;
    private static bool s_relayoutInProgress;
    private bool _allocatedFlag;
    private bool _hasDoneLayout;
    private Size _lastLayoutSize;
    private ReadOnlyCollection`1<Element> _logicalChildren;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<Element> <InternalChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler LayoutChanged;
    public bool IsClippedToBounds { get; public set; }
    public Thickness Padding { get; public set; }
    public bool CascadeInputTransparent { get; public set; }
    internal ObservableCollection`1<Element> InternalChildren { get; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    [EditorBrowsableAttribute("1")]
public IReadOnlyList`1<Element> Children { get; }
    private static Layout();
    public bool get_IsClippedToBounds();
    public void set_IsClippedToBounds(bool value);
    public sealed virtual Thickness get_Padding();
    public void set_Padding(Thickness value);
    public bool get_CascadeInputTransparent();
    public void set_CascadeInputTransparent(bool value);
    private sealed virtual override Thickness Xamarin.Forms.IPaddingElement.PaddingDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.IPaddingElement.OnPaddingPropertyChanged(Thickness oldValue, Thickness newValue);
    [CompilerGeneratedAttribute]
internal ObservableCollection`1<Element> get_InternalChildren();
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void add_LayoutChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LayoutChanged(EventHandler value);
    public sealed virtual IReadOnlyList`1<Element> get_Children();
    public void ForceLayout();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
public sealed virtual SizeRequest GetSizeRequest(double widthConstraint, double heightConstraint);
    public static void LayoutChildIntoBoundingRegion(VisualElement child, Rectangle region);
    public void LowerChild(View view);
    public void RaiseChild(View view);
    protected virtual void InvalidateLayout();
    protected abstract virtual void LayoutChildren(double x, double y, double width, double height);
    protected void OnChildMeasureInvalidated(object sender, EventArgs e);
    protected virtual void OnChildMeasureInvalidated();
    protected virtual void OnSizeAllocated(double width, double height);
    protected virtual bool ShouldInvalidateOnChildAdded(View child);
    protected virtual bool ShouldInvalidateOnChildRemoved(View child);
    protected void UpdateChildrenLayout();
    internal static void LayoutChildIntoBoundingRegion(View child, Rectangle region, SizeRequest childSizeRequest);
    internal virtual void OnChildMeasureInvalidated(VisualElement child, InvalidationTrigger trigger);
    internal void ResolveLayoutChanges();
    internal virtual void OnIsVisibleChanged(bool oldValue, bool newValue);
    private static int GetElementDepth(Element view);
    private void InternalChildrenOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnInternalAdded(View view);
    private void OnInternalRemoved(View view, int oldIndex);
    private bool ShouldLayoutChildren();
}
[ContentPropertyAttribute("Children")]
public abstract class Xamarin.Forms.Layout`1 : Layout {
    private ElementCollection`1<T> _children;
    public IList`1<T> Children { get; }
    public sealed virtual IList`1<T> get_Children();
    protected virtual void OnChildAdded(Element child);
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    protected virtual void OnAdded(T view);
    protected virtual void OnRemoved(T view);
}
[FlagsAttribute]
public enum Xamarin.Forms.LayoutAlignment : Enum {
    public int value__;
    public static LayoutAlignment Start;
    public static LayoutAlignment Center;
    public static LayoutAlignment End;
    public static LayoutAlignment Fill;
}
[ExtensionAttribute]
internal static class Xamarin.Forms.LayoutAlignmentExtensions : object {
    [ExtensionAttribute]
public static double ToDouble(LayoutAlignment align);
}
[FlagsAttribute]
internal enum Xamarin.Forms.LayoutConstraint : Enum {
    public int value__;
    public static LayoutConstraint None;
    public static LayoutConstraint HorizontallyFixed;
    public static LayoutConstraint VerticallyFixed;
    public static LayoutConstraint Fixed;
}
[FlagsAttribute]
internal enum Xamarin.Forms.LayoutExpandFlag : Enum {
    public int value__;
    public static LayoutExpandFlag Expand;
}
[TypeConverterAttribute("Xamarin.Forms.LayoutOptionsConverter")]
public class Xamarin.Forms.LayoutOptions : ValueType {
    private int _flags;
    public static LayoutOptions Start;
    public static LayoutOptions Center;
    public static LayoutOptions End;
    public static LayoutOptions Fill;
    public static LayoutOptions StartAndExpand;
    public static LayoutOptions CenterAndExpand;
    public static LayoutOptions EndAndExpand;
    public static LayoutOptions FillAndExpand;
    public LayoutAlignment Alignment { get; public set; }
    public bool Expands { get; public set; }
    public LayoutOptions(LayoutAlignment alignment, bool expands);
    private static LayoutOptions();
    public LayoutAlignment get_Alignment();
    public void set_Alignment(LayoutAlignment value);
    public bool get_Expands();
    public void set_Expands(bool value);
}
[TypeConversionAttribute("Xamarin.Forms.LayoutOptions")]
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.LayoutOptionsConverter")]
public class Xamarin.Forms.LayoutOptionsConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.LinearGradientBrush : GradientBrush {
    public static BindableProperty StartPointProperty;
    public static BindableProperty EndPointProperty;
    public bool IsEmpty { get; }
    public Point StartPoint { get; public set; }
    public Point EndPoint { get; public set; }
    public LinearGradientBrush(GradientStopCollection gradientStops);
    public LinearGradientBrush(GradientStopCollection gradientStops, Point startPoint, Point endPoint);
    private static LinearGradientBrush();
    public virtual bool get_IsEmpty();
    public Point get_StartPoint();
    public void set_StartPoint(Point value);
    public Point get_EndPoint();
    public void set_EndPoint(Point value);
}
public class Xamarin.Forms.LinearItemsLayout : ItemsLayout {
    public static IItemsLayout Vertical;
    public static IItemsLayout Horizontal;
    public static IItemsLayout CarouselVertical;
    internal static LinearItemsLayout CarouselDefault;
    public static BindableProperty ItemSpacingProperty;
    public double ItemSpacing { get; public set; }
    public LinearItemsLayout(ItemsLayoutOrientation orientation);
    private static LinearItemsLayout();
    public double get_ItemSpacing();
    public void set_ItemSpacing(double value);
}
public enum Xamarin.Forms.LineBreakMode : Enum {
    public int value__;
    public static LineBreakMode NoWrap;
    public static LineBreakMode WordWrap;
    public static LineBreakMode CharacterWrap;
    public static LineBreakMode HeadTruncation;
    public static LineBreakMode TailTruncation;
    public static LineBreakMode MiddleTruncation;
}
internal static class Xamarin.Forms.LineHeightElement : object {
    public static BindableProperty LineHeightProperty;
    private static LineHeightElement();
    private static void OnLineHeightChanged(BindableObject bindable, object oldValue, object newValue);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.ListProxy : object {
    private IDispatcher _dispatcher;
    private ICollection _collection;
    private IList _list;
    private int _windowSize;
    private ConditionalWeakTable`2<ListProxy, WeakNotifyProxy> _sourceToWeakHandlers;
    private IEnumerator _enumerator;
    private int _enumeratorIndex;
    private bool _finished;
    private HashSet`1<int> _indexesCounted;
    private Dictionary`2<int, object> _items;
    private int _version;
    private int _windowIndex;
    [CompilerGeneratedAttribute]
private IEnumerable <ProxiedEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler CountChanged;
    public IEnumerable ProxiedEnumerable { get; }
    public int Count { get; }
    public object Item { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ListProxy(IEnumerable enumerable, int windowSize, IDispatcher dispatcher);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable get_ProxiedEnumerable();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    public sealed virtual bool Contains(object item);
    public sealed virtual int IndexOf(object item);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(int index);
    public void Clear();
    [CompilerGeneratedAttribute]
public void add_CountChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CountChanged(EventHandler value);
    private void ClearRange(int index, int clearCount);
    private bool CountIndex(int index);
    private void EnsureWindowCreated();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void OnCountChanged();
    private bool TryGetValue(int index, Object& value);
    private sealed virtual override bool Xamarin.Forms.IListProxy.TryGetValue(int index, Object& value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.Add(object item);
    private sealed virtual override void System.Collections.IList.Remove(object item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object item);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Clear();
}
public class Xamarin.Forms.ListProxyChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<object> <OldList>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<object> <NewList>k__BackingField;
    public IReadOnlyCollection`1<object> OldList { get; }
    public IReadOnlyCollection`1<object> NewList { get; }
    public ListProxyChangedEventArgs(IReadOnlyCollection`1<object> oldList, IReadOnlyCollection`1<object> newList);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<object> get_OldList();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<object> get_NewList();
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.ListStringTypeConverter")]
[TypeConversionAttribute("System.Collections.Generic.List`1<System.String>")]
public class Xamarin.Forms.ListStringTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._ListViewRenderer")]
public class Xamarin.Forms.ListView : ItemsView`1<Cell> {
    private List`1<Element> _logicalChildren;
    public static BindableProperty IsPullToRefreshEnabledProperty;
    public static BindableProperty IsRefreshingProperty;
    public static BindableProperty RefreshCommandProperty;
    public static BindableProperty HeaderProperty;
    public static BindableProperty HeaderTemplateProperty;
    public static BindableProperty FooterProperty;
    public static BindableProperty FooterTemplateProperty;
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty SelectionModeProperty;
    public static BindableProperty HasUnevenRowsProperty;
    public static BindableProperty RowHeightProperty;
    public static BindableProperty GroupHeaderTemplateProperty;
    public static BindableProperty IsGroupingEnabledProperty;
    public static BindableProperty SeparatorVisibilityProperty;
    public static BindableProperty SeparatorColorProperty;
    public static BindableProperty RefreshControlColorProperty;
    public static BindableProperty HorizontalScrollBarVisibilityProperty;
    public static BindableProperty VerticalScrollBarVisibilityProperty;
    private static ToStringValueConverter _toStringValueConverter;
    private Lazy`1<PlatformConfigurationRegistry`1<ListView>> _platformConfigurationRegistry;
    private BindingBase _groupDisplayBinding;
    private BindingBase _groupShortNameBinding;
    private Element _headerElement;
    private Element _footerElement;
    private ScrollToRequestedEventArgs _pendingScroll;
    private int _previousGroupSelected;
    private int _previousRowSelected;
    private bool _refreshAllowed;
    [CompilerGeneratedAttribute]
private ListViewCachingStrategy <CachingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ItemVisibilityEventArgs> ItemAppearing;
    [CompilerGeneratedAttribute]
private EventHandler`1<ItemVisibilityEventArgs> ItemDisappearing;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> ItemSelected;
    [CompilerGeneratedAttribute]
private EventHandler`1<ItemTappedEventArgs> ItemTapped;
    [CompilerGeneratedAttribute]
private EventHandler`1<ScrolledEventArgs> Scrolled;
    [CompilerGeneratedAttribute]
private EventHandler Refreshing;
    [CompilerGeneratedAttribute]
private EventHandler`1<ScrollToRequestedEventArgs> ScrollToRequested;
    public object Footer { get; public set; }
    public DataTemplate FooterTemplate { get; public set; }
    public BindingBase GroupDisplayBinding { get; public set; }
    public DataTemplate GroupHeaderTemplate { get; public set; }
    public BindingBase GroupShortNameBinding { get; public set; }
    public bool HasUnevenRows { get; public set; }
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public bool IsGroupingEnabled { get; public set; }
    public bool IsPullToRefreshEnabled { get; public set; }
    public bool IsRefreshing { get; public set; }
    public ICommand RefreshCommand { get; public set; }
    public int RowHeight { get; public set; }
    public object SelectedItem { get; public set; }
    public ListViewSelectionMode SelectionMode { get; public set; }
    public Color SeparatorColor { get; public set; }
    public Color RefreshControlColor { get; public set; }
    public SeparatorVisibility SeparatorVisibility { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public ListViewCachingStrategy CachingStrategy { get; private set; }
    [EditorBrowsableAttribute("1")]
public bool RefreshAllowed { get; public set; }
    [EditorBrowsableAttribute("1")]
public Element FooterElement { get; }
    [EditorBrowsableAttribute("1")]
public Element HeaderElement { get; }
    public ListView(ListViewCachingStrategy cachingStrategy);
    private static ListView();
    public object get_Footer();
    public void set_Footer(object value);
    public DataTemplate get_FooterTemplate();
    public void set_FooterTemplate(DataTemplate value);
    protected virtual void OnBindingContextChanged();
    public BindingBase get_GroupDisplayBinding();
    public void set_GroupDisplayBinding(BindingBase value);
    public DataTemplate get_GroupHeaderTemplate();
    public void set_GroupHeaderTemplate(DataTemplate value);
    public BindingBase get_GroupShortNameBinding();
    public void set_GroupShortNameBinding(BindingBase value);
    public bool get_HasUnevenRows();
    public void set_HasUnevenRows(bool value);
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public bool get_IsGroupingEnabled();
    public void set_IsGroupingEnabled(bool value);
    public bool get_IsPullToRefreshEnabled();
    public void set_IsPullToRefreshEnabled(bool value);
    public bool get_IsRefreshing();
    public void set_IsRefreshing(bool value);
    public ICommand get_RefreshCommand();
    public void set_RefreshCommand(ICommand value);
    public int get_RowHeight();
    public void set_RowHeight(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public ListViewSelectionMode get_SelectionMode();
    public void set_SelectionMode(ListViewSelectionMode value);
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public Color get_RefreshControlColor();
    public void set_RefreshControlColor(Color value);
    public SeparatorVisibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(SeparatorVisibility value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    [CompilerGeneratedAttribute]
public sealed virtual ListViewCachingStrategy get_CachingStrategy();
    [CompilerGeneratedAttribute]
private void set_CachingStrategy(ListViewCachingStrategy value);
    public void set_RefreshAllowed(bool value);
    public sealed virtual bool get_RefreshAllowed();
    public sealed virtual Element get_FooterElement();
    public sealed virtual Element get_HeaderElement();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendCellAppearing(Cell cell);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendCellDisappearing(Cell cell);
    [EditorBrowsableAttribute("1")]
public void SendScrolled(ScrolledEventArgs args);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendRefreshing();
    public void BeginRefresh();
    public void EndRefresh();
    [CompilerGeneratedAttribute]
public void add_ItemAppearing(EventHandler`1<ItemVisibilityEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemAppearing(EventHandler`1<ItemVisibilityEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ItemDisappearing(EventHandler`1<ItemVisibilityEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemDisappearing(EventHandler`1<ItemVisibilityEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ItemTapped(EventHandler`1<ItemTappedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemTapped(EventHandler`1<ItemTappedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Scrolled(EventHandler`1<ScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(EventHandler`1<ScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Refreshing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Refreshing(EventHandler value);
    public void ScrollTo(object item, ScrollToPosition position, bool animated);
    public void ScrollTo(object item, object group, ScrollToPosition position, bool animated);
    protected virtual Cell CreateDefault(object item);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    protected virtual void SetupContent(Cell content, int index);
    protected virtual void UnhookContent(Cell content);
    [EditorBrowsableAttribute("1")]
public sealed virtual Cell CreateDefaultCell(object item);
    [EditorBrowsableAttribute("1")]
public sealed virtual string GetDisplayTextFromGroup(object cell);
    [EditorBrowsableAttribute("1")]
public sealed virtual void NotifyRowTapped(int groupIndex, int inGroupIndex, Cell cell);
    [EditorBrowsableAttribute("1")]
public sealed virtual void NotifyRowTapped(int index, Cell cell);
    internal virtual void OnIsPlatformEnabledChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    private void OnCommandCanExecuteChanged(object sender, EventArgs eventArgs);
    private static void OnFooterChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFooterTemplateChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnGroupDisplayBindingChanged(BindableObject bindable, BindingBase oldValue, BindingBase newValue);
    private static void OnGroupHeaderTemplateChanged(BindableObject bindable, object oldvalue, object newValue);
    private static void OnHeaderChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnHeaderOrFooterChanged(Element& storage, string property, object dataObject, DataTemplate template, bool templateChanged);
    private static void OnHeaderTemplateChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnRefreshCommandChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnRefreshCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void OnRefreshing(EventArgs e);
    private void OnScrollToRequested(ScrollToRequestedEventArgs e);
    private static void OnSelectedItemChanged(BindableObject bindable, object oldValue, object newValue);
    private static bool ValidateHeaderFooterTemplate(BindableObject bindable, object value);
    public sealed virtual IPlatformElementConfiguration`2<T, ListView> On();
    protected virtual bool ValidateItemTemplate(DataTemplate template);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<ListView> <.ctor>b__29_0();
}
[FlagsAttribute]
public enum Xamarin.Forms.ListViewCachingStrategy : Enum {
    public int value__;
    public static ListViewCachingStrategy RetainElement;
    public static ListViewCachingStrategy RecycleElement;
    public static ListViewCachingStrategy RecycleElementAndDataTemplate;
}
public enum Xamarin.Forms.ListViewSelectionMode : Enum {
    public int value__;
    public static ListViewSelectionMode None;
    public static ListViewSelectionMode Single;
}
internal class Xamarin.Forms.LockingSemaphore : object {
    private static Task Completed;
    private Queue`1<TaskCompletionSource`1<bool>> _waiters;
    private int _currentCount;
    public LockingSemaphore(int initialCount);
    private static LockingSemaphore();
    public void Release();
    public Task WaitAsync(CancellationToken token);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.BindableObjectExtensions : object {
    private static string bindingContextPath;
    [ExtensionAttribute]
public static TBindable Bind(TBindable bindable, BindableProperty targetProperty, string path, BindingMode mode, IValueConverter converter, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue);
    [ExtensionAttribute]
public static TBindable Bind(TBindable bindable, BindableProperty targetProperty, string path, BindingMode mode, Func`2<TSource, TDest> convert, Func`2<TDest, TSource> convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue);
    [ExtensionAttribute]
public static TBindable Bind(TBindable bindable, BindableProperty targetProperty, string path, BindingMode mode, Func`3<TSource, TParam, TDest> convert, Func`3<TDest, TParam, TSource> convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue);
    [ExtensionAttribute]
public static TBindable Bind(TBindable bindable, string path, BindingMode mode, IValueConverter converter, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue);
    [ExtensionAttribute]
public static TBindable Bind(TBindable bindable, string path, BindingMode mode, Func`2<TSource, TDest> convert, Func`2<TDest, TSource> convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue);
    [ExtensionAttribute]
public static TBindable Bind(TBindable bindable, string path, BindingMode mode, Func`3<TSource, TParam, TDest> convert, Func`3<TDest, TParam, TSource> convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue);
    [ExtensionAttribute]
public static TBindable BindCommand(TBindable bindable, string path, object source, string parameterPath, object parameterSource);
    [ExtensionAttribute]
public static TBindable Assign(TBindable bindable, TVariable& variable);
    [ExtensionAttribute]
public static TBindable Invoke(TBindable bindable, Action`1<TBindable> action);
}
public static class Xamarin.Forms.Markup.DefaultBindableProperties : object {
    private static Dictionary`2<string, BindableProperty> bindableObjectTypeDefaultProperty;
    private static Dictionary`2<string, ValueTuple`2<BindableProperty, BindableProperty>> bindableObjectTypeDefaultCommandAndParameterProperties;
    private static DefaultBindableProperties();
    public static void Register(BindableProperty[] properties);
    public static void RegisterForCommand(ValueTuple`2[] propertyPairs);
    internal static void Unregister(BindableProperty property);
    internal static BindableProperty GetFor(BindableObject bindableObject);
    internal static BindableProperty GetFor(Type bindableObjectType);
    internal static void UnregisterForCommand(BindableProperty commandProperty);
    internal static ValueTuple`2<BindableProperty, BindableProperty> GetForCommand(BindableObject bindableObject);
    internal static ValueTuple`2<BindableProperty, BindableProperty> GetForCommand(Type bindableObjectType);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.ElementExtensions : object {
    [ExtensionAttribute]
public static TElement Effects(TElement element, Effect[] effects);
    [ExtensionAttribute]
public static TFontElement FontSize(TFontElement fontElement, double size);
    [ExtensionAttribute]
public static TFontElement Bold(TFontElement fontElement);
    [ExtensionAttribute]
public static TFontElement Italic(TFontElement fontElement);
    [ExtensionAttribute]
public static TFontElement Font(TFontElement fontElement, Nullable`1<double> size, Nullable`1<bool> bold, Nullable`1<bool> italic, string family);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.ElementGesturesExtensions : object {
    private static string bindingContextPath;
    [ExtensionAttribute]
public static TGestureElement BindClickGesture(TGestureElement gestureElement, string commandPath, object commandSource, string parameterPath, object parameterSource);
    [ExtensionAttribute]
public static TGestureElement BindSwipeGesture(TGestureElement gestureElement, string commandPath, object commandSource, string parameterPath, object parameterSource);
    [ExtensionAttribute]
public static TGestureElement BindTapGesture(TGestureElement gestureElement, string commandPath, object commandSource, string parameterPath, object parameterSource);
    [ExtensionAttribute]
public static TGestureElement ClickGesture(TGestureElement gestureElement, Action`1<ClickGestureRecognizer> init);
    [ExtensionAttribute]
public static TGestureElement PanGesture(TGestureElement gestureElement, Action`1<PanGestureRecognizer> init);
    [ExtensionAttribute]
public static TGestureElement PinchGesture(TGestureElement gestureElement, Action`1<PinchGestureRecognizer> init);
    [ExtensionAttribute]
public static TGestureElement SwipeGesture(TGestureElement gestureElement, Action`1<SwipeGestureRecognizer> init);
    [ExtensionAttribute]
public static TGestureElement TapGesture(TGestureElement gestureElement, Action`1<TapGestureRecognizer> init);
    [ExtensionAttribute]
public static TGestureElement Gesture(TGestureElement gestureElement, Action`1<TGestureRecognizer> init);
}
public class Xamarin.Forms.Markup.FuncConverter : FuncConverter`3<object, object, object> {
    public FuncConverter(Func`2<object, object> convert, Func`2<object, object> convertBack);
}
public class Xamarin.Forms.Markup.FuncConverter`1 : FuncConverter`3<TSource, object, object> {
    public FuncConverter`1(Func`2<TSource, object> convert, Func`2<object, TSource> convertBack);
}
public class Xamarin.Forms.Markup.FuncConverter`2 : FuncConverter`3<TSource, TDest, object> {
    public FuncConverter`2(Func`2<TSource, TDest> convert, Func`2<TDest, TSource> convertBack);
}
public class Xamarin.Forms.Markup.FuncConverter`3 : object {
    private Func`2<TSource, TDest> convert;
    private Func`2<TDest, TSource> convertBack;
    private Func`3<TSource, TParam, TDest> convertWithParam;
    private Func`3<TDest, TParam, TSource> convertBackWithParam;
    private Func`4<TSource, TParam, CultureInfo, TDest> convertWithParamAndCulture;
    private Func`4<TDest, TParam, CultureInfo, TSource> convertBackWithParamAndCulture;
    public FuncConverter`3(Func`4<TSource, TParam, CultureInfo, TDest> convertWithParamAndCulture, Func`4<TDest, TParam, CultureInfo, TSource> convertBackWithParamAndCulture);
    public FuncConverter`3(Func`3<TSource, TParam, TDest> convertWithParam, Func`3<TDest, TParam, TSource> convertBackWithParam);
    public FuncConverter`3(Func`2<TSource, TDest> convert, Func`2<TDest, TSource> convertBack);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.GridRowsColumns : object {
    public static GridLength Auto { get; }
    public static GridLength Star { get; }
    public static GridLength get_Auto();
    public static GridLength get_Star();
    public static int All();
    public static int Last();
    [ExtensionAttribute]
private static int ToInt(Enum enumValue);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.LabelExtensions : object {
    [ExtensionAttribute]
public static TLabel TextStart(TLabel label);
    [ExtensionAttribute]
public static TLabel TextCenterHorizontal(TLabel label);
    [ExtensionAttribute]
public static TLabel TextEnd(TLabel label);
    [ExtensionAttribute]
public static TLabel TextTop(TLabel label);
    [ExtensionAttribute]
public static TLabel TextCenterVertical(TLabel label);
    [ExtensionAttribute]
public static TLabel TextBottom(TLabel label);
    [ExtensionAttribute]
public static TLabel TextCenter(TLabel label);
    [ExtensionAttribute]
public static TLabel FormattedText(TLabel label, Span[] spans);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.LayoutExtensions : object {
    [ExtensionAttribute]
public static TLayout Padding(TLayout layout, Thickness padding);
    [ExtensionAttribute]
public static TLayout Padding(TLayout layout, double horizontalSize, double verticalSize);
    [ExtensionAttribute]
public static TLayout Paddings(TLayout layout, double left, double top, double right, double bottom);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.LeftToRight.LabelExtensions : object {
    [ExtensionAttribute]
public static TLabel TextLeft(TLabel label);
    [ExtensionAttribute]
public static TLabel TextRight(TLabel label);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.LeftToRight.ViewExtensions : object {
    [ExtensionAttribute]
public static TView Left(TView view);
    [ExtensionAttribute]
public static TView Right(TView view);
    [ExtensionAttribute]
public static TView LeftExpand(TView view);
    [ExtensionAttribute]
public static TView RightExpand(TView view);
}
public class Xamarin.Forms.Markup.NotConverter : FuncConverter`2<bool, bool> {
    private static Lazy`1<NotConverter> instance;
    public static NotConverter Instance { get; }
    private static NotConverter();
    public static NotConverter get_Instance();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.RightToLeft.LabelExtensions : object {
    [ExtensionAttribute]
public static TLabel TextLeft(TLabel label);
    [ExtensionAttribute]
public static TLabel TextRight(TLabel label);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.RightToLeft.ViewExtensions : object {
    [ExtensionAttribute]
public static TView Left(TView view);
    [ExtensionAttribute]
public static TView Right(TView view);
    [ExtensionAttribute]
public static TView LeftExpand(TView view);
    [ExtensionAttribute]
public static TView RightExpand(TView view);
}
public class Xamarin.Forms.Markup.Style`1 : object {
    [CompilerGeneratedAttribute]
private Style <FormsStyle>k__BackingField;
    public Style FormsStyle { get; }
    public Style`1(ValueTuple`2[] setters);
    public static Style op_Implicit(Style`1<T> style);
    [CompilerGeneratedAttribute]
public Style get_FormsStyle();
    public Style`1<T> ApplyToDerivedTypes(bool value);
    public Style`1<T> BasedOn(Style value);
    public Style`1<T> Add(ValueTuple`2[] setters);
    public Style`1<T> Add(Behavior[] behaviors);
    public Style`1<T> Add(TriggerBase[] triggers);
    public Style`1<T> CanCascade(bool value);
}
public class Xamarin.Forms.Markup.ToStringConverter : FuncConverter`2<object, string> {
    public ToStringConverter(string format);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.ViewExtensions : object {
    [ExtensionAttribute]
public static TView Start(TView view);
    [ExtensionAttribute]
public static TView CenterHorizontal(TView view);
    [ExtensionAttribute]
public static TView FillHorizontal(TView view);
    [ExtensionAttribute]
public static TView End(TView view);
    [ExtensionAttribute]
public static TView StartExpand(TView view);
    [ExtensionAttribute]
public static TView CenterExpandHorizontal(TView view);
    [ExtensionAttribute]
public static TView FillExpandHorizontal(TView view);
    [ExtensionAttribute]
public static TView EndExpand(TView view);
    [ExtensionAttribute]
public static TView Top(TView view);
    [ExtensionAttribute]
public static TView Bottom(TView view);
    [ExtensionAttribute]
public static TView CenterVertical(TView view);
    [ExtensionAttribute]
public static TView FillVertical(TView view);
    [ExtensionAttribute]
public static TView TopExpand(TView view);
    [ExtensionAttribute]
public static TView BottomExpand(TView view);
    [ExtensionAttribute]
public static TView CenterExpandVertical(TView view);
    [ExtensionAttribute]
public static TView FillExpandVertical(TView view);
    [ExtensionAttribute]
public static TView Center(TView view);
    [ExtensionAttribute]
public static TView Fill(TView view);
    [ExtensionAttribute]
public static TView CenterExpand(TView view);
    [ExtensionAttribute]
public static TView FillExpand(TView view);
    [ExtensionAttribute]
public static TView Margin(TView view, Thickness margin);
    [ExtensionAttribute]
public static TView Margin(TView view, double horizontal, double vertical);
    [ExtensionAttribute]
public static TView Margins(TView view, double left, double top, double right, double bottom);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.ViewInFlexLayoutExtensions : object {
    [ExtensionAttribute]
public static TView AlignSelf(TView view, FlexAlignSelf value);
    [ExtensionAttribute]
public static TView Basis(TView view, FlexBasis value);
    [ExtensionAttribute]
public static TView Grow(TView view, float value);
    [ExtensionAttribute]
public static TView Order(TView view, int value);
    [ExtensionAttribute]
public static TView Shrink(TView view, float value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.ViewInGridExtensions : object {
    [ExtensionAttribute]
public static TView Row(TView view, int row);
    [ExtensionAttribute]
public static TView Row(TView view, int row, int span);
    [ExtensionAttribute]
public static TView RowSpan(TView view, int span);
    [ExtensionAttribute]
public static TView Column(TView view, int column);
    [ExtensionAttribute]
public static TView Column(TView view, int column, int span);
    [ExtensionAttribute]
public static TView ColumnSpan(TView view, int span);
    [ExtensionAttribute]
public static TView Row(TView view, TRow row);
    [ExtensionAttribute]
public static TView Row(TView view, TRow first, TRow last);
    [ExtensionAttribute]
public static TView Column(TView view, TColumn column);
    [ExtensionAttribute]
public static TView Column(TView view, TColumn first, TColumn last);
    [ExtensionAttribute]
private static int ToInt(Enum enumValue);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Markup.VisualElementExtensions : object {
    [ExtensionAttribute]
public static TElement Height(TElement element, double request);
    [ExtensionAttribute]
public static TElement Width(TElement element, double request);
    [ExtensionAttribute]
public static TElement MinHeight(TElement element, double request);
    [ExtensionAttribute]
public static TElement MinWidth(TElement element, double request);
    [ExtensionAttribute]
public static TElement Size(TElement element, double widthRequest, double heightRequest);
    [ExtensionAttribute]
public static TElement Size(TElement element, double sizeRequest);
    [ExtensionAttribute]
public static TElement MinSize(TElement element, double widthRequest, double heightRequest);
    [ExtensionAttribute]
public static TElement MinSize(TElement element, double sizeRequest);
    [ExtensionAttribute]
public static T Style(T view, Style`1<T> style);
}
public class Xamarin.Forms.MarshalingObservableCollection : List`1<object> {
    private IList _internalCollection;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public MarshalingObservableCollection(IList list);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    private void InternalCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void HandleCollectionChange(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Reset(NotifyCollectionChangedEventArgs args);
}
public enum Xamarin.Forms.MasterBehavior : Enum {
    public int value__;
    public static MasterBehavior Default;
    public static MasterBehavior SplitOnLandscape;
    public static MasterBehavior Split;
    public static MasterBehavior Popover;
    public static MasterBehavior SplitOnPortrait;
}
[RenderWithAttribute("Xamarin.Forms.Platform._MasterDetailPageRenderer")]
public class Xamarin.Forms.MasterDetailPage : Page {
    public static BindableProperty IsGestureEnabledProperty;
    public static BindableProperty IsPresentedProperty;
    public static BindableProperty MasterBehaviorProperty;
    private Page _detail;
    private Rectangle _detailBounds;
    private Page _master;
    private Rectangle _masterBounds;
    [CompilerGeneratedAttribute]
private bool <CanChangeIsPresented>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler IsPresentedChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<BackButtonPressedEventArgs> BackButtonPressed;
    private Lazy`1<PlatformConfigurationRegistry`1<MasterDetailPage>> _platformConfigurationRegistry;
    public Page Detail { get; public set; }
    public bool IsGestureEnabled { get; public set; }
    public bool IsPresented { get; public set; }
    public Page Master { get; public set; }
    public MasterBehavior MasterBehavior { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool CanChangeIsPresented { get; public set; }
    [EditorBrowsableAttribute("1")]
public Rectangle DetailBounds { get; public set; }
    [EditorBrowsableAttribute("1")]
public Rectangle MasterBounds { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool ShouldShowSplitMode { get; }
    private static MasterDetailPage();
    public Page get_Detail();
    public void set_Detail(Page value);
    public bool get_IsGestureEnabled();
    public void set_IsGestureEnabled(bool value);
    public bool get_IsPresented();
    public void set_IsPresented(bool value);
    public Page get_Master();
    public void set_Master(Page value);
    public MasterBehavior get_MasterBehavior();
    public void set_MasterBehavior(MasterBehavior value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanChangeIsPresented();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CanChangeIsPresented(bool value);
    public sealed virtual Rectangle get_DetailBounds();
    public sealed virtual void set_DetailBounds(Rectangle value);
    public sealed virtual Rectangle get_MasterBounds();
    public sealed virtual void set_MasterBounds(Rectangle value);
    public sealed virtual bool get_ShouldShowSplitMode();
    [CompilerGeneratedAttribute]
public void add_IsPresentedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IsPresentedChanged(EventHandler value);
    public virtual bool ShouldShowToolbarButton();
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual void OnAppearing();
    protected virtual bool OnBackButtonPressed();
    protected virtual void OnParentSet();
    [CompilerGeneratedAttribute]
public sealed virtual void add_BackButtonPressed(EventHandler`1<BackButtonPressedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BackButtonPressed(EventHandler`1<BackButtonPressedEventArgs> value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void UpdateMasterBehavior();
    internal static void UpdateMasterBehavior(MasterDetailPage page);
    private static void OnIsPresentedPropertyChanged(BindableObject sender, object oldValue, object newValue);
    private static void OnIsPresentedPropertyChanging(BindableObject sender, object oldValue, object newValue);
    private static void OnMasterBehaviorPropertyChanged(BindableObject sender, object oldValue, object newValue);
    private static object GetDefaultValue(BindableObject bindable);
    public sealed virtual IPlatformElementConfiguration`2<T, MasterDetailPage> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<MasterDetailPage> <.ctor>b__51_0();
}
[FlagsAttribute]
public enum Xamarin.Forms.MeasureFlags : Enum {
    public int value__;
    public static MeasureFlags None;
    public static MeasureFlags IncludeMargins;
}
[RenderWithAttribute("Xamarin.Forms.Platform._MediaElementRenderer")]
public class Xamarin.Forms.MediaElement : View {
    public static BindableProperty AspectProperty;
    public static BindableProperty AutoPlayProperty;
    public static BindableProperty BufferingProgressProperty;
    public static BindableProperty CurrentStateProperty;
    public static BindableProperty DurationProperty;
    public static BindableProperty IsLoopingProperty;
    public static BindableProperty KeepScreenOnProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty ShowsPlaybackControlsProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty VideoHeightProperty;
    public static BindableProperty VideoWidthProperty;
    public static BindableProperty VolumeProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<SeekRequested> SeekRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<StateRequested> StateRequested;
    [CompilerGeneratedAttribute]
private EventHandler PositionRequested;
    [CompilerGeneratedAttribute]
private EventHandler VolumeRequested;
    [CompilerGeneratedAttribute]
private EventHandler MediaEnded;
    [CompilerGeneratedAttribute]
private EventHandler MediaFailed;
    [CompilerGeneratedAttribute]
private EventHandler MediaOpened;
    [CompilerGeneratedAttribute]
private EventHandler SeekCompleted;
    public Aspect Aspect { get; public set; }
    public bool AutoPlay { get; public set; }
    public double BufferingProgress { get; }
    public bool CanSeek { get; }
    public MediaElementState CurrentState { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public bool IsLooping { get; public set; }
    public bool KeepScreenOn { get; public set; }
    public bool ShowsPlaybackControls { get; public set; }
    public TimeSpan Position { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.MediaSourceConverter")]
public MediaSource Source { get; public set; }
    public int VideoHeight { get; }
    public int VideoWidth { get; }
    public double Volume { get; public set; }
    private double Xamarin.Forms.IMediaElementController.BufferingProgress { get; private set; }
    private MediaElementState Xamarin.Forms.IMediaElementController.CurrentState { get; private set; }
    private Nullable`1<TimeSpan> Xamarin.Forms.IMediaElementController.Duration { get; private set; }
    private TimeSpan Xamarin.Forms.IMediaElementController.Position { get; private set; }
    private int Xamarin.Forms.IMediaElementController.VideoHeight { get; private set; }
    private int Xamarin.Forms.IMediaElementController.VideoWidth { get; private set; }
    private double Xamarin.Forms.IMediaElementController.Volume { get; private set; }
    private static MediaElement();
    [EditorBrowsableAttribute("1")]
public static void VerifyMediaElementFlagEnabled(string constructorHint, string memberName);
    private static bool ValidateVolume(BindableObject o, object newValue);
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public bool get_AutoPlay();
    public void set_AutoPlay(bool value);
    public double get_BufferingProgress();
    public bool get_CanSeek();
    public MediaElementState get_CurrentState();
    public Nullable`1<TimeSpan> get_Duration();
    public bool get_IsLooping();
    public void set_IsLooping(bool value);
    public bool get_KeepScreenOn();
    public void set_KeepScreenOn(bool value);
    public bool get_ShowsPlaybackControls();
    public void set_ShowsPlaybackControls(bool value);
    public TimeSpan get_Position();
    public void set_Position(TimeSpan value);
    public MediaSource get_Source();
    public void set_Source(MediaSource value);
    public int get_VideoHeight();
    public int get_VideoWidth();
    public double get_Volume();
    public void set_Volume(double value);
    [CompilerGeneratedAttribute]
public void add_SeekRequested(EventHandler`1<SeekRequested> value);
    [CompilerGeneratedAttribute]
public void remove_SeekRequested(EventHandler`1<SeekRequested> value);
    [CompilerGeneratedAttribute]
public void add_StateRequested(EventHandler`1<StateRequested> value);
    [CompilerGeneratedAttribute]
public void remove_StateRequested(EventHandler`1<StateRequested> value);
    [CompilerGeneratedAttribute]
public void add_PositionRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PositionRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_VolumeRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_VolumeRequested(EventHandler value);
    public void Play();
    public void Pause();
    public void Stop();
    private sealed virtual override double Xamarin.Forms.IMediaElementController.get_BufferingProgress();
    private sealed virtual override void Xamarin.Forms.IMediaElementController.set_BufferingProgress(double value);
    private sealed virtual override MediaElementState Xamarin.Forms.IMediaElementController.get_CurrentState();
    private sealed virtual override void Xamarin.Forms.IMediaElementController.set_CurrentState(MediaElementState value);
    private sealed virtual override Nullable`1<TimeSpan> Xamarin.Forms.IMediaElementController.get_Duration();
    private sealed virtual override void Xamarin.Forms.IMediaElementController.set_Duration(Nullable`1<TimeSpan> value);
    private sealed virtual override TimeSpan Xamarin.Forms.IMediaElementController.get_Position();
    private sealed virtual override void Xamarin.Forms.IMediaElementController.set_Position(TimeSpan value);
    private sealed virtual override int Xamarin.Forms.IMediaElementController.get_VideoHeight();
    private sealed virtual override void Xamarin.Forms.IMediaElementController.set_VideoHeight(int value);
    private sealed virtual override int Xamarin.Forms.IMediaElementController.get_VideoWidth();
    private sealed virtual override void Xamarin.Forms.IMediaElementController.set_VideoWidth(int value);
    private sealed virtual override double Xamarin.Forms.IMediaElementController.get_Volume();
    private sealed virtual override void Xamarin.Forms.IMediaElementController.set_Volume(double value);
    private sealed virtual override void Xamarin.Forms.IMediaElementController.OnMediaEnded();
    [CompilerGeneratedAttribute]
public void add_MediaEnded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MediaEnded(EventHandler value);
    private sealed virtual override void Xamarin.Forms.IMediaElementController.OnMediaFailed();
    [CompilerGeneratedAttribute]
public void add_MediaFailed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MediaFailed(EventHandler value);
    private sealed virtual override void Xamarin.Forms.IMediaElementController.OnMediaOpened();
    [CompilerGeneratedAttribute]
public void add_MediaOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MediaOpened(EventHandler value);
    private sealed virtual override void Xamarin.Forms.IMediaElementController.OnSeekCompleted();
    [CompilerGeneratedAttribute]
public void add_SeekCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SeekCompleted(EventHandler value);
    protected virtual void OnBindingContextChanged();
    private void OnSourceChanged(object sender, EventArgs eventArgs);
    private static void OnSourcePropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private void OnSourcePropertyChanged(MediaSource oldvalue, MediaSource newvalue);
    private static void OnSourcePropertyChanging(BindableObject bindable, object oldvalue, object newvalue);
    private void OnSourcePropertyChanging(MediaSource oldvalue, MediaSource newvalue);
}
public enum Xamarin.Forms.MediaElementState : Enum {
    public int value__;
    public static MediaElementState Closed;
    public static MediaElementState Opening;
    public static MediaElementState Buffering;
    public static MediaElementState Playing;
    public static MediaElementState Paused;
    public static MediaElementState Stopped;
}
[TypeConverterAttribute("Xamarin.Forms.MediaSourceConverter")]
public abstract class Xamarin.Forms.MediaSource : Element {
    private WeakEventManager _weakEventManager;
    public static MediaSource FromFile(string file);
    public static MediaSource FromUri(Uri uri);
    public static MediaSource op_Implicit(string source);
    public static MediaSource op_Implicit(Uri uri);
    protected void OnSourceChanged();
    internal void add_SourceChanged(EventHandler value);
    internal void remove_SourceChanged(EventHandler value);
}
[TypeConversionAttribute("Xamarin.Forms.MediaSource")]
public class Xamarin.Forms.MediaSourceConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.Menu : BaseMenuItem {
    private ObservableCollection`1<Menu> _menus;
    private ObservableCollection`1<MenuItem> _items;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public Menu Item { get; public set; }
    public string Text { get; public set; }
    public ObservableCollection`1<MenuItem> Items { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual Menu get_Item(int index);
    public sealed virtual void set_Item(int index, Menu value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public void Invalidate();
    public ObservableCollection`1<MenuItem> get_Items();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(Menu item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Menu item);
    public sealed virtual void CopyTo(Menu[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<Menu> GetEnumerator();
    public sealed virtual int IndexOf(Menu item);
    public sealed virtual void Insert(int index, Menu item);
    public sealed virtual bool Remove(Menu item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(object s, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.MenuItem : BaseMenuItem {
    public static BindableProperty AcceleratorProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty IsDestructiveProperty;
    public static BindableProperty IconImageSourceProperty;
    [ObsoleteAttribute("IconProperty is obsolete as of 4.0.0. Please use IconImageSourceProperty instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty IconProperty;
    private static BindablePropertyKey IsEnabledPropertyKey;
    public static BindableProperty IsEnabledProperty;
    public static BindableProperty TextProperty;
    internal MergedStyle _mergedStyle;
    [CompilerGeneratedAttribute]
private EventHandler Clicked;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    [ObsoleteAttribute("Icon is obsolete as of 4.0.0. Please use IconImageSource instead.")]
[EditorBrowsableAttribute("1")]
public FileImageSource Icon { get; public set; }
    public ImageSource IconImageSource { get; public set; }
    public bool IsDestructive { get; public set; }
    public string Text { get; public set; }
    public bool IsEnabled { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ListStringTypeConverter")]
public IList`1<string> StyleClass { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ListStringTypeConverter")]
public IList`1<string> class { get; public set; }
    private IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.Classes { get; }
    unknown bool IsEnabledCore {private set; }
    [ObsoleteAttribute("This property is obsolete as of 3.5.0. Please use MenuItem.IsEnabledProperty.PropertyName instead.")]
public string IsEnabledPropertyName { get; }
    private static MenuItem();
    public static Accelerator GetAccelerator(BindableObject bindable);
    public static void SetAccelerator(BindableObject bindable, Accelerator value);
    public sealed virtual ICommand get_Command();
    public sealed virtual void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public sealed virtual void set_CommandParameter(object value);
    public FileImageSource get_Icon();
    public void set_Icon(FileImageSource value);
    public ImageSource get_IconImageSource();
    public void set_IconImageSource(ImageSource value);
    public bool get_IsDestructive();
    public void set_IsDestructive(bool value);
    public string get_Text();
    public void set_Text(string value);
    public sealed virtual bool get_IsEnabled();
    [EditorBrowsableAttribute("1")]
public sealed virtual void set_IsEnabled(bool value);
    public IList`1<string> get_StyleClass();
    public void set_StyleClass(IList`1<string> value);
    public IList`1<string> get_class();
    public void set_class(IList`1<string> value);
    private sealed virtual override IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.get_Classes();
    private void set_IsEnabledCore(bool value);
    public sealed virtual string get_IsEnabledPropertyName();
    [CompilerGeneratedAttribute]
public void add_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Clicked(EventHandler value);
    protected virtual void OnClicked();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.IMenuItemController.Activate();
    private void OnCommandCanExecuteChanged(object sender, EventArgs eventArgs);
    private void OnCommandChanged();
    private void OnCommandChanging();
    private void OnCommandParameterChanged();
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.MenuItemCollection : object {
    private ObservableCollection`1<MenuItem> _inner;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MenuItem Item { get; public set; }
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual MenuItem get_Item(int index);
    public sealed virtual void set_Item(int index, MenuItem value);
    public sealed virtual void Add(MenuItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(MenuItem item);
    public sealed virtual void CopyTo(MenuItem[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<MenuItem> GetEnumerator();
    public sealed virtual int IndexOf(MenuItem item);
    public sealed virtual void Insert(int index, MenuItem item);
    public sealed virtual bool Remove(MenuItem item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Xamarin.Forms.MenuShellItem : ShellItem {
    [CompilerGeneratedAttribute]
private MenuItem <MenuItem>k__BackingField;
    private IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.Classes { get; }
    public string Text { get; }
    public MenuItem MenuItem { get; }
    private bool Xamarin.Forms.IMenuItemController.IsEnabled { get; private set; }
    private string Xamarin.Forms.IMenuItemController.IsEnabledPropertyName { get; }
    internal MenuShellItem(MenuItem menuItem);
    private sealed virtual override IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.get_Classes();
    public string get_Text();
    private void OnMenuItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public MenuItem get_MenuItem();
    private sealed virtual override bool Xamarin.Forms.IMenuItemController.get_IsEnabled();
    private sealed virtual override void Xamarin.Forms.IMenuItemController.set_IsEnabled(bool value);
    private sealed virtual override string Xamarin.Forms.IMenuItemController.get_IsEnabledPropertyName();
    private sealed virtual override void Xamarin.Forms.IMenuItemController.Activate();
    protected virtual void OnBindingContextChanged();
}
internal class Xamarin.Forms.MergedStyle : object {
    private static IList`1<Type> s_stopAtTypes;
    private IList`1<BindableProperty> _classStyleProperties;
    private List`1<BindableProperty> _implicitStyles;
    private IList`1<Style> _classStyles;
    private IStyle _implicitStyle;
    private IStyle _style;
    private IList`1<string> _styleClass;
    [CompilerGeneratedAttribute]
private BindableObject <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    public IStyle Style { get; public set; }
    public IList`1<string> StyleClass { get; public set; }
    public BindableObject Target { get; }
    private IList`1<Style> ClassStyles { get; private set; }
    private IStyle ImplicitStyle { get; private set; }
    public Type TargetType { get; }
    public MergedStyle(Type targetType, BindableObject target);
    private static MergedStyle();
    public IStyle get_Style();
    public void set_Style(IStyle value);
    public IList`1<string> get_StyleClass();
    public void set_StyleClass(IList`1<string> value);
    [CompilerGeneratedAttribute]
public BindableObject get_Target();
    private IList`1<Style> get_ClassStyles();
    private void set_ClassStyles(IList`1<Style> value);
    private IStyle get_ImplicitStyle();
    private void set_ImplicitStyle(IStyle value);
    public sealed virtual void Apply(BindableObject bindable);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TargetType();
    public sealed virtual void UnApply(BindableObject bindable);
    private void OnClassStyleChanged();
    private void OnImplicitStyleChanged();
    private void RegisterImplicitStyles();
    internal void ReRegisterImplicitStyles(string fallbackTypeName);
    private void SetStyle(IStyle implicitStyle, IList`1<Style> classStyles, IStyle style);
    [CompilerGeneratedAttribute]
private void <set_StyleClass>b__13_0(BindableObject bindable, object oldvalue, object newvalue);
    [CompilerGeneratedAttribute]
private Style <OnClassStyleChanged>b__28_0(BindableProperty p);
    [CompilerGeneratedAttribute]
private bool <OnClassStyleChanged>b__28_1(Style s);
    [CompilerGeneratedAttribute]
private void <RegisterImplicitStyles>b__30_0(BindableObject bindable, object oldvalue, object newvalue);
    [CompilerGeneratedAttribute]
private void <ReRegisterImplicitStyles>b__31_0(BindableObject bindable, object oldvalue, object newvalue);
}
public class Xamarin.Forms.MessagingCenter : object {
    [CompilerGeneratedAttribute]
private static IMessagingCenter <Instance>k__BackingField;
    private Dictionary`2<Sender, List`1<Subscription>> _subscriptions;
    public static IMessagingCenter Instance { get; }
    private static MessagingCenter();
    [CompilerGeneratedAttribute]
public static IMessagingCenter get_Instance();
    public static void Send(TSender sender, string message, TArgs args);
    private sealed virtual override void Xamarin.Forms.IMessagingCenter.Send(TSender sender, string message, TArgs args);
    public static void Send(TSender sender, string message);
    private sealed virtual override void Xamarin.Forms.IMessagingCenter.Send(TSender sender, string message);
    public static void Subscribe(object subscriber, string message, Action`2<TSender, TArgs> callback, TSender source);
    private sealed virtual override void Xamarin.Forms.IMessagingCenter.Subscribe(object subscriber, string message, Action`2<TSender, TArgs> callback, TSender source);
    public static void Subscribe(object subscriber, string message, Action`1<TSender> callback, TSender source);
    private sealed virtual override void Xamarin.Forms.IMessagingCenter.Subscribe(object subscriber, string message, Action`1<TSender> callback, TSender source);
    public static void Unsubscribe(object subscriber, string message);
    private sealed virtual override void Xamarin.Forms.IMessagingCenter.Unsubscribe(object subscriber, string message);
    public static void Unsubscribe(object subscriber, string message);
    private sealed virtual override void Xamarin.Forms.IMessagingCenter.Unsubscribe(object subscriber, string message);
    private void InnerSend(string message, Type senderType, Type argType, object sender, object args);
    private void InnerSubscribe(object subscriber, string message, Type senderType, Type argType, object target, MethodInfo methodInfo, Filter filter);
    private void InnerUnsubscribe(string message, Type senderType, Type argType, object subscriber);
    internal static void ClearSubscribers();
}
public abstract class Xamarin.Forms.ModalEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Page <Modal>k__BackingField;
    public Page Modal { get; private set; }
    protected ModalEventArgs(Page modal);
    [CompilerGeneratedAttribute]
public Page get_Modal();
    [CompilerGeneratedAttribute]
private void set_Modal(Page value);
}
public class Xamarin.Forms.ModalPoppedEventArgs : ModalEventArgs {
    public ModalPoppedEventArgs(Page modal);
}
public class Xamarin.Forms.ModalPoppingEventArgs : ModalEventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    public ModalPoppingEventArgs(Page modal);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Xamarin.Forms.ModalPushedEventArgs : ModalEventArgs {
    public ModalPushedEventArgs(Page modal);
}
public class Xamarin.Forms.ModalPushingEventArgs : ModalEventArgs {
    public ModalPushingEventArgs(Page modal);
}
[ContentPropertyAttribute("Bindings")]
public class Xamarin.Forms.MultiBinding : BindingBase {
    private IMultiValueConverter _converter;
    private object _converterParameter;
    private IList`1<BindingBase> _bindings;
    private BindableProperty _targetProperty;
    private BindableObject _targetObject;
    private BindableObject _proxyObject;
    private BindableProperty[] _bpProxies;
    private bool _applying;
    public IMultiValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public IList`1<BindingBase> Bindings { get; public set; }
    public IMultiValueConverter get_Converter();
    public void set_Converter(IMultiValueConverter value);
    public object get_ConverterParameter();
    public void set_ConverterParameter(object value);
    public IList`1<BindingBase> get_Bindings();
    public void set_Bindings(IList`1<BindingBase> value);
    internal virtual BindingBase Clone();
    internal virtual void Apply(bool fromTarget);
    internal virtual void Apply(object context, BindableObject targetObject, BindableProperty targetProperty, bool fromBindingContextChanged);
    private Object[] GetValueArray();
    internal virtual object GetSourceValue(object value, Type targetPropertyType);
    internal virtual object GetTargetValue(object value, Type sourcePropertyType);
    private void OnBindingChanged(BindableObject bindable, object oldValue, object newValue);
    internal virtual void Unapply(bool fromBindingContextChanged);
}
internal class Xamarin.Forms.MultiCondition : Condition {
    private BindableProperty _aggregatedStateProperty;
    [CompilerGeneratedAttribute]
private IList`1<Condition> <Conditions>k__BackingField;
    public IList`1<Condition> Conditions { get; }
    [CompilerGeneratedAttribute]
public IList`1<Condition> get_Conditions();
    internal virtual bool GetState(BindableObject bindable);
    internal virtual void OnSealed();
    internal virtual void SetUp(BindableObject bindable);
    internal virtual void TearDown(BindableObject bindable);
    private void OnAggregatedStatePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnConditionChanged(BindableObject bindable, bool oldValue, bool newValue);
}
[ContentPropertyAttribute("Children")]
public abstract class Xamarin.Forms.MultiPage`1 : Page {
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty SelectedItemProperty;
    internal static BindableProperty IndexProperty;
    private ElementCollection`1<T> _children;
    private TemplatedItemsList`2<MultiPage`1<T>, T> _templatedItems;
    private T _current;
    [CompilerGeneratedAttribute]
private EventHandler CurrentPageChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler PagesChanged;
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public object SelectedItem { get; public set; }
    public T CurrentPage { get; public set; }
    public IList`1<T> Children { get; }
    private static MultiPage`1();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    private sealed virtual override T Xamarin.Forms.IItemsView<T>.CreateDefault(object item);
    private sealed virtual override void Xamarin.Forms.IItemsView<T>.SetupContent(T content, int index);
    private sealed virtual override void Xamarin.Forms.IItemsView<T>.UnhookContent(T content);
    public sealed virtual T get_CurrentPage();
    public void set_CurrentPage(T value);
    public sealed virtual IList`1<T> get_Children();
    [CompilerGeneratedAttribute]
public void add_CurrentPageChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CurrentPageChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PagesChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PagesChanged(NotifyCollectionChangedEventHandler value);
    protected abstract virtual T CreateDefault(object item);
    protected virtual bool OnBackButtonPressed();
    protected virtual void OnChildAdded(Element child);
    protected virtual void OnCurrentPageChanged();
    protected virtual void OnPagesChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void SetupContent(T content, int index);
    protected virtual void UnhookContent(T content);
    [EditorBrowsableAttribute("1")]
public static int GetIndex(T page);
    [EditorBrowsableAttribute("1")]
public sealed virtual T GetPageByIndex(int index);
    [EditorBrowsableAttribute("1")]
public static void SetIndex(Page page, int index);
    private void OnChildrenChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnTemplatedItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Reset();
    private void UpdateCurrentPage();
}
[ContentPropertyAttribute("Setters")]
public class Xamarin.Forms.MultiTrigger : TriggerBase {
    public IList`1<Condition> Conditions { get; }
    public IList`1<Setter> Setters { get; }
    public MultiTrigger(Type targetType);
    public IList`1<Condition> get_Conditions();
    public IList`1<Setter> get_Setters();
}
public static class Xamarin.Forms.NamedPlatformColor : object {
    public static string SystemBlue;
    public static string SystemGreen;
    public static string SystemIndigo;
    public static string SystemOrange;
    public static string SystemPink;
    public static string SystemPurple;
    public static string SystemRed;
    public static string SystemTeal;
    public static string SystemYellow;
    public static string SystemGray;
    public static string Label;
    public static string SecondaryLabel;
    public static string TertiaryLabel;
    public static string QuaternaryLabel;
    public static string PlaceholderText;
    public static string Separator;
    public static string Link;
    public static string SystemGray2;
    public static string SystemGray3;
    public static string SystemGray4;
    public static string SystemGray5;
    public static string SystemGray6;
    public static string OpaqueSeparator;
    public static string AlternateSelectedControlTextColor;
    public static string ControlAccent;
    public static string ControlBackgroundColor;
    public static string ControlColor;
    public static string ControlTextColor;
    public static string DisabledControlTextColor;
    public static string FindHighlightColor;
    public static string GridColor;
    public static string HeaderTextColor;
    public static string HighlightColor;
    public static string KeyboardFocusIndicatorColor;
    public static string LabelColor;
    public static string LinkColor;
    public static string PlaceholderTextColor;
    public static string QuaternaryLabelColor;
    public static string SecondaryLabelColor;
    public static string SelectedContentBackgroundColor;
    public static string SelectedControlColor;
    public static string SelectedControlTextColor;
    public static string SelectedMenuItemTextColor;
    public static string SelectedTextBackgroundColor;
    public static string SelectedTextColor;
    public static string SeparatorColor;
    public static string ShadowColor;
    public static string TertiaryLabelColor;
    public static string TextBackgroundColor;
    public static string TextColor;
    public static string UnderPageBackgroundColor;
    public static string UnemphasizedSelectedContentBackgroundColor;
    public static string UnemphasizedSelectedTextBackgroundColor;
    public static string UnemphasizedSelectedTextColor;
    public static string WindowBackgroundColor;
    public static string WindowFrameTextColor;
    public static string BackgroundDark;
    public static string BackgroundLight;
    public static string Black;
    public static string DarkerGray;
    public static string HoloBlueBright;
    public static string HoloBlueDark;
    public static string HoloBlueLight;
    public static string HoloGreenDark;
    public static string HoloGreenLight;
    public static string HoloOrangeDark;
    public static string HoloOrangeLight;
    public static string HoloPurple;
    public static string HoloRedDark;
    public static string HoloRedLight;
    public static string TabIndicatorText;
    public static string Transparent;
    public static string White;
    public static string WidgetEditTextDark;
    public static string SystemAltLowColor;
    public static string SystemAltMediumColor;
    public static string SystemAltMediumHighColor;
    public static string SystemAltMediumLowColor;
    public static string SystemBaseHighColor;
    public static string SystemBaseLowColor;
    public static string SystemBaseMediumColor;
    public static string SystemBaseMediumHighColor;
    public static string SystemBaseMediumLowColor;
    public static string SystemChromeAltLowColor;
    public static string SystemChromeBlackHighColor;
    public static string SystemChromeBlackLowColor;
    public static string SystemChromeBlackMediumLowColor;
    public static string SystemChromeBlackMediumColor;
    public static string SystemChromeDisabledHighColor;
    public static string SystemChromeDisabledLowColor;
    public static string SystemChromeHighColor;
    public static string SystemChromeLowColor;
    public static string SystemChromeMediumColor;
    public static string SystemChromeMediumLowColor;
    public static string SystemChromeWhiteColor;
    public static string SystemListLowColor;
    public static string SystemListMediumColor;
    public static string SystemAltHighColor;
}
public enum Xamarin.Forms.NamedSize : Enum {
    public int value__;
    public static NamedSize Default;
    public static NamedSize Micro;
    public static NamedSize Small;
    public static NamedSize Medium;
    public static NamedSize Large;
    public static NamedSize Body;
    public static NamedSize Header;
    public static NamedSize Title;
    public static NamedSize Subtitle;
    public static NamedSize Caption;
}
[ExtensionAttribute]
public static class Xamarin.Forms.NameScopeExtensions : object {
    [ExtensionAttribute]
public static T FindByName(Element element, string name);
    [ExtensionAttribute]
internal static T FindByName(INameScope namescope, string name);
}
public class Xamarin.Forms.NavigableElement : Element {
    private static BindablePropertyKey NavigationPropertyKey;
    public static BindableProperty NavigationProperty;
    public static BindableProperty StyleProperty;
    internal MergedStyle _mergedStyle;
    public INavigation Navigation { get; internal set; }
    public Style Style { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ListStringTypeConverter")]
public IList`1<string> StyleClass { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ListStringTypeConverter")]
public IList`1<string> class { get; public set; }
    private IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.Classes { get; }
    [EditorBrowsableAttribute("1")]
public NavigationProxy NavigationProxy { get; }
    private static NavigableElement();
    public INavigation get_Navigation();
    internal void set_Navigation(INavigation value);
    public sealed virtual Style get_Style();
    public void set_Style(Style value);
    public IList`1<string> get_StyleClass();
    public void set_StyleClass(IList`1<string> value);
    public IList`1<string> get_class();
    public void set_class(IList`1<string> value);
    private sealed virtual override IList`1<string> Xamarin.Forms.StyleSheets.IStyleSelectable.get_Classes();
    public sealed virtual NavigationProxy get_NavigationProxy();
    protected virtual void OnParentSet();
}
public class Xamarin.Forms.NavigationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    public Page Page { get; private set; }
    public NavigationEventArgs(Page page);
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(Page value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._NavigationPageRenderer")]
public class Xamarin.Forms.NavigationPage : Page {
    public static BindableProperty BackButtonTitleProperty;
    public static BindableProperty HasNavigationBarProperty;
    public static BindableProperty HasBackButtonProperty;
    [ObsoleteAttribute("TintProperty is obsolete as of version 1.2.0. Please use BarBackgroundColorProperty and BarTextColorProperty to change NavigationPage bar color properties.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty TintProperty;
    public static BindableProperty BarBackgroundColorProperty;
    public static BindableProperty BarBackgroundProperty;
    public static BindableProperty BarTextColorProperty;
    public static BindableProperty TitleIconImageSourceProperty;
    [ObsoleteAttribute("TitleIconProperty is obsolete as of 4.0.0. Please use TitleIconImageSourceProperty instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty TitleIconProperty;
    public static BindableProperty IconColorProperty;
    public static BindableProperty TitleViewProperty;
    private static BindablePropertyKey CurrentPagePropertyKey;
    public static BindableProperty CurrentPageProperty;
    private static BindablePropertyKey RootPagePropertyKey;
    public static BindableProperty RootPageProperty;
    [CompilerGeneratedAttribute]
private Task <CurrentNavigationTask>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationEventArgs> Popped;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationEventArgs> PoppedToRoot;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationEventArgs> Pushed;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationRequestedEventArgs> InsertPageBeforeRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationRequestedEventArgs> PopRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationRequestedEventArgs> PopToRootRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationRequestedEventArgs> PushRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationRequestedEventArgs> RemovePageRequested;
    private Lazy`1<PlatformConfigurationRegistry`1<NavigationPage>> _platformConfigurationRegistry;
    public Color BarBackgroundColor { get; public set; }
    public Brush BarBackground { get; public set; }
    public Color BarTextColor { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Tint is obsolete as of version 1.2.0. Please use BarBackgroundColor and BarTextColor to change NavigationPage bar color properties.")]
public Color Tint { get; public set; }
    internal Task CurrentNavigationTask { get; internal set; }
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<Page> Pages { get; }
    [EditorBrowsableAttribute("1")]
public int StackDepth { get; }
    public Page CurrentPage { get; private set; }
    public Page RootPage { get; private set; }
    public NavigationPage(Page root);
    private static NavigationPage();
    public sealed virtual Color get_BarBackgroundColor();
    public void set_BarBackgroundColor(Color value);
    public sealed virtual Brush get_BarBackground();
    public void set_BarBackground(Brush value);
    public sealed virtual Color get_BarTextColor();
    public void set_BarTextColor(Color value);
    public Color get_Tint();
    public void set_Tint(Color value);
    [CompilerGeneratedAttribute]
internal Task get_CurrentNavigationTask();
    [CompilerGeneratedAttribute]
internal void set_CurrentNavigationTask(Task value);
    [EditorBrowsableAttribute("1")]
public sealed virtual Page Peek(int depth);
    public sealed virtual IEnumerable`1<Page> get_Pages();
    public sealed virtual int get_StackDepth();
    public sealed virtual Page get_CurrentPage();
    private void set_CurrentPage(Page value);
    public Page get_RootPage();
    private void set_RootPage(Page value);
    private static void TitleViewPropertyChanging(BindableObject bindable, object oldValue, object newValue);
    public static string GetBackButtonTitle(BindableObject page);
    public static bool GetHasBackButton(Page page);
    public static bool GetHasNavigationBar(BindableObject page);
    [ObsoleteAttribute("GetTitleIcon is obsolete as of 4.0.0. Please use GetTitleIconImageSource instead.")]
[EditorBrowsableAttribute("1")]
public static FileImageSource GetTitleIcon(BindableObject bindable);
    public static ImageSource GetTitleIconImageSource(BindableObject bindable);
    public static View GetTitleView(BindableObject bindable);
    public static Color GetIconColor(BindableObject bindable);
    public Task`1<Page> PopAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.NavigationPage/<PopAsync>d__53")]
public Task`1<Page> PopAsync(bool animated);
    [CompilerGeneratedAttribute]
public void add_Popped(EventHandler`1<NavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Popped(EventHandler`1<NavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PoppedToRoot(EventHandler`1<NavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PoppedToRoot(EventHandler`1<NavigationEventArgs> value);
    public Task PopToRootAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.NavigationPage/<PopToRootAsync>d__61")]
public Task PopToRootAsync(bool animated);
    public Task PushAsync(Page page);
    [AsyncStateMachineAttribute("Xamarin.Forms.NavigationPage/<PushAsync>d__63")]
public Task PushAsync(Page page, bool animated);
    [CompilerGeneratedAttribute]
public void add_Pushed(EventHandler`1<NavigationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Pushed(EventHandler`1<NavigationEventArgs> value);
    public static void SetBackButtonTitle(BindableObject page, string value);
    public static void SetHasBackButton(Page page, bool value);
    public static void SetHasNavigationBar(BindableObject page, bool value);
    [ObsoleteAttribute("SetTitleIcon is obsolete as of 4.0.0. Please use SetTitleIconImageSource instead.")]
[EditorBrowsableAttribute("1")]
public static void SetTitleIcon(BindableObject bindable, FileImageSource value);
    public static void SetTitleIconImageSource(BindableObject bindable, ImageSource value);
    public static void SetTitleView(BindableObject bindable, View value);
    public static void SetIconColor(BindableObject bindable, Color value);
    protected virtual bool OnBackButtonPressed();
    [CompilerGeneratedAttribute]
public sealed virtual void add_InsertPageBeforeRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_InsertPageBeforeRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [EditorBrowsableAttribute("1")]
[AsyncStateMachineAttribute("Xamarin.Forms.NavigationPage/<PopAsyncInner>d__78")]
public sealed virtual Task`1<Page> PopAsyncInner(bool animated, bool fast);
    [AsyncStateMachineAttribute("Xamarin.Forms.NavigationPage/<Xamarin-Forms-INavigationPageController-RemoveAsyncInner>d__79")]
private sealed virtual override Task`1<Page> Xamarin.Forms.INavigationPageController.RemoveAsyncInner(Page page, bool animated, bool fast);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PopRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PopRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PopToRootRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PopToRootRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PushRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PushRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovePageRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovePageRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    private void InsertPageBefore(Page page, Page before);
    [AsyncStateMachineAttribute("Xamarin.Forms.NavigationPage/<PopToRootAsyncInner>d__93")]
private Task PopToRootAsyncInner(bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.NavigationPage/<PushAsyncInner>d__94")]
private Task PushAsyncInner(Page page, bool animated);
    private void PushPage(Page page);
    private void RemovePage(Page page);
    private void SafePop();
    public sealed virtual IPlatformElementConfiguration`2<T, NavigationPage> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<NavigationPage> <.ctor>b__15_0();
}
[DebuggerDisplayAttribute("RequestDefinition = {Request}, StackRequest = {StackRequest}")]
internal class Xamarin.Forms.NavigationRequest : object {
    [CompilerGeneratedAttribute]
private WhatToDoWithTheStack <StackRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fragment>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestDefinition <Request>k__BackingField;
    public WhatToDoWithTheStack StackRequest { get; }
    public string Query { get; }
    public string Fragment { get; }
    public RequestDefinition Request { get; }
    public NavigationRequest(RequestDefinition definition, WhatToDoWithTheStack stackRequest, string query, string fragment);
    [CompilerGeneratedAttribute]
public WhatToDoWithTheStack get_StackRequest();
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public string get_Fragment();
    [CompilerGeneratedAttribute]
public RequestDefinition get_Request();
}
internal class Xamarin.Forms.NullEffect : Effect {
    protected virtual void OnAttached();
    protected virtual void OnDetached();
}
internal class Xamarin.Forms.NumericKeyboard : Keyboard {
}
internal class Xamarin.Forms.ObservableList`1 : ObservableCollection`1<T> {
    public void AddRange(IEnumerable`1<T> range);
    public void InsertRange(int index, IEnumerable`1<T> range);
    public void Move(int oldIndex, int newIndex, int count);
    public void RemoveAt(int index, int count);
    public void RemoveRange(IEnumerable`1<T> range);
    public void ReplaceRange(int startIndex, IEnumerable`1<T> items);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.ObservableWrapper`2 : object {
    private ObservableCollection`1<TTrack> _list;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public bool IsReadOnly { get; internal set; }
    public TRestrict Item { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public ObservableWrapper`2(ObservableCollection`1<TTrack> list);
    public sealed virtual void Add(TRestrict item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TRestrict item);
    public sealed virtual void CopyTo(TRestrict[] array, int destIndex);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
internal void set_IsReadOnly(bool value);
    public sealed virtual bool Remove(TRestrict item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TRestrict> GetEnumerator();
    public sealed virtual int IndexOf(TRestrict value);
    public sealed virtual void Insert(int index, TRestrict item);
    public sealed virtual TRestrict get_Item(int index);
    public sealed virtual void set_Item(int index, TRestrict value);
    public sealed virtual void RemoveAt(int index);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void ListOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private int ToInnerIndex(int outterIndex);
    private int ToOuterIndex(int innerIndex);
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
[ContentPropertyAttribute("Value")]
public class Xamarin.Forms.On : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [TypeConverterAttribute("Xamarin.Forms.ListStringTypeConverter")]
public IList`1<string> Platform { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(IList`1<string> value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class Xamarin.Forms.OnIdiom`1 : object {
    private T _phone;
    private T _tablet;
    private T _desktop;
    private T _tV;
    private T _watch;
    private T _default;
    private bool _isPhoneSet;
    private bool _isTabletSet;
    private bool _isDesktopSet;
    private bool _isTVSet;
    private bool _isWatchSet;
    private bool _isDefaultSet;
    public T Phone { get; public set; }
    public T Tablet { get; public set; }
    public T Desktop { get; public set; }
    public T TV { get; public set; }
    public T Watch { get; public set; }
    public T Default { get; public set; }
    public T get_Phone();
    public void set_Phone(T value);
    public T get_Tablet();
    public void set_Tablet(T value);
    public T get_Desktop();
    public void set_Desktop(T value);
    public T get_TV();
    public void set_TV(T value);
    public T get_Watch();
    public void set_Watch(T value);
    public T get_Default();
    public void set_Default(T value);
    public static T op_Implicit(OnIdiom`1<T> onIdiom);
}
[ContentPropertyAttribute("Platforms")]
public class Xamarin.Forms.OnPlatform`1 : object {
    private bool useLegacyFallback;
    private T android;
    private T ios;
    private T winPhone;
    private bool hasDefault;
    private T default;
    [CompilerGeneratedAttribute]
private IList`1<On> <Platforms>k__BackingField;
    private static IValueConverterProvider s_valueConverter;
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public T Android { get; public set; }
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public T iOS { get; public set; }
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public T WinPhone { get; public set; }
    public T Default { get; public set; }
    public IList`1<On> Platforms { get; private set; }
    private static OnPlatform`1();
    public T get_Android();
    public void set_Android(T value);
    public T get_iOS();
    public void set_iOS(T value);
    public T get_WinPhone();
    public void set_WinPhone(T value);
    public T get_Default();
    public void set_Default(T value);
    [CompilerGeneratedAttribute]
public IList`1<On> get_Platforms();
    [CompilerGeneratedAttribute]
private void set_Platforms(IList`1<On> value);
    public static T op_Implicit(OnPlatform`1<T> onPlatform);
}
[RenderWithAttribute("Xamarin.Forms.Platform._OpenGLViewRenderer")]
public class Xamarin.Forms.OpenGLView : View {
    public static BindableProperty HasRenderLoopProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<OpenGLView>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private Action`1<Rectangle> <OnDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler DisplayRequested;
    public bool HasRenderLoop { get; public set; }
    public Action`1<Rectangle> OnDisplay { get; public set; }
    private static OpenGLView();
    public bool get_HasRenderLoop();
    public void set_HasRenderLoop(bool value);
    [CompilerGeneratedAttribute]
public Action`1<Rectangle> get_OnDisplay();
    [CompilerGeneratedAttribute]
public void set_OnDisplay(Action`1<Rectangle> value);
    public void Display();
    [CompilerGeneratedAttribute]
public sealed virtual void add_DisplayRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DisplayRequested(EventHandler value);
    public sealed virtual IPlatformElementConfiguration`2<T, OpenGLView> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<OpenGLView> <.ctor>b__13_0();
}
public class Xamarin.Forms.OpenSwipeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private OpenSwipeItem <OpenSwipeItem>k__BackingField;
    public OpenSwipeItem OpenSwipeItem { get; public set; }
    public OpenSwipeEventArgs(OpenSwipeItem openSwipeItem);
    [CompilerGeneratedAttribute]
public OpenSwipeItem get_OpenSwipeItem();
    [CompilerGeneratedAttribute]
public void set_OpenSwipeItem(OpenSwipeItem value);
}
public enum Xamarin.Forms.OpenSwipeItem : Enum {
    public int value__;
    public static OpenSwipeItem LeftItems;
    public static OpenSwipeItem TopItems;
    public static OpenSwipeItem RightItems;
    public static OpenSwipeItem BottomItems;
}
public class Xamarin.Forms.OrientationStateTrigger : StateTriggerBase {
    public static BindableProperty OrientationProperty;
    public DeviceOrientation Orientation { get; public set; }
    private static OrientationStateTrigger();
    public DeviceOrientation get_Orientation();
    public void set_Orientation(DeviceOrientation value);
    private static void OnOrientationChanged(BindableObject bindable, object oldvalue, object newvalue);
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    private void OnInfoPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateState();
}
public enum Xamarin.Forms.OSAppTheme : Enum {
    public int value__;
    public static OSAppTheme Unspecified;
    public static OSAppTheme Light;
    public static OSAppTheme Dark;
}
internal static class Xamarin.Forms.PaddingElement : object {
    public static BindableProperty PaddingProperty;
    public static BindableProperty PaddingLeftProperty;
    public static BindableProperty PaddingTopProperty;
    public static BindableProperty PaddingRightProperty;
    public static BindableProperty PaddingBottomProperty;
    private static PaddingElement();
    private static void OnPaddingPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object PaddingDefaultValueCreator(BindableObject bindable);
    private static void OnPaddingLeftChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnPaddingTopChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnPaddingRightChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnPaddingBottomChanged(BindableObject bindable, object oldValue, object newValue);
}
[RenderWithAttribute("Xamarin.Forms.Platform._PageRenderer")]
public class Xamarin.Forms.Page : VisualElement {
    public static string BusySetSignalName;
    public static string AlertSignalName;
    public static string PromptSignalName;
    public static string ActionSheetSignalName;
    internal static BindableProperty IgnoresContainerAreaProperty;
    public static BindableProperty BackgroundImageSourceProperty;
    [ObsoleteAttribute("BackgroundImageProperty is obsolete as of 4.0.0. Please use BackgroundImageSourceProperty instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty BackgroundImageProperty;
    public static BindableProperty IsBusyProperty;
    public static BindableProperty PaddingProperty;
    public static BindableProperty TitleProperty;
    public static BindableProperty IconImageSourceProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("IconProperty is obsolete as of 4.0.0. Please use IconImageSourceProperty instead.")]
public static BindableProperty IconProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Page>> _platformConfigurationRegistry;
    private bool _allocatedFlag;
    private Rectangle _containerArea;
    private bool _containerAreaSet;
    private bool _hasAppeared;
    private ReadOnlyCollection`1<Element> _logicalChildren;
    private View _titleView;
    private List`1<Action> _pendingActions;
    [CompilerGeneratedAttribute]
private IList`1<ToolbarItem> <ToolbarItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<Element> <InternalChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler LayoutChanged;
    [CompilerGeneratedAttribute]
private EventHandler Appearing;
    [CompilerGeneratedAttribute]
private EventHandler Disappearing;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BackgroundImage is obsolete as of 4.0.0. Please use BackgroundImageSource instead.")]
public string BackgroundImage { get; public set; }
    public ImageSource BackgroundImageSource { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Icon is obsolete as of 4.0.0. Please use IconImageSource instead.")]
public FileImageSource Icon { get; public set; }
    public ImageSource IconImageSource { get; public set; }
    public bool IsBusy { get; public set; }
    public Thickness Padding { get; public set; }
    public string Title { get; public set; }
    public IList`1<ToolbarItem> ToolbarItems { get; internal set; }
    [EditorBrowsableAttribute("1")]
public Rectangle ContainerArea { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IgnoresContainerArea { get; public set; }
    [EditorBrowsableAttribute("1")]
public ObservableCollection`1<Element> InternalChildren { get; }
    internal IEnumerable`1<Element> ChildrenNotDrawnByThisElement { get; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    private static Page();
    public string get_BackgroundImage();
    public void set_BackgroundImage(string value);
    public ImageSource get_BackgroundImageSource();
    public void set_BackgroundImageSource(ImageSource value);
    public FileImageSource get_Icon();
    public void set_Icon(FileImageSource value);
    public ImageSource get_IconImageSource();
    public void set_IconImageSource(ImageSource value);
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    public sealed virtual Thickness get_Padding();
    public void set_Padding(Thickness value);
    private sealed virtual override Thickness Xamarin.Forms.IPaddingElement.PaddingDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.IPaddingElement.OnPaddingPropertyChanged(Thickness oldValue, Thickness newValue);
    public string get_Title();
    public void set_Title(string value);
    [CompilerGeneratedAttribute]
public IList`1<ToolbarItem> get_ToolbarItems();
    [CompilerGeneratedAttribute]
internal void set_ToolbarItems(IList`1<ToolbarItem> value);
    public sealed virtual Rectangle get_ContainerArea();
    public sealed virtual void set_ContainerArea(Rectangle value);
    public sealed virtual bool get_IgnoresContainerArea();
    public sealed virtual void set_IgnoresContainerArea(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ObservableCollection`1<Element> get_InternalChildren();
    [IteratorStateMachineAttribute("Xamarin.Forms.Page/<get_ChildrenNotDrawnByThisElement>d__58")]
internal virtual IEnumerable`1<Element> get_ChildrenNotDrawnByThisElement();
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void add_LayoutChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LayoutChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Appearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Appearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Disappearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disappearing(EventHandler value);
    public Task`1<string> DisplayActionSheet(string title, string cancel, string destruction, String[] buttons);
    public Task DisplayAlert(string title, string message, string cancel);
    public Task`1<bool> DisplayAlert(string title, string message, string accept, string cancel);
    [ObsoleteAttribute("DisplayPromptAsync overload is obsolete as of version 4.5.0 and is no longer supported.")]
[EditorBrowsableAttribute("1")]
public Task`1<string> DisplayPromptAsync(string title, string message, string accept, string cancel, string placeholder, int maxLength, Keyboard keyboard);
    public Task`1<string> DisplayPromptAsync(string title, string message, string accept, string cancel, string placeholder, int maxLength, Keyboard keyboard, string initialValue);
    internal virtual void OnIsPlatformEnabledChanged();
    public void ForceLayout();
    public bool SendBackButtonPressed();
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual void OnAppearing();
    protected virtual bool OnBackButtonPressed();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnChildMeasureInvalidated(object sender, EventArgs e);
    protected virtual void OnDisappearing();
    protected virtual void OnParentSet();
    protected virtual void OnSizeAllocated(double width, double height);
    protected void UpdateChildrenLayout();
    internal virtual void OnChildMeasureInvalidated(VisualElement child, InvalidationTrigger trigger);
    internal void OnAppearing(Action action);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendAppearing();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendDisappearing();
    private Application FindApplication(Element element);
    private void InternalChildrenOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnInternalAdded(VisualElement view);
    private void OnPageBusyChanged();
    private void OnToolbarItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private bool ShouldLayoutChildren();
    public sealed virtual IPlatformElementConfiguration`2<T, Page> On();
    internal void SetTitleView(View oldTitleView, View newTitleView);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Page> <.ctor>b__20_0();
    [CompilerGeneratedAttribute]
private void <SendAppearing>b__89_0();
}
public class Xamarin.Forms.PanGestureRecognizer : GestureRecognizer {
    public static BindableProperty TouchPointsProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PanUpdatedEventArgs> PanUpdated;
    public int TouchPoints { get; public set; }
    private static PanGestureRecognizer();
    public int get_TouchPoints();
    public void set_TouchPoints(int value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPan(Element sender, double totalX, double totalY, int gestureId);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPanCanceled(Element sender, int gestureId);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPanCompleted(Element sender, int gestureId);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPanStarted(Element sender, int gestureId);
    [CompilerGeneratedAttribute]
public void add_PanUpdated(EventHandler`1<PanUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PanUpdated(EventHandler`1<PanUpdatedEventArgs> value);
}
public class Xamarin.Forms.PanUpdatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <GestureId>k__BackingField;
    [CompilerGeneratedAttribute]
private GestureStatus <StatusType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalY>k__BackingField;
    public int GestureId { get; }
    public GestureStatus StatusType { get; }
    public double TotalX { get; }
    public double TotalY { get; }
    public PanUpdatedEventArgs(GestureStatus type, int gestureId, double totalx, double totaly);
    public PanUpdatedEventArgs(GestureStatus type, int gestureId);
    [CompilerGeneratedAttribute]
public int get_GestureId();
    [CompilerGeneratedAttribute]
public GestureStatus get_StatusType();
    [CompilerGeneratedAttribute]
public double get_TotalX();
    [CompilerGeneratedAttribute]
public double get_TotalY();
}
[AttributeUsageAttribute("2048")]
internal class Xamarin.Forms.ParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ParameterAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[RenderWithAttribute("Xamarin.Forms.Platform._PickerRenderer")]
public class Xamarin.Forms.Picker : View {
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty TitleProperty;
    public static BindableProperty TitleColorProperty;
    public static BindableProperty SelectedIndexProperty;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty HorizontalTextAlignmentProperty;
    public static BindableProperty VerticalTextAlignmentProperty;
    public static BindableProperty TextTransformProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Picker>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private IList`1<string> <Items>k__BackingField;
    private BindingBase _itemDisplayBinding;
    [CompilerGeneratedAttribute]
private EventHandler SelectedIndexChanged;
    private static BindableProperty s_displayProperty;
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public TextTransform TextTransform { get; public set; }
    public IList`1<string> Items { get; }
    public IList ItemsSource { get; public set; }
    public int SelectedIndex { get; public set; }
    public object SelectedItem { get; public set; }
    public Color TextColor { get; public set; }
    public double CharacterSpacing { get; public set; }
    public string Title { get; public set; }
    public Color TitleColor { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public BindingBase ItemDisplayBinding { get; public set; }
    private static Picker();
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    public virtual string UpdateFormsText(string source, TextTransform textTransform);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Items();
    public IList get_ItemsSource();
    public void set_ItemsSource(IList value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public void set_VerticalTextAlignment(TextAlignment value);
    public BindingBase get_ItemDisplayBinding();
    public void set_ItemDisplayBinding(BindingBase value);
    [CompilerGeneratedAttribute]
public void add_SelectedIndexChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectedIndexChanged(EventHandler value);
    private string GetDisplayMember(object item);
    private static object CoerceSelectedIndex(BindableObject bindable, object value);
    private void OnItemDisplayBindingChanged(BindingBase oldValue, BindingBase newValue);
    private void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static void OnItemsSourceChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnItemsSourceChanged(IList oldValue, IList newValue);
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddItems(NotifyCollectionChangedEventArgs e);
    private void RemoveItems(NotifyCollectionChangedEventArgs e);
    private void ResetItems();
    private static void OnSelectedIndexChanged(object bindable, object oldValue, object newValue);
    private static void OnSelectedItemChanged(BindableObject bindable, object oldValue, object newValue);
    private void UpdateSelectedIndex(object selectedItem);
    private void UpdateSelectedItem(int index);
    public sealed virtual IPlatformElementConfiguration`2<T, Picker> On();
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.ITextAlignmentElement.OnHorizontalTextAlignmentPropertyChanged(TextAlignment oldValue, TextAlignment newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Picker> <.ctor>b__14_0();
}
public class Xamarin.Forms.PinchGestureRecognizer : GestureRecognizer {
    [CompilerGeneratedAttribute]
private bool <IsPinching>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<PinchGestureUpdatedEventArgs> PinchUpdated;
    [EditorBrowsableAttribute("1")]
public bool IsPinching { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPinching();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsPinching(bool value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPinch(Element sender, double delta, Point currentScalePoint);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPinchCanceled(Element sender);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPinchEnded(Element sender);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendPinchStarted(Element sender, Point initialScalePoint);
    [CompilerGeneratedAttribute]
public void add_PinchUpdated(EventHandler`1<PinchGestureUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PinchUpdated(EventHandler`1<PinchGestureUpdatedEventArgs> value);
}
public class Xamarin.Forms.PinchGestureUpdatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <ScaleOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private GestureStatus <Status>k__BackingField;
    public double Scale { get; }
    public Point ScaleOrigin { get; }
    public GestureStatus Status { get; }
    public PinchGestureUpdatedEventArgs(GestureStatus status, double scale, Point origin);
    public PinchGestureUpdatedEventArgs(GestureStatus status);
    [CompilerGeneratedAttribute]
public double get_Scale();
    [CompilerGeneratedAttribute]
public Point get_ScaleOrigin();
    [CompilerGeneratedAttribute]
public GestureStatus get_Status();
}
internal static class Xamarin.Forms.PlaceholderElement : object {
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty PlaceholderColorProperty;
    private static PlaceholderElement();
}
public class Xamarin.Forms.PlatformConfiguration.Android : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application : object {
    public static BindableProperty SendDisappearingEventOnPauseProperty;
    public static BindableProperty SendAppearingEventOnResumeProperty;
    public static BindableProperty ShouldPreserveKeyboardOnResumeProperty;
    private static Application();
    public static bool GetSendDisappearingEventOnPause(BindableObject element);
    public static void SetSendDisappearingEventOnPause(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetSendDisappearingEventOnPause(IPlatformElementConfiguration`2<Android, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Application> SendDisappearingEventOnPause(IPlatformElementConfiguration`2<Android, Application> config, bool value);
    public static bool GetSendAppearingEventOnResume(BindableObject element);
    public static void SetSendAppearingEventOnResume(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetSendAppearingEventOnResume(IPlatformElementConfiguration`2<Android, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Application> SendAppearingEventOnResume(IPlatformElementConfiguration`2<Android, Application> config, bool value);
    public static bool GetShouldPreserveKeyboardOnResume(BindableObject element);
    public static void SetShouldPreserveKeyboardOnResume(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetShouldPreserveKeyboardOnResume(IPlatformElementConfiguration`2<Android, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Application> ShouldPreserveKeyboardOnResume(IPlatformElementConfiguration`2<Android, Application> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage : object {
    public static BindableProperty BarHeightProperty;
    private static NavigationPage();
    public static int GetBarHeight(BindableObject element);
    public static void SetBarHeight(BindableObject element, int value);
    [ExtensionAttribute]
public static int GetBarHeight(IPlatformElementConfiguration`2<Android, NavigationPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, NavigationPage> SetBarHeight(IPlatformElementConfiguration`2<Android, NavigationPage> config, int value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application : object {
    public static BindableProperty WindowSoftInputModeAdjustProperty;
    private static Application();
    public static WindowSoftInputModeAdjust GetWindowSoftInputModeAdjust(BindableObject element);
    public static void SetWindowSoftInputModeAdjust(BindableObject element, WindowSoftInputModeAdjust value);
    [ExtensionAttribute]
public static WindowSoftInputModeAdjust GetWindowSoftInputModeAdjust(IPlatformElementConfiguration`2<Android, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Application> UseWindowSoftInputModeAdjust(IPlatformElementConfiguration`2<Android, Application> config, WindowSoftInputModeAdjust value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button : object {
    public static BindableProperty UseDefaultPaddingProperty;
    public static BindableProperty UseDefaultShadowProperty;
    private static Button();
    public static bool GetUseDefaultPadding(BindableObject element);
    public static void SetUseDefaultPadding(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool UseDefaultPadding(IPlatformElementConfiguration`2<Android, Button> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Button> SetUseDefaultPadding(IPlatformElementConfiguration`2<Android, Button> config, bool value);
    public static bool GetUseDefaultShadow(BindableObject element);
    public static void SetUseDefaultShadow(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool UseDefaultShadow(IPlatformElementConfiguration`2<Android, Button> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Button> SetUseDefaultShadow(IPlatformElementConfiguration`2<Android, Button> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry : object {
    public static BindableProperty ImeOptionsProperty;
    private static Entry();
    public static ImeFlags GetImeOptions(BindableObject element);
    public static void SetImeOptions(BindableObject element, ImeFlags value);
    [ExtensionAttribute]
public static ImeFlags ImeOptions(IPlatformElementConfiguration`2<Android, Entry> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Entry> SetImeOptions(IPlatformElementConfiguration`2<Android, Entry> config, ImeFlags value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton : object {
    public static BindableProperty IsShadowEnabledProperty;
    public static BindableProperty ShadowColorProperty;
    public static BindableProperty ShadowRadiusProperty;
    public static BindableProperty ShadowOffsetProperty;
    private static ImageButton();
    public static bool GetIsShadowEnabled(BindableObject element);
    public static void SetIsShadowEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetIsShadowEnabled(IPlatformElementConfiguration`2<Android, ImageButton> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, ImageButton> SetIsShadowEnabled(IPlatformElementConfiguration`2<Android, ImageButton> config, bool value);
    public static Color GetShadowColor(BindableObject element);
    public static void SetShadowColor(BindableObject element, Color value);
    [ExtensionAttribute]
public static Color GetShadowColor(IPlatformElementConfiguration`2<Android, ImageButton> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, ImageButton> SetShadowColor(IPlatformElementConfiguration`2<Android, ImageButton> config, Color value);
    public static double GetShadowRadius(BindableObject element);
    public static void SetShadowRadius(BindableObject element, double value);
    [ExtensionAttribute]
public static double GetShadowRadius(IPlatformElementConfiguration`2<Android, ImageButton> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, ImageButton> SetShadowRadius(IPlatformElementConfiguration`2<Android, ImageButton> config, double value);
    public static Size GetShadowOffset(BindableObject element);
    public static void SetShadowOffset(BindableObject element, Size value);
    [ExtensionAttribute]
public static Size GetShadowOffset(IPlatformElementConfiguration`2<Android, ImageButton> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, ImageButton> SetShadowOffset(IPlatformElementConfiguration`2<Android, ImageButton> config, Size value);
}
public enum Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags : Enum {
    public int value__;
    public static ImeFlags Default;
    public static ImeFlags None;
    public static ImeFlags Go;
    public static ImeFlags Search;
    public static ImeFlags Send;
    public static ImeFlags Next;
    public static ImeFlags Done;
    public static ImeFlags Previous;
    public static ImeFlags ImeMaskAction;
    public static ImeFlags NoPersonalizedLearning;
    public static ImeFlags NoFullscreen;
    public static ImeFlags NoExtractUi;
    public static ImeFlags NoAccessoryAction;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView : object {
    public static BindableProperty IsFastScrollEnabledProperty;
    private static ListView();
    public static bool GetIsFastScrollEnabled(BindableObject element);
    public static void SetIsFastScrollEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool IsFastScrollEnabled(IPlatformElementConfiguration`2<Android, ListView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, ListView> SetIsFastScrollEnabled(IPlatformElementConfiguration`2<Android, ListView> config, bool value);
}
public enum Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling : Enum {
    public int value__;
    public static MixedContentHandling AlwaysAllow;
    public static MixedContentHandling NeverAllow;
    public static MixedContentHandling CompatibilityMode;
}
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ShellItem : object {
}
public enum Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode : Enum {
    public int value__;
    public static SwipeTransitionMode Reveal;
    public static SwipeTransitionMode Drag;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView : object {
    public static BindableProperty SwipeTransitionModeProperty;
    private static SwipeView();
    public static SwipeTransitionMode GetSwipeTransitionMode(BindableObject element);
    public static void SetSwipeTransitionMode(BindableObject element, SwipeTransitionMode value);
    [ExtensionAttribute]
public static SwipeTransitionMode GetSwipeTransitionMode(IPlatformElementConfiguration`2<Android, SwipeView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, SwipeView> SetSwipeTransitionMode(IPlatformElementConfiguration`2<Android, SwipeView> config, SwipeTransitionMode value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage : object {
    public static BindableProperty IsSwipePagingEnabledProperty;
    public static BindableProperty IsSmoothScrollEnabledProperty;
    public static BindableProperty OffscreenPageLimitProperty;
    public static BindableProperty ToolbarPlacementProperty;
    [ObsoleteAttribute("BarItemColor is obsolete as of version 4.0. Please use TabbedPage.UnselectedTabColor instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty BarItemColorProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BarSelectedItemColor is obsolete as of version 4.0. Please use TabbedPage.SelectedTabColor instead.")]
public static BindableProperty BarSelectedItemColorProperty;
    private static TabbedPage();
    public static bool GetIsSwipePagingEnabled(BindableObject element);
    public static void SetIsSwipePagingEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool IsSwipePagingEnabled(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> SetIsSwipePagingEnabled(IPlatformElementConfiguration`2<Android, TabbedPage> config, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> EnableSwipePaging(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> DisableSwipePaging(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    public static bool GetIsSmoothScrollEnabled(BindableObject element);
    public static void SetIsSmoothScrollEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool IsSmoothScrollEnabled(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> SetIsSmoothScrollEnabled(IPlatformElementConfiguration`2<Android, TabbedPage> config, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> EnableSmoothScroll(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> DisableSmoothScroll(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    public static int GetOffscreenPageLimit(BindableObject element);
    public static void SetOffscreenPageLimit(BindableObject element, int value);
    [ExtensionAttribute]
public static int OffscreenPageLimit(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> SetOffscreenPageLimit(IPlatformElementConfiguration`2<Android, TabbedPage> config, int value);
    public static ToolbarPlacement GetToolbarPlacement(BindableObject element);
    public static void SetToolbarPlacement(BindableObject element, ToolbarPlacement value);
    [ExtensionAttribute]
public static ToolbarPlacement GetToolbarPlacement(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> SetToolbarPlacement(IPlatformElementConfiguration`2<Android, TabbedPage> config, ToolbarPlacement value);
    public static int GetMaxItemCount(BindableObject element);
    [ExtensionAttribute]
public static int GetMaxItemCount(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BarItemColor is obsolete as of version 4.0. Please use TabbedPage.UnselectedTabColor instead.")]
public static Color GetBarItemColor(BindableObject element);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BarItemColor is obsolete as of version 4.0. Please use TabbedPage.UnselectedTabColor instead.")]
public static void SetBarItemColor(BindableObject element, Color value);
    [ExtensionAttribute]
[ObsoleteAttribute("BarItemColor is obsolete as of version 4.0. Please use TabbedPage.UnselectedTabColor instead.")]
[EditorBrowsableAttribute("1")]
public static Color GetBarItemColor(IPlatformElementConfiguration`2<Android, TabbedPage> config);
    [ObsoleteAttribute("BarItemColor is obsolete as of version 4.0. Please use TabbedPage.UnselectedTabColor instead.")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IPlatformElementConfiguration`2<Android, TabbedPage> SetBarItemColor(IPlatformElementConfiguration`2<Android, TabbedPage> config, Color value);
    [ObsoleteAttribute("BarSelectedItemColor is obsolete as of version 4.0. Please use TabbedPage.SelectedTabColor instead.")]
[EditorBrowsableAttribute("1")]
public static Color GetBarSelectedItemColor(BindableObject element);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BarSelectedItemColor is obsolete as of version 4.0. Please use TabbedPage.SelectedTabColor instead.")]
public static void SetBarSelectedItemColor(BindableObject element, Color value);
    [ObsoleteAttribute("BarSelectedItemColor is obsolete as of version 4.0. Please use TabbedPage.SelectedTabColor instead.")]
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, TabbedPage> SetBarSelectedItemColor(IPlatformElementConfiguration`2<Android, TabbedPage> config, Color value);
    [ObsoleteAttribute("BarSelectedItemColor is obsolete as of version 4.0. Please use TabbedPage.SelectedTabColor instead.")]
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static Color GetBarSelectedItemColor(IPlatformElementConfiguration`2<Android, TabbedPage> config);
}
public enum Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement : Enum {
    public int value__;
    public static ToolbarPlacement Default;
    public static ToolbarPlacement Top;
    public static ToolbarPlacement Bottom;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell : object {
    public static BindableProperty IsContextActionsLegacyModeEnabledProperty;
    private static ViewCell();
    private static void OnIsContextActionsLegacyModeEnabledPropertyChanged(BindableObject element, object oldValue, object newValue);
    public static bool GetIsContextActionsLegacyModeEnabled(BindableObject element);
    public static void SetIsContextActionsLegacyModeEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetIsContextActionsLegacyModeEnabled(IPlatformElementConfiguration`2<Android, Cell> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, Cell> SetIsContextActionsLegacyModeEnabled(IPlatformElementConfiguration`2<Android, Cell> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement : object {
    public static BindableProperty ElevationProperty;
    public static BindableProperty IsLegacyColorModeEnabledProperty;
    private static VisualElement();
    public static Nullable`1<float> GetElevation(VisualElement element);
    public static void SetElevation(VisualElement element, Nullable`1<float> value);
    [ExtensionAttribute]
public static Nullable`1<float> GetElevation(IPlatformElementConfiguration`2<Android, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, VisualElement> SetElevation(IPlatformElementConfiguration`2<Android, VisualElement> config, Nullable`1<float> value);
    public static bool GetIsLegacyColorModeEnabled(BindableObject element);
    public static void SetIsLegacyColorModeEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetIsLegacyColorModeEnabled(IPlatformElementConfiguration`2<Android, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, VisualElement> SetIsLegacyColorModeEnabled(IPlatformElementConfiguration`2<Android, VisualElement> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView : object {
    public static BindableProperty MixedContentModeProperty;
    public static BindableProperty EnableZoomControlsProperty;
    public static BindableProperty DisplayZoomControlsProperty;
    private static WebView();
    public static MixedContentHandling GetMixedContentMode(BindableObject element);
    public static void SetMixedContentMode(BindableObject element, MixedContentHandling value);
    [ExtensionAttribute]
public static MixedContentHandling MixedContentMode(IPlatformElementConfiguration`2<Android, WebView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, WebView> SetMixedContentMode(IPlatformElementConfiguration`2<Android, WebView> config, MixedContentHandling value);
    public static bool GetEnableZoomControls(WebView element);
    public static void SetEnableZoomControls(WebView element, bool value);
    [ExtensionAttribute]
public static void EnableZoomControls(IPlatformElementConfiguration`2<Android, WebView> config, bool value);
    [ExtensionAttribute]
public static bool ZoomControlsEnabled(IPlatformElementConfiguration`2<Android, WebView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, WebView> SetEnableZoomControls(IPlatformElementConfiguration`2<Android, WebView> config, bool value);
    public static bool GetDisplayZoomControls(WebView element);
    public static void SetDisplayZoomControls(WebView element, bool value);
    [ExtensionAttribute]
public static void DisplayZoomControls(IPlatformElementConfiguration`2<Android, WebView> config, bool value);
    [ExtensionAttribute]
public static bool ZoomControlsDisplayed(IPlatformElementConfiguration`2<Android, WebView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Android, WebView> SetDisplayZoomControls(IPlatformElementConfiguration`2<Android, WebView> config, bool value);
}
public enum Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust : Enum {
    public int value__;
    public static WindowSoftInputModeAdjust Pan;
    public static WindowSoftInputModeAdjust Resize;
    public static WindowSoftInputModeAdjust Unspecified;
}
public class Xamarin.Forms.PlatformConfiguration.GTK : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView : object {
    public static BindableProperty HasCornerRadiusProperty;
    private static BoxView();
    public static bool GetHasCornerRadius(BindableObject element);
    public static void SetHasCornerRadius(BindableObject element, bool tabPosition);
    [ExtensionAttribute]
public static bool GetHasCornerRadius(IPlatformElementConfiguration`2<GTK, BoxView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<GTK, BoxView> SetHasCornerRadius(IPlatformElementConfiguration`2<GTK, BoxView> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage : object {
    public static BindableProperty BackButtonIconProperty;
    private static NavigationPage();
    public static string GetBackButtonIcon(BindableObject element);
    public static void SetBackButtonIcon(BindableObject element, string backButtonIcon);
    [ExtensionAttribute]
public static string GetBackButtonIcon(IPlatformElementConfiguration`2<GTK, NavigationPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<GTK, NavigationPage> SetBackButtonIcon(IPlatformElementConfiguration`2<GTK, NavigationPage> config, string value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage : object {
    public static BindableProperty TabPositionProperty;
    private static TabbedPage();
    public static TabPosition GetTabPosition(BindableObject element);
    public static void SetTabPosition(BindableObject element, TabPosition tabPosition);
    [ExtensionAttribute]
public static TabPosition GetTabPosition(IPlatformElementConfiguration`2<GTK, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<GTK, TabbedPage> SetTabPosition(IPlatformElementConfiguration`2<GTK, TabbedPage> config, TabPosition value);
}
public enum Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition : Enum {
    public int value__;
    public static TabPosition Default;
    public static TabPosition Top;
    public static TabPosition Bottom;
}
public class Xamarin.Forms.PlatformConfiguration.iOS : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application : object {
    public static BindableProperty PanGestureRecognizerShouldRecognizeSimultaneouslyProperty;
    public static BindableProperty HandleControlUpdatesOnMainThreadProperty;
    public static BindableProperty EnableAccessibilityScalingForNamedFontSizesProperty;
    private static Application();
    public static bool GetPanGestureRecognizerShouldRecognizeSimultaneously(BindableObject element);
    public static void SetPanGestureRecognizerShouldRecognizeSimultaneously(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetPanGestureRecognizerShouldRecognizeSimultaneously(IPlatformElementConfiguration`2<iOS, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Application> SetPanGestureRecognizerShouldRecognizeSimultaneously(IPlatformElementConfiguration`2<iOS, Application> config, bool value);
    public static bool GetHandleControlUpdatesOnMainThread(BindableObject element);
    public static void SetHandleControlUpdatesOnMainThread(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetHandleControlUpdatesOnMainThread(IPlatformElementConfiguration`2<iOS, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Application> SetHandleControlUpdatesOnMainThread(IPlatformElementConfiguration`2<iOS, Application> config, bool value);
    public static bool GetEnableAccessibilityScalingForNamedFontSizes(BindableObject element);
    public static void SetEnableAccessibilityScalingForNamedFontSizes(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetEnableAccessibilityScalingForNamedFontSizes(IPlatformElementConfiguration`2<iOS, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Application> SetEnableAccessibilityScalingForNamedFontSizes(IPlatformElementConfiguration`2<iOS, Application> config, bool value);
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle : Enum {
    public int value__;
    public static BlurEffectStyle None;
    public static BlurEffectStyle ExtraLight;
    public static BlurEffectStyle Light;
    public static BlurEffectStyle Dark;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell : object {
    public static BindableProperty DefaultBackgroundColorProperty;
    private static Cell();
    public static Color GetDefaultBackgroundColor(BindableObject element);
    public static void SetDefaultBackgroundColor(BindableObject element, Color value);
    [ExtensionAttribute]
public static Color DefaultBackgroundColor(IPlatformElementConfiguration`2<iOS, Cell> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Cell> SetDefaultBackgroundColor(IPlatformElementConfiguration`2<iOS, Cell> config, Color value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker : object {
    public static BindableProperty UpdateModeProperty;
    private static DatePicker();
    public static UpdateMode GetUpdateMode(BindableObject element);
    public static void SetUpdateMode(BindableObject element, UpdateMode value);
    [ExtensionAttribute]
public static UpdateMode UpdateMode(IPlatformElementConfiguration`2<iOS, DatePicker> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, DatePicker> SetUpdateMode(IPlatformElementConfiguration`2<iOS, DatePicker> config, UpdateMode value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry : object {
    public static BindableProperty AdjustsFontSizeToFitWidthProperty;
    public static BindableProperty CursorColorProperty;
    private static Entry();
    public static bool GetAdjustsFontSizeToFitWidth(BindableObject element);
    public static void SetAdjustsFontSizeToFitWidth(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool AdjustsFontSizeToFitWidth(IPlatformElementConfiguration`2<iOS, Entry> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Entry> SetAdjustsFontSizeToFitWidth(IPlatformElementConfiguration`2<iOS, Entry> config, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Entry> EnableAdjustsFontSizeToFitWidth(IPlatformElementConfiguration`2<iOS, Entry> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Entry> DisableAdjustsFontSizeToFitWidth(IPlatformElementConfiguration`2<iOS, Entry> config);
    public static Color GetCursorColor(BindableObject element);
    public static void SetCursorColor(BindableObject element, Color value);
    [ExtensionAttribute]
public static Color GetCursorColor(IPlatformElementConfiguration`2<iOS, Entry> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Entry> SetCursorColor(IPlatformElementConfiguration`2<iOS, Entry> config, Color value);
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle : Enum {
    public int value__;
    public static GroupHeaderStyle Plain;
    public static GroupHeaderStyle Grouped;
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode : Enum {
    public int value__;
    public static LargeTitleDisplayMode Automatic;
    public static LargeTitleDisplayMode Always;
    public static LargeTitleDisplayMode Never;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView : object {
    public static BindableProperty SeparatorStyleProperty;
    public static BindableProperty GroupHeaderStyleProperty;
    public static BindableProperty RowAnimationsEnabledProperty;
    private static ListView();
    public static SeparatorStyle GetSeparatorStyle(BindableObject element);
    public static void SetSeparatorStyle(BindableObject element, SeparatorStyle value);
    [ExtensionAttribute]
public static SeparatorStyle GetSeparatorStyle(IPlatformElementConfiguration`2<iOS, ListView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, ListView> SetSeparatorStyle(IPlatformElementConfiguration`2<iOS, ListView> config, SeparatorStyle value);
    public static GroupHeaderStyle GetGroupHeaderStyle(BindableObject element);
    public static void SetGroupHeaderStyle(BindableObject element, GroupHeaderStyle value);
    [ExtensionAttribute]
public static GroupHeaderStyle GetGroupHeaderStyle(IPlatformElementConfiguration`2<iOS, ListView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, ListView> SetGroupHeaderStyle(IPlatformElementConfiguration`2<iOS, ListView> config, GroupHeaderStyle value);
    public static bool GetRowAnimationsEnabled(BindableObject element);
    public static void SetRowAnimationsEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, ListView> SetRowAnimationsEnabled(IPlatformElementConfiguration`2<iOS, ListView> config, bool value);
    [ExtensionAttribute]
public static bool RowAnimationsEnabled(IPlatformElementConfiguration`2<iOS, ListView> config);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage : object {
    public static BindableProperty ApplyShadowProperty;
    private static MasterDetailPage();
    public static bool GetApplyShadow(BindableObject element);
    public static void SetApplyShadow(BindableObject element, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, MasterDetailPage> SetApplyShadow(IPlatformElementConfiguration`2<iOS, MasterDetailPage> config, bool value);
    [ExtensionAttribute]
public static bool GetApplyShadow(IPlatformElementConfiguration`2<iOS, MasterDetailPage> config);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage : object {
    public static BindableProperty IsNavigationBarTranslucentProperty;
    public static BindableProperty StatusBarTextColorModeProperty;
    public static BindableProperty PrefersLargeTitlesProperty;
    public static BindableProperty HideNavigationBarSeparatorProperty;
    private static NavigationPage();
    public static bool GetIsNavigationBarTranslucent(BindableObject element);
    public static void SetIsNavigationBarTranslucent(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool IsNavigationBarTranslucent(IPlatformElementConfiguration`2<iOS, NavigationPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, NavigationPage> SetIsNavigationBarTranslucent(IPlatformElementConfiguration`2<iOS, NavigationPage> config, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, NavigationPage> EnableTranslucentNavigationBar(IPlatformElementConfiguration`2<iOS, NavigationPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, NavigationPage> DisableTranslucentNavigationBar(IPlatformElementConfiguration`2<iOS, NavigationPage> config);
    public static StatusBarTextColorMode GetStatusBarTextColorMode(BindableObject element);
    public static void SetStatusBarTextColorMode(BindableObject element, StatusBarTextColorMode value);
    [ExtensionAttribute]
public static StatusBarTextColorMode GetStatusBarTextColorMode(IPlatformElementConfiguration`2<iOS, NavigationPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, NavigationPage> SetStatusBarTextColorMode(IPlatformElementConfiguration`2<iOS, NavigationPage> config, StatusBarTextColorMode value);
    public static bool GetPrefersLargeTitles(BindableObject element);
    public static void SetPrefersLargeTitles(BindableObject element, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, NavigationPage> SetPrefersLargeTitles(IPlatformElementConfiguration`2<iOS, NavigationPage> config, bool value);
    [ExtensionAttribute]
public static bool PrefersLargeTitles(IPlatformElementConfiguration`2<iOS, NavigationPage> config);
    public static bool GetHideNavigationBarSeparator(BindableObject element);
    public static void SetHideNavigationBarSeparator(BindableObject element, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, NavigationPage> SetHideNavigationBarSeparator(IPlatformElementConfiguration`2<iOS, NavigationPage> config, bool value);
    [ExtensionAttribute]
public static bool HideNavigationBarSeparator(IPlatformElementConfiguration`2<iOS, NavigationPage> config);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page : object {
    public static BindableProperty PrefersStatusBarHiddenProperty;
    public static BindableProperty PreferredStatusBarUpdateAnimationProperty;
    public static BindableProperty UseSafeAreaProperty;
    public static BindableProperty LargeTitleDisplayProperty;
    private static BindablePropertyKey SafeAreaInsetsPropertyKey;
    public static BindableProperty SafeAreaInsetsProperty;
    public static BindableProperty ModalPresentationStyleProperty;
    public static BindableProperty PrefersHomeIndicatorAutoHiddenProperty;
    private static Page();
    public static StatusBarHiddenMode GetPrefersStatusBarHidden(BindableObject element);
    public static void SetPrefersStatusBarHidden(BindableObject element, StatusBarHiddenMode value);
    [ExtensionAttribute]
public static StatusBarHiddenMode PrefersStatusBarHidden(IPlatformElementConfiguration`2<iOS, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Page> SetPrefersStatusBarHidden(IPlatformElementConfiguration`2<iOS, Page> config, StatusBarHiddenMode value);
    public static UIStatusBarAnimation GetPreferredStatusBarUpdateAnimation(BindableObject element);
    public static void SetPreferredStatusBarUpdateAnimation(BindableObject element, UIStatusBarAnimation value);
    [ExtensionAttribute]
public static UIStatusBarAnimation PreferredStatusBarUpdateAnimation(IPlatformElementConfiguration`2<iOS, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Page> SetPreferredStatusBarUpdateAnimation(IPlatformElementConfiguration`2<iOS, Page> config, UIStatusBarAnimation value);
    public static bool GetUseSafeArea(BindableObject element);
    public static void SetUseSafeArea(BindableObject element, bool value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Page> SetUseSafeArea(IPlatformElementConfiguration`2<iOS, Page> config, bool value);
    [ExtensionAttribute]
public static bool UsingSafeArea(IPlatformElementConfiguration`2<iOS, Page> config);
    public static LargeTitleDisplayMode GetLargeTitleDisplay(BindableObject element);
    public static void SetLargeTitleDisplay(BindableObject element, LargeTitleDisplayMode value);
    [ExtensionAttribute]
public static LargeTitleDisplayMode LargeTitleDisplay(IPlatformElementConfiguration`2<iOS, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Page> SetLargeTitleDisplay(IPlatformElementConfiguration`2<iOS, Page> config, LargeTitleDisplayMode value);
    public static Thickness GetSafeAreaInsets(BindableObject element);
    private static void SetSafeAreaInsets(BindableObject element, Thickness value);
    [ExtensionAttribute]
public static Thickness SafeAreaInsets(IPlatformElementConfiguration`2<iOS, Page> config);
    [EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Page> SetSafeAreaInsets(IPlatformElementConfiguration`2<iOS, Page> config, Thickness value);
    [ExtensionAttribute]
public static UIModalPresentationStyle ModalPresentationStyle(IPlatformElementConfiguration`2<iOS, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Page> SetModalPresentationStyle(IPlatformElementConfiguration`2<iOS, Page> config, UIModalPresentationStyle value);
    public static UIModalPresentationStyle GetModalPresentationStyle(BindableObject element);
    private static void SetModalPresentationStyle(BindableObject element, UIModalPresentationStyle value);
    public static bool GetPrefersHomeIndicatorAutoHidden(BindableObject element);
    public static void SetPrefersHomeIndicatorAutoHidden(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool PrefersHomeIndicatorAutoHidden(IPlatformElementConfiguration`2<iOS, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Page> SetPrefersHomeIndicatorAutoHidden(IPlatformElementConfiguration`2<iOS, Page> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker : object {
    public static BindableProperty UpdateModeProperty;
    private static Picker();
    public static UpdateMode GetUpdateMode(BindableObject element);
    public static void SetUpdateMode(BindableObject element, UpdateMode value);
    [ExtensionAttribute]
public static UpdateMode UpdateMode(IPlatformElementConfiguration`2<iOS, Picker> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Picker> SetUpdateMode(IPlatformElementConfiguration`2<iOS, Picker> config, UpdateMode value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView : object {
    public static BindableProperty ShouldDelayContentTouchesProperty;
    private static ScrollView();
    public static bool GetShouldDelayContentTouches(BindableObject element);
    public static void SetShouldDelayContentTouches(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool ShouldDelayContentTouches(IPlatformElementConfiguration`2<iOS, ScrollView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, ScrollView> SetShouldDelayContentTouches(IPlatformElementConfiguration`2<iOS, ScrollView> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar : object {
    public static BindableProperty SearchBarStyleProperty;
    private static SearchBar();
    public static UISearchBarStyle GetSearchBarStyle(BindableObject element);
    public static void SetSearchBarStyle(BindableObject element, UISearchBarStyle style);
    [ExtensionAttribute]
public static UISearchBarStyle GetSearchBarStyle(IPlatformElementConfiguration`2<iOS, SearchBar> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, SearchBar> SetSearchBarStyle(IPlatformElementConfiguration`2<iOS, SearchBar> config, UISearchBarStyle style);
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle : Enum {
    public int value__;
    public static SeparatorStyle Default;
    public static SeparatorStyle FullWidth;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider : object {
    public static BindableProperty UpdateOnTapProperty;
    private static Slider();
    public static bool GetUpdateOnTap(BindableObject element);
    public static void SetUpdateOnTap(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetUpdateOnTap(IPlatformElementConfiguration`2<iOS, Slider> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, Slider> SetUpdateOnTap(IPlatformElementConfiguration`2<iOS, Slider> config, bool value);
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode : Enum {
    public int value__;
    public static StatusBarHiddenMode Default;
    public static StatusBarHiddenMode True;
    public static StatusBarHiddenMode False;
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode : Enum {
    public int value__;
    public static StatusBarTextColorMode MatchNavigationBarTextLuminosity;
    public static StatusBarTextColorMode DoNotAdjust;
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode : Enum {
    public int value__;
    public static SwipeTransitionMode Reveal;
    public static SwipeTransitionMode Drag;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView : object {
    public static BindableProperty SwipeTransitionModeProperty;
    private static SwipeView();
    public static SwipeTransitionMode GetSwipeTransitionMode(BindableObject element);
    public static void SetSwipeTransitionMode(BindableObject element, SwipeTransitionMode value);
    [ExtensionAttribute]
public static SwipeTransitionMode GetSwipeTransitionMode(IPlatformElementConfiguration`2<iOS, SwipeView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, SwipeView> SetSwipeTransitionMode(IPlatformElementConfiguration`2<iOS, SwipeView> config, SwipeTransitionMode value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage : object {
    public static BindableProperty TranslucencyModeProperty;
    private static TabbedPage();
    public static TranslucencyMode GetTranslucencyMode(BindableObject element);
    public static void SetTranslucencyMode(BindableObject element, TranslucencyMode value);
    [ExtensionAttribute]
public static TranslucencyMode GetTranslucencyMode(IPlatformElementConfiguration`2<iOS, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, TabbedPage> SetTranslucencyMode(IPlatformElementConfiguration`2<iOS, TabbedPage> config, TranslucencyMode value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker : object {
    public static BindableProperty UpdateModeProperty;
    private static TimePicker();
    public static UpdateMode GetUpdateMode(BindableObject element);
    public static void SetUpdateMode(BindableObject element, UpdateMode value);
    [ExtensionAttribute]
public static UpdateMode UpdateMode(IPlatformElementConfiguration`2<iOS, TimePicker> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, TimePicker> SetUpdateMode(IPlatformElementConfiguration`2<iOS, TimePicker> config, UpdateMode value);
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode : Enum {
    public int value__;
    public static TranslucencyMode Default;
    public static TranslucencyMode Translucent;
    public static TranslucencyMode Opaque;
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle : Enum {
    public int value__;
    public static UIModalPresentationStyle FullScreen;
    public static UIModalPresentationStyle FormSheet;
    public static UIModalPresentationStyle Automatic;
    public static UIModalPresentationStyle OverFullScreen;
    public static UIModalPresentationStyle PageSheet;
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle : Enum {
    public int value__;
    public static UISearchBarStyle Default;
    public static UISearchBarStyle Prominent;
    public static UISearchBarStyle Minimal;
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation : Enum {
    public int value__;
    public static UIStatusBarAnimation None;
    public static UIStatusBarAnimation Slide;
    public static UIStatusBarAnimation Fade;
}
public enum Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode : Enum {
    public int value__;
    public static UpdateMode Immediately;
    public static UpdateMode WhenFinished;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement : object {
    public static BindableProperty BlurEffectProperty;
    public static BindableProperty IsShadowEnabledProperty;
    public static BindableProperty ShadowColorProperty;
    public static BindableProperty ShadowRadiusProperty;
    public static BindableProperty ShadowOffsetProperty;
    public static BindableProperty ShadowOpacityProperty;
    public static BindableProperty IsLegacyColorModeEnabledProperty;
    public static BindableProperty CanBecomeFirstResponderProperty;
    private static VisualElement();
    public static BlurEffectStyle GetBlurEffect(BindableObject element);
    public static void SetBlurEffect(BindableObject element, BlurEffectStyle value);
    [ExtensionAttribute]
public static BlurEffectStyle GetBlurEffect(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> UseBlurEffect(IPlatformElementConfiguration`2<iOS, VisualElement> config, BlurEffectStyle value);
    private static void OnIsShadowEnabledChanged(BindableObject bindable, object oldValue, object newValue);
    public static bool GetIsShadowEnabled(BindableObject element);
    public static void SetIsShadowEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetIsShadowEnabled(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> SetIsShadowEnabled(IPlatformElementConfiguration`2<iOS, VisualElement> config, bool value);
    public static Color GetShadowColor(BindableObject element);
    public static void SetShadowColor(BindableObject element, Color value);
    [ExtensionAttribute]
public static Color GetShadowColor(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> SetShadowColor(IPlatformElementConfiguration`2<iOS, VisualElement> config, Color value);
    public static double GetShadowRadius(BindableObject element);
    public static void SetShadowRadius(BindableObject element, double value);
    [ExtensionAttribute]
public static double GetShadowRadius(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> SetShadowRadius(IPlatformElementConfiguration`2<iOS, VisualElement> config, double value);
    public static Size GetShadowOffset(BindableObject element);
    public static void SetShadowOffset(BindableObject element, Size value);
    [ExtensionAttribute]
public static Size GetShadowOffset(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> SetShadowOffset(IPlatformElementConfiguration`2<iOS, VisualElement> config, Size value);
    public static double GetShadowOpacity(BindableObject element);
    public static void SetShadowOpacity(BindableObject element, double value);
    [ExtensionAttribute]
public static double GetShadowOpacity(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> SetShadowOpacity(IPlatformElementConfiguration`2<iOS, VisualElement> config, double value);
    public static bool GetIsLegacyColorModeEnabled(BindableObject element);
    public static void SetIsLegacyColorModeEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetIsLegacyColorModeEnabled(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> SetIsLegacyColorModeEnabled(IPlatformElementConfiguration`2<iOS, VisualElement> config, bool value);
    public static bool GetCanBecomeFirstResponder(BindableObject element);
    public static void SetCanBecomeFirstResponder(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool CanBecomeFirstResponder(IPlatformElementConfiguration`2<iOS, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<iOS, VisualElement> SetCanBecomeFirstResponder(IPlatformElementConfiguration`2<iOS, VisualElement> config, bool value);
}
public class Xamarin.Forms.PlatformConfiguration.macOS : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage : object {
    public static BindableProperty NavigationTransitionPushStyleProperty;
    public static BindableProperty NavigationTransitionPopStyleProperty;
    private static NavigationPage();
    public static NavigationTransitionStyle GetNavigationTransitionPushStyle(BindableObject element);
    public static void SetNavigationTransitionPushStyle(BindableObject element, NavigationTransitionStyle value);
    [ExtensionAttribute]
public static NavigationTransitionStyle GetNavigationTransitionPushStyle(IPlatformElementConfiguration`2<macOS, NavigationPage> config);
    public static NavigationTransitionStyle GetNavigationTransitionPopStyle(BindableObject element);
    public static void SetNavigationTransitionPopStyle(BindableObject element, NavigationTransitionStyle value);
    [ExtensionAttribute]
public static NavigationTransitionStyle GetNavigationTransitionPopStyle(IPlatformElementConfiguration`2<macOS, NavigationPage> config);
    public static void SetNavigationTransitionStyle(BindableObject element, NavigationTransitionStyle pushStyle, NavigationTransitionStyle popStyle);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<macOS, NavigationPage> SetNavigationTransitionStyle(IPlatformElementConfiguration`2<macOS, NavigationPage> config, NavigationTransitionStyle pushStyle, NavigationTransitionStyle popStyle);
}
public enum Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle : Enum {
    public int value__;
    public static NavigationTransitionStyle None;
    public static NavigationTransitionStyle Crossfade;
    public static NavigationTransitionStyle SlideUp;
    public static NavigationTransitionStyle SlideDown;
    public static NavigationTransitionStyle SlideLeft;
    public static NavigationTransitionStyle SlideRight;
    public static NavigationTransitionStyle SlideForward;
    public static NavigationTransitionStyle SlideBackward;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page : object {
    public static BindableProperty TabOrderProperty;
    private static Page();
    public static VisualElement[] GetTabOrder(BindableObject element);
    public static void SetTabOrder(BindableObject element, VisualElement[] value);
    [ExtensionAttribute]
public static VisualElement[] GetTabOrder(IPlatformElementConfiguration`2<macOS, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<macOS, Page> SetTabOrder(IPlatformElementConfiguration`2<macOS, Page> config, VisualElement[] value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage : object {
    public static BindableProperty TabsStyleProperty;
    private static TabbedPage();
    public static TabsStyle GetTabsStyle(BindableObject element);
    public static void SetTabsStyle(BindableObject element, TabsStyle value);
    [ExtensionAttribute]
public static TabsStyle GetTabsStyle(IPlatformElementConfiguration`2<macOS, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<macOS, TabbedPage> SetShowTabs(IPlatformElementConfiguration`2<macOS, TabbedPage> config, TabsStyle value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<macOS, TabbedPage> ShowTabsOnNavigation(IPlatformElementConfiguration`2<macOS, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<macOS, TabbedPage> ShowTabs(IPlatformElementConfiguration`2<macOS, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<macOS, TabbedPage> HideTabs(IPlatformElementConfiguration`2<macOS, TabbedPage> config);
}
public class Xamarin.Forms.PlatformConfiguration.Tizen : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application : object {
    public static BindableProperty UseBezelInteractionProperty;
    public static BindableProperty OverlayContentProperty;
    public static BindablePropertyKey ActiveBezelInteractionElementPropertyKey;
    private static Application();
    public static bool GetUseBezelInteraction(BindableObject element);
    public static void SetUseBezelInteraction(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetUseBezelInteraction(IPlatformElementConfiguration`2<Tizen, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Application> SetUseBezelInteraction(IPlatformElementConfiguration`2<Tizen, Application> config, bool value);
    public static View GetOverlayContent(BindableObject application);
    public static void SetOverlayContent(BindableObject application, View value);
    [ExtensionAttribute]
public static View GetOverlayContent(IPlatformElementConfiguration`2<Tizen, Application> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Application> SetOverlayContent(IPlatformElementConfiguration`2<Tizen, Application> config, View value);
    public static Element GetActiveBezelInteractionElement(BindableObject application);
    [EditorBrowsableAttribute("1")]
public static void SetActiveBezelInteractionElement(BindableObject application, Element value);
    [ExtensionAttribute]
public static Element GetActiveBezelInteractionElement(IPlatformElementConfiguration`2<Tizen, Application> config);
    [EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Application> SetActiveBezelInteractionElement(IPlatformElementConfiguration`2<Tizen, Application> config, Element value);
}
public class Xamarin.Forms.PlatformConfiguration.TizenSpecific.BufferingProgressUpdatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <Progress>k__BackingField;
    public double Progress { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(double value);
}
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.ButtonStyle : object {
    public static string Default;
    public static string Circle;
    public static string Bottom;
    public static string Text;
    public static string SelectMode;
}
public enum Xamarin.Forms.PlatformConfiguration.TizenSpecific.DisplayAspectMode : Enum {
    public int value__;
    public static DisplayAspectMode Fill;
    public static DisplayAspectMode AspectFit;
    public static DisplayAspectMode AspectFill;
    public static DisplayAspectMode OrignalSize;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry : object {
    public static BindableProperty FontWeightProperty;
    private static Entry();
    public static string GetFontWeight(BindableObject element);
    public static void SetFontWeight(BindableObject element, string weight);
    [ExtensionAttribute]
public static string GetFontWeight(IPlatformElementConfiguration`2<Tizen, Entry> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Entry> SetFontWeight(IPlatformElementConfiguration`2<Tizen, Entry> config, string weight);
}
[EditorBrowsableAttribute("1")]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.FocusDirection : object {
    public static string None;
    public static string Back;
    public static string Forward;
    public static string Up;
    public static string Down;
    public static string Right;
    public static string Left;
}
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.FontWeight : object {
    public static string None;
    public static string Normal;
    public static string Thin;
    public static string UltraLight;
    public static string Light;
    public static string Book;
    public static string Medium;
    public static string SemiBold;
    public static string Bold;
    public static string UltraBold;
    public static string Black;
    public static string ExtraBlack;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image : object {
    public static BindableProperty BlendColorProperty;
    public static BindableProperty FileProperty;
    private static Image();
    public static Color GetBlendColor(BindableObject element);
    public static void SetBlendColor(BindableObject element, Color color);
    [ExtensionAttribute]
public static Color GetBlendColor(IPlatformElementConfiguration`2<Tizen, Image> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Image> SetBlendColor(IPlatformElementConfiguration`2<Tizen, Image> config, Color color);
    public static string GetFile(BindableObject element);
    public static void SetFile(BindableObject element, string file);
    [ExtensionAttribute]
public static string GetFile(IPlatformElementConfiguration`2<Tizen, Image> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Image> SetFile(IPlatformElementConfiguration`2<Tizen, Image> config, string file);
}
public interface Xamarin.Forms.PlatformConfiguration.TizenSpecific.IMediaPlayer {
    public PlaybackState State { get; }
    public abstract virtual PlaybackState get_State();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlaybackPaused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlaybackPaused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlaybackStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlaybackStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlaybackStopped(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlaybackStopped(EventHandler value);
    public abstract virtual Task`1<bool> Start();
    public abstract virtual void Stop();
    public abstract virtual void Pause();
}
public interface Xamarin.Forms.PlatformConfiguration.TizenSpecific.IPlatformMediaPlayer {
    public bool UsesEmbeddingControls { get; public set; }
    public bool AutoPlay { get; public set; }
    public bool AutoStop { get; public set; }
    public double Volume { get; public set; }
    public bool IsMuted { get; public set; }
    public bool IsLooping { get; public set; }
    public int Position { get; }
    public int Duration { get; }
    public DisplayAspectMode AspectMode { get; public set; }
    public abstract virtual bool get_UsesEmbeddingControls();
    public abstract virtual void set_UsesEmbeddingControls(bool value);
    public abstract virtual bool get_AutoPlay();
    public abstract virtual void set_AutoPlay(bool value);
    public abstract virtual bool get_AutoStop();
    public abstract virtual void set_AutoStop(bool value);
    public abstract virtual double get_Volume();
    public abstract virtual void set_Volume(double value);
    public abstract virtual bool get_IsMuted();
    public abstract virtual void set_IsMuted(bool value);
    public abstract virtual bool get_IsLooping();
    public abstract virtual void set_IsLooping(bool value);
    public abstract virtual int get_Position();
    public abstract virtual int get_Duration();
    public abstract virtual DisplayAspectMode get_AspectMode();
    public abstract virtual void set_AspectMode(DisplayAspectMode value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlaybackCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlaybackCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlaybackStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlaybackStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlaybackPaused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlaybackPaused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PlaybackStopped(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PlaybackStopped(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UpdateStreamInfo(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UpdateStreamInfo(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BufferingProgressUpdated(EventHandler`1<BufferingProgressUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BufferingProgressUpdated(EventHandler`1<BufferingProgressUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorOccurred(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorOccurred(EventHandler value);
    public abstract virtual void SetDisplay(IVideoOutput output);
    public abstract virtual void SetSource(MediaSource source);
    public abstract virtual Task`1<bool> Start();
    public abstract virtual void Stop();
    public abstract virtual void Pause();
    public abstract virtual Task`1<int> Seek(int ms);
    public abstract virtual Task`1<Stream> GetAlbumArts();
    public abstract virtual Task`1<IDictionary`2<string, string>> GetMetadata();
    public abstract virtual Task`1<Size> GetVideoSize();
    public abstract virtual View GetEmbeddingControlView(IMediaPlayer player);
}
public interface Xamarin.Forms.PlatformConfiguration.TizenSpecific.IVideoOutput {
    public VisualElement MediaView { get; }
    public View Controller { get; public set; }
    public VideoOuputType OuputType { get; }
    public abstract virtual VisualElement get_MediaView();
    public abstract virtual View get_Controller();
    public abstract virtual void set_Controller(View value);
    public abstract virtual VideoOuputType get_OuputType();
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label : object {
    public static BindableProperty FontWeightProperty;
    private static Label();
    public static string GetFontWeight(BindableObject element);
    public static void SetFontWeight(BindableObject element, string weight);
    [ExtensionAttribute]
public static string GetFontWeight(IPlatformElementConfiguration`2<Tizen, Label> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Label> SetFontWeight(IPlatformElementConfiguration`2<Tizen, Label> config, string weight);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage : object {
    public static BindableProperty HasBreadCrumbsBarProperty;
    private static NavigationPage();
    public static bool GetHasBreadCrumbsBar(BindableObject element);
    public static void SetHasBreadCrumbsBar(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool HasBreadCrumbsBar(IPlatformElementConfiguration`2<Tizen, NavigationPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, NavigationPage> SetHasBreadCrumbsBar(IPlatformElementConfiguration`2<Tizen, NavigationPage> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page : object {
    public static BindableProperty BreadCrumbProperty;
    private static Page();
    public static string GetBreadCrumb(BindableObject page);
    public static void SetBreadCrumb(BindableObject page, string value);
    [ExtensionAttribute]
public static string GetBreadCrumb(IPlatformElementConfiguration`2<Tizen, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Page> SetBreadCrumb(IPlatformElementConfiguration`2<Tizen, Page> config, string value);
}
public enum Xamarin.Forms.PlatformConfiguration.TizenSpecific.PlaybackState : Enum {
    public int value__;
    public static PlaybackState Stopped;
    public static PlaybackState Playing;
    public static PlaybackState Paused;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar : object {
    public static BindableProperty ProgressBarPulsingStatusProperty;
    private static ProgressBar();
    public static bool GetPulsingStatus(BindableObject element);
    public static void SetPulsingStatus(BindableObject element, bool isPulsing);
    [ExtensionAttribute]
public static bool GetPulsingStatus(IPlatformElementConfiguration`2<Tizen, ProgressBar> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, ProgressBar> SetPulsingStatus(IPlatformElementConfiguration`2<Tizen, ProgressBar> config, bool isPulsing);
}
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBarStyle : object {
    public static string Default;
    public static string Pending;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch : object {
    public static BindableProperty ColorProperty;
    private static Switch();
    public static Color GetColor(BindableObject element);
    public static void SetColor(BindableObject element, Color color);
    [ExtensionAttribute]
public static Color GetColor(IPlatformElementConfiguration`2<Tizen, Switch> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, Switch> SetColor(IPlatformElementConfiguration`2<Tizen, Switch> config, Color color);
}
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.SwitchStyle : object {
    public static string CheckBox;
    public static string Toggle;
    public static string Favorite;
    public static string OnOff;
    public static string Small;
}
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.TabbedPageStyle : object {
    public static string Default;
    public static string Tabbar;
    public static string TabbarWithTitle;
}
public enum Xamarin.Forms.PlatformConfiguration.TizenSpecific.VideoOuputType : Enum {
    public int value__;
    public static VideoOuputType Overlay;
    public static VideoOuputType Buffer;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement : object {
    public static BindableProperty StyleProperty;
    public static BindableProperty IsFocusAllowedProperty;
    [EditorBrowsableAttribute("1")]
public static BindableProperty NextFocusDirectionProperty;
    public static BindableProperty NextFocusUpViewProperty;
    public static BindableProperty NextFocusDownViewProperty;
    public static BindableProperty NextFocusLeftViewProperty;
    public static BindableProperty NextFocusRightViewProperty;
    public static BindableProperty NextFocusBackViewProperty;
    public static BindableProperty NextFocusForwardViewProperty;
    public static BindableProperty ToolTipProperty;
    private static VisualElement();
    public static string GetStyle(BindableObject element);
    public static void SetStyle(BindableObject element, string value);
    [ExtensionAttribute]
public static string GetStyle(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetStyle(IPlatformElementConfiguration`2<Tizen, VisualElement> config, string value);
    public static Nullable`1<bool> IsFocusAllowed(BindableObject element);
    public static void SetFocusAllowed(BindableObject element, bool value);
    [ExtensionAttribute]
public static Nullable`1<bool> IsFocusAllowed(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetFocusAllowed(IPlatformElementConfiguration`2<Tizen, VisualElement> config, bool value);
    [EditorBrowsableAttribute("1")]
public static string GetNextFocusDirection(BindableObject element);
    [EditorBrowsableAttribute("1")]
public static void SetNextFocusDirection(BindableObject element, string value);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static string GetNextFocusDirection(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetNextFocusDirection(IPlatformElementConfiguration`2<Tizen, VisualElement> config, string value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> MoveFocusUp(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> MoveFocusDown(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> MoveFocusLeft(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> MoveFocusRight(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> MoveFocusBack(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> MoveFocusForward(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    public static View GetNextFocusUpView(BindableObject element);
    public static void SetNextFocusUpView(BindableObject element, View value);
    [ExtensionAttribute]
public static View GetNextFocusUpView(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetNextFocusUpView(IPlatformElementConfiguration`2<Tizen, VisualElement> config, View value);
    public static View GetNextFocusDownView(BindableObject element);
    public static void SetNextFocusDownView(BindableObject element, View value);
    [ExtensionAttribute]
public static View GetNextFocusDownView(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetNextFocusDownView(IPlatformElementConfiguration`2<Tizen, VisualElement> config, View value);
    public static View GetNextFocusLeftView(BindableObject element);
    public static void SetNextFocusLeftView(BindableObject element, View value);
    [ExtensionAttribute]
public static View GetNextFocusLeftView(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetNextFocusLeftView(IPlatformElementConfiguration`2<Tizen, VisualElement> config, View value);
    public static View GetNextFocusRightView(BindableObject element);
    public static void SetNextFocusRightView(BindableObject element, View value);
    [ExtensionAttribute]
public static View GetNextFocusRightView(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetNextFocusRightView(IPlatformElementConfiguration`2<Tizen, VisualElement> config, View value);
    public static View GetNextFocusBackView(BindableObject element);
    public static void SetNextFocusBackView(BindableObject element, View value);
    [ExtensionAttribute]
public static View GetNextFocusBackView(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetNextFocusBackView(IPlatformElementConfiguration`2<Tizen, VisualElement> config, View value);
    public static View GetNextFocusForwardView(BindableObject element);
    public static void SetNextFocusForwardView(BindableObject element, View value);
    [ExtensionAttribute]
public static View GetNextFocusForwardView(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetNextFocusForwardView(IPlatformElementConfiguration`2<Tizen, VisualElement> config, View value);
    private static void OnNextFocusDirectionPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    public static string GetToolTip(BindableObject element);
    public static void SetToolTip(BindableObject element, string value);
    [ExtensionAttribute]
public static string GetToolTip(IPlatformElementConfiguration`2<Tizen, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, VisualElement> SetToolTip(IPlatformElementConfiguration`2<Tizen, VisualElement> config, string value);
}
public class Xamarin.Forms.PlatformConfiguration.Windows : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application : object {
    public static BindableProperty ImageDirectoryProperty;
    private static Application();
    public static void SetImageDirectory(BindableObject element, string value);
    [ExtensionAttribute]
public static string GetImageDirectory(IPlatformElementConfiguration`2<Windows, Application> config);
    public static string GetImageDirectory(BindableObject element);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, Application> SetImageDirectory(IPlatformElementConfiguration`2<Windows, Application> config, string value);
}
public enum Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle : Enum {
    public int value__;
    public static CollapseStyle Full;
    public static CollapseStyle Partial;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView : object {
    public static BindableProperty DetectReadingOrderFromContentProperty;
    private static InputView();
    public static void SetDetectReadingOrderFromContent(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetDetectReadingOrderFromContent(IPlatformElementConfiguration`2<Windows, InputView> config);
    public static bool GetDetectReadingOrderFromContent(BindableObject element);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, InputView> SetDetectReadingOrderFromContent(IPlatformElementConfiguration`2<Windows, InputView> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label : object {
    public static BindableProperty DetectReadingOrderFromContentProperty;
    private static Label();
    public static void SetDetectReadingOrderFromContent(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetDetectReadingOrderFromContent(IPlatformElementConfiguration`2<Windows, Label> config);
    public static bool GetDetectReadingOrderFromContent(BindableObject element);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, Label> SetDetectReadingOrderFromContent(IPlatformElementConfiguration`2<Windows, Label> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView : object {
    public static BindableProperty SelectionModeProperty;
    private static ListView();
    public static ListViewSelectionMode GetSelectionMode(BindableObject element);
    public static void SetSelectionMode(BindableObject element, ListViewSelectionMode value);
    [ExtensionAttribute]
public static ListViewSelectionMode GetSelectionMode(IPlatformElementConfiguration`2<Windows, ListView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, ListView> SetSelectionMode(IPlatformElementConfiguration`2<Windows, ListView> config, ListViewSelectionMode value);
}
public enum Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode : Enum {
    public int value__;
    public static ListViewSelectionMode Inaccessible;
    public static ListViewSelectionMode Accessible;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage : object {
    public static BindableProperty CollapseStyleProperty;
    public static BindableProperty CollapsedPaneWidthProperty;
    private static MasterDetailPage();
    public static CollapseStyle GetCollapseStyle(BindableObject element);
    public static void SetCollapseStyle(BindableObject element, CollapseStyle collapseStyle);
    [ExtensionAttribute]
public static CollapseStyle GetCollapseStyle(IPlatformElementConfiguration`2<Windows, MasterDetailPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, MasterDetailPage> SetCollapseStyle(IPlatformElementConfiguration`2<Windows, MasterDetailPage> config, CollapseStyle value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, MasterDetailPage> UsePartialCollapse(IPlatformElementConfiguration`2<Windows, MasterDetailPage> config);
    public static double GetCollapsedPaneWidth(BindableObject element);
    public static void SetCollapsedPaneWidth(BindableObject element, double collapsedPaneWidth);
    [ExtensionAttribute]
public static double CollapsedPaneWidth(IPlatformElementConfiguration`2<Windows, MasterDetailPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, MasterDetailPage> CollapsedPaneWidth(IPlatformElementConfiguration`2<Windows, MasterDetailPage> config, double value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page : object {
    public static BindableProperty ToolbarPlacementProperty;
    public static BindableProperty ToolbarDynamicOverflowEnabledProperty;
    private static Page();
    public static ToolbarPlacement GetToolbarPlacement(BindableObject element);
    public static void SetToolbarPlacement(BindableObject element, ToolbarPlacement toolbarPlacement);
    [ExtensionAttribute]
public static ToolbarPlacement GetToolbarPlacement(IPlatformElementConfiguration`2<Windows, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, Page> SetToolbarPlacement(IPlatformElementConfiguration`2<Windows, Page> config, ToolbarPlacement value);
    public static bool GetToolbarDynamicOverflowEnabled(BindableObject element);
    public static void SetToolbarDynamicOverflowEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetToolbarDynamicOverflowEnabled(IPlatformElementConfiguration`2<Windows, Page> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, Page> SetToolbarDynamicOverflowEnabled(IPlatformElementConfiguration`2<Windows, Page> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView : object {
    public static BindableProperty RefreshPullDirectionProperty;
    private static RefreshView();
    public static void SetRefreshPullDirection(BindableObject element, RefreshPullDirection value);
    [ExtensionAttribute]
public static RefreshPullDirection GetRefreshPullDirection(IPlatformElementConfiguration`2<Windows, RefreshView> config);
    public static RefreshPullDirection GetRefreshPullDirection(BindableObject element);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, RefreshView> SetRefreshPullDirection(IPlatformElementConfiguration`2<Windows, RefreshView> config, RefreshPullDirection value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar : object {
    public static BindableProperty IsSpellCheckEnabledProperty;
    private static SearchBar();
    public static void SetIsSpellCheckEnabled(BindableObject element, bool value);
    public static bool GetIsSpellCheckEnabled(BindableObject element);
    [ExtensionAttribute]
public static bool GetIsSpellCheckEnabled(IPlatformElementConfiguration`2<Windows, SearchBar> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, SearchBar> SetIsSpellCheckEnabled(IPlatformElementConfiguration`2<Windows, SearchBar> config, bool value);
    [ExtensionAttribute]
public static bool IsSpellCheckEnabled(IPlatformElementConfiguration`2<Windows, SearchBar> config);
    [ExtensionAttribute]
public static void EnableSpellCheck(IPlatformElementConfiguration`2<Windows, SearchBar> config);
    [ExtensionAttribute]
public static void DisableSpellCheck(IPlatformElementConfiguration`2<Windows, SearchBar> config);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage : object {
    public static BindableProperty HeaderIconsEnabledProperty;
    public static BindableProperty HeaderIconsSizeProperty;
    private static TabbedPage();
    public static void SetHeaderIconsEnabled(BindableObject element, bool value);
    public static bool GetHeaderIconsEnabled(BindableObject element);
    [ExtensionAttribute]
public static bool GetHeaderIconsEnabled(IPlatformElementConfiguration`2<Windows, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, TabbedPage> SetHeaderIconsEnabled(IPlatformElementConfiguration`2<Windows, TabbedPage> config, bool value);
    [ExtensionAttribute]
public static bool IsHeaderIconsEnabled(IPlatformElementConfiguration`2<Windows, TabbedPage> config);
    [ExtensionAttribute]
public static void EnableHeaderIcons(IPlatformElementConfiguration`2<Windows, TabbedPage> config);
    [ExtensionAttribute]
public static void DisableHeaderIcons(IPlatformElementConfiguration`2<Windows, TabbedPage> config);
    public static void SetHeaderIconsSize(BindableObject element, Size value);
    public static Size GetHeaderIconsSize(BindableObject element);
    [ExtensionAttribute]
public static Size GetHeaderIconsSize(IPlatformElementConfiguration`2<Windows, TabbedPage> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, TabbedPage> SetHeaderIconsSize(IPlatformElementConfiguration`2<Windows, TabbedPage> config, Size value);
}
public enum Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement : Enum {
    public int value__;
    public static ToolbarPlacement Default;
    public static ToolbarPlacement Top;
    public static ToolbarPlacement Bottom;
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement : object {
    public static BindableProperty AccessKeyProperty;
    public static BindableProperty AccessKeyPlacementProperty;
    public static BindableProperty AccessKeyHorizontalOffsetProperty;
    public static BindableProperty AccessKeyVerticalOffsetProperty;
    public static BindableProperty IsLegacyColorModeEnabledProperty;
    private static VisualElement();
    public static string GetAccessKey(BindableObject element);
    public static void SetAccessKey(BindableObject element, string value);
    [ExtensionAttribute]
public static string GetAccessKey(IPlatformElementConfiguration`2<Windows, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, VisualElement> SetAccessKey(IPlatformElementConfiguration`2<Windows, VisualElement> config, string value);
    public static AccessKeyPlacement GetAccessKeyPlacement(BindableObject element);
    public static void SetAccessKeyPlacement(BindableObject element, AccessKeyPlacement value);
    [ExtensionAttribute]
public static AccessKeyPlacement GetAccessKeyPlacement(IPlatformElementConfiguration`2<Windows, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, VisualElement> SetAccessKeyPlacement(IPlatformElementConfiguration`2<Windows, VisualElement> config, AccessKeyPlacement value);
    public static double GetAccessKeyHorizontalOffset(BindableObject element);
    public static void SetAccessKeyHorizontalOffset(BindableObject element, double value);
    [ExtensionAttribute]
public static double GetAccessKeyHorizontalOffset(IPlatformElementConfiguration`2<Windows, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, VisualElement> SetAccessKeyHorizontalOffset(IPlatformElementConfiguration`2<Windows, VisualElement> config, double value);
    public static double GetAccessKeyVerticalOffset(BindableObject element);
    public static void SetAccessKeyVerticalOffset(BindableObject element, double value);
    [ExtensionAttribute]
public static double GetAccessKeyVerticalOffset(IPlatformElementConfiguration`2<Windows, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, VisualElement> SetAccessKeyVerticalOffset(IPlatformElementConfiguration`2<Windows, VisualElement> config, double value);
    public static bool GetIsLegacyColorModeEnabled(BindableObject element);
    public static void SetIsLegacyColorModeEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool GetIsLegacyColorModeEnabled(IPlatformElementConfiguration`2<Windows, VisualElement> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, VisualElement> SetIsLegacyColorModeEnabled(IPlatformElementConfiguration`2<Windows, VisualElement> config, bool value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView : object {
    public static BindableProperty IsJavaScriptAlertEnabledProperty;
    private static WebView();
    public static bool GetIsJavaScriptAlertEnabled(BindableObject element);
    public static void SetIsJavaScriptAlertEnabled(BindableObject element, bool value);
    [ExtensionAttribute]
public static bool IsJavaScriptAlertEnabled(IPlatformElementConfiguration`2<Windows, WebView> config);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, WebView> SetIsJavaScriptAlertEnabled(IPlatformElementConfiguration`2<Windows, WebView> config, bool value);
}
internal class Xamarin.Forms.PlatformConfigurationRegistry`1 : object {
    private TElement _element;
    private Dictionary`2<Type, object> _platformSpecifics;
    internal PlatformConfigurationRegistry`1(TElement element);
    public sealed virtual IPlatformElementConfiguration`2<T, TElement> On();
}
public abstract class Xamarin.Forms.PlatformEffect`2 : Effect {
    [CompilerGeneratedAttribute]
private TContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private TControl <Control>k__BackingField;
    public TContainer Container { get; internal set; }
    public TControl Control { get; internal set; }
    [CompilerGeneratedAttribute]
public TContainer get_Container();
    [CompilerGeneratedAttribute]
internal void set_Container(TContainer value);
    [EditorBrowsableAttribute("1")]
public void SetContainer(TContainer container);
    [CompilerGeneratedAttribute]
public TControl get_Control();
    [CompilerGeneratedAttribute]
internal void set_Control(TControl value);
    [EditorBrowsableAttribute("1")]
public void SetControl(TControl control);
    protected virtual void OnElementPropertyChanged(PropertyChangedEventArgs args);
    internal virtual void SendDetached();
    internal virtual void SendOnElementPropertyChanged(PropertyChangedEventArgs args);
}
[TypeConverterAttribute("Xamarin.Forms.PointTypeConverter")]
[DebuggerDisplayAttribute("X={X}, Y={Y}")]
public class Xamarin.Forms.Point : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public static Point Zero;
    public double X { get; public set; }
    public double Y { get; public set; }
    public bool IsEmpty { get; }
    public Point(double x, double y);
    public Point(Size sz);
    private static Point();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public virtual string ToString();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public Point Offset(double dx, double dy);
    public Point Round();
    public bool get_IsEmpty();
    public static Size op_Explicit(Point pt);
    public static Point op_Addition(Point pt, Size sz);
    public static Point op_Subtraction(Point pt, Size sz);
    public static bool op_Equality(Point ptA, Point ptB);
    public static bool op_Inequality(Point ptA, Point ptB);
    public double Distance(Point other);
    public void Deconstruct(Double& x, Double& y);
}
[TypeConversionAttribute("Xamarin.Forms.Point")]
public class Xamarin.Forms.PointTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.PoppedToRootEventArgs : NavigationEventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Page> <PoppedPages>k__BackingField;
    public IEnumerable`1<Page> PoppedPages { get; private set; }
    public PoppedToRootEventArgs(Page page, IEnumerable`1<Page> poppedPages);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Page> get_PoppedPages();
    [CompilerGeneratedAttribute]
private void set_PoppedPages(IEnumerable`1<Page> value);
}
public class Xamarin.Forms.PositionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <PreviousPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentPosition>k__BackingField;
    public int PreviousPosition { get; }
    public int CurrentPosition { get; }
    internal PositionChangedEventArgs(int previousPosition, int currentPosition);
    [CompilerGeneratedAttribute]
public int get_PreviousPosition();
    [CompilerGeneratedAttribute]
public int get_CurrentPosition();
}
[FlagsAttribute]
public enum Xamarin.Forms.PresentationMode : Enum {
    public int value__;
    public static PresentationMode NotAnimated;
    public static PresentationMode Animated;
    public static PresentationMode Modal;
    public static PresentationMode ModalAnimated;
    public static PresentationMode ModalNotAnimated;
}
[RenderWithAttribute("Xamarin.Forms.Platform._ProgressBarRenderer")]
public class Xamarin.Forms.ProgressBar : View {
    public static BindableProperty ProgressColorProperty;
    public static BindableProperty ProgressProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<ProgressBar>> _platformConfigurationRegistry;
    public Color ProgressColor { get; public set; }
    public double Progress { get; public set; }
    private static ProgressBar();
    protected virtual bool TabStopDefaultValueCreator();
    public Color get_ProgressColor();
    public void set_ProgressColor(Color value);
    public double get_Progress();
    public void set_Progress(double value);
    public Task`1<bool> ProgressTo(double value, UInt32 length, Easing easing);
    public sealed virtual IPlatformElementConfiguration`2<T, ProgressBar> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<ProgressBar> <.ctor>b__4_0();
}
public class Xamarin.Forms.PropertyChangingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public PropertyChangingEventArgs(string propertyName);
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
}
public class Xamarin.Forms.PropertyChangingEventHandler : MulticastDelegate {
    public PropertyChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PropertyChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PropertyChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.PassthroughValueProvider")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.PropertyCondition : Condition {
    private BindableProperty _stateProperty;
    private BindableProperty _property;
    private object _triggerValue;
    private static IValueConverterProvider s_valueConverter;
    public BindableProperty Property { get; public set; }
    public object Value { get; public set; }
    private static PropertyCondition();
    public BindableProperty get_Property();
    public void set_Property(BindableProperty value);
    public object get_Value();
    public void set_Value(object value);
    private sealed virtual override object Xamarin.Forms.Xaml.IValueProvider.ProvideValue(IServiceProvider serviceProvider);
    internal virtual bool GetState(BindableObject bindable);
    internal virtual void SetUp(BindableObject bindable);
    internal virtual void TearDown(BindableObject bindable);
    private void OnAttachedObjectPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnStatePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
private MemberInfo <set_Property>b__6_0();
    [CompilerGeneratedAttribute]
private MemberInfo <set_Value>b__9_0();
}
[AttributeUsageAttribute("4")]
public class Xamarin.Forms.QueryPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryId>k__BackingField;
    public string Name { get; }
    public string QueryId { get; }
    public QueryPropertyAttribute(string name, string queryId);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_QueryId();
}
public class Xamarin.Forms.RadialGradientBrush : GradientBrush {
    public static BindableProperty CenterProperty;
    public static BindableProperty RadiusProperty;
    public bool IsEmpty { get; }
    public Point Center { get; public set; }
    public double Radius { get; public set; }
    public RadialGradientBrush(GradientStopCollection gradientStops);
    public RadialGradientBrush(GradientStopCollection gradientStops, double radius);
    public RadialGradientBrush(GradientStopCollection gradientStops, Point center, double radius);
    private static RadialGradientBrush();
    public virtual bool get_IsEmpty();
    public Point get_Center();
    public void set_Center(Point value);
    public double get_Radius();
    public void set_Radius(double value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._RadioButtonRenderer")]
public class Xamarin.Forms.RadioButton : Button {
    private Lazy`1<PlatformConfigurationRegistry`1<RadioButton>> _platformConfigurationRegistry;
    private static Dictionary`2<string, List`1<WeakReference`1<RadioButton>>> _groupNameToElements;
    public static string IsCheckedVisualState;
    public static BindableProperty IsCheckedProperty;
    public static BindableProperty GroupNameProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<CheckedChangedEventArgs> CheckedChanged;
    private static bool isExperimentalFlagSet;
    public bool IsChecked { get; public set; }
    public string GroupName { get; public set; }
    private static RadioButton();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler`1<CheckedChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler`1<CheckedChangedEventArgs> value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal static void VerifyExperimental(string memberName, string constructorHint);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    public sealed virtual IPlatformElementConfiguration`2<T, RadioButton> On();
    protected internal virtual void ChangeVisualState();
    private void OnIsCheckedPropertyChanged(bool isChecked);
    private void OnGroupNamePropertyChanged(string oldGroupName, string newGroupName);
    private void UpdateRadioButtonGroup();
    private static void Register(RadioButton radioButton, string groupName);
    private static void Unregister(RadioButton radioButton, string groupName);
    private static void PurgeDead(List`1<WeakReference`1<RadioButton>> elements, object elementToRemove);
    private static Element GetVisualRoot(Element element);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<RadioButton> <.ctor>b__14_0();
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.ReadOnlyCastingList`2 : object {
    private IList`1<TFrom> _list;
    public int Count { get; }
    public T Item { get; }
    public ReadOnlyCastingList`2(IList`1<TFrom> list);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.ReadOnlyListAdapter : object {
    private IReadOnlyCollection`1<object> _collection;
    private IReadOnlyList`1<object> _list;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public ReadOnlyListAdapter(IReadOnlyList`1<object> list);
    public ReadOnlyListAdapter(IReadOnlyCollection`1<object> collection);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
}
[DebuggerDisplayAttribute("X={X}, Y={Y}, Width={Width}, Height={Height}")]
[TypeConverterAttribute("Xamarin.Forms.RectTypeConverter")]
public class Xamarin.Forms.Rect : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public static Rect Zero;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Top { get; }
    public double Bottom { get; }
    public double Right { get; }
    public double Left { get; }
    public bool IsEmpty { get; }
    public Size Size { get; public set; }
    public Point Location { get; public set; }
    public Point Center { get; }
    public Rect(double x, double y, double width, double height);
    public Rect(Point loc, Size sz);
    private static Rect();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public double get_Top();
    public double get_Bottom();
    public double get_Right();
    public double get_Left();
    public bool get_IsEmpty();
    public Size get_Size();
    public void set_Size(Size value);
    public Point get_Location();
    public void set_Location(Point value);
    public Point get_Center();
    public static Rect FromLTRB(double left, double top, double right, double bottom);
    public bool Equals(Rect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Rect r1, Rect r2);
    public static bool op_Inequality(Rect r1, Rect r2);
    public bool Contains(Rect rect);
    public bool Contains(Point pt);
    public bool Contains(double x, double y);
    public bool IntersectsWith(Rect r);
    public Rect Union(Rect r);
    public static Rect Union(Rect r1, Rect r2);
    public Rect Intersect(Rect r);
    public static Rect Intersect(Rect r1, Rect r2);
    public Rect Inflate(Size sz);
    public Rect Inflate(double width, double height);
    public Rect Offset(double dx, double dy);
    public Rect Offset(Point dr);
    public Rect Round();
    public void Deconstruct(Double& x, Double& y, Double& width, Double& height);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("X={X}, Y={Y}, Width={Width}, Height={Height}")]
[TypeConverterAttribute("Xamarin.Forms.RectangleTypeConverter")]
public class Xamarin.Forms.Rectangle : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public static Rectangle Zero;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Right { get; public set; }
    public double Left { get; public set; }
    public bool IsEmpty { get; }
    public Size Size { get; public set; }
    public Point Location { get; public set; }
    public Point Center { get; }
    public Rectangle(double x, double y, double width, double height);
    public Rectangle(Point loc, Size sz);
    private static Rectangle();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public virtual string ToString();
    public static Rectangle FromLTRB(double left, double top, double right, double bottom);
    public bool Equals(Rectangle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Rectangle r1, Rectangle r2);
    public static bool op_Inequality(Rectangle r1, Rectangle r2);
    public bool Contains(Rectangle rect);
    public bool Contains(Point pt);
    public bool Contains(double x, double y);
    public bool IntersectsWith(Rectangle r);
    public Rectangle Union(Rectangle r);
    public static Rectangle Union(Rectangle r1, Rectangle r2);
    public Rectangle Intersect(Rectangle r);
    public static Rectangle Intersect(Rectangle r1, Rectangle r2);
    public double get_Top();
    public void set_Top(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Left();
    public void set_Left(double value);
    public bool get_IsEmpty();
    public Size get_Size();
    public void set_Size(Size value);
    public Point get_Location();
    public void set_Location(Point value);
    public Point get_Center();
    public Rectangle Inflate(Size sz);
    public Rectangle Inflate(double width, double height);
    public Rectangle Offset(double dx, double dy);
    public Rectangle Offset(Point dr);
    public Rectangle Round();
    public void Deconstruct(Double& x, Double& y, Double& width, Double& height);
    public static Rect op_Implicit(Rectangle rectangle);
    public static Rectangle op_Implicit(Rect rect);
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.RectangleTypeConverter")]
[TypeConversionAttribute("Xamarin.Forms.Rectangle")]
public class Xamarin.Forms.RectangleTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConversionAttribute("Xamarin.Forms.Rect")]
public class Xamarin.Forms.RectTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.ReferenceTypeConverter : TypeConverter {
    private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFrom(CultureInfo culture, object value, IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFromInvariantString(string value, IServiceProvider serviceProvider);
    public virtual object ConvertFromInvariantString(string value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._RefreshViewRenderer")]
[ContentPropertyAttribute("Content")]
public class Xamarin.Forms.RefreshView : ContentView {
    private Lazy`1<PlatformConfigurationRegistry`1<RefreshView>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler Refreshing;
    public static BindableProperty IsRefreshingProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty RefreshColorProperty;
    public bool IsRefreshing { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public Color RefreshColor { get; public set; }
    private static RefreshView();
    [CompilerGeneratedAttribute]
public void add_Refreshing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Refreshing(EventHandler value);
    private static void OnIsRefreshingPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object OnIsRefreshingPropertyCoerced(BindableObject bindable, object value);
    public bool get_IsRefreshing();
    public void set_IsRefreshing(bool value);
    private static void OnCommandChanged(BindableObject bindable, object oldValue, object newValue);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    private void RefreshCommandCanExecuteChanged(object sender, EventArgs eventArgs);
    public Color get_RefreshColor();
    public void set_RefreshColor(Color value);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    public sealed virtual IPlatformElementConfiguration`2<T, RefreshView> On();
    protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<RefreshView> <.ctor>b__4_0();
}
public class Xamarin.Forms.Region : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Rectangle> <Regions>k__BackingField;
    private Thickness _inflation;
    private IReadOnlyList`1<Rectangle> Regions { get; }
    private Region(IList`1<Rectangle> positions);
    private Region(IList`1<Rectangle> positions, Thickness inflation);
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Rectangle> get_Regions();
    public static Region FromLines(Double[] lineHeights, double maxWidth, double startX, double endX, double startY);
    public bool Contains(Point pt);
    public bool Contains(double x, double y);
    public Region Deflate();
    public Region Inflate(double size);
    public Region Inflate(double left, double top, double right, double bottom);
}
internal static class Xamarin.Forms.Registrar : object {
    internal static void RegisterAll(Type[] attrTypes);
}
public class Xamarin.Forms.RelativeBindingSource : object {
    private static RelativeBindingSource _self;
    private static RelativeBindingSource _templatedParent;
    [CompilerGeneratedAttribute]
private RelativeBindingSourceMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <AncestorType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AncestorLevel>k__BackingField;
    public RelativeBindingSourceMode Mode { get; }
    public Type AncestorType { get; }
    public int AncestorLevel { get; }
    public static RelativeBindingSource Self { get; }
    public static RelativeBindingSource TemplatedParent { get; }
    public RelativeBindingSource(RelativeBindingSourceMode mode, Type ancestorType, int ancestorLevel);
    [CompilerGeneratedAttribute]
public RelativeBindingSourceMode get_Mode();
    [CompilerGeneratedAttribute]
public Type get_AncestorType();
    [CompilerGeneratedAttribute]
public int get_AncestorLevel();
    public static RelativeBindingSource get_Self();
    public static RelativeBindingSource get_TemplatedParent();
}
public enum Xamarin.Forms.RelativeBindingSourceMode : Enum {
    public int value__;
    public static RelativeBindingSourceMode TemplatedParent;
    public static RelativeBindingSourceMode Self;
    public static RelativeBindingSourceMode FindAncestor;
    public static RelativeBindingSourceMode FindAncestorBindingContext;
}
public class Xamarin.Forms.RelativeLayout : Layout`1<View> {
    public static BindableProperty XConstraintProperty;
    public static BindableProperty YConstraintProperty;
    public static BindableProperty WidthConstraintProperty;
    public static BindableProperty HeightConstraintProperty;
    public static BindableProperty BoundsConstraintProperty;
    private RelativeElementCollection _children;
    private IEnumerable`1<View> _childrenInSolveOrder;
    private Lazy`1<PlatformConfigurationRegistry`1<RelativeLayout>> _platformConfigurationRegistry;
    public IRelativeList`1<View> Children { get; }
    private IEnumerable`1<View> ChildrenInSolveOrder { get; }
    private static RelativeLayout();
    public sealed virtual IPlatformElementConfiguration`2<T, RelativeLayout> On();
    public IRelativeList`1<View> get_Children();
    private IEnumerable`1<View> get_ChildrenInSolveOrder();
    private static void ConstraintChanged(BindableObject bindable, object oldValue, object newValue);
    private void UpdateBoundsConstraint(View view);
    public static BoundsConstraint GetBoundsConstraint(BindableObject bindable);
    public static Constraint GetHeightConstraint(BindableObject bindable);
    public static Constraint GetWidthConstraint(BindableObject bindable);
    public static Constraint GetXConstraint(BindableObject bindable);
    public static Constraint GetYConstraint(BindableObject bindable);
    public static void SetBoundsConstraint(BindableObject bindable, BoundsConstraint value);
    public static void SetHeightConstraint(BindableObject bindable, Constraint value);
    public static void SetWidthConstraint(BindableObject bindable, Constraint value);
    public static void SetXConstraint(BindableObject bindable, Constraint value);
    public static void SetYConstraint(BindableObject bindable, Constraint value);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual void OnAdded(View view);
    protected virtual void OnRemoved(View view);
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    private bool CanSolveView(View view, Dictionary`2<View, bool> solveTable);
    private void CreateBoundsFromConstraints(View view, Constraint xConstraint, Constraint yConstraint, Constraint widthConstraint, Constraint heightConstraint);
    private static Rectangle SolveView(View view);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<RelativeLayout> <.ctor>b__8_0();
}
[AttributeUsageAttribute("4")]
public class Xamarin.Forms.RenderWithAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <SupportedVisuals>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type[] SupportedVisuals { get; }
    public Type Type { get; }
    public RenderWithAttribute(Type type);
    public RenderWithAttribute(Type type, Type[] supportedVisuals);
    [CompilerGeneratedAttribute]
public Type[] get_SupportedVisuals();
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[DebuggerDisplayAttribute("Full = {FullUri}, Short = {ShortUri}")]
internal class Xamarin.Forms.RequestDefinition : object {
    [CompilerGeneratedAttribute]
private Uri <FullUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GlobalRoutes>k__BackingField;
    public Uri FullUri { get; }
    public ShellItem Item { get; }
    public ShellSection Section { get; }
    public ShellContent Content { get; }
    public List`1<string> GlobalRoutes { get; }
    public RequestDefinition(Uri fullUri, ShellItem item, ShellSection section, ShellContent content, List`1<string> globalRoutes);
    public RequestDefinition(string fullUri, ShellItem item, ShellSection section, ShellContent content, List`1<string> globalRoutes);
    [CompilerGeneratedAttribute]
public Uri get_FullUri();
    [CompilerGeneratedAttribute]
public ShellItem get_Item();
    [CompilerGeneratedAttribute]
public ShellSection get_Section();
    [CompilerGeneratedAttribute]
public ShellContent get_Content();
    [CompilerGeneratedAttribute]
public List`1<string> get_GlobalRoutes();
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ResolutionGroupNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    internal string ShortName { get; private set; }
    public ResolutionGroupNameAttribute(string name);
    [CompilerGeneratedAttribute]
internal string get_ShortName();
    [CompilerGeneratedAttribute]
private void set_ShortName(string value);
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.ResourceDictionary : object {
    private static ConditionalWeakTable`2<Type, ResourceDictionary> s_instances;
    private Dictionary`2<string, object> _innerDictionary;
    private ResourceDictionary _mergedInstance;
    private Type _mergedWith;
    private Uri _source;
    private ObservableCollection`1<ResourceDictionary> _mergedDictionaries;
    [CompilerGeneratedAttribute]
private IList`1<StyleSheet> <StyleSheets>k__BackingField;
    private IList`1<ResourceDictionary> _collectionTrack;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResourcesChangedEventArgs> ValuesChanged;
    [TypeConverterAttribute("Xamarin.Forms.TypeTypeConverter")]
[ObsoleteAttribute("Use Source")]
[EditorBrowsableAttribute("1")]
public Type MergedWith { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.ResourceDictionary/RDSourceTypeConverter")]
public Uri Source { get; public set; }
    public ICollection`1<ResourceDictionary> MergedDictionaries { get; }
    internal IList`1<StyleSheet> StyleSheets { get; internal set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    internal IEnumerable`1<KeyValuePair`2<string, object>> MergedResources { get; }
    private static ResourceDictionary();
    public Type get_MergedWith();
    public void set_MergedWith(Type value);
    public Uri get_Source();
    public void set_Source(Uri value);
    [EditorBrowsableAttribute("1")]
public void SetAndLoadSource(Uri value, string resourcePath, Assembly assembly, IXmlLineInfo lineInfo);
    public ICollection`1<ResourceDictionary> get_MergedDictionaries();
    [CompilerGeneratedAttribute]
internal IList`1<StyleSheet> get_StyleSheets();
    [CompilerGeneratedAttribute]
internal void set_StyleSheets(IList`1<StyleSheet> value);
    private void StyleSheetsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void MergedDictionaries_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Item_ValuesChanged(object sender, ResourcesChangedEventArgs e);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual object get_Item(string index);
    public sealed virtual void set_Item(string index, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual ICollection`1<object> get_Values();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [IteratorStateMachineAttribute("Xamarin.Forms.ResourceDictionary/<get_MergedResources>d__45")]
internal IEnumerable`1<KeyValuePair`2<string, object>> get_MergedResources();
    public sealed virtual bool TryGetValue(string key, Object& value);
    internal bool TryGetValueAndSource(string key, Object& value, ResourceDictionary& source);
    private bool TryGetMergedDictionaryValue(string key, Object& value, ResourceDictionary& source);
    private sealed virtual override void Xamarin.Forms.Internals.IResourceDictionary.add_ValuesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Internals.IResourceDictionary.remove_ValuesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
    public void Add(Style style);
    public void Add(ResourceDictionary mergedResourceDictionary);
    public void Add(StyleSheet styleSheet);
    private void OnValueChanged(string key, object value);
    private void OnValuesChanged(KeyValuePair`2[] values);
    internal void Reload();
    [CompilerGeneratedAttribute]
private void add_ValuesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_ValuesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
    internal static void ClearCache();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.ResourcesExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, object>> GetMergedResources(IElement element);
    [ExtensionAttribute]
public static bool TryGetResource(IElement element, string key, Object& value);
}
public enum Xamarin.Forms.ReturnType : Enum {
    public int value__;
    public static ReturnType Default;
    public static ReturnType Done;
    public static ReturnType Go;
    public static ReturnType Next;
    public static ReturnType Search;
    public static ReturnType Send;
}
public abstract class Xamarin.Forms.RouteFactory : object {
    public abstract virtual Element GetOrCreate();
}
internal class Xamarin.Forms.RouteRequestBuilder : object {
    private List`1<string> _globalRouteMatches;
    private List`1<string> _matchedSegments;
    private List`1<string> _fullSegments;
    private String[] _allSegments;
    private static string _uriSeparator;
    [CompilerGeneratedAttribute]
private Shell <Shell>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellContent <Content>k__BackingField;
    public Shell Shell { get; private set; }
    public ShellItem Item { get; private set; }
    public ShellSection Section { get; private set; }
    public ShellContent Content { get; private set; }
    public object LowestChild { get; }
    public string NextSegment { get; }
    public string RemainingPath { get; }
    public String[] RemainingSegments { get; }
    public string PathNoImplicit { get; }
    public string PathFull { get; }
    public bool IsFullMatch { get; }
    public List`1<string> GlobalRouteMatches { get; }
    public List`1<string> SegmentsMatched { get; }
    public RouteRequestBuilder(string shellSegment, string userSegment, object node, String[] allSegments);
    public RouteRequestBuilder(RouteRequestBuilder builder);
    private static RouteRequestBuilder();
    [CompilerGeneratedAttribute]
public Shell get_Shell();
    [CompilerGeneratedAttribute]
private void set_Shell(Shell value);
    [CompilerGeneratedAttribute]
public ShellItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(ShellItem value);
    [CompilerGeneratedAttribute]
public ShellSection get_Section();
    [CompilerGeneratedAttribute]
private void set_Section(ShellSection value);
    [CompilerGeneratedAttribute]
public ShellContent get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(ShellContent value);
    public object get_LowestChild();
    public void AddGlobalRoute(string routeName, string segment);
    public void AddMatch(string shellSegment, string userSegment, object node);
    public string get_NextSegment();
    public string get_RemainingPath();
    public String[] get_RemainingSegments();
    private string MakeUriString(List`1<string> segments);
    public string get_PathNoImplicit();
    public string get_PathFull();
    public bool get_IsFullMatch();
    public List`1<string> get_GlobalRouteMatches();
    public List`1<string> get_SegmentsMatched();
}
public static class Xamarin.Forms.Routing : object {
    private static int s_routeCount;
    private static Dictionary`2<string, RouteFactory> s_routes;
    private static string ImplicitPrefix;
    private static string DefaultPrefix;
    private static string _pathSeparator;
    public static BindableProperty RouteProperty;
    private static Routing();
    internal static string GenerateImplicitRoute(string source);
    internal static bool IsImplicit(string source);
    internal static bool IsImplicit(BindableObject source);
    internal static bool IsDefault(string source);
    internal static bool IsDefault(BindableObject source);
    internal static bool IsUserDefined(BindableObject source);
    internal static void Clear();
    private static object CreateDefaultRoute(BindableObject bindable);
    internal static String[] GetRouteKeys();
    public static Element GetOrCreateContent(string route);
    public static string GetRoute(BindableObject obj);
    internal static string GetRoutePathIfNotImplicit(Element obj);
    internal static Uri Remove(Uri uri, bool implicitRoutes, bool defaultRoutes);
    public static string FormatRoute(List`1<string> segments);
    public static string FormatRoute(string route);
    public static void RegisterRoute(string route, RouteFactory factory);
    public static void UnRegisterRoute(string route);
    public static void RegisterRoute(string route, Type type);
    public static void SetRoute(Element obj, string value);
    private static void ValidateRoute(string route, RouteFactory routeFactory);
}
public class Xamarin.Forms.RoutingEffect : Effect {
    internal Effect Inner;
    protected RoutingEffect(string effectId);
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    internal virtual void ClearEffect();
    internal virtual void SendAttached();
    internal virtual void SendDetached();
    internal virtual void SendOnElementPropertyChanged(PropertyChangedEventArgs args);
}
public class Xamarin.Forms.RowDefinition : BindableObject {
    public static BindableProperty HeightProperty;
    [CompilerGeneratedAttribute]
private double <ActualHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler SizeChanged;
    public GridLength Height { get; public set; }
    internal double ActualHeight { get; internal set; }
    internal double MinimumHeight { get; internal set; }
    private static RowDefinition();
    public GridLength get_Height();
    public void set_Height(GridLength value);
    [CompilerGeneratedAttribute]
internal double get_ActualHeight();
    [CompilerGeneratedAttribute]
internal void set_ActualHeight(double value);
    [CompilerGeneratedAttribute]
internal double get_MinimumHeight();
    [CompilerGeneratedAttribute]
internal void set_MinimumHeight(double value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SizeChanged(EventHandler value);
    private void OnSizeChanged();
}
public class Xamarin.Forms.RowDefinitionCollection : DefinitionCollection`1<RowDefinition> {
}
[TypeConversionAttribute("Xamarin.Forms.RowDefinitionCollection")]
public class Xamarin.Forms.RowDefinitionCollectionTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public enum Xamarin.Forms.ScrollBarVisibility : Enum {
    public int value__;
    public static ScrollBarVisibility Default;
    public static ScrollBarVisibility Always;
    public static ScrollBarVisibility Never;
}
public class Xamarin.Forms.ScrolledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <ScrollX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollY>k__BackingField;
    public double ScrollX { get; private set; }
    public double ScrollY { get; private set; }
    public ScrolledEventArgs(double x, double y);
    [CompilerGeneratedAttribute]
public double get_ScrollX();
    [CompilerGeneratedAttribute]
private void set_ScrollX(double value);
    [CompilerGeneratedAttribute]
public double get_ScrollY();
    [CompilerGeneratedAttribute]
private void set_ScrollY(double value);
}
public enum Xamarin.Forms.ScrollMode : Enum {
    public int value__;
    public static ScrollMode Disabled;
    public static ScrollMode Enabled;
    public static ScrollMode Auto;
}
public enum Xamarin.Forms.ScrollOrientation : Enum {
    public int value__;
    public static ScrollOrientation Vertical;
    public static ScrollOrientation Horizontal;
    public static ScrollOrientation Both;
    public static ScrollOrientation Neither;
}
public enum Xamarin.Forms.ScrollToMode : Enum {
    public int value__;
    public static ScrollToMode Element;
    public static ScrollToMode Position;
}
public enum Xamarin.Forms.ScrollToPosition : Enum {
    public int value__;
    public static ScrollToPosition MakeVisible;
    public static ScrollToPosition Start;
    public static ScrollToPosition Center;
    public static ScrollToPosition End;
}
public class Xamarin.Forms.ScrollToRequestedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollToMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollToPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldAnimate>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public Element Element { get; private set; }
    public ScrollToMode Mode { get; private set; }
    public ScrollToPosition Position { get; private set; }
    public double ScrollX { get; private set; }
    public double ScrollY { get; private set; }
    public bool ShouldAnimate { get; private set; }
    internal object Group { get; private set; }
    private object Xamarin.Forms.ITemplatedItemsListScrollToRequestedEventArgs.Group { get; }
    internal object Item { get; private set; }
    private object Xamarin.Forms.ITemplatedItemsListScrollToRequestedEventArgs.Item { get; }
    internal ScrollToRequestedEventArgs(double scrollX, double scrollY, bool shouldAnimate);
    internal ScrollToRequestedEventArgs(Element element, ScrollToPosition position, bool shouldAnimate);
    internal ScrollToRequestedEventArgs(object item, ScrollToPosition position, bool shouldAnimate);
    internal ScrollToRequestedEventArgs(object item, object group, ScrollToPosition position, bool shouldAnimate);
    [CompilerGeneratedAttribute]
public Element get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(Element value);
    [CompilerGeneratedAttribute]
public ScrollToMode get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(ScrollToMode value);
    [CompilerGeneratedAttribute]
public ScrollToPosition get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(ScrollToPosition value);
    [CompilerGeneratedAttribute]
public double get_ScrollX();
    [CompilerGeneratedAttribute]
private void set_ScrollX(double value);
    [CompilerGeneratedAttribute]
public double get_ScrollY();
    [CompilerGeneratedAttribute]
private void set_ScrollY(double value);
    [CompilerGeneratedAttribute]
public bool get_ShouldAnimate();
    [CompilerGeneratedAttribute]
private void set_ShouldAnimate(bool value);
    [CompilerGeneratedAttribute]
internal object get_Group();
    [CompilerGeneratedAttribute]
private void set_Group(object value);
    private sealed virtual override object Xamarin.Forms.ITemplatedItemsListScrollToRequestedEventArgs.get_Group();
    [CompilerGeneratedAttribute]
internal object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
    private sealed virtual override object Xamarin.Forms.ITemplatedItemsListScrollToRequestedEventArgs.get_Item();
}
public class Xamarin.Forms.ScrollToRequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ScrollToMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollToPosition <ScrollToPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnimated>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GroupIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Group>k__BackingField;
    public ScrollToMode Mode { get; }
    public ScrollToPosition ScrollToPosition { get; }
    public bool IsAnimated { get; }
    public int Index { get; }
    public int GroupIndex { get; }
    public object Item { get; }
    public object Group { get; }
    public ScrollToRequestEventArgs(int index, int groupIndex, ScrollToPosition scrollToPosition, bool isAnimated);
    public ScrollToRequestEventArgs(object item, object group, ScrollToPosition scrollToPosition, bool isAnimated);
    [CompilerGeneratedAttribute]
public ScrollToMode get_Mode();
    [CompilerGeneratedAttribute]
public ScrollToPosition get_ScrollToPosition();
    [CompilerGeneratedAttribute]
public bool get_IsAnimated();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_GroupIndex();
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public object get_Group();
}
[ContentPropertyAttribute("Content")]
[RenderWithAttribute("Xamarin.Forms.Platform._ScrollViewRenderer")]
public class Xamarin.Forms.ScrollView : Layout {
    [CompilerGeneratedAttribute]
private EventHandler`1<ScrollToRequestedEventArgs> ScrollToRequested;
    public static BindableProperty OrientationProperty;
    private static BindablePropertyKey ScrollXPropertyKey;
    public static BindableProperty ScrollXProperty;
    private static BindablePropertyKey ScrollYPropertyKey;
    public static BindableProperty ScrollYProperty;
    private static BindablePropertyKey ContentSizePropertyKey;
    public static BindableProperty ContentSizeProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<ScrollView>> _platformConfigurationRegistry;
    public static BindableProperty HorizontalScrollBarVisibilityProperty;
    public static BindableProperty VerticalScrollBarVisibilityProperty;
    private View _content;
    private TaskCompletionSource`1<bool> _scrollCompletionSource;
    private Rectangle _layoutAreaOverride;
    [CompilerGeneratedAttribute]
private EventHandler`1<ScrolledEventArgs> Scrolled;
    [EditorBrowsableAttribute("1")]
public Rectangle LayoutAreaOverride { get; public set; }
    public View Content { get; public set; }
    public Size ContentSize { get; private set; }
    public ScrollOrientation Orientation { get; public set; }
    public double ScrollX { get; private set; }
    public double ScrollY { get; private set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    private bool Xamarin.Forms.IFlowDirectionController.ApplyEffectiveFlowDirectionToChildContainer { get; }
    private static ScrollView();
    public sealed virtual Rectangle get_LayoutAreaOverride();
    public sealed virtual void set_LayoutAreaOverride(Rectangle value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ScrollToRequested(EventHandler`1<ScrollToRequestedEventArgs> value);
    [EditorBrowsableAttribute("1")]
public sealed virtual Point GetScrollPositionForElement(VisualElement item, ScrollToPosition pos);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendScrollFinished();
    [EditorBrowsableAttribute("1")]
public sealed virtual void SetScrolledPosition(double x, double y);
    public View get_Content();
    public void set_Content(View value);
    public Size get_ContentSize();
    private void set_ContentSize(Size value);
    public ScrollOrientation get_Orientation();
    public void set_Orientation(ScrollOrientation value);
    public double get_ScrollX();
    private void set_ScrollX(double value);
    public double get_ScrollY();
    private void set_ScrollY(double value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    [CompilerGeneratedAttribute]
public void add_Scrolled(EventHandler`1<ScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(EventHandler`1<ScrolledEventArgs> value);
    public sealed virtual IPlatformElementConfiguration`2<T, ScrollView> On();
    public Task ScrollToAsync(double x, double y, bool animated);
    public Task ScrollToAsync(Element element, ScrollToPosition position, bool animated);
    private sealed virtual override bool Xamarin.Forms.IFlowDirectionController.get_ApplyEffectiveFlowDirectionToChildContainer();
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    internal virtual void ComputeConstraintForView(View view);
    private bool CheckElementBelongsToScrollViewer(Element element);
    private void CheckTaskCompletionSource();
    private double GetCoordinate(Element item, string coordinateName, double coordinate);
    private double GetMaxHeight(double height);
    private static double GetMaxHeight(double height, SizeRequest size);
    private double GetMaxWidth(double width);
    private static double GetMaxWidth(double width, SizeRequest size);
    private void OnScrollToRequested(ScrollToRequestedEventArgs e);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<ScrollView> <.ctor>b__43_0();
}
[RenderWithAttribute("Xamarin.Forms.Platform._SearchBarRenderer")]
public class Xamarin.Forms.SearchBar : InputView {
    public static BindableProperty SearchCommandProperty;
    public static BindableProperty SearchCommandParameterProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty CancelButtonColorProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty PlaceholderColorProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty HorizontalTextAlignmentProperty;
    public static BindableProperty VerticalTextAlignmentProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<SearchBar>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler SearchButtonPressed;
    public Color CancelButtonColor { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public ICommand SearchCommand { get; public set; }
    public object SearchCommandParameter { get; public set; }
    unknown bool IsEnabledCore {private set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    private static SearchBar();
    public Color get_CancelButtonColor();
    public void set_CancelButtonColor(Color value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public void set_VerticalTextAlignment(TextAlignment value);
    public ICommand get_SearchCommand();
    public void set_SearchCommand(ICommand value);
    public object get_SearchCommandParameter();
    public void set_SearchCommandParameter(object value);
    private void set_IsEnabledCore(bool value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    [CompilerGeneratedAttribute]
public void add_SearchButtonPressed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SearchButtonPressed(EventHandler value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void OnSearchButtonPressed();
    private void CommandCanExecuteChanged(object sender, EventArgs eventArgs);
    private static void OnCommandChanged(BindableObject bindable, object oldValue, object newValue);
    public sealed virtual IPlatformElementConfiguration`2<T, SearchBar> On();
    private sealed virtual override void Xamarin.Forms.ITextAlignmentElement.OnHorizontalTextAlignmentPropertyChanged(TextAlignment oldValue, TextAlignment newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<SearchBar> <.ctor>b__48_0();
}
public enum Xamarin.Forms.SearchBoxVisibility : Enum {
    public int value__;
    public static SearchBoxVisibility Hidden;
    public static SearchBoxVisibility Collapsible;
    public static SearchBoxVisibility Expanded;
}
public class Xamarin.Forms.SearchHandler : BindableObject {
    [EditorBrowsableAttribute("1")]
public static BindablePropertyKey IsFocusedPropertyKey;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Focused;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Unfocused;
    public static BindableProperty IsFocusedProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<FocusRequestArgs> FocusChangeRequested;
    public static BindableProperty KeyboardProperty;
    public static BindableProperty HorizontalTextAlignmentProperty;
    public static BindableProperty VerticalTextAlignmentProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty CancelButtonColorProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty PlaceholderColorProperty;
    public static BindableProperty TextTransformProperty;
    public static BindableProperty BackgroundColorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<ListProxyChangedEventArgs> _listProxyChanged;
    public static BindableProperty ClearIconHelpTextProperty;
    public static BindableProperty ClearIconNameProperty;
    public static BindableProperty ClearIconProperty;
    public static BindableProperty ClearPlaceholderCommandParameterProperty;
    public static BindableProperty ClearPlaceholderCommandProperty;
    public static BindableProperty ClearPlaceholderEnabledProperty;
    public static BindableProperty ClearPlaceholderHelpTextProperty;
    public static BindableProperty ClearPlaceholderIconProperty;
    public static BindableProperty ClearPlaceholderNameProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty CommandProperty;
    public static BindableProperty DisplayMemberNameProperty;
    public static BindableProperty IsSearchEnabledProperty;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty QueryIconHelpTextProperty;
    public static BindableProperty QueryIconNameProperty;
    public static BindableProperty QueryIconProperty;
    public static BindableProperty QueryProperty;
    public static BindableProperty SearchBoxVisibilityProperty;
    private static BindablePropertyKey SelectedItemPropertyKey;
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty ShowsResultsProperty;
    private ListProxy _listProxy;
    public bool IsFocused { get; }
    public Keyboard Keyboard { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public Color TextColor { get; public set; }
    public TextTransform TextTransform { get; public set; }
    public Color CancelButtonColor { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    public double CharacterSpacing { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public Color PlaceholderColor { get; public set; }
    public string Placeholder { get; public set; }
    public Color BackgroundColor { get; public set; }
    private IReadOnlyList`1<object> Xamarin.Forms.ISearchHandlerController.ListProxy { get; }
    private ListProxy ListProxy { get; private set; }
    public ImageSource ClearIcon { get; public set; }
    public string ClearIconHelpText { get; public set; }
    public string ClearIconName { get; public set; }
    public ICommand ClearPlaceholderCommand { get; public set; }
    public object ClearPlaceholderCommandParameter { get; public set; }
    public bool ClearPlaceholderEnabled { get; public set; }
    public string ClearPlaceholderHelpText { get; public set; }
    public ImageSource ClearPlaceholderIcon { get; public set; }
    public string ClearPlaceholderName { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public string DisplayMemberName { get; public set; }
    public bool IsSearchEnabled { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public string Query { get; public set; }
    public ImageSource QueryIcon { get; public set; }
    public string QueryIconHelpText { get; public set; }
    public string QueryIconName { get; public set; }
    public SearchBoxVisibility SearchBoxVisibility { get; public set; }
    public object SelectedItem { get; }
    public bool ShowsResults { get; public set; }
    unknown bool ClearPlaceholderEnabledCore {private set; }
    unknown bool IsSearchEnabledCore {private set; }
    private static SearchHandler();
    [CompilerGeneratedAttribute]
public void add_Focused(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Focused(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Unfocused(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Unfocused(EventHandler`1<EventArgs> value);
    public bool get_IsFocused();
    private static void OnIsFocusedPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    [EditorBrowsableAttribute("1")]
public void SetIsFocused(bool value);
    [CompilerGeneratedAttribute]
public void add_FocusChangeRequested(EventHandler`1<FocusRequestArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FocusChangeRequested(EventHandler`1<FocusRequestArgs> value);
    public bool Focus();
    public void Unfocus();
    protected virtual void OnFocused();
    protected virtual void OnUnfocus();
    public Keyboard get_Keyboard();
    public void set_Keyboard(Keyboard value);
    private sealed virtual override void Xamarin.Forms.ITextAlignmentElement.OnHorizontalTextAlignmentPropertyChanged(TextAlignment oldValue, TextAlignment newValue);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public void set_VerticalTextAlignment(TextAlignment value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    public virtual string UpdateFormsText(string source, TextTransform textTransform);
    public Color get_CancelButtonColor();
    public void set_CancelButtonColor(Color value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    public sealed virtual Color get_PlaceholderColor();
    public void set_PlaceholderColor(Color value);
    public sealed virtual string get_Placeholder();
    public void set_Placeholder(string value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    private sealed virtual override void Xamarin.Forms.ISearchHandlerController.add_ListProxyChanged(EventHandler`1<ListProxyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.ISearchHandlerController.remove_ListProxyChanged(EventHandler`1<ListProxyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__listProxyChanged(EventHandler`1<ListProxyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__listProxyChanged(EventHandler`1<ListProxyChangedEventArgs> value);
    private sealed virtual override IReadOnlyList`1<object> Xamarin.Forms.ISearchHandlerController.get_ListProxy();
    private ListProxy get_ListProxy();
    private void set_ListProxy(ListProxy value);
    private sealed virtual override void Xamarin.Forms.ISearchHandlerController.ClearPlaceholderClicked();
    private sealed virtual override void Xamarin.Forms.ISearchHandlerController.ItemSelected(object obj);
    private sealed virtual override void Xamarin.Forms.ISearchHandlerController.QueryConfirmed();
    public ImageSource get_ClearIcon();
    public void set_ClearIcon(ImageSource value);
    public string get_ClearIconHelpText();
    public void set_ClearIconHelpText(string value);
    public string get_ClearIconName();
    public void set_ClearIconName(string value);
    public ICommand get_ClearPlaceholderCommand();
    public void set_ClearPlaceholderCommand(ICommand value);
    public object get_ClearPlaceholderCommandParameter();
    public void set_ClearPlaceholderCommandParameter(object value);
    public bool get_ClearPlaceholderEnabled();
    public void set_ClearPlaceholderEnabled(bool value);
    public string get_ClearPlaceholderHelpText();
    public void set_ClearPlaceholderHelpText(string value);
    public ImageSource get_ClearPlaceholderIcon();
    public void set_ClearPlaceholderIcon(ImageSource value);
    public string get_ClearPlaceholderName();
    public void set_ClearPlaceholderName(string value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public string get_DisplayMemberName();
    public void set_DisplayMemberName(string value);
    public bool get_IsSearchEnabled();
    public void set_IsSearchEnabled(bool value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public string get_Query();
    public void set_Query(string value);
    public ImageSource get_QueryIcon();
    public void set_QueryIcon(ImageSource value);
    public string get_QueryIconHelpText();
    public void set_QueryIconHelpText(string value);
    public string get_QueryIconName();
    public void set_QueryIconName(string value);
    public SearchBoxVisibility get_SearchBoxVisibility();
    public void set_SearchBoxVisibility(SearchBoxVisibility value);
    public object get_SelectedItem();
    public bool get_ShowsResults();
    public void set_ShowsResults(bool value);
    private void set_ClearPlaceholderEnabledCore(bool value);
    private void set_IsSearchEnabledCore(bool value);
    protected virtual void OnClearPlaceholderClicked();
    protected virtual void OnItemSelected(object item);
    protected virtual void OnQueryChanged(string oldValue, string newValue);
    protected virtual void OnQueryConfirmed();
    private static void OnClearPlaceholderCommandChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnClearPlaceholderCommandParameterChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCommandChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCommandParameterChanged(BindableObject bindable, object oldValue, object newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private static void OnItemsSourceChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnQueryChanged(BindableObject bindable, object oldValue, object newValue);
    private void CanExecuteChanged(object sender, EventArgs e);
    private void ClearPlaceholderCanExecuteChanged(object sender, EventArgs e);
    private void OnClearPlaceholderCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void OnClearPlaceholderCommandParameterChanged();
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void OnCommandParameterChanged();
    private void UpdateAutomationProperties();
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.SeekRequested : EventArgs {
    [CompilerGeneratedAttribute]
private TimeSpan <Position>k__BackingField;
    public TimeSpan Position { get; }
    public SeekRequested(TimeSpan position);
    [CompilerGeneratedAttribute]
public TimeSpan get_Position();
}
public class Xamarin.Forms.SelectableItemsView : StructuredItemsView {
    public static BindableProperty SelectionModeProperty;
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty SelectedItemsProperty;
    public static BindableProperty SelectionChangedCommandProperty;
    public static BindableProperty SelectionChangedCommandParameterProperty;
    private static IList`1<object> s_empty;
    private bool _suppressSelectionChangeNotification;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectionChangedEventArgs> SelectionChanged;
    public object SelectedItem { get; public set; }
    public IList`1<object> SelectedItems { get; public set; }
    public ICommand SelectionChangedCommand { get; public set; }
    public object SelectionChangedCommandParameter { get; public set; }
    public SelectionMode SelectionMode { get; public set; }
    private static SelectableItemsView();
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public IList`1<object> get_SelectedItems();
    public void set_SelectedItems(IList`1<object> value);
    public ICommand get_SelectionChangedCommand();
    public void set_SelectionChangedCommand(ICommand value);
    public object get_SelectionChangedCommandParameter();
    public void set_SelectionChangedCommandParameter(object value);
    public SelectionMode get_SelectionMode();
    public void set_SelectionMode(SelectionMode value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void UpdateSelectedItems(IList`1<object> newSelection);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs args);
    private static object CoerceSelectedItems(BindableObject bindable, object value);
    private static object DefaultValueCreator(BindableObject bindable);
    private static void SelectedItemsPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    internal void SelectedItemsPropertyChanged(IList`1<object> oldSelection, IList`1<object> newSelection);
    private static void SelectionPropertyChanged(SelectableItemsView selectableItemsView, SelectionChangedEventArgs args);
    private static void SelectedItemPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void SelectionModePropertyChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.Forms.SelectedItemChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <SelectedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedItemIndex>k__BackingField;
    public object SelectedItem { get; private set; }
    public int SelectedItemIndex { get; private set; }
    [ObsoleteAttribute("This constructor is obsolete as of version 3.5. Please use SelectedItemChangedEventArgs(object selectedItem, int selectedItemIndex) instead.")]
public SelectedItemChangedEventArgs(object selectedItem);
    public SelectedItemChangedEventArgs(object selectedItem, int selectedItemIndex);
    [CompilerGeneratedAttribute]
public object get_SelectedItem();
    [CompilerGeneratedAttribute]
private void set_SelectedItem(object value);
    [CompilerGeneratedAttribute]
public int get_SelectedItemIndex();
    [CompilerGeneratedAttribute]
private void set_SelectedItemIndex(int value);
}
public class Xamarin.Forms.SelectedPositionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <SelectedPosition>k__BackingField;
    public object SelectedPosition { get; private set; }
    public SelectedPositionChangedEventArgs(int selectedPosition);
    [CompilerGeneratedAttribute]
public object get_SelectedPosition();
    [CompilerGeneratedAttribute]
private void set_SelectedPosition(object value);
}
public class Xamarin.Forms.SelectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <PreviousSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <CurrentSelection>k__BackingField;
    private static IReadOnlyList`1<object> s_empty;
    public IReadOnlyList`1<object> PreviousSelection { get; }
    public IReadOnlyList`1<object> CurrentSelection { get; }
    internal SelectionChangedEventArgs(object previousSelection, object currentSelection);
    internal SelectionChangedEventArgs(IList`1<object> previousSelection, IList`1<object> currentSelection);
    private static SelectionChangedEventArgs();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_PreviousSelection();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_CurrentSelection();
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.SelectionList : object {
    private static IList`1<object> s_empty;
    private SelectableItemsView _selectableItemsView;
    private IList`1<object> _internal;
    private IList`1<object> _shadow;
    private bool _externalChange;
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SelectionList(SelectableItemsView selectableItemsView, IList`1<object> items);
    private static SelectionList();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    public sealed virtual int IndexOf(object item);
    public sealed virtual void Insert(int index, object item);
    public sealed virtual bool Remove(object item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private List`1<object> Copy();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
}
public enum Xamarin.Forms.SelectionMode : Enum {
    public int value__;
    public static SelectionMode None;
    public static SelectionMode Single;
    public static SelectionMode Multiple;
}
internal class Xamarin.Forms.SeparatorMenuItem : BaseMenuItem {
}
public enum Xamarin.Forms.SeparatorVisibility : Enum {
    public int value__;
    public static SeparatorVisibility Default;
    public static SeparatorVisibility None;
}
[ContentPropertyAttribute("Value")]
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.SetterValueProvider")]
public class Xamarin.Forms.Setter : object {
    private ConditionalWeakTable`2<BindableObject, object> _originalValues;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string TargetName { get; public set; }
    public BindableProperty Property { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public BindableProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(BindableProperty value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    private sealed virtual override object Xamarin.Forms.Xaml.IValueProvider.ProvideValue(IServiceProvider serviceProvider);
    internal void Apply(BindableObject target, bool fromStyle);
    internal void UnApply(BindableObject target, bool fromStyle);
}
[ExtensionAttribute]
public static class Xamarin.Forms.SettersExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<Setter> setters, BindableProperty property, object value);
    [ExtensionAttribute]
public static void AddBinding(IList`1<Setter> setters, BindableProperty property, Binding binding);
    [ExtensionAttribute]
public static void AddDynamicResource(IList`1<Setter> setters, BindableProperty property, string key);
}
public class Xamarin.Forms.Shapes.ArcSegment : PathSegment {
    public static BindableProperty PointProperty;
    public static BindableProperty SizeProperty;
    public static BindableProperty RotationAngleProperty;
    public static BindableProperty SweepDirectionProperty;
    public static BindableProperty IsLargeArcProperty;
    public Point Point { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.SizeTypeConverter")]
public Size Size { get; public set; }
    public double RotationAngle { get; public set; }
    public SweepDirection SweepDirection { get; public set; }
    public bool IsLargeArc { get; public set; }
    public ArcSegment(Point point, Size size, double rotationAngle, SweepDirection sweepDirection, bool isLargeArc);
    private static ArcSegment();
    public void set_Point(Point value);
    public Point get_Point();
    public void set_Size(Size value);
    public Size get_Size();
    public void set_RotationAngle(double value);
    public double get_RotationAngle();
    public void set_SweepDirection(SweepDirection value);
    public SweepDirection get_SweepDirection();
    public void set_IsLargeArc(bool value);
    public bool get_IsLargeArc();
}
public class Xamarin.Forms.Shapes.BezierSegment : PathSegment {
    public static BindableProperty Point1Property;
    public static BindableProperty Point2Property;
    public static BindableProperty Point3Property;
    public Point Point1 { get; public set; }
    public Point Point2 { get; public set; }
    public Point Point3 { get; public set; }
    public BezierSegment(Point point1, Point point2, Point point3);
    private static BezierSegment();
    public void set_Point1(Point value);
    public Point get_Point1();
    public void set_Point2(Point value);
    public Point get_Point2();
    public void set_Point3(Point value);
    public Point get_Point3();
}
public class Xamarin.Forms.Shapes.CompositeTransform : Transform {
    public static BindableProperty CenterXProperty;
    public static BindableProperty CenterYProperty;
    public static BindableProperty ScaleXProperty;
    public static BindableProperty ScaleYProperty;
    public static BindableProperty SkewXProperty;
    public static BindableProperty SkewYProperty;
    public static BindableProperty RotationProperty;
    public static BindableProperty TranslateXProperty;
    public static BindableProperty TranslateYProperty;
    public double CenterX { get; public set; }
    public double CenterY { get; public set; }
    public double ScaleX { get; public set; }
    public double ScaleY { get; public set; }
    public double SkewX { get; public set; }
    public double SkewY { get; public set; }
    public double Rotation { get; public set; }
    public double TranslateX { get; public set; }
    public double TranslateY { get; public set; }
    private static CompositeTransform();
    public void set_CenterX(double value);
    public double get_CenterX();
    public void set_CenterY(double value);
    public double get_CenterY();
    public void set_ScaleX(double value);
    public double get_ScaleX();
    public void set_ScaleY(double value);
    public double get_ScaleY();
    public void set_SkewX(double value);
    public double get_SkewX();
    public void set_SkewY(double value);
    public double get_SkewY();
    public void set_Rotation(double value);
    public double get_Rotation();
    public void set_TranslateX(double value);
    public double get_TranslateX();
    public void set_TranslateY(double value);
    public double get_TranslateY();
    private static void OnTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnTransformPropertyChanged();
}
[RenderWithAttribute("Xamarin.Forms.Platform._EllipseRenderer")]
public class Xamarin.Forms.Shapes.Ellipse : Shape {
}
public class Xamarin.Forms.Shapes.EllipseGeometry : Geometry {
    public static BindableProperty CenterProperty;
    public static BindableProperty RadiusXProperty;
    public static BindableProperty RadiusYProperty;
    public Point Center { get; public set; }
    public double RadiusX { get; public set; }
    public double RadiusY { get; public set; }
    private static EllipseGeometry();
    public void set_Center(Point value);
    public Point get_Center();
    public void set_RadiusX(double value);
    public double get_RadiusX();
    public void set_RadiusY(double value);
    public double get_RadiusY();
}
public enum Xamarin.Forms.Shapes.FillRule : Enum {
    public int value__;
    public static FillRule EvenOdd;
    public static FillRule Nonzero;
}
public abstract class Xamarin.Forms.Shapes.Geometry : BindableObject {
}
public class Xamarin.Forms.Shapes.GeometryCollection : ObservableCollection`1<Geometry> {
}
[ContentPropertyAttribute("Children")]
public class Xamarin.Forms.Shapes.GeometryGroup : Geometry {
    public static BindableProperty ChildrenProperty;
    public static BindableProperty FillRuleProperty;
    public GeometryCollection Children { get; public set; }
    public FillRule FillRule { get; public set; }
    private static GeometryGroup();
    public void set_Children(GeometryCollection value);
    public GeometryCollection get_Children();
    public void set_FillRule(FillRule value);
    public FillRule get_FillRule();
}
public static class Xamarin.Forms.Shapes.GeometryHelper : object {
    private static List`1<Point> Points;
    private static GeometryHelper();
    public static PathGeometry FlattenGeometry(Geometry geoSrc, double tolerance);
    public static void FlattenGeometry(PathGeometry pathGeoDst, Geometry geoSrc, double tolerance, Matrix matxPrevious);
    public static void FlattenCubicBezier(List`1<Point> points, Point ptStart, Point ptCtrl1, Point ptCtrl2, Point ptEnd, double tolerance);
    public static void FlattenQuadraticBezier(List`1<Point> points, Point ptStart, Point ptCtrl, Point ptEnd, double tolerance);
    public static void FlattenArc(List`1<Point> points, Point pt1, Point pt2, double radiusX, double radiusY, double angleRotation, bool isLargeArc, bool isCounterclockwise, double tolerance);
}
[RenderWithAttribute("Xamarin.Forms.Platform._LineRenderer")]
public class Xamarin.Forms.Shapes.Line : Shape {
    public static BindableProperty X1Property;
    public static BindableProperty Y1Property;
    public static BindableProperty X2Property;
    public static BindableProperty Y2Property;
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    private static Line();
    public void set_X1(double value);
    public double get_X1();
    public void set_Y1(double value);
    public double get_Y1();
    public void set_X2(double value);
    public double get_X2();
    public void set_Y2(double value);
    public double get_Y2();
}
public class Xamarin.Forms.Shapes.LineGeometry : Geometry {
    public static BindableProperty StartPointProperty;
    public static BindableProperty EndPointProperty;
    public Point StartPoint { get; public set; }
    public Point EndPoint { get; public set; }
    private static LineGeometry();
    public void set_StartPoint(Point value);
    public Point get_StartPoint();
    public void set_EndPoint(Point value);
    public Point get_EndPoint();
}
public class Xamarin.Forms.Shapes.LineSegment : PathSegment {
    public static BindableProperty PointProperty;
    public Point Point { get; public set; }
    public LineSegment(Point point);
    private static LineSegment();
    public void set_Point(Point value);
    public Point get_Point();
}
[TypeConverterAttribute("Xamarin.Forms.Shapes.MatrixTypeConverter")]
public class Xamarin.Forms.Shapes.Matrix : ValueType {
    internal double _m11;
    internal double _m12;
    internal double _m21;
    internal double _m22;
    internal double _offsetX;
    internal double _offsetY;
    internal MatrixTypes _type;
    internal int _padding;
    private static Matrix IdentityMatrix;
    public static Matrix Identity { get; }
    public bool IsIdentity { get; }
    public double Determinant { get; }
    public bool HasInverse { get; }
    public double M11 { get; public set; }
    public double M12 { get; public set; }
    public double M21 { get; public set; }
    public double M22 { get; public set; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public Matrix(double m11, double m12, double m21, double m22, double offsetX, double offsetY);
    private static Matrix();
    public static Matrix get_Identity();
    public void SetIdentity();
    public bool get_IsIdentity();
    public static Matrix op_Multiply(Matrix trans1, Matrix trans2);
    public static Matrix Multiply(Matrix trans1, Matrix trans2);
    public void Append(Matrix matrix);
    public void Prepend(Matrix matrix);
    public void Rotate(double angle);
    public void RotatePrepend(double angle);
    public void RotateAt(double angle, double centerX, double centerY);
    public void RotateAtPrepend(double angle, double centerX, double centerY);
    public void Scale(double scaleX, double scaleY);
    public void ScalePrepend(double scaleX, double scaleY);
    public void ScaleAt(double scaleX, double scaleY, double centerX, double centerY);
    public void ScaleAtPrepend(double scaleX, double scaleY, double centerX, double centerY);
    public void Skew(double skewX, double skewY);
    public void SkewPrepend(double skewX, double skewY);
    public void Translate(double offsetX, double offsetY);
    public void TranslatePrepend(double offsetX, double offsetY);
    public Point Transform(Point point);
    public void Transform(Point[] points);
    public Vector2 Transform(Vector2 vector);
    public void Transform(Vector2[] vectors);
    public double get_Determinant();
    public bool get_HasInverse();
    public void Invert();
    public double get_M11();
    public void set_M11(double value);
    public double get_M12();
    public void set_M12(double value);
    public double get_M21();
    public void set_M21(double value);
    public double get_M22();
    public void set_M22(double value);
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    internal void MultiplyVector(Double& x, Double& y);
    internal void MultiplyPoint(Double& x, Double& y);
    internal static Matrix CreateRotationRadians(double angle);
    internal static Matrix CreateRotationRadians(double angle, double centerX, double centerY);
    internal static Matrix CreateScaling(double scaleX, double scaleY, double centerX, double centerY);
    internal static Matrix CreateScaling(double scaleX, double scaleY);
    internal static Matrix CreateSkewRadians(double skewX, double skewY);
    internal static Matrix CreateTranslation(double offsetX, double offsetY);
    private static Matrix CreateIdentity();
    private void SetMatrix(double m11, double m12, double m21, double m22, double offsetX, double offsetY, MatrixTypes type);
    private void DeriveMatrixType();
}
public class Xamarin.Forms.Shapes.MatrixTransform : Transform {
    public static BindableProperty MatrixProperty;
    public Matrix Matrix { get; public set; }
    private static MatrixTransform();
    public void set_Matrix(Matrix value);
    public Matrix get_Matrix();
    private static void OnTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnTransformPropertyChanged();
}
public class Xamarin.Forms.Shapes.MatrixTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
    internal static Matrix CreateMatrix(string value);
}
internal enum Xamarin.Forms.Shapes.MatrixTypes : Enum {
    public int value__;
    public static MatrixTypes Identity;
    public static MatrixTypes Translation;
    public static MatrixTypes Scaling;
    public static MatrixTypes Unknown;
}
internal static class Xamarin.Forms.Shapes.MatrixUtil : object {
    internal static void TransformRect(Rectangle& rect, Matrix& matrix);
    internal static void MultiplyMatrix(Matrix& matrix1, Matrix& matrix2);
    internal static void PrependOffset(Matrix& matrix, double offsetX, double offsetY);
}
[RenderWithAttribute("Xamarin.Forms.Platform._PathRenderer")]
public class Xamarin.Forms.Shapes.Path : Shape {
    public static BindableProperty DataProperty;
    public static BindableProperty RenderTransformProperty;
    [TypeConverterAttribute("Xamarin.Forms.Shapes.PathGeometryConverter")]
public Geometry Data { get; public set; }
    public Transform RenderTransform { get; public set; }
    private static Path();
    public void set_Data(Geometry value);
    public Geometry get_Data();
    public void set_RenderTransform(Transform value);
    public Transform get_RenderTransform();
    private static void OnGeometryPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnGeometryPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void OnTransformPropertyChanged(object sender, PropertyChangedEventArgs args);
}
[ContentPropertyAttribute("Segments")]
public class Xamarin.Forms.Shapes.PathFigure : BindableObject {
    public static BindableProperty SegmentsProperty;
    public static BindableProperty StartPointProperty;
    public static BindableProperty IsClosedProperty;
    public static BindableProperty IsFilledProperty;
    public PathSegmentCollection Segments { get; public set; }
    public Point StartPoint { get; public set; }
    public bool IsClosed { get; public set; }
    public bool IsFilled { get; public set; }
    private static PathFigure();
    public void set_Segments(PathSegmentCollection value);
    public PathSegmentCollection get_Segments();
    public void set_StartPoint(Point value);
    public Point get_StartPoint();
    public void set_IsClosed(bool value);
    public bool get_IsClosed();
    public void set_IsFilled(bool value);
    public bool get_IsFilled();
    public sealed virtual void BatchBegin();
    public sealed virtual void BatchCommit();
}
public class Xamarin.Forms.Shapes.PathFigureCollection : ObservableCollection`1<PathFigure> {
}
public class Xamarin.Forms.Shapes.PathFigureCollectionConverter : TypeConverter {
    private static bool AllowSign;
    private static bool AllowComma;
    private static bool _figureStarted;
    private static string _pathString;
    private static int _pathLength;
    private static int _curIndex;
    private static Point _lastStart;
    private static Point _lastPoint;
    private static Point _secondLastPoint;
    private static char _token;
    public virtual object ConvertFromInvariantString(string value);
    public static void ParseStringToPathFigureCollection(PathFigureCollection pathFigureCollection, string pathString);
    private static void ParseToPathFigureCollection(PathFigureCollection pathFigureCollection, string pathString, int startIndex);
    private static void EnsureFigure();
    private static Point Reflect();
    private static bool More();
    private static bool SkipWhiteSpace(bool allowComma);
    private static bool ReadBool();
    private static bool ReadToken();
    private static void ThrowBadToken();
    private static Point ReadPoint(char cmd, bool allowcomma);
    private static bool IsNumber(bool allowComma);
    private static double ReadNumber(bool allowComma);
    private static void SkipDigits(bool signAllowed);
}
[ContentPropertyAttribute("Figures")]
public class Xamarin.Forms.Shapes.PathGeometry : Geometry {
    public static BindableProperty FiguresProperty;
    public static BindableProperty FillRuleProperty;
    [TypeConverterAttribute("Xamarin.Forms.Shapes.PathFigureCollectionConverter")]
public PathFigureCollection Figures { get; public set; }
    public FillRule FillRule { get; public set; }
    private static PathGeometry();
    public void set_Figures(PathFigureCollection value);
    public PathFigureCollection get_Figures();
    public void set_FillRule(FillRule value);
    public FillRule get_FillRule();
}
public class Xamarin.Forms.Shapes.PathGeometryConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public abstract class Xamarin.Forms.Shapes.PathSegment : BindableObject {
    public sealed virtual void BatchBegin();
    public sealed virtual void BatchCommit();
}
public class Xamarin.Forms.Shapes.PathSegmentCollection : ObservableCollection`1<PathSegment> {
}
public enum Xamarin.Forms.Shapes.PenLineCap : Enum {
    public int value__;
    public static PenLineCap Flat;
    public static PenLineCap Square;
    public static PenLineCap Round;
}
public enum Xamarin.Forms.Shapes.PenLineJoin : Enum {
    public int value__;
    public static PenLineJoin Miter;
    public static PenLineJoin Bevel;
    public static PenLineJoin Round;
}
[TypeConverterAttribute("Xamarin.Forms.Shapes.PointCollectionConverter")]
public class Xamarin.Forms.Shapes.PointCollection : ObservableCollection`1<Point> {
}
public class Xamarin.Forms.Shapes.PointCollectionConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.Shapes.PolyBezierSegment : PathSegment {
    public static BindableProperty PointsProperty;
    public PointCollection Points { get; public set; }
    public PolyBezierSegment(PointCollection points);
    private static PolyBezierSegment();
    public void set_Points(PointCollection value);
    public PointCollection get_Points();
}
[RenderWithAttribute("Xamarin.Forms.Platform._PolygonRenderer")]
public class Xamarin.Forms.Shapes.Polygon : Shape {
    public static BindableProperty PointsProperty;
    public static BindableProperty FillRuleProperty;
    public PointCollection Points { get; public set; }
    public FillRule FillRule { get; public set; }
    private static Polygon();
    public void set_Points(PointCollection value);
    public PointCollection get_Points();
    public void set_FillRule(FillRule value);
    public FillRule get_FillRule();
}
[RenderWithAttribute("Xamarin.Forms.Platform._PolylineRenderer")]
public class Xamarin.Forms.Shapes.Polyline : Shape {
    public static BindableProperty PointsProperty;
    public static BindableProperty FillRuleProperty;
    public PointCollection Points { get; public set; }
    public FillRule FillRule { get; public set; }
    private static Polyline();
    public void set_Points(PointCollection value);
    public PointCollection get_Points();
    public void set_FillRule(FillRule value);
    public FillRule get_FillRule();
}
public class Xamarin.Forms.Shapes.PolyLineSegment : PathSegment {
    public static BindableProperty PointsProperty;
    public PointCollection Points { get; public set; }
    public PolyLineSegment(PointCollection points);
    private static PolyLineSegment();
    public void set_Points(PointCollection value);
    public PointCollection get_Points();
}
public class Xamarin.Forms.Shapes.PolyQuadraticBezierSegment : PathSegment {
    public static BindableProperty PointsProperty;
    public PointCollection Points { get; public set; }
    public PolyQuadraticBezierSegment(PointCollection points);
    private static PolyQuadraticBezierSegment();
    public void set_Points(PointCollection value);
    public PointCollection get_Points();
}
public class Xamarin.Forms.Shapes.QuadraticBezierSegment : PathSegment {
    public static BindableProperty Point1Property;
    public static BindableProperty Point2Property;
    public Point Point1 { get; public set; }
    public Point Point2 { get; public set; }
    public QuadraticBezierSegment(Point point1, Point point2);
    private static QuadraticBezierSegment();
    public void set_Point1(Point value);
    public Point get_Point1();
    public void set_Point2(Point value);
    public Point get_Point2();
}
[RenderWithAttribute("Xamarin.Forms.Platform._RectangleRenderer")]
public class Xamarin.Forms.Shapes.Rectangle : Shape {
    public static BindableProperty RadiusXProperty;
    public static BindableProperty RadiusYProperty;
    public double RadiusX { get; public set; }
    public double RadiusY { get; public set; }
    private static Rectangle();
    public void set_RadiusX(double value);
    public double get_RadiusX();
    public void set_RadiusY(double value);
    public double get_RadiusY();
}
public class Xamarin.Forms.Shapes.RectangleGeometry : Geometry {
    public static BindableProperty RectProperty;
    public Rect Rect { get; public set; }
    private static RectangleGeometry();
    public void set_Rect(Rect value);
    public Rect get_Rect();
}
public class Xamarin.Forms.Shapes.RotateTransform : Transform {
    public static BindableProperty AngleProperty;
    public static BindableProperty CenterXProperty;
    public static BindableProperty CenterYProperty;
    public double Angle { get; public set; }
    public double CenterX { get; public set; }
    public double CenterY { get; public set; }
    public RotateTransform(double angle);
    public RotateTransform(double angle, double centerX, double centerY);
    private static RotateTransform();
    public void set_Angle(double value);
    public double get_Angle();
    public void set_CenterX(double value);
    public double get_CenterX();
    public void set_CenterY(double value);
    public double get_CenterY();
    private static void OnTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnTransformPropertyChanged();
}
public class Xamarin.Forms.Shapes.ScaleTransform : Transform {
    public static BindableProperty ScaleXProperty;
    public static BindableProperty ScaleYProperty;
    public static BindableProperty CenterXProperty;
    public static BindableProperty CenterYProperty;
    public double ScaleX { get; public set; }
    public double ScaleY { get; public set; }
    public double CenterX { get; public set; }
    public double CenterY { get; public set; }
    public ScaleTransform(double scaleX, double scaleY);
    public ScaleTransform(double scaleX, double scaleY, double centerX, double centerY);
    private static ScaleTransform();
    public void set_ScaleX(double value);
    public double get_ScaleX();
    public void set_ScaleY(double value);
    public double get_ScaleY();
    public void set_CenterX(double value);
    public double get_CenterX();
    public void set_CenterY(double value);
    public double get_CenterY();
    private static void OnTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnTransformPropertyChanged();
}
public abstract class Xamarin.Forms.Shapes.Shape : View {
    public static BindableProperty FillProperty;
    public static BindableProperty StrokeProperty;
    public static BindableProperty StrokeThicknessProperty;
    public static BindableProperty StrokeDashArrayProperty;
    public static BindableProperty StrokeDashOffsetProperty;
    public static BindableProperty StrokeLineCapProperty;
    public static BindableProperty StrokeLineJoinProperty;
    public static BindableProperty StrokeMiterLimitProperty;
    public static BindableProperty AspectProperty;
    public Brush Fill { get; public set; }
    public Brush Stroke { get; public set; }
    public double StrokeThickness { get; public set; }
    public DoubleCollection StrokeDashArray { get; public set; }
    public double StrokeDashOffset { get; public set; }
    public PenLineCap StrokeLineCap { get; public set; }
    public PenLineJoin StrokeLineJoin { get; public set; }
    public double StrokeMiterLimit { get; public set; }
    public Stretch Aspect { get; public set; }
    private static Shape();
    public void set_Fill(Brush value);
    public Brush get_Fill();
    public void set_Stroke(Brush value);
    public Brush get_Stroke();
    public void set_StrokeThickness(double value);
    public double get_StrokeThickness();
    public void set_StrokeDashArray(DoubleCollection value);
    public DoubleCollection get_StrokeDashArray();
    public void set_StrokeDashOffset(double value);
    public double get_StrokeDashOffset();
    public void set_StrokeLineCap(PenLineCap value);
    public PenLineCap get_StrokeLineCap();
    public void set_StrokeLineJoin(PenLineJoin value);
    public PenLineJoin get_StrokeLineJoin();
    public void set_StrokeMiterLimit(double value);
    public double get_StrokeMiterLimit();
    public void set_Aspect(Stretch value);
    public Stretch get_Aspect();
}
public class Xamarin.Forms.Shapes.SkewTransform : Transform {
    public static BindableProperty AngleXProperty;
    public static BindableProperty AngleYProperty;
    public static BindableProperty CenterXProperty;
    public static BindableProperty CenterYProperty;
    public double AngleX { get; public set; }
    public double AngleY { get; public set; }
    public double CenterX { get; public set; }
    public double CenterY { get; public set; }
    public SkewTransform(double angleX, double angleY);
    public SkewTransform(double angleX, double angleY, double centerX, double centerY);
    private static SkewTransform();
    public void set_AngleX(double value);
    public double get_AngleX();
    public void set_AngleY(double value);
    public double get_AngleY();
    public void set_CenterX(double value);
    public double get_CenterX();
    public void set_CenterY(double value);
    public double get_CenterY();
    private static void OnTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnTransformPropertyChanged();
}
[TypeConverterAttribute("Xamarin.Forms.Shapes.TransformTypeConverter")]
public class Xamarin.Forms.Shapes.Transform : BindableObject {
    public static BindableProperty ValueProperty;
    public Matrix Value { get; public set; }
    private static Transform();
    public void set_Value(Matrix value);
    public Matrix get_Value();
}
public class Xamarin.Forms.Shapes.TransformCollection : ObservableCollection`1<Transform> {
}
[ContentPropertyAttribute("Children")]
public class Xamarin.Forms.Shapes.TransformGroup : Transform {
    public static BindableProperty ChildrenProperty;
    public TransformCollection Children { get; public set; }
    private static TransformGroup();
    public void set_Children(TransformCollection value);
    public TransformCollection get_Children();
    private static void OnTransformGroupChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void OnTransformPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateTransformMatrix();
}
public class Xamarin.Forms.Shapes.TransformTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
public class Xamarin.Forms.Shapes.TranslateTransform : Transform {
    public static BindableProperty XProperty;
    public static BindableProperty YProperty;
    public double X { get; public set; }
    public double Y { get; public set; }
    public TranslateTransform(double x, double y);
    private static TranslateTransform();
    public void set_X(double value);
    public double get_X();
    public void set_Y(double value);
    public double get_Y();
    private static void OnTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnTransformPropertyChanged();
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Shapes.Vector2 : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; private set; }
    public double Y { get; private set; }
    public double LengthSquared { get; }
    public double Length { get; }
    public Vector2 Normalized { get; }
    public Vector2(double x, double y);
    public Vector2(Point p);
    public Vector2(double angle);
    [CompilerGeneratedAttribute]
private void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
private void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    public double get_LengthSquared();
    public double get_Length();
    public Vector2 get_Normalized();
    public static double AngleBetween(Vector2 v1, Vector2 v2);
    public static Vector2 op_Addition(Vector2 v1, Vector2 v2);
    public static Point op_Addition(Vector2 v, Point p);
    public static Point op_Addition(Point p, Vector2 v);
    public static Vector2 op_Subtraction(Vector2 v1, Vector2 v2);
    public static Point op_Subtraction(Point p, Vector2 v);
    public static Vector2 op_Multiply(Vector2 v, double d);
    public static Vector2 op_Multiply(double d, Vector2 v);
    public static Vector2 op_Division(Vector2 v, double d);
    public static Vector2 op_UnaryNegation(Vector2 v);
    public static Point op_Explicit(Vector2 v);
    public virtual string ToString();
}
[ContentPropertyAttribute("Items")]
public class Xamarin.Forms.Shell : Page {
    public static BindableProperty BackButtonBehaviorProperty;
    public static BindableProperty PresentationModeProperty;
    public static BindableProperty FlyoutBehaviorProperty;
    public static BindableProperty NavBarIsVisibleProperty;
    public static BindableProperty NavBarHasShadowProperty;
    public static BindableProperty SearchHandlerProperty;
    public static BindableProperty TabBarIsVisibleProperty;
    public static BindableProperty TitleViewProperty;
    public static BindableProperty MenuItemTemplateProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty DisabledColorProperty;
    public static BindableProperty ForegroundColorProperty;
    public static BindableProperty TabBarBackgroundColorProperty;
    public static BindableProperty TabBarDisabledColorProperty;
    public static BindableProperty TabBarForegroundColorProperty;
    public static BindableProperty TabBarTitleColorProperty;
    public static BindableProperty TabBarUnselectedColorProperty;
    public static BindableProperty TitleColorProperty;
    public static BindableProperty UnselectedColorProperty;
    public static BindableProperty FlyoutBackdropProperty;
    private static BindablePropertyKey CurrentStatePropertyKey;
    private static BindablePropertyKey ItemsPropertyKey;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<IAppearanceObserver, Element>> _appearanceObservers;
    private List`1<IFlyoutBehaviorObserver> _flyoutBehaviorObservers;
    [CompilerGeneratedAttribute]
private EventHandler _structureChanged;
    public static BindableProperty CurrentItemProperty;
    public static BindableProperty CurrentStateProperty;
    public static BindableProperty FlyoutBackgroundImageProperty;
    public static BindableProperty FlyoutBackgroundImageAspectProperty;
    public static BindableProperty FlyoutBackgroundColorProperty;
    public static BindableProperty FlyoutBackgroundProperty;
    public static BindableProperty FlyoutHeaderBehaviorProperty;
    public static BindableProperty FlyoutHeaderProperty;
    public static BindableProperty FlyoutHeaderTemplateProperty;
    public static BindableProperty FlyoutIsPresentedProperty;
    public static BindableProperty ItemsProperty;
    public static BindableProperty FlyoutIconProperty;
    public static BindableProperty FlyoutVerticalScrollModeProperty;
    private ShellNavigatedEventArgs _accumulatedEvent;
    private bool _accumulateNavigatedEvents;
    private View _flyoutHeaderView;
    [CompilerGeneratedAttribute]
private EventHandler`1<ShellNavigatedEventArgs> Navigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<ShellNavigatingEventArgs> Navigating;
    [CompilerGeneratedAttribute]
private string <RouteHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteScheme>k__BackingField;
    private ShellNavigationState _lastNavigating;
    private View Xamarin.Forms.IShellController.FlyoutHeader { get; }
    private IShellController ShellController { get; }
    public static Shell Current { get; }
    public ScrollMode FlyoutVerticalScrollMode { get; public set; }
    public ImageSource FlyoutIcon { get; public set; }
    public ShellItem CurrentItem { get; public set; }
    internal ShellContent CurrentContent { get; }
    internal ShellSection CurrentSection { get; }
    public ShellNavigationState CurrentState { get; }
    [TypeConverterAttribute("Xamarin.Forms.ImageSourceConverter")]
public ImageSource FlyoutBackgroundImage { get; public set; }
    public Aspect FlyoutBackgroundImageAspect { get; public set; }
    public Color FlyoutBackgroundColor { get; public set; }
    public Brush FlyoutBackground { get; public set; }
    public Brush FlyoutBackdrop { get; public set; }
    public FlyoutBehavior FlyoutBehavior { get; public set; }
    public object FlyoutHeader { get; public set; }
    public FlyoutHeaderBehavior FlyoutHeaderBehavior { get; public set; }
    public DataTemplate FlyoutHeaderTemplate { get; public set; }
    public bool FlyoutIsPresented { get; public set; }
    public IList`1<ShellItem> Items { get; }
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplate MenuItemTemplate { get; public set; }
    internal string Route { get; internal set; }
    internal string RouteHost { get; internal set; }
    internal string RouteScheme { get; internal set; }
    private View FlyoutHeaderView { get; private set; }
    internal IEnumerable`1<Element> ChildrenNotDrawnByThisElement { get; }
    private static Shell();
    private static void OnBackButonBehaviorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnSearchHandlerPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public static DataTemplate GetMenuItemTemplate(BindableObject obj);
    public static void SetMenuItemTemplate(BindableObject obj, DataTemplate menuItemTemplate);
    public static DataTemplate GetItemTemplate(BindableObject obj);
    public static void SetItemTemplate(BindableObject obj, DataTemplate itemTemplate);
    public static BackButtonBehavior GetBackButtonBehavior(BindableObject obj);
    public static void SetBackButtonBehavior(BindableObject obj, BackButtonBehavior behavior);
    public static PresentationMode GetPresentationMode(BindableObject obj);
    public static void SetPresentationMode(BindableObject obj, PresentationMode presentationMode);
    public static FlyoutBehavior GetFlyoutBehavior(BindableObject obj);
    public static void SetFlyoutBehavior(BindableObject obj, FlyoutBehavior value);
    public static bool GetNavBarIsVisible(BindableObject obj);
    public static void SetNavBarIsVisible(BindableObject obj, bool value);
    public static bool GetNavBarHasShadow(BindableObject obj);
    public static void SetNavBarHasShadow(BindableObject obj, bool value);
    public static SearchHandler GetSearchHandler(BindableObject obj);
    public static void SetSearchHandler(BindableObject obj, SearchHandler handler);
    public static bool GetTabBarIsVisible(BindableObject obj);
    public static void SetTabBarIsVisible(BindableObject obj, bool value);
    public static View GetTitleView(BindableObject obj);
    public static void SetTitleView(BindableObject obj, View value);
    private static void OnFlyoutBehaviorChanged(BindableObject bindable, object oldValue, object newValue);
    public static Color GetBackgroundColor(BindableObject obj);
    public static void SetBackgroundColor(BindableObject obj, Color value);
    public static Color GetDisabledColor(BindableObject obj);
    public static void SetDisabledColor(BindableObject obj, Color value);
    public static Color GetForegroundColor(BindableObject obj);
    public static void SetForegroundColor(BindableObject obj, Color value);
    public static Color GetTabBarBackgroundColor(BindableObject obj);
    public static void SetTabBarBackgroundColor(BindableObject obj, Color value);
    public static Color GetTabBarDisabledColor(BindableObject obj);
    public static void SetTabBarDisabledColor(BindableObject obj, Color value);
    public static Color GetTabBarForegroundColor(BindableObject obj);
    public static void SetTabBarForegroundColor(BindableObject obj, Color value);
    public static Color GetTabBarTitleColor(BindableObject obj);
    public static void SetTabBarTitleColor(BindableObject obj, Color value);
    public static Color GetTabBarUnselectedColor(BindableObject obj);
    public static void SetTabBarUnselectedColor(BindableObject obj, Color value);
    public static Color GetTitleColor(BindableObject obj);
    public static void SetTitleColor(BindableObject obj, Color value);
    public static Color GetUnselectedColor(BindableObject obj);
    public static void SetUnselectedColor(BindableObject obj, Color value);
    public static Brush GetFlyoutBackdrop(BindableObject obj);
    public static void SetFlyoutBackdrop(BindableObject obj, Brush value);
    private static void OnColorValueChanged(BindableObject bindable, object oldValue, object newValue);
    private sealed virtual override DataTemplate Xamarin.Forms.IShellController.GetFlyoutItemDataTemplate(BindableObject bo);
    private sealed virtual override void Xamarin.Forms.IShellController.add_StructureChanged(EventHandler value);
    private sealed virtual override void Xamarin.Forms.IShellController.remove_StructureChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__structureChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__structureChanged(EventHandler value);
    private sealed virtual override View Xamarin.Forms.IShellController.get_FlyoutHeader();
    private IShellController get_ShellController();
    private sealed virtual override void Xamarin.Forms.IShellController.AddAppearanceObserver(IAppearanceObserver observer, Element pivot);
    private sealed virtual override void Xamarin.Forms.IShellController.AddFlyoutBehaviorObserver(IFlyoutBehaviorObserver observer);
    private sealed virtual override void Xamarin.Forms.IShellController.AppearanceChanged(Element source, bool appearanceSet);
    private sealed virtual override ShellNavigationState Xamarin.Forms.IShellController.GetNavigationState(ShellItem shellItem, ShellSection shellSection, ShellContent shellContent, bool includeStack);
    [AsyncStateMachineAttribute("Xamarin.Forms.Shell/<Xamarin-Forms-IShellController-OnFlyoutItemSelected>d__86")]
private sealed virtual override void Xamarin.Forms.IShellController.OnFlyoutItemSelected(Element element);
    [AsyncStateMachineAttribute("Xamarin.Forms.Shell/<Xamarin-Forms-IShellController-OnFlyoutItemSelectedAsync>d__87")]
private sealed virtual override Task Xamarin.Forms.IShellController.OnFlyoutItemSelectedAsync(Element element);
    private void OnShellItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override bool Xamarin.Forms.IShellController.ProposeNavigation(ShellNavigationSource source, ShellItem shellItem, ShellSection shellSection, ShellContent shellContent, IReadOnlyList`1<Page> stack, bool canCancel);
    private sealed virtual override bool Xamarin.Forms.IShellController.RemoveAppearanceObserver(IAppearanceObserver observer);
    private sealed virtual override bool Xamarin.Forms.IShellController.RemoveFlyoutBehaviorObserver(IFlyoutBehaviorObserver observer);
    private sealed virtual override void Xamarin.Forms.IShellController.UpdateCurrentState(ShellNavigationSource source);
    private sealed virtual override ReadOnlyCollection`1<ShellItem> Xamarin.Forms.IShellController.GetItems();
    private sealed virtual override void Xamarin.Forms.IShellController.add_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void Xamarin.Forms.IShellController.remove_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    public static Shell get_Current();
    private List`1<RequestDefinition> BuildAllTheRoutes();
    public Task GoToAsync(ShellNavigationState state);
    public Task GoToAsync(ShellNavigationState state, bool animate);
    [AsyncStateMachineAttribute("Xamarin.Forms.Shell/<GoToAsync>d__102")]
internal Task GoToAsync(ShellNavigationState state, Nullable`1<bool> animate, bool enableRelativeShellRoutes);
    internal static void ApplyQueryAttributes(Element element, IDictionary`2<string, string> query, bool isLastItem);
    private ShellNavigationState GetNavigationState(ShellItem shellItem, ShellSection shellSection, ShellContent shellContent, IReadOnlyList`1<Page> sectionStack, IReadOnlyList`1<Page> modalStack);
    private void Initialize();
    public ScrollMode get_FlyoutVerticalScrollMode();
    public void set_FlyoutVerticalScrollMode(ScrollMode value);
    [CompilerGeneratedAttribute]
public void add_Navigated(EventHandler`1<ShellNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(EventHandler`1<ShellNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Navigating(EventHandler`1<ShellNavigatingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Navigating(EventHandler`1<ShellNavigatingEventArgs> value);
    public sealed virtual ImageSource get_FlyoutIcon();
    public void set_FlyoutIcon(ImageSource value);
    public ShellItem get_CurrentItem();
    public void set_CurrentItem(ShellItem value);
    internal ShellContent get_CurrentContent();
    internal ShellSection get_CurrentSection();
    public ShellNavigationState get_CurrentState();
    public ImageSource get_FlyoutBackgroundImage();
    public void set_FlyoutBackgroundImage(ImageSource value);
    public Aspect get_FlyoutBackgroundImageAspect();
    public void set_FlyoutBackgroundImageAspect(Aspect value);
    public Color get_FlyoutBackgroundColor();
    public void set_FlyoutBackgroundColor(Color value);
    public Brush get_FlyoutBackground();
    public void set_FlyoutBackground(Brush value);
    public Brush get_FlyoutBackdrop();
    public void set_FlyoutBackdrop(Brush value);
    public FlyoutBehavior get_FlyoutBehavior();
    public void set_FlyoutBehavior(FlyoutBehavior value);
    public object get_FlyoutHeader();
    public void set_FlyoutHeader(object value);
    public FlyoutHeaderBehavior get_FlyoutHeaderBehavior();
    public void set_FlyoutHeaderBehavior(FlyoutHeaderBehavior value);
    public DataTemplate get_FlyoutHeaderTemplate();
    public void set_FlyoutHeaderTemplate(DataTemplate value);
    public bool get_FlyoutIsPresented();
    public void set_FlyoutIsPresented(bool value);
    public IList`1<ShellItem> get_Items();
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplate get_MenuItemTemplate();
    public void set_MenuItemTemplate(DataTemplate value);
    internal string get_Route();
    internal void set_Route(string value);
    [CompilerGeneratedAttribute]
internal string get_RouteHost();
    [CompilerGeneratedAttribute]
internal void set_RouteHost(string value);
    [CompilerGeneratedAttribute]
internal string get_RouteScheme();
    [CompilerGeneratedAttribute]
internal void set_RouteScheme(string value);
    private View get_FlyoutHeaderView();
    private void set_FlyoutHeaderView(View value);
    protected virtual void OnBindingContextChanged();
    private sealed virtual override List`1<List`1<Element>> Xamarin.Forms.IShellController.GenerateFlyoutGrouping();
    internal void SendStructureChanged();
    protected virtual bool OnBackButtonPressed();
    private bool ValidDefaultShellItem(Element child);
    [IteratorStateMachineAttribute("Xamarin.Forms.Shell/<get_ChildrenNotDrawnByThisElement>d__202")]
internal virtual IEnumerable`1<Element> get_ChildrenNotDrawnByThisElement();
    internal void ProcessNavigated(ShellNavigatedEventArgs args);
    protected virtual void OnNavigated(ShellNavigatedEventArgs args);
    protected virtual void OnNavigating(ShellNavigatingEventArgs args);
    private static void OnCurrentItemChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCurrentItemChanging(BindableObject bindable, object oldValue, object newValue);
    private static void UpdateChecked(Element root, bool isChecked);
    private static void OnFlyoutHeaderChanging(BindableObject bindable, object oldValue, object newValue);
    private static void OnFlyoutHeaderTemplateChanging(BindableObject bindable, object oldValue, object newValue);
    private static void OnTitleViewChanged(BindableObject bindable, object oldValue, object newValue);
    private static Dictionary`2<string, string> ParseQueryString(string query);
    internal FlyoutBehavior GetEffectiveFlyoutBehavior();
    internal T GetEffectiveValue(BindableProperty property, T defaultValue);
    internal T GetEffectiveValue(BindableProperty property, Func`1<T> defaultValue, Action`1<Element> observer, Element element);
    private ShellAppearance GetAppearanceForPivot(Element pivot);
    private void NotifyFlyoutBehaviorObservers();
    private void OnFlyoutHeaderChanged(object oldVal, object newVal);
    private void OnFlyoutHeaderTemplateChanged(DataTemplate oldValue, DataTemplate newValue);
    private bool ProposeNavigation(ShellNavigationSource source, ShellNavigationState proposedState, bool canCancel);
    internal Element GetVisiblePage();
    private Element WalkToPage(Element element);
    private sealed virtual override void Xamarin.Forms.IPropertyPropagationController.PropagatePropertyChanged(string propertyName);
    [EditorBrowsableAttribute("1")]
public static void VerifyShellUWPFlagEnabled(string constructorHint, string memberName);
    [CompilerGeneratedAttribute]
internal static List`1<string> <GetNavigationState>g__CollapsePath|104_0(string myRoute, List`1<string> currentRouteStack, bool userDefinedRoute);
    [CompilerGeneratedAttribute]
private void <Initialize>b__122_0(object s, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Xamarin.Forms.Shell/<<Initialize>g__SetCurrentItem|122_1>d")]
private void <Initialize>g__SetCurrentItem|122_1();
    [CompilerGeneratedAttribute]
internal static bool <Initialize>g__IsValidRoute|122_2(BaseShellItem baseShellItem);
    [CompilerGeneratedAttribute]
internal static void <Xamarin.Forms.IShellController.GenerateFlyoutGrouping>g__IncrementGroup|197_0(<>c__DisplayClass197_0& );
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.ShellAppearance : object {
    private static BindableProperty[] s_ingestArray;
    private static BindableProperty[] s_ingestBrushArray;
    private Nullable`1[] _colorArray;
    private Brush[] _brushArray;
    public Color BackgroundColor { get; }
    public Color DisabledColor { get; }
    public Color ForegroundColor { get; }
    public Color TabBarBackgroundColor { get; }
    public Color TabBarDisabledColor { get; }
    public Color TabBarForegroundColor { get; }
    public Color TabBarTitleColor { get; }
    public Color TabBarUnselectedColor { get; }
    public Color TitleColor { get; }
    public Color UnselectedColor { get; }
    public Brush FlyoutBackdrop { get; }
    private Color Xamarin.Forms.IShellAppearanceElement.EffectiveTabBarBackgroundColor { get; }
    private Color Xamarin.Forms.IShellAppearanceElement.EffectiveTabBarDisabledColor { get; }
    private Color Xamarin.Forms.IShellAppearanceElement.EffectiveTabBarForegroundColor { get; }
    private Color Xamarin.Forms.IShellAppearanceElement.EffectiveTabBarTitleColor { get; }
    private Color Xamarin.Forms.IShellAppearanceElement.EffectiveTabBarUnselectedColor { get; }
    private static ShellAppearance();
    public Color get_BackgroundColor();
    public Color get_DisabledColor();
    public Color get_ForegroundColor();
    public Color get_TabBarBackgroundColor();
    public Color get_TabBarDisabledColor();
    public Color get_TabBarForegroundColor();
    public Color get_TabBarTitleColor();
    public Color get_TabBarUnselectedColor();
    public Color get_TitleColor();
    public Color get_UnselectedColor();
    public Brush get_FlyoutBackdrop();
    private sealed virtual override Color Xamarin.Forms.IShellAppearanceElement.get_EffectiveTabBarBackgroundColor();
    private sealed virtual override Color Xamarin.Forms.IShellAppearanceElement.get_EffectiveTabBarDisabledColor();
    private sealed virtual override Color Xamarin.Forms.IShellAppearanceElement.get_EffectiveTabBarForegroundColor();
    private sealed virtual override Color Xamarin.Forms.IShellAppearanceElement.get_EffectiveTabBarTitleColor();
    private sealed virtual override Color Xamarin.Forms.IShellAppearanceElement.get_EffectiveTabBarUnselectedColor();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Ingest(Element pivot);
    public void MakeComplete();
    public static bool op_Equality(ShellAppearance appearance1, ShellAppearance appearance2);
    public static bool op_Inequality(ShellAppearance appearance1, ShellAppearance appearance2);
}
[ContentPropertyAttribute("Content")]
public class Xamarin.Forms.ShellContent : BaseShellItem {
    private static BindablePropertyKey MenuItemsPropertyKey;
    public static BindableProperty MenuItemsProperty;
    public static BindableProperty ContentProperty;
    public static BindableProperty ContentTemplateProperty;
    internal static BindableProperty QueryAttributesProperty;
    private EventHandler _isPageVisibleChanged;
    private Page _contentCache;
    private IList`1<Element> _logicalChildren;
    private ReadOnlyCollection`1<Element> _logicalChildrenReadOnly;
    public MenuItemCollection MenuItems { get; }
    public object Content { get; public set; }
    public DataTemplate ContentTemplate { get; public set; }
    private Page Xamarin.Forms.IShellContentController.Page { get; }
    internal bool IsVisibleContent { get; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    private Page ContentCache { get; private set; }
    private static ShellContent();
    public MenuItemCollection get_MenuItems();
    public object get_Content();
    public void set_Content(object value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    private sealed virtual override Page Xamarin.Forms.IShellContentController.get_Page();
    private sealed virtual override void Xamarin.Forms.IShellContentController.add_IsPageVisibleChanged(EventHandler value);
    private sealed virtual override void Xamarin.Forms.IShellContentController.remove_IsPageVisibleChanged(EventHandler value);
    private sealed virtual override Page Xamarin.Forms.IShellContentController.GetOrCreateContent();
    private sealed virtual override void Xamarin.Forms.IShellContentController.RecyclePage(Page page);
    internal bool get_IsVisibleContent();
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    internal virtual void SendDisappearing();
    internal virtual void SendAppearing();
    private void SendPageAppearing(Page page);
    protected virtual void OnChildAdded(Element child);
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private Page get_ContentCache();
    private void set_ContentCache(Page value);
    public static ShellContent op_Implicit(TemplatedPage page);
    private static void OnContentChanged(BindableObject bindable, object oldValue, object newValue);
    private void MenuItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal virtual void ApplyQueryAttributes(IDictionary`2<string, string> query);
    private static void OnQueryAttributesPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void ApplyQueryAttributes(object content, IDictionary`2<string, string> query, IDictionary`2<string, string> oldQuery);
}
internal class Xamarin.Forms.ShellContentCollection : ShellElementCollection`1<ShellContent> {
    protected virtual bool IsShellElementVisible(BaseShellItem item);
    private void OnIsPageVisibleChanged(object sender, EventArgs e);
    protected virtual void OnElementControllerInserting(IElementController element);
    protected virtual void OnElementControllerRemoving(IElementController element);
}
[DefaultMemberAttribute("Item")]
internal abstract class Xamarin.Forms.ShellElementCollection : object {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler VisibleItemsChangedInternal;
    private List`1<NotifyCollectionChangedEventArgs> _notifyCollectionChangedEventArgs;
    private bool _pauseCollectionChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler VisibleItemsChanged;
    private IList _inner;
    private IList _visibleItems;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<BaseShellItem> <VisibleItemsReadOnly>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal IList Inner { get; private protected set; }
    protected IList VisibleItems { get; private protected set; }
    public IReadOnlyCollection`1<BaseShellItem> VisibleItemsReadOnly { get; private protected set; }
    public BaseShellItem Item { get; public set; }
    [CompilerGeneratedAttribute]
public void add_VisibleItemsChangedInternal(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_VisibleItemsChangedInternal(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_VisibleItemsChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_VisibleItemsChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    internal IList get_Inner();
    private protected void set_Inner(IList value);
    protected void OnVisibleItemsChanged(object sender, NotifyCollectionChangedEventArgs args);
    protected IList get_VisibleItems();
    private protected void set_VisibleItems(IList value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<BaseShellItem> get_VisibleItemsReadOnly();
    [CompilerGeneratedAttribute]
private protected void set_VisibleItemsReadOnly(IReadOnlyCollection`1<BaseShellItem> value);
    private void PauseCollectionChanged();
    private void ResumeCollectionChanged();
    public sealed virtual BaseShellItem get_Item(int index);
    public sealed virtual void set_Item(int index, BaseShellItem value);
    public sealed virtual void Clear();
    public virtual void Add(BaseShellItem item);
    public virtual bool Contains(BaseShellItem item);
    public virtual void CopyTo(BaseShellItem[] array, int arrayIndex);
    public abstract virtual IEnumerator`1<BaseShellItem> GetEnumerator();
    public virtual int IndexOf(BaseShellItem item);
    public virtual void Insert(int index, BaseShellItem item);
    public abstract virtual bool Remove(BaseShellItem item);
    public virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void InnerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Removing(IEnumerable items);
    protected void CheckVisibility(BaseShellItem element);
    protected virtual bool IsShellElementVisible(BaseShellItem item);
    protected virtual void OnElementControllerInserting(IElementController controller);
    protected virtual void OnElementControllerRemoving(IElementController controller);
    private void BaseShellItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnShellElementControllerItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <CheckVisibility>g__IsBaseShellItemVisible|46_0(BaseShellItem item);
    [CompilerGeneratedAttribute]
private void <OnShellElementControllerItemsCollectionChanged>g__OnParentSet|51_0(object s, EventArgs __);
}
internal abstract class Xamarin.Forms.ShellElementCollection`1 : ShellElementCollection {
    public ReadOnlyCollection`1<TBaseShellItem> VisibleItemsReadOnly { get; private protected set; }
    internal IList`1<TBaseShellItem> Inner { get; internal set; }
    private TBaseShellItem System.Collections.Generic.IList<TBaseShellItem>.Item { get; private set; }
    public ReadOnlyCollection`1<TBaseShellItem> get_VisibleItemsReadOnly();
    private protected void set_VisibleItemsReadOnly(ReadOnlyCollection`1<TBaseShellItem> value);
    internal IList`1<TBaseShellItem> get_Inner();
    internal void set_Inner(IList`1<TBaseShellItem> value);
    private sealed virtual override TBaseShellItem System.Collections.Generic.IList<TBaseShellItem>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<TBaseShellItem>.set_Item(int index, TBaseShellItem value);
    public virtual void Add(TBaseShellItem item);
    public virtual bool Contains(TBaseShellItem item);
    public virtual void CopyTo(TBaseShellItem[] array, int arrayIndex);
    public virtual int IndexOf(TBaseShellItem item);
    public virtual void Insert(int index, TBaseShellItem item);
    public virtual bool Remove(TBaseShellItem item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<TBaseShellItem> System.Collections.Generic.IEnumerable<TBaseShellItem>.GetEnumerator();
    public virtual IEnumerator`1<BaseShellItem> GetEnumerator();
    public virtual bool Remove(BaseShellItem item);
}
public class Xamarin.Forms.ShellGroupItem : BaseShellItem {
    public static BindableProperty FlyoutDisplayOptionsProperty;
    [CompilerGeneratedAttribute]
private ShellElementCollection <ShellElementCollection>k__BackingField;
    public FlyoutDisplayOptions FlyoutDisplayOptions { get; public set; }
    internal ShellElementCollection ShellElementCollection { get; }
    private static ShellGroupItem();
    public FlyoutDisplayOptions get_FlyoutDisplayOptions();
    public void set_FlyoutDisplayOptions(FlyoutDisplayOptions value);
    [CompilerGeneratedAttribute]
internal virtual ShellElementCollection get_ShellElementCollection();
}
[ContentPropertyAttribute("Items")]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.ShellItem : ShellGroupItem {
    private static BindablePropertyKey ItemsPropertyKey;
    public static BindableProperty CurrentItemProperty;
    public static BindableProperty ItemsProperty;
    private ObservableCollection`1<Element> _children;
    private ReadOnlyCollection`1<Element> _logicalChildren;
    private Lazy`1<PlatformConfigurationRegistry`1<ShellItem>> _platformConfigurationRegistry;
    private IShellItemController ShellItemController { get; }
    private bool Xamarin.Forms.IShellItemController.ShowTabs { get; }
    public ShellSection CurrentItem { get; public set; }
    public IList`1<ShellSection> Items { get; }
    internal ShellElementCollection ShellElementCollection { get; }
    internal bool IsVisibleItem { get; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    private static ShellItem();
    private IShellItemController get_ShellItemController();
    internal Task GoToPart(NavigationRequest request, Dictionary`2<string, string> queryData);
    private sealed virtual override bool Xamarin.Forms.IShellItemController.ProposeSection(ShellSection shellSection, bool setValue);
    private sealed virtual override ReadOnlyCollection`1<ShellSection> Xamarin.Forms.IShellItemController.GetItems();
    private sealed virtual override void Xamarin.Forms.IShellItemController.add_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void Xamarin.Forms.IShellItemController.remove_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override bool Xamarin.Forms.IShellItemController.get_ShowTabs();
    private sealed virtual override void Xamarin.Forms.IPropertyPropagationController.PropagatePropertyChanged(string propertyName);
    public ShellSection get_CurrentItem();
    public void set_CurrentItem(ShellSection value);
    public IList`1<ShellSection> get_Items();
    internal virtual ShellElementCollection get_ShellElementCollection();
    internal bool get_IsVisibleItem();
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    internal void SendStructureChanged();
    internal static ShellItem CreateFromShellSection(ShellSection shellSection);
    public static ShellItem op_Implicit(ShellSection shellSection);
    internal static ShellItem GetShellItemFromRouteName(string route);
    public static ShellItem op_Implicit(ShellContent shellContent);
    public static ShellItem op_Implicit(TemplatedPage page);
    public static ShellItem op_Implicit(MenuItem menuItem);
    public sealed virtual IPlatformElementConfiguration`2<T, ShellItem> On();
    protected virtual void OnChildAdded(Element child);
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    private void OnVisibleChildAdded(Element child);
    private void OnVisibleChildRemoved(Element child);
    private static void OnCurrentItemChanged(BindableObject bindable, object oldValue, object newValue);
    private void ItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal virtual void SendAppearing();
    internal virtual void SendDisappearing();
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0(object _, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<ShellItem> <.ctor>b__17_1();
}
internal class Xamarin.Forms.ShellItemCollection : ShellElementCollection`1<ShellItem> {
    public virtual void Add(ShellItem item);
}
public class Xamarin.Forms.ShellNavigatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ShellNavigationState <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellNavigationState <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellNavigationSource <Source>k__BackingField;
    public ShellNavigationState Current { get; }
    public ShellNavigationState Previous { get; }
    public ShellNavigationSource Source { get; }
    public ShellNavigatedEventArgs(ShellNavigationState previous, ShellNavigationState current, ShellNavigationSource source);
    [CompilerGeneratedAttribute]
public ShellNavigationState get_Current();
    [CompilerGeneratedAttribute]
public ShellNavigationState get_Previous();
    [CompilerGeneratedAttribute]
public ShellNavigationSource get_Source();
}
public class Xamarin.Forms.ShellNavigatingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ShellNavigationState <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellNavigationState <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellNavigationSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancelled>k__BackingField;
    public ShellNavigationState Current { get; }
    public ShellNavigationState Target { get; }
    public ShellNavigationSource Source { get; }
    public bool CanCancel { get; }
    public bool Cancelled { get; private set; }
    public ShellNavigatingEventArgs(ShellNavigationState current, ShellNavigationState target, ShellNavigationSource source, bool canCancel);
    [CompilerGeneratedAttribute]
public ShellNavigationState get_Current();
    [CompilerGeneratedAttribute]
public ShellNavigationState get_Target();
    [CompilerGeneratedAttribute]
public ShellNavigationSource get_Source();
    [CompilerGeneratedAttribute]
public bool get_CanCancel();
    public bool Cancel();
    [CompilerGeneratedAttribute]
public bool get_Cancelled();
    [CompilerGeneratedAttribute]
private void set_Cancelled(bool value);
}
public enum Xamarin.Forms.ShellNavigationSource : Enum {
    public int value__;
    public static ShellNavigationSource Unknown;
    public static ShellNavigationSource Push;
    public static ShellNavigationSource Pop;
    public static ShellNavigationSource PopToRoot;
    public static ShellNavigationSource Insert;
    public static ShellNavigationSource Remove;
    public static ShellNavigationSource ShellItemChanged;
    public static ShellNavigationSource ShellSectionChanged;
    public static ShellNavigationSource ShellContentChanged;
}
[DebuggerDisplayAttribute("Location = {Location}")]
public class Xamarin.Forms.ShellNavigationState : object {
    private Uri _fullLocation;
    [CompilerGeneratedAttribute]
private Uri <Location>k__BackingField;
    internal Uri FullLocation { get; internal set; }
    public Uri Location { get; private set; }
    public ShellNavigationState(string location);
    public ShellNavigationState(Uri location);
    internal Uri get_FullLocation();
    internal void set_FullLocation(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(Uri value);
    public static ShellNavigationState op_Implicit(Uri uri);
    public static ShellNavigationState op_Implicit(string value);
}
[EditorBrowsableAttribute("1")]
[ContentPropertyAttribute("Items")]
public class Xamarin.Forms.ShellSection : ShellGroupItem {
    private static BindablePropertyKey ItemsPropertyKey;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<object, Action`1<Page>>> _displayedPageObservers;
    private List`1<IShellContentInsetObserver> _observers;
    private Thickness _lastInset;
    private double _lastTabThickness;
    [CompilerGeneratedAttribute]
private EventHandler`1<NavigationRequestedEventArgs> _navigationRequested;
    public static BindableProperty CurrentItemProperty;
    public static BindableProperty ItemsProperty;
    private Page _displayedPage;
    private IList`1<Element> _logicalChildren;
    private ReadOnlyCollection`1<Element> _logicalChildrenReadOnly;
    private List`1<Page> _navStack;
    [CompilerGeneratedAttribute]
private bool <IsPushingModalStack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPoppingModalStack>k__BackingField;
    private IShellSectionController ShellSectionController { get; }
    private Page Xamarin.Forms.IShellSectionController.PresentedPage { get; }
    internal bool IsPushingModalStack { get; private set; }
    internal bool IsPoppingModalStack { get; private set; }
    public ShellContent CurrentItem { get; public set; }
    public IList`1<ShellContent> Items { get; }
    internal ShellElementCollection ShellElementCollection { get; }
    public IReadOnlyList`1<Page> Stack { get; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    internal Page DisplayedPage { get; internal set; }
    private Shell Shell { get; }
    private ShellItem ShellItem { get; }
    internal IEnumerable`1<Element> ChildrenNotDrawnByThisElement { get; }
    internal bool IsVisibleSection { get; }
    private static ShellSection();
    private IShellSectionController get_ShellSectionController();
    private sealed virtual override void Xamarin.Forms.IShellSectionController.add_NavigationRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.IShellSectionController.remove_NavigationRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__navigationRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__navigationRequested(EventHandler`1<NavigationRequestedEventArgs> value);
    private sealed virtual override Page Xamarin.Forms.IShellSectionController.get_PresentedPage();
    private sealed virtual override void Xamarin.Forms.IShellSectionController.AddContentInsetObserver(IShellContentInsetObserver observer);
    private sealed virtual override void Xamarin.Forms.IShellSectionController.AddDisplayedPageObserver(object observer, Action`1<Page> callback);
    internal Task GoToPart(NavigationRequest request, Dictionary`2<string, string> queryData);
    private sealed virtual override bool Xamarin.Forms.IShellSectionController.RemoveContentInsetObserver(IShellContentInsetObserver observer);
    private sealed virtual override bool Xamarin.Forms.IShellSectionController.RemoveDisplayedPageObserver(object observer);
    private sealed virtual override void Xamarin.Forms.IShellSectionController.SendInsetChanged(Thickness inset, double tabThickness);
    [AsyncStateMachineAttribute("Xamarin.Forms.ShellSection/<Xamarin-Forms-IShellSectionController-SendPopping>d__21")]
private sealed virtual override void Xamarin.Forms.IShellSectionController.SendPopping(Task poppingCompleted);
    [AsyncStateMachineAttribute("Xamarin.Forms.ShellSection/<Xamarin-Forms-IShellSectionController-SendPoppingToRoot>d__22")]
private sealed virtual override void Xamarin.Forms.IShellSectionController.SendPoppingToRoot(Task finishedPopping);
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.IShellSectionController.SendPopped();
    private sealed virtual override ReadOnlyCollection`1<ShellContent> Xamarin.Forms.IShellSectionController.GetItems();
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.IShellSectionController.SendPopping(Page page);
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void Xamarin.Forms.IShellSectionController.SendPopped(Page page);
    private sealed virtual override void Xamarin.Forms.IShellSectionController.add_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void Xamarin.Forms.IShellSectionController.remove_ItemsCollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void Xamarin.Forms.IPropertyPropagationController.PropagatePropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
internal bool get_IsPushingModalStack();
    [CompilerGeneratedAttribute]
private void set_IsPushingModalStack(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsPoppingModalStack();
    [CompilerGeneratedAttribute]
private void set_IsPoppingModalStack(bool value);
    public ShellContent get_CurrentItem();
    public void set_CurrentItem(ShellContent value);
    public IList`1<ShellContent> get_Items();
    internal virtual ShellElementCollection get_ShellElementCollection();
    public IReadOnlyList`1<Page> get_Stack();
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
    internal Page get_DisplayedPage();
    internal void set_DisplayedPage(Page value);
    private Shell get_Shell();
    private ShellItem get_ShellItem();
    internal static ShellSection CreateFromShellContent(ShellContent shellContent);
    internal static ShellSection CreateFromTemplatedPage(TemplatedPage page);
    public static ShellSection op_Implicit(ShellContent shellContent);
    public static ShellSection op_Implicit(TemplatedPage page);
    [AsyncStateMachineAttribute("Xamarin.Forms.ShellSection/<GoToAsync>d__68")]
internal Task GoToAsync(NavigationRequest request, IDictionary`2<string, string> queryData, Nullable`1<bool> animate);
    internal void SendStructureChanged();
    protected virtual IReadOnlyList`1<Page> GetNavigationStack();
    internal void UpdateDisplayedPage();
    protected virtual void OnChildAdded(Element child);
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    private void OnVisibleChildAdded(Element child);
    private void OnVisibleChildRemoved(Element child);
    internal virtual IEnumerable`1<Element> get_ChildrenNotDrawnByThisElement();
    protected virtual void OnInsertPageBefore(Page page, Page before);
    [AsyncStateMachineAttribute("Xamarin.Forms.ShellSection/<OnPopAsync>d__80")]
protected virtual Task`1<Page> OnPopAsync(bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.ShellSection/<OnPopToRootAsync>d__81")]
protected virtual Task OnPopToRootAsync(bool animated);
    protected virtual Task OnPushAsync(Page page, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.ShellSection/<PopModalStackToPage>d__83")]
internal Task PopModalStackToPage(Page page, Nullable`1<bool> animated);
    protected virtual void OnRemovePage(Page page);
    internal bool get_IsVisibleSection();
    private void PresentedPageDisappearing();
    private void PresentedPageAppearing();
    private static void OnCurrentItemChanged(BindableObject bindable, object oldValue, object newValue);
    private void AddPage(Page page);
    private void ItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void RemovePage(Page page);
    private void SendAppearanceChanged();
    private void SendUpdateCurrentState(ShellNavigationSource source);
    protected virtual void OnBindingContextChanged();
    internal virtual void SendDisappearing();
    internal virtual void SendAppearing();
    [CompilerGeneratedAttribute]
private void <.ctor>b__45_0(object _, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
internal static List`1<Page> <GoToAsync>g__BuildFlattenedNavigationStack|68_0(List`1<Page> startingList, IReadOnlyList`1<Page> modalStack);
    [DebuggerHiddenAttribute]
[CompilerGeneratedAttribute]
private void <>n__0(Element child, int oldLogicalIndex);
    [CompilerGeneratedAttribute]
private void <PresentedPageAppearing>g__OnPresentedPageParentSet|88_0(object sender, EventArgs e);
}
internal class Xamarin.Forms.ShellSectionCollection : ShellElementCollection`1<ShellSection> {
}
internal class Xamarin.Forms.ShellUriHandler : object {
    private static Char[] _pathSeparators;
    private static string _pathSeparator;
    private static ShellUriHandler();
    internal static Uri FormatUri(Uri path, Shell shell);
    internal static string FormatUri(string path);
    internal static Uri CreateUri(string path);
    public static Uri ConvertToStandardFormat(Shell shell, Uri request);
    public static Uri ConvertToStandardFormat(string routeScheme, string routeHost, string route, Uri request);
    internal static NavigationRequest GetNavigationRequest(Shell shell, Uri uri, bool enableRelativeShellRoutes, bool throwNavigationErrorAsException);
    internal static List`1<RouteRequestBuilder> GenerateRoutePaths(Shell shell, Uri request);
    internal static List`1<RouteRequestBuilder> GenerateRoutePaths(Shell shell, Uri request, Uri originalRequest, bool enableRelativeShellRoutes);
    internal static void ExpandOutGlobalRoutes(List`1<RouteRequestBuilder> possibleRoutePaths, String[] routeKeys);
    internal static List`1<RouteRequestBuilder> GetBestMatches(List`1<RouteRequestBuilder> possibleRoutePaths);
    private static void SearchPath(object node, RouteRequestBuilder currentMatchedPath, String[] segments, List`1<RouteRequestBuilder> possibleRoutePaths, int depthToStart, int myDepth, NodeLocation currentLocation, bool ignoreGlobalRoutes);
    private static string GetRoute(object node);
    [IteratorStateMachineAttribute("Xamarin.Forms.ShellUriHandler/<GetItems>d__15")]
private static IEnumerable GetItems(object node);
}
[DebuggerDisplayAttribute("Width={Width}, Height={Height}")]
[TypeConverterAttribute("Xamarin.Forms.SizeTypeConverter")]
public class Xamarin.Forms.Size : ValueType {
    private double _width;
    private double _height;
    public static Size Zero;
    public bool IsZero { get; }
    [DefaultValueAttribute("0")]
public double Width { get; public set; }
    [DefaultValueAttribute("0")]
public double Height { get; public set; }
    public Size(double width, double height);
    public bool get_IsZero();
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public static Size op_Addition(Size s1, Size s2);
    public static Size op_Subtraction(Size s1, Size s2);
    public static Size op_Multiply(Size s1, double value);
    public static bool op_Equality(Size s1, Size s2);
    public static bool op_Inequality(Size s1, Size s2);
    public static Point op_Explicit(Size size);
    public bool Equals(Size other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(Double& width, Double& height);
}
[DebuggerDisplayAttribute("Request={Request.Width}x{Request.Height}, Minimum={Minimum.Width}x{Minimum.Height}")]
public class Xamarin.Forms.SizeRequest : ValueType {
    [CompilerGeneratedAttribute]
private Size <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Minimum>k__BackingField;
    public Size Request { get; public set; }
    public Size Minimum { get; public set; }
    public SizeRequest(Size request, Size minimum);
    public SizeRequest(Size request);
    [CompilerGeneratedAttribute]
public Size get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Size value);
    [CompilerGeneratedAttribute]
public Size get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Size value);
    public virtual string ToString();
}
[TypeConversionAttribute("Xamarin.Forms.Size")]
public class Xamarin.Forms.SizeTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._SliderRenderer")]
public class Xamarin.Forms.Slider : View {
    public static BindableProperty MinimumProperty;
    public static BindableProperty MaximumProperty;
    public static BindableProperty ValueProperty;
    public static BindableProperty MinimumTrackColorProperty;
    public static BindableProperty MaximumTrackColorProperty;
    public static BindableProperty ThumbColorProperty;
    public static BindableProperty ThumbImageSourceProperty;
    [ObsoleteAttribute("ThumbImageProperty is obsolete as of 4.0.0. Please use ThumbImageSourceProperty instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty ThumbImageProperty;
    public static BindableProperty DragStartedCommandProperty;
    public static BindableProperty DragCompletedCommandProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Slider>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValueChangedEventArgs> ValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler DragStarted;
    [CompilerGeneratedAttribute]
private EventHandler DragCompleted;
    public Color MinimumTrackColor { get; public set; }
    public Color MaximumTrackColor { get; public set; }
    public Color ThumbColor { get; public set; }
    public ImageSource ThumbImageSource { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ThumbImage is obsolete as of 4.0.0. Please use ThumbImageSource instead.")]
public FileImageSource ThumbImage { get; public set; }
    public ICommand DragStartedCommand { get; public set; }
    public ICommand DragCompletedCommand { get; public set; }
    public double Maximum { get; public set; }
    public double Minimum { get; public set; }
    public double Value { get; public set; }
    public Slider(double min, double max, double val);
    private static Slider();
    public Color get_MinimumTrackColor();
    public void set_MinimumTrackColor(Color value);
    public Color get_MaximumTrackColor();
    public void set_MaximumTrackColor(Color value);
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
    public ImageSource get_ThumbImageSource();
    public void set_ThumbImageSource(ImageSource value);
    public FileImageSource get_ThumbImage();
    public void set_ThumbImage(FileImageSource value);
    public ICommand get_DragStartedCommand();
    public void set_DragStartedCommand(ICommand value);
    public ICommand get_DragCompletedCommand();
    public void set_DragCompletedCommand(ICommand value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Value();
    public void set_Value(double value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler`1<ValueChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler`1<ValueChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DragCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragCompleted(EventHandler value);
    private sealed virtual override void Xamarin.Forms.ISliderController.SendDragStarted();
    private sealed virtual override void Xamarin.Forms.ISliderController.SendDragCompleted();
    public sealed virtual IPlatformElementConfiguration`2<T, Slider> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Slider> <.ctor>b__11_0();
}
public enum Xamarin.Forms.SnapPointsAlignment : Enum {
    public int value__;
    public static SnapPointsAlignment Start;
    public static SnapPointsAlignment Center;
    public static SnapPointsAlignment End;
}
public enum Xamarin.Forms.SnapPointsType : Enum {
    public int value__;
    public static SnapPointsType None;
    public static SnapPointsType Mandatory;
    public static SnapPointsType MandatorySingle;
}
[TypeConverterAttribute("Xamarin.Forms.BrushTypeConverter")]
public class Xamarin.Forms.SolidColorBrush : Brush {
    public static BindableProperty ColorProperty;
    public bool IsEmpty { get; }
    public Color Color { get; public set; }
    public SolidColorBrush(Color color);
    private static SolidColorBrush();
    public virtual bool get_IsEmpty();
    public Color get_Color();
    public void set_Color(Color value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ContentPropertyAttribute("Text")]
public class Xamarin.Forms.Span : GestureElement {
    internal MergedStyle _mergedStyle;
    public static BindableProperty StyleProperty;
    public static BindableProperty TextDecorationsProperty;
    public static BindableProperty TextTransformProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Foreground is obsolete as of version 3.1.0. Please use the TextColor property instead.")]
public static BindableProperty ForegroundColorProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty FontProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty LineHeightProperty;
    public Style Style { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color TextColor { get; public set; }
    public double CharacterSpacing { get; public set; }
    public TextTransform TextTransform { get; public set; }
    public Color ForegroundColor { get; public set; }
    public string Text { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Font is obsolete as of version 1.3.0. Please use the Font properties directly.")]
public Font Font { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public TextDecorations TextDecorations { get; public set; }
    public double LineHeight { get; public set; }
    private static Span();
    public sealed virtual Style get_Style();
    public void set_Style(Style value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    public virtual string UpdateFormsText(string source, TextTransform textTransform);
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    public string get_Text();
    public void set_Text(string value);
    public Font get_Font();
    public void set_Font(Font value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    public sealed virtual TextDecorations get_TextDecorations();
    public sealed virtual void set_TextDecorations(TextDecorations value);
    public sealed virtual double get_LineHeight();
    public void set_LineHeight(double value);
    protected virtual void OnBindingContextChanged();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    internal virtual void ValidateGesture(IGestureRecognizer gesture);
    private sealed virtual override void Xamarin.Forms.Internals.ILineHeightElement.OnLineHeightChanged(double oldValue, double newValue);
}
public class Xamarin.Forms.StackLayout : Layout`1<View> {
    public static BindableProperty OrientationProperty;
    public static BindableProperty SpacingProperty;
    private LayoutInformation _layoutInformation;
    private Lazy`1<PlatformConfigurationRegistry`1<StackLayout>> _platformConfigurationRegistry;
    public StackOrientation Orientation { get; public set; }
    public double Spacing { get; public set; }
    private static StackLayout();
    public sealed virtual IPlatformElementConfiguration`2<T, StackLayout> On();
    public StackOrientation get_Orientation();
    public void set_Orientation(StackOrientation value);
    public double get_Spacing();
    public void set_Spacing(double value);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    internal virtual void ComputeConstraintForView(View view);
    internal virtual void InvalidateMeasureInternal(InvalidationTrigger trigger);
    private void AlignOffAxis(LayoutInformation layout, StackOrientation orientation, double widthConstraint, double heightConstraint);
    private void CalculateLayout(LayoutInformation layout, double x, double y, double widthConstraint, double heightConstraint, bool processExpanders);
    private void CalculateNaiveLayout(LayoutInformation layout, StackOrientation orientation, double x, double y, double widthConstraint, double heightConstraint);
    private void CompressHorizontalLayout(LayoutInformation layout, double widthConstraint, double heightConstraint);
    private void CompressNaiveLayout(LayoutInformation layout, StackOrientation orientation, double widthConstraint, double heightConstraint);
    private void CompressVerticalLayout(LayoutInformation layout, double widthConstraint, double heightConstraint);
    private void ComputeConstraintForView(View view, bool isOnlyExpander);
    private bool HasVisibleChildren();
    private void ProcessExpanders(LayoutInformation layout, StackOrientation orientation, double x, double y, double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<StackLayout> <.ctor>b__4_0();
}
public enum Xamarin.Forms.StackOrientation : Enum {
    public int value__;
    public static StackOrientation Vertical;
    public static StackOrientation Horizontal;
}
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.StateRequested : EventArgs {
    [CompilerGeneratedAttribute]
private MediaElementState <State>k__BackingField;
    public MediaElementState State { get; }
    public StateRequested(MediaElementState state);
    [CompilerGeneratedAttribute]
public MediaElementState get_State();
}
public class Xamarin.Forms.StateTrigger : StateTriggerBase {
    public static BindableProperty IsActiveProperty;
    public bool IsActive { get; public set; }
    private static StateTrigger();
    public bool get_IsActive();
    public void set_IsActive(bool value);
    private static void OnIsActiveChanged(BindableObject bindable, object oldvalue, object newvalue);
    protected virtual void OnAttached();
    private void UpdateState();
}
public abstract class Xamarin.Forms.StateTriggerBase : BindableObject {
    private bool _isActive;
    [CompilerGeneratedAttribute]
private EventHandler IsActiveChanged;
    [CompilerGeneratedAttribute]
private VisualState <VisualState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    public bool IsActive { get; private set; }
    internal VisualState VisualState { get; internal set; }
    public bool IsAttached { get; private set; }
    [CompilerGeneratedAttribute]
public void add_IsActiveChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IsActiveChanged(EventHandler value);
    public bool get_IsActive();
    private void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
internal VisualState get_VisualState();
    [CompilerGeneratedAttribute]
internal void set_VisualState(VisualState value);
    [CompilerGeneratedAttribute]
public bool get_IsAttached();
    [CompilerGeneratedAttribute]
private void set_IsAttached(bool value);
    protected void SetActive(bool active);
    protected virtual void OnAttached();
    protected virtual void OnDetached();
    internal void SendAttached();
    internal void SendDetached();
}
[RenderWithAttribute("Xamarin.Forms.Platform._StepperRenderer")]
public class Xamarin.Forms.Stepper : View {
    public static BindableProperty MaximumProperty;
    public static BindableProperty MinimumProperty;
    public static BindableProperty ValueProperty;
    private int digits;
    public static BindableProperty IncrementProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Stepper>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValueChangedEventArgs> ValueChanged;
    [CompilerGeneratedAttribute]
private int <StepperPosition>k__BackingField;
    [ObsoleteAttribute("deprecated without replacement in 4.8.0")]
[EditorBrowsableAttribute("1")]
public static BindableProperty StepperPositionProperty;
    public double Increment { get; public set; }
    public double Maximum { get; public set; }
    public double Minimum { get; public set; }
    public double Value { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("deprecated without replacement in 4.8.0")]
public int StepperPosition { get; public set; }
    public Stepper(double min, double max, double val, double increment);
    private static Stepper();
    public double get_Increment();
    public void set_Increment(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Value();
    public void set_Value(double value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler`1<ValueChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler`1<ValueChangedEventArgs> value);
    public sealed virtual IPlatformElementConfiguration`2<T, Stepper> On();
    [CompilerGeneratedAttribute]
public int get_StepperPosition();
    [CompilerGeneratedAttribute]
public void set_StepperPosition(int value);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Stepper> <.ctor>b__6_0();
}
public class Xamarin.Forms.StreamImageSource : ImageSource {
    public static BindableProperty StreamProperty;
    public bool IsEmpty { get; }
    public Func`2<CancellationToken, Task`1<Stream>> Stream { get; public set; }
    private static StreamImageSource();
    public virtual bool get_IsEmpty();
    public virtual Func`2<CancellationToken, Task`1<Stream>> get_Stream();
    public virtual void set_Stream(Func`2<CancellationToken, Task`1<Stream>> value);
    protected virtual void OnPropertyChanged(string propertyName);
    [AsyncStateMachineAttribute("Xamarin.Forms.StreamImageSource/<Xamarin-Forms-IStreamImageSource-GetStreamAsync>d__7")]
private sealed virtual override Task`1<Stream> Xamarin.Forms.IStreamImageSource.GetStreamAsync(CancellationToken userToken);
}
internal class Xamarin.Forms.StreamWrapper : Stream {
    private Stream _wrapped;
    private IDisposable _additionalDisposable;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamWrapper(Stream wrapped);
    public StreamWrapper(Stream wrapped, IDisposable additionalDisposable);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.StreamWrapper/<GetStreamAsync>d__24")]
public static Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken, HttpClient client);
}
public enum Xamarin.Forms.Stretch : Enum {
    public int value__;
    public static Stretch None;
    public static Stretch Fill;
    public static Stretch Uniform;
    public static Stretch UniformToFill;
}
public class Xamarin.Forms.StructuredItemsView : ItemsView {
    public static BindableProperty HeaderProperty;
    public static BindableProperty HeaderTemplateProperty;
    public static BindableProperty FooterProperty;
    public static BindableProperty FooterTemplateProperty;
    public static BindableProperty ItemsLayoutProperty;
    public static BindableProperty ItemSizingStrategyProperty;
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public object Footer { get; public set; }
    public DataTemplate FooterTemplate { get; public set; }
    public IItemsLayout ItemsLayout { get; public set; }
    public ItemSizingStrategy ItemSizingStrategy { get; public set; }
    private static StructuredItemsView();
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public object get_Footer();
    public void set_Footer(object value);
    public DataTemplate get_FooterTemplate();
    public void set_FooterTemplate(DataTemplate value);
    public IItemsLayout get_ItemsLayout();
    public void set_ItemsLayout(IItemsLayout value);
    public ItemSizingStrategy get_ItemSizingStrategy();
    public void set_ItemSizingStrategy(ItemSizingStrategy value);
}
[ContentPropertyAttribute("Setters")]
public class Xamarin.Forms.Style : object {
    internal static string StyleClassPrefix;
    private static int CleanupTrigger;
    private int _cleanupThreshold;
    private BindableProperty _basedOnResourceProperty;
    private List`1<WeakReference`1<BindableObject>> _targets;
    private Style _basedOnStyle;
    private string _baseResourceKey;
    private IList`1<Behavior> _behaviors;
    private IList`1<TriggerBase> _triggers;
    [CompilerGeneratedAttribute]
private bool <ApplyToDerivedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCascade>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Setter> <Setters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    public bool ApplyToDerivedTypes { get; public set; }
    public Style BasedOn { get; public set; }
    public string BaseResourceKey { get; public set; }
    public IList`1<Behavior> Behaviors { get; }
    public bool CanCascade { get; public set; }
    public string Class { get; public set; }
    public IList`1<Setter> Setters { get; }
    public IList`1<TriggerBase> Triggers { get; }
    public Type TargetType { get; }
    public Style(Type targetType);
    [CompilerGeneratedAttribute]
public bool get_ApplyToDerivedTypes();
    [CompilerGeneratedAttribute]
public void set_ApplyToDerivedTypes(bool value);
    public Style get_BasedOn();
    public void set_BasedOn(Style value);
    public string get_BaseResourceKey();
    public void set_BaseResourceKey(string value);
    public IList`1<Behavior> get_Behaviors();
    [CompilerGeneratedAttribute]
public bool get_CanCascade();
    [CompilerGeneratedAttribute]
public void set_CanCascade(bool value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public IList`1<Setter> get_Setters();
    public IList`1<TriggerBase> get_Triggers();
    private sealed virtual override void Xamarin.Forms.IStyle.Apply(BindableObject bindable);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TargetType();
    private sealed virtual override void Xamarin.Forms.IStyle.UnApply(BindableObject bindable);
    internal bool CanBeAppliedTo(Type targetType);
    private void ApplyCore(BindableObject bindable, Style basedOn);
    private void BasedOnChanged(Style oldValue, Style newValue);
    private Style GetBasedOnResource(BindableObject bindable);
    private static void OnBasedOnResourceChanged(BindableObject bindable, object oldValue, object newValue);
    private void UnApplyCore(BindableObject bindable, Style basedOn);
    private bool ValidateBasedOn(Style value);
    private void CleanUpWeakReferences();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.StyleSheets.CharExtensions : object {
    [ExtensionAttribute]
public static bool IsW(char c);
    [ExtensionAttribute]
public static bool IsNmStart(char c);
    [ExtensionAttribute]
public static bool IsNmChar(char c);
}
internal class Xamarin.Forms.StyleSheets.CssReader : TextReader {
    private TextReader _reader;
    private Queue`1<char> _cache;
    public CssReader(TextReader reader);
    public virtual int Peek();
    public virtual int Read();
}
internal interface Xamarin.Forms.StyleSheets.IStylable {
    public abstract virtual BindableProperty GetProperty(string key, bool inheriting);
}
internal interface Xamarin.Forms.StyleSheets.IStyleSelectable {
    public String[] NameAndBases { get; }
    public string Id { get; }
    public IStyleSelectable Parent { get; }
    public IList`1<string> Classes { get; }
    public IEnumerable`1<IStyleSelectable> Children { get; }
    public abstract virtual String[] get_NameAndBases();
    public abstract virtual string get_Id();
    public abstract virtual IStyleSelectable get_Parent();
    public abstract virtual IList`1<string> get_Classes();
    public abstract virtual IEnumerable`1<IStyleSelectable> get_Children();
}
internal abstract class Xamarin.Forms.StyleSheets.Selector : object {
    internal static Selector Invalid;
    internal static Selector All;
    private static Selector();
    public static Selector Parse(CssReader reader, char stopChar);
    private static void SetCurrentSelector(Selector& root, Selector& workingRoot, Operator& workingRootParent, Operator op, Selector sel);
    public abstract virtual bool Matches(IStyleSelectable styleable);
}
internal class Xamarin.Forms.StyleSheets.Style : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Declarations>k__BackingField;
    private Dictionary`2<KeyValuePair`2<string, string>, object> convertedValues;
    public IDictionary`2<string, string> Declarations { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Declarations();
    [CompilerGeneratedAttribute]
public void set_Declarations(IDictionary`2<string, string> value);
    public static Style Parse(CssReader reader, char stopChar);
    public void Apply(VisualElement styleable, bool inheriting);
    private static object Convert(object target, object value, BindableProperty property);
    public void UnApply(IStylable styleable);
}
[AttributeUsageAttribute("1")]
internal class Xamarin.Forms.StyleSheets.StylePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CssPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindablePropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyOwnerType>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableProperty <BindableProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    public string CssPropertyName { get; }
    public string BindablePropertyName { get; }
    public Type TargetType { get; }
    public Type PropertyOwnerType { get; public set; }
    public BindableProperty BindableProperty { get; public set; }
    public bool Inherited { get; public set; }
    public StylePropertyAttribute(string cssPropertyName, Type targetType, string bindablePropertyName);
    [CompilerGeneratedAttribute]
public string get_CssPropertyName();
    [CompilerGeneratedAttribute]
public string get_BindablePropertyName();
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public Type get_PropertyOwnerType();
    [CompilerGeneratedAttribute]
public void set_PropertyOwnerType(Type value);
    [CompilerGeneratedAttribute]
public BindableProperty get_BindableProperty();
    [CompilerGeneratedAttribute]
public void set_BindableProperty(BindableProperty value);
    [CompilerGeneratedAttribute]
public bool get_Inherited();
    [CompilerGeneratedAttribute]
public void set_Inherited(bool value);
}
public class Xamarin.Forms.StyleSheets.StyleSheet : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<Selector, Style> <Styles>k__BackingField;
    internal IDictionary`2<Selector, Style> Styles { get; internal set; }
    private Type Xamarin.Forms.IStyle.TargetType { get; }
    [CompilerGeneratedAttribute]
internal IDictionary`2<Selector, Style> get_Styles();
    [CompilerGeneratedAttribute]
internal void set_Styles(IDictionary`2<Selector, Style> value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("use FromResource()")]
public static StyleSheet FromAssemblyResource(Assembly assembly, string resourceId, IXmlLineInfo lineInfo);
    [EditorBrowsableAttribute("1")]
public static StyleSheet FromResource(string resourcePath, Assembly assembly, IXmlLineInfo lineInfo);
    [EditorBrowsableAttribute("1")]
public static StyleSheet FromString(string stylesheet);
    public static StyleSheet FromReader(TextReader reader);
    private static void Parse(StyleSheet sheet, CssReader reader);
    private sealed virtual override Type Xamarin.Forms.IStyle.get_TargetType();
    private sealed virtual override void Xamarin.Forms.IStyle.Apply(BindableObject bindable);
    private void Apply(Element styleable);
    private sealed virtual override void Xamarin.Forms.IStyle.UnApply(BindableObject bindable);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.StyleSheets.StyleSheetExtensions : object {
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Xamarin.Forms.StyleSheets.StyleSheetExtensions/<GetStyleSheets>d__0")]
public static IEnumerable`1<StyleSheet> GetStyleSheets(IResourcesProvider resourcesProvider);
}
internal class Xamarin.Forms.StyleSheets.StyleSheetServiceProvider : object {
    private IProvideValueTarget vtProvider;
    private IConverterOptions convOptions { get; }
    public StyleSheetServiceProvider(object targetObject, object targetProperty);
    private IConverterOptions get_convOptions();
    public sealed virtual object GetService(Type serviceType);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.StyleSheets.TextReaderExtensions : object {
    [ExtensionAttribute]
public static string ReadIdent(TextReader reader);
    [ExtensionAttribute]
public static string ReadName(TextReader reader);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Char[] limit);
    [ExtensionAttribute]
public static void SkipWhiteSpaces(TextReader reader);
}
public enum Xamarin.Forms.SweepDirection : Enum {
    public int value__;
    public static SweepDirection CounterClockwise;
    public static SweepDirection Clockwise;
}
public enum Xamarin.Forms.SwipeBehaviorOnInvoked : Enum {
    public int value__;
    public static SwipeBehaviorOnInvoked Auto;
    public static SwipeBehaviorOnInvoked Close;
    public static SwipeBehaviorOnInvoked RemainOpen;
}
public class Xamarin.Forms.SwipeChangingEventArgs : BaseSwipeEventArgs {
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    public double Offset { get; public set; }
    public SwipeChangingEventArgs(SwipeDirection swipeDirection, double offset);
    [CompilerGeneratedAttribute]
public double get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(double value);
}
public class Xamarin.Forms.SwipedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private SwipeDirection <Direction>k__BackingField;
    public object Parameter { get; private set; }
    public SwipeDirection Direction { get; private set; }
    public SwipedEventArgs(object parameter, SwipeDirection direction);
    [CompilerGeneratedAttribute]
public object get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(object value);
    [CompilerGeneratedAttribute]
public SwipeDirection get_Direction();
    [CompilerGeneratedAttribute]
private void set_Direction(SwipeDirection value);
}
[FlagsAttribute]
public enum Xamarin.Forms.SwipeDirection : Enum {
    public int value__;
    public static SwipeDirection Right;
    public static SwipeDirection Left;
    public static SwipeDirection Up;
    public static SwipeDirection Down;
}
[ExtensionAttribute]
internal static class Xamarin.Forms.SwipeDirectionExtensions : object {
    [ExtensionAttribute]
public static bool IsLeft(SwipeDirection self);
    [ExtensionAttribute]
public static bool IsRight(SwipeDirection self);
    [ExtensionAttribute]
public static bool IsUp(SwipeDirection self);
    [ExtensionAttribute]
public static bool IsDown(SwipeDirection self);
}
public class Xamarin.Forms.SwipeEndedEventArgs : BaseSwipeEventArgs {
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    public bool IsOpen { get; public set; }
    public SwipeEndedEventArgs(SwipeDirection swipeDirection, bool isOpen);
    [CompilerGeneratedAttribute]
public bool get_IsOpen();
    [CompilerGeneratedAttribute]
public void set_IsOpen(bool value);
}
public class Xamarin.Forms.SwipeGestureRecognizer : GestureRecognizer {
    private static UInt32 DefaultSwipeThreshold;
    private double _totalX;
    private double _totalY;
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty DirectionProperty;
    public static BindableProperty ThresholdProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<SwipedEventArgs> Swiped;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public SwipeDirection Direction { get; public set; }
    public UInt32 Threshold { get; public set; }
    private static SwipeGestureRecognizer();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public SwipeDirection get_Direction();
    public void set_Direction(SwipeDirection value);
    public UInt32 get_Threshold();
    public void set_Threshold(UInt32 value);
    [CompilerGeneratedAttribute]
public void add_Swiped(EventHandler`1<SwipedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Swiped(EventHandler`1<SwipedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.ISwipeGestureController.SendSwipe(Element sender, double totalX, double totalY);
    private sealed virtual override bool Xamarin.Forms.ISwipeGestureController.DetectSwipe(View sender, SwipeDirection direction);
    public void SendSwiped(View sender, SwipeDirection direction);
}
public class Xamarin.Forms.SwipeItem : MenuItem {
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty IsVisibleProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Invoked;
    public Color BackgroundColor { get; public set; }
    public bool IsVisible { get; public set; }
    private static SwipeItem();
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invoked(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invoked(EventHandler`1<EventArgs> value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void OnInvoked();
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.SwipeItems : Element {
    private ObservableCollection`1<ISwipeItem> _swipeItems;
    public static BindableProperty ModeProperty;
    public static BindableProperty SwipeBehaviorOnInvokedProperty;
    public SwipeMode Mode { get; public set; }
    public SwipeBehaviorOnInvoked SwipeBehaviorOnInvoked { get; public set; }
    public ISwipeItem Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SwipeItems(IEnumerable`1<ISwipeItem> swipeItems);
    private static SwipeItems();
    public SwipeMode get_Mode();
    public void set_Mode(SwipeMode value);
    public SwipeBehaviorOnInvoked get_SwipeBehaviorOnInvoked();
    public void set_SwipeBehaviorOnInvoked(SwipeBehaviorOnInvoked value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual ISwipeItem get_Item(int index);
    public sealed virtual void set_Item(int index, ISwipeItem value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(ISwipeItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ISwipeItem item);
    public sealed virtual void CopyTo(ISwipeItem[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<ISwipeItem> GetEnumerator();
    public sealed virtual int IndexOf(ISwipeItem item);
    public sealed virtual void Insert(int index, ISwipeItem item);
    public sealed virtual bool Remove(ISwipeItem item);
    public sealed virtual void RemoveAt(int index);
    protected virtual void OnBindingContextChanged();
    private void OnSwipeItemsChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Xamarin.Forms.SwipeItemView : ContentView {
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Invoked;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    private static SwipeItemView();
    public sealed virtual ICommand get_Command();
    public sealed virtual void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public sealed virtual void set_CommandParameter(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invoked(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invoked(EventHandler`1<EventArgs> value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void OnInvoked();
    private void OnCommandChanged();
    private void OnCommandChanging();
    private void OnCommandParameterChanged();
    private void OnCommandCanExecuteChanged(object sender, EventArgs eventArgs);
}
public enum Xamarin.Forms.SwipeMode : Enum {
    public int value__;
    public static SwipeMode Reveal;
    public static SwipeMode Execute;
}
public class Xamarin.Forms.SwipeStartedEventArgs : BaseSwipeEventArgs {
    public SwipeStartedEventArgs(SwipeDirection swipeDirection);
}
[ContentPropertyAttribute("Content")]
[RenderWithAttribute("Xamarin.Forms.Platform._SwipeViewRenderer")]
public class Xamarin.Forms.SwipeView : ContentView {
    private Lazy`1<PlatformConfigurationRegistry`1<SwipeView>> _platformConfigurationRegistry;
    public static BindableProperty LeftItemsProperty;
    public static BindableProperty RightItemsProperty;
    public static BindableProperty TopItemsProperty;
    public static BindableProperty BottomItemsProperty;
    [CompilerGeneratedAttribute]
private bool <Xamarin.Forms.ISwipeViewController.IsOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SwipeStartedEventArgs> SwipeStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<SwipeChangingEventArgs> SwipeChanging;
    [CompilerGeneratedAttribute]
private EventHandler`1<SwipeEndedEventArgs> SwipeEnded;
    [CompilerGeneratedAttribute]
private EventHandler`1<OpenSwipeEventArgs> OpenRequested;
    [CompilerGeneratedAttribute]
private EventHandler CloseRequested;
    public SwipeItems LeftItems { get; public set; }
    public SwipeItems RightItems { get; public set; }
    public SwipeItems TopItems { get; public set; }
    public SwipeItems BottomItems { get; public set; }
    private bool Xamarin.Forms.ISwipeViewController.IsOpen { get; private set; }
    private static SwipeView();
    [EditorBrowsableAttribute("1")]
public static void VerifySwipeViewFlagEnabled(string constructorHint, string memberName);
    public SwipeItems get_LeftItems();
    public void set_LeftItems(SwipeItems value);
    public SwipeItems get_RightItems();
    public void set_RightItems(SwipeItems value);
    public SwipeItems get_TopItems();
    public void set_TopItems(SwipeItems value);
    public SwipeItems get_BottomItems();
    public void set_BottomItems(SwipeItems value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool Xamarin.Forms.ISwipeViewController.get_IsOpen();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.ISwipeViewController.set_IsOpen(bool value);
    private static void OnSwipeItemsChanged(BindableObject bindable, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public void add_SwipeStarted(EventHandler`1<SwipeStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SwipeStarted(EventHandler`1<SwipeStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SwipeChanging(EventHandler`1<SwipeChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SwipeChanging(EventHandler`1<SwipeChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SwipeEnded(EventHandler`1<SwipeEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SwipeEnded(EventHandler`1<SwipeEndedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OpenRequested(EventHandler`1<OpenSwipeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OpenRequested(EventHandler`1<OpenSwipeEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CloseRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CloseRequested(EventHandler value);
    public void Open(OpenSwipeItem openSwipeItem);
    public void Close();
    private sealed virtual override void Xamarin.Forms.ISwipeViewController.SendSwipeStarted(SwipeStartedEventArgs args);
    private sealed virtual override void Xamarin.Forms.ISwipeViewController.SendSwipeChanging(SwipeChangingEventArgs args);
    private sealed virtual override void Xamarin.Forms.ISwipeViewController.SendSwipeEnded(SwipeEndedEventArgs args);
    protected virtual void OnBindingContextChanged();
    private SwipeItems SwipeItemsDefaultValueCreator();
    private static object SwipeItemsDefaultValueCreator(BindableObject bindable);
    public sealed virtual IPlatformElementConfiguration`2<T, SwipeView> On();
    private void UpdateSwipeItemsParent(SwipeItems swipeItems);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<SwipeView> <.ctor>b__1_0();
}
[RenderWithAttribute("Xamarin.Forms.Platform._SwitchRenderer")]
public class Xamarin.Forms.Switch : View {
    public static string SwitchOnVisualState;
    public static string SwitchOffVisualState;
    public static BindableProperty IsToggledProperty;
    public static BindableProperty OnColorProperty;
    public static BindableProperty ThumbColorProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<Switch>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler`1<ToggledEventArgs> Toggled;
    public Color OnColor { get; public set; }
    public Color ThumbColor { get; public set; }
    public bool IsToggled { get; public set; }
    private static Switch();
    public Color get_OnColor();
    public void set_OnColor(Color value);
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
    public bool get_IsToggled();
    public void set_IsToggled(bool value);
    protected internal virtual void ChangeVisualState();
    [CompilerGeneratedAttribute]
public void add_Toggled(EventHandler`1<ToggledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Toggled(EventHandler`1<ToggledEventArgs> value);
    public sealed virtual IPlatformElementConfiguration`2<T, Switch> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<Switch> <.ctor>b__12_0();
}
public class Xamarin.Forms.SwitchCell : Cell {
    public static BindableProperty OnProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty OnColorProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<ToggledEventArgs> OnChanged;
    public Color OnColor { get; public set; }
    public bool On { get; public set; }
    public string Text { get; public set; }
    private static SwitchCell();
    public Color get_OnColor();
    public void set_OnColor(Color value);
    public bool get_On();
    public void set_On(bool value);
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public void add_OnChanged(EventHandler`1<ToggledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnChanged(EventHandler`1<ToggledEventArgs> value);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.SynchronizedList`1 : object {
    private List`1<T> _list;
    private ReadOnlyCollection`1<T> _snapshot;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public T Item { get; public set; }
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void RemoveAt(int index);
}
[EditorBrowsableAttribute("0")]
public class Xamarin.Forms.Tab : ShellSection {
}
[EditorBrowsableAttribute("0")]
public class Xamarin.Forms.TabBar : ShellItem {
}
[RenderWithAttribute("Xamarin.Forms.Platform._TabbedPageRenderer")]
public class Xamarin.Forms.TabbedPage : MultiPage`1<Page> {
    public static BindableProperty BarBackgroundColorProperty;
    public static BindableProperty BarBackgroundProperty;
    public static BindableProperty BarTextColorProperty;
    public static BindableProperty UnselectedTabColorProperty;
    public static BindableProperty SelectedTabColorProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<TabbedPage>> _platformConfigurationRegistry;
    public Color BarBackgroundColor { get; public set; }
    public Brush BarBackground { get; public set; }
    public Color BarTextColor { get; public set; }
    public Color UnselectedTabColor { get; public set; }
    public Color SelectedTabColor { get; public set; }
    private static TabbedPage();
    public sealed virtual Color get_BarBackgroundColor();
    public void set_BarBackgroundColor(Color value);
    public sealed virtual Brush get_BarBackground();
    public void set_BarBackground(Brush value);
    public sealed virtual Color get_BarTextColor();
    public void set_BarTextColor(Color value);
    public Color get_UnselectedTabColor();
    public void set_UnselectedTabColor(Color value);
    public Color get_SelectedTabColor();
    public void set_SelectedTabColor(Color value);
    protected virtual Page CreateDefault(object item);
    public sealed virtual IPlatformElementConfiguration`2<T, TabbedPage> On();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<TabbedPage> <.ctor>b__22_0();
}
[ExtensionAttribute]
public static class Xamarin.Forms.TabIndexExtensions : object {
    [ExtensionAttribute]
public static SortedDictionary`2<int, List`1<ITabStopElement>> GetSortedTabIndexesOnParentPage(VisualElement element);
    [ExtensionAttribute]
public static IDictionary`2<int, List`1<ITabStopElement>> GetTabIndexesOnParentPage(ITabStopElement element, Int32& countChildrenWithTabStopWithoutThis);
    [ExtensionAttribute]
public static ITabStopElement FindNextElement(ITabStopElement element, bool forwardDirection, IDictionary`2<int, List`1<ITabStopElement>> tabIndexes, Int32& tabIndex);
    private static bool IsTabStop(BindableObject e);
}
public enum Xamarin.Forms.TableIntent : Enum {
    public int value__;
    public static TableIntent Menu;
    public static TableIntent Settings;
    public static TableIntent Form;
    public static TableIntent Data;
}
public class Xamarin.Forms.TableRoot : TableSectionBase`1<TableSection> {
    [CompilerGeneratedAttribute]
private EventHandler`1<ChildCollectionChangedEventArgs> SectionCollectionChanged;
    public TableRoot(string title);
    [CompilerGeneratedAttribute]
internal void add_SectionCollectionChanged(EventHandler`1<ChildCollectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_SectionCollectionChanged(EventHandler`1<ChildCollectionChangedEventArgs> value);
    private void ChildCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void ChildPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    private void SetupEvents();
    [CompilerGeneratedAttribute]
private void <SetupEvents>b__7_0(object sender, NotifyCollectionChangedEventArgs args);
}
public class Xamarin.Forms.TableSection : TableSectionBase`1<Cell> {
    public TableSection(string title);
}
public abstract class Xamarin.Forms.TableSectionBase : BindableObject {
    public static BindableProperty TitleProperty;
    public static BindableProperty TextColorProperty;
    public string Title { get; public set; }
    public Color TextColor { get; public set; }
    protected TableSectionBase(string title);
    private static TableSectionBase();
    public string get_Title();
    public void set_Title(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
}
[DefaultMemberAttribute("Item")]
public abstract class Xamarin.Forms.TableSectionBase`1 : TableSectionBase {
    private ObservableCollection`1<T> _children;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public T Item { get; public set; }
    protected TableSectionBase`1(string title);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void Add(IEnumerable`1<T> items);
    protected virtual void OnBindingContextChanged();
    private void OnChildrenChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
}
[ContentPropertyAttribute("Root")]
[RenderWithAttribute("Xamarin.Forms.Platform._TableViewRenderer")]
public class Xamarin.Forms.TableView : View {
    public static BindableProperty RowHeightProperty;
    public static BindableProperty HasUnevenRowsProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<TableView>> _platformConfigurationRegistry;
    private TableSectionModel _tableModel;
    private TableIntent _intent;
    private TableModel _model;
    [CompilerGeneratedAttribute]
private EventHandler ModelChanged;
    public bool HasUnevenRows { get; public set; }
    public TableIntent Intent { get; public set; }
    public TableRoot Root { get; public set; }
    public int RowHeight { get; public set; }
    [EditorBrowsableAttribute("1")]
public TableModel Model { get; public set; }
    private ITableModel Xamarin.Forms.ITableViewController.Model { get; }
    public TableView(TableRoot root);
    private static TableView();
    public bool get_HasUnevenRows();
    public void set_HasUnevenRows(bool value);
    public TableIntent get_Intent();
    public void set_Intent(TableIntent value);
    public TableRoot get_Root();
    public void set_Root(TableRoot value);
    public int get_RowHeight();
    public void set_RowHeight(int value);
    public TableModel get_Model();
    public void set_Model(TableModel value);
    private sealed virtual override ITableModel Xamarin.Forms.ITableViewController.get_Model();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnModelChanged();
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ModelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ModelChanged(EventHandler value);
    public sealed virtual IPlatformElementConfiguration`2<T, TableView> On();
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnSectionCollectionChanged(object sender, ChildCollectionChangedEventArgs childCollectionChangedEventArgs);
    private void OnTableModelRootPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<TableView> <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private void <set_Root>b__16_1(Cell cell);
    [CompilerGeneratedAttribute]
private void <OnSectionCollectionChanged>b__33_0(Cell cell);
}
public enum Xamarin.Forms.TabsStyle : Enum {
    public int value__;
    public static TabsStyle Default;
    public static TabsStyle Hidden;
    public static TabsStyle Icons;
    public static TabsStyle OnNavigation;
    public static TabsStyle OnBottom;
}
public class Xamarin.Forms.TapGestureRecognizer : GestureRecognizer {
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty NumberOfTapsRequiredProperty;
    [CompilerGeneratedAttribute]
private EventHandler Tapped;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("TappedCallbackProperty is obsolete as of version 1.0.2. Please use Command instead.")]
public static BindableProperty TappedCallbackProperty;
    [ObsoleteAttribute("TappedCallbackParameterProperty is obsolete as of version 1.0.2. Please use Command instead.")]
[EditorBrowsableAttribute("1")]
public static BindableProperty TappedCallbackParameterProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public int NumberOfTapsRequired { get; public set; }
    [ObsoleteAttribute("TappedCallback is obsolete as of version 1.0.2. Please use Command instead.")]
[EditorBrowsableAttribute("1")]
public Action`2<View, object> TappedCallback { get; public set; }
    [ObsoleteAttribute("TappedCallbackParameter is obsolete as of version 1.0.2. Please use Command instead.")]
[EditorBrowsableAttribute("1")]
public object TappedCallbackParameter { get; public set; }
    [ObsoleteAttribute("TapGestureRecognizer(Action<View, object> tappedCallback) is obsolete as of version 1.0.2. Please use Command instead.")]
[EditorBrowsableAttribute("1")]
public TapGestureRecognizer(Action`2<View, object> tappedCallback);
    [ObsoleteAttribute("TapGestureRecognizer(Action<View> tappedCallback) is obsolete as of version 1.0.2. Please use Command instead.")]
[EditorBrowsableAttribute("1")]
public TapGestureRecognizer(Action`1<View> tappedCallback);
    private static TapGestureRecognizer();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public int get_NumberOfTapsRequired();
    public void set_NumberOfTapsRequired(int value);
    [CompilerGeneratedAttribute]
public void add_Tapped(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Tapped(EventHandler value);
    [EditorBrowsableAttribute("1")]
public void SendTapped(View sender);
    public Action`2<View, object> get_TappedCallback();
    public void set_TappedCallback(Action`2<View, object> value);
    public object get_TappedCallbackParameter();
    public void set_TappedCallbackParameter(object value);
}
public class Xamarin.Forms.TappedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Parameter>k__BackingField;
    public object Parameter { get; private set; }
    public TappedEventArgs(object parameter);
    [CompilerGeneratedAttribute]
public object get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(object value);
}
public enum Xamarin.Forms.TargetIdiom : Enum {
    public int value__;
    public static TargetIdiom Unsupported;
    public static TargetIdiom Phone;
    public static TargetIdiom Tablet;
    public static TargetIdiom Desktop;
    public static TargetIdiom TV;
    public static TargetIdiom Watch;
}
[ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
public enum Xamarin.Forms.TargetPlatform : Enum {
    public int value__;
    public static TargetPlatform Other;
    public static TargetPlatform iOS;
    public static TargetPlatform Android;
    public static TargetPlatform WinPhone;
    public static TargetPlatform Windows;
}
internal class Xamarin.Forms.TelephoneKeyboard : Keyboard {
}
[ObsoleteAttribute("Use Binding.Source=RelativeBindingSource.TemplatedParent")]
public class Xamarin.Forms.TemplateBinding : BindingBase {
    internal static string SelfPath;
    private IValueConverter _converter;
    private object _converterParameter;
    private BindingExpression _expression;
    private string _path;
    public IValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public string Path { get; public set; }
    public TemplateBinding(string path, BindingMode mode, IValueConverter converter, object converterParameter, string stringFormat);
    public IValueConverter get_Converter();
    public void set_Converter(IValueConverter value);
    public object get_ConverterParameter();
    public void set_ConverterParameter(object value);
    public string get_Path();
    public void set_Path(string value);
    internal virtual void Apply(bool fromTarget);
    [AsyncStateMachineAttribute("Xamarin.Forms.TemplateBinding/<Apply>d__17")]
internal virtual void Apply(object newContext, BindableObject bindObj, BindableProperty targetProperty, bool fromBindingContextChanged);
    internal virtual BindingBase Clone();
    internal virtual object GetSourceValue(object value, Type targetPropertyType);
    internal virtual object GetTargetValue(object value, Type sourcePropertyType);
    internal virtual void Unapply(bool fromBindingContextChanged);
    private void ApplyInner(Element templatedParent, BindableObject bindableObject, BindableProperty targetProperty);
    private BindingExpression GetBindingExpression(string path);
    [DebuggerHiddenAttribute]
[CompilerGeneratedAttribute]
private void <>n__0(object context, BindableObject bindObj, BindableProperty targetProperty, bool fromBindingContextChanged);
}
public class Xamarin.Forms.TemplatedPage : Page {
    public static BindableProperty ControlTemplateProperty;
    [CompilerGeneratedAttribute]
private Element <Xamarin.Forms.IControlTemplated.TemplateRoot>k__BackingField;
    public ControlTemplate ControlTemplate { get; public set; }
    private IList`1<Element> Xamarin.Forms.IControlTemplated.InternalChildren { get; }
    private Element Xamarin.Forms.IControlTemplated.TemplateRoot { get; private set; }
    private static TemplatedPage();
    public sealed virtual ControlTemplate get_ControlTemplate();
    public sealed virtual void set_ControlTemplate(ControlTemplate value);
    private sealed virtual override IList`1<Element> Xamarin.Forms.IControlTemplated.get_InternalChildren();
    [CompilerGeneratedAttribute]
private sealed virtual override Element Xamarin.Forms.IControlTemplated.get_TemplateRoot();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.IControlTemplated.set_TemplateRoot(Element value);
    internal virtual void ComputeConstraintForView(View view);
    internal virtual void SetChildInheritedBindingContext(Element child, object context);
    private sealed virtual override void Xamarin.Forms.IControlTemplated.OnControlTemplateChanged(ControlTemplate oldValue, ControlTemplate newValue);
    internal virtual void OnControlTemplateChanged(ControlTemplate oldValue, ControlTemplate newValue);
    private sealed virtual override void Xamarin.Forms.IControlTemplated.OnApplyTemplate();
    protected virtual void OnApplyTemplate();
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    protected object GetTemplateChild(string name);
}
public class Xamarin.Forms.TemplatedView : Layout {
    public static BindableProperty ControlTemplateProperty;
    [CompilerGeneratedAttribute]
private Element <Xamarin.Forms.IControlTemplated.TemplateRoot>k__BackingField;
    public ControlTemplate ControlTemplate { get; public set; }
    private IList`1<Element> Xamarin.Forms.IControlTemplated.InternalChildren { get; }
    private Element Xamarin.Forms.IControlTemplated.TemplateRoot { get; private set; }
    private static TemplatedView();
    public sealed virtual ControlTemplate get_ControlTemplate();
    public sealed virtual void set_ControlTemplate(ControlTemplate value);
    private sealed virtual override IList`1<Element> Xamarin.Forms.IControlTemplated.get_InternalChildren();
    [CompilerGeneratedAttribute]
private sealed virtual override Element Xamarin.Forms.IControlTemplated.get_TemplateRoot();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xamarin.Forms.IControlTemplated.set_TemplateRoot(Element value);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    internal virtual void ComputeConstraintForView(View view);
    internal virtual void SetChildInheritedBindingContext(Element child, object context);
    private sealed virtual override void Xamarin.Forms.IControlTemplated.OnControlTemplateChanged(ControlTemplate oldValue, ControlTemplate newValue);
    internal virtual void OnControlTemplateChanged(ControlTemplate oldValue, ControlTemplate newValue);
    private sealed virtual override void Xamarin.Forms.IControlTemplated.OnApplyTemplate();
    protected virtual void OnApplyTemplate();
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    protected object GetTemplateChild(string name);
}
[ExtensionAttribute]
public static class Xamarin.Forms.TemplateExtensions : object {
    [ExtensionAttribute]
public static void SetBinding(DataTemplate self, BindableProperty targetProperty, string path);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.TemplateUtilities : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.TemplateUtilities/<FindTemplatedParentAsync>d__0")]
public static Task`1<Element> FindTemplatedParentAsync(Element element);
    public static Task`1<Element> GetRealParentAsync(Element element);
    public static void OnContentChanged(BindableObject bindable, object oldValue, object newValue);
    public static void OnControlTemplateChanged(BindableObject bindable, object oldValue, object newValue);
    [ExtensionAttribute]
public static object GetTemplateChild(IControlTemplated controlTemplated, string name);
    internal static void OnChildRemoved(IControlTemplated controlTemplated, Element removedChild);
}
[TypeConverterAttribute("Xamarin.Forms.TextAlignmentConverter")]
public enum Xamarin.Forms.TextAlignment : Enum {
    public int value__;
    public static TextAlignment Start;
    public static TextAlignment Center;
    public static TextAlignment End;
}
[TypeConversionAttribute("Xamarin.Forms.TextAlignment")]
public class Xamarin.Forms.TextAlignmentConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
internal static class Xamarin.Forms.TextAlignmentElement : object {
    public static BindableProperty HorizontalTextAlignmentProperty;
    public static BindableProperty VerticalTextAlignmentProperty;
    private static TextAlignmentElement();
    private static void OnHorizontalTextAlignmentPropertyChanged(BindableObject bindable, object oldValue, object newValue);
}
public class Xamarin.Forms.TextCell : Cell {
    public static BindableProperty CommandProperty;
    public static BindableProperty CommandParameterProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty DetailProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty DetailColorProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public string Detail { get; public set; }
    public Color DetailColor { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    private static TextCell();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public string get_Detail();
    public void set_Detail(string value);
    public Color get_DetailColor();
    public void set_DetailColor(Color value);
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    protected internal virtual void OnTapped();
    private void OnCommandCanExecuteChanged(object sender, EventArgs eventArgs);
}
public class Xamarin.Forms.TextChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <NewTextValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldTextValue>k__BackingField;
    public string NewTextValue { get; private set; }
    public string OldTextValue { get; private set; }
    public TextChangedEventArgs(string oldTextValue, string newTextValue);
    [CompilerGeneratedAttribute]
public string get_NewTextValue();
    [CompilerGeneratedAttribute]
private void set_NewTextValue(string value);
    [CompilerGeneratedAttribute]
public string get_OldTextValue();
    [CompilerGeneratedAttribute]
private void set_OldTextValue(string value);
}
[TypeConversionAttribute("Xamarin.Forms.TextDecorations")]
public class Xamarin.Forms.TextDecorationConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[TypeConverterAttribute("Xamarin.Forms.TextDecorationConverter")]
[FlagsAttribute]
public enum Xamarin.Forms.TextDecorations : Enum {
    public int value__;
    public static TextDecorations None;
    public static TextDecorations Underline;
    public static TextDecorations Strikethrough;
}
internal static class Xamarin.Forms.TextElement : object {
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty TextTransformProperty;
    private static TextElement();
    private static void OnTextColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCharacterSpacingPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnTextTransformPropertyChanged(BindableObject bindable, object oldValue, object newValue);
}
internal class Xamarin.Forms.TextKeyboard : Keyboard {
}
public enum Xamarin.Forms.TextTransform : Enum {
    public int value__;
    public static TextTransform None;
    public static TextTransform Default;
    public static TextTransform Lowercase;
    public static TextTransform Uppercase;
}
public enum Xamarin.Forms.TextType : Enum {
    public int value__;
    public static TextType Text;
    public static TextType Html;
}
[DebuggerDisplayAttribute("Left={Left}, Top={Top}, Right={Right}, Bottom={Bottom}, HorizontalThickness={HorizontalThickness}, VerticalThickness={VerticalThickness}")]
[TypeConverterAttribute("Xamarin.Forms.ThicknessTypeConverter")]
public class Xamarin.Forms.Thickness : ValueType {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    public double Left { get; public set; }
    public double Top { get; public set; }
    public double Right { get; public set; }
    public double Bottom { get; public set; }
    public double HorizontalThickness { get; }
    public double VerticalThickness { get; }
    public bool IsEmpty { get; }
    public Thickness(double uniformSize);
    public Thickness(double horizontalSize, double verticalSize);
    public Thickness(double left, double top, double right, double bottom);
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(double value);
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(double value);
    [CompilerGeneratedAttribute]
public double get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(double value);
    [CompilerGeneratedAttribute]
public double get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(double value);
    public double get_HorizontalThickness();
    public double get_VerticalThickness();
    public bool get_IsEmpty();
    public static Thickness op_Implicit(Size size);
    public static Thickness op_Implicit(double uniformSize);
    private bool Equals(Thickness other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Thickness left, Thickness right);
    public static bool op_Inequality(Thickness left, Thickness right);
    public void Deconstruct(Double& left, Double& top, Double& right, Double& bottom);
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.ThicknessTypeConverter")]
[TypeConversionAttribute("Xamarin.Forms.Thickness")]
public class Xamarin.Forms.ThicknessTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[RenderWithAttribute("Xamarin.Forms.Platform._TimePickerRenderer")]
public class Xamarin.Forms.TimePicker : View {
    public static BindableProperty FormatProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty CharacterSpacingProperty;
    public static BindableProperty TimeProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty TextTransformProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<TimePicker>> _platformConfigurationRegistry;
    public string Format { get; public set; }
    public Color TextColor { get; public set; }
    public double CharacterSpacing { get; public set; }
    public TimeSpan Time { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public TextTransform TextTransform { get; public set; }
    private static TimePicker();
    public string get_Format();
    public void set_Format(string value);
    public sealed virtual Color get_TextColor();
    public void set_TextColor(Color value);
    public sealed virtual double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public TimeSpan get_Time();
    public void set_Time(TimeSpan value);
    public sealed virtual FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public sealed virtual string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual double get_FontSize();
    public void set_FontSize(double value);
    public sealed virtual TextTransform get_TextTransform();
    public sealed virtual void set_TextTransform(TextTransform value);
    public virtual string UpdateFormsText(string source, TextTransform textTransform);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontFamilyChanged(string oldValue, string newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontSizeChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontChanged(Font oldValue, Font newValue);
    private sealed virtual override double Xamarin.Forms.Internals.IFontElement.FontSizeDefaultValueCreator();
    private sealed virtual override void Xamarin.Forms.Internals.IFontElement.OnFontAttributesChanged(FontAttributes oldValue, FontAttributes newValue);
    public sealed virtual IPlatformElementConfiguration`2<T, TimePicker> On();
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextColorPropertyChanged(Color oldValue, Color newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnCharacterSpacingPropertyChanged(double oldValue, double newValue);
    private sealed virtual override void Xamarin.Forms.ITextElement.OnTextTransformChanged(TextTransform oldValue, TextTransform newValue);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<TimePicker> <.ctor>b__9_0();
}
public class Xamarin.Forms.ToggledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; private set; }
    public ToggledEventArgs(bool value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(bool value);
}
public class Xamarin.Forms.ToolbarItem : MenuItem {
    private static BindableProperty OrderProperty;
    private static BindableProperty PriorityProperty;
    [ObsoleteAttribute("Name is obsolete as of version 1.3.0. Please use Text instead.")]
[EditorBrowsableAttribute("1")]
public string Name { get; public set; }
    public ToolbarItemOrder Order { get; public set; }
    public int Priority { get; public set; }
    public ToolbarItem(string name, string icon, Action activated, ToolbarItemOrder order, int priority);
    private static ToolbarItem();
    public string get_Name();
    public void set_Name(string value);
    public ToolbarItemOrder get_Order();
    public void set_Order(ToolbarItemOrder value);
    public int get_Priority();
    public void set_Priority(int value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
}
internal class Xamarin.Forms.ToolbarItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ToolbarItem <ToolbarItem>k__BackingField;
    public ToolbarItem ToolbarItem { get; private set; }
    public ToolbarItemEventArgs(ToolbarItem item);
    [CompilerGeneratedAttribute]
public ToolbarItem get_ToolbarItem();
    [CompilerGeneratedAttribute]
private void set_ToolbarItem(ToolbarItem value);
}
public enum Xamarin.Forms.ToolbarItemOrder : Enum {
    public int value__;
    public static ToolbarItemOrder Default;
    public static ToolbarItemOrder Primary;
    public static ToolbarItemOrder Secondary;
}
internal class Xamarin.Forms.ToStringValueConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Xamarin.Forms.TrackableCollection`1 : ObservableCollection`1<T> {
    [CompilerGeneratedAttribute]
private EventHandler Clearing;
    [CompilerGeneratedAttribute]
public void add_Clearing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Clearing(EventHandler value);
    protected virtual void ClearItems();
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.PassthroughValueProvider")]
[ContentPropertyAttribute("Setters")]
[AcceptEmptyServiceProviderAttribute]
public class Xamarin.Forms.Trigger : TriggerBase {
    public BindableProperty Property { get; public set; }
    public IList`1<Setter> Setters { get; }
    public object Value { get; public set; }
    public Trigger(Type targetType);
    public BindableProperty get_Property();
    public void set_Property(BindableProperty value);
    public IList`1<Setter> get_Setters();
    public object get_Value();
    public void set_Value(object value);
    private sealed virtual override object Xamarin.Forms.Xaml.IValueProvider.ProvideValue(IServiceProvider serviceProvider);
}
public abstract class Xamarin.Forms.TriggerAction : object {
    [CompilerGeneratedAttribute]
private Type <AssociatedType>k__BackingField;
    protected Type AssociatedType { get; private set; }
    internal TriggerAction(Type associatedType);
    [CompilerGeneratedAttribute]
protected Type get_AssociatedType();
    [CompilerGeneratedAttribute]
private void set_AssociatedType(Type value);
    protected abstract virtual void Invoke(object sender);
    internal virtual void DoInvoke(object sender);
}
public abstract class Xamarin.Forms.TriggerAction`1 : TriggerAction {
    protected virtual void Invoke(object sender);
    protected abstract virtual void Invoke(T sender);
}
public abstract class Xamarin.Forms.TriggerBase : BindableObject {
    private bool _isSealed;
    [CompilerGeneratedAttribute]
private IList`1<TriggerAction> <EnterActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TriggerAction> <ExitActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private Condition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Setter> <Setters>k__BackingField;
    public IList`1<TriggerAction> EnterActions { get; }
    public IList`1<TriggerAction> ExitActions { get; }
    public bool IsSealed { get; private set; }
    public Type TargetType { get; }
    internal Condition Condition { get; }
    internal IList`1<Setter> Setters { get; }
    internal TriggerBase(Type targetType);
    internal TriggerBase(Condition condition, Type targetType);
    [CompilerGeneratedAttribute]
public IList`1<TriggerAction> get_EnterActions();
    [CompilerGeneratedAttribute]
public IList`1<TriggerAction> get_ExitActions();
    public bool get_IsSealed();
    private void set_IsSealed(bool value);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
internal Condition get_Condition();
    [CompilerGeneratedAttribute]
internal IList`1<Setter> get_Setters();
    private sealed virtual override void Xamarin.Forms.IAttachedObject.AttachTo(BindableObject bindable);
    private sealed virtual override void Xamarin.Forms.IAttachedObject.DetachFrom(BindableObject bindable);
    internal virtual void OnAttachedTo(BindableObject bindable);
    internal virtual void OnDetachingFrom(BindableObject bindable);
    internal virtual void OnSeal();
    private void OnConditionChanged(BindableObject bindable, bool oldValue, bool newValue);
}
internal class Xamarin.Forms.Tweener : object {
    private long _lastMilliseconds;
    private int _timer;
    private long _frames;
    [CompilerGeneratedAttribute]
private AnimatableKey <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Rate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Loop>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Finished;
    [CompilerGeneratedAttribute]
private EventHandler ValueUpdated;
    public AnimatableKey Handle { get; public set; }
    public UInt32 Length { get; }
    public UInt32 Rate { get; }
    public bool Loop { get; public set; }
    public double Value { get; private set; }
    public Tweener(UInt32 length);
    public Tweener(UInt32 length, UInt32 rate);
    [CompilerGeneratedAttribute]
public AnimatableKey get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(AnimatableKey value);
    [CompilerGeneratedAttribute]
public UInt32 get_Length();
    [CompilerGeneratedAttribute]
public UInt32 get_Rate();
    [CompilerGeneratedAttribute]
public bool get_Loop();
    [CompilerGeneratedAttribute]
public void set_Loop(bool value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
    [CompilerGeneratedAttribute]
public void add_Finished(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Finished(EventHandler value);
    public void Pause();
    public void Start();
    private void FinishImmediately();
    public void Stop();
    [CompilerGeneratedAttribute]
public void add_ValueUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueUpdated(EventHandler value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private bool <Start>b__27_0(long step);
}
public abstract class Xamarin.Forms.TypeConverter : object {
    public virtual bool CanConvertFrom(Type sourceType);
    [ObsoleteAttribute("ConvertFrom is obsolete as of version 2.2.0. Please use ConvertFromInvariantString (string) instead.")]
[EditorBrowsableAttribute("1")]
public virtual object ConvertFrom(object o);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ConvertFrom is obsolete as of version 2.2.0. Please use ConvertFromInvariantString (string) instead.")]
public virtual object ConvertFrom(CultureInfo culture, object o);
    public virtual object ConvertFromInvariantString(string value);
}
[AttributeUsageAttribute("32767")]
public class Xamarin.Forms.TypeConverterAttribute : Attribute {
    internal static String[] TypeConvertersType;
    public static TypeConverterAttribute Default;
    [CompilerGeneratedAttribute]
private string <ConverterTypeName>k__BackingField;
    public string ConverterTypeName { get; }
    public TypeConverterAttribute(string typeName);
    public TypeConverterAttribute(Type type);
    private static TypeConverterAttribute();
    [CompilerGeneratedAttribute]
public string get_ConverterTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.TypeTypeConverter")]
[TypeConversionAttribute("System.Type")]
public class Xamarin.Forms.TypeTypeConverter : TypeConverter {
    private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFromInvariantString(string value, IServiceProvider serviceProvider);
    public virtual object ConvertFromInvariantString(string value);
    [ObsoleteAttribute("IExtendedTypeConverter.ConvertFrom is obsolete as of version 2.2.0. Please use ConvertFromInvariantString (string, IServiceProvider) instead.")]
[EditorBrowsableAttribute("1")]
private sealed virtual override object Xamarin.Forms.IExtendedTypeConverter.ConvertFrom(CultureInfo culture, object value, IServiceProvider serviceProvider);
}
public class Xamarin.Forms.UnsolvableConstraintsException : Exception {
    public UnsolvableConstraintsException(string message);
    public UnsolvableConstraintsException(string message, Exception innerException);
    protected UnsolvableConstraintsException(SerializationInfo info, StreamingContext context);
}
public class Xamarin.Forms.UriImageSource : ImageSource {
    internal static string CacheName;
    public static BindableProperty UriProperty;
    private static IIsolatedStorageFile Store;
    private static object s_syncHandle;
    private static Dictionary`2<string, LockingSemaphore> s_semaphores;
    private TimeSpan _cacheValidity;
    private bool _cachingEnabled;
    public bool IsEmpty { get; }
    public TimeSpan CacheValidity { get; public set; }
    public bool CachingEnabled { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.UriTypeConverter")]
public Uri Uri { get; public set; }
    private static UriImageSource();
    public virtual bool get_IsEmpty();
    public TimeSpan get_CacheValidity();
    public void set_CacheValidity(TimeSpan value);
    public bool get_CachingEnabled();
    public void set_CachingEnabled(bool value);
    public Uri get_Uri();
    public void set_Uri(Uri value);
    [AsyncStateMachineAttribute("Xamarin.Forms.UriImageSource/<GetStreamAsync>d__19")]
[EditorBrowsableAttribute("1")]
public Task`1<Stream> GetStreamAsync(CancellationToken userToken);
    public virtual string ToString();
    private static string GetCacheKey(Uri uri);
    [AsyncStateMachineAttribute("Xamarin.Forms.UriImageSource/<GetHasLocallyCachedCopyAsync>d__22")]
private Task`1<bool> GetHasLocallyCachedCopyAsync(string key, bool checkValidity);
    [AsyncStateMachineAttribute("Xamarin.Forms.UriImageSource/<GetLastWriteTimeUtcAsync>d__23")]
private static Task`1<Nullable`1<DateTime>> GetLastWriteTimeUtcAsync(string key);
    [AsyncStateMachineAttribute("Xamarin.Forms.UriImageSource/<GetStreamAsync>d__24")]
private Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.UriImageSource/<GetStreamAsyncUnchecked>d__25")]
private Task`1<Stream> GetStreamAsyncUnchecked(string key, Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.UriImageSource/<GetStreamFromCacheAsync>d__26")]
private Task`1<Stream> GetStreamFromCacheAsync(Uri uri, CancellationToken cancellationToken);
    private void OnUriChanged();
}
public class Xamarin.Forms.UriMediaSource : MediaSource {
    public static BindableProperty UriProperty;
    [TypeConverterAttribute("Xamarin.Forms.UriTypeConverter")]
public Uri Uri { get; public set; }
    private static UriMediaSource();
    public Uri get_Uri();
    public void set_Uri(Uri value);
    public virtual string ToString();
}
[ProvideCompiledAttribute("Xamarin.Forms.Core.XamlC.UriTypeConverter")]
[TypeConversionAttribute("System.Uri")]
public class Xamarin.Forms.UriTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
    private bool CanConvert(Type type);
}
internal class Xamarin.Forms.UrlKeyboard : Keyboard {
}
public class Xamarin.Forms.UrlWebViewSource : WebViewSource {
    public static BindableProperty UrlProperty;
    public string Url { get; public set; }
    private static UrlWebViewSource();
    public string get_Url();
    public void set_Url(string value);
    [EditorBrowsableAttribute("1")]
public virtual void Load(IWebViewDelegate renderer);
}
public class Xamarin.Forms.ValueChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OldValue>k__BackingField;
    public double NewValue { get; private set; }
    public double OldValue { get; private set; }
    public ValueChangedEventArgs(double oldValue, double newValue);
    [CompilerGeneratedAttribute]
public double get_NewValue();
    [CompilerGeneratedAttribute]
private void set_NewValue(double value);
    [CompilerGeneratedAttribute]
public double get_OldValue();
    [CompilerGeneratedAttribute]
private void set_OldValue(double value);
}
[ObsoleteAttribute("This is no longer used, and might be removed at some point ")]
[EditorBrowsableAttribute("1")]
public class Xamarin.Forms.Vec2 : ValueType {
    public double X;
    public double Y;
    public Vec2(double x, double y);
}
public class Xamarin.Forms.View : VisualElement {
    public static BindableProperty VerticalOptionsProperty;
    public static BindableProperty HorizontalOptionsProperty;
    public static BindableProperty MarginProperty;
    internal static BindableProperty MarginLeftProperty;
    internal static BindableProperty MarginTopProperty;
    internal static BindableProperty MarginRightProperty;
    internal static BindableProperty MarginBottomProperty;
    private ObservableCollection`1<IGestureRecognizer> _gestureRecognizers;
    private ObservableCollection`1<IGestureRecognizer> _compositeGestureRecognizers;
    protected internal IGestureController GestureController { get; }
    public IList`1<IGestureRecognizer> GestureRecognizers { get; }
    private IList`1<IGestureRecognizer> Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers { get; }
    public LayoutOptions HorizontalOptions { get; public set; }
    public Thickness Margin { get; public set; }
    public LayoutOptions VerticalOptions { get; public set; }
    private static View();
    protected internal IGestureController get_GestureController();
    private static void OnMarginLeftPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnMarginTopPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnMarginRightPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnMarginBottomPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public sealed virtual IList`1<IGestureRecognizer> get_GestureRecognizers();
    private sealed virtual override IList`1<IGestureRecognizer> Xamarin.Forms.Internals.IGestureController.get_CompositeGestureRecognizers();
    public virtual IList`1<GestureElement> GetChildElements(Point point);
    public LayoutOptions get_HorizontalOptions();
    public void set_HorizontalOptions(LayoutOptions value);
    public Thickness get_Margin();
    public void set_Margin(Thickness value);
    public LayoutOptions get_VerticalOptions();
    public void set_VerticalOptions(LayoutOptions value);
    protected virtual void OnBindingContextChanged();
    private static void MarginPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void ValidateGesture(IGestureRecognizer gesture);
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>g__AddItems|14_1(<>c__DisplayClass14_0& );
    [CompilerGeneratedAttribute]
private void <.ctor>g__RemoveItems|14_2(<>c__DisplayClass14_0& );
}
[ContentPropertyAttribute("View")]
public class Xamarin.Forms.ViewCell : Cell {
    private ReadOnlyCollection`1<Element> _logicalChildren;
    private View _view;
    public View View { get; public set; }
    internal ReadOnlyCollection`1<Element> LogicalChildrenInternal { get; }
    public View get_View();
    public void set_View(View value);
    internal virtual ReadOnlyCollection`1<Element> get_LogicalChildrenInternal();
}
[ExtensionAttribute]
public static class Xamarin.Forms.ViewExtensions : object {
    public static void CancelAnimations(VisualElement view);
    [ExtensionAttribute]
private static Task`1<bool> AnimateTo(VisualElement view, double start, double end, string name, Action`2<VisualElement, double> updateAction, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> FadeTo(VisualElement view, double opacity, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> LayoutTo(VisualElement view, Rectangle bounds, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> RelRotateTo(VisualElement view, double drotation, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> RelScaleTo(VisualElement view, double dscale, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> RotateTo(VisualElement view, double rotation, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> RotateXTo(VisualElement view, double rotation, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> RotateYTo(VisualElement view, double rotation, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> ScaleTo(VisualElement view, double scale, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> ScaleXTo(VisualElement view, double scale, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> ScaleYTo(VisualElement view, double scale, UInt32 length, Easing easing);
    [ExtensionAttribute]
public static Task`1<bool> TranslateTo(VisualElement view, double x, double y, UInt32 length, Easing easing);
    [ExtensionAttribute]
internal static T FindParentOfType(Element element);
    [IteratorStateMachineAttribute("Xamarin.Forms.ViewExtensions/<GetParentsPath>d__14")]
[ExtensionAttribute]
internal static IEnumerable`1<Element> GetParentsPath(Element self);
    [ExtensionAttribute]
internal static string GetStringValue(Element element);
    [ExtensionAttribute]
internal static bool TrySetValue(Element element, string text);
}
[FlagsAttribute]
public enum Xamarin.Forms.ViewState : Enum {
    public int value__;
    public static ViewState Default;
    public static ViewState Prelight;
    public static ViewState Pressed;
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.VisualAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Visual>k__BackingField;
    internal string Key { get; }
    internal Type Visual { get; }
    public VisualAttribute(string key, Type visual);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal Type get_Visual();
}
public class Xamarin.Forms.VisualElement : NavigableElement {
    public static BindableProperty NavigationProperty;
    public static BindableProperty StyleProperty;
    public static BindableProperty InputTransparentProperty;
    public static BindableProperty IsEnabledProperty;
    private static BindablePropertyKey XPropertyKey;
    public static BindableProperty XProperty;
    private static BindablePropertyKey YPropertyKey;
    public static BindableProperty YProperty;
    public static BindableProperty AnchorXProperty;
    public static BindableProperty AnchorYProperty;
    public static BindableProperty TranslationXProperty;
    public static BindableProperty TranslationYProperty;
    private static BindablePropertyKey WidthPropertyKey;
    public static BindableProperty WidthProperty;
    private static BindablePropertyKey HeightPropertyKey;
    public static BindableProperty HeightProperty;
    public static BindableProperty RotationProperty;
    public static BindableProperty RotationXProperty;
    public static BindableProperty RotationYProperty;
    public static BindableProperty ScaleProperty;
    public static BindableProperty ScaleXProperty;
    public static BindableProperty ScaleYProperty;
    internal static BindableProperty TransformProperty;
    public static BindableProperty ClipProperty;
    public static BindableProperty VisualProperty;
    private static IVisual _defaultVisual;
    private IVisual _effectiveVisual;
    internal static BindableProperty TransformOriginProperty;
    public static BindableProperty IsVisibleProperty;
    public static BindableProperty OpacityProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty BackgroundProperty;
    internal static BindablePropertyKey BehaviorsPropertyKey;
    public static BindableProperty BehaviorsProperty;
    internal static BindablePropertyKey TriggersPropertyKey;
    public static BindableProperty TriggersProperty;
    public static BindableProperty WidthRequestProperty;
    public static BindableProperty HeightRequestProperty;
    public static BindableProperty MinimumWidthRequestProperty;
    public static BindableProperty MinimumHeightRequestProperty;
    [EditorBrowsableAttribute("1")]
public static BindablePropertyKey IsFocusedPropertyKey;
    public static BindableProperty IsFocusedProperty;
    public static BindableProperty FlowDirectionProperty;
    public static BindableProperty TabIndexProperty;
    public static BindableProperty IsTabStopProperty;
    private EffectiveFlowDirection _effectiveFlowDirection;
    private Dictionary`2<Size, SizeRequest> _measureCache;
    private int _batched;
    private LayoutConstraint _computedConstraint;
    private bool _isInNativeLayout;
    private bool _isNativeStateConsistent;
    private bool _isPlatformEnabled;
    private double _mockHeight;
    private double _mockWidth;
    private double _mockX;
    private double _mockY;
    private LayoutConstraint _selfConstraint;
    [CompilerGeneratedAttribute]
private bool <DisableLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler PlatformEnabledChanged;
    private ResourceDictionary _resources;
    [CompilerGeneratedAttribute]
private EventHandler ChildrenReordered;
    [CompilerGeneratedAttribute]
private EventHandler`1<FocusEventArgs> Focused;
    [CompilerGeneratedAttribute]
private EventHandler MeasureInvalidated;
    [CompilerGeneratedAttribute]
private EventHandler SizeChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<FocusEventArgs> Unfocused;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArg`1<VisualElement>> BatchCommitted;
    [CompilerGeneratedAttribute]
private EventHandler`1<FocusRequestArgs> FocusChangeRequested;
    public IVisual Visual { get; public set; }
    private IVisual Xamarin.Forms.IVisualController.EffectiveVisual { get; private set; }
    private IFlowDirectionController FlowController { get; }
    public FlowDirection FlowDirection { get; public set; }
    private EffectiveFlowDirection Xamarin.Forms.IFlowDirectionController.EffectiveFlowDirection { get; private set; }
    private EffectiveFlowDirection Xamarin.Forms.IVisualElementController.EffectiveFlowDirection { get; }
    public double AnchorX { get; public set; }
    public double AnchorY { get; public set; }
    public Color BackgroundColor { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.BrushTypeConverter")]
public Brush Background { get; public set; }
    public IList`1<Behavior> Behaviors { get; }
    public Rectangle Bounds { get; private set; }
    public double Height { get; private set; }
    public double HeightRequest { get; public set; }
    public bool InputTransparent { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsFocused { get; }
    [TypeConverterAttribute("Xamarin.Forms.VisualElement/VisibilityConverter")]
public bool IsVisible { get; public set; }
    public double MinimumHeightRequest { get; public set; }
    public double MinimumWidthRequest { get; public set; }
    public double Opacity { get; public set; }
    public double Rotation { get; public set; }
    public double RotationX { get; public set; }
    public double RotationY { get; public set; }
    public double Scale { get; public set; }
    public double ScaleX { get; public set; }
    public double ScaleY { get; public set; }
    public int TabIndex { get; public set; }
    public bool IsTabStop { get; public set; }
    public double TranslationX { get; public set; }
    public double TranslationY { get; public set; }
    public IList`1<TriggerBase> Triggers { get; }
    public double Width { get; private set; }
    public double WidthRequest { get; public set; }
    public double X { get; private set; }
    public double Y { get; private set; }
    [TypeConverterAttribute("Xamarin.Forms.Shapes.PathGeometryConverter")]
public Geometry Clip { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool Batched { get; }
    internal LayoutConstraint ComputedConstraint { get; internal set; }
    internal LayoutConstraint Constraint { get; }
    [EditorBrowsableAttribute("1")]
public bool DisableLayout { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsInNativeLayout { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsNativeStateConsistent { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsPlatformEnabled { get; public set; }
    internal LayoutConstraint SelfConstraint { get; internal set; }
    private bool Xamarin.Forms.IResourcesProvider.IsResourcesCreated { get; }
    public ResourceDictionary Resources { get; public set; }
    private bool Xamarin.Forms.IFlowDirectionController.ApplyEffectiveFlowDirectionToChildContainer { get; }
    private static VisualElement();
    public sealed virtual IVisual get_Visual();
    public void set_Visual(IVisual value);
    internal static void SetDefaultVisual(IVisual visual);
    private sealed virtual override IVisual Xamarin.Forms.IVisualController.get_EffectiveVisual();
    private sealed virtual override void Xamarin.Forms.IVisualController.set_EffectiveVisual(IVisual value);
    private static void OnTransformChanged(BindableObject bindable, object oldValue, object newValue);
    private void NotifyBackgroundChanges();
    private void StopNotifyingBackgroundChanges();
    private void OnBackgroundChanging(object sender, PropertyChangingEventArgs e);
    private void OnBackgroundChanged(object sender, PropertyChangedEventArgs e);
    private static void OnTabIndexPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object TabIndexDefaultValueCreator(BindableObject bindable);
    private static void OnTabStopPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static object TabStopDefaultValueCreator(BindableObject bindable);
    private IFlowDirectionController get_FlowController();
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    private sealed virtual override EffectiveFlowDirection Xamarin.Forms.IFlowDirectionController.get_EffectiveFlowDirection();
    private sealed virtual override void Xamarin.Forms.IFlowDirectionController.set_EffectiveFlowDirection(EffectiveFlowDirection value);
    private void SetEffectiveFlowDirection(EffectiveFlowDirection value, bool fireFlowDirectionPropertyChanged);
    private sealed virtual override EffectiveFlowDirection Xamarin.Forms.IVisualElementController.get_EffectiveFlowDirection();
    public double get_AnchorX();
    public void set_AnchorX(double value);
    public double get_AnchorY();
    public void set_AnchorY(double value);
    public sealed virtual Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public sealed virtual Brush get_Background();
    public void set_Background(Brush value);
    public IList`1<Behavior> get_Behaviors();
    public Rectangle get_Bounds();
    private void set_Bounds(Rectangle value);
    public double get_Height();
    private void set_Height(double value);
    public double get_HeightRequest();
    public void set_HeightRequest(double value);
    public bool get_InputTransparent();
    public void set_InputTransparent(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsFocused();
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    public double get_MinimumHeightRequest();
    public void set_MinimumHeightRequest(double value);
    public double get_MinimumWidthRequest();
    public void set_MinimumWidthRequest(double value);
    public double get_Opacity();
    public void set_Opacity(double value);
    public double get_Rotation();
    public void set_Rotation(double value);
    public double get_RotationX();
    public void set_RotationX(double value);
    public double get_RotationY();
    public void set_RotationY(double value);
    public double get_Scale();
    public void set_Scale(double value);
    public double get_ScaleX();
    public void set_ScaleX(double value);
    public double get_ScaleY();
    public void set_ScaleY(double value);
    public sealed virtual int get_TabIndex();
    public sealed virtual void set_TabIndex(int value);
    protected virtual void OnTabIndexPropertyChanged(int oldValue, int newValue);
    protected virtual int TabIndexDefaultValueCreator();
    public sealed virtual bool get_IsTabStop();
    public sealed virtual void set_IsTabStop(bool value);
    protected virtual void OnTabStopPropertyChanged(bool oldValue, bool newValue);
    protected virtual bool TabStopDefaultValueCreator();
    public double get_TranslationX();
    public void set_TranslationX(double value);
    public double get_TranslationY();
    public void set_TranslationY(double value);
    public IList`1<TriggerBase> get_Triggers();
    public sealed virtual double get_Width();
    private void set_Width(double value);
    public double get_WidthRequest();
    public void set_WidthRequest(double value);
    public double get_X();
    private void set_X(double value);
    public double get_Y();
    private void set_Y(double value);
    public Geometry get_Clip();
    public void set_Clip(Geometry value);
    public sealed virtual bool get_Batched();
    internal LayoutConstraint get_ComputedConstraint();
    internal void set_ComputedConstraint(LayoutConstraint value);
    internal LayoutConstraint get_Constraint();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableLayout(bool value);
    public sealed virtual bool get_IsInNativeLayout();
    public sealed virtual void set_IsInNativeLayout(bool value);
    public sealed virtual bool get_IsNativeStateConsistent();
    public sealed virtual void set_IsNativeStateConsistent(bool value);
    [CompilerGeneratedAttribute]
internal void add_PlatformEnabledChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PlatformEnabledChanged(EventHandler value);
    public sealed virtual bool get_IsPlatformEnabled();
    public sealed virtual void set_IsPlatformEnabled(bool value);
    internal LayoutConstraint get_SelfConstraint();
    internal void set_SelfConstraint(LayoutConstraint value);
    public sealed virtual void BatchBegin();
    public sealed virtual void BatchCommit();
    private sealed virtual override bool Xamarin.Forms.IResourcesProvider.get_IsResourcesCreated();
    public sealed virtual ResourceDictionary get_Resources();
    public sealed virtual void set_Resources(ResourceDictionary value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void NativeSizeChanged();
    [CompilerGeneratedAttribute]
public void add_ChildrenReordered(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ChildrenReordered(EventHandler value);
    public bool Focus();
    [CompilerGeneratedAttribute]
public void add_Focused(EventHandler`1<FocusEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Focused(EventHandler`1<FocusEventArgs> value);
    [ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
[EditorBrowsableAttribute("1")]
public virtual SizeRequest GetSizeRequest(double widthConstraint, double heightConstraint);
    public void Layout(Rectangle bounds);
    public SizeRequest Measure(double widthConstraint, double heightConstraint, MeasureFlags flags);
    [CompilerGeneratedAttribute]
public void add_MeasureInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MeasureInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SizeChanged(EventHandler value);
    public void Unfocus();
    [CompilerGeneratedAttribute]
public void add_Unfocused(EventHandler`1<FocusEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Unfocused(EventHandler`1<FocusEventArgs> value);
    protected virtual void InvalidateMeasure();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnChildAdded(Element child);
    [ObsoleteAttribute("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")]
protected virtual void OnChildRemoved(Element child);
    protected virtual void OnChildRemoved(Element child, int oldLogicalIndex);
    protected void OnChildrenReordered();
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    protected virtual void OnSizeAllocated(double width, double height);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")]
protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    protected void SizeAllocated(double width, double height);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BatchCommitted(EventHandler`1<EventArg`1<VisualElement>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BatchCommitted(EventHandler`1<EventArg`1<VisualElement>> value);
    internal void ComputeConstrainsForChildren();
    internal virtual void ComputeConstraintForView(View view);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FocusChangeRequested(EventHandler`1<FocusRequestArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FocusChangeRequested(EventHandler`1<FocusRequestArgs> value);
    [EditorBrowsableAttribute("1")]
public void InvalidateMeasureNonVirtual(InvalidationTrigger trigger);
    internal virtual void InvalidateMeasureInternal(InvalidationTrigger trigger);
    private sealed virtual override void Xamarin.Forms.IVisualElementController.InvalidateMeasure(InvalidationTrigger trigger);
    internal void InvalidateStateTriggers(bool attach);
    internal void MockBounds(Rectangle bounds);
    internal virtual void OnConstraintChanged(LayoutConstraint oldConstraint, LayoutConstraint newConstraint);
    internal virtual void OnIsPlatformEnabledChanged();
    internal virtual void OnIsVisibleChanged(bool oldValue, bool newValue);
    internal virtual void OnParentResourcesChanged(IEnumerable`1<KeyValuePair`2<string, object>> values);
    internal void UnmockBounds();
    private void PropagateBindingContextToStateTriggers();
    private void OnFocused();
    internal void ChangeVisualStateInternal();
    protected internal virtual void ChangeVisualState();
    private static void OnVisualChanged(BindableObject bindable, object oldValue, object newValue);
    private static void FlowDirectionChanging(BindableObject bindable, object oldValue, object newValue);
    private static void FlowDirectionChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnIsEnabledPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnIsFocusedPropertyChanged(BindableObject bindable, object oldvalue, object newvalue);
    private static void OnRequestChanged(BindableObject bindable, object oldvalue, object newvalue);
    private void OnUnfocus();
    private sealed virtual override bool Xamarin.Forms.IFlowDirectionController.get_ApplyEffectiveFlowDirectionToChildContainer();
    private sealed virtual override void Xamarin.Forms.IPropertyPropagationController.PropagatePropertyChanged(string propertyName);
    private void SetSize(double width, double height);
    private sealed virtual override BindableProperty Xamarin.Forms.StyleSheets.IStylable.GetProperty(string key, bool inheriting);
}
public static class Xamarin.Forms.VisualMarker : object {
    private static bool _isMaterialRegistered;
    private static bool _warnedAboutMaterial;
    [CompilerGeneratedAttribute]
private static IVisual <MatchParent>k__BackingField;
    [CompilerGeneratedAttribute]
private static IVisual <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static IVisual <Material>k__BackingField;
    [EditorBrowsableAttribute("1")]
public static IVisual MatchParent { get; }
    public static IVisual Default { get; }
    public static IVisual Material { get; }
    private static VisualMarker();
    [CompilerGeneratedAttribute]
public static IVisual get_MatchParent();
    [CompilerGeneratedAttribute]
public static IVisual get_Default();
    [CompilerGeneratedAttribute]
public static IVisual get_Material();
    internal static void RegisterMaterial();
    internal static void MaterialCheck();
}
[RuntimeNamePropertyAttribute("Name")]
public class Xamarin.Forms.VisualState : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Setter> <Setters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StateTriggerBase> <StateTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualStateGroup <VisualStateGroup>k__BackingField;
    public string Name { get; public set; }
    public IList`1<Setter> Setters { get; }
    public IList`1<StateTriggerBase> StateTriggers { get; }
    public Type TargetType { get; public set; }
    internal VisualStateGroup VisualStateGroup { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<Setter> get_Setters();
    [CompilerGeneratedAttribute]
public IList`1<StateTriggerBase> get_StateTriggers();
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
internal VisualStateGroup get_VisualStateGroup();
    [CompilerGeneratedAttribute]
internal void set_VisualStateGroup(VisualStateGroup value);
    internal VisualState Clone();
    private void OnStateTriggersChanged(IList`1<StateTriggerBase> stateTriggers);
}
[RuntimeNamePropertyAttribute("Name")]
[ContentPropertyAttribute("States")]
public class Xamarin.Forms.VisualStateGroup : object {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<VisualState> <States>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualState <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <VisualElement>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler StatesChanged;
    public Type TargetType { get; public set; }
    public string Name { get; public set; }
    public IList`1<VisualState> States { get; }
    public VisualState CurrentState { get; internal set; }
    internal VisualElement VisualElement { get; internal set; }
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<VisualState> get_States();
    [CompilerGeneratedAttribute]
public VisualState get_CurrentState();
    [CompilerGeneratedAttribute]
internal void set_CurrentState(VisualState value);
    [CompilerGeneratedAttribute]
internal VisualElement get_VisualElement();
    [CompilerGeneratedAttribute]
internal void set_VisualElement(VisualElement value);
    internal VisualState GetState(string name);
    internal bool HasStateTriggers();
    internal VisualState GetActiveTrigger();
    private VisualState ResolveStateTriggersConflict(List`1<StateTriggerBase> conflicts);
    internal VisualStateGroup Clone();
    internal void UpdateStateTriggers();
    [CompilerGeneratedAttribute]
internal void add_StatesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_StatesChanged(EventHandler value);
    private void OnStatesChanged(IList`1<VisualState> states);
}
[DefaultMemberAttribute("Item")]
public class Xamarin.Forms.VisualStateGroupList : object {
    private IList`1<VisualStateGroup> _internalList;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    private HashSet`1<string> _names;
    [CompilerGeneratedAttribute]
private VisualElement <VisualElement>k__BackingField;
    internal bool IsDefault { get; private set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public VisualStateGroup Item { get; public set; }
    internal VisualElement VisualElement { get; internal set; }
    public VisualStateGroupList(bool isDefault);
    [CompilerGeneratedAttribute]
internal bool get_IsDefault();
    [CompilerGeneratedAttribute]
private void set_IsDefault(bool value);
    private void Validate(IList`1<VisualStateGroup> groups);
    private void ValidateAndNotify(object sender, EventArgs eventArgs);
    private void ValidateAndNotify(IList`1<VisualStateGroup> groups);
    public sealed virtual IEnumerator`1<VisualStateGroup> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(VisualStateGroup item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(VisualStateGroup item);
    public sealed virtual void CopyTo(VisualStateGroup[] array, int arrayIndex);
    public sealed virtual bool Remove(VisualStateGroup item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(VisualStateGroup item);
    public sealed virtual void Insert(int index, VisualStateGroup item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual VisualStateGroup get_Item(int index);
    public sealed virtual void set_Item(int index, VisualStateGroup value);
    [CompilerGeneratedAttribute]
internal VisualElement get_VisualElement();
    [CompilerGeneratedAttribute]
internal void set_VisualElement(VisualElement value);
    private void OnStatesChanged();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.VisualStateGroupListExtensions : object {
    [ExtensionAttribute]
internal static IList`1<VisualStateGroup> Clone(IList`1<VisualStateGroup> groups);
}
[ExtensionAttribute]
public static class Xamarin.Forms.VisualStateManager : object {
    public static BindableProperty VisualStateGroupsProperty;
    private static VisualStateManager();
    private static void VisualStateGroupsPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    public static IList`1<VisualStateGroup> GetVisualStateGroups(VisualElement visualElement);
    public static void SetVisualStateGroups(VisualElement visualElement, VisualStateGroupList value);
    public static bool GoToState(VisualElement visualElement, string name);
    [ExtensionAttribute]
public static bool HasVisualStateGroups(VisualElement element);
    internal static void UpdateStateTriggers(VisualElement visualElement);
}
[TypeConversionAttribute("Xamarin.Forms.IVisual")]
public class Xamarin.Forms.VisualTypeConverter : TypeConverter {
    private static Dictionary`2<string, IVisual> _visualTypeMappings;
    private void InitMappings();
    private static void RegisterFromAttributes(Assembly assembly, Dictionary`2<string, IVisual> mappings);
    private static void Register(Assembly assembly, Dictionary`2<string, IVisual> mappings);
    private static void Register(Type visual, Dictionary`2<string, IVisual> mappings);
    private static IVisual CreateVisual(Type visualType);
    public virtual object ConvertFromInvariantString(string value);
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.WatchAddList`1 : object {
    private Action`1<List`1<T>> _onAdd;
    private List`1<T> _internalList;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public WatchAddList`1(Action`1<List`1<T>> onAdd);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
}
internal class Xamarin.Forms.WeakEventManager : object {
    private Dictionary`2<string, List`1<Subscription>> _eventHandlers;
    public void AddEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void AddEventHandler(EventHandler handler, string eventName);
    public void HandleEvent(object sender, object args, string eventName);
    public void RemoveEventHandler(EventHandler`1<TEventArgs> handler, string eventName);
    public void RemoveEventHandler(EventHandler handler, string eventName);
    private void AddEventHandler(string eventName, object handlerTarget, MethodInfo methodInfo);
    private void RemoveEventHandler(string eventName, object handlerTarget, MemberInfo methodInfo);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.WeakReferenceExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetTarget(WeakReference self, T& target);
}
public class Xamarin.Forms.WebNavigatedEventArgs : WebNavigationEventArgs {
    [CompilerGeneratedAttribute]
private WebNavigationResult <Result>k__BackingField;
    public WebNavigationResult Result { get; private set; }
    public WebNavigatedEventArgs(WebNavigationEvent navigationEvent, WebViewSource source, string url, WebNavigationResult result);
    [CompilerGeneratedAttribute]
public WebNavigationResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(WebNavigationResult value);
}
public class Xamarin.Forms.WebNavigatingEventArgs : WebNavigationEventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    public WebNavigatingEventArgs(WebNavigationEvent navigationEvent, WebViewSource source, string url);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public enum Xamarin.Forms.WebNavigationEvent : Enum {
    public int value__;
    public static WebNavigationEvent Back;
    public static WebNavigationEvent Forward;
    public static WebNavigationEvent NewPage;
    public static WebNavigationEvent Refresh;
}
public class Xamarin.Forms.WebNavigationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private WebNavigationEvent <NavigationEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private WebViewSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public WebNavigationEvent NavigationEvent { get; internal set; }
    public WebViewSource Source { get; internal set; }
    public string Url { get; internal set; }
    protected WebNavigationEventArgs(WebNavigationEvent navigationEvent, WebViewSource source, string url);
    [CompilerGeneratedAttribute]
public WebNavigationEvent get_NavigationEvent();
    [CompilerGeneratedAttribute]
internal void set_NavigationEvent(WebNavigationEvent value);
    [CompilerGeneratedAttribute]
public WebViewSource get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(WebViewSource value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
}
public enum Xamarin.Forms.WebNavigationResult : Enum {
    public int value__;
    public static WebNavigationResult Success;
    public static WebNavigationResult Cancel;
    public static WebNavigationResult Timeout;
    public static WebNavigationResult Failure;
}
[RenderWithAttribute("Xamarin.Forms.Platform._WebViewRenderer")]
public class Xamarin.Forms.WebView : View {
    public static BindableProperty SourceProperty;
    private static BindablePropertyKey CanGoBackPropertyKey;
    public static BindableProperty CanGoBackProperty;
    private static BindablePropertyKey CanGoForwardPropertyKey;
    public static BindableProperty CanGoForwardProperty;
    public static BindableProperty CookiesProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<WebView>> _platformConfigurationRegistry;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebNavigatedEventArgs> Navigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebNavigatingEventArgs> Navigating;
    [CompilerGeneratedAttribute]
private EventHandler`1<EvalRequested> EvalRequested;
    [CompilerGeneratedAttribute]
private EvaluateJavaScriptDelegate EvaluateJavaScriptRequested;
    [CompilerGeneratedAttribute]
private EventHandler GoBackRequested;
    [CompilerGeneratedAttribute]
private EventHandler GoForwardRequested;
    [CompilerGeneratedAttribute]
private EventHandler ReloadRequested;
    [EditorBrowsableAttribute("1")]
private bool Xamarin.Forms.IWebViewController.CanGoBack { get; private set; }
    public bool CanGoBack { get; }
    [EditorBrowsableAttribute("1")]
private bool Xamarin.Forms.IWebViewController.CanGoForward { get; private set; }
    public bool CanGoForward { get; }
    public CookieContainer Cookies { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.WebViewSourceTypeConverter")]
public WebViewSource Source { get; public set; }
    private static WebView();
    private sealed virtual override bool Xamarin.Forms.IWebViewController.get_CanGoBack();
    private sealed virtual override void Xamarin.Forms.IWebViewController.set_CanGoBack(bool value);
    public bool get_CanGoBack();
    private sealed virtual override bool Xamarin.Forms.IWebViewController.get_CanGoForward();
    private sealed virtual override void Xamarin.Forms.IWebViewController.set_CanGoForward(bool value);
    public bool get_CanGoForward();
    public CookieContainer get_Cookies();
    public void set_Cookies(CookieContainer value);
    public WebViewSource get_Source();
    public void set_Source(WebViewSource value);
    public void Eval(string script);
    [AsyncStateMachineAttribute("Xamarin.Forms.WebView/<EvaluateJavaScriptAsync>d__25")]
public Task`1<string> EvaluateJavaScriptAsync(string script);
    public void GoBack();
    public void GoForward();
    public void Reload();
    [CompilerGeneratedAttribute]
public void add_Navigated(EventHandler`1<WebNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(EventHandler`1<WebNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Navigating(EventHandler`1<WebNavigatingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Navigating(EventHandler`1<WebNavigatingEventArgs> value);
    protected virtual void OnBindingContextChanged();
    protected virtual void OnPropertyChanged(string propertyName);
    protected void OnSourceChanged(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.IWebViewController.add_EvalRequested(EventHandler`1<EvalRequested> value);
    private sealed virtual override void Xamarin.Forms.IWebViewController.remove_EvalRequested(EventHandler`1<EvalRequested> value);
    [CompilerGeneratedAttribute]
public void add_EvalRequested(EventHandler`1<EvalRequested> value);
    [CompilerGeneratedAttribute]
public void remove_EvalRequested(EventHandler`1<EvalRequested> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EvaluateJavaScriptRequested(EvaluateJavaScriptDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EvaluateJavaScriptRequested(EvaluateJavaScriptDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_GoBackRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_GoBackRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_GoForwardRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_GoForwardRequested(EventHandler value);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendNavigated(WebNavigatedEventArgs args);
    [EditorBrowsableAttribute("1")]
public sealed virtual void SendNavigating(WebNavigatingEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReloadRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReloadRequested(EventHandler value);
    public sealed virtual IPlatformElementConfiguration`2<T, WebView> On();
    private static string EscapeJsString(string js);
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<WebView> <.ctor>b__7_0();
}
public abstract class Xamarin.Forms.WebViewSource : BindableObject {
    [CompilerGeneratedAttribute]
private EventHandler SourceChanged;
    public static WebViewSource op_Implicit(Uri url);
    public static WebViewSource op_Implicit(string url);
    protected void OnSourceChanged();
    [EditorBrowsableAttribute("1")]
public abstract virtual void Load(IWebViewDelegate renderer);
    [CompilerGeneratedAttribute]
internal void add_SourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_SourceChanged(EventHandler value);
}
[TypeConversionAttribute("Xamarin.Forms.UrlWebViewSource")]
public class Xamarin.Forms.WebViewSourceTypeConverter : TypeConverter {
    public virtual object ConvertFromInvariantString(string value);
}
[AttributeUsageAttribute("4")]
public class Xamarin.Forms.Xaml.AcceptEmptyServiceProviderAttribute : Attribute {
}
internal static class Xamarin.Forms.Xaml.Diagnostics.DebuggerHelper : object {
    internal static bool _mockDebuggerIsAttached;
    public static bool DebuggerIsAttached { get; }
    public static bool get_DebuggerIsAttached();
}
public class Xamarin.Forms.Xaml.Diagnostics.VisualDiagnostics : object {
    private static ConditionalWeakTable`2<object, XamlSourceInfo> sourceInfos;
    [CompilerGeneratedAttribute]
private static EventHandler`1<VisualTreeChangeEventArgs> VisualTreeChanged;
    private static VisualDiagnostics();
    [EditorBrowsableAttribute("1")]
public static void RegisterSourceInfo(object target, Uri uri, int lineNumber, int linePosition);
    [ObsoleteAttribute("use OnChildAdded/Removed")]
[EditorBrowsableAttribute("1")]
internal static void SendVisualTreeChanged(object parent, object child);
    internal static void OnChildAdded(Element parent, Element child);
    internal static void OnChildRemoved(Element parent, Element child, int oldLogicalIndex);
    [CompilerGeneratedAttribute]
public static void add_VisualTreeChanged(EventHandler`1<VisualTreeChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_VisualTreeChanged(EventHandler`1<VisualTreeChangeEventArgs> value);
    public static XamlSourceInfo GetXamlSourceInfo(object obj);
}
public class Xamarin.Forms.Xaml.Diagnostics.VisualTreeChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Child>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualTreeChangeType <ChangeType>k__BackingField;
    public object Parent { get; }
    public object Child { get; }
    public int ChildIndex { get; }
    public VisualTreeChangeType ChangeType { get; }
    public VisualTreeChangeEventArgs(object parent, object child, int childIndex, VisualTreeChangeType changeType);
    [CompilerGeneratedAttribute]
public object get_Parent();
    [CompilerGeneratedAttribute]
public object get_Child();
    [CompilerGeneratedAttribute]
public int get_ChildIndex();
    [CompilerGeneratedAttribute]
public VisualTreeChangeType get_ChangeType();
}
public enum Xamarin.Forms.Xaml.Diagnostics.VisualTreeChangeType : Enum {
    public int value__;
    public static VisualTreeChangeType Add;
    public static VisualTreeChangeType Remove;
}
public class Xamarin.Forms.Xaml.Diagnostics.XamlSourceInfo : object {
    [CompilerGeneratedAttribute]
private Uri <SourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public Uri SourceUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlSourceInfo(Uri sourceUri, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public Uri get_SourceUri();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    public void Deconstruct(Uri& sourceUri, Int32& lineNumber, Int32& linePosition);
}
internal interface Xamarin.Forms.Xaml.IConverterOptions {
    public bool IgnoreCase { get; }
    public abstract virtual bool get_IgnoreCase();
}
public interface Xamarin.Forms.Xaml.IMarkupExtension {
    public abstract virtual object ProvideValue(IServiceProvider serviceProvider);
}
public interface Xamarin.Forms.Xaml.IMarkupExtension`1 {
    public abstract virtual T ProvideValue(IServiceProvider serviceProvider);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
internal interface Xamarin.Forms.Xaml.Internals.INameScopeProvider {
    public INameScope NameScope { get; }
    public abstract virtual INameScope get_NameScope();
}
public interface Xamarin.Forms.Xaml.Internals.INativeBindingService {
    public abstract virtual bool TrySetBinding(object target, string propertyName, BindingBase binding);
    public abstract virtual bool TrySetBinding(object target, BindableProperty property, BindingBase binding);
    public abstract virtual bool TrySetValue(object target, BindableProperty property, object value);
}
public interface Xamarin.Forms.Xaml.Internals.INativeValueConverterService {
    public abstract virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
internal interface Xamarin.Forms.Xaml.IProvideParentValues {
    public IEnumerable`1<object> ParentObjects { get; }
    public abstract virtual IEnumerable`1<object> get_ParentObjects();
}
public interface Xamarin.Forms.Xaml.IProvideValueTarget {
    public object TargetObject { get; }
    public object TargetProperty { get; }
    public abstract virtual object get_TargetObject();
    public abstract virtual object get_TargetProperty();
}
public interface Xamarin.Forms.Xaml.IReferenceProvider {
    public abstract virtual object FindByName(string name);
}
public interface Xamarin.Forms.Xaml.IRootObjectProvider {
    public object RootObject { get; }
    public abstract virtual object get_RootObject();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Xaml.IServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider provider);
}
internal interface Xamarin.Forms.Xaml.IValueConverterProvider {
    public abstract virtual object Convert(object value, Type toType, Func`1<MemberInfo> minfoRetriever, IServiceProvider serviceProvider);
}
public interface Xamarin.Forms.Xaml.IValueProvider {
    public abstract virtual object ProvideValue(IServiceProvider serviceProvider);
}
public interface Xamarin.Forms.Xaml.IXamlTypeResolver {
    public abstract virtual Type Resolve(string qualifiedTypeName, IServiceProvider serviceProvider);
    public abstract virtual bool TryResolve(string qualifiedTypeName, Type& type);
}
public interface Xamarin.Forms.Xaml.IXmlLineInfoProvider {
    public IXmlLineInfo XmlLineInfo { get; }
    public abstract virtual IXmlLineInfo get_XmlLineInfo();
}
[AttributeUsageAttribute("4")]
internal class Xamarin.Forms.Xaml.ProvideCompiledAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CompiledVersion>k__BackingField;
    public string CompiledVersion { get; }
    public ProvideCompiledAttribute(string compiledVersion);
    [CompilerGeneratedAttribute]
public string get_CompiledVersion();
}
[AttributeUsageAttribute("4")]
internal class Xamarin.Forms.Xaml.RuntimeNamePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public RuntimeNamePropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("4")]
public class Xamarin.Forms.Xaml.TypeConversionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    public Type TargetType { get; private set; }
    public TypeConversionAttribute(Type targetType);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
private void set_TargetType(Type value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Xaml.TypeConversionExtensions : object {
    [ExtensionAttribute]
internal static object ConvertTo(object value, Type toType, Func`1<ParameterInfo> pinfoRetriever, IServiceProvider serviceProvider, Exception& exception);
    [ExtensionAttribute]
internal static object ConvertTo(object value, Type toType, Func`1<MemberInfo> minfoRetriever, IServiceProvider serviceProvider, Exception& exception);
    [ExtensionAttribute]
private static string GetTypeConverterTypeName(IEnumerable`1<CustomAttributeData> attributes);
    [ExtensionAttribute]
public static object ConvertTo(object value, Type toType, Type convertertype, IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static object ConvertTo(object value, Type toType, Func`1<object> getConverter, IServiceProvider serviceProvider, Exception& exception);
    [ExtensionAttribute]
internal static MethodInfo GetImplicitConversionOperator(Type onType, Type fromType, Type toType);
}
internal class Xamarin.Forms.Xaml.ValueConverterProvider : object {
    public sealed virtual object Convert(object value, Type toType, Func`1<MemberInfo> minfoRetriever, IServiceProvider serviceProvider);
}
public class Xamarin.Forms.Xaml.XamlParseException : Exception {
    private string _unformattedMessage;
    [CompilerGeneratedAttribute]
private IXmlLineInfo <XmlInfo>k__BackingField;
    public IXmlLineInfo XmlInfo { get; private set; }
    internal string UnformattedMessage { get; }
    public XamlParseException(string message);
    public XamlParseException(string message, Exception innerException);
    protected XamlParseException(SerializationInfo info, StreamingContext context);
    internal XamlParseException(string message, IServiceProvider serviceProvider, Exception innerException);
    public XamlParseException(string message, IXmlLineInfo xmlInfo, Exception innerException);
    [CompilerGeneratedAttribute]
public IXmlLineInfo get_XmlInfo();
    [CompilerGeneratedAttribute]
private void set_XmlInfo(IXmlLineInfo value);
    internal string get_UnformattedMessage();
    private static string FormatMessage(string message, IXmlLineInfo xmlinfo);
    private static IXmlLineInfo GetLineInfo(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.Xaml.XamlResourceIdAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string ResourceId { get; public set; }
    public string Path { get; public set; }
    public Type Type { get; public set; }
    public XamlResourceIdAttribute(string resourceId, string path, Type type);
    [CompilerGeneratedAttribute]
public string get_ResourceId();
    [CompilerGeneratedAttribute]
public void set_ResourceId(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    internal static string GetResourceIdForType(Type type);
    internal static string GetPathForType(Type type);
    internal static string GetResourceIdForPath(Assembly assembly, string path);
    internal static Type GetTypeForResourceId(Assembly assembly, string resourceId);
    internal static Type GetTypeForPath(Assembly assembly, string path);
}
public class Xamarin.Forms.Xaml.XmlLineInfo : object {
    private bool _hasLineInfo;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlLineInfo(int linenumber, int lineposition);
    public sealed virtual bool HasLineInfo();
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
}
[DebuggerDisplayAttribute("{XmlNamespace}, {ClrNamespace}, {AssemblyName}")]
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.XmlnsDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    public string XmlNamespace { get; }
    public string ClrNamespace { get; }
    public string AssemblyName { get; public set; }
    public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
public string get_ClrNamespace();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.XmlnsPrefixAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string XmlNamespace { get; }
    public string Prefix { get; }
    public XmlnsPrefixAttribute(string xmlNamespace, string prefix);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
public string get_Prefix();
}
