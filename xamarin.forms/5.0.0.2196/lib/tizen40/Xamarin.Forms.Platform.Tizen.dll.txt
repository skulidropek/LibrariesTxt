internal class ThisAssembly : object {
}
public class Xamarin.Forms.DisplayResolutionUnit : object {
    [CompilerGeneratedAttribute]
private bool <UseDP>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDeviceScale>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVP>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ViewportWidth>k__BackingField;
    public bool UseDP { get; private set; }
    public bool UseDeviceScale { get; private set; }
    public bool UseVP { get; private set; }
    public double ViewportWidth { get; private set; }
    public static DisplayResolutionUnit Pixel(bool useDeviceScale);
    public static DisplayResolutionUnit DP(bool useDeviceScale);
    public static DisplayResolutionUnit VP(double width);
    internal static DisplayResolutionUnit FromInit(bool useDP);
    [CompilerGeneratedAttribute]
public bool get_UseDP();
    [CompilerGeneratedAttribute]
private void set_UseDP(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDeviceScale();
    [CompilerGeneratedAttribute]
private void set_UseDeviceScale(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseVP();
    [CompilerGeneratedAttribute]
private void set_UseVP(bool value);
    [CompilerGeneratedAttribute]
public double get_ViewportWidth();
    [CompilerGeneratedAttribute]
private void set_ViewportWidth(double value);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportCellAttribute : HandlerAttribute {
    public ExportCellAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportHandlerAttribute : HandlerAttribute {
    public ExportHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportImageSourceHandlerAttribute : HandlerAttribute {
    public ExportImageSourceHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.ExportRendererAttribute : HandlerAttribute {
    [CompilerGeneratedAttribute]
private TargetIdiom <Target>k__BackingField;
    private TargetIdiom Target { get; private set; }
    public ExportRendererAttribute(Type handler, Type target);
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals);
    public ExportRendererAttribute(Type handler, Type target, TargetIdiom targetIdiom);
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals, TargetIdiom targetIdiom);
    [CompilerGeneratedAttribute]
private TargetIdiom get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(TargetIdiom value);
    public virtual bool ShouldRegister();
}
internal static class Xamarin.Forms.Flags : object {
    internal static string LightweightPlatformExperimental;
    internal static string DisableTabIndex;
}
[ExtensionAttribute]
public static class Xamarin.Forms.Forms : object {
    private static Lazy`1<string> s_profile;
    private static Lazy`1<int> s_dpi;
    private static Lazy`1<double> s_elmScale;
    private static Lazy`1<string> s_deviceType;
    private static Lazy`1<double> s_deviceScale;
    private static StaticRegistrarStrategy s_staticRegistrarStrategy;
    private static PlatformType s_platformType;
    private static bool s_useMessagingCenter;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ViewInitializedEventArgs> ViewInitialized;
    [CompilerGeneratedAttribute]
private static CoreApplication <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private static EvasObject <NativeParent>k__BackingField;
    [CompilerGeneratedAttribute]
private static CircleSurface <CircleSurface>k__BackingField;
    [CompilerGeneratedAttribute]
private static Element <RotaryFocusObject>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private static DeviceOrientation <NaturalOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseSkiaSharp>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseFastLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private static DisplayResolutionUnit <DisplayResolutionUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private static TizenTitleBarVisibility <TitleBarVisibility>k__BackingField;
    private static IReadOnlyList`1<string> s_flags;
    public static CoreApplication Context { get; internal set; }
    public static EvasObject NativeParent { get; internal set; }
    public static Layout BaseLayout { get; }
    public static CircleSurface CircleSurface { get; internal set; }
    [EditorBrowsableAttribute("1")]
public static Element RotaryFocusObject { get; internal set; }
    public static bool IsInitialized { get; private set; }
    public static DeviceOrientation NaturalOrientation { get; }
    public static StaticRegistrarStrategy StaticRegistrarStrategy { get; }
    public static PlatformType PlatformType { get; }
    public static bool UseMessagingCenter { get; }
    public static bool UseSkiaSharp { get; private set; }
    public static bool UseFastLayout { get; private set; }
    public static DisplayResolutionUnit DisplayResolutionUnit { get; private set; }
    public static int ScreenDPI { get; }
    public static Size PhysicalScreenSize { get; }
    internal static TizenTitleBarVisibility TitleBarVisibility { get; private set; }
    public static IReadOnlyList`1<string> Flags { get; }
    private static Forms();
    [CompilerGeneratedAttribute]
public static void add_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ViewInitialized(EventHandler`1<ViewInitializedEventArgs> value);
    [CompilerGeneratedAttribute]
public static CoreApplication get_Context();
    [CompilerGeneratedAttribute]
internal static void set_Context(CoreApplication value);
    [CompilerGeneratedAttribute]
public static EvasObject get_NativeParent();
    [CompilerGeneratedAttribute]
internal static void set_NativeParent(EvasObject value);
    public static Layout get_BaseLayout();
    [CompilerGeneratedAttribute]
public static CircleSurface get_CircleSurface();
    [CompilerGeneratedAttribute]
internal static void set_CircleSurface(CircleSurface value);
    [CompilerGeneratedAttribute]
public static Element get_RotaryFocusObject();
    [CompilerGeneratedAttribute]
internal static void set_RotaryFocusObject(Element value);
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public static DeviceOrientation get_NaturalOrientation();
    public static StaticRegistrarStrategy get_StaticRegistrarStrategy();
    public static PlatformType get_PlatformType();
    public static bool get_UseMessagingCenter();
    [CompilerGeneratedAttribute]
public static bool get_UseSkiaSharp();
    [CompilerGeneratedAttribute]
private static void set_UseSkiaSharp(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseFastLayout();
    [CompilerGeneratedAttribute]
private static void set_UseFastLayout(bool value);
    [CompilerGeneratedAttribute]
public static DisplayResolutionUnit get_DisplayResolutionUnit();
    [CompilerGeneratedAttribute]
private static void set_DisplayResolutionUnit(DisplayResolutionUnit value);
    public static int get_ScreenDPI();
    public static Size get_PhysicalScreenSize();
    [CompilerGeneratedAttribute]
internal static TizenTitleBarVisibility get_TitleBarVisibility();
    [CompilerGeneratedAttribute]
private static void set_TitleBarVisibility(TizenTitleBarVisibility value);
    private static DeviceOrientation GetDeviceOrientation();
    [ExtensionAttribute]
internal static void SendViewInitialized(VisualElement self, EvasObject nativeView);
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
    public static void SetTitleBarVisibility(TizenTitleBarVisibility visibility);
    public static TOut GetHandler(Type type, Object[] args);
    public static TOut GetHandlerForObject(object obj);
    public static TOut GetHandlerForObject(object obj, Object[] args);
    public static void Init(CoreApplication application);
    public static void Init(CoreApplication application, bool useDeviceIndependentPixel);
    public static void Init(CoreApplication application, DisplayResolutionUnit unit);
    public static void Init(InitializationOptions options);
    private static void SetupInit(CoreApplication application, InitializationOptions options);
    private static void RegisterSkiaSharpRenderers();
    private static Color GetAccentColor(string profile);
    public static int ConvertToPixel(double dp);
    public static int ConvertToScaledPixel(double dp);
    public static double ConvertToScaledDP(int pixel);
    public static double ConvertToScaledDP(double pixel);
    public static int ConvertToEflFontPoint(double sp);
    public static double ConvertToDPFont(int eflPt);
    public static string GetProfile();
    public static string GetDeviceType();
    [EditorBrowsableAttribute("1")]
public static void Preload();
}
public class Xamarin.Forms.InitializationOptions : object {
    [CompilerGeneratedAttribute]
private CoreApplication <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDeviceIndependentPixel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSkiaSharp>k__BackingField;
    [CompilerGeneratedAttribute]
private HandlerAttribute[] <Handlers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Func`1<IRegisterable>> <CustomHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private EffectScope[] <EffectScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private InitializationFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private StaticRegistrarStrategy <StaticRegistarStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformType <PlatformType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMessagingCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFastLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayResolutionUnit <DisplayResolutionUnit>k__BackingField;
    public CoreApplication Context { get; public set; }
    public bool UseDeviceIndependentPixel { get; public set; }
    public bool UseSkiaSharp { get; public set; }
    public HandlerAttribute[] Handlers { get; public set; }
    public Dictionary`2<Type, Func`1<IRegisterable>> CustomHandlers { get; public set; }
    public Assembly[] Assemblies { get; public set; }
    public EffectScope[] EffectScopes { get; public set; }
    public InitializationFlags Flags { get; public set; }
    public StaticRegistrarStrategy StaticRegistarStrategy { get; public set; }
    public PlatformType PlatformType { get; public set; }
    public bool UseMessagingCenter { get; public set; }
    public bool UseFastLayout { get; public set; }
    public DisplayResolutionUnit DisplayResolutionUnit { get; public set; }
    public InitializationOptions(CoreApplication application);
    public InitializationOptions(CoreApplication application, bool useDeviceIndependentPixel, HandlerAttribute[] handlers);
    public InitializationOptions(CoreApplication application, bool useDeviceIndependentPixel, Assembly[] assemblies);
    [CompilerGeneratedAttribute]
public CoreApplication get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(CoreApplication value);
    [CompilerGeneratedAttribute]
public bool get_UseDeviceIndependentPixel();
    [CompilerGeneratedAttribute]
public void set_UseDeviceIndependentPixel(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSkiaSharp();
    [CompilerGeneratedAttribute]
public void set_UseSkiaSharp(bool value);
    [CompilerGeneratedAttribute]
public HandlerAttribute[] get_Handlers();
    [CompilerGeneratedAttribute]
public void set_Handlers(HandlerAttribute[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, Func`1<IRegisterable>> get_CustomHandlers();
    [CompilerGeneratedAttribute]
public void set_CustomHandlers(Dictionary`2<Type, Func`1<IRegisterable>> value);
    [CompilerGeneratedAttribute]
public Assembly[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(Assembly[] value);
    [CompilerGeneratedAttribute]
public EffectScope[] get_EffectScopes();
    [CompilerGeneratedAttribute]
public void set_EffectScopes(EffectScope[] value);
    [CompilerGeneratedAttribute]
public InitializationFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(InitializationFlags value);
    [CompilerGeneratedAttribute]
public StaticRegistrarStrategy get_StaticRegistarStrategy();
    [CompilerGeneratedAttribute]
public void set_StaticRegistarStrategy(StaticRegistrarStrategy value);
    [CompilerGeneratedAttribute]
public PlatformType get_PlatformType();
    [CompilerGeneratedAttribute]
public void set_PlatformType(PlatformType value);
    [CompilerGeneratedAttribute]
public bool get_UseMessagingCenter();
    [CompilerGeneratedAttribute]
public void set_UseMessagingCenter(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseFastLayout();
    [CompilerGeneratedAttribute]
public void set_UseFastLayout(bool value);
    [CompilerGeneratedAttribute]
public DisplayResolutionUnit get_DisplayResolutionUnit();
    [CompilerGeneratedAttribute]
public void set_DisplayResolutionUnit(DisplayResolutionUnit value);
    public void UseStaticRegistrar(StaticRegistrarStrategy strategy, Dictionary`2<Type, Func`1<IRegisterable>> customHandlers, bool disableCss);
}
internal class Xamarin.Forms.Internals.Crc64 : HashAlgorithm {
    private static Crc64 _instance;
    private static UInt64[] Table;
    private ulong crc;
    private ulong length;
    private static UInt32[] _lookup32;
    public static Crc64 Instance { get; }
    private static Crc64();
    public static Crc64 get_Instance();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private static UInt32[] CreateLookup32();
    private static string ByteArrayToHexViaLookup32(Byte[] bytes);
    public static string GetHash(string input);
}
[ExtensionAttribute]
public static class Xamarin.Forms.PageExtensions : object {
    [ExtensionAttribute]
public static EvasObject CreateEvasObject(Page page, EvasObject parent, bool hasAlpha);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.AccessibilityExtensions : object {
    [ExtensionAttribute]
public static string SetAccessibilityName(IAccessibleObject Control, Element Element, string _defaultAccessibilityName);
    [ExtensionAttribute]
public static string SetAccessibilityDescription(IAccessibleObject Control, Element Element, string _defaultAccessibilityDescription);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsAccessibilityElement(IAccessibleObject Control, Element Element, Nullable`1<bool> _defaultIsAccessibilityElement);
    [ExtensionAttribute]
public static void SetLabeledBy(IAccessibleObject Control, Element Element);
}
public class Xamarin.Forms.Platform.Tizen.ActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, ProgressBar> {
    private static Color s_defaultColor;
    private static ActivityIndicatorRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    private void UpdateColor(bool initialize);
    private void UpdateIsRunning();
    protected virtual void UpdateIsEnabled(bool initialize);
}
internal enum Xamarin.Forms.Platform.Tizen.BarItemColorType : Enum {
    public int value__;
    public static BarItemColorType Background;
    public static BarItemColorType Text;
    public static BarItemColorType SelectedTab;
    public static BarItemColorType UnselectedTab;
}
public class Xamarin.Forms.Platform.Tizen.BoxViewRenderer : ViewRenderer`2<BoxView, RoundRectangle> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void UpdateLayout();
    protected virtual void UpdateOpacity(bool initialize);
    private void OnRadiusUpdate(bool init);
    private void UpdateColor();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.BrushExtensions : object {
    [ExtensionAttribute]
public static SKPath ToPath(SKRectI bounds);
    [ExtensionAttribute]
public static SKPath ToPath(SKRoundRect bounds);
    [ExtensionAttribute]
public static SKPath ToRoundedRectPath(SKRectI bounds, CornerRadius cornerRadius);
    [ExtensionAttribute]
public static SKPaint GetBackgroundPaint(VisualElement element, SKRectI bounds);
    [ExtensionAttribute]
public static SKShader CreateShader(GradientBrush gradientBrush, SKRect bounds);
    [ExtensionAttribute]
public static SKColor ToSolidColor(SolidColorBrush solidColorBrush);
    private static SKShader CreateLinearGradient(LinearGradientBrush linearGradientBrush, SKRect pathBounds);
    private static SKShader CreateRadialGradient(RadialGradientBrush radialGradientBrush, SKRect pathBounds);
}
public class Xamarin.Forms.Platform.Tizen.ButtonRenderer : ViewRenderer`2<Button, Button> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual Button CreateNativeControl();
    protected virtual Size MinimumSize();
    protected virtual void UpdateThemeStyle();
    protected virtual void Dispose(bool disposing);
    private void OnButtonClicked(object sender, EventArgs e);
    private void OnButtonPressed(object sender, EventArgs e);
    private void OnButtonReleased(object sender, EventArgs e);
    private void UpdateText();
    private void UpdateFontSize();
    private void UpdateFontAttributes();
    private void UpdateFontFamily();
    private void UpdateTextColor();
    private void UpdateBitmap();
    private void UpdateBorder();
}
public class Xamarin.Forms.Platform.Tizen.CarouselPageRenderer : VisualElementRenderer`1<CarouselPage> {
    private static int ItemMaxCount;
    private static int OddMiddleItem;
    private static int EvenMiddleItem;
    private Index _index;
    private List`1<IndexItem> _items;
    private bool _isUpdateCarousel;
    private int _childCount;
    private Box _outterLayout;
    private Box _innerContainer;
    private Scroller _scroller;
    private int _pageIndex;
    private int _changedByScroll;
    private Size _layoutBound;
    private bool _isInitalized;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CarouselPage> e);
    protected virtual void OnElementReady();
    protected virtual void Dispose(bool disposing);
    private void OnOutterLayoutUpdate();
    private void OnInnerLayoutUpdate();
    private void OnCurrentPageChanged(object sender, EventArgs e);
    private void OnPageScrolled(object sender, EventArgs e);
    private void UpdateCarouselContent();
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private bool IsChangedByScroll();
    private void OnSelect(int selectIndex);
    private void OnIndexChanged(object sender, EventArgs e);
    private void UpdateIndexItem();
}
public class Xamarin.Forms.Platform.Tizen.CarouselViewRenderer : ItemsViewRenderer`2<CarouselView, CarouselView> {
    private List`1<View> _oldViews;
    private SmartEvent _animationStart;
    protected virtual CarouselView CreateNativeControl(EvasObject parent);
    protected virtual IItemsLayout GetItemsLayout();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CarouselView> e);
    protected virtual void UpdateHorizontalScrollBarVisibility();
    protected virtual void UpdateVerticalScrollBarVisibility();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void OnDragStart(object sender, EventArgs e);
    private void OnDragStop(object sender, EventArgs e);
    private void OnScrollStart(object sender, EventArgs e);
    private void OnScrolled(object sender, ItemsViewScrolledEventArgs e);
    private void UpdateCurrentItemFromElement(bool isInitializing);
    private void UpdatePositionFromElement(bool isInitializing);
    private void ScrollTo(int position);
    private void UpdateIsBounceEnabled();
    private void UpdateIsSwipeEnabled();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__5_0();
}
public abstract class Xamarin.Forms.Platform.Tizen.CellRenderer : object {
    private static string HeightProperty;
    private Dictionary`2<Cell, Dictionary`2<string, EvasObject>> _realizedNativeViews;
    private ItemContext _currentItem;
    private GenItemClass _itemClass;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    public GenItemClass Class { get; protected set; }
    public string Style { get; protected set; }
    protected CellRenderer(string style);
    public GenItemClass get_Class();
    protected void set_Class(GenItemClass value);
    public virtual void SetGroupMode(bool enable);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
protected void set_Style(string value);
    protected GenItemClass CreateItemClass(string style);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
    protected virtual Span OnGetText(Cell cell, string part);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual void OnCreated(Cell cell, bool isGroup);
    protected virtual void OnDeleted(Cell cell);
    protected virtual void OnUnrealizedCell(Cell cell);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    protected double FindCellContentHeight(Cell cell);
    private static Span ToNative(Span span);
    public void SendCellPropertyChanged(Cell cell, GenItem item, string property);
    public void SendUnrealizedCell(Cell cell);
    public void SendCreatedCell(Cell cell, bool isGroup);
    internal ItemContext GetCurrentItem();
    private string GetText(object data, string part);
    private EvasObject GetContent(object data, string part);
    private EvasObject ReusableContent(object data, string part, EvasObject old);
    private void UpdateRealizedView(Cell cell, string part, EvasObject nativeView);
    private void ItemDeleted(object data);
}
public class Xamarin.Forms.Platform.Tizen.CheckBoxRenderer : ViewRenderer`2<CheckBox, Check> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void Dispose(bool disposing);
    private void OnStateChanged(object sender, EventArgs e);
    private void UpdateIsChecked();
    private void UpdateOnColor(bool initialize);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.ColorExtensions : object {
    [ExtensionAttribute]
public static Color ToNative(Color c);
    [ExtensionAttribute]
public static Color WithAlpha(Color color, double alpha);
    [ExtensionAttribute]
public static Color WithPremultiplied(Color color, double alpha);
    [ExtensionAttribute]
internal static string ToHex(Color c);
}
internal class Xamarin.Forms.Platform.Tizen.ConsoleLogger : object {
    public sealed virtual void Debug(string tag, string message, string file, string func, int line);
    public sealed virtual void Verbose(string tag, string message, string file, string func, int line);
    public sealed virtual void Info(string tag, string message, string file, string func, int line);
    public sealed virtual void Warn(string tag, string message, string file, string func, int line);
    public sealed virtual void Error(string tag, string message, string file, string func, int line);
    public sealed virtual void Fatal(string tag, string message, string file, string func, int line);
    private void Print(string level, string tag, string message, string file, string func, int line);
}
internal class Xamarin.Forms.Platform.Tizen.CustomFocusManager : object {
    private static bool s_reorderTriggered;
    private static ObservableCollection`1<CustomFocusManager> s_tabIndexList;
    private VisualElement _nextUp;
    private VisualElement _nextDown;
    private VisualElement _nextLeft;
    private VisualElement _nextRight;
    private VisualElement _nextForward;
    private VisualElement _nextBackward;
    private int _tabIndex;
    private bool _isTabStop;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private Widget <NativeView>k__BackingField;
    private VisualElement Element { get; }
    private Widget NativeView { get; }
    public int TabIndex { get; public set; }
    public bool IsTabStop { get; public set; }
    public VisualElement NextUp { get; public set; }
    public VisualElement NextDown { get; public set; }
    public VisualElement NextLeft { get; public set; }
    public VisualElement NextRight { get; public set; }
    public VisualElement NextForward { get; public set; }
    public VisualElement NextBackward { get; public set; }
    private static CustomFocusManager();
    public CustomFocusManager(VisualElement element, Widget nativeView);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private VisualElement get_Element();
    [CompilerGeneratedAttribute]
private Widget get_NativeView();
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public bool get_IsTabStop();
    public void set_IsTabStop(bool value);
    public VisualElement get_NextUp();
    public void set_NextUp(VisualElement value);
    public VisualElement get_NextDown();
    public void set_NextDown(VisualElement value);
    public VisualElement get_NextLeft();
    public void set_NextLeft(VisualElement value);
    public VisualElement get_NextRight();
    public void set_NextRight(VisualElement value);
    public VisualElement get_NextForward();
    public void set_NextForward(VisualElement value);
    public VisualElement get_NextBackward();
    public void set_NextBackward(VisualElement value);
    public sealed virtual void Dispose();
    public static void StartReorderTabIndex();
    protected virtual void Dispose(bool disposing);
    private void SetUpFocus(VisualElement next, FocusDirection direction);
    private void SetNativeCustomFocus(VisualElement next, FocusDirection direction);
    private void OnNextViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private FocusDirection GetFocusDirection(VisualElement nextView);
    private static void ReorderTabIndex();
    private static void TabIndexCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static bool PageIsVisible(Page page);
    private static bool ElementIsVisible(CustomFocusManager manager);
}
public class Xamarin.Forms.Platform.Tizen.DatePickerRenderer : ViewRenderer`2<DatePicker, Entry> {
    private static string DialogTitle;
    private Lazy`1<IDateTimeDialog> _lazyDialog;
    protected virtual IDateTimeDialog CreateDialog();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    protected virtual Entry CreateNativeControl();
    protected virtual Size MinimumSize();
    protected virtual void Dispose(bool disposing);
    private void OnTextBlockFocused(object sender, EventArgs e);
    protected virtual void OnDateTimeChanged(object sender, DateChangedEventArgs dcea);
    protected virtual void UpdateDate();
    protected virtual void UpdateTextColor();
    protected virtual void OnPickerOpened(object sender, EventArgs args);
    protected virtual void OnPickerClosed(object sender, EventArgs args);
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    [CompilerGeneratedAttribute]
private IDateTimeDialog <OnElementChanged>b__4_0();
}
public class Xamarin.Forms.Platform.Tizen.DefaultPlatform : BindableObject {
    private NavigationModel _navModel;
    private bool _disposed;
    private Naviframe _internalNaviframe;
    private PopupManager _popupManager;
    private HashSet`1<EvasObject> _alerts;
    [CompilerGeneratedAttribute]
private EventHandler`1<RootNativeViewChangedEventArgs> RootNativeViewChanged;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAlpha>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <CurrentModalNavigationTask>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <CurrentTaskCompletionSource>k__BackingField;
    public Page Page { get; private set; }
    public bool HasAlpha { get; public set; }
    private Task CurrentModalNavigationTask { get; private set; }
    private TaskCompletionSource`1<bool> CurrentTaskCompletionSource { get; private set; }
    private IPageController CurrentPageController { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.ModalStack { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.NavigationStack { get; }
    internal DefaultPlatform(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(Page value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasAlpha();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasAlpha(bool value);
    [CompilerGeneratedAttribute]
private Task get_CurrentModalNavigationTask();
    [CompilerGeneratedAttribute]
private void set_CurrentModalNavigationTask(Task value);
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> get_CurrentTaskCompletionSource();
    [CompilerGeneratedAttribute]
private void set_CurrentTaskCompletionSource(TaskCompletionSource`1<bool> value);
    private IPageController get_CurrentPageController();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_ModalStack();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_NavigationStack();
    public sealed virtual void Dispose();
    public sealed virtual void SetPage(Page newRoot);
    public sealed virtual bool SendBackButtonPressed();
    public sealed virtual EvasObject GetRootNativeView();
    public sealed virtual bool PageIsChildOfPlatform(Page page);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnBindingContextChanged();
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<Xamarin-Forms-INavigation-PushModalAsync>d__48")]
private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal, bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<Xamarin-Forms-INavigation-PopModalAsync>d__50")]
private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<PushModalInternal>d__51")]
private Task PushModalInternal(Page modal, bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<PopModalInternal>d__52")]
private Task PopModalInternal(bool animated);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.DefaultPlatform/<WaitForCompletion>d__53")]
private Task WaitForCompletion(bool shouldWait, TaskCompletionSource`1<bool> tcs);
    private void NaviAnimationFinished(object sender, EventArgs e);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private bool <SetPage>b__33_0();
}
public class Xamarin.Forms.Platform.Tizen.DefaultRenderer : VisualElementRenderer`1<VisualElement> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<VisualElement> e);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.DensityIndependentPixelExtensions : object {
    [ExtensionAttribute]
public static Rectangle ToDP(Rect rect);
    [ExtensionAttribute]
public static Rect ToPixel(Rectangle rect);
    [ExtensionAttribute]
public static Size ToDP(Size size);
    [ExtensionAttribute]
public static Size ToPixel(Size size);
}
internal class Xamarin.Forms.Platform.Tizen.Deserializer : object {
    private static string PropertyStoreFile;
    public sealed virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    public sealed virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
internal class Xamarin.Forms.Platform.Tizen.DlogLogger : object {
    public sealed virtual void Debug(string tag, string message, string file, string func, int line);
    public sealed virtual void Verbose(string tag, string message, string file, string func, int line);
    public sealed virtual void Info(string tag, string message, string file, string func, int line);
    public sealed virtual void Warn(string tag, string message, string file, string func, int line);
    public sealed virtual void Error(string tag, string message, string file, string func, int line);
    public sealed virtual void Fatal(string tag, string message, string file, string func, int line);
}
public static class Xamarin.Forms.Platform.Tizen.DragDropExtensions : object {
    public static void AddDropTarget(EvasObject obj, DragDropContentType contentType, DragStateCallback enterCallback, DragStateCallback leaveCallback, DragPositionCallback positionCallback, DropCallback dropCallback);
    public static void StartDrag(EvasObject obj, DragDropContentType contentType, string data, DragDropActionType actionType, DragIconCreateCallback iconCallback, DragPositionCallback positionCallback, DragAcceptCallback acceptCallback, DragStateCallback statCallback);
}
public class Xamarin.Forms.Platform.Tizen.DragGestureHandler : GestureHandler {
    private bool _isApi4;
    private DragIconCreateCallback _iconCallback;
    private DragStateCallback _dragDoneCallback;
    private static bool s_isDragging;
    private static CustomDragStateData s_currentDragStateData;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    public GestureType Type { get; }
    public IVisualElementRenderer Renderer { get; }
    public static CustomDragStateData CurrentStateData { get; }
    private EvasObject NativeView { get; }
    public DragGestureHandler(IGestureRecognizer recognizer, IVisualElementRenderer renderer);
    public virtual GestureType get_Type();
    [CompilerGeneratedAttribute]
public IVisualElementRenderer get_Renderer();
    public static CustomDragStateData get_CurrentStateData();
    private EvasObject get_NativeView();
    public void ResetCurrentStateData();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
    private void StartDrag();
    private IntPtr OnIconCallback(IntPtr data, IntPtr window, Int32& xoff, Int32& yoff);
    private EvasObject GetDefaultIcon(EvasObject parent);
    private EvasObject GetImageIcon(EvasObject parent);
    private EvasObject GetShapeView(EvasObject parent);
    private void OnDragDoneCallback(IntPtr data, IntPtr obj);
}
public class Xamarin.Forms.Platform.Tizen.DropGestureHandler : GestureHandler {
    private bool _isApi4;
    private DragStateCallback _dragEnterCallback;
    private DragStateCallback _dragLeaveCallback;
    private DropCallback _dropCallback;
    [CompilerGeneratedAttribute]
private IVisualElementRenderer <Renderer>k__BackingField;
    public GestureType Type { get; }
    public IVisualElementRenderer Renderer { get; }
    private EvasObject NativeView { get; }
    public DropGestureHandler(IGestureRecognizer recognizer, IVisualElementRenderer renderer);
    public virtual GestureType get_Type();
    [CompilerGeneratedAttribute]
public IVisualElementRenderer get_Renderer();
    private EvasObject get_NativeView();
    public void AddDropGesture();
    private void OnEnterCallback(IntPtr data, IntPtr obj);
    private void OnLeaveCallback(IntPtr data, IntPtr obj);
    private bool OnDropCallback(IntPtr data, IntPtr obj, IntPtr selectionData);
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
public class Xamarin.Forms.Platform.Tizen.EditorRenderer : ViewRenderer`2<Editor, Entry> {
    private bool _isSendComplate;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected virtual Entry CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    protected virtual void UpdateTextColor();
    private void OnTextChanged(object sender, EventArgs e);
    private void OnEntryFocused(object sender, EventArgs e);
    private void OnEntryUnfocused(object sender, EventArgs e);
    private void OnCompleted(object sender, EventArgs e);
    private void UpdateText();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    private void UpdateKeyboard(bool initialize);
    private void UpdateIsSpellCheckEnabled();
    private void UpdateMaxLength();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private string MaxLengthFilter(Entry entry, string s);
    private void UpdateIsReadOnly();
}
public class Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TElement <OldElement>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <NewElement>k__BackingField;
    public TElement OldElement { get; private set; }
    public TElement NewElement { get; private set; }
    public ElementChangedEventArgs`1(TElement oldElement, TElement newElement);
    [CompilerGeneratedAttribute]
public TElement get_OldElement();
    [CompilerGeneratedAttribute]
private void set_OldElement(TElement value);
    [CompilerGeneratedAttribute]
public TElement get_NewElement();
    [CompilerGeneratedAttribute]
private void set_NewElement(TElement value);
}
public class Xamarin.Forms.Platform.Tizen.EllipseRenderer : ShapeRenderer {
}
public class Xamarin.Forms.Platform.Tizen.EmbeddedFontLoader : object {
    private static string _fontCacheFolderName;
    [CompilerGeneratedAttribute]
private DirectoryInfo <FontCacheDirectory>k__BackingField;
    public DirectoryInfo FontCacheDirectory { get; private set; }
    [CompilerGeneratedAttribute]
public DirectoryInfo get_FontCacheDirectory();
    [CompilerGeneratedAttribute]
private void set_FontCacheDirectory(DirectoryInfo value);
    public sealed virtual ValueTuple`2<bool, string> LoadFont(EmbeddedFont font);
}
public class Xamarin.Forms.Platform.Tizen.EntryCellRenderer : ViewCellRenderer {
    private Dictionary`2<EvasObject, VisualElement> _cacheCandidate;
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    [CompilerGeneratedAttribute]
private void <OnGetContent>b__2_0(object sender, EventArgs e);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.EntryExtensions : object {
    [ExtensionAttribute]
internal static InputPanelReturnKeyType ToInputPanelReturnKeyType(ReturnType returnType);
    [ExtensionAttribute]
public static void GetSelectRegion(Entry entry, Int32& start, Int32& end);
    private static void elm_entry_select_region_get(IntPtr obj, Int32& start, Int32& end);
}
public class Xamarin.Forms.Platform.Tizen.EntryRenderer : ViewRenderer`2<Entry, Entry> {
    private SmartEvent _selectionCleared;
    private bool _nativeSelectionIsUpdating;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    protected virtual Entry CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    private void OnTextChanged(object sender, EventArgs e);
    private void OnCompleted(object sender, EventArgs e);
    private void UpdateIsPassword();
    private void UpdateText();
    protected virtual void UpdateTextColor();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateKeyboard(bool initialize);
    private void UpdateIsSpellCheckEnabled();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private void UpdateFontWeight();
    private void UpdateMaxLength();
    private string MaxLengthFilter(Entry entry, string s);
    private void UpdateReturnType();
    private void UpdateSelectionLength(bool initialize);
    private int GetSelectionEnd(int start);
    private int GetSelectionStart();
    private void OnSelectionCleared(object sender, EventArgs e);
    private void OnCursorChanged(object sender, EventArgs e);
    private void SetCursorPositionFromRenderer(int position);
    private void SetSelectionLengthFromRenderer(int selectionLength);
    private void UpdateIsReadOnly();
    private void UpdateClearButtonVisibility(bool init);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__3_0();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.EvasMapExtensions : object {
    [ExtensionAttribute]
public static void Perspective3D(EvasMap map, int px, int py, int z0, int foc);
    private static void evas_map_util_3d_perspective(IntPtr map, int px, int py, int z0, int foc);
}
public class Xamarin.Forms.Platform.Tizen.FastLayoutRenderer : ViewRenderer`2<Layout, EvasFormsCanvas> {
    private bool _layoutUpdatedRegistered;
    private Lazy`1<SKCanvasView> _backgroundCanvas;
    public SKCanvasView BackgroundCanvas { get; }
    public sealed virtual SKCanvasView get_BackgroundCanvas();
    public sealed virtual void RegisterOnLayoutUpdated();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateInputTransparent(bool initialize);
    protected virtual void UpdateLayout();
    protected virtual void OnBackgroundPaint(object sender, SKPaintSurfaceEventArgs e);
    protected virtual void OnBackgroundLayoutUpdated(object sender, LayoutEventArgs e);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private SKCanvasView <OnElementChanged>b__5_0();
}
public class Xamarin.Forms.Platform.Tizen.FileImageSourceHandler : object {
    public sealed virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public class Xamarin.Forms.Platform.Tizen.FlyoutPageRenderer : VisualElementRenderer`1<FlyoutPage> {
    private FlyoutPage _flyoutPage;
    private FlyoutContainer _flyoutContainer;
    private FlyoutContainer _detailContainer;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<FlyoutPage> e);
    private void OnFlyoutPageDisappearing(object sender, EventArgs e);
    private void OnFlyoutPageAppearing(object sender, EventArgs e);
    protected virtual void OnElementReady();
    protected virtual void Dispose(bool disposing);
    protected void UpdateFlyoutRatio(double popoverRatio, double splitRatio);
    private void OnBackButtonPressed(object sender, BackButtonPressedEventArgs e);
    private void UpdateFlyoutLayoutBehavior();
    private void UpdateFlyout(bool isInit);
    private void UpdateDetail(bool isInit);
    private void UpdateIsPresented();
    private void UpdateIsGestureEnabled();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_0(object sender, IsPresentedChangedEventArgs ev);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_1(object sender, UpdateIsPresentChangeableEventArgs ev);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.FontExtensions : object {
    [ExtensionAttribute]
public static string ToNativeFontFamily(string self);
    private static string CleanseFontName(string fontName);
    public static void FontReinit();
    private static void evas_font_reinit();
}
public class Xamarin.Forms.Platform.Tizen.FormsApplication : CoreUIApplication {
    private ITizenPlatform _platform;
    private Application _application;
    private Window _window;
    private bool _useBezelInteration;
    [CompilerGeneratedAttribute]
private Layout <BaseLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private CircleSurface <BaseCircleSurface>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<Task> <RequestingUserConsentFunc>k__BackingField;
    public Window MainWindow { get; protected set; }
    public Layout BaseLayout { get; protected set; }
    public CircleSurface BaseCircleSurface { get; protected set; }
    public bool UseBezelInteration { get; }
    [EditorBrowsableAttribute("1")]
public static Func`1<Task> RequestingUserConsentFunc { get; public set; }
    public Window get_MainWindow();
    protected void set_MainWindow(Window value);
    [CompilerGeneratedAttribute]
public Layout get_BaseLayout();
    [CompilerGeneratedAttribute]
protected void set_BaseLayout(Layout value);
    [CompilerGeneratedAttribute]
public CircleSurface get_BaseCircleSurface();
    [CompilerGeneratedAttribute]
protected void set_BaseCircleSurface(CircleSurface value);
    public bool get_UseBezelInteration();
    protected virtual void OnPreCreate();
    protected virtual void OnTerminate();
    protected virtual void OnPause();
    protected virtual void OnResume();
    [CompilerGeneratedAttribute]
public static Func`1<Task> get_RequestingUserConsentFunc();
    [CompilerGeneratedAttribute]
public static void set_RequestingUserConsentFunc(Func`1<Task> value);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.FormsApplication/<LoadApplication>d__26")]
public void LoadApplication(Application application);
    private void AppOnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateOverlayContent();
    private void SetPage(Page page);
    private void InitializeWindow();
    public void Run();
    public virtual void Exit();
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__30_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__30_1(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__30_2(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeWindow>b__30_3(object s, RootNativeViewChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.FrameRenderer : LayoutRenderer {
    private static int _thickness;
    private static int _shadow_shift;
    private static int _shadow_thickness;
    private static Color s_DefaultColor;
    private static Color s_ShadowColor;
    private Polygon _shadow;
    private Polygon _frame;
    private static FrameRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void Dispose(bool disposing);
    private static void DrawFrame(Polygon frame, int left, int top, int right, int bottom, int thickness);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    private void UpdateGeometry();
    private void UpdateColor();
    private void UpdateShadowVisibility();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.GeometryExtensions : object {
    [ExtensionAttribute]
public static SKPath ToSKPath(Geometry geometry);
    private static SKPath MakePath(Geometry geometry);
    private static SKPath MakePath(LineGeometry lineGeometry);
    private static SKPath MakePath(RectangleGeometry rectangleGeometry);
    private static SKPath MakePath(EllipseGeometry ellipseGeometry);
    private static SKPath MakePath(GeometryGroup geometryGroup);
    private static SKPath MakePath(PathGeometry pathGeometry);
}
internal class Xamarin.Forms.Platform.Tizen.GestureDetector : object {
    private IDictionary`2<GestureType, List`1<GestureHandler>> _handlerCache;
    private IVisualElementRenderer _renderer;
    private GestureLayer _gestureLayer;
    private double _doubleTapTime;
    private double _longTapTime;
    private bool _inputTransparent;
    private bool _isEnabled;
    private View View { get; }
    public bool IsEnabled { get; public set; }
    public bool InputTransparent { get; public set; }
    public GestureDetector(IVisualElementRenderer renderer);
    private View get_View();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_InputTransparent();
    public void set_InputTransparent(bool value);
    public void Clear();
    public void AddGestures(IEnumerable`1<IGestureRecognizer> recognizers);
    public void RemoveGestures(IEnumerable`1<IGestureRecognizer> recognizers);
    private void CreateGestureLayer();
    private void UpdateGestureLayerEnabled();
    private void AddGesture(IGestureRecognizer recognizer);
    private void RemoveGesture(IGestureRecognizer recognizer);
    private void AddLineGesture(GestureType type);
    private void AddPinchGesture(GestureType type);
    private void AddTapGesture(GestureType type);
    private void AddDoubleTapGesture(GestureType type, double timeout);
    private void AddLongTapGesture(GestureType type, double timeout);
    private void AddFlickGesture(GestureType type, double timeout);
    private void AddRotateGesture(GestureType type);
    private void AddMomentumGesture(GestureType type);
    private void RemoveLineGesture();
    private void RemovePinchGesture();
    private void RemoveTapGesture(GestureType type);
    private void RemoveFlickGesture();
    private void RemoveRotateGesture();
    private void RemoveMomentumGesture();
    private void OnGestureStarted(GestureType type, object data);
    private void OnGestureMoved(GestureType type, object data);
    private void OnGestureCompleted(GestureType type, object data);
    private void OnGestureCanceled(GestureType type, object data);
    private void OnDoubleTapStarted(GestureType type, object data);
    private void OnDoubleTapCompleted(GestureType type, object data);
    private void OnLongTapStarted(GestureType type, object data);
    private void OnLongTapMoved(GestureType type, object data);
    private void OnLongTapCompleted(GestureType type, object data);
    private GestureHandler CreateHandler(IGestureRecognizer recognizer);
    private GestureHandler LookupHandler(IGestureRecognizer recognizer);
    private void UpdateTapGesture(GestureHandler handler);
    private void UpdateLongTapGesture(GestureHandler handler);
    private void UpdateFlickGesture(GestureHandler handler);
    private void OnGestureRecognizerPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnKeyDown(object sender, EvasKeyEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateGestureLayer>b__19_0(object s, EventArgs e);
}
public abstract class Xamarin.Forms.Platform.Tizen.GestureHandler : object {
    [CompilerGeneratedAttribute]
private IGestureRecognizer <Recognizer>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IGestureRecognizer Recognizer { get; private set; }
    public GestureType Type { get; }
    public double Timeout { get; }
    protected GestureHandler(IGestureRecognizer recognizer);
    [CompilerGeneratedAttribute]
public IGestureRecognizer get_Recognizer();
    [CompilerGeneratedAttribute]
private void set_Recognizer(IGestureRecognizer value);
    public abstract virtual GestureType get_Type();
    [CompilerGeneratedAttribute]
public virtual double get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected abstract virtual void OnStarted(View sender, object data);
    protected abstract virtual void OnMoved(View sender, object data);
    protected abstract virtual void OnCompleted(View sender, object data);
    protected abstract virtual void OnCanceled(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendStarted(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendCompleted(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendMoved(View sender, object data);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IGestureController.SendCanceled(View sender, object data);
    protected virtual void OnRecognizerPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public interface Xamarin.Forms.Platform.Tizen.IFlyoutController {
    public abstract virtual void Open();
}
public interface Xamarin.Forms.Platform.Tizen.IGestureController {
    public abstract virtual void SendStarted(View sender, object data);
    public abstract virtual void SendMoved(View sender, object data);
    public abstract virtual void SendCompleted(View sender, object data);
    public abstract virtual void SendCanceled(View sender, object data);
}
public interface Xamarin.Forms.Platform.Tizen.IImageSourceHandler {
    public abstract virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public interface Xamarin.Forms.Platform.Tizen.ILayoutRenderer {
    public abstract virtual void RegisterOnLayoutUpdated();
}
public interface Xamarin.Forms.Platform.Tizen.ILogger {
    public abstract virtual void Debug(string tag, string message, string file, string func, int line);
    public abstract virtual void Verbose(string tag, string message, string file, string func, int line);
    public abstract virtual void Info(string tag, string message, string file, string func, int line);
    public abstract virtual void Warn(string tag, string message, string file, string func, int line);
    public abstract virtual void Error(string tag, string message, string file, string func, int line);
    public abstract virtual void Fatal(string tag, string message, string file, string func, int line);
}
public class Xamarin.Forms.Platform.Tizen.ImageButtonRenderer : ViewRenderer`2<ImageButton, Box> {
    private Image _image;
    private Button _button;
    private RoundRectangle _round;
    private BorderRectangle _border;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageButton> e);
    protected virtual void UpdateAfterLoading();
    protected virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void Dispose(bool disposing);
    private void OnReleased(object sender, EventArgs e);
    private void OnPressed(object sender, EventArgs e);
    private void OnClicked(object sender, EventArgs e);
    private void OnLayout();
    private void UpdatePadding();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ImageButtonRenderer/<UpdateSource>d__15")]
private void UpdateSource();
    private void UpdateRadius(bool init);
    private void UpdateBorderWidth(bool init);
    private void UpdateBorderColor();
    private void UpdateAspect();
}
public class Xamarin.Forms.Platform.Tizen.ImageCellRenderer : TextCellRenderer {
    [CompilerGeneratedAttribute]
private string <ImagePart>k__BackingField;
    protected string ImagePart { get; protected set; }
    protected ImageCellRenderer(string style);
    [CompilerGeneratedAttribute]
protected string get_ImagePart();
    [CompilerGeneratedAttribute]
protected void set_ImagePart(string value);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.ImageExtensions : object {
    [ExtensionAttribute]
public static void ApplyAspect(Image image, Aspect aspect);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ImageExtensions/<LoadFromImageSourceAsync>d__1")]
[ExtensionAttribute]
public static Task`1<bool> LoadFromImageSourceAsync(Image image, ImageSource source);
    [ExtensionAttribute]
public static bool LoadFromFile(Image image, string file);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(ImageSource imageSource);
}
public class Xamarin.Forms.Platform.Tizen.ImageRenderer : ViewRenderer`2<Image, Image> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ImageRenderer/<UpdateSource>d__2")]
private void UpdateSource(bool initialize);
    private void UpdateFile(bool initialize);
    protected virtual void UpdateAfterLoading(bool initialize);
    private void UpdateAspect(bool initialize);
    private void UpdateIsOpaque(bool initialize);
    private void UpdateIsAnimationPlaying(bool initialize);
    private void UpdateBlendColor(bool initialize);
}
public class Xamarin.Forms.Platform.Tizen.IMEApplication : FormsApplication {
    public EditorWindow EditorWindow { get; }
    public EditorWindow get_EditorWindow();
    protected virtual void OnPreCreate();
    protected virtual void OnTerminate();
}
public interface Xamarin.Forms.Platform.Tizen.INavigationDrawer {
    public EvasObject TargetView { get; }
    public EvasObject NavigationView { get; public set; }
    public EvasObject Main { get; public set; }
    public bool IsOpen { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Toggled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Toggled(EventHandler value);
    public abstract virtual EvasObject get_TargetView();
    public abstract virtual EvasObject get_NavigationView();
    public abstract virtual void set_NavigationView(EvasObject value);
    public abstract virtual EvasObject get_Main();
    public abstract virtual void set_Main(EvasObject value);
    public abstract virtual bool get_IsOpen();
    public abstract virtual void set_IsOpen(bool value);
}
public interface Xamarin.Forms.Platform.Tizen.INavigationView {
    public EvasObject NativeView { get; }
    public FlyoutHeaderBehavior HeaderBehavior { get; public set; }
    public View Header { get; public set; }
    public Color BackgroundColor { get; public set; }
    public ImageSource BackgroundImageSource { get; public set; }
    public Aspect BackgroundImageAspect { get; public set; }
    public abstract virtual EvasObject get_NativeView();
    public abstract virtual FlyoutHeaderBehavior get_HeaderBehavior();
    public abstract virtual void set_HeaderBehavior(FlyoutHeaderBehavior value);
    public abstract virtual View get_Header();
    public abstract virtual void set_Header(View value);
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(Color value);
    public abstract virtual ImageSource get_BackgroundImageSource();
    public abstract virtual void set_BackgroundImageSource(ImageSource value);
    public abstract virtual Aspect get_BackgroundImageAspect();
    public abstract virtual void set_BackgroundImageAspect(Aspect value);
    public abstract virtual void BuildMenu(List`1<List`1<Element>> flyout);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
}
public class Xamarin.Forms.Platform.Tizen.IndicatorViewRenderer : ViewRenderer`2<IndicatorView, IndicatorView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<IndicatorView> e);
    private void OnSelectedPosition(object sender, SelectedPositionChangedEventArgs e);
    private void UpdateCount();
    private void UpdatePosition();
}
public interface Xamarin.Forms.Platform.Tizen.IRotaryInteraction {
    public IRotaryActionWidget RotaryWidget { get; }
    public abstract virtual IRotaryActionWidget get_RotaryWidget();
}
public interface Xamarin.Forms.Platform.Tizen.IShellSectionRenderer {
    public EvasObject NativeView { get; }
    public abstract virtual EvasObject get_NativeView();
}
public interface Xamarin.Forms.Platform.Tizen.IShellTabs {
    public ShellTabsType Scrollable { get; public set; }
    public EvasObject NativeView { get; }
    public Color BackgroundColor { get; public set; }
    public ToolbarItem SelectedItem { get; }
    public abstract virtual ShellTabsType get_Scrollable();
    public abstract virtual void set_Scrollable(ShellTabsType value);
    public abstract virtual EvasObject get_NativeView();
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(Color value);
    public abstract virtual ToolbarItem get_SelectedItem();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    public abstract virtual ToolbarItem Append(string label, string icon);
    public abstract virtual ToolbarItem Append(string label);
    public abstract virtual ToolbarItem InsertBefore(ToolbarItem before, string label, string icon);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.ItemsLayoutExtension : object {
    [ExtensionAttribute]
public static ICollectionViewLayoutManager ToLayoutManager(IItemsLayout layout, ItemSizingStrategy sizing);
}
public abstract class Xamarin.Forms.Platform.Tizen.ItemsViewRenderer`2 : ViewRenderer`2<TItemsView, TNative> {
    private INotifyCollectionChanged _observableSource;
    [CompilerGeneratedAttribute]
private IItemsLayout <ItemsLayout>k__BackingField;
    protected IItemsLayout ItemsLayout { get; private set; }
    [CompilerGeneratedAttribute]
protected IItemsLayout get_ItemsLayout();
    [CompilerGeneratedAttribute]
private void set_ItemsLayout(IItemsLayout value);
    protected abstract virtual TNative CreateNativeControl(EvasObject parent);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TItemsView> e);
    protected virtual void Dispose(bool disposing);
    protected void UpdateItemsLayout();
    protected virtual void AddChild(Element child);
    protected virtual void RemoveChild(VisualElement view);
    protected virtual void OnLayoutPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected abstract virtual IItemsLayout GetItemsLayout();
    protected virtual void OnItemSelectedFromUI(object sender, SelectedItemChangedEventArgs e);
    private void OnScrolled(object sender, ItemsViewScrolledEventArgs e);
    private void OnScrollToRequest(object sender, ScrollToRequestEventArgs e);
    private void UpdateItemsSource(bool initialize);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected void UpdateAdaptor(bool initialize);
    protected virtual void UpdateHorizontalScrollBarVisibility();
    protected virtual void UpdateVerticalScrollBarVisibility();
    private void UpdateFocusedItemScrollPosition(bool init);
}
[EditorBrowsableAttribute("1")]
public interface Xamarin.Forms.Platform.Tizen.ITizenPlatform {
    public bool HasAlpha { get; public set; }
    public abstract virtual void SetPage(Page page);
    public abstract virtual bool SendBackButtonPressed();
    public abstract virtual EvasObject GetRootNativeView();
    public abstract virtual bool get_HasAlpha();
    public abstract virtual void set_HasAlpha(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    public abstract virtual bool PageIsChildOfPlatform(Page page);
}
public interface Xamarin.Forms.Platform.Tizen.IVisualElementRenderer {
    public VisualElement Element { get; }
    public EvasObject NativeView { get; }
    public abstract virtual VisualElement get_Element();
    public abstract virtual EvasObject get_NativeView();
    public abstract virtual void SetElement(VisualElement element);
    public abstract virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public abstract virtual void UpdateLayout();
    public abstract virtual Rect GetNativeContentGeometry();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.KeyboardExtensions : object {
    [ExtensionAttribute]
public static Keyboard ToNative(Keyboard keyboard);
    [ExtensionAttribute]
public static AutoCapital ToAutoCapital(KeyboardFlags keyboardFlags);
    [ExtensionAttribute]
public static InputHints ToInputHints(Keyboard keyboard, bool isSpellCheckEnabled, bool isTextPredictionEnabled);
    [ExtensionAttribute]
public static void UpdateKeyboard(IEntry control, Keyboard keyboard, bool isSpellCheckEnabled, bool isTextPredictionEnabled);
}
public class Xamarin.Forms.Platform.Tizen.LabelRenderer : ViewRenderer`2<Label, Label> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual Size MinimumSize();
    private FormattedString ConvertFormattedText(FormattedString formattedString);
    private void UpdateTextDecorations();
    private void UpdateFormattedText();
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateFontProperties();
    private void UpdateLineBreakMode();
    private void UpdateFontWeight();
    private void UpdateLineHeight();
    private LineBreakMode ConvertToNativeLineBreakMode(LineBreakMode mode);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.LayoutExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<View> children, EvasObject obj, MeasureDelegate measureDelegate);
    [ExtensionAttribute]
public static View ToView(EvasObject obj, MeasureDelegate measureDelegate);
}
public class Xamarin.Forms.Platform.Tizen.LayoutRenderer : ViewRenderer`2<Layout, Canvas> {
    private bool _layoutUpdatedRegistered;
    private Lazy`1<SKCanvasView> _backgroundCanvas;
    public SKCanvasView BackgroundCanvas { get; }
    public sealed virtual SKCanvasView get_BackgroundCanvas();
    public sealed virtual void RegisterOnLayoutUpdated();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateInputTransparent(bool initialize);
    protected virtual void UpdateLayout();
    protected virtual void OnBackgroundPaint(object sender, SKPaintSurfaceEventArgs e);
    protected virtual void OnBackgroundLayoutUpdated(object sender, LayoutEventArgs e);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private SKCanvasView <OnElementChanged>b__5_0();
}
public class Xamarin.Forms.Platform.Tizen.LightweightPlatform : object {
    private NavigationModel _navModel;
    private Canvas _viewStack;
    private PopupManager _popupManager;
    private bool _hasAlpha;
    private Color _defaultPlatformColor;
    [CompilerGeneratedAttribute]
private EventHandler`1<RootNativeViewChangedEventArgs> RootNativeViewChanged;
    public bool HasAlpha { get; public set; }
    private IPageController CurrentPageController { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.ModalStack { get; }
    private IReadOnlyList`1<Page> Xamarin.Forms.INavigation.NavigationStack { get; }
    public LightweightPlatform(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RootNativeViewChanged(EventHandler`1<RootNativeViewChangedEventArgs> value);
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void set_HasAlpha(bool value);
    private IPageController get_CurrentPageController();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_ModalStack();
    private sealed virtual override IReadOnlyList`1<Page> Xamarin.Forms.INavigation.get_NavigationStack();
    public sealed virtual void SetPage(Page page);
    public sealed virtual bool SendBackButtonPressed();
    public sealed virtual EvasObject GetRootNativeView();
    public sealed virtual bool PageIsChildOfPlatform(Page page);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page modal);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page page, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    private void OnLayout(object sender, LayoutEventArgs e);
    private void ResetChildren();
}
public class Xamarin.Forms.Platform.Tizen.LineRenderer : ShapeRenderer {
}
public class Xamarin.Forms.Platform.Tizen.ListViewRenderer : ViewRenderer`2<ListView, ListView> {
    private GenListItem _lastSelectedItem;
    private int _selectedItemChanging;
    private IListViewController Controller { get; }
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    private IListViewController get_Controller();
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ListView> e);
    protected virtual ListView CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected void OnListViewItemSelected(object sender, GenListItemEventArgs e);
    protected void OnListViewItemUnselected(object sender, GenListItemEventArgs e);
    private void OnScrolled(object sender, EventArgs e);
    private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnGroupedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateSource();
    private void UpdateHeader(bool initialize);
    private void UpdateFooter(bool initialize);
    private void UpdateHasUnevenRows();
    private void UpdateRowHeight(bool initialize);
    private void UpdateIsGroupingEnabled(bool initialize);
    private void UpdateSelectedItem();
    private void UpdateSelectionMode();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    private void UpdateSeparator();
}
public static class Xamarin.Forms.Platform.Tizen.Log : object {
    [CompilerGeneratedAttribute]
private static string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private static ILogger <Logger>k__BackingField;
    public static string Tag { get; public set; }
    public static ILogger Logger { get; public set; }
    private static Log();
    [CompilerGeneratedAttribute]
public static string get_Tag();
    [CompilerGeneratedAttribute]
public static void set_Tag(string value);
    [CompilerGeneratedAttribute]
public static ILogger get_Logger();
    [CompilerGeneratedAttribute]
public static void set_Logger(ILogger value);
    public static void Debug(string message, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Debug(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Verbose(string message, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Verbose(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Info(string message, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Info(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Warn(string message, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Warn(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Error(string message, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Error(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    public static void Fatal(string message, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Guardian _, string file, string func, int line);
    public static void Fatal(string message, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Guardian _, string file, string func, int line);
    private static bool IsTizen();
}
[ObsoleteAttribute("MasterDetailPage is obsolete as of version 5.0.0. Please use FlyoutPage instead.")]
public class Xamarin.Forms.Platform.Tizen.MasterDetailPageRenderer : VisualElementRenderer`1<MasterDetailPage> {
    private FlyoutPage _mdpage;
    private MasterDetailContainer _masterContainer;
    private MasterDetailContainer _detailContainer;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<MasterDetailPage> e);
    private void OnMasterDetailDisappearing(object sender, EventArgs e);
    private void OnMasterDetailAppearing(object sender, EventArgs e);
    protected virtual void OnElementReady();
    protected virtual void Dispose(bool disposing);
    protected void UpdateMasterPageRatio(double popoverRatio, double splitRatio);
    private void OnBackButtonPressed(object sender, BackButtonPressedEventArgs e);
    private void UpdateMasterBehavior();
    private void UpdateMasterPage(bool isInit);
    private void UpdateDetailPage(bool isInit);
    private void UpdateIsPresented();
    private void UpdateIsGestureEnabled();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_0(object sender, IsPresentedChangedEventArgs ev);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_1(object sender, UpdateIsPresentChangeableEventArgs ev);
}
public class Xamarin.Forms.Platform.Tizen.MeasureDelegate : MulticastDelegate {
    public MeasureDelegate(object object, IntPtr method);
    public virtual Nullable`1<Size> Invoke(NativeViewWrapperRenderer renderer, int availableWidth, int availableHeight);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, int availableWidth, int availableHeight, AsyncCallback callback, object object);
    public virtual Nullable`1<Size> EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.Tizen.Native.ApplicationLayout : FormsLayout {
    public ApplicationLayout(EvasObject parent, string style);
    public bool SetContentPart(EvasObject content, bool preserveOldContent);
    public bool SetBackgroundPart(EvasObject content, bool preserveOldContent);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.Native.BatchableExtensions : object {
    private static ConditionalWeakTable`2<IBatchable, BatchCount> s_counters;
    private static BatchableExtensions();
    [ExtensionAttribute]
public static void BatchBegin(IBatchable target);
    [ExtensionAttribute]
public static void BatchCommit(IBatchable target);
    [ExtensionAttribute]
public static bool IsBatched(IBatchable target);
}
public class Xamarin.Forms.Platform.Tizen.Native.BorderRectangle : RoundRectangle {
    [CompilerGeneratedAttribute]
private int <BorderWidth>k__BackingField;
    public int BorderWidth { get; public set; }
    public BorderRectangle(EvasObject parent);
    [CompilerGeneratedAttribute]
public int get_BorderWidth();
    [CompilerGeneratedAttribute]
public void set_BorderWidth(int value);
    protected virtual void DrawPoints();
    protected void DrawRect(int topLeft, int topRight, int bottomLeft, int bottomRight, int startX, int startY, int width, int height);
}
public class Xamarin.Forms.Platform.Tizen.Native.Box : Box {
    [CompilerGeneratedAttribute]
private EventHandler`1<LayoutEventArgs> LayoutUpdated;
    public Box(EvasObject parent);
    [CompilerGeneratedAttribute]
public void add_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    private void NotifyOnLayout();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class Xamarin.Forms.Platform.Tizen.Native.Button : Button {
    private Span _span;
    private Image _image;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public Image Image { get; public set; }
    public Button(EvasObject parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public Color get_TextBackgroundColor();
    public void set_TextBackgroundColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual Image get_Image();
    public sealed virtual void set_Image(Image value);
    public virtual Size Measure(int availableWidth, int availableHeight);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
    private void ApplyImage(Image image);
    private void SetInternalImage();
    public sealed virtual void UpdateStyle(string style);
}
public enum Xamarin.Forms.Platform.Tizen.Native.ButtonPosition : Enum {
    public int value__;
    public static ButtonPosition Positive;
    public static ButtonPosition Neutral;
    public static ButtonPosition Negative;
}
public class Xamarin.Forms.Platform.Tizen.Native.Canvas : Box {
    private ObservableCollection`1<EvasObject> _children;
    public IList`1<EvasObject> Children { get; }
    public Canvas(EvasObject parent);
    public sealed virtual IList`1<EvasObject> get_Children();
    protected virtual void OnUnrealize();
    private void Initilize();
    private void OnAdd(EvasObject view);
    private void OnRemove(EvasObject view);
    private void OnRemoveAll();
    [CompilerGeneratedAttribute]
private void <Initilize>b__5_0(object o, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.CarouselView : CollectionView {
    public Scroller Scroll { get; }
    public CarouselView(EvasObject parent);
    public Scroller get_Scroll();
    private sealed virtual override Size Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.GetItemSize(int widthConstraint, int heightConstraint);
}
public class Xamarin.Forms.Platform.Tizen.Native.CollectionView : Box {
    private RecyclerPool _pool;
    private ICollectionViewLayoutManager _layoutManager;
    private ItemAdaptor _adaptor;
    private Box _innerLayout;
    private EvasObject _emptyView;
    private Dictionary`2<ViewHolder, int> _viewHolderIndexTable;
    private ViewHolder _lastSelectedViewHolder;
    private int _selectedItemIndex;
    private CollectionViewSelectionMode _selectionMode;
    private bool _requestLayoutItems;
    private SnapPointsType _snapPoints;
    private Size _itemSize;
    private EvasObject _headerView;
    private EvasObject _footerView;
    private SmartEvent _scrollAnimationStop;
    private SmartEvent _scrollAnimationStart;
    private bool _isScrollAnimationStarted;
    private bool _allowFocusOnItem;
    [CompilerGeneratedAttribute]
private EventHandler`1<ItemsViewScrolledEventArgs> Scrolled;
    [CompilerGeneratedAttribute]
private Scroller <Scroller>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollToPosition <FocusedItemScrollPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <AllocatedSize>k__BackingField;
    private Rect _lastGeometry;
    private int _previousHorizontalOffset;
    private int _previousVerticalOffset;
    public IRotaryActionWidget RotaryWidget { get; }
    public CollectionViewSelectionMode SelectionMode { get; public set; }
    public int SelectedItemIndex { get; public set; }
    public SnapPointsType SnapPointsType { get; public set; }
    protected Scroller Scroller { get; }
    public ICollectionViewLayoutManager LayoutManager { get; public set; }
    public ItemAdaptor Adaptor { get; public set; }
    public ScrollBarVisiblePolicy VerticalScrollBarVisiblePolicy { get; public set; }
    public ScrollBarVisiblePolicy HorizontalScrollBarVisiblePolicy { get; public set; }
    public ScrollToPosition FocusedItemScrollPosition { get; public set; }
    private int Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.Count { get; }
    private Point Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.ParentPosition { get; }
    protected Size AllocatedSize { get; protected set; }
    private Rect ViewPort { get; }
    public CollectionView(EvasObject parent);
    [CompilerGeneratedAttribute]
public void add_Scrolled(EventHandler`1<ItemsViewScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(EventHandler`1<ItemsViewScrolledEventArgs> value);
    public sealed virtual IRotaryActionWidget get_RotaryWidget();
    public CollectionViewSelectionMode get_SelectionMode();
    public void set_SelectionMode(CollectionViewSelectionMode value);
    public int get_SelectedItemIndex();
    public void set_SelectedItemIndex(int value);
    public SnapPointsType get_SnapPointsType();
    public void set_SnapPointsType(SnapPointsType value);
    [CompilerGeneratedAttribute]
protected Scroller get_Scroller();
    public ICollectionViewLayoutManager get_LayoutManager();
    public void set_LayoutManager(ICollectionViewLayoutManager value);
    public ItemAdaptor get_Adaptor();
    public void set_Adaptor(ItemAdaptor value);
    public ScrollBarVisiblePolicy get_VerticalScrollBarVisiblePolicy();
    public void set_VerticalScrollBarVisiblePolicy(ScrollBarVisiblePolicy value);
    public ScrollBarVisiblePolicy get_HorizontalScrollBarVisiblePolicy();
    public void set_HorizontalScrollBarVisiblePolicy(ScrollBarVisiblePolicy value);
    [CompilerGeneratedAttribute]
public ScrollToPosition get_FocusedItemScrollPosition();
    [CompilerGeneratedAttribute]
public void set_FocusedItemScrollPosition(ScrollToPosition value);
    private sealed virtual override int Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.get_Count();
    private sealed virtual override Point Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.get_ParentPosition();
    [CompilerGeneratedAttribute]
protected Size get_AllocatedSize();
    [CompilerGeneratedAttribute]
protected void set_AllocatedSize(Size value);
    private Rect get_ViewPort();
    public void ScrollTo(int index, ScrollToPosition position, bool animate);
    public void ScrollTo(object item, ScrollToPosition position, bool animate);
    public void ItemMeasureInvalidated(int index);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.RequestLayoutItems();
    private sealed virtual override Size Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.GetItemSize();
    private sealed virtual override Size Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.GetItemSize(int widthConstraint, int heightConstraint);
    private sealed virtual override Size Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.GetItemSize(int index, int widthConstraint, int heightConstraint);
    protected virtual ViewHolder CreateViewHolder();
    private sealed virtual override ViewHolder Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.RealizeView(int index);
    private void OnItemStateChanged(object sender, EventArgs e);
    private void OnRequestItemSelection(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.UnrealizeView(ViewHolder view);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController.ContentSizeUpdated();
    protected virtual Scroller CreateScroller(EvasObject parent);
    private void UpdateSelectedItemIndex();
    private void UpdateSelectionMode();
    private void OnLayoutManagerChanging();
    private void OnLayoutManagerChanged();
    private void OnAdaptorChanging();
    private void OnAdaptorChanged();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnLayout();
    private void RequestLayoutItems();
    private void OnInnerLayout();
    private void OnScrollStarted(object sender, EventArgs e);
    private void OnScrollStopped(object sender, EventArgs e);
    private void OnScrolled(object sender, EventArgs e);
    private void OnKeyDown(object sender, EvasKeyEventArgs e);
    private void OnDragStart(object sender, EventArgs e);
    private void SendScrolledEvent();
    private void UpdateSnapPointsType(SnapPointsType snapPoints);
    private void CreateEmptyView();
    private void RemoveEmptyView();
    private void UpdateAllowFocusOnItem(bool allowFocus);
    [CompilerGeneratedAttribute]
private void <RequestLayoutItems>b__85_0();
}
public enum Xamarin.Forms.Platform.Tizen.Native.CollectionViewSelectionMode : Enum {
    public int value__;
    public static CollectionViewSelectionMode None;
    public static CollectionViewSelectionMode Single;
}
public class Xamarin.Forms.Platform.Tizen.Native.DateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <NewDate>k__BackingField;
    public DateTime NewDate { get; }
    public DateChangedEventArgs(DateTime newDate);
    [CompilerGeneratedAttribute]
public DateTime get_NewDate();
}
public class Xamarin.Forms.Platform.Tizen.Native.DateTimePicker : DateTimeSelector {
    private static string TimeFormat;
    private static string TimeLayoutStyle;
    private static string DateFormat;
    private static string DateLayoutStyle;
    private DateTimePickerMode _mode;
    public DateTimePickerMode Mode { get; public set; }
    public DateTimePicker(EvasObject parent);
    public DateTimePickerMode get_Mode();
    public void set_Mode(DateTimePickerMode value);
    protected virtual void UpdateMode();
}
public class Xamarin.Forms.Platform.Tizen.Native.DateTimePickerDialog : Dialog {
    private EvasObject _parent;
    private DateTimePicker _picker;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateChangedEventArgs> DateTimeChanged;
    [CompilerGeneratedAttribute]
private EventHandler PickerOpened;
    [CompilerGeneratedAttribute]
private EventHandler PickerClosed;
    public DateTimePickerMode Mode { get; public set; }
    public DateTime MaximumDateTime { get; public set; }
    public DateTime MinimumDateTime { get; public set; }
    public DateTime DateTime { get; public set; }
    public DateTimePickerDialog(EvasObject parent);
    public sealed virtual DateTimePickerMode get_Mode();
    public sealed virtual void set_Mode(DateTimePickerMode value);
    public sealed virtual DateTime get_MaximumDateTime();
    public sealed virtual void set_MaximumDateTime(DateTime value);
    public sealed virtual DateTime get_MinimumDateTime();
    public sealed virtual void set_MinimumDateTime(DateTime value);
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PickerOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PickerOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PickerClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PickerClosed(EventHandler value);
    private void Initialize();
    private void Confirm();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Hide();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Unrealize();
    [CompilerGeneratedAttribute]
private void <Initialize>b__24_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__24_1(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__24_2(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__24_3(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__24_4(object s, EvasKeyEventArgs e);
}
public enum Xamarin.Forms.Platform.Tizen.Native.DateTimePickerMode : Enum {
    public int value__;
    public static DateTimePickerMode Date;
    public static DateTimePickerMode Time;
}
public class Xamarin.Forms.Platform.Tizen.Native.Dialog : Popup {
    private Button _positiveButton;
    private Button _neutralButton;
    private Button _negativeButton;
    private EvasObject _content;
    private string _title;
    private string _message;
    private Color _titleColor;
    [CompilerGeneratedAttribute]
private EventHandler Shown;
    public string Title { get; public set; }
    public Color TitleColor { get; public set; }
    public string Message { get; public set; }
    public EvasObject Content { get; public set; }
    public Button PositiveButton { get; public set; }
    public Button NeutralButton { get; public set; }
    public Button NegativeButton { get; public set; }
    public Dialog(EvasObject parent);
    public static Dialog CreateDialog(EvasObject parent, bool hasAcceptButton);
    [CompilerGeneratedAttribute]
public void add_Shown(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Shown(EventHandler value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public string get_Message();
    public void set_Message(string value);
    public EvasObject get_Content();
    public void set_Content(EvasObject value);
    public Button get_PositiveButton();
    public void set_PositiveButton(Button value);
    public Button get_NeutralButton();
    public void set_NeutralButton(Button value);
    public Button get_NegativeButton();
    public void set_NegativeButton(Button value);
    public sealed virtual void Show();
    protected virtual void OnUnrealize();
    protected virtual void OnShown();
    protected virtual void OnDismissed();
    protected virtual void ApplyTitle(string title);
    protected virtual void ApplyTitleColor(Color color);
    protected virtual void ApplyButton(ButtonPosition position, Button button);
    protected virtual void ApplyContent(EvasObject content);
    protected virtual void ApplyMessage(string message);
    private void Initialize();
    [CompilerGeneratedAttribute]
private void <Initialize>b__42_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__42_1(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.EditfieldEntry : Entry {
    private Button _clearButton;
    private Layout _editfieldLayout;
    private bool _enableClearButton;
    private int _heightPadding;
    [CompilerGeneratedAttribute]
private bool <IsTextBlockFocused>k__BackingField;
    public bool IsTextBlockFocused { get; private set; }
    public Color BackgroundColor { get; public set; }
    public bool EnableClearButton { get; public set; }
    public Color ClearButtonColor { get; public set; }
    public EditfieldEntry(EvasObject parent);
    public EditfieldEntry(EvasObject parent, string style);
    [CompilerGeneratedAttribute]
public bool get_IsTextBlockFocused();
    [CompilerGeneratedAttribute]
private void set_IsTextBlockFocused(bool value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public bool get_EnableClearButton();
    public void set_EnableClearButton(bool value);
    public Color get_ClearButtonColor();
    public void set_ClearButtonColor(Color value);
    public void SetFocusOnTextBlock(bool isFocused);
    public virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual IntPtr CreateHandle(EvasObject parent);
    protected virtual void OnTextChanged(string oldValue, string newValue);
    protected virtual Layout CreateEditFieldLayout(EvasObject parent);
    protected virtual void UpdateEnableClearButton();
    private void OnClearButtonClicked(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.EditFieldEntryLayout : FormsLayout {
    public EditFieldEntryLayout(EvasObject parent, string style);
    public bool SetButtonPart(EvasObject content, bool preserveOldContent);
    public void SendButtonActionSignal(bool isVisible);
    public void SendFocusStateSignal(bool isFocus);
}
public class Xamarin.Forms.Platform.Tizen.Native.EmptyItemAdaptor : ItemTemplateAdaptor {
    private static DataTemplate s_defaultEmptyTemplate;
    private StructuredItemsView _structuredItemsView;
    public EmptyItemAdaptor(ItemsView itemsView, IEnumerable items, DataTemplate template);
    private static EmptyItemAdaptor();
    public static EmptyItemAdaptor Create(ItemsView itemsView);
    public virtual Size MeasureItem(int widthConstraint, int heightConstraint);
    public virtual EvasObject CreateNativeView(int index, EvasObject parent);
    public virtual void RemoveNativeView(EvasObject native);
}
public class Xamarin.Forms.Platform.Tizen.Native.Entry : Entry {
    private static int VariationNormal;
    private static int VariationSignedAndDecimal;
    private Span _span;
    private Span _placeholderSpan;
    private int _changedByUserCallbackDepth;
    private Keyboard _keyboard;
    [CompilerGeneratedAttribute]
private EventHandler`1<TextChangedEventArgs> TextChanged;
    [CompilerGeneratedAttribute]
private EventHandler TextBlockFocused;
    [CompilerGeneratedAttribute]
private EventHandler TextBlockUnfocused;
    [CompilerGeneratedAttribute]
private EventHandler EntryLayoutFocused;
    [CompilerGeneratedAttribute]
private EventHandler EntryLayoutUnfocused;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public string FontWeight { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public Keyboard Keyboard { get; public set; }
    public string Placeholder { get; public set; }
    public Color PlaceholderColor { get; public set; }
    public Entry(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EntryLayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EntryLayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EntryLayoutUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EntryLayoutUnfocused(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual string get_FontWeight();
    public sealed virtual void set_FontWeight(string value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public sealed virtual void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual Keyboard get_Keyboard();
    public sealed virtual void set_Keyboard(Keyboard value);
    public sealed virtual string get_Placeholder();
    public sealed virtual void set_Placeholder(string value);
    public sealed virtual Color get_PlaceholderColor();
    public sealed virtual void set_PlaceholderColor(Color value);
    public virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void OnTextBlockFocused();
    protected virtual void OnTextBlcokUnfocused();
    protected virtual void OnEntryLayoutFocused();
    protected virtual void OnEntryLayoutUnfocused();
    protected virtual void OnTextChanged(string oldValue, string newValue);
    private void Initialize();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
    private string GetInternalText();
    private void ApplyKeyboard(Keyboard keyboard);
    private void SetInternalKeyboard(Keyboard keyboard);
    private void ApplyPlaceholderAndStyle();
    protected virtual void SetInternalPlaceholderAndStyle(string markupText);
    [CompilerGeneratedAttribute]
private void <Initialize>b__58_0(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.EntryLayout : FormsLayout {
    public EntryLayout(EvasObject parent, string style);
}
public class Xamarin.Forms.Platform.Tizen.Native.EvasBox : Container {
    private CanvasBoxLayoutCallback _layoutCallback;
    private Lazy`1<Rectangle> _rectangle;
    [CompilerGeneratedAttribute]
private EventHandler`1<LayoutEventArgs> LayoutUpdated;
    public Color BackgroundColor { get; public set; }
    public EvasBox(EvasObject parent);
    [CompilerGeneratedAttribute]
public void add_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public void PackEnd(EvasObject content);
    public bool UnPack(EvasObject content);
    public bool UnPackAll();
    public void SetLayoutCallback(Action action);
    protected virtual IntPtr CreateHandle(EvasObject parent);
    private void NotifyOnLayout();
    [CompilerGeneratedAttribute]
private Rectangle <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1();
}
public class Xamarin.Forms.Platform.Tizen.Native.EvasFormsCanvas : EvasBox {
    private ObservableCollection`1<EvasObject> _children;
    public IList`1<EvasObject> Children { get; }
    public EvasFormsCanvas(EvasObject parent);
    public sealed virtual IList`1<EvasObject> get_Children();
    protected virtual void OnUnrealize();
    private void Initilize();
    private void OnAdd(EvasObject view);
    private void OnRemove(EvasObject view);
    private void OnRemoveAll();
    [CompilerGeneratedAttribute]
private void <Initilize>b__5_0(object o, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.FlyoutPage : Box {
    private static FlyoutLayoutBehavior s_defaultFlyoutLayoutBehavior;
    private Canvas _flyoutCanvas;
    private Canvas _detailCanvas;
    private Panes _splitPane;
    private Panel _drawer;
    private FlyoutLayoutBehavior _flyoutLayoutBehavior;
    private FlyoutLayoutBehavior _internalFlyoutLayoutBehavior;
    private EvasObject _flyout;
    private EvasObject _detail;
    private EvasObject _mainWidget;
    private bool _isGestureEnabled;
    private double _splitRatio;
    private double _popoverRatio;
    [CompilerGeneratedAttribute]
private EventHandler`1<IsPresentedChangedEventArgs> IsPresentedChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<UpdateIsPresentChangeableEventArgs> UpdateIsPresentChangeable;
    public FlyoutLayoutBehavior FlyoutLayoutBehavior { get; public set; }
    public bool IsSplit { get; }
    public EvasObject Flyout { get; public set; }
    public EvasObject Detail { get; public set; }
    public bool IsPresented { get; public set; }
    public bool IsGestureEnabled { get; public set; }
    public double SplitRatio { get; public set; }
    public double PopoverRatio { get; public set; }
    public FlyoutPage(EvasObject parent);
    private static FlyoutPage();
    [CompilerGeneratedAttribute]
public void add_IsPresentedChanged(EventHandler`1<IsPresentedChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_IsPresentedChanged(EventHandler`1<IsPresentedChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UpdateIsPresentChangeable(EventHandler`1<UpdateIsPresentChangeableEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UpdateIsPresentChangeable(EventHandler`1<UpdateIsPresentChangeableEventArgs> value);
    public FlyoutLayoutBehavior get_FlyoutLayoutBehavior();
    public void set_FlyoutLayoutBehavior(FlyoutLayoutBehavior value);
    public bool get_IsSplit();
    public EvasObject get_Flyout();
    public void set_Flyout(EvasObject value);
    public EvasObject get_Detail();
    public void set_Detail(EvasObject value);
    public bool get_IsPresented();
    public void set_IsPresented(bool value);
    public bool get_IsGestureEnabled();
    public void set_IsGestureEnabled(bool value);
    public double get_SplitRatio();
    public void set_SplitRatio(double value);
    public double get_PopoverRatio();
    public void set_PopoverRatio(double value);
    protected virtual void OnUnrealize();
    private void UpdatePageGeometry(EvasObject page);
    private void UpdateFlyoutLayoutBehavior();
    private void ConfigureLayout();
    private void UpdateChildCanvasGeometry();
    private void UpdateFocusPolicy(bool forceAllowFocusAll);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_0(object s, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_1(object sender, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_2(object sender, LayoutEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_3(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_4(object s, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.FormattedString : object {
    private bool _just_string;
    private string _string;
    private ObservableCollection`1<Span> _spans;
    public IList`1<Span> Spans { get; }
    public FormattedString(string str);
    public IList`1<Span> get_Spans();
    public virtual string ToString();
    internal string ToMarkupString();
    public static string op_Explicit(FormattedString formatted);
    public static FormattedString op_Implicit(string text);
    public static FormattedString op_Implicit(Span span);
}
public class Xamarin.Forms.Platform.Tizen.Native.FormsLayout : Layout {
    [CompilerGeneratedAttribute]
private string <ThemeClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThemeGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThemeStyle>k__BackingField;
    public string ThemeClass { get; private set; }
    public string ThemeGroup { get; private set; }
    public string ThemeStyle { get; private set; }
    public FormsLayout(EvasObject parent);
    [CompilerGeneratedAttribute]
public string get_ThemeClass();
    [CompilerGeneratedAttribute]
private void set_ThemeClass(string value);
    [CompilerGeneratedAttribute]
public string get_ThemeGroup();
    [CompilerGeneratedAttribute]
private void set_ThemeGroup(string value);
    [CompilerGeneratedAttribute]
public string get_ThemeStyle();
    [CompilerGeneratedAttribute]
private void set_ThemeStyle(string value);
    public void SetTheme(string klass, string group, string style);
}
public class Xamarin.Forms.Platform.Tizen.Native.GridLayoutManager : object {
    private Size _allocatedSize;
    private Size _scrollCanvasSize;
    private bool _isLayouting;
    private Rect _last;
    private Dictionary`2<int, RealizedItem> _realizedItem;
    private List`1<int> _itemSizes;
    private List`1<bool> _cached;
    private List`1<int> _accumulatedItemSizes;
    private bool _hasUnevenRows;
    private int _baseItemSize;
    private Size _headerSize;
    private EvasObject _header;
    private Size _footerSize;
    private EvasObject _footer;
    [CompilerGeneratedAttribute]
private int <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHorizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VerticalItemSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HorizontalItemSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionViewController <CollectionView>k__BackingField;
    public int Span { get; private set; }
    public bool IsHorizontal { get; }
    public int VerticalItemSpacing { get; }
    public int HorizontalItemSpacing { get; }
    public ICollectionViewController CollectionView { get; public set; }
    private int BaseItemSize { get; }
    private int ItemSpacing { get; }
    private int ItemWidthConstraint { get; }
    private int ItemHeightConstraint { get; }
    private int ColumnSize { get; }
    private int ColumnSpacing { get; }
    private int FooterSize { get; }
    private int HeaderSize { get; }
    private int ItemStartPoint { get; }
    private int FooterSizeWithSpacing { get; }
    public GridLayoutManager(bool isHorizontal, int span);
    public GridLayoutManager(bool isHorizontal, int span, ItemSizingStrategy sizingStrategy);
    public GridLayoutManager(bool isHorizontal, int span, ItemSizingStrategy sizingStrategy, int verticalSpacing, int horizontalSpacing);
    [CompilerGeneratedAttribute]
public int get_Span();
    [CompilerGeneratedAttribute]
private void set_Span(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHorizontal();
    [CompilerGeneratedAttribute]
public int get_VerticalItemSpacing();
    [CompilerGeneratedAttribute]
public int get_HorizontalItemSpacing();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionViewController get_CollectionView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CollectionView(ICollectionViewController value);
    public sealed virtual void SizeAllocated(Size size);
    public sealed virtual Size GetScrollCanvasSize();
    public sealed virtual int GetScrollBlockSize();
    private int get_BaseItemSize();
    private int get_ItemSpacing();
    private int get_ItemWidthConstraint();
    private int get_ItemHeightConstraint();
    private int get_ColumnSize();
    private int get_ColumnSpacing();
    private int get_FooterSize();
    private int get_HeaderSize();
    private int get_ItemStartPoint();
    private int get_FooterSizeWithSpacing();
    private bool ShouldRearrange(Rect viewport);
    public sealed virtual void LayoutItems(Rect bound, bool force);
    public void UpdateSpan(int span);
    public sealed virtual void ItemInserted(int inserted);
    public sealed virtual void ItemRemoved(int removed);
    public sealed virtual void ItemUpdated(int index);
    public sealed virtual Rect GetItemBound(int index);
    public sealed virtual void Reset();
    public sealed virtual void ItemSourceUpdated();
    public sealed virtual void ItemMeasureInvalidated(int index);
    public sealed virtual int GetVisibleItemIndex(int x, int y);
    public sealed virtual void SetHeader(EvasObject header, Size size);
    public sealed virtual void SetFooter(EvasObject footer, Size size);
    private void UpdateFooterPosition();
    private void InitializeMeasureCache();
    private void BuildAccumulatedSize();
    private void UpdateInsertedSize(int inserted);
    private void UpdateRemovedSize(int removed);
    private void UpdateAccumulatedItemSize(int index, int diff);
    private int GetMaxItemSize(int index);
    private int GetStartIndex(Rect bound, int itemSize);
    private int GetStartIndex(Rect bound);
    private int GetEndIndex(Rect bound, int itemSize);
    private int GetEndIndex(Rect bound);
    private int ViewPortStartPoint(Rect viewPort);
    private int ViewPortEndPoint(Rect viewPort);
    private int ViewPortSize(Rect viewPort);
    private static int FindFirstGreaterOrEqualTo(IList`1<int> data, int value);
}
internal interface Xamarin.Forms.Platform.Tizen.Native.IBatchable {
    public abstract virtual void OnBatchCommitted();
}
public interface Xamarin.Forms.Platform.Tizen.Native.IButton {
    public string Text { get; public set; }
    public double FontSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    public Color TextColor { get; public set; }
    public Image Image { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual FontAttributes get_FontAttributes();
    public abstract virtual void set_FontAttributes(FontAttributes value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual Color get_TextColor();
    public abstract virtual void set_TextColor(Color value);
    public abstract virtual Image get_Image();
    public abstract virtual void set_Image(Image value);
    public abstract virtual Size Measure(int availableWidth, int availableHeight);
    public abstract virtual void UpdateStyle(string style);
}
public interface Xamarin.Forms.Platform.Tizen.Native.ICollectionViewController {
    public Point ParentPosition { get; }
    public int Count { get; }
    public abstract virtual Point get_ParentPosition();
    public abstract virtual ViewHolder RealizeView(int index);
    public abstract virtual void UnrealizeView(ViewHolder view);
    public abstract virtual void RequestLayoutItems();
    public abstract virtual int get_Count();
    public abstract virtual Size GetItemSize();
    public abstract virtual Size GetItemSize(int widthConstraint, int heightConstraint);
    public abstract virtual Size GetItemSize(int index, int widthConstraint, int heightConstraint);
    public abstract virtual void ContentSizeUpdated();
}
public interface Xamarin.Forms.Platform.Tizen.Native.ICollectionViewLayoutManager {
    public ICollectionViewController CollectionView { get; public set; }
    public bool IsHorizontal { get; }
    public abstract virtual ICollectionViewController get_CollectionView();
    public abstract virtual void set_CollectionView(ICollectionViewController value);
    public abstract virtual bool get_IsHorizontal();
    public abstract virtual void SizeAllocated(Size size);
    public abstract virtual Size GetScrollCanvasSize();
    public abstract virtual void LayoutItems(Rect bound, bool force);
    public abstract virtual Rect GetItemBound(int index);
    public abstract virtual void ItemInserted(int index);
    public abstract virtual void ItemRemoved(int index);
    public abstract virtual void ItemUpdated(int index);
    public abstract virtual void ItemSourceUpdated();
    public abstract virtual void Reset();
    public abstract virtual void ItemMeasureInvalidated(int index);
    public abstract virtual int GetVisibleItemIndex(int x, int y);
    public abstract virtual int GetScrollBlockSize();
    public abstract virtual void SetHeader(EvasObject header, Size size);
    public abstract virtual void SetFooter(EvasObject footer, Size size);
}
public interface Xamarin.Forms.Platform.Tizen.Native.IContainable`1 {
    public IList`1<T> Children { get; }
    public abstract virtual IList`1<T> get_Children();
}
public interface Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog {
    public string Title { get; public set; }
    public DateTimePickerMode Mode { get; public set; }
    public DateTime MaximumDateTime { get; public set; }
    public DateTime MinimumDateTime { get; public set; }
    public DateTime DateTime { get; public set; }
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual DateTimePickerMode get_Mode();
    public abstract virtual void set_Mode(DateTimePickerMode value);
    public abstract virtual DateTime get_MaximumDateTime();
    public abstract virtual void set_MaximumDateTime(DateTime value);
    public abstract virtual DateTime get_MinimumDateTime();
    public abstract virtual void set_MinimumDateTime(DateTime value);
    public abstract virtual DateTime get_DateTime();
    public abstract virtual void set_DateTime(DateTime value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PickerOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PickerOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PickerClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PickerClosed(EventHandler value);
    public abstract virtual void Show();
    public abstract virtual void Hide();
    public abstract virtual void Unrealize();
}
public interface Xamarin.Forms.Platform.Tizen.Native.IEmptyAdaptor {
}
public interface Xamarin.Forms.Platform.Tizen.Native.IEntry {
    public double FontSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    public Color TextColor { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public string Placeholder { get; public set; }
    public Color PlaceholderColor { get; public set; }
    public string FontWeight { get; public set; }
    public Keyboard Keyboard { get; public set; }
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual FontAttributes get_FontAttributes();
    public abstract virtual void set_FontAttributes(FontAttributes value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual Color get_TextColor();
    public abstract virtual void set_TextColor(Color value);
    public abstract virtual TextAlignment get_HorizontalTextAlignment();
    public abstract virtual void set_HorizontalTextAlignment(TextAlignment value);
    public abstract virtual string get_Placeholder();
    public abstract virtual void set_Placeholder(string value);
    public abstract virtual Color get_PlaceholderColor();
    public abstract virtual void set_PlaceholderColor(Color value);
    public abstract virtual string get_FontWeight();
    public abstract virtual void set_FontWeight(string value);
    public abstract virtual Keyboard get_Keyboard();
    public abstract virtual void set_Keyboard(Keyboard value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TextBlockFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TextBlockUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EntryLayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EntryLayoutFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EntryLayoutUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EntryLayoutUnfocused(EventHandler value);
}
public class Xamarin.Forms.Platform.Tizen.Native.Image : Image {
    public Image(EvasObject parent);
    public sealed virtual Size Measure(int availableWidth, int availableHeight);
}
public interface Xamarin.Forms.Platform.Tizen.Native.IMeasurable {
    public abstract virtual Size Measure(int availableWidth, int availableHeight);
}
public class Xamarin.Forms.Platform.Tizen.Native.IndicatorView : Index {
    private static int OddMiddleItem;
    private static int EvenMiddleItem;
    private List`1<IndexItem> _list;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedPositionChangedEventArgs> SelectedPosition;
    public IndicatorView(EvasObject parent);
    [CompilerGeneratedAttribute]
public void add_SelectedPosition(EventHandler`1<SelectedPositionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedPosition(EventHandler`1<SelectedPositionChangedEventArgs> value);
    public void UpdateSelectedIndex(int index);
    public void AppendIndex(int count);
    public void ClearIndex();
    private void ApplyStyle();
    private void OnSelected(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.IsPresentedChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsPresent>k__BackingField;
    public bool IsPresent { get; private set; }
    public IsPresentedChangedEventArgs(bool isPresent);
    [CompilerGeneratedAttribute]
public bool get_IsPresent();
    [CompilerGeneratedAttribute]
private void set_IsPresent(bool value);
}
internal interface Xamarin.Forms.Platform.Tizen.Native.ITableView {
    public abstract virtual void ApplyTableRoot(TableRoot root);
}
[DefaultMemberAttribute("Item")]
public abstract class Xamarin.Forms.Platform.Tizen.Native.ItemAdaptor : object {
    private IList _itemsSource;
    [CompilerGeneratedAttribute]
private CollectionView <CollectionView>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> ItemSelected;
    private INotifyCollectionChanged _observableCollection;
    public CollectionView CollectionView { get; public set; }
    public object Item { get; }
    public int Count { get; }
    protected ItemAdaptor(IEnumerable items);
    [CompilerGeneratedAttribute]
public CollectionView get_CollectionView();
    [CompilerGeneratedAttribute]
public void set_CollectionView(CollectionView value);
    [CompilerGeneratedAttribute]
public void add_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    public virtual void SendItemSelected(int index);
    public virtual void UpdateViewState(EvasObject view, ViewHolderState state);
    public void RequestItemSelected(object item);
    protected void SetItemsSource(IEnumerable items);
    public object get_Item(int index);
    public int get_Count();
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public int GetItemIndex(object item);
    public virtual object GetViewCategory(int index);
    public abstract virtual EvasObject CreateNativeView(EvasObject parent);
    public abstract virtual EvasObject CreateNativeView(int index, EvasObject parent);
    public abstract virtual EvasObject GetHeaderView(EvasObject parent);
    public abstract virtual EvasObject GetFooterView(EvasObject parent);
    public abstract virtual void RemoveNativeView(EvasObject native);
    public abstract virtual void SetBinding(EvasObject view, int index);
    public abstract virtual void UnBinding(EvasObject view);
    public abstract virtual Size MeasureItem(int widthConstraint, int heightConstraint);
    public abstract virtual Size MeasureItem(int index, int widthConstraint, int heightConstraint);
    public abstract virtual Size MeasureHeader(int widthConstraint, int heightConstraint);
    public abstract virtual Size MeasureFooter(int widthConstraint, int heightConstraint);
}
public class Xamarin.Forms.Platform.Tizen.Native.ItemDefaultTemplateAdaptor : ItemTemplateAdaptor {
    public ItemDefaultTemplateAdaptor(ItemsView itemsView);
}
public class Xamarin.Forms.Platform.Tizen.Native.ItemTemplateAdaptor : ItemAdaptor {
    private Dictionary`2<EvasObject, View> _nativeFormsTable;
    private Dictionary`2<object, View> _dataBindedViewTable;
    protected View _headerCache;
    protected View _footerCache;
    [CompilerGeneratedAttribute]
private DataTemplate <ItemTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelectable>k__BackingField;
    protected DataTemplate ItemTemplate { get; protected set; }
    protected Element Element { get; protected set; }
    protected bool IsSelectable { get; }
    public ItemTemplateAdaptor(ItemsView itemsView);
    protected ItemTemplateAdaptor(Element itemsView, IEnumerable items, DataTemplate template);
    [CompilerGeneratedAttribute]
protected DataTemplate get_ItemTemplate();
    [CompilerGeneratedAttribute]
protected void set_ItemTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
protected Element get_Element();
    [CompilerGeneratedAttribute]
protected void set_Element(Element value);
    [CompilerGeneratedAttribute]
protected virtual bool get_IsSelectable();
    public View GetTemplatedView(EvasObject evasObject);
    public View GetTemplatedView(int index);
    public virtual object GetViewCategory(int index);
    public virtual EvasObject CreateNativeView(int index, EvasObject parent);
    public virtual EvasObject CreateNativeView(EvasObject parent);
    public virtual EvasObject GetHeaderView(EvasObject parent);
    public virtual EvasObject GetFooterView(EvasObject parent);
    public virtual void RemoveNativeView(EvasObject native);
    public virtual void SetBinding(EvasObject native, int index);
    public virtual void UnBinding(EvasObject native);
    public virtual Size MeasureItem(int widthConstraint, int heightConstraint);
    public virtual Size MeasureItem(int index, int widthConstraint, int heightConstraint);
    public virtual Size MeasureHeader(int widthConstraint, int heightConstraint);
    public virtual Size MeasureFooter(int widthConstraint, int heightConstraint);
    public virtual void UpdateViewState(EvasObject view, ViewHolderState state);
    protected virtual View CreateHeaderView();
    protected virtual View CreateFooterView();
    private void ResetBindedView(View view);
    private void OnItemMeasureInvalidated(object sender, EventArgs e);
    private void AddLogicalChild(Element element);
    private void RemoveLogicalChild(Element element);
}
public interface Xamarin.Forms.Platform.Tizen.Native.ITextable {
    public FormattedString FormattedText { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public abstract virtual FormattedString get_FormattedText();
    public abstract virtual void set_FormattedText(FormattedString value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual Color get_TextColor();
    public abstract virtual void set_TextColor(Color value);
    public abstract virtual Color get_TextBackgroundColor();
    public abstract virtual void set_TextBackgroundColor(Color value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual FontAttributes get_FontAttributes();
    public abstract virtual void set_FontAttributes(FontAttributes value);
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual TextAlignment get_HorizontalTextAlignment();
    public abstract virtual void set_HorizontalTextAlignment(TextAlignment value);
    public abstract virtual TextAlignment get_VerticalTextAlignment();
    public abstract virtual void set_VerticalTextAlignment(TextAlignment value);
    public abstract virtual bool get_Underline();
    public abstract virtual void set_Underline(bool value);
    public abstract virtual bool get_Strikethrough();
    public abstract virtual void set_Strikethrough(bool value);
}
public enum Xamarin.Forms.Platform.Tizen.Native.Keyboard : Enum {
    public int value__;
    public static Keyboard None;
    public static Keyboard Normal;
    public static Keyboard Number;
    public static Keyboard Email;
    public static Keyboard Url;
    public static Keyboard PhoneNumber;
    public static Keyboard Ip;
    public static Keyboard Month;
    public static Keyboard NumberOnly;
    public static Keyboard Invalid;
    public static Keyboard Hex;
    public static Keyboard Terminal;
    public static Keyboard Password;
    public static Keyboard DateTime;
    public static Keyboard Emoticon;
    public static Keyboard Numeric;
}
public class Xamarin.Forms.Platform.Tizen.Native.Label : Label {
    private Span _span;
    public FormattedString FormattedText { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public double LineHeight { get; public set; }
    public string FontWeight { get; public set; }
    public LineBreakMode LineBreakMode { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public TextAlignment VerticalTextAlignment { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public Label(EvasObject parent);
    public sealed virtual FormattedString get_FormattedText();
    public sealed virtual void set_FormattedText(FormattedString value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual Color get_TextBackgroundColor();
    public sealed virtual void set_TextBackgroundColor(Color value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual FontAttributes get_FontAttributes();
    public sealed virtual void set_FontAttributes(FontAttributes value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public LineBreakMode get_LineBreakMode();
    public void set_LineBreakMode(LineBreakMode value);
    public sealed virtual TextAlignment get_HorizontalTextAlignment();
    public sealed virtual void set_HorizontalTextAlignment(TextAlignment value);
    public sealed virtual TextAlignment get_VerticalTextAlignment();
    public sealed virtual void set_VerticalTextAlignment(TextAlignment value);
    public sealed virtual bool get_Underline();
    public sealed virtual void set_Underline(bool value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual Size Measure(int availableWidth, int availableHeight);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IBatchable.OnBatchCommitted();
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
}
public class Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Rect <Geometry>k__BackingField;
    public Rect Geometry { get; internal set; }
    [CompilerGeneratedAttribute]
public Rect get_Geometry();
    [CompilerGeneratedAttribute]
internal void set_Geometry(Rect value);
}
public class Xamarin.Forms.Platform.Tizen.Native.LinearLayoutManager : object {
    private Size _allocatedSize;
    private bool _isLayouting;
    private Rect _last;
    private Dictionary`2<int, RealizedItem> _realizedItem;
    private List`1<int> _itemSizes;
    private List`1<bool> _cached;
    private List`1<int> _accumulatedItemSizes;
    private bool _hasUnevenRows;
    private int _baseItemSize;
    private Size _headerSize;
    private EvasObject _header;
    private Size _footerSize;
    private EvasObject _footer;
    [CompilerGeneratedAttribute]
private bool <IsHorizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionViewController <CollectionView>k__BackingField;
    private Size _scrollCanvasSize;
    public bool IsHorizontal { get; }
    public int ItemSpacing { get; }
    public ICollectionViewController CollectionView { get; public set; }
    private int BaseItemSize { get; }
    private int ItemWidthConstraint { get; }
    private int ItemHeightConstraint { get; }
    private int FooterSize { get; }
    private int HeaderSize { get; }
    private int ItemStartPoint { get; }
    private int FooterSizeWithSpacing { get; }
    public LinearLayoutManager(bool isHorizontal);
    public LinearLayoutManager(bool isHorizontal, ItemSizingStrategy sizingStrategy);
    public LinearLayoutManager(bool isHorizontal, ItemSizingStrategy sizingStrategy, int itemSpacing);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHorizontal();
    [CompilerGeneratedAttribute]
public int get_ItemSpacing();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionViewController get_CollectionView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CollectionView(ICollectionViewController value);
    public sealed virtual void SizeAllocated(Size size);
    public sealed virtual Size GetScrollCanvasSize();
    private int get_BaseItemSize();
    private int get_ItemWidthConstraint();
    private int get_ItemHeightConstraint();
    private int get_FooterSize();
    private int get_HeaderSize();
    private int get_ItemStartPoint();
    private int get_FooterSizeWithSpacing();
    private bool ShouldRearrange(Rect viewport);
    public sealed virtual void LayoutItems(Rect bound, bool force);
    public sealed virtual void ItemInserted(int inserted);
    public sealed virtual void ItemRemoved(int removed);
    public sealed virtual void ItemUpdated(int index);
    public sealed virtual Rect GetItemBound(int index);
    public sealed virtual void Reset();
    public sealed virtual void ItemSourceUpdated();
    public sealed virtual void ItemMeasureInvalidated(int index);
    public sealed virtual int GetVisibleItemIndex(int x, int y);
    public sealed virtual int GetScrollBlockSize();
    public sealed virtual void SetHeader(EvasObject header, Size size);
    public sealed virtual void SetFooter(EvasObject footer, Size size);
    private void UpdateFooterPosition();
    private void InitializeMeasureCache();
    private int GetStartIndex(Rect bound, int itemSize);
    private int GetStartIndex(Rect bound);
    private int GetEndIndex(Rect bound, int itemSize);
    private int GetEndIndex(Rect bound);
    private int ViewPortStartPoint(Rect viewPort);
    private int ViewPortEndPoint(Rect viewPort);
    private int ViewPortSize(Rect viewPort);
    private void UpdateAccumulatedItemSize(int index, int diff);
    private void UpdateRemovedSize(int removed);
    private void UpdateInsertedSize(int inserted);
    private static int FindFirstGreaterOrEqualTo(IList`1<int> data, int value);
}
public enum Xamarin.Forms.Platform.Tizen.Native.LineBreakMode : Enum {
    public int value__;
    public static LineBreakMode None;
    public static LineBreakMode NoWrap;
    public static LineBreakMode CharacterWrap;
    public static LineBreakMode WordWrap;
    public static LineBreakMode MixedWrap;
    public static LineBreakMode HeadTruncation;
    public static LineBreakMode MiddleTruncation;
    public static LineBreakMode TailTruncation;
}
public class Xamarin.Forms.Platform.Tizen.Native.ListView : GenList {
    private List`1<ItemContext> _itemContextList;
    protected IDictionary`2<Type, CellRenderer> _cellRendererCache;
    protected IDictionary`2<Type, CellRenderer> _groupCellRendererCache;
    private VisualElement _headerElement;
    private VisualElement _footerElement;
    private GenItemClass _headerFooterItemClass;
    [CompilerGeneratedAttribute]
private Scroller <Scroller>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderFooterItemContext <HeaderItemContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderFooterItemContext <FooterItemContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGroupingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BottomLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Scrolled;
    protected Scroller Scroller { get; protected set; }
    protected HeaderFooterItemContext HeaderItemContext { get; protected set; }
    protected HeaderFooterItemContext FooterItemContext { get; protected set; }
    public bool IsGroupingEnabled { get; public set; }
    public Rect CurrentRegion { get; }
    public ScrollBarVisiblePolicy VerticalScrollBarVisibility { get; public set; }
    public ScrollBarVisiblePolicy HorizontalScrollBarVisibility { get; public set; }
    public Color BottomLineColor { get; public set; }
    public ListView(EvasObject parent);
    [CompilerGeneratedAttribute]
protected virtual Scroller get_Scroller();
    [CompilerGeneratedAttribute]
protected virtual void set_Scroller(Scroller value);
    [CompilerGeneratedAttribute]
protected HeaderFooterItemContext get_HeaderItemContext();
    [CompilerGeneratedAttribute]
protected void set_HeaderItemContext(HeaderFooterItemContext value);
    [CompilerGeneratedAttribute]
protected HeaderFooterItemContext get_FooterItemContext();
    [CompilerGeneratedAttribute]
protected void set_FooterItemContext(HeaderFooterItemContext value);
    [CompilerGeneratedAttribute]
public bool get_IsGroupingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsGroupingEnabled(bool value);
    public virtual Rect get_CurrentRegion();
    public virtual ScrollBarVisiblePolicy get_VerticalScrollBarVisibility();
    public virtual void set_VerticalScrollBarVisibility(ScrollBarVisiblePolicy value);
    public virtual ScrollBarVisiblePolicy get_HorizontalScrollBarVisibility();
    public virtual void set_HorizontalScrollBarVisibility(ScrollBarVisiblePolicy value);
    [CompilerGeneratedAttribute]
public Color get_BottomLineColor();
    [CompilerGeneratedAttribute]
public void set_BottomLineColor(Color value);
    [CompilerGeneratedAttribute]
public void add_Scrolled(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(EventHandler value);
    internal ItemContext GetItemContext(Cell cell);
    public void SetHasUnevenRows(bool hasUnevenRows);
    public virtual void AddSource(IEnumerable source, Cell beforeCell);
    internal void ResetGroup(TemplatedItemsList`2<ItemsView`1<Cell>, Cell> group);
    public void AddItemsToGroup(IEnumerable itemGroup, IEnumerable newItems, Cell cellBefore);
    public void Remove(IEnumerable cells);
    public void ApplyScrollTo(Cell cell, ScrollToPosition position, bool animated);
    public void ApplySelectedItem(Cell cell);
    public virtual void SetHeader(VisualElement header);
    protected virtual void UpdateHeader();
    protected void InitializeHeaderItemContext(GenItemClass headerTemplate);
    private void OnHeaderItemDeleted(object sender, EventArgs e);
    public virtual void SetFooter(VisualElement footer);
    protected virtual void UpdateFooter();
    protected void InitializeFooterItemContext(GenItemClass footerTemplate);
    private void OnFooterItemDeleted(object sender, EventArgs e);
    protected void RemoveHeaderItemContext();
    protected void RemoveFooterItemContext();
    public bool HasHeaderContext();
    public bool HasFooterContext();
    public VisualElement GetHeader();
    public VisualElement GetFooter();
    protected virtual void OnScrolled(object sender, EventArgs e);
    private void OnItemAppear(object sender, GenListItemEventArgs evt);
    private void OnItemDisappear(object sender, GenListItemEventArgs evt);
    protected virtual void OnRealized();
    protected void AddCell(Cell cell);
    protected virtual CellRenderer GetCellRenderer(Cell cell, bool isGroup);
    private void AddGroupItem(TemplatedItemsList`2<ItemsView`1<Cell>, Cell> groupList, Cell beforeCell);
    private void AddItem(Cell cell, Cell groupCell, Cell beforeCell);
    private void ItemDeletedHandler(object sender, EventArgs e);
    private void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnForceUpdateSizeRequested(object sender, EventArgs e);
    protected GenItemClass GetHeaderFooterItemClass();
}
internal class Xamarin.Forms.Platform.Tizen.Native.ObservableCollection`1 : ObservableCollection`1<T> {
    protected virtual void ClearItems();
}
public class Xamarin.Forms.Platform.Tizen.Native.Page : Background {
    [ObsoleteAttribute("ContentPartName is obsolete. Please use the ThemeConstants.Background.Parts.Overlay instead.")]
public static string ContentPartName;
    internal Container _canvas;
    public IList`1<EvasObject> Children { get; }
    private EvasFormsCanvas EvasFormsCanvas { get; }
    private Canvas Canvas { get; }
    public Page(EvasObject parent);
    public sealed virtual IList`1<EvasObject> get_Children();
    private EvasFormsCanvas get_EvasFormsCanvas();
    private Canvas get_Canvas();
    public void add_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    public void remove_LayoutUpdated(EventHandler`1<LayoutEventArgs> value);
    protected virtual void OnUnrealize();
}
internal class Xamarin.Forms.Platform.Tizen.Native.RecyclerPool : object {
    private LinkedList`1<ViewHolder> _pool;
    public void Clear(ItemAdaptor adaptor);
    public void AddRecyclerView(ViewHolder view);
    public ViewHolder GetRecyclerView(object category);
    public ViewHolder GetRecyclerView();
}
public class Xamarin.Forms.Platform.Tizen.Native.RoundRectangle : Polygon {
    private Int32[] _radius;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public RoundRectangle(EvasObject parent);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public void SetRadius(int r);
    public void SetRadius(int topLeft, int topRight, int bottomLeft, int bottomRight);
    public IReadOnlyList`1<int> GetRadius();
    public void Draw();
    public void Draw(Rect bound);
    protected virtual void DrawPoints();
    protected void AddRelativePoint(int x, int y);
}
public class Xamarin.Forms.Platform.Tizen.Native.Scroller : Scroller {
    private TaskCompletionSource`1<bool> _animationTaskComplateSource;
    private bool _isAnimation;
    public Scroller(EvasObject parent);
    protected virtual void OnRealized();
    private void CheckTaskCompletionSource();
    public Task ScrollToAsync(int horizontalPageIndex, int verticalPageIndex, bool animated);
    public Task ScrollToAsync(Rect rect, bool animated);
    [CompilerGeneratedAttribute]
private void <OnRealized>b__4_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnRealized>b__4_1(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.SearchBar : EditfieldEntry {
    public SearchBar(EvasObject parent);
    public void SetClearButtonColor(Color color);
}
public class Xamarin.Forms.Platform.Tizen.Native.Span : object {
    private string _text;
    [CompilerGeneratedAttribute]
private FormattedString <FormattedText>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontAttributes <FontAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private LineBreakMode <LineBreakMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAlignment <HorizontalTextAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    public FormattedString FormattedText { get; public set; }
    public string Text { get; public set; }
    public Color ForegroundColor { get; public set; }
    public Color BackgroundColor { get; public set; }
    public string FontFamily { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public double FontSize { get; public set; }
    public string FontWeight { get; public set; }
    public double LineHeight { get; public set; }
    public LineBreakMode LineBreakMode { get; public set; }
    public TextAlignment HorizontalTextAlignment { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    [CompilerGeneratedAttribute]
public FormattedString get_FormattedText();
    [CompilerGeneratedAttribute]
public void set_FormattedText(FormattedString value);
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Color get_ForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ForegroundColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public FontAttributes get_FontAttributes();
    [CompilerGeneratedAttribute]
public void set_FontAttributes(FontAttributes value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public string get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(string value);
    [CompilerGeneratedAttribute]
public double get_LineHeight();
    [CompilerGeneratedAttribute]
public void set_LineHeight(double value);
    [CompilerGeneratedAttribute]
public LineBreakMode get_LineBreakMode();
    [CompilerGeneratedAttribute]
public void set_LineBreakMode(LineBreakMode value);
    [CompilerGeneratedAttribute]
public TextAlignment get_HorizontalTextAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalTextAlignment(TextAlignment value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public void set_Strikethrough(bool value);
    internal string GetMarkupText();
    public string GetDecoratedText();
    private StringBuilder PrepareFormattingString(StringBuilder _formattingString);
    private string ConvertTags(string text);
    public string GetStyle();
    public static Span op_Implicit(string text);
}
public class Xamarin.Forms.Platform.Tizen.Native.TableView : ListView {
    private static SectionCellRenderer _sectionCellRenderer;
    public TableView(EvasObject parent);
    private static TableView();
    public sealed virtual void ApplyTableRoot(TableRoot root);
    protected virtual CellRenderer GetCellRenderer(Cell cell, bool isGroup);
    private void AddSectionTitle(string title, Color textColor);
}
public enum Xamarin.Forms.Platform.Tizen.Native.TextAlignment : Enum {
    public int value__;
    public static TextAlignment None;
    public static TextAlignment Auto;
    public static TextAlignment Start;
    public static TextAlignment End;
    public static TextAlignment Center;
}
public static class Xamarin.Forms.Platform.Tizen.Native.TextHelper : object {
    public static Size GetRawTextBlockSize(EvasObject textable);
    public static Size GetFormattedTextBlockSize(EvasObject textable);
    private static EdjeTextPartObject GetElmTextPart(EvasObject textable);
}
public class Xamarin.Forms.Platform.Tizen.Native.TitleViewPage : Box {
    private Page _page;
    private View _titleView;
    private bool _hasNavigationBar;
    public bool HasNavigationBar { get; public set; }
    public TitleViewPage(EvasObject parent, Page page, View titleView);
    public bool get_HasNavigationBar();
    public void set_HasNavigationBar(bool value);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    private void UpdatPageLayout(object sender, LayoutEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.ToolbarItemButton : Button {
    private ToolbarItem _item;
    private string _defaultAccessibilityName;
    private string _defaultAccessibilityDescription;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    public ToolbarItemButton(ToolbarItem item);
    private void OnDeleted(object sender, EventArgs e);
    private void OnClicked(object sender, EventArgs e);
    private void OnToolbarItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateText();
    private void UpdateIsEnabled();
    private void UpdateIcon();
    private void UpdateStyle();
    private void SetAccessibilityName(bool initialize);
    private void SetAccessibilityDescription(bool initialize);
    private void SetIsAccessibilityElement(bool initialize);
    private void SetLabeledBy(bool initialize);
}
public class Xamarin.Forms.Platform.Tizen.Native.UpdateIsPresentChangeableEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <CanChange>k__BackingField;
    public bool CanChange { get; private set; }
    public UpdateIsPresentChangeableEventArgs(bool canChange);
    [CompilerGeneratedAttribute]
public bool get_CanChange();
    [CompilerGeneratedAttribute]
private void set_CanChange(bool value);
}
public class Xamarin.Forms.Platform.Tizen.Native.ViewHolder : Box {
    private Button _focusArea;
    private EvasObject _content;
    private ViewHolderState _state;
    private bool _isSelected;
    private bool _isFocused;
    private bool _focusable;
    [CompilerGeneratedAttribute]
private object <ViewCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <FocusedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <SelectedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler RequestSelected;
    [CompilerGeneratedAttribute]
private EventHandler StateUpdated;
    public object ViewCategory { get; public set; }
    [ObsoleteAttribute("FocusedColor is obsolete. Use VisualStateManager")]
public Color FocusedColor { get; public set; }
    [ObsoleteAttribute("SelectedColor is obsolete. Use VisualStateManager")]
public Color SelectedColor { get; public set; }
    public EvasObject Content { get; public set; }
    public bool AllowItemFocus { get; public set; }
    public ViewHolderState State { get; public set; }
    public ViewHolder(EvasObject parent);
    [CompilerGeneratedAttribute]
public object get_ViewCategory();
    [CompilerGeneratedAttribute]
public void set_ViewCategory(object value);
    [CompilerGeneratedAttribute]
public Color get_FocusedColor();
    [CompilerGeneratedAttribute]
public void set_FocusedColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_SelectedColor();
    [CompilerGeneratedAttribute]
public void set_SelectedColor(Color value);
    public EvasObject get_Content();
    public void set_Content(EvasObject value);
    public bool get_AllowItemFocus();
    public void set_AllowItemFocus(bool value);
    public ViewHolderState get_State();
    public void set_State(ViewHolderState value);
    [CompilerGeneratedAttribute]
public void add_RequestSelected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RequestSelected(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_StateUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StateUpdated(EventHandler value);
    public void ResetState();
    protected void Initialize(EvasObject parent);
    protected virtual void OnFocused(object sender, EventArgs e);
    protected virtual void OnUnfocused(object sender, EventArgs e);
    protected virtual void OnClicked(object sender, EventArgs e);
    protected virtual void OnLayout();
    protected virtual void UpdateState();
    private void UpdateFocusState();
    private void OnKeyUp(object sender, EvasKeyEventArgs e);
}
public enum Xamarin.Forms.Platform.Tizen.Native.ViewHolderState : Enum {
    public int value__;
    public static ViewHolderState Normal;
    public static ViewHolderState Selected;
    public static ViewHolderState Focused;
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.DateTimeLayout : FormsWatchLayout {
    public DateTimeLayout(EvasObject parent, string style);
    public bool SetBottomButtonPart(EvasObject content, bool preserveOldContent);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.FormsMoreOptionItem : MoreOptionItem {
    [CompilerGeneratedAttribute]
private ToolbarItem <ToolbarItem>k__BackingField;
    public ToolbarItem ToolbarItem { get; public set; }
    [CompilerGeneratedAttribute]
public ToolbarItem get_ToolbarItem();
    [CompilerGeneratedAttribute]
public void set_ToolbarItem(ToolbarItem value);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.FormsWatchLayout : FormsLayout {
    public FormsWatchLayout(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.PopupClass2ButtonGroupLayout : FormsWatchLayout {
    public PopupClass2ButtonGroupLayout(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.PopupClassBaseGroupLayout : FormsWatchLayout {
    public PopupClassBaseGroupLayout(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.PopupLayout : FormsWatchLayout {
    public PopupLayout(EvasObject parent, string style);
    public bool SetTitleText(string title);
    public void SetTitleColor(Color color);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchButton : Button {
    public WatchButton(EvasObject parent);
    public virtual Size Measure(int availableWidth, int availableHeight);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDateTimePicker : CircleDateTimeSelector {
    private DateTimePickerMode _mode;
    public IRotaryActionWidget RotaryWidget { get; }
    public DateTimePickerMode Mode { get; public set; }
    public WatchDateTimePicker(EvasObject parent, CircleSurface surface);
    public sealed virtual IRotaryActionWidget get_RotaryWidget();
    public DateTimePickerMode get_Mode();
    public void set_Mode(DateTimePickerMode value);
    protected virtual void UpdateMode();
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDateTimePickerDialog : Popup {
    private Layout _surfaceLayout;
    private DateTimeLayout _datetimeLayout;
    private CircleSurface _surface;
    private Button _doneButton;
    private Box _container;
    private string _title;
    private WatchDateTimePicker _picker;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateChangedEventArgs> DateTimeChanged;
    [CompilerGeneratedAttribute]
private EventHandler PickerOpened;
    [CompilerGeneratedAttribute]
private EventHandler PickerClosed;
    public string Title { get; public set; }
    public DateTimePickerMode Mode { get; public set; }
    public DateTime MaximumDateTime { get; public set; }
    public DateTime MinimumDateTime { get; public set; }
    public DateTime DateTime { get; public set; }
    public WatchDateTimePickerDialog(EvasObject parent);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual DateTimePickerMode get_Mode();
    public sealed virtual void set_Mode(DateTimePickerMode value);
    public sealed virtual DateTime get_MaximumDateTime();
    public sealed virtual void set_MaximumDateTime(DateTime value);
    public sealed virtual DateTime get_MinimumDateTime();
    public sealed virtual void set_MinimumDateTime(DateTime value);
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DateTimeChanged(EventHandler`1<DateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PickerOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PickerOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PickerClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PickerClosed(EventHandler value);
    protected virtual void ActivateRotaryInteraction();
    private void OnContainerLayout();
    private void OnDoneClicked(object sender, EventArgs e);
    private void OnBackButtonPressed(object sender, EventArgs e);
    private void OnShowAnimationFinished(object sender, EventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Show();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Hide();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.Native.IDateTimeDialog.Unrealize();
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchDialog : Dialog {
    private Layout _popupLayout;
    private bool _hasAcceptButton;
    public WatchDialog(EvasObject parent, bool hasAcceptButton);
    protected virtual void ApplyButton(ButtonPosition position, Button button);
    protected virtual void ApplyContent(EvasObject content);
    protected virtual void ApplyTitle(string title);
    protected virtual void ApplyTitleColor(Color color);
    protected virtual void ApplyMessage(string message);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchListView : ListView {
    private CircleGenList _circleGenList;
    private CircleSurface _surface;
    private GenItemClass _paddingItemClass;
    public IntPtr CircleHandle { get; }
    public CircleGenList CircleGenList { get; }
    public CircleSurface CircleSurface { get; }
    public IRotaryActionWidget RotaryWidget { get; }
    protected GenItemClass PaddingItemTemplate { get; }
    public ScrollBarVisiblePolicy VerticalScrollBarVisibility { get; public set; }
    public WatchListView(EvasObject parent, CircleSurface surface);
    public sealed virtual IntPtr get_CircleHandle();
    public CircleGenList get_CircleGenList();
    public sealed virtual CircleSurface get_CircleSurface();
    public sealed virtual IRotaryActionWidget get_RotaryWidget();
    protected GenItemClass get_PaddingItemTemplate();
    public virtual ScrollBarVisiblePolicy get_VerticalScrollBarVisibility();
    public virtual void set_VerticalScrollBarVisibility(ScrollBarVisiblePolicy value);
    protected virtual void UpdateHeader();
    protected virtual void UpdateFooter();
    protected virtual IntPtr CreateHandle(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchScroller : Scroller {
    private CircleScroller _circleScroller;
    private CircleSurface _surface;
    public IntPtr CircleHandle { get; }
    public CircleSurface CircleSurface { get; }
    public CircleScroller CircleScroller { get; }
    public IRotaryActionWidget RotaryWidget { get; }
    public ScrollBarVisiblePolicy VerticalScrollBarVisiblePolicy { get; public set; }
    public ScrollBarVisiblePolicy HorizontalScrollBarVisiblePolicy { get; public set; }
    public WatchScroller(EvasObject parent, CircleSurface surface);
    public sealed virtual IntPtr get_CircleHandle();
    public sealed virtual CircleSurface get_CircleSurface();
    public CircleScroller get_CircleScroller();
    public sealed virtual IRotaryActionWidget get_RotaryWidget();
    public virtual ScrollBarVisiblePolicy get_VerticalScrollBarVisiblePolicy();
    public virtual void set_VerticalScrollBarVisiblePolicy(ScrollBarVisiblePolicy value);
    public virtual ScrollBarVisiblePolicy get_HorizontalScrollBarVisiblePolicy();
    public virtual void set_HorizontalScrollBarVisiblePolicy(ScrollBarVisiblePolicy value);
    protected virtual IntPtr CreateHandle(EvasObject parent);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchSpinner : CircleSpinner {
    private SmartEvent _wheelAppeared;
    private SmartEvent _wheelDisappeared;
    [CompilerGeneratedAttribute]
private EventHandler WheelAppeared;
    [CompilerGeneratedAttribute]
private EventHandler WheelDisappeared;
    public IRotaryActionWidget RotaryWidget { get; }
    public WatchSpinner(EvasObject parent, CircleSurface surface);
    [CompilerGeneratedAttribute]
public void add_WheelAppeared(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_WheelAppeared(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_WheelDisappeared(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_WheelDisappeared(EventHandler value);
    public sealed virtual IRotaryActionWidget get_RotaryWidget();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1(object s, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.Watch.WatchTableView : WatchListView {
    private static SectionCellRenderer _sectionCellRenderer;
    public WatchTableView(EvasObject parent, CircleSurface surface);
    private static WatchTableView();
    public sealed virtual void ApplyTableRoot(TableRoot root);
    protected virtual CellRenderer GetCellRenderer(Cell cell, bool isGroup);
    private void AddSectionTitle(string title, Color textColor);
}
public class Xamarin.Forms.Platform.Tizen.Native.WebViewContainer : WidgetLayout {
    [CompilerGeneratedAttribute]
private WebView <WebView>k__BackingField;
    public WebView WebView { get; }
    public WebViewContainer(EvasObject parent);
    [CompilerGeneratedAttribute]
public WebView get_WebView();
    private void OnFocused(object sender, EventArgs e);
    private void OnUnfocused(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Native.WidgetLayout : FormsLayout {
    public WidgetLayout(EvasObject parent, string style);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.NativeBindingExtensions : object {
    [ExtensionAttribute]
public static void SetBinding(EvasObject view, string propertyName, BindingBase binding, string updateSourceEventName);
    [ExtensionAttribute]
public static void SetBinding(EvasObject view, BindableProperty targetProperty, BindingBase binding);
    [ExtensionAttribute]
public static void SetValue(EvasObject target, BindableProperty targetProperty, object value);
    [ExtensionAttribute]
public static void SetBindingContext(EvasObject target, object bindingContext, Func`2<EvasObject, IEnumerable`1<EvasObject>> getChildren);
    [ExtensionAttribute]
internal static void TransferBindablePropertiesToWrapper(EvasObject target, View wrapper);
}
internal class Xamarin.Forms.Platform.Tizen.NativeBindingService : object {
    public sealed virtual bool TrySetBinding(object target, string propertyName, BindingBase binding);
    public sealed virtual bool TrySetBinding(object target, BindableProperty property, BindingBase binding);
    public sealed virtual bool TrySetValue(object target, BindableProperty property, object value);
}
internal class Xamarin.Forms.Platform.Tizen.NativeValueConverterService : object {
    public sealed virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
public class Xamarin.Forms.Platform.Tizen.NativeViewWrapper : View {
    [CompilerGeneratedAttribute]
private EvasObject <EvasObject>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasureDelegate <MeasureDelegate>k__BackingField;
    public EvasObject EvasObject { get; private set; }
    public MeasureDelegate MeasureDelegate { get; }
    public NativeViewWrapper(EvasObject obj, MeasureDelegate measureDelegate);
    [CompilerGeneratedAttribute]
public EvasObject get_EvasObject();
    [CompilerGeneratedAttribute]
private void set_EvasObject(EvasObject value);
    [CompilerGeneratedAttribute]
public MeasureDelegate get_MeasureDelegate();
    protected virtual void OnBindingContextChanged();
}
public class Xamarin.Forms.Platform.Tizen.NativeViewWrapperRenderer : ViewRenderer`2<NativeViewWrapper, EvasObject> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NativeViewWrapper> e);
    protected virtual Size Measure(int availableWidth, int availableHeight);
}
public class Xamarin.Forms.Platform.Tizen.NavigationDrawer : Box {
    private EvasObject _navigationView;
    private Box _mainContainer;
    private Box _dimArea;
    private EvasObject _main;
    private Box _drawerBox;
    private GestureLayer _gestureOnDimArea;
    private bool _isOpen;
    [CompilerGeneratedAttribute]
private EventHandler Toggled;
    public EvasObject TargetView { get; }
    public EvasObject NavigationView { get; public set; }
    public EvasObject Main { get; public set; }
    public bool IsOpen { get; public set; }
    public NavigationDrawer(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Toggled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Toggled(EventHandler value);
    public sealed virtual EvasObject get_TargetView();
    public sealed virtual EvasObject get_NavigationView();
    public sealed virtual void set_NavigationView(EvasObject value);
    public sealed virtual EvasObject get_Main();
    public sealed virtual void set_Main(EvasObject value);
    public sealed virtual bool get_IsOpen();
    public sealed virtual void set_IsOpen(bool value);
    private void Initialize(EvasObject parent);
    private void UpdateNavigationView(EvasObject navigationView);
    private void UpdateMain(EvasObject main);
    private void OnLayout();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.NavigationDrawer/<HideDrawer>d__26")]
private void HideDrawer();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.NavigationDrawer/<ShowDrawer>d__27")]
private void ShowDrawer();
    private Task MoveDrawerAsync(EvasObject target, Rect dest, UInt32 length);
    private void OnTapped(TapData data);
    private sealed virtual override void Xamarin.Forms.IAnimatable.BatchBegin();
    private sealed virtual override void Xamarin.Forms.IAnimatable.BatchCommit();
}
public class Xamarin.Forms.Platform.Tizen.NavigationPageRenderer : VisualElementRenderer`1<NavigationPage> {
    private List`1<Widget> _naviItemContentPartList;
    private Naviframe _naviFrame;
    private Page _previousPage;
    private TaskCompletionSource`1<bool> _currentTaskSource;
    private ToolbarTracker _toolbarTracker;
    private IDictionary`2<Page, NaviItem> _naviItemMap;
    private Page CurrentPage { get; }
    private Page PreviousPage { get; }
    private NaviItem CurrentNaviItem { get; }
    private NaviItem PreviousNaviItem { get; }
    private Page get_CurrentPage();
    private Page get_PreviousPage();
    private NaviItem get_CurrentNaviItem();
    private NaviItem get_PreviousNaviItem();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NavigationPage> e);
    protected virtual void OnElementReady();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnPageCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnToolbarCollectionChanged(object sender, EventArgs eventArgs);
    private void NavigationBarPropertyChangedHandler(object sender, PropertyChangedEventArgs e);
    private void UpdateHasNavigationBar(Page page);
    private void UpdateToolbarItem(Page page, NaviItem item);
    private void UpdateHasBackButton(Page page, NaviItem item);
    private void UpdateTitle(Page page, NaviItem item);
    private string SpanTitle(string Title);
    private void UpdateBarBackgroundColor(NaviItem item);
    private void UpdateNavigationBar(Page page, NaviItem item);
    private void UpdateBreadCrumbsBar(NaviItem item);
    private Button CreateNavigationButton(string text);
    private void NaviItemPartContentDeletedHandler(object sender, EventArgs e);
    private NaviItem GetNaviItemForPage(Page page);
    private Button GetToolbarButton(ToolbarButtonPosition position);
    private Toolbar GetBreadCrumbsBar();
    private void OnPopRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnPopToRootRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnPushRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnRemovePageRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnInsertPageBeforeRequested(object sender, NavigationRequestedEventArgs nre);
    private void OnAnimationFinished(object sender, EventArgs e);
    private void CompleteCurrentNavigationTask();
    private EvasObject CreateNavItem(Page page);
    [CompilerGeneratedAttribute]
private void <OnElementPropertyChanged>b__18_0();
    [CompilerGeneratedAttribute]
private void <CreateNavigationButton>b__30_0(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.NavigationView : Background {
    private static Color s_defaultBackgroundColor;
    private Box _mainLayout;
    private Image _backgroundImage;
    private Aspect _bgImageAspect;
    private ImageSource _bgImageSource;
    private View _header;
    private EvasObject _nativeHeader;
    private GenList _menu;
    private GenItemClass _templateClass;
    private GenItemClass _headerClass;
    private Color _backgroundColor;
    private Element _lastSelected;
    private Dictionary`2<Element, View> _cachedView;
    private List`1<List`1<Element>> _cachedGroups;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> SelectedItemChanged;
    [CompilerGeneratedAttribute]
private Shell <Shell>k__BackingField;
    private FlyoutHeaderBehavior _headerBehavior;
    public EvasObject NativeView { get; }
    public IShellController ShellController { get; }
    public Shell Shell { get; }
    public FlyoutHeaderBehavior HeaderBehavior { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Aspect BackgroundImageAspect { get; public set; }
    public ImageSource BackgroundImageSource { get; public set; }
    public View Header { get; public set; }
    private bool HeaderOnMenu { get; }
    public NavigationView(EvasObject parent, Shell shell);
    private static NavigationView();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    public sealed virtual EvasObject get_NativeView();
    public IShellController get_ShellController();
    [CompilerGeneratedAttribute]
public Shell get_Shell();
    public sealed virtual FlyoutHeaderBehavior get_HeaderBehavior();
    public sealed virtual void set_HeaderBehavior(FlyoutHeaderBehavior value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public sealed virtual Aspect get_BackgroundImageAspect();
    public sealed virtual void set_BackgroundImageAspect(Aspect value);
    public sealed virtual ImageSource get_BackgroundImageSource();
    public sealed virtual void set_BackgroundImageSource(ImageSource value);
    public sealed virtual View get_Header();
    public sealed virtual void set_Header(View value);
    private bool get_HeaderOnMenu();
    public sealed virtual void BuildMenu(List`1<List`1<Element>> flyoutGroups);
    private void InitializeComponent(EvasObject parent);
    private bool IsMenuItemChanged(List`1<List`1<Element>> flyoutGroups);
    private EvasObject GetHeaderContnet(object data, string part);
    private EvasObject GetTemplatedContent(object data, string part);
    private EvasObject GetNativeView(View view);
    private DataTemplate GetFlyoutItemDataTemplate(BindableObject bo);
    private void UpdateBackgroundImage();
    private void UpdateHeader(View header);
    private void UpdateHeaderBehavior();
    private void UpdateHeaderOnMenu(View header);
    private void ResetHeaderOnMenu();
    private void OnHeaderSizeChanged(object sender, EventArgs e);
    private void OnLayout();
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__44_0(object s, GenListItemEventArgs e);
    [CompilerGeneratedAttribute]
private void <UpdateBackgroundImage>b__50_0();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.PageExtensions : object {
    [ExtensionAttribute]
public static EvasObject CreateEvasObject(ContentPage page, EvasObject parent, bool hasAlpha);
    [ExtensionAttribute]
public static void UpdateFocusTreePolicy(MultiPage`1<T> multiPage);
}
public class Xamarin.Forms.Platform.Tizen.PageRenderer : VisualElementRenderer`1<Page> {
    private Page _page;
    private Lazy`1<MoreOption> _moreOption;
    private Lazy`1<SKCanvasView> _backgroundCanvas;
    public SKCanvasView BackgroundCanvas { get; }
    public sealed virtual SKCanvasView get_BackgroundCanvas();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Page> e);
    protected virtual void OnElementReady();
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void UpdateLayout();
    protected virtual FormsMoreOptionItem CreateMoreOptionItem(ToolbarItem item);
    protected virtual void OnMoreOptionClosed();
    protected virtual void OnMoreOptionOpened();
    private void UpdateBackgroundImage(bool initialize);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    private void OnBackgroundPaint(object sender, SKPaintSurfaceEventArgs e);
    private MoreOption CreateMoreOption();
    private void SendMoreOptionClosed(object sender, EventArgs e);
    private void SendMoreOptionOpened(object sender, EventArgs e);
    private void OnToolbarCollectionChanged(object sender, EventArgs eventArgs);
    private void UpdateToolbarItems(bool initialize);
    private void OnMoreOptionItemClicked(object sender, MoreOptionItemEventArgs e);
    [CompilerGeneratedAttribute]
private SKCanvasView <OnElementChanged>b__6_0();
}
public class Xamarin.Forms.Platform.Tizen.PanGestureHandler : GestureHandler {
    private int _currentPanGestureId;
    public GestureType Type { get; }
    public PanGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
public class Xamarin.Forms.Platform.Tizen.PathRenderer : ShapeRenderer {
}
public class Xamarin.Forms.Platform.Tizen.PickerRenderer : ViewRenderer`2<Picker, Entry> {
    private List _list;
    private Dialog _dialog;
    private Dictionary`2<ListItem, int> _itemToItemNumber;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    protected virtual Entry CreateNativeControl();
    protected virtual void UpdateSelectedIndex();
    protected virtual void UpdateTitleColor();
    protected virtual void UpdateTextColor();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    private void UpdateTitle();
    private void UpdateHorizontalTextAlignment();
    private void OnLayoutFocused(object sender, EventArgs e);
    private void OnLayoutUnfocused(object sender, EventArgs e);
    private void OnTextBlockFocused(object sender, EventArgs e);
    private void OnItemSelected(object senderObject, EventArgs ev);
    private void OnDialogDismissed(object sender, EventArgs e);
    private void CleanView();
    [CompilerGeneratedAttribute]
private void <OnTextBlockFocused>b__17_0(object senders, EventArgs es);
    [CompilerGeneratedAttribute]
private void <OnTextBlockFocused>b__17_1();
}
public class Xamarin.Forms.Platform.Tizen.PinchGestureHandler : GestureHandler {
    private Point _currentScalePoint;
    private int _previousPinchRadius;
    private double _originalPinchScale;
    public GestureType Type { get; }
    public PinchGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
public static class Xamarin.Forms.Platform.Tizen.Platform : object {
    internal static BindableProperty RendererProperty;
    private static Platform();
    public static IVisualElementRenderer GetRenderer(BindableObject bindable);
    public static void SetRenderer(BindableObject bindable, IVisualElementRenderer value);
    public static IVisualElementRenderer GetOrCreateRenderer(VisualElement element);
    internal static IVisualElementRenderer CreateRenderer(VisualElement element);
    internal static ITizenPlatform CreatePlatform(EvasObject parent);
    public static SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.PlatformConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Tizen, T> OnThisPlatform(T element);
}
public abstract class Xamarin.Forms.Platform.Tizen.PlatformEffect : PlatformEffect`2<EvasObject, EvasObject> {
}
public class Xamarin.Forms.Platform.Tizen.PolygonRenderer : ShapeRenderer {
}
public class Xamarin.Forms.Platform.Tizen.PolylineRenderer : ShapeRenderer {
}
public class Xamarin.Forms.Platform.Tizen.PopupManager : object {
    private ITizenPlatform _platform;
    private Dialog _pageBusyDialog;
    private int _pageBusyCount;
    private HashSet`1<EvasObject> _alerts;
    public PopupManager(ITizenPlatform platform);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void OnBusySetRequest(Page sender, bool enabled);
    private void OnAlertRequest(Page sender, AlertArguments arguments);
    private void OnActionSheetRequest(Page sender, ActionSheetArguments arguments);
    private void OnPromptRequested(Page sender, PromptArguments args);
}
public class Xamarin.Forms.Platform.Tizen.PreloadedWindow : Window {
    private static PreloadedWindow s_precreated;
    [CompilerGeneratedAttribute]
private Layout <BaseLayout>k__BackingField;
    public Layout BaseLayout { get; protected set; }
    [CompilerGeneratedAttribute]
public Layout get_BaseLayout();
    [CompilerGeneratedAttribute]
protected void set_BaseLayout(Layout value);
    protected void Initialize();
    public static PreloadedWindow GetInstance();
}
public class Xamarin.Forms.Platform.Tizen.ProgressBarRenderer : ViewRenderer`2<ProgressBar, ProgressBar> {
    private static Color s_defaultColor;
    private static ProgressBarRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateThemeStyle();
    private void UpdateAll();
    protected virtual void UpdateProgressColor(bool initialize);
    private void UpdateProgress();
    private void UpdatePulsingStatus();
}
public class Xamarin.Forms.Platform.Tizen.RadioButtonRenderer : ViewRenderer`2<RadioButton, Radio> {
    private Span _span;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<RadioButton> e);
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    protected virtual Size Measure(int availableWidth, int availableHeight);
    private void OnValueChanged(object sender, EventArgs e);
    private void UpdateIsChecked();
    private void UpdateText(bool isInitialized);
    private void UpdateTextColor(bool isInitialized);
    private void UpdateFont(bool isInitialized);
    private void ApplyTextAndStyle();
    private void SetInternalTextAndStyle(string formattedText, string textStyle);
}
public class Xamarin.Forms.Platform.Tizen.RectangleRenderer : ShapeRenderer {
}
internal class Xamarin.Forms.Platform.Tizen.RefreshIcon : ContentView {
    public static int IconSize;
    private static Color DefaultColor;
    private static string IconPath;
    private bool _isPlaying;
    private Image _icon;
    public Color IconColor { get; public set; }
    public double IconRotation { get; public set; }
    private static RefreshIcon();
    public Color get_IconColor();
    public void set_IconColor(Color value);
    public double get_IconRotation();
    public void set_IconRotation(double value);
    public void Start();
    public void Stop();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.RefreshIcon/<TurnInternal>d__14")]
private void TurnInternal();
}
internal class Xamarin.Forms.Platform.Tizen.RefreshLayout : StackLayout {
    private static int MaximumDistance;
    [CompilerGeneratedAttribute]
private RefreshIcon <RefreshIcon>k__BackingField;
    private RefreshIcon RefreshIcon { get; private set; }
    public Color RefreshIconColor { get; public set; }
    private static RefreshLayout();
    [CompilerGeneratedAttribute]
private RefreshIcon get_RefreshIcon();
    [CompilerGeneratedAttribute]
private void set_RefreshIcon(RefreshIcon value);
    public Color get_RefreshIconColor();
    public void set_RefreshIconColor(Color value);
    public void SetDistance(double distance);
    public void Start();
    public bool ShouldRefresh();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.RefreshLayout/<StopAsync>d__12")]
public Task StopAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.RefreshLayout/<ResetRefreshIconAsync>d__13")]
public Task ResetRefreshIconAsync();
    [CompilerGeneratedAttribute]
private void <ResetRefreshIconAsync>b__13_0(double r);
}
internal enum Xamarin.Forms.Platform.Tizen.RefreshState : Enum {
    public int value__;
    public static RefreshState Idle;
    public static RefreshState Drag;
    public static RefreshState Loading;
}
public class Xamarin.Forms.Platform.Tizen.RefreshViewRenderer : LayoutRenderer {
    private GestureLayer _gestureLayer;
    private RefreshLayout _refreshLayout;
    private IVisualElementRenderer _refreshLayoutRenderer;
    [CompilerGeneratedAttribute]
private RefreshState <RefreshState>k__BackingField;
    private RefreshView RefreshView { get; }
    private RefreshState RefreshState { get; private set; }
    private RefreshView get_RefreshView();
    [CompilerGeneratedAttribute]
private RefreshState get_RefreshState();
    [CompilerGeneratedAttribute]
private void set_RefreshState(RefreshState value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    private void Initialize();
    private void UpdateRefreshLayout();
    private bool IsEdgeScrolling();
    private int GetScrollYOnGenList(IntPtr handle);
    private int GetScrollYOnWebView(WebView webview);
    private void OnMoved(MomentumData moment);
    private void OnEnd(MomentumData moment);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.RefreshViewRenderer/<ResetRefreshAsync>d__18")]
private Task ResetRefreshAsync();
    private void UpdateRefreshColor();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.RefreshViewRenderer/<UpdateIsRefreshing>d__20")]
private void UpdateIsRefreshing(bool init);
}
public class Xamarin.Forms.Platform.Tizen.Renderers.FlyoutContainer : Box {
    private FlyoutPage _parent;
    private bool _isFlyout;
    private VisualElement _childView;
    private bool _disposed;
    private bool _hasAppearedToParent;
    private IPageController PageController { get; }
    private IFlyoutPageController FlyoutPageController { get; }
    public VisualElement ChildView { get; public set; }
    public FlyoutContainer(FlyoutPage parentElement, bool isFlyout);
    private IPageController get_PageController();
    private IFlyoutPageController get_FlyoutPageController();
    protected virtual override void Finalize();
    public VisualElement get_ChildView();
    public void set_ChildView(VisualElement value);
    public sealed virtual void Dispose();
    protected void RemoveChildView();
    protected void AddChildView(VisualElement childView);
    protected virtual void Dispose(bool disposing);
    private void OnLayoutUpdated();
    public void SendAppearing();
    public void SendDisappearing();
    [CompilerGeneratedAttribute]
private void <set_ChildView>b__13_0();
}
[ObsoleteAttribute("MasterDetailContainer is obsolete as of version 5.0.0. Please use FlyoutContainer instead.")]
public class Xamarin.Forms.Platform.Tizen.Renderers.MasterDetailContainer : Box {
    private MasterDetailPage _parent;
    private bool _isMaster;
    private VisualElement _childView;
    private bool _disposed;
    private bool _hasAppearedToParent;
    private IPageController PageController { get; }
    private IMasterDetailPageController MasterDetailPageController { get; }
    public VisualElement ChildView { get; public set; }
    public MasterDetailContainer(MasterDetailPage parentElement, bool isMaster);
    private IPageController get_PageController();
    private IMasterDetailPageController get_MasterDetailPageController();
    protected virtual override void Finalize();
    public VisualElement get_ChildView();
    public void set_ChildView(VisualElement value);
    public sealed virtual void Dispose();
    protected void RemoveChildView();
    protected void AddChildView(VisualElement childView);
    protected virtual void Dispose(bool disposing);
    private void OnLayoutUpdated();
    public void SendAppearing();
    public void SendDisappearing();
    [CompilerGeneratedAttribute]
private void <set_ChildView>b__13_0();
}
public static class Xamarin.Forms.Platform.Tizen.ResourcePath : object {
    public static string GetPath(string res);
    internal static string GetPath(ImageSource icon);
}
internal class Xamarin.Forms.Platform.Tizen.ResourcesProvider : object {
    private ResourceDictionary _dictionary;
    public sealed virtual IResourceDictionary GetSystemResources();
    private void UpdateStyles();
    private Style GetStyleByKey(string key);
    private Style GetStyle(Nullable`1<int> fontSize, Nullable`1<Color> textColor);
}
public class Xamarin.Forms.Platform.Tizen.RootNativeViewChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private EvasObject <RootNativeView>k__BackingField;
    public EvasObject RootNativeView { get; private set; }
    public RootNativeViewChangedEventArgs(EvasObject view);
    [CompilerGeneratedAttribute]
public EvasObject get_RootNativeView();
    [CompilerGeneratedAttribute]
private void set_RootNativeView(EvasObject value);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.ScrollBarExtensions : object {
    [ExtensionAttribute]
public static ScrollBarVisiblePolicy ToNative(ScrollBarVisibility visibility);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.ScrollToPositionExtensions : object {
    [ExtensionAttribute]
public static ScrollToPosition ToNative(ScrollToPosition position);
}
public class Xamarin.Forms.Platform.Tizen.ScrollViewRenderer : ViewRenderer`2<ScrollView, Scroller> {
    private Container _scrollCanvas;
    private int _defaultVerticalStepSize;
    private int _defaultHorizontalStepSize;
    private EvasBox EvasFormsCanvas { get; }
    private Box Canvas { get; }
    private EvasBox get_EvasFormsCanvas();
    private Box get_Canvas();
    public virtual Rect GetNativeContentGeometry();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ScrollView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual Scroller CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    private void FillContent();
    private void OnContentLayoutUpdated(object sender, LayoutEventArgs e);
    private void UpdateOrientation();
    private void UpdateContentSize();
    protected void OnScrolled(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.ScrollViewRenderer/<OnScrollRequested>d__18")]
private void OnScrollRequested(object sender, ScrollToRequestedEventArgs e);
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    private void UpdateVerticalScrollStep(bool initialize);
    private void UpdateHorizontalScrollStep(bool initialize);
    [CompilerGeneratedAttribute]
private void <UpdateContentSize>b__16_0();
}
public class Xamarin.Forms.Platform.Tizen.SearchBarRenderer : ViewRenderer`2<SearchBar, SearchBar> {
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SearchBar> e);
    protected virtual Size MinimumSize();
    private void CancelButtonColorPropertyHandler(bool initialize);
    private void FontAttributesPropertyHandler();
    private void FontFamilyPropertyHandler();
    private void FontSizePropertyHandler();
    private void HorizontalTextAlignmentPropertyHandler();
    private void PlaceholderColorPropertyHandler(bool initialize);
    private void PlaceholderPropertyHandler();
    private void OnTextChanged(object sender, EventArgs e);
    private void OnActivated(object sender, EventArgs e);
    private void TextColorPropertyHandler(bool initialize);
    private void TextPropertyHandler();
    private void UpdateKeyboard(bool initialize);
    private void UpdateIsSpellCheckEnabled();
    private void UpdateMaxLength();
    private string MaxLengthFilter(Entry entry, string s);
    private void UpdateIsReadOnly();
}
public class Xamarin.Forms.Platform.Tizen.SearchHandlerRenderer : object {
    private bool disposedValue;
    private SearchResultList _searchResultList;
    [CompilerGeneratedAttribute]
private SearchHandler <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchBar <Control>k__BackingField;
    public SearchHandler Element { get; }
    public EvasObject NativeView { get; }
    private ISearchHandlerController SearchHandlerController { get; }
    private SearchBar Control { get; }
    public SearchHandlerRenderer(SearchHandler searchHandler);
    [CompilerGeneratedAttribute]
public SearchHandler get_Element();
    public EvasObject get_NativeView();
    private ISearchHandlerController get_SearchHandlerController();
    [CompilerGeneratedAttribute]
private SearchBar get_Control();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnSearchResultListChanged(object sender, ListProxyChangedEventArgs e);
    private void InitializeSearchResultList();
    private void OnResultItemSelected(object sender, GenListItemEventArgs e);
    private void DeinitializeSearchResultList();
    private void UpdateSearchResult();
    private void UpdateIsSearchEnabled();
    private void UpdateQuery();
    private void UpdateFontAttributes();
    private void UpdateFontFamily();
    private void UpdateFontSize();
    private void UpdateBackgroundColor();
    private void UpdateTextColor();
    private void UpdateHorizontalTextAlignment();
    private void OnFocusChangedRequested(object sender, FocusRequestArgs e);
    private void UpdateKeyboard();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private void OnFocused(object sender, EventArgs e);
    private void OnActivated(object sender, EventArgs e);
    private void OnTextChanged(object sender, TextChangedEventArgs e);
    private void UpdateSearchResultLayout();
    [CompilerGeneratedAttribute]
private void <OnResultItemSelected>b__19_0();
    [CompilerGeneratedAttribute]
private void <OnFocused>b__34_0();
    [CompilerGeneratedAttribute]
private bool <OnFocused>b__34_1();
}
public class Xamarin.Forms.Platform.Tizen.SearchResultList : GenList {
    private GenItemClass _defaultClass;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    private IReadOnlyList`1<object> _itemsSource;
    [CompilerGeneratedAttribute]
private DataTemplate <ItemTemplate>k__BackingField;
    public int Height { get; private set; }
    public IReadOnlyList`1<object> ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    public IReadOnlyList`1<object> get_ItemsSource();
    public void set_ItemsSource(IReadOnlyList`1<object> value);
    public void UpdateLayout();
    [CompilerGeneratedAttribute]
public DataTemplate get_ItemTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemTemplate(DataTemplate value);
    private EvasObject GetContent(object data, string part);
    private void Append(object data);
}
public class Xamarin.Forms.Platform.Tizen.ShapeRenderer : VisualElementRenderer`1<VisualElement> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<VisualElement> e);
}
public class Xamarin.Forms.Platform.Tizen.ShellItemRenderer : object {
    private static string _dotsIcon;
    private IShellTabs _tabs;
    private Box _mainLayout;
    private Box _contentHolder;
    private Panel _moreItemsDrawer;
    private ShellMoreToolbar _moreItemsList;
    private ToolbarItem _moreTabItem;
    private ShellSectionStack _currentStack;
    private Dictionary`2<ToolbarItem, ShellSection> _sectionsTable;
    private Dictionary`2<ShellSection, ToolbarItem> _tabItemsTable;
    private Dictionary`2<ShellSection, ShellSectionStack> _shellSectionStackCache;
    private List`1<ToolbarItem> _tabsItems;
    private bool _disposed;
    private Color _tabBarBackgroudColor;
    private Color _tabBarTitleColor;
    [CompilerGeneratedAttribute]
private ShellItem <ShellItem>k__BackingField;
    private bool _disableMoreItemOpen;
    public EvasObject NativeView { get; }
    public Color TabBarBackgroundColor { get; public set; }
    public Color TabBarTitleColor { get; public set; }
    private ShellItem ShellItem { get; }
    private IShellController ShellController { get; }
    private bool HasMoreItems { get; }
    private bool HasTabs { get; }
    public ShellItemRenderer(ShellItem item);
    protected virtual override void Finalize();
    public EvasObject get_NativeView();
    public Color get_TabBarBackgroundColor();
    public void set_TabBarBackgroundColor(Color value);
    public Color get_TabBarTitleColor();
    public void set_TabBarTitleColor(Color value);
    [CompilerGeneratedAttribute]
private ShellItem get_ShellItem();
    private IShellController get_ShellController();
    private bool get_HasMoreItems();
    private bool get_HasTabs();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateTabsItems();
    protected virtual IShellTabs CreateTabs();
    protected virtual ShellSectionStack CreateShellSectionStack(ShellSection section);
    private void UpdateCurrentItem(ShellSection section);
    private void UpdateCurrentItemFromUI(ShellSection section);
    private void Initialize();
    private void InitializeTabs();
    private void DeinitializeTabs();
    private void CreateMoreItems();
    private void DestroyMoreItems();
    private void OnMoreItemSelected(object sender, GenListItemEventArgs e);
    private void OnShellItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private void UpdateTabsBackgroudColor(Color color);
    private void UpdateTabBarTitleColor(Color color);
    private void ResetTabs();
    private void OnShellItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddTabsItem(ShellSection section);
    private void UpdateCurrentShellSection(ShellSection section);
    private void OnTabsSelected(object sender, ToolbarItemEventArgs e);
    private void OnLayout();
    private ToolbarItem AppendTabsItem(string text, ImageSource icon);
}
public class Xamarin.Forms.Platform.Tizen.ShellMoreToolbar : GenList {
    private GenItemClass _defaultClass;
    public int HeightRequest { get; }
    public ShellMoreToolbar(EvasObject parent);
    public void AddItem(ShellSection section);
    public int get_HeightRequest();
    private EvasObject GetContent(object data, string part);
}
public class Xamarin.Forms.Platform.Tizen.ShellNavBar : Box {
    private Image _menuIcon;
    private Button _menuButton;
    private Label _title;
    private SearchHandlerRenderer _searchRenderer;
    private EvasObject _nativeTitleView;
    private SearchHandler _searchHandler;
    private View _titleView;
    private Page _page;
    private FlyoutBehavior _flyoutBehavior;
    private Color _backgroudColor;
    private Color _foregroudColor;
    private Color _titleColor;
    private static string _menuIconRes;
    private static string _backIconRes;
    private bool _hasBackButton;
    private bool disposedValue;
    private bool _isTV;
    public IShellController ShellController { get; }
    public bool HasBackButton { get; public set; }
    public FlyoutBehavior FlyoutBehavior { get; public set; }
    public SearchHandler SearchHandler { get; public set; }
    public View TitleView { get; public set; }
    public string Title { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public Color TitleColor { get; public set; }
    protected virtual override void Finalize();
    public IShellController get_ShellController();
    public bool get_HasBackButton();
    public void set_HasBackButton(bool value);
    public FlyoutBehavior get_FlyoutBehavior();
    public void set_FlyoutBehavior(FlyoutBehavior value);
    public SearchHandler get_SearchHandler();
    public void set_SearchHandler(SearchHandler value);
    public View get_TitleView();
    public void set_TitleView(View value);
    public string get_Title();
    public void set_Title(string value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public sealed virtual void Dispose();
    public void SetPage(Page page);
    protected virtual void Dispose(bool disposing);
    private void UpdateMenuIcon();
    private void OnMenuClicked(object sender, EventArgs e);
    private void UpdateTitleView(View titleView);
    private void UpdateSearchHandler(SearchHandler handler);
    private void UpdateChildren();
    private void OnLayout();
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
}
public class Xamarin.Forms.Platform.Tizen.ShellRenderer : VisualElementRenderer`1<Shell> {
    private INavigationDrawer _drawer;
    private INavigationView _navigationView;
    private ShellItemRenderer _currentShellItem;
    public static Color DefaultBackgroundColor;
    public static Color DefaultForegroundColor;
    public static Color DefaultTitleColor;
    protected INavigationDrawer NavigationDrawer { get; }
    private static ShellRenderer();
    protected INavigationDrawer get_NavigationDrawer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Shell> e);
    protected virtual void Dispose(bool disposing);
    protected void InitializeFlyout();
    protected void OnFlyoutIsPresentedChanged(object sender, EventArgs e);
    protected virtual ShellItemRenderer CreateShellItemRenderer(ShellItem item);
    protected virtual INavigationDrawer CreateNavigationDrawer();
    protected virtual INavigationView CreateNavigationView();
    private void UpdateFlyoutHeader(bool init);
    private void UpdateFlyoutHeaderBehavior();
    private void UpdateCurrentItem();
    private void UpdateFlyoutBackgroundColor();
    private void UpdateFlyoutBackgroundImageAspect();
    private void UpdateFlyoutBackgroundImage();
    protected virtual void UpdateFlyoutIsPresented();
    private void OnShellStructureChanged(object sender, EventArgs e);
    private void OnItemSelected(object sender, SelectedItemChangedEventArgs e);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IFlyoutController.Open();
    [CompilerGeneratedAttribute]
private void <UpdateFlyoutIsPresented>b__22_0();
}
public class Xamarin.Forms.Platform.Tizen.ShellSectionRenderer : object {
    private Box _mainLayout;
    private Box _contentArea;
    private IShellTabs _tabs;
    private EvasObject _currentContent;
    private Page _displayedPage;
    private Dictionary`2<ShellContent, EvasObject> _contentCache;
    private Dictionary`2<ShellContent, ToolbarItem> _contentToTabsItem;
    private Dictionary`2<ToolbarItem, ShellContent> _itemToContent;
    private List`1<ToolbarItem> _tabsItems;
    private Color _backgroundColor;
    private Color _foregroundColor;
    private bool _disposed;
    private bool _tabBarIsVisible;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    private bool HasTabs { get; }
    protected bool TabBarIsVisible { get; protected set; }
    public ShellSection ShellSection { get; }
    public EvasObject NativeView { get; }
    public Color ToolbarBackgroundColor { get; public set; }
    public Color ToolbarForegroundColor { get; public set; }
    public ShellSectionRenderer(ShellSection section);
    private bool get_HasTabs();
    protected virtual bool get_TabBarIsVisible();
    protected virtual void set_TabBarIsVisible(bool value);
    [CompilerGeneratedAttribute]
public ShellSection get_ShellSection();
    public sealed virtual EvasObject get_NativeView();
    public Color get_ToolbarBackgroundColor();
    public void set_ToolbarBackgroundColor(Color value);
    public Color get_ToolbarForegroundColor();
    public void set_ToolbarForegroundColor(Color value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private void UpdateDisplayedPage(Page page);
    private void OnDisplayedPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual IShellTabs CreateToolbar();
    private void InitializeTabs();
    private void ClearTabsItem();
    private void DeinitializeTabs();
    private void OnSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateCurrentItem(ShellContent content);
    private void UpdateToolbarBackgroudColor(Color color);
    private void UpdateToolbarForegroundColor(Color color);
    private void UpdateTabsItem();
    private ToolbarItem InsertTabsItem(ShellContent content);
    private void OnShellSectionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnTabsSelected(object sender, ToolbarItemEventArgs e);
    private void UpdateCurrentShellContent(ShellContent content);
    private EvasObject CreateShellContent(ShellContent content);
    private void OnLayout();
}
public class Xamarin.Forms.Platform.Tizen.ShellSectionStack : Box {
    private ShellNavBar _navBar;
    private Page _currentPage;
    private SimpleViewStack _viewStack;
    private IShellSectionRenderer _shellSectionRenderer;
    private bool _disposed;
    private bool _navBarIsVisible;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    public bool NavBarIsVisible { get; public set; }
    private ShellSection ShellSection { get; }
    public ShellSectionStack(ShellSection section);
    public virtual bool get_NavBarIsVisible();
    public virtual void set_NavBarIsVisible(bool value);
    [CompilerGeneratedAttribute]
private ShellSection get_ShellSection();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection section);
    private void InitializeComponent();
    private void UpdateDisplayedPage(Page page);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    protected virtual void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnNavigationRequested(object sender, NavigationRequestedEventArgs e);
    private void RemoveRequest(object sender, NavigationRequestedEventArgs request);
    private void PopRequest(object sender, NavigationRequestedEventArgs request);
    private void PopToRootRequest(object sender, NavigationRequestedEventArgs request);
    private void PushRequest(object sender, NavigationRequestedEventArgs request);
    private void InsertRequest(object sender, NavigationRequestedEventArgs request);
    private void UpdateHasBackButton();
    private void OnLayout();
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__17_0();
}
public class Xamarin.Forms.Platform.Tizen.ShellTabs : Toolbar {
    private ShellTabsType _type;
    public ShellTabsType Scrollable { get; public set; }
    public EvasObject NativeView { get; }
    public ShellTabs(EvasObject parent);
    public sealed virtual ShellTabsType get_Scrollable();
    public sealed virtual void set_Scrollable(ShellTabsType value);
    public sealed virtual EvasObject get_NativeView();
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.get_SelectedItem();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IShellTabs.add_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IShellTabs.remove_Selected(EventHandler`1<ToolbarItemEventArgs> value);
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.Append(string label, string icon);
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.Append(string label);
    private sealed virtual override ToolbarItem Xamarin.Forms.Platform.Tizen.IShellTabs.InsertBefore(ToolbarItem before, string label, string icon);
}
public enum Xamarin.Forms.Platform.Tizen.ShellTabsType : Enum {
    public int value__;
    public static ShellTabsType Fixed;
    public static ShellTabsType Scrollable;
}
public class Xamarin.Forms.Platform.Tizen.SimpleViewStack : Box {
    private EvasObject _lastTop;
    [CompilerGeneratedAttribute]
private List`1<EvasObject> <InternalStack>k__BackingField;
    private List`1<EvasObject> InternalStack { get; private set; }
    public IReadOnlyList`1<EvasObject> Stack { get; }
    public SimpleViewStack(EvasObject parent);
    [CompilerGeneratedAttribute]
private List`1<EvasObject> get_InternalStack();
    [CompilerGeneratedAttribute]
private void set_InternalStack(List`1<EvasObject> value);
    public IReadOnlyList`1<EvasObject> get_Stack();
    public void Push(EvasObject view);
    public void Pop();
    public void PopToRoot();
    public void Insert(EvasObject before, EvasObject view);
    public void Remove(EvasObject view);
    private void UpdateTopView();
    private void OnLayout();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.BoxViewRenderer : CanvasViewRenderer`2<BoxView, RoundRectangle> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void UpdateLayout();
    protected virtual void UpdateOpacity(bool initialize);
    private void UpdateRadius(bool init);
    private void UpdateColor();
}
public abstract class Xamarin.Forms.Platform.Tizen.SkiaSharp.CanvasViewRenderer`2 : ViewRenderer`2<TView, Canvas> {
    private Lazy`1<SKCanvasView> _backgroundCanvas;
    private Lazy`1<SKClipperView> _clipper;
    [CompilerGeneratedAttribute]
private EvasObject <RealNativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private CornerRadius <CornerRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private Geometry <ClippingGeometry>k__BackingField;
    public TNativeView RealControl { get; }
    public SKCanvasView BackgroundCanvas { get; }
    public SKClipperView ClipperCanvas { get; }
    public EvasObject RealNativeView { get; private set; }
    public CornerRadius CornerRadius { get; public set; }
    public Geometry ClippingGeometry { get; public set; }
    public TNativeView get_RealControl();
    public sealed virtual SKCanvasView get_BackgroundCanvas();
    public sealed virtual SKClipperView get_ClipperCanvas();
    [CompilerGeneratedAttribute]
public sealed virtual EvasObject get_RealNativeView();
    [CompilerGeneratedAttribute]
private void set_RealNativeView(EvasObject value);
    [CompilerGeneratedAttribute]
public CornerRadius get_CornerRadius();
    [CompilerGeneratedAttribute]
public void set_CornerRadius(CornerRadius value);
    [CompilerGeneratedAttribute]
public Geometry get_ClippingGeometry();
    [CompilerGeneratedAttribute]
public void set_ClippingGeometry(Geometry value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TView> e);
    protected virtual void UpdateLayout();
    protected void SetRealNativeControl(TNativeView control);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(object sender, LayoutEventArgs e);
    protected virtual void OnBackgroundPaint(object sender, SKPaintSurfaceEventArgs e);
    protected virtual void OnClipperPaint(object sender, SKPaintSurfaceEventArgs e);
    [CompilerGeneratedAttribute]
private SKCanvasView <OnElementChanged>b__20_0();
    [CompilerGeneratedAttribute]
private SKClipperView <OnElementChanged>b__20_1();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.SkiaSharp.ClipperExtension : object {
    [ExtensionAttribute]
public static void SetClipperCanvas(VisualElement target, SKClipperView clipper);
    [ExtensionAttribute]
public static void SetClipperCanvas(EvasObject target, SKClipperView clipper);
    internal static void evas_object_clip_set(IntPtr obj, IntPtr clip);
    internal static IntPtr elm_object_part_content_get(IntPtr obj, string part);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.EllipseRenderer : ShapeRenderer`2<Ellipse, EllipseView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Ellipse> e);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.EllipseView : ShapeView {
    private void UpdateShape();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.FrameRenderer : LayoutRenderer {
    private static float s_borderWidth;
    private static SKColor s_defaultColor;
    private SKClipperView _clipper;
    private Frame Element { get; }
    private static FrameRenderer();
    private Frame get_Element();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void OnBackgroundLayoutUpdated(object sender, LayoutEventArgs e);
    protected virtual void OnBackgroundPaint(object sender, SKPaintSurfaceEventArgs e);
    private void OnCliperPaint(object sender, SKPaintSurfaceEventArgs e);
    private void UpdateCornerRadius();
    private void UpdateBorderColor();
    private void UpdateHasShadow();
    private SKRoundRect CreateRoundRect(SKRect bounds);
}
public interface Xamarin.Forms.Platform.Tizen.SkiaSharp.IBackgroundCanvas {
    public SKCanvasView BackgroundCanvas { get; }
    public abstract virtual SKCanvasView get_BackgroundCanvas();
}
public interface Xamarin.Forms.Platform.Tizen.SkiaSharp.ICanvasRenderer {
    public EvasObject RealNativeView { get; }
    public abstract virtual EvasObject get_RealNativeView();
}
public interface Xamarin.Forms.Platform.Tizen.SkiaSharp.IClipperCanvas {
    public SKClipperView ClipperCanvas { get; }
    public abstract virtual SKClipperView get_ClipperCanvas();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.ImageRenderer : CanvasViewRenderer`2<Image, Image> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    protected virtual Size Measure(int availableWidth, int availableHeight);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.SkiaSharp.ImageRenderer/<UpdateSource>d__3")]
private void UpdateSource(bool initialize);
    private void UpdateFile(bool initialize);
    protected virtual void UpdateAfterLoading(bool initialize);
    private void UpdateAspect(bool initialize);
    private void UpdateIsOpaque(bool initialize);
    private void UpdateIsAnimationPlaying(bool initialize);
    private void UpdateBlendColor(bool initialize);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.LineRenderer : ShapeRenderer`2<Line, LineView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Line> e);
    private void UpdateX1();
    private void UpdateY1();
    private void UpdateX2();
    private void UpdateY2();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.LineView : ShapeView {
    private float _x1;
    private float _y1;
    private float _x2;
    private float _y2;
    private void UpdateShape();
    public void UpdateX1(float x1);
    public void UpdateY1(float y1);
    public void UpdateX2(float x2);
    public void UpdateY2(float y2);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.PathRenderer : ShapeRenderer`2<Path, PathView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Path> e);
    private void UpdateData();
    private void UpdateRenderTransform();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.PathView : ShapeView {
    public void UpdateData(SKPath path);
    public void UpdateTransform(SKMatrix transform);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.PolygonRenderer : ShapeRenderer`2<Polygon, PolygonView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polygon> e);
    private void UpdatePoints();
    private void UpdateFillRule();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.PolygonView : ShapeView {
    private PointCollection _points;
    private bool _fillMode;
    private void UpdateShape();
    public void UpdatePoints(PointCollection points);
    public void UpdateFillMode(bool fillMode);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.PolylineRenderer : ShapeRenderer`2<Polyline, PolylineView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polyline> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdatePoints();
    private void UpdateFillRule();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.PolylineView : ShapeView {
    private PointCollection _points;
    private bool _fillMode;
    private void UpdateShape();
    public void UpdatePoints(PointCollection points);
    public void UpdateFillMode(bool fillMode);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.RectangleRenderer : ShapeRenderer`2<Rectangle, RectView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Rectangle> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateRadiusX();
    private void UpdateRadiusY();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.RectView : ShapeView {
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    public float RadiusX { get; public set; }
    public float RadiusY { get; public set; }
    [CompilerGeneratedAttribute]
public void set_RadiusX(float value);
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public void set_RadiusY(float value);
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    private void UpdateShape();
    public void UpdateRadiusX(double radiusX);
    public void UpdateRadiusY(double radiusY);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.ShapeRenderer`2 : ViewRenderer`2<TShape, TNativeShape> {
    private void UpdateAspect();
    private void UpdateFill();
    private void UpdateStroke();
    private void UpdateStrokeThickness();
    private void UpdateStrokeDashArray();
    private void UpdateStrokeDashOffset();
    private void UpdateStrokeLineCap();
    private void UpdateStrokeLineJoin();
    private void UpdateStrokeMiterLimit();
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.ShapeView : Canvas {
    private SKCanvasView _skCanvasView;
    private SKPath _skPath;
    private SKPaint _skPaint;
    private SKRect _drawableBounds;
    private SKRect _pathFillBounds;
    private SKRect _pathStrokeBounds;
    private SKMatrix _transform;
    private Brush _stroke;
    private Brush _fill;
    private Stretch _stretch;
    private float _strokeWidth;
    private Single[] _strokeDash;
    private float _strokeDashOffset;
    public SKCanvasView SKCanvasView { get; }
    public SKCanvasView get_SKCanvasView();
    private void OnPaintSurface(object sender, SKPaintSurfaceEventArgs e);
    private void OnLayoutUpdated(object sender, LayoutEventArgs e);
    public void UpdateShape(SKPath sKPath);
    public void UpdateShapeTransform(SKMatrix matrix);
    public void UpdateAspect(Stretch stretch);
    public void UpdateFill(Brush fill);
    public void UpdateStroke(Brush stroke);
    public void UpdateStrokeThickness(double strokeWidth);
    public void UpdateStrokeDashArray(Single[] dash);
    public void UpdateStrokeDashOffset(float strokeDashOffset);
    public void UpdateStrokeDash();
    public void UpdateStrokeLineCap(SKStrokeCap strokeCap);
    public void UpdateStrokeLineJoin(SKStrokeJoin strokeJoin);
    public void UpdateStrokeMiterLimit(float strokeMiterLimit);
    protected void UpdatePathShape();
    private SKMatrix CreateMatrix();
    private void UpdatePathStrokeBounds();
    public sealed virtual Size Measure(int availableWidth, int availableHeight);
}
public class Xamarin.Forms.Platform.Tizen.SkiaSharp.SKClipperView : SKCanvasView {
    [CompilerGeneratedAttribute]
private bool <ClippingRequired>k__BackingField;
    public bool ClippingRequired { get; public set; }
    public SKClipperView(EvasObject parent);
    [CompilerGeneratedAttribute]
public bool get_ClippingRequired();
    [CompilerGeneratedAttribute]
public void set_ClippingRequired(bool value);
    public void Invalidate();
}
public class Xamarin.Forms.Platform.Tizen.SliderRenderer : ViewRenderer`2<Slider, Slider> {
    private Color _defaultMinColor;
    private Color _defaultMaxColor;
    private Color _defaultThumbColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    protected virtual Slider CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual Size Measure(int availableWidth, int availableHeight);
    private void OnValueChanged(object sender, EventArgs e);
    private void OnDragStarted(object sender, EventArgs e);
    private void OnDragStopped(object sender, EventArgs e);
    protected void UpdateValue();
    protected void UpdateMinimum();
    protected void UpdateMaximum();
    protected virtual void UpdateMinimumTrackColor();
    protected virtual void UpdateMaximumTrackColor();
    protected virtual void UpdateThumbColor();
    protected void UpdateSliderColors();
}
public static class Xamarin.Forms.Platform.Tizen.StaticRegistrar : object {
    [CompilerGeneratedAttribute]
private static StaticRegistrar`1<IRegisterable> <Registered>k__BackingField;
    public static StaticRegistrar`1<IRegisterable> Registered { get; internal set; }
    private static StaticRegistrar();
    [CompilerGeneratedAttribute]
public static StaticRegistrar`1<IRegisterable> get_Registered();
    [CompilerGeneratedAttribute]
internal static void set_Registered(StaticRegistrar`1<IRegisterable> value);
    public static void RegisterHandlers(Dictionary`2<Type, Func`1<IRegisterable>> customHandlers);
}
public class Xamarin.Forms.Platform.Tizen.StaticRegistrar`1 : object {
    private Dictionary`2<Type, Func`1<TRegistrable>> _handlers;
    public void Register(Type tview, Func`1<TRegistrable> renderer);
    public TOut GetHandler(Type type, Object[] args);
    public bool LookupHandler(Type viewType, Func`1& handler);
    public TOut GetHandlerForObject(object obj);
    public TOut GetHandlerForObject(object obj, Object[] args);
}
public class Xamarin.Forms.Platform.Tizen.StepperRenderer : ViewRenderer`2<Stepper, Spinner> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual Spinner CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnValueChanged(object sender, EventArgs e);
    protected void UpdateValue();
    protected void UpdateMinimum();
    protected void UpdateMaximum();
    private void UpdateStep();
    private int GetRequiredPrecision(double step);
}
public class Xamarin.Forms.Platform.Tizen.StreamImageSourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.StreamImageSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public class Xamarin.Forms.Platform.Tizen.StructuredItemsViewRenderer : ItemsViewRenderer`2<StructuredItemsView, CollectionView> {
    protected virtual CollectionView CreateNativeControl(EvasObject parent);
    protected virtual IItemsLayout GetItemsLayout();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<StructuredItemsView> e);
    protected virtual void OnItemSelectedFromUI(object sender, SelectedItemChangedEventArgs e);
    protected void UpdateSizingStrategy(bool initialize);
    private void UpdateSelectedItem(bool initialize);
    private void UpdateSelectionMode();
    private void UpdateHeaderFooter(bool init);
}
internal enum Xamarin.Forms.Platform.Tizen.SwipeDrawerState : Enum {
    public int value__;
    public static SwipeDrawerState Opend;
    public static SwipeDrawerState Closed;
}
public class Xamarin.Forms.Platform.Tizen.SwipeGestureHandler : GestureHandler {
    public GestureType Type { get; }
    public SwipeGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
public class Xamarin.Forms.Platform.Tizen.SwipeViewRenderer : LayoutRenderer {
    private static double SwipeItemWidth;
    private static double SwipeItemHeight;
    private static int MovementThreshold;
    private static UInt32 SwipeAnimationDuration;
    private GestureLayer _gestureLayer;
    private IVisualElementRenderer _itemsRenderer;
    [CompilerGeneratedAttribute]
private SwipeDirection <SwipeDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private SwipeDrawerState <DrawerState>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumSwipeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SwipeItems <CurrentItems>k__BackingField;
    private SwipeView SwipeView { get; }
    private bool HasLeftItems { get; }
    private bool HasRightItems { get; }
    private bool HasTopItems { get; }
    private bool HasBottomItems { get; }
    private SwipeDirection SwipeDirection { get; private set; }
    private SwipeDrawerState DrawerState { get; private set; }
    private int MaximumSwipeSize { get; private set; }
    private bool IsHorizontalSwipe { get; }
    private bool IsNegativeDirection { get; }
    private SwipeItems CurrentItems { get; private set; }
    private static SwipeViewRenderer();
    private SwipeView get_SwipeView();
    private bool get_HasLeftItems();
    private bool get_HasRightItems();
    private bool get_HasTopItems();
    private bool get_HasBottomItems();
    [CompilerGeneratedAttribute]
private SwipeDirection get_SwipeDirection();
    [CompilerGeneratedAttribute]
private void set_SwipeDirection(SwipeDirection value);
    [CompilerGeneratedAttribute]
private SwipeDrawerState get_DrawerState();
    [CompilerGeneratedAttribute]
private void set_DrawerState(SwipeDrawerState value);
    [CompilerGeneratedAttribute]
private int get_MaximumSwipeSize();
    [CompilerGeneratedAttribute]
private void set_MaximumSwipeSize(int value);
    private bool get_IsHorizontalSwipe();
    private bool get_IsNegativeDirection();
    [CompilerGeneratedAttribute]
private SwipeItems get_CurrentItems();
    [CompilerGeneratedAttribute]
private void set_CurrentItems(SwipeItems value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void Dispose(bool disposing);
    private void Initialize();
    private void OnMoved(MomentumData moment);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.SwipeViewRenderer/<OnEnd>d__40")]
private void OnEnd(MomentumData moment);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.SwipeViewRenderer/<SwipeOpenAsync>d__41")]
private Task SwipeOpenAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.SwipeViewRenderer/<SwipeCloseAsync>d__42")]
private Task SwipeCloseAsync();
    private bool ShouldBeOpen(MomentumData data);
    private int GetSwipeOffset(MomentumData data);
    private SwipeItems GetSwipedItems();
    private void UpdateItems();
    private static Task AnimatedMove(IAnimatable animatable, EvasObject target, Rect dest, Easing easing, UInt32 length);
    private static View CreateItemView(SwipeItemView item);
    private static View CreateItemView(SwipeItem item, bool horizontal);
    private static void ExecuteItems(SwipeItems items);
    [CompilerGeneratedAttribute]
private void <Initialize>b__38_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <UpdateItems>b__46_1();
}
public class Xamarin.Forms.Platform.Tizen.SwitchCellRenderer : CellRenderer {
    private Dictionary`2<EvasObject, VisualElement> _cacheCandidate;
    [CompilerGeneratedAttribute]
private string <MainPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchPart>k__BackingField;
    protected string MainPart { get; protected set; }
    protected string SwitchPart { get; protected set; }
    protected SwitchCellRenderer(string style);
    [CompilerGeneratedAttribute]
protected string get_MainPart();
    [CompilerGeneratedAttribute]
protected void set_MainPart(string value);
    [CompilerGeneratedAttribute]
protected string get_SwitchPart();
    [CompilerGeneratedAttribute]
protected void set_SwitchPart(string value);
    protected virtual Span OnGetText(Cell cell, string part);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
    [CompilerGeneratedAttribute]
private void <OnGetContent>b__12_0(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.SwitchRenderer : ViewRenderer`2<Switch, Check> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateThemeStyle();
    protected virtual void UpdateColor();
    protected void UpdateOnColor(bool initialize);
    private void OnStateChanged(object sender, EventArgs e);
    private void HandleToggled();
}
public class Xamarin.Forms.Platform.Tizen.TabbedPageRenderer : VisualElementRenderer`1<TabbedPage> {
    private Box _outterLayout;
    private Box _innerBox;
    private Scroller _scroller;
    private Toolbar _toolbar;
    private Dictionary`2<ToolbarItem, Page> _itemToItemPage;
    private List`1<ToolbarItem> _toolbarItemList;
    private bool _isResettingToolbarItems;
    private bool _isInitialized;
    private bool _isUpdateByToolbar;
    private bool _isUpdateByScroller;
    private bool _isUpdateByCurrentPage;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TabbedPage> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementReady();
    protected virtual void UpdateThemeStyle();
    private void OnInnerLayoutUpdate();
    private void OnItemPageScrolled(object sender, EventArgs e);
    private void UpdateBarBackgroundColor(bool initialize);
    private void UpdateBarTextColor(bool initialize);
    private void UpdateSelectedTabColor(bool initialize);
    private void UpdateUnselectedTabColor(bool initialize);
    private void UpdateTitle();
    private void UpdateTitle(Page page);
    private void OnPageTitleChanged(object sender, PropertyChangedEventArgs e);
    private void OnElementPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddToolbarItems(NotifyCollectionChangedEventArgs e);
    private ToolbarItem AddToolbarItem(Page newItem, int index);
    private void RemoveToolbarItems(NotifyCollectionChangedEventArgs e);
    private void RemoveToolbarItem(Page oldItem);
    private void ResetToolbarItems();
    private void FillToolbarAndContents();
    private void OnToolbarItemSelected(object sender, ToolbarItemEventArgs e);
    private void OnCurrentPageChanged();
    private void ApplyBarItemColors(ToolbarItem item, BarItemColorType type, Color color);
    private void ClearBarItemColors(ToolbarItem item, BarItemColorType type);
}
public class Xamarin.Forms.Platform.Tizen.TableViewRenderer : ViewRenderer`2<TableView, ListView> {
    internal static BindableProperty PresentationProperty;
    private static TableViewRenderer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    protected virtual ListView CreateNativeControl(EvasObject parent);
    protected virtual void Dispose(bool disposing);
    private void OnSelected(object sender, GenListItemEventArgs e);
    private void OnRootPropertyChanged(object sender, EventArgs e);
    private void UpdateHasUnevenRows();
    private void UpdateRowHeight();
}
public class Xamarin.Forms.Platform.Tizen.TapGestureHandler : GestureHandler {
    public GestureType Type { get; }
    public TapGestureHandler(IGestureRecognizer recognizer);
    public virtual GestureType get_Type();
    protected virtual void OnStarted(View sender, object data);
    protected virtual void OnMoved(View sender, object data);
    protected virtual void OnCompleted(View sender, object data);
    protected virtual void OnCanceled(View sender, object data);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.TextAlignmentExtensions : object {
    [ExtensionAttribute]
public static TextAlignment ToNative(TextAlignment alignment);
    [ExtensionAttribute]
public static double ToNativeDouble(TextAlignment alignment);
}
public class Xamarin.Forms.Platform.Tizen.TextCellRenderer : CellRenderer {
    private bool _groupMode;
    [CompilerGeneratedAttribute]
private string <MainPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailPart>k__BackingField;
    protected string MainPart { get; protected set; }
    protected string DetailPart { get; protected set; }
    protected TextCellRenderer(string style);
    [CompilerGeneratedAttribute]
protected string get_MainPart();
    [CompilerGeneratedAttribute]
protected void set_MainPart(string value);
    [CompilerGeneratedAttribute]
protected string get_DetailPart();
    [CompilerGeneratedAttribute]
protected void set_DetailPart(string value);
    public virtual void SetGroupMode(bool enable);
    protected virtual Span OnGetText(Cell cell, string part);
    protected virtual Span OnMainText(TextCell cell);
    protected virtual Span OnDetailText(TextCell cell);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
}
public class Xamarin.Forms.Platform.Tizen.ThemeConstants : object {
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.ThemeManager : object {
    private static double s_shellNavBarDefaultHeight;
    private static double s_shellNavBarDefaultMenuSize;
    private static double s_shellNavBarDefaultMargin;
    private static double s_shellNavBarTitleFontSize;
    private static double s_navigationViewFlyoutItemHeight;
    private static double s_navigationViewFlyoutItemWidth;
    private static double s_navigationViewFlyoutIconColumnSize;
    private static double s_navigationViewFlyoutIconSize;
    private static double s_navigationViewFlyoutMargin;
    private static double s_navigationViewFlyoutItemFontSize;
    private static double s_navigationDrawerRatio;
    private static double s_shellMoreToolBarIconPadding;
    private static double s_shellMoreToolBarIconSize;
    private static ThemeManager();
    [ExtensionAttribute]
public static EdjeTextPartObject GetContentPartEdjeObject(Layout layout);
    [ExtensionAttribute]
public static EdjeTextPartObject GetTextPartEdjeObject(Layout layout);
    [ExtensionAttribute]
public static bool SetTextPart(Layout layout, string text);
    [ExtensionAttribute]
public static bool SetContentPart(Layout layout, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static bool SetBackgroundPart(Layout layout, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static bool SetOverlayPart(Layout layout, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static bool SetPlaceHolderTextPart(Entry entry, string text);
    [ExtensionAttribute]
public static void SetVerticalTextAlignment(Entry entry, double valign);
    [ExtensionAttribute]
public static void SetVerticalPlaceHolderTextAlignment(Entry entry, double valign);
    [ExtensionAttribute]
public static Size GetTextBlockFormattedSize(Entry entry);
    [ExtensionAttribute]
public static Size GetTextBlockNativeSize(Entry entry);
    [ExtensionAttribute]
public static Size GetPlaceHolderTextBlockFormattedSize(Entry entry);
    [ExtensionAttribute]
public static Size GetPlaceHolderTextBlockNativeSize(Entry entry);
    [ExtensionAttribute]
public static void SetVerticalTextAlignment(Label label, double valign);
    [ExtensionAttribute]
public static double GetVerticalTextAlignment(Label label);
    [ExtensionAttribute]
public static Size GetTextBlockFormattedSize(Label label);
    [ExtensionAttribute]
public static Size GetTextBlockNativeSize(Button button);
    [ExtensionAttribute]
public static void SetTextBlockStyle(Button button, string style);
    [ExtensionAttribute]
public static void SendTextVisibleSignal(Button button, bool isVisible);
    [ExtensionAttribute]
public static Button SetDefaultStyle(Button button);
    [ExtensionAttribute]
public static Button SetBottomStyle(Button button);
    [ExtensionAttribute]
public static Button SetPopupStyle(Button button);
    [ExtensionAttribute]
public static Button SetNavigationTitleRightStyle(Button button);
    [ExtensionAttribute]
public static Button SetNavigationTitleLeftStyle(Button button);
    [ExtensionAttribute]
public static Button SetNavigationBackStyle(Button button);
    [ExtensionAttribute]
public static Button SetNavigationDrawerStyle(Button button);
    [ExtensionAttribute]
public static Button SetTransparentStyle(Button button);
    [ExtensionAttribute]
public static Button SetWatchPopupRightStyle(Button button);
    [ExtensionAttribute]
public static Button SetWatchPopupLeftStyle(Button button);
    [ExtensionAttribute]
public static Button SetWatchTextStyle(Button button);
    [ExtensionAttribute]
public static bool SetIconPart(Button button, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static Button SetEditFieldClearStyle(Button button);
    [ExtensionAttribute]
public static Color GetIconColor(Button button);
    [ExtensionAttribute]
public static void SetIconColor(Button button, Color color);
    [ExtensionAttribute]
public static void SetEffectColor(Button button, Color color);
    [ExtensionAttribute]
public static Popup SetWatchCircleStyle(Popup popup);
    [ExtensionAttribute]
public static void SetTitleColor(Popup popup, Color color);
    [ExtensionAttribute]
public static void SetTitleBackgroundColor(Popup popup, Color color);
    [ExtensionAttribute]
public static void SetContentBackgroundColor(Popup popup, Color color);
    [ExtensionAttribute]
public static bool SetTitleTextPart(Popup popup, string title);
    [ExtensionAttribute]
public static bool SetButton1Part(Popup popup, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static bool SetButton2Part(Popup popup, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static bool SetButton3Part(Popup popup, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static ProgressBar SetSmallStyle(ProgressBar progressBar);
    [ExtensionAttribute]
public static ProgressBar SetLargeStyle(ProgressBar progressBar);
    [ExtensionAttribute]
public static void SetOnColors(Check check, Color color);
    [ExtensionAttribute]
public static void DeleteOnColors(Check check);
    [ExtensionAttribute]
public static String[] GetColorParts(Check check);
    [ExtensionAttribute]
public static String[] GetColorEdjeParts(Check check);
    [ExtensionAttribute]
public static void SetTitle(NaviItem item, string text);
    [ExtensionAttribute]
public static void SetBackButton(NaviItem item, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static void SetLeftToolbarButton(NaviItem item, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static void SetRightToolbarButton(NaviItem item, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static void SetNavigationBar(NaviItem item, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static NaviItem SetNavigationBarStyle(NaviItem item);
    [ExtensionAttribute]
public static NaviItem SetTabBarStyle(NaviItem item);
    [ExtensionAttribute]
public static Toolbar SetNavigationBarStyle(Toolbar toolbar);
    [ExtensionAttribute]
public static Toolbar SetTVTabBarWithTitleStyle(Toolbar toolbar);
    [ExtensionAttribute]
public static void SetIconPart(ToolbarItem item, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static void SetBackgroundColor(ToolbarItem item, Color color);
    [ExtensionAttribute]
public static void SetUnderlineColor(ToolbarItem item, Color color);
    [ExtensionAttribute]
public static void SetTextColor(ToolbarItem item, Color color);
    [ExtensionAttribute]
public static void SetSelectedTabColor(ToolbarItem item, Color color);
    [ExtensionAttribute]
public static void SetUnselectedTabColor(ToolbarItem item, Color color);
    [ExtensionAttribute]
public static void DeleteBackgroundColor(ToolbarItem item);
    [ExtensionAttribute]
public static void DeleteUnderlineColor(ToolbarItem item);
    [ExtensionAttribute]
public static void DeleteTextColor(ToolbarItem item);
    [ExtensionAttribute]
public static void DeleteSelectedTabColor(ToolbarItem item);
    [ExtensionAttribute]
public static void DeleteUnselectedTabColor(ToolbarItem item);
    [ExtensionAttribute]
public static bool SetOverlayPart(Background bg, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static bool SetLeftPart(Panes panes, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static bool SetRightPart(Panes panes, EvasObject content, bool preserveOldContent);
    [ExtensionAttribute]
public static void SendSignalToItem(Cell cell, GenListItem item);
    public static string GetTextCellRendererStyle();
    public static string GetTextCellGroupModeStyle(bool isGroupMode);
    [ExtensionAttribute]
public static string GetMainPart(CellRenderer cell);
    [ExtensionAttribute]
public static string GetDetailPart(TextCellRenderer textCell);
    public static string GetSwitchCellRendererStyle();
    [ExtensionAttribute]
public static string GetSwitchPart(SwitchCellRenderer switchCell);
    [ExtensionAttribute]
public static int GetDefaultHeightPixel(EntryCellRenderer entryCell);
    public static string GetImageCellRendererStyle();
    [ExtensionAttribute]
public static string GetImagePart(ImageCellRenderer imageCell);
    [ExtensionAttribute]
public static int GetDefaultHeightPixel(ImageCellRenderer imageCell);
    public static string GetViewCellRendererStyle();
    [ExtensionAttribute]
public static string GetMainContentPart(ViewCellRenderer viewCell);
    [ExtensionAttribute]
public static GenList SetSolidStyle(GenList list);
    [ExtensionAttribute]
public static void SetBottomlineColor(GenListItem item, Color color);
    [ExtensionAttribute]
public static void SetBackgroundColor(GenListItem item, Color color);
    [ExtensionAttribute]
public static void DeleteBottomlineColor(GenListItem item);
    [ExtensionAttribute]
public static void DeleteBackgroundColor(GenListItem item);
    [ExtensionAttribute]
public static Size GetTextBlockFormattedSize(Radio radio);
    [ExtensionAttribute]
public static void SetTextBlockStyle(Radio radio, string style);
    [ExtensionAttribute]
public static void SendTextVisibleSignal(Radio radio, bool isVisible);
    [ExtensionAttribute]
public static Color GetBarColor(Slider slider);
    [ExtensionAttribute]
public static void SetBarColor(Slider slider, Color color);
    [ExtensionAttribute]
public static Color GetBackgroundColor(Slider slider);
    [ExtensionAttribute]
public static void SetBackgroundColor(Slider slider, Color color);
    [ExtensionAttribute]
public static Color GetHandlerColor(Slider slider);
    [ExtensionAttribute]
public static void SetHandlerColor(Slider slider, Color color);
    [ExtensionAttribute]
public static Index SetStyledIndex(Index index);
    [ExtensionAttribute]
public static void SetIndexItemStyle(IndexItem item, int itemCount, int offset, int evenMiddleItem, int oddMiddleItem);
    [ExtensionAttribute]
public static bool SetTitleTextPart(CircleSpinner spinner, string title);
    public static double GetBaseScale(string deviceType);
    [ExtensionAttribute]
public static double GetDefaultHeight(ShellNavBar navBar);
    [ExtensionAttribute]
public static double GetDefaultMenuSize(ShellNavBar navBar);
    [ExtensionAttribute]
public static double GetDefaultMargin(ShellNavBar navBar);
    [ExtensionAttribute]
public static double GetDefaultTitleFontSize(ShellNavBar navBar);
    [ExtensionAttribute]
public static double GetFlyoutItemHeight(INavigationView nav);
    [ExtensionAttribute]
public static double GetFlyoutItemWidth(INavigationView nav);
    [ExtensionAttribute]
public static double GetFlyoutIconColumnSize(INavigationView nav);
    [ExtensionAttribute]
public static double GetFlyoutIconSize(INavigationView nav);
    [ExtensionAttribute]
public static double GetFlyoutMargin(INavigationView nav);
    [ExtensionAttribute]
public static double GetFlyoutItemFontSize(INavigationView nav);
    [ExtensionAttribute]
public static Color GetTvFlyoutItemDefaultColor(INavigationView nav);
    [ExtensionAttribute]
public static Color GetTvFlyoutItemFocusedColor(INavigationView nav);
    [ExtensionAttribute]
public static Color GetTvFlyoutItemTextDefaultColor(INavigationView nav);
    [ExtensionAttribute]
public static Color GetTvFlyoutItemTextFocusedColor(INavigationView nav);
    [ExtensionAttribute]
public static double GetFlyoutRatio(INavigationDrawer drawer, int width, int height);
    [ExtensionAttribute]
public static double GetFlyoutCollapseRatio(INavigationDrawer drawer);
    [ExtensionAttribute]
public static double GetIconPadding(ShellMoreToolbar self);
    [ExtensionAttribute]
public static double GetIconSize(ShellMoreToolbar self);
    public static double GetPhysicalPortraitSizeInDP();
    private static double CalculateDoubleScaledSizeInLargeScreen(double size);
}
public class Xamarin.Forms.Platform.Tizen.TimePickerRenderer : ViewRenderer`2<TimePicker, Entry> {
    private static string DialogTitle;
    private static string s_defaultFormat;
    private Lazy`1<IDateTimeDialog> _lazyDialog;
    protected TimeSpan Time;
    private static TimePickerRenderer();
    protected virtual IDateTimeDialog CreateDialog();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    protected virtual Entry CreateNativeControl();
    protected virtual void Dispose(bool disposing);
    protected virtual Size MinimumSize();
    private void OnTextBlockFocused(object o, EventArgs e);
    private void OnDialogTimeChanged(object sender, DateChangedEventArgs dcea);
    private void UpdateFormat();
    protected virtual void UpdateTextColor();
    private void UpdateTime();
    private void UpdateFontSize();
    private void UpdateFontFamily();
    private void UpdateFontAttributes();
    protected virtual void OnPickerOpened(object sender, EventArgs args);
    protected virtual void OnPickerClosed(object sender, EventArgs args);
    protected virtual void UpdateTimeAndFormat();
    [CompilerGeneratedAttribute]
private IDateTimeDialog <OnElementChanged>b__6_0();
}
internal class Xamarin.Forms.Platform.Tizen.TizenIsolatedStorageFile : object {
    private string _rootPath;
    public void CreateDirectory(string path);
    public sealed virtual Task CreateDirectoryAsync(string path);
    public void MoveFile(string source, string dest);
    public void DeleteFile(string path);
    public bool DirectoryExists(string path);
    public sealed virtual Task`1<bool> GetDirectoryExistsAsync(string path);
    public bool FileExists(string path);
    public sealed virtual Task`1<bool> GetFileExistsAsync(string path);
    public DateTimeOffset GetLastWriteTime(string path);
    public sealed virtual Task`1<DateTimeOffset> GetLastWriteTimeAsync(string path);
    public Stream OpenFile(string path, FileMode mode);
    public Stream OpenFile(string path, FileMode mode, FileAccess access);
    public Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access);
    public sealed virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access, FileShare share);
}
internal class Xamarin.Forms.Platform.Tizen.TizenPlatformServices : object {
    private static SynchronizationContext s_context;
    public bool IsInvokeRequired { get; }
    public string RuntimePlatform { get; }
    public OSAppTheme RequestedTheme { get; }
    public sealed virtual double GetNamedSize(NamedSize size, Type targetElementType, bool useOldSizes);
    public sealed virtual Color GetNamedColor(string name);
    public sealed virtual void OpenUriAction(Uri uri);
    public sealed virtual void BeginInvokeOnMainThread(Action action);
    public sealed virtual Ticker CreateTicker();
    public sealed virtual void StartTimer(TimeSpan interval, Func`1<bool> callback);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.TizenPlatformServices/<GetStreamAsync>d__9")]
public sealed virtual Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken);
    public sealed virtual Assembly[] GetAssemblies();
    public sealed virtual IIsolatedStorageFile GetUserStoreForApplication();
    public sealed virtual string GetHash(string input);
    private sealed virtual override string Xamarin.Forms.Internals.IPlatformServices.GetMD5Hash(string input);
    public sealed virtual void QuitApplication();
    public sealed virtual bool get_IsInvokeRequired();
    public sealed virtual string get_RuntimePlatform();
    public sealed virtual SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    public sealed virtual OSAppTheme get_RequestedTheme();
    private static MD5 CreateChecksum();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.Tizen.TransformExtensions : object {
    [ExtensionAttribute]
public static SKMatrix ToSkia(Transform transform);
}
public class Xamarin.Forms.Platform.Tizen.TV.FlyoutItemTemplateAdaptor : ItemTemplateAdaptor {
    [CompilerGeneratedAttribute]
private bool <HasHeader>k__BackingField;
    public bool HasHeader { get; public set; }
    protected bool IsSelectable { get; }
    public FlyoutItemTemplateAdaptor(Element itemsView, IEnumerable items, DataTemplate template, bool hasHeader);
    [CompilerGeneratedAttribute]
public bool get_HasHeader();
    [CompilerGeneratedAttribute]
public void set_HasHeader(bool value);
    protected virtual bool get_IsSelectable();
    protected virtual View CreateHeaderView();
}
public class Xamarin.Forms.Platform.Tizen.TV.FlyoutItemTemplateSelector : DataTemplateSelector {
    [CompilerGeneratedAttribute]
private DataTemplate <DefaultTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <FlyoutItemTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <MenuItemTemplate>k__BackingField;
    public DataTemplate DefaultTemplate { get; private set; }
    public DataTemplate FlyoutItemTemplate { get; private set; }
    public DataTemplate MenuItemTemplate { get; private set; }
    public FlyoutItemTemplateSelector(INavigationView nv);
    public FlyoutItemTemplateSelector(INavigationView nv, DataTemplate flyoutItemTemplate, DataTemplate menuItemTemplate);
    [CompilerGeneratedAttribute]
public DataTemplate get_DefaultTemplate();
    [CompilerGeneratedAttribute]
private void set_DefaultTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
public DataTemplate get_FlyoutItemTemplate();
    [CompilerGeneratedAttribute]
private void set_FlyoutItemTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
public DataTemplate get_MenuItemTemplate();
    [CompilerGeneratedAttribute]
private void set_MenuItemTemplate(DataTemplate value);
    protected virtual DataTemplate OnSelectTemplate(object item, BindableObject container);
}
public class Xamarin.Forms.Platform.Tizen.TV.TVNavigationDrawer : Box {
    private Box _drawerBox;
    private Box _mainBox;
    private EvasObject _main;
    private TVNavigationView _drawer;
    private Button _focusControlArea;
    private FlyoutBehavior _behavior;
    private bool _isOpen;
    private double _openRatio;
    [CompilerGeneratedAttribute]
private EventHandler Toggled;
    public EvasObject TargetView { get; }
    public EvasObject NavigationView { get; public set; }
    public EvasObject Main { get; public set; }
    public bool IsOpen { get; public set; }
    public TVNavigationDrawer(EvasObject parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Toggled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Toggled(EventHandler value);
    public sealed virtual EvasObject get_TargetView();
    public sealed virtual EvasObject get_NavigationView();
    public sealed virtual void set_NavigationView(EvasObject value);
    public sealed virtual EvasObject get_Main();
    public sealed virtual void set_Main(EvasObject value);
    public sealed virtual bool get_IsOpen();
    public sealed virtual void set_IsOpen(bool value);
    private void Initialize(EvasObject parent);
    private void UpdateNavigationView(EvasObject navigationView);
    private void OnNavigationViewItemFocused(object sender, EventArgs args);
    private void OnNavigationViewItemUnfocused(object sender, EventArgs args);
    private void UpdateMain(EvasObject main);
    private void UpdateBehavior(FlyoutBehavior behavior);
    private void OnMainBoxLayout();
    private void OnLayout();
    private void UpdateOpenState(bool isOpen);
    private void UpdateFocusPolicy();
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    private sealed virtual override void Xamarin.Forms.IAnimatable.BatchBegin();
    private sealed virtual override void Xamarin.Forms.IAnimatable.BatchCommit();
    [CompilerGeneratedAttribute]
private void <Initialize>b__23_0(object s, EvasKeyEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__23_1(object s, EvasKeyEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__23_2(object s, EvasKeyEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.TV.TVShellItemRenderer : ShellItemRenderer {
    public TVShellItemRenderer(ShellItem item);
    protected virtual ShellSectionStack CreateShellSectionStack(ShellSection section);
    protected virtual void UpdateTabsItems();
}
public class Xamarin.Forms.Platform.Tizen.TV.TVShellRenderer : ShellRenderer {
    protected virtual INavigationDrawer CreateNavigationDrawer();
    protected virtual ShellItemRenderer CreateShellItemRenderer(ShellItem item);
    protected virtual INavigationView CreateNavigationView();
    protected virtual void UpdateFlyoutIsPresented();
}
public class Xamarin.Forms.Platform.Tizen.TV.TVShellSectionStack : ShellSectionStack {
    public bool NavBarIsVisible { get; }
    public TVShellSectionStack(ShellSection section);
    public virtual bool get_NavBarIsVisible();
    protected virtual IShellSectionRenderer CreateShellSectionRenderer(ShellSection section);
}
public class Xamarin.Forms.Platform.Tizen.TVNavigationView : Background {
    private static Color s_defaultBackgroundColor;
    private Box _mainLayout;
    private Image _backgroundImage;
    private Aspect _bgImageAspect;
    private ImageSource _bgImageSource;
    private View _header;
    private EvasObject _nativeHeader;
    private CollectionView _list;
    private Color _backgroundColor;
    private List`1<List`1<Element>> _cachedGroups;
    private IEnumerable`1<Element> _cacheditems;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> SelectedItemChanged;
    [CompilerGeneratedAttribute]
private EventHandler ContentFocused;
    [CompilerGeneratedAttribute]
private EventHandler ContentUnfocused;
    [CompilerGeneratedAttribute]
private Element <Element>k__BackingField;
    private FlyoutHeaderBehavior _headerBehavior;
    public EvasObject NativeView { get; }
    public Element Element { get; }
    public View Header { get; public set; }
    public FlyoutHeaderBehavior HeaderBehavior { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Aspect BackgroundImageAspect { get; public set; }
    public ImageSource BackgroundImageSource { get; public set; }
    private bool HeaderOnMenu { get; }
    public TVNavigationView(EvasObject parent);
    public TVNavigationView(EvasObject parent, Element element);
    private static TVNavigationView();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ContentFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentFocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ContentUnfocused(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentUnfocused(EventHandler value);
    public sealed virtual EvasObject get_NativeView();
    [CompilerGeneratedAttribute]
public Element get_Element();
    public sealed virtual View get_Header();
    public sealed virtual void set_Header(View value);
    public sealed virtual FlyoutHeaderBehavior get_HeaderBehavior();
    public sealed virtual void set_HeaderBehavior(FlyoutHeaderBehavior value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public sealed virtual Aspect get_BackgroundImageAspect();
    public sealed virtual void set_BackgroundImageAspect(Aspect value);
    public sealed virtual ImageSource get_BackgroundImageSource();
    public sealed virtual void set_BackgroundImageSource(ImageSource value);
    private bool get_HeaderOnMenu();
    public sealed virtual void BuildMenu(List`1<List`1<Element>> flyoutGroups);
    public void BuildMenu(IEnumerable`1<Element> items, DataTemplate itemTemplate);
    public int GetDrawerWidth();
    private void OnItemSelected(object sender, SelectedItemChangedEventArgs e);
    private void InitializeComponent(EvasObject parent);
    private void CreateMenu();
    private void OnListFocused(object sender, EventArgs args);
    private void OnListUnfocused(object sender, EventArgs args);
    private bool IsMenuItemChanged(List`1<List`1<Element>> flyoutGroups);
    private void UpdateBackgroundImage();
    private void UpdateHeader(View header);
    private void UpdateHeaderBehavior();
    private void UpdateHeaderOnMenu();
    private void ResetHeader();
    private void OnHeaderSizeChanged(object sender, EventArgs e);
    private void OnLayout();
    [CompilerGeneratedAttribute]
private void <UpdateBackgroundImage>b__54_0();
}
public class Xamarin.Forms.Platform.Tizen.TVShellSectionRenderer : object {
    private Box _mainLayout;
    private Box _contentArea;
    private EvasObject _currentContent;
    private TVNavigationView _navigationView;
    private Dictionary`2<ShellContent, EvasObject> _contentCache;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    private bool _drawerIsVisible { get; }
    public ShellSection ShellSection { get; }
    public EvasObject NativeView { get; }
    public TVShellSectionRenderer(ShellSection section);
    private bool get__drawerIsVisible();
    [CompilerGeneratedAttribute]
public ShellSection get_ShellSection();
    public sealed virtual EvasObject get_NativeView();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void OnNavigationViewSelectedItemChanged(object sender, SelectedItemChangedEventArgs e);
    private void OnSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateSectionItems();
    private void UpdateCurrentItem(ShellContent content);
    private EvasObject CreateShellContent(ShellContent content);
    private void OnLayout();
    private void OnShellSectionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.UriImageSourceHandler : object {
    public sealed virtual Task`1<bool> LoadImageAsync(Image image, ImageSource imageSource, CancellationToken cancelationToken);
}
public class Xamarin.Forms.Platform.Tizen.ViewCellRenderer : CellRenderer {
    private Dictionary`2<EvasObject, ViewCell> _cacheCandidate;
    [CompilerGeneratedAttribute]
private string <MainContentPart>k__BackingField;
    protected string MainContentPart { get; protected set; }
    [CompilerGeneratedAttribute]
protected string get_MainContentPart();
    [CompilerGeneratedAttribute]
protected void set_MainContentPart(string value);
    protected virtual EvasObject OnReusableContent(Cell cell, string part, EvasObject old);
    protected virtual EvasObject OnGetContent(Cell cell, string part);
    protected virtual bool OnCellPropertyChanged(Cell cell, string property, Dictionary`2<string, EvasObject> realizedView);
    private EvasObject CreateReusableContent(ViewCell viewCell);
    private void UpdatePropagateEvent(View view);
    [CompilerGeneratedAttribute]
private void <CreateReusableContent>b__9_0(object sender, EventArgs e);
}
public abstract class Xamarin.Forms.Platform.Tizen.ViewRenderer`2 : VisualElementRenderer`1<TView> {
    [CompilerGeneratedAttribute]
private GestureDetector <GestureDetector>k__BackingField;
    private ObservableCollection`1<IGestureRecognizer> GestureRecognizers { get; }
    internal GestureDetector GestureDetector { get; private set; }
    public TNativeView Control { get; }
    private ObservableCollection`1<IGestureRecognizer> get_GestureRecognizers();
    [CompilerGeneratedAttribute]
internal GestureDetector get_GestureDetector();
    [CompilerGeneratedAttribute]
private void set_GestureDetector(GestureDetector value);
    public TNativeView get_Control();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TView> e);
    protected void SetNativeControl(TNativeView control);
    protected virtual void UpdateIsEnabled(bool initialize);
    private void OnGestureRecognizerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnFocused(object sender, EventArgs e);
    protected virtual void OnUnfocused(object sender, EventArgs e);
    protected virtual void UpdateRotaryInteraction(bool enable);
}
public class Xamarin.Forms.Platform.Tizen.VisualElementChangedEventArgs : ElementChangedEventArgs`1<VisualElement> {
    public VisualElementChangedEventArgs(VisualElement oldElement, VisualElement newElement);
}
public abstract class Xamarin.Forms.Platform.Tizen.VisualElementRenderer`1 : object {
    private List`1<EventHandler`1<VisualElementChangedEventArgs>> _elementChangedHandlers;
    private Dictionary`2<string, Action`1<bool>> _propertyHandlersWithInit;
    private Dictionary`2<string, Action> _propertyHandlers;
    private HashSet`1<string> _batchedProperties;
    private VisualElementRendererFlags _flags;
    private bool _movedCallbackEnabled;
    private string _defaultAccessibilityName;
    private string _defaultAccessibilityDescription;
    private Nullable`1<bool> _defaultIsAccessibilityElement;
    private Lazy`1<CustomFocusManager> _customFocusManager;
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EvasObject <NativeView>k__BackingField;
    public TElement Element { get; private set; }
    private VisualElement Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element { get; }
    public EvasObject NativeView { get; private set; }
    protected bool IsDisposed { get; }
    protected virtual override void Finalize();
    private void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public TElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TElement value);
    private sealed virtual override VisualElement Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual EvasObject get_NativeView();
    [CompilerGeneratedAttribute]
private void set_NativeView(EvasObject value);
    protected bool get_IsDisposed();
    public sealed virtual void Dispose();
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public void SetElement(TElement newElement);
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout();
    private sealed virtual override void Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(VisualElement element);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    protected void RegisterEffect(Effect effect);
    protected virtual void UpdateLayout();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected void SetNativeView(EvasObject control);
    protected virtual void SetAccessibilityName(bool initialize);
    protected virtual void SetAccessibilityDescription(bool initialize);
    protected virtual void SetIsAccessibilityElement(bool initialize);
    protected virtual void SetLabeledBy(bool initialize);
    protected Widget FocusSearch(bool forwardDirection);
    internal virtual void SendVisualElementInitialized(VisualElement element, EvasObject nativeView);
    private void UpdateNativeGeometry();
    private void NativeViewDeleted(object sender, EventArgs e);
    private void OnBatchCommitted(object sender, EventArg`1<VisualElement> e);
    protected void RegisterPropertyHandler(BindableProperty property, Action`1<bool> handler);
    protected void RegisterPropertyHandler(string name, Action`1<bool> handler);
    protected void RegisterPropertyHandler(BindableProperty property, Action handler);
    protected void RegisterPropertyHandler(string name, Action handler);
    protected void UpdateAllProperties(bool initialization);
    protected virtual void OnElementReady();
    protected virtual Size MinimumSize();
    protected virtual Size Measure(int availableWidth, int availableHeight);
    protected virtual void UpdateBackgroundColor(bool initialize);
    protected virtual void UpdateBackground(bool initialize);
    protected virtual void UpdateClip(bool initialize);
    protected virtual void UpdateOpacity(bool initialize);
    public virtual Rect GetNativeContentGeometry();
    private static double ComputeAbsoluteX(VisualElement e);
    private static double ComputeAbsoluteY(VisualElement e);
    private static Point ComputeAbsolutePoint(VisualElement e);
    protected virtual void OnFocused(object sender, EventArgs e);
    protected virtual void OnUnfocused(object sender, EventArgs e);
    protected virtual void AddChild(Element child);
    protected virtual void AddHeadlessChild(VisualElement element, IContainable`1<EvasObject> parent);
    protected virtual void RemoveChild(VisualElement view);
    private void OnChildAdded(object sender, ElementEventArgs e);
    private void OnChildRemoved(object sender, ElementEventArgs e);
    private void OnChildrenReordered(object sender, EventArgs e);
    private void OnFocusChangeRequested(object sender, FocusRequestArgs e);
    private void OnRegisterEffect(PlatformEffect effect);
    private void OnMoved(object sender, EventArgs e);
    private void EnsureChildOrder();
    private void UpdateIsVisible();
    protected virtual void UpdateIsEnabled(bool initialize);
    protected virtual void UpdateInputTransparent(bool initialize);
    protected virtual void UpdateThemeStyle();
    private void UpdateTransformation(bool initialize);
    private void UpdateFocusAllowed(bool initialize);
    private void UpdateFocusDirection(bool initialize);
    private void UpdateToolTip(bool initialize);
    private void SetNextFocusViewInternal(string direction);
    private void UpdateFocusUpView();
    private void UpdateFocusDownView();
    private void UpdateFocusLeftView();
    private void UpdateFocusRightView();
    private void UpdateFocusBackView();
    private void UpdateFocusForwardView();
    private void ApplyRotation(EvasMap map, Rect geometry, Boolean& changed);
    private void ApplyScale(EvasMap map, Rect geometry, Boolean& changed);
    private void ApplyTranslation(EvasMap map, Rect geometry, Boolean& changed);
    protected virtual void ApplyTransformation();
    private void UpdateTabIndex();
    private void UpdateIsTabStop(bool init);
    private FocusDirection ConvertToNativeFocusDirection(string direction);
    [CompilerGeneratedAttribute]
private CustomFocusManager <.ctor>b__10_0();
}
[FlagsAttribute]
public enum Xamarin.Forms.Platform.Tizen.VisualElementRendererFlags : Enum {
    public byte value__;
    public static VisualElementRendererFlags None;
    public static VisualElementRendererFlags Disposed;
    public static VisualElementRendererFlags NeedsLayout;
    public static VisualElementRendererFlags NeedsTransformation;
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.Watch.ColorEX : object {
    [ExtensionAttribute]
public static string ToHex(Color c);
}
public class Xamarin.Forms.Platform.Tizen.Watch.DraggedEventArgs : object {
    [CompilerGeneratedAttribute]
private DraggedState <State>k__BackingField;
    public DraggedState State { get; private set; }
    public DraggedEventArgs(DraggedState state);
    [CompilerGeneratedAttribute]
public DraggedState get_State();
    [CompilerGeneratedAttribute]
private void set_State(DraggedState value);
}
public enum Xamarin.Forms.Platform.Tizen.Watch.DraggedState : Enum {
    public int value__;
    public static DraggedState EdgeTop;
    public static DraggedState Up;
    public static DraggedState Down;
    public static DraggedState EdgeBottom;
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.Watch.FileImageSourceEX : object {
    [ExtensionAttribute]
public static string ToAbsPath(FileImageSource source);
}
public interface Xamarin.Forms.Platform.Tizen.Watch.IShellItemRenderer {
    public BaseShellItem Item { get; }
    public EvasObject NativeView { get; }
    public abstract virtual BaseShellItem get_Item();
    public abstract virtual EvasObject get_NativeView();
}
public class Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer : Layout {
    private static int TouchWidth;
    private static int IconSize;
    private static string DefaultIcon;
    private Box _mainLayout;
    private Box _contentGestureBox;
    private Box _contentBox;
    private Box _drawerBox;
    private Box _drawerContentBox;
    private Box _drawerIconBox;
    private EvasObject _content;
    private EvasObject _drawerContent;
    private Image _drawerIcon;
    private Button _touchArea;
    private GestureLayer _gestureOnContent;
    private GestureLayer _gestureOnDrawer;
    private ImageSource _drawerIconSource;
    private bool _isOpen;
    private bool _isDefaultIcon;
    private CancellationTokenSource _fadeInCancelTokenSource;
    [CompilerGeneratedAttribute]
private int <HandlerHeight>k__BackingField;
    private Color _handlerBackgroundColor;
    [CompilerGeneratedAttribute]
private EventHandler Toggled;
    private bool HasDrawer { get; }
    public int HandlerHeight { get; public set; }
    public bool IsOpen { get; public set; }
    public Color HandlerBackgroundColor { get; public set; }
    public NavigationDrawer(EvasObject parent);
    private static NavigationDrawer();
    private bool get_HasDrawer();
    [CompilerGeneratedAttribute]
public int get_HandlerHeight();
    [CompilerGeneratedAttribute]
public void set_HandlerHeight(int value);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public Color get_HandlerBackgroundColor();
    public void set_HandlerBackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public void add_Toggled(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Toggled(EventHandler value);
    public void SetMainContent(EvasObject content);
    public void SetDrawerContent(EvasObject content);
    public void UpdateDrawerIcon(ImageSource source);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer/<Open>d__39")]
public void Open(UInt32 length);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer/<Close>d__40")]
public void Close(UInt32 length);
    private sealed virtual override void Xamarin.Forms.IAnimatable.BatchBegin();
    private sealed virtual override void Xamarin.Forms.IAnimatable.BatchCommit();
    protected virtual IntPtr CreateHandle(EvasObject parent);
    private void Initialize();
    private void InitializeDrawerBox();
    private void SetDrawerIcon(ImageSource source);
    private void UpdateHandlerBackgroundColor();
    private void OnIconClicked(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer/<ShowAsync>d__49")]
private Task`1<bool> ShowAsync(Widget target, Easing easing, UInt32 length, CancellationToken cancelltaionToken);
    private void OnLayout();
    private void OnContentLayout();
    private void OnDrawerLayout();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer/<HideAsync>d__53")]
private Task`1<bool> HideAsync(Widget target, Easing easing, UInt32 length);
    private void StartHighlightAnimation(Widget target);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.Tizen.Watch.NavigationDrawer/<OnRotateEventReceived>d__55")]
private void OnRotateEventReceived(EventArgs args);
    private void OnContentDragStarted(MomentumData moment);
    private void OnContentDragEnded(MomentumData moment);
    private void OnDrawerDragged(MomentumData moment);
    private void OnDrawerDragEnded(MomentumData moment);
    private void FlipIcon();
    private void ResetIcon();
    private Task RunMoveAnimation(EvasObject target, Rect dest, UInt32 length, Easing easing);
    private void UnsetMainContent();
    private void UnsetDrawerContent();
    [CompilerGeneratedAttribute]
private void <SetDrawerContent>b__37_0(object s, DraggedEventArgs e);
}
public class Xamarin.Forms.Platform.Tizen.Watch.NavigationView : Layout {
    private int _defaultIconSize;
    private Box _outterBox;
    private Layout _surfaceLayout;
    private CircleSurface _surface;
    private CircleGenList _naviMenu;
    private GenItemClass _defaultClass;
    private SmartEvent _draggedUpCallback;
    private SmartEvent _draggedDownCallback;
    private GenListItem _header;
    private GenListItem _footer;
    private List`1<List`1<Element>> _itemCache;
    private List`1<GenListItem> _items;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> ItemSelected;
    [CompilerGeneratedAttribute]
private EventHandler`1<DraggedEventArgs> Dragged;
    private Color _backgroundColor;
    private Color _foregroundColor;
    public Color BackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public NavigationView(EvasObject parent);
    [CompilerGeneratedAttribute]
public void add_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemSelected(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Dragged(EventHandler`1<DraggedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Dragged(EventHandler`1<DraggedEventArgs> value);
    public virtual Color get_BackgroundColor();
    public virtual void set_BackgroundColor(Color value);
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    public void Build(List`1<List`1<Element>> items);
    public void Activate();
    public void Deactivate();
    protected virtual IntPtr CreateHandle(EvasObject parent);
    private void InitializeComponent();
    private void OnItemSelected(object sender, GenListItemEventArgs e);
    private void OnLayout();
    private void UpdateBackgroundColor();
    private void UpdateForegroundColor();
    private bool IsUpdated(List`1<List`1<Element>> items);
    private void ClearItemPropertyChangedHandler();
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__32_0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__32_1(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private string <InitializeComponent>b__32_2(object obj, string part);
    [CompilerGeneratedAttribute]
private EvasObject <InitializeComponent>b__32_3(object obj, string part);
}
public class Xamarin.Forms.Platform.Tizen.Watch.ShellContentRenderer : object {
    [CompilerGeneratedAttribute]
private ShellContent <ShellContent>k__BackingField;
    [CompilerGeneratedAttribute]
private EvasObject <NativeView>k__BackingField;
    public ShellContent ShellContent { get; protected set; }
    public BaseShellItem Item { get; }
    public EvasObject NativeView { get; protected set; }
    public ShellContentRenderer(ShellContent content);
    [CompilerGeneratedAttribute]
public ShellContent get_ShellContent();
    [CompilerGeneratedAttribute]
protected void set_ShellContent(ShellContent value);
    public sealed virtual BaseShellItem get_Item();
    [CompilerGeneratedAttribute]
public sealed virtual EvasObject get_NativeView();
    [CompilerGeneratedAttribute]
protected void set_NativeView(EvasObject value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static EvasObject GetNativeView(ShellContent content);
}
public class Xamarin.Forms.Platform.Tizen.Watch.ShellItemRenderer : object {
    private Box _mainLayout;
    private EvasObject _currentItem;
    private Dictionary`2<BaseShellItem, IShellItemRenderer> _rendererCache;
    [CompilerGeneratedAttribute]
private ShellItem <ShellItem>k__BackingField;
    public ShellItem ShellItem { get; protected set; }
    public BaseShellItem Item { get; }
    public EvasObject NativeView { get; }
    public ShellItemRenderer(ShellItem item);
    [CompilerGeneratedAttribute]
public ShellItem get_ShellItem();
    [CompilerGeneratedAttribute]
protected void set_ShellItem(ShellItem value);
    public sealed virtual BaseShellItem get_Item();
    public sealed virtual EvasObject get_NativeView();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void UpdateCurrentItem();
    private void SetCurrentItem(EvasObject item);
    private void ResetCurrentItem();
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLayout();
}
public class Xamarin.Forms.Platform.Tizen.Watch.ShellRenderer : VisualElementRenderer`1<Shell> {
    private NavigationDrawer _drawer;
    private NavigationView _navigationView;
    private Dictionary`2<BaseShellItem, IShellItemRenderer> _rendererCache;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Shell> e);
    protected virtual void OnElementReady();
    protected virtual void Dispose(bool disposing);
    protected virtual NavigationView CreateNavigationView(EvasObject parent);
    protected virtual NavigationDrawer CreateNavigationDrawer(EvasObject parent);
    private void InitializeComponent();
    private void OnNavigationStructureChanged(object sender, EventArgs e);
    private void UpdateFlyoutMenu();
    private void InitializeNavigationDrawer();
    protected virtual void OnNavigationDrawerToggled(object sender, EventArgs e);
    private void DeinitializeNavigationView();
    private void OnMenuItemSelected(object sender, SelectedItemChangedEventArgs e);
    private void UpdateCurrentItem();
    private void UpdateFlyoutBehavior(bool init);
    private void UpdateFlyoutIcon(bool init);
    private void UpdateFlyoutBackgroundColor(bool init);
    private void UpdateFlyoutIsPresented();
    private void SetCurrentItem(EvasObject item);
    private void ResetCurrentItem();
}
public class Xamarin.Forms.Platform.Tizen.Watch.ShellRendererFactory : object {
    private static ShellRendererFactory _instance;
    public static ShellRendererFactory Default { get; public set; }
    public static ShellRendererFactory get_Default();
    public static void set_Default(ShellRendererFactory value);
    public virtual IShellItemRenderer CreateItemRenderer(ShellItem item);
    public virtual IShellItemRenderer CreateShellNavigationRenderer(ShellSection item);
    public virtual IShellItemRenderer CreateItemRenderer(ShellSection item);
    public virtual IShellItemRenderer CreateItemRenderer(ShellContent item);
}
public class Xamarin.Forms.Platform.Tizen.Watch.ShellSectionItemsRenderer : object {
    private static int ItemMaxCount;
    private static int OddMiddleItem;
    private static int EvenMiddleItem;
    private Box _mainBox;
    private Index _indexIndicator;
    private Scroller _scroller;
    private Box _innerContainer;
    private List`1<ItemHolder> _items;
    private int _currentIndex;
    private Rect _lastLayoutBound;
    private int _updateByCode;
    private bool _isScrolling;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    public ShellSection ShellSection { get; protected set; }
    public BaseShellItem Item { get; }
    public EvasObject NativeView { get; }
    public ShellSectionItemsRenderer(ShellSection shellSection);
    [CompilerGeneratedAttribute]
public ShellSection get_ShellSection();
    [CompilerGeneratedAttribute]
protected void set_ShellSection(ShellSection value);
    public sealed virtual BaseShellItem get_Item();
    public sealed virtual EvasObject get_NativeView();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void UpdateItems();
    private void RealizeItem(int index);
    private void RealizeItem(ItemHolder item);
    private void UpdateCurrentPage(int index);
    private void UpdateFocusPolicy();
    private void UpdateCurrentIndex(int index);
    private void OnItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnFocused(object sender, EventArgs e);
    private void OnUnfocused(object sender, EventArgs e);
    private void OnScrollStop(object sender, EventArgs e);
    protected void OnRotated(RotaryEventArgs args);
    protected virtual bool OnRotated(bool isClockwise);
    protected void MoveNextPage(bool isClockwise);
    private void OnScrolled(object sender, EventArgs e);
    private void OnSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLayout();
    private void OnInnerLayoutUpdate();
}
public class Xamarin.Forms.Platform.Tizen.Watch.ShellSectionNavigationRenderer : object {
    private SimpleViewStack _viewStack;
    private IShellItemRenderer _rootPageRenderer;
    [CompilerGeneratedAttribute]
private ShellSection <ShellSection>k__BackingField;
    public ShellSection ShellSection { get; protected set; }
    public BaseShellItem Item { get; }
    public EvasObject NativeView { get; }
    public ShellSectionNavigationRenderer(ShellSection item);
    [CompilerGeneratedAttribute]
public ShellSection get_ShellSection();
    [CompilerGeneratedAttribute]
protected void set_ShellSection(ShellSection value);
    public sealed virtual BaseShellItem get_Item();
    public sealed virtual EvasObject get_NativeView();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void OnInsertRequest(NavigationRequestedEventArgs request);
    private void OnPushRequest(NavigationRequestedEventArgs request);
    private void OnPopRequest(NavigationRequestedEventArgs request);
    private void OnPopToRootRequest(NavigationRequestedEventArgs request);
    private void OnRemoveRequest(NavigationRequestedEventArgs request);
    private void OnNavigationRequested(object sender, NavigationRequestedEventArgs e);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__13_0();
}
public class Xamarin.Forms.Platform.Tizen.WebViewRenderer : ViewRenderer`2<WebView, WebViewContainer> {
    private bool _isUpdating;
    private WebNavigationEvent _eventState;
    private WebView NativeWebView { get; }
    private IWebViewController ElementController { get; }
    private WebView get_NativeWebView();
    private IWebViewController get_ElementController();
    private sealed virtual override void Xamarin.Forms.IWebViewDelegate.LoadHtml(string html, string baseUrl);
    private sealed virtual override void Xamarin.Forms.IWebViewDelegate.LoadUrl(string url);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<WebView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLoadError(object sender, SmartCallbackLoadErrorArgs e);
    private void OnLoadStarted(object sender, EventArgs e);
    private void OnLoadFinished(object sender, EventArgs e);
    private void Load();
    private void OnEvalRequested(object sender, EvalRequested eventArg);
    private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
    private void SendNavigated(UrlWebViewSource source, WebNavigationEvent evnt, WebNavigationResult result);
    private void UpdateCanGoBackForward();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.Tizen.WindowExtension : object {
    [ExtensionAttribute]
public static DeviceOrientation GetDeviceOrientation(Window window);
}
internal class Xamarin.Forms.Platform.Tizen.XamarinLogListener : LogListener {
    public virtual void Warning(string category, string message);
}
public enum Xamarin.Forms.PlatformType : Enum {
    public int value__;
    public static PlatformType Defalut;
    public static PlatformType Lightweight;
}
public enum Xamarin.Forms.StaticRegistrarStrategy : Enum {
    public int value__;
    public static StaticRegistrarStrategy None;
    public static StaticRegistrarStrategy StaticRegistrarOnly;
    public static StaticRegistrarStrategy All;
}
internal class Xamarin.Forms.TizenExpressionSearch : ExpressionVisitor {
    private List`1<object> _results;
    private Type _targetType;
    public sealed virtual List`1<T> FindObjects(Expression expression);
    protected virtual Expression VisitMember(MemberExpression node);
}
public enum Xamarin.Forms.TizenTitleBarVisibility : Enum {
    public int value__;
    public static TizenTitleBarVisibility Default;
    public static TizenTitleBarVisibility Never;
}
public class Xamarin.Forms.ViewInitializedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private EvasObject <NativeView>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElement <View>k__BackingField;
    public EvasObject NativeView { get; internal set; }
    public VisualElement View { get; internal set; }
    [CompilerGeneratedAttribute]
public EvasObject get_NativeView();
    [CompilerGeneratedAttribute]
internal void set_NativeView(EvasObject value);
    [CompilerGeneratedAttribute]
public VisualElement get_View();
    [CompilerGeneratedAttribute]
internal void set_View(VisualElement value);
}
