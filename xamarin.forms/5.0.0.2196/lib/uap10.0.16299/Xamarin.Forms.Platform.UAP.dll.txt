internal class ThisAssembly : object {
}
internal static class Xamarin.Forms.Flags : object {
}
public static class Xamarin.Forms.Forms : object {
    private static string LogFormat;
    private static ApplicationExecutionState s_state;
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    private static IReadOnlyList`1<string> s_flags;
    public static bool IsInitialized { get; private set; }
    public static IReadOnlyList`1<string> Flags { get; }
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private static void set_IsInitialized(bool value);
    public static void Init(IActivatedEventArgs launchActivatedEventArgs, IEnumerable`1<Assembly> rendererAssemblies);
    private static FlowDirection GetFlowDirection();
    internal static ResourceDictionary GetTabletResources();
    private static void SubscribeIdiom();
    private static void OnWindowSizeChanged(object sender, WindowSizeChangedEventArgs e);
    private static void UpdateIdiom();
    public static IReadOnlyList`1<string> get_Flags();
    public static void SetFlags(String[] flags);
}
internal class Xamarin.Forms.Internals.Crc64 : HashAlgorithm {
    private static Crc64 _instance;
    private static UInt64[] Table;
    private ulong crc;
    private ulong length;
    private static UInt32[] _lookup32;
    public static Crc64 Instance { get; }
    private static Crc64();
    public static Crc64 get_Instance();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private static UInt32[] CreateLookup32();
    private static string ByteArrayToHexViaLookup32(Byte[] bytes);
    public static string GetHash(string input);
}
internal static class Xamarin.Forms.Platform.UAP.BootstrapHelper : object {
    private static int Bootstrap(string assemblyPath, string typeName, string methodName, string argument);
}
internal static class Xamarin.Forms.Platform.UAP.LabelHtmlHelper : object {
    internal static string ElementB;
    internal static string ElementBr;
    internal static string ElementEm;
    internal static string ElementI;
    internal static string ElementP;
    internal static string ElementStrong;
    internal static string ElementU;
    internal static string ElementUl;
    internal static string ElementLi;
    internal static string ElementDiv;
    public static void ParseText(XElement element, InlineCollection inlines, Label label);
    private static bool AddLineBreakIfNeeded(InlineCollection inlines);
}
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_FormsTextBox();
    private object Activate_5_FormsCancelButton();
    private object Activate_8_ShellPageWrapper();
    private object Activate_11_Page();
    private object Activate_17_ItemContentControl();
    private object Activate_18_DataTemplate();
    private object Activate_23_FormsGridView();
    private object Activate_29_FormsListView();
    private object Activate_31_FormsCheckBox();
    private object Activate_33_FormsCommandBar();
    private object Activate_36_FormsProgressBar();
    private object Activate_38_TextAlignmentToHorizontalAlignmentConverter();
    private object Activate_39_FlyoutPageControl();
    private object Activate_48_PageControl();
    private object Activate_50_FormsPresenter();
    private object Activate_52_FormsComboBox();
    private object Activate_54_PromptDialog();
    private object Activate_57_CaseConverter();
    private object Activate_58_HeightConverter();
    private object Activate_59_CollapseWhenEmptyConverter();
    private object Activate_60_BoolToVisibilityConverter();
    private object Activate_61_BrushConverter();
    private object Activate_62_PageToRenderedElementConverter();
    private object Activate_63_ImageConverter();
    private object Activate_64_ViewToRendererConverter();
    private object Activate_65_ColorConverter();
    private object Activate_66_HorizontalTextAlignmentConverter();
    private object Activate_67_KeyboardConverter();
    private object Activate_68_MasterBackgroundConverter();
    private object Activate_69_ImageSourceIconElementConverter();
    private object Activate_70_ListViewGroupStyleSelector();
    private object Activate_72_StepperControl();
    private object Activate_75_FormsButton();
    private object Activate_76_EntryCellTextBox();
    private object Activate_77_ListGroupHeaderPresenter();
    private object Activate_78_CellControl();
    private object Activate_80_Resources();
    private object Activate_82_FormsSlider();
    private object Activate_85_StepperControl();
    private object Activate_86_FormsPivot();
    private object Activate_88_FormsEmbeddedPageWrapper();
    private object Activate_89_ShellRenderer();
    private object Activate_90_NavigationView();
    private object Activate_104_NavigationViewTemplateSettings();
    private object Activate_106_ShellSplitView();
    private object Activate_108_ItemsRepeaterScrollHost();
    private object Activate_110_NavigationViewItem();
    private object Activate_113_ItemsRepeater();
    private object Activate_116_StackLayout();
    private object Activate_117_VirtualizingLayout();
    private object Activate_118_ShellToolbarItemRenderer();
    private object Activate_119_ToolbarItem();
    private object Activate_120_MenuItem();
    private object Activate_122_NavigationViewItemSeparator();
    private object Activate_123_ShellFlyoutItemRenderer();
    private object Activate_124_TreeViewNode();
    private object Activate_126_ShellSectionRenderer();
    private void MapAdd_80_Resources(object instance, object key, object item);
    private void VectorAdd_103_IList(object instance, object item);
    private void VectorAdd_125_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_FormsTextBox_ForegroundFocusBrush(object instance);
    private void set_0_FormsTextBox_ForegroundFocusBrush(object instance, object Value);
    private object get_1_FormsTextBox_PlaceholderForegroundBrush(object instance);
    private void set_1_FormsTextBox_PlaceholderForegroundBrush(object instance, object Value);
    private object get_2_FormsTextBox_PlaceholderForegroundFocusBrush(object instance);
    private void set_2_FormsTextBox_PlaceholderForegroundFocusBrush(object instance, object Value);
    private object get_3_FormsTextBox_BackgroundFocusBrush(object instance);
    private void set_3_FormsTextBox_BackgroundFocusBrush(object instance, object Value);
    private object get_4_FormsTextBox_ClearButtonVisible(object instance);
    private void set_4_FormsTextBox_ClearButtonVisible(object instance, object Value);
    private object get_5_FormsTextBox_IsPassword(object instance);
    private void set_5_FormsTextBox_IsPassword(object instance, object Value);
    private object get_6_FormsTextBox_Text(object instance);
    private void set_6_FormsTextBox_Text(object instance, object Value);
    private object get_7_FormsCancelButton_ForegroundBrush(object instance);
    private void set_7_FormsCancelButton_ForegroundBrush(object instance, object Value);
    private object get_8_FormsCancelButton_BackgroundBrush(object instance);
    private void set_8_FormsCancelButton_BackgroundBrush(object instance, object Value);
    private object get_9_FormsCancelButton_IsReady(object instance);
    private object get_10_ShellPageWrapper_Page(object instance);
    private void set_10_ShellPageWrapper_Page(object instance, object Value);
    private object get_11_ItemContentControl_FormsDataTemplate(object instance);
    private void set_11_ItemContentControl_FormsDataTemplate(object instance, object Value);
    private object get_12_ItemContentControl_FormsDataContext(object instance);
    private void set_12_ItemContentControl_FormsDataContext(object instance, object Value);
    private object get_13_ItemContentControl_FormsContainer(object instance);
    private void set_13_ItemContentControl_FormsContainer(object instance, object Value);
    private object get_14_ItemContentControl_ItemHeight(object instance);
    private void set_14_ItemContentControl_ItemHeight(object instance, object Value);
    private object get_15_ItemContentControl_ItemWidth(object instance);
    private void set_15_ItemContentControl_ItemWidth(object instance, object Value);
    private object get_16_ItemContentControl_ItemSpacing(object instance);
    private void set_16_ItemContentControl_ItemSpacing(object instance, object Value);
    private object get_17_FormsGridView_Span(object instance);
    private void set_17_FormsGridView_Span(object instance, object Value);
    private object get_18_FormsGridView_EmptyViewVisibility(object instance);
    private void set_18_FormsGridView_EmptyViewVisibility(object instance, object Value);
    private object get_19_FormsGridView_Orientation(object instance);
    private void set_19_FormsGridView_Orientation(object instance, object Value);
    private object get_20_FormsListView_EmptyViewVisibility(object instance);
    private void set_20_FormsListView_EmptyViewVisibility(object instance, object Value);
    private object get_21_FormsCheckBox_TintBrush(object instance);
    private void set_21_FormsCheckBox_TintBrush(object instance, object Value);
    private object get_22_FormsCheckBox_DefaultFillBrush(object instance);
    private void set_22_FormsCheckBox_DefaultFillBrush(object instance, object Value);
    private object get_23_FormsCommandBar_IsInValidLocation(object instance);
    private void set_23_FormsCommandBar_IsInValidLocation(object instance, object Value);
    private object get_24_FormsProgressBar_ElementOpacity(object instance);
    private void set_24_FormsProgressBar_ElementOpacity(object instance, object Value);
    private object get_25_FlyoutPageControl_ToolbarForeground(object instance);
    private void set_25_FlyoutPageControl_ToolbarForeground(object instance, object Value);
    private object get_26_FlyoutPageControl_ShouldShowToolbar(object instance);
    private void set_26_FlyoutPageControl_ShouldShowToolbar(object instance, object Value);
    private object get_27_FlyoutPageControl_Detail(object instance);
    private void set_27_FlyoutPageControl_Detail(object instance, object Value);
    private object get_28_FlyoutPageControl_DetailSize(object instance);
    private object get_29_FlyoutPageControl_DetailTitle(object instance);
    private void set_29_FlyoutPageControl_DetailTitle(object instance, object Value);
    private object get_30_FlyoutPageControl_DetailTitleIcon(object instance);
    private void set_30_FlyoutPageControl_DetailTitleIcon(object instance, object Value);
    private object get_31_FlyoutPageControl_DetailTitleView(object instance);
    private void set_31_FlyoutPageControl_DetailTitleView(object instance, object Value);
    private object get_32_FlyoutPageControl_DetailTitleVisibility(object instance);
    private void set_32_FlyoutPageControl_DetailTitleVisibility(object instance, object Value);
    private object get_33_FlyoutPageControl_DetailTitleViewVisibility(object instance);
    private void set_33_FlyoutPageControl_DetailTitleViewVisibility(object instance, object Value);
    private object get_34_FlyoutPageControl_IsPaneOpen(object instance);
    private void set_34_FlyoutPageControl_IsPaneOpen(object instance, object Value);
    private object get_35_FlyoutPageControl_Flyout(object instance);
    private void set_35_FlyoutPageControl_Flyout(object instance, object Value);
    private object get_36_FlyoutPageControl_FlyoutSize(object instance);
    private object get_37_FlyoutPageControl_FlyoutTitle(object instance);
    private void set_37_FlyoutPageControl_FlyoutTitle(object instance, object Value);
    private object get_38_FlyoutPageControl_FlyoutTitleVisibility(object instance);
    private void set_38_FlyoutPageControl_FlyoutTitleVisibility(object instance, object Value);
    private object get_39_FlyoutPageControl_FlyoutToolbarVisibility(object instance);
    private void set_39_FlyoutPageControl_FlyoutToolbarVisibility(object instance, object Value);
    private object get_40_FlyoutPageControl_ShouldShowSplitMode(object instance);
    private void set_40_FlyoutPageControl_ShouldShowSplitMode(object instance, object Value);
    private object get_41_FlyoutPageControl_CollapseStyle(object instance);
    private void set_41_FlyoutPageControl_CollapseStyle(object instance, object Value);
    private object get_42_FlyoutPageControl_ToolbarPlacement(object instance);
    private void set_42_FlyoutPageControl_ToolbarPlacement(object instance, object Value);
    private object get_43_FlyoutPageControl_ToolbarDynamicOverflowEnabled(object instance);
    private void set_43_FlyoutPageControl_ToolbarDynamicOverflowEnabled(object instance, object Value);
    private object get_44_FlyoutPageControl_ContentTogglePaneButtonVisibility(object instance);
    private void set_44_FlyoutPageControl_ContentTogglePaneButtonVisibility(object instance, object Value);
    private object get_45_FlyoutPageControl_CollapsedPaneWidth(object instance);
    private void set_45_FlyoutPageControl_CollapsedPaneWidth(object instance, object Value);
    private object get_46_FlyoutPageControl_ToolbarBackground(object instance);
    private void set_46_FlyoutPageControl_ToolbarBackground(object instance, object Value);
    private object get_47_FlyoutPageControl_ShouldShowNavigationBar(object instance);
    private void set_47_FlyoutPageControl_ShouldShowNavigationBar(object instance, object Value);
    private object get_48_PageControl_ContentMargin(object instance);
    private void set_48_PageControl_ContentMargin(object instance, object Value);
    private object get_49_PageControl_TitleBrush(object instance);
    private void set_49_PageControl_TitleBrush(object instance, object Value);
    private object get_50_PageControl_ShouldShowToolbar(object instance);
    private void set_50_PageControl_ShouldShowToolbar(object instance, object Value);
    private object get_51_PageControl_TitleIcon(object instance);
    private void set_51_PageControl_TitleIcon(object instance, object Value);
    private object get_52_PageControl_TitleView(object instance);
    private void set_52_PageControl_TitleView(object instance, object Value);
    private object get_53_PageControl_BackButtonTitle(object instance);
    private void set_53_PageControl_BackButtonTitle(object instance, object Value);
    private object get_54_PageControl_ContentHeight(object instance);
    private object get_55_PageControl_ContentWidth(object instance);
    private object get_56_PageControl_ToolbarBackground(object instance);
    private void set_56_PageControl_ToolbarBackground(object instance, object Value);
    private object get_57_PageControl_ToolbarPlacement(object instance);
    private void set_57_PageControl_ToolbarPlacement(object instance, object Value);
    private object get_58_PageControl_ToolbarDynamicOverflowEnabled(object instance);
    private void set_58_PageControl_ToolbarDynamicOverflowEnabled(object instance, object Value);
    private object get_59_PageControl_TitleVisibility(object instance);
    private void set_59_PageControl_TitleVisibility(object instance, object Value);
    private object get_60_PageControl_TitleViewVisibility(object instance);
    private void set_60_PageControl_TitleViewVisibility(object instance, object Value);
    private object get_61_PageControl_TitleInset(object instance);
    private void set_61_PageControl_TitleInset(object instance, object Value);
    private object get_62_PromptDialog_Message(object instance);
    private void set_62_PromptDialog_Message(object instance, object Value);
    private object get_63_PromptDialog_Input(object instance);
    private void set_63_PromptDialog_Input(object instance, object Value);
    private object get_64_PromptDialog_Placeholder(object instance);
    private void set_64_PromptDialog_Placeholder(object instance, object Value);
    private object get_65_PromptDialog_MaxLength(object instance);
    private void set_65_PromptDialog_MaxLength(object instance, object Value);
    private object get_66_PromptDialog_InputScope(object instance);
    private void set_66_PromptDialog_InputScope(object instance, object Value);
    private object get_67_CaseConverter_ConvertToUpper(object instance);
    private void set_67_CaseConverter_ConvertToUpper(object instance, object Value);
    private object get_68_BoolToVisibilityConverter_FalseIsVisible(object instance);
    private void set_68_BoolToVisibilityConverter_FalseIsVisible(object instance, object Value);
    private object get_69_StepperControl_Increment(object instance);
    private void set_69_StepperControl_Increment(object instance, object Value);
    private object get_70_StepperControl_Maximum(object instance);
    private void set_70_StepperControl_Maximum(object instance, object Value);
    private object get_71_StepperControl_Minimum(object instance);
    private void set_71_StepperControl_Minimum(object instance, object Value);
    private object get_72_StepperControl_Value(object instance);
    private void set_72_StepperControl_Value(object instance, object Value);
    private object get_73_StepperControl_ButtonBackgroundColor(object instance);
    private void set_73_StepperControl_ButtonBackgroundColor(object instance, object Value);
    private object get_74_StepperControl_ButtonBackground(object instance);
    private void set_74_StepperControl_ButtonBackground(object instance, object Value);
    private object get_75_FormsButton_BackgroundColor(object instance);
    private void set_75_FormsButton_BackgroundColor(object instance, object Value);
    private object get_76_FormsButton_BorderRadius(object instance);
    private void set_76_FormsButton_BorderRadius(object instance, object Value);
    private object get_77_CellControl_IsGroupHeader(object instance);
    private void set_77_CellControl_IsGroupHeader(object instance, object Value);
    private object get_78_CellControl_Cell(object instance);
    private void set_78_CellControl_Cell(object instance, object Value);
    private object get_79_FormsSlider_ThumbImageSource(object instance);
    private void set_79_FormsSlider_ThumbImageSource(object instance, object Value);
    private object get_80_FormsSlider_ThumbImage(object instance);
    private void set_80_FormsSlider_ThumbImage(object instance, object Value);
    private object get_81_StepperControl_Increment(object instance);
    private void set_81_StepperControl_Increment(object instance, object Value);
    private object get_82_StepperControl_Maximum(object instance);
    private void set_82_StepperControl_Maximum(object instance, object Value);
    private object get_83_StepperControl_Minimum(object instance);
    private void set_83_StepperControl_Minimum(object instance, object Value);
    private object get_84_StepperControl_Value(object instance);
    private void set_84_StepperControl_Value(object instance, object Value);
    private object get_85_StepperControl_ButtonBackgroundColor(object instance);
    private void set_85_StepperControl_ButtonBackgroundColor(object instance, object Value);
    private object get_86_StepperControl_ButtonBackground(object instance);
    private void set_86_StepperControl_ButtonBackground(object instance, object Value);
    private object get_87_FormsPivot_ShouldShowToolbar(object instance);
    private void set_87_FormsPivot_ShouldShowToolbar(object instance, object Value);
    private object get_88_FormsPivot_ToolbarBackground(object instance);
    private void set_88_FormsPivot_ToolbarBackground(object instance, object Value);
    private object get_89_FormsPivot_ToolbarForeground(object instance);
    private void set_89_FormsPivot_ToolbarForeground(object instance, object Value);
    private object get_90_FormsPivot_TitleVisibility(object instance);
    private void set_90_FormsPivot_TitleVisibility(object instance, object Value);
    private object get_91_FormsPivot_ToolbarPlacement(object instance);
    private void set_91_FormsPivot_ToolbarPlacement(object instance, object Value);
    private object get_92_FormsPivot_ToolbarDynamicOverflowEnabled(object instance);
    private void set_92_FormsPivot_ToolbarDynamicOverflowEnabled(object instance, object Value);
    private object get_93_NavigationView_PaneToggleButtonStyle(object instance);
    private void set_93_NavigationView_PaneToggleButtonStyle(object instance, object Value);
    private object get_94_NavigationView_CompactPaneLength(object instance);
    private void set_94_NavigationView_CompactPaneLength(object instance, object Value);
    private object get_95_ShellRenderer_FlyoutBackgroundColor(object instance);
    private void set_95_ShellRenderer_FlyoutBackgroundColor(object instance, object Value);
    private object get_96_NavigationView_IsTitleBarAutoPaddingEnabled(object instance);
    private void set_96_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value);
    private object get_97_NavigationView_IsSettingsVisible(object instance);
    private void set_97_NavigationView_IsSettingsVisible(object instance, object Value);
    private object get_98_NavigationView_IsPaneVisible(object instance);
    private void set_98_NavigationView_IsPaneVisible(object instance, object Value);
    private object get_99_NavigationView_IsPaneToggleButtonVisible(object instance);
    private void set_99_NavigationView_IsPaneToggleButtonVisible(object instance, object Value);
    private object get_100_NavigationView_IsPaneOpen(object instance);
    private void set_100_NavigationView_IsPaneOpen(object instance, object Value);
    private object get_101_NavigationView_IsBackEnabled(object instance);
    private void set_101_NavigationView_IsBackEnabled(object instance, object Value);
    private object get_102_NavigationView_IsBackButtonVisible(object instance);
    private void set_102_NavigationView_IsBackButtonVisible(object instance, object Value);
    private object get_103_NavigationView_HeaderTemplate(object instance);
    private void set_103_NavigationView_HeaderTemplate(object instance, object Value);
    private object get_104_NavigationView_Header(object instance);
    private void set_104_NavigationView_Header(object instance, object Value);
    private object get_105_NavigationView_ExpandedModeThresholdWidth(object instance);
    private void set_105_NavigationView_ExpandedModeThresholdWidth(object instance, object Value);
    private object get_106_NavigationView_MenuItemContainerStyle(object instance);
    private void set_106_NavigationView_MenuItemContainerStyle(object instance, object Value);
    private object get_107_NavigationView_ContentOverlay(object instance);
    private void set_107_NavigationView_ContentOverlay(object instance, object Value);
    private object get_108_NavigationView_CompactModeThresholdWidth(object instance);
    private void set_108_NavigationView_CompactModeThresholdWidth(object instance, object Value);
    private object get_109_NavigationView_AutoSuggestBox(object instance);
    private void set_109_NavigationView_AutoSuggestBox(object instance, object Value);
    private object get_110_NavigationView_MenuItemContainerStyleSelector(object instance);
    private void set_110_NavigationView_MenuItemContainerStyleSelector(object instance, object Value);
    private object get_111_NavigationView_AlwaysShowHeader(object instance);
    private void set_111_NavigationView_AlwaysShowHeader(object instance, object Value);
    private object get_112_NavigationView_ShoulderNavigationEnabled(object instance);
    private void set_112_NavigationView_ShoulderNavigationEnabled(object instance, object Value);
    private object get_113_NavigationView_SelectionFollowsFocus(object instance);
    private void set_113_NavigationView_SelectionFollowsFocus(object instance, object Value);
    private object get_114_NavigationView_SelectedItem(object instance);
    private void set_114_NavigationView_SelectedItem(object instance, object Value);
    private object get_115_NavigationView_PaneTitle(object instance);
    private void set_115_NavigationView_PaneTitle(object instance, object Value);
    private object get_116_NavigationView_PaneHeader(object instance);
    private void set_116_NavigationView_PaneHeader(object instance, object Value);
    private object get_117_NavigationView_PaneFooter(object instance);
    private void set_117_NavigationView_PaneFooter(object instance, object Value);
    private object get_118_NavigationView_PaneDisplayMode(object instance);
    private void set_118_NavigationView_PaneDisplayMode(object instance, object Value);
    private object get_119_NavigationView_PaneCustomContent(object instance);
    private void set_119_NavigationView_PaneCustomContent(object instance, object Value);
    private object get_120_NavigationView_OverflowLabelMode(object instance);
    private void set_120_NavigationView_OverflowLabelMode(object instance, object Value);
    private object get_121_NavigationView_OpenPaneLength(object instance);
    private void set_121_NavigationView_OpenPaneLength(object instance, object Value);
    private object get_122_NavigationView_MenuItemsSource(object instance);
    private void set_122_NavigationView_MenuItemsSource(object instance, object Value);
    private object get_123_NavigationView_MenuItemTemplateSelector(object instance);
    private void set_123_NavigationView_MenuItemTemplateSelector(object instance, object Value);
    private object get_124_NavigationView_MenuItemTemplate(object instance);
    private void set_124_NavigationView_MenuItemTemplate(object instance, object Value);
    private object get_125_NavigationView_DisplayMode(object instance);
    private object get_126_NavigationView_MenuItems(object instance);
    private object get_127_NavigationView_SettingsItem(object instance);
    private object get_128_NavigationView_TemplateSettings(object instance);
    private object get_129_ItemsRepeaterScrollHost_ScrollViewer(object instance);
    private void set_129_ItemsRepeaterScrollHost_ScrollViewer(object instance, object Value);
    private object get_130_ItemsRepeaterScrollHost_VerticalAnchorRatio(object instance);
    private void set_130_ItemsRepeaterScrollHost_VerticalAnchorRatio(object instance, object Value);
    private object get_131_ItemsRepeaterScrollHost_HorizontalAnchorRatio(object instance);
    private void set_131_ItemsRepeaterScrollHost_HorizontalAnchorRatio(object instance, object Value);
    private object get_132_ItemsRepeaterScrollHost_CurrentAnchor(object instance);
    private object get_133_NavigationViewItem_Icon(object instance);
    private void set_133_NavigationViewItem_Icon(object instance, object Value);
    private object get_134_NavigationViewItem_SelectsOnInvoked(object instance);
    private void set_134_NavigationViewItem_SelectsOnInvoked(object instance, object Value);
    private object get_135_NavigationViewItem_MenuItemsSource(object instance);
    private void set_135_NavigationViewItem_MenuItemsSource(object instance, object Value);
    private object get_136_NavigationViewItem_IsExpanded(object instance);
    private void set_136_NavigationViewItem_IsExpanded(object instance, object Value);
    private object get_137_NavigationViewItem_IsChildSelected(object instance);
    private void set_137_NavigationViewItem_IsChildSelected(object instance, object Value);
    private object get_138_NavigationViewItem_HasUnrealizedChildren(object instance);
    private void set_138_NavigationViewItem_HasUnrealizedChildren(object instance, object Value);
    private object get_139_NavigationViewItem_CompactPaneLength(object instance);
    private object get_140_NavigationViewItem_MenuItems(object instance);
    private object get_141_NavigationViewItemBase_IsSelected(object instance);
    private void set_141_NavigationViewItemBase_IsSelected(object instance, object Value);
    private object get_142_ItemsRepeater_ItemTemplate(object instance);
    private void set_142_ItemsRepeater_ItemTemplate(object instance, object Value);
    private object get_143_ItemsRepeater_Layout(object instance);
    private void set_143_ItemsRepeater_Layout(object instance, object Value);
    private object get_144_ItemsRepeater_VerticalCacheLength(object instance);
    private void set_144_ItemsRepeater_VerticalCacheLength(object instance, object Value);
    private object get_145_ItemsRepeater_ItemsSource(object instance);
    private void set_145_ItemsRepeater_ItemsSource(object instance, object Value);
    private object get_146_ItemsRepeater_HorizontalCacheLength(object instance);
    private void set_146_ItemsRepeater_HorizontalCacheLength(object instance, object Value);
    private object get_147_ItemsRepeater_Background(object instance);
    private void set_147_ItemsRepeater_Background(object instance, object Value);
    private object get_148_ItemsRepeater_ItemsSourceView(object instance);
    private object get_149_StackLayout_Orientation(object instance);
    private void set_149_StackLayout_Orientation(object instance, object Value);
    private object get_150_StackLayout_Spacing(object instance);
    private void set_150_StackLayout_Spacing(object instance, object Value);
    private object get_151_ShellToolbarItemRenderer_ToolbarItem(object instance);
    private void set_151_ShellToolbarItemRenderer_ToolbarItem(object instance, object Value);
    private object get_152_ShellFlyoutItemRenderer_IsSelected(object instance);
    private void set_152_ShellFlyoutItemRenderer_IsSelected(object instance, object Value);
    private object get_153_TreeViewNode_IsExpanded(object instance);
    private void set_153_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_154_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_154_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_155_TreeViewNode_Content(object instance);
    private void set_155_TreeViewNode_Content(object instance, object Value);
    private object get_156_TreeViewNode_Children(object instance);
    private object get_157_TreeViewNode_Depth(object instance);
    private object get_158_TreeViewNode_HasChildren(object instance);
    private object get_159_TreeViewNode_Parent(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
internal class Xamarin.Forms.Platform.UAP.Xamarin_Forms_Platform_UAP_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.AccessibilityExtensions : object {
    [ExtensionAttribute]
public static void SetAutomationPropertiesAutomationId(FrameworkElement Control, string id);
    [ExtensionAttribute]
public static string SetAutomationPropertiesName(FrameworkElement Control, Element Element, string _defaultAutomationPropertiesName);
    [ExtensionAttribute]
public static Nullable`1<AccessibilityView> SetAutomationPropertiesAccessibilityView(FrameworkElement Control, Element Element, Nullable`1<AccessibilityView> _defaultAutomationPropertiesAccessibilityView);
    [ExtensionAttribute]
public static string SetAutomationPropertiesHelpText(FrameworkElement Control, Element Element, string _defaultAutomationPropertiesHelpText);
    [ExtensionAttribute]
public static UIElement SetAutomationPropertiesLabeledBy(FrameworkElement Control, Element Element, UIElement _defaultAutomationPropertiesLabeledBy);
    [ExtensionAttribute]
public static void SetBackButtonTitle(PageControl Control, Element Element);
    private static string ConcatenateNameAndHint(Element Element);
    [ExtensionAttribute]
internal static void SetAutomationProperties(FrameworkElement frameworkElement, Element element, string defaultName);
}
internal static class Xamarin.Forms.Platform.UWP.AccessKeyHelper : object {
    public static void UpdateAccessKey(FrameworkElement control, VisualElement element);
}
public class Xamarin.Forms.Platform.UWP.ActivityIndicatorRenderer : ViewRenderer`2<ActivityIndicator, FormsProgressBar> {
    private object _foregroundDefault;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ActivityIndicator> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnControlLoaded(object sender, RoutedEventArgs routedEventArgs);
    private void UpdateColor();
    private void UpdateIsRunning();
}
public class Xamarin.Forms.Platform.UWP.AlertDialog : ContentDialog {
    [CompilerGeneratedAttribute]
private ScrollBarVisibility <VerticalScrollBarVisibility>k__BackingField;
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    [CompilerGeneratedAttribute]
public ScrollBarVisibility get_VerticalScrollBarVisibility();
    [CompilerGeneratedAttribute]
public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    protected virtual void OnApplyTemplate();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.AlignmentExtensions : object {
    [ExtensionAttribute]
internal static TextAlignment ToNativeTextAlignment(TextAlignment alignment, EffectiveFlowDirection flowDirection);
    [ExtensionAttribute]
internal static VerticalAlignment ToNativeVerticalAlignment(TextAlignment alignment);
    [ExtensionAttribute]
internal static HorizontalAlignment ToNativeHorizontalAlignment(TextAlignment alignment);
}
public class Xamarin.Forms.Platform.UWP.ArrangeOverrideDelegate : MulticastDelegate {
    public ArrangeOverrideDelegate(object object, IntPtr method);
    public virtual Nullable`1<Size> Invoke(NativeViewWrapperRenderer renderer, Size finalSize);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, Size finalSize, AsyncCallback callback, object object);
    public virtual Nullable`1<Size> EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.AspectExtensions : object {
    [ExtensionAttribute]
public static Stretch ToStretch(Aspect aspect);
}
internal class Xamarin.Forms.Platform.UWP.BackgroundTracker`1 : VisualElementTracker`2<Page, T> {
    private DependencyProperty _backgroundProperty;
    private bool _backgroundNeedsUpdate;
    public BackgroundTracker`1(DependencyProperty backgroundProperty);
    protected virtual void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateNativeControl();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.BackgroundTracker`1/<UpdateBackground>d__5")]
private void UpdateBackground();
}
public class Xamarin.Forms.Platform.UWP.BoolToVisibilityConverter : object {
    [CompilerGeneratedAttribute]
private bool <FalseIsVisible>k__BackingField;
    public bool FalseIsVisible { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_FalseIsVisible();
    [CompilerGeneratedAttribute]
public void set_FalseIsVisible(bool value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Xamarin.Forms.Platform.UWP.BoxViewBorderRenderer : ViewRenderer`2<BoxView, Border> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    private void SetColor(Color color);
    private void SetCornerRadius(CornerRadius cornerRadius);
}
[ObsoleteAttribute("BoxViewRenderer is obsolete as of version 4.6.0. Please use BoxViewBorderRenderer instead.", "False")]
public class Xamarin.Forms.Platform.UWP.BoxViewRenderer : ViewRenderer`2<BoxView, Rectangle> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BoxView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void SetCornerRadius(CornerRadius cornerRadius);
}
public class Xamarin.Forms.Platform.UWP.BrushConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.BrushExtensions : object {
    [ExtensionAttribute]
public static Brush ToBrush(Brush brush);
}
internal static class Xamarin.Forms.Platform.UWP.BrushHelpers : object {
    public static void UpdateColor(Color color, Brush& defaultbrush, Func`1<Brush> getter, Action`1<Brush> setter);
    public static void UpdateBrush(Brush brush, Brush& defaultbrush, Func`1<Brush> getter, Action`1<Brush> setter);
}
public class Xamarin.Forms.Platform.UWP.ButtonRenderer : ViewRenderer`2<Button, FormsButton> {
    private bool _fontApplied;
    private FormsButton _button;
    private PointerEventHandler _pointerPressedHandler;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    private bool _isDisposed;
    protected bool PreventGestureBubbling { get; protected set; }
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    private void ButtonOnLoading(FrameworkElement sender, object args);
    private void ButtonOnLoaded(object o, RoutedEventArgs routedEventArgs);
    private void WireUpFormsVsm();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnButtonClick(object sender, RoutedEventArgs e);
    private void OnPointerPressed(object sender, RoutedEventArgs e);
    private void UpdateBackgroundBrush();
    private void UpdateBorderColor();
    private void UpdateBorderRadius();
    private void UpdateBorderWidth();
    private void UpdateCharacterSpacing();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ButtonRenderer/<UpdateContent>d__21")]
private void UpdateContent();
    private static StackPanel CreateContentContainer(ButtonContentLayout layout, Image image, string text);
    private void UpdateFont();
    private void UpdateTextColor();
    private void UpdatePadding();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.UWP.CarouselPageRenderer : FlipView {
    private bool _fromUpdate;
    private bool _disposed;
    private BackgroundTracker`1<FlipView> _tracker;
    [CompilerGeneratedAttribute]
private CarouselPage <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    public CarouselPage Element { get; private set; }
    public FrameworkElement ContainerElement { get; }
    private VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.Element { get; }
    private Page Page { get; }
    [CompilerGeneratedAttribute]
public CarouselPage get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(CarouselPage value);
    public sealed virtual void Dispose();
    public sealed virtual FrameworkElement get_ContainerElement();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_Element();
    private Page get_Page();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private sealed virtual override UIElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.GetNativeElement();
    public sealed virtual void SetElement(VisualElement element);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CarouselPage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnChildrenChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    private void UpdateCurrentPage();
}
public class Xamarin.Forms.Platform.UWP.CarouselViewRenderer : ItemsViewRenderer`1<CarouselView> {
    private ScrollViewer _scrollViewer;
    private Nullable`1<ScrollBarVisibility> _horizontalScrollBarVisibilityWithoutLoop;
    private Nullable`1<ScrollBarVisibility> _verticalScrollBarVisibilityWithoutLoop;
    private LoopableCollectionView _view;
    protected CarouselView CarouselView { get; }
    protected IItemsLayout Layout { get; }
    private LinearItemsLayout CarouselItemsLayout { get; }
    private DataTemplate CarouselItemsViewTemplate { get; }
    protected CarouselView get_CarouselView();
    protected virtual IItemsLayout get_Layout();
    private LinearItemsLayout get_CarouselItemsLayout();
    private DataTemplate get_CarouselItemsViewTemplate();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void UpdateLoop();
    protected virtual void HandleLayoutPropertyChanged(PropertyChangedEventArgs property);
    protected virtual void SetUpNewElement(ItemsView newElement);
    protected virtual void TearDownOldElement(ItemsView oldElement);
    protected virtual CollectionViewSource CreateCollectionViewSource();
    protected virtual ICollectionView GetCollectionView(CollectionViewSource collectionViewSource);
    protected virtual ListViewBase SelectListViewBase();
    protected virtual void UpdateItemTemplate();
    protected virtual ItemsViewScrolledEventArgs ComputeVisibleIndexes(ItemsViewScrolledEventArgs args, ItemsLayoutOrientation orientation, bool advancing);
    private void CollectionItemsSourceChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnScrollViewChanging(object sender, ScrollViewerViewChangingEventArgs e);
    private void OnScrollViewChanged(object sender, ScrollViewerViewChangedEventArgs e);
    private void UpdatePeekAreaInsets();
    private void UpdateIsSwipeEnabled();
    private void UpdateIsBounceEnabled();
    private void UpdateItemSpacing();
    private void UpdateSnapPointsType();
    private void UpdateSnapPointsAlignment();
    private int GetItemPositionInCarousel(object item);
    private void UpdateCarouselViewInitialPosition();
    private void CarouselScrolled(object sender, ItemsViewScrolledEventArgs e);
    private void UpdateFromCurrentItem();
    private void UpdateFromPosition();
    private void SetCarouselViewPosition(int position);
    private void SetCarouselViewCurrentItem(int carouselPosition);
    private bool IsValidPosition(int position);
    private ListViewBase CreateCarouselListLayout(ItemsLayoutOrientation layoutOrientation);
    private double GetItemWidth();
    private double GetItemHeight();
    private Thickness GetItemSpacing();
    private SnapPointsType GetWindowsSnapPointsType(SnapPointsType snapPointsType);
    private SnapPointsAlignment GetWindowsSnapPointsAlignment(SnapPointsAlignment snapPointsAlignment);
    protected virtual void OnScrollViewerFound(ScrollViewer scrollViewer);
    private void InitialSetup(object sender, SizeChangedEventArgs e);
    private void UpdateScrollBarVisibilityForLoop();
}
public class Xamarin.Forms.Platform.UWP.CaseConverter : object {
    [CompilerGeneratedAttribute]
private bool <ConvertToUpper>k__BackingField;
    public bool ConvertToUpper { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ConvertToUpper();
    [CompilerGeneratedAttribute]
public void set_ConvertToUpper(bool value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Xamarin.Forms.Platform.UWP.CellControl : ContentControl {
    public static DependencyProperty CellProperty;
    public static DependencyProperty IsGroupHeaderProperty;
    internal static BindableProperty MeasuredEstimateProperty;
    private Lazy`1<ListView> _listView;
    private PropertyChangedEventHandler _propertyChangedHandler;
    private Brush _defaultOnColor;
    private IList`1<MenuItem> _contextActions;
    private DataTemplate _currentTemplate;
    private bool _isListViewRealized;
    private object _newValue;
    public Cell Cell { get; public set; }
    public bool IsGroupHeader { get; public set; }
    protected FrameworkElement CellContent { get; }
    private static CellControl();
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    public Cell get_Cell();
    public void set_Cell(Cell value);
    public bool get_IsGroupHeader();
    public void set_IsGroupHeader(bool value);
    protected FrameworkElement get_CellContent();
    protected virtual Size MeasureOverride(Size availableSize);
    private ListView GetListView();
    private DataTemplate GetTemplate(Cell cell);
    private void OnCellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateOnColor();
    private void SetDefaultSwitchColor();
    private void OnClick(object sender, PointerRoutedEventArgs e);
    private void OnContextActionsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnDataContextChanged(FrameworkElement sender, DataContextChangedEventArgs args);
    private void OnLongTap(object sender, HoldingRoutedEventArgs e);
    private MenuFlyout GetAttachedFlyout();
    private void OpenContextMenu();
    private void SetCell(object newContext);
    private void SetSource(Cell oldCell, Cell newCell);
    private void SetupContextMenu();
    private void SetupMenuItems(MenuFlyout flyout);
    private void UpdateContent(Cell newCell);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void UpdateFlowDirection(Cell newCell);
}
public class Xamarin.Forms.Platform.UWP.CheckBoxRenderer : ViewRenderer`2<CheckBox, FormsCheckBox> {
    private static Brush _tintDefaultBrush;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    private static CheckBoxRenderer();
    protected virtual FormsCheckBox CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnNativeChecked(object sender, RoutedEventArgs routedEventArgs);
    private void UpdateFlowDirection();
    private void UpdateIsChecked();
    private void UpdateTintColor();
    [CompilerGeneratedAttribute]
private Brush <UpdateTintColor>b__13_0();
    [CompilerGeneratedAttribute]
private void <UpdateTintColor>b__13_1(Brush brush);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.ClipExtensions : object {
    [ExtensionAttribute]
public static void Clip(FrameworkElement frameworkElement, Geometry geometry);
    [ExtensionAttribute]
public static void ClipVisual(FrameworkElement frameworkElement, Geometry geometry);
}
public class Xamarin.Forms.Platform.UWP.CollapseWhenEmptyConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Xamarin.Forms.Platform.UWP.CollectionViewRenderer : GroupableItemsViewRenderer`1<GroupableItemsView> {
}
public class Xamarin.Forms.Platform.UWP.ColorConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.ColorExtensions : object {
    [ExtensionAttribute]
public static Color GetContrastingColor(Color color);
    [ExtensionAttribute]
public static Color ToFormsColor(Color color);
    [ExtensionAttribute]
public static Color ToFormsColor(SolidColorBrush solidColorBrush);
    [ExtensionAttribute]
public static Brush ToBrush(Color color);
    [ExtensionAttribute]
public static Color ToWindowsColor(Color color);
}
internal static class Xamarin.Forms.Platform.UWP.CompositionHelper : object {
    private static bool SetTypePresent;
    private static bool IsTypePresent;
    public static bool IsCompositionGeometryTypePresent { get; }
    public static bool get_IsCompositionGeometryTypePresent();
}
public class Xamarin.Forms.Platform.UWP.DatePickerRenderer : ViewRenderer`2<DatePicker, DatePicker> {
    private Brush _defaultBrush;
    private bool _fontApplied;
    private FontFamily _defaultFontFamily;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DatePicker> e);
    private void ControlOnLoaded(object sender, RoutedEventArgs routedEventArgs);
    internal virtual void OnElementFocusChangeRequested(object sender, FocusRequestArgs args);
    private void WireUpFormsVsm();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnControlDateChanged(object sender, DatePickerValueChangedEventArgs e);
    private bool CheckDateFormat();
    private void UpdateDate(DateTime date);
    private void UpdateMonth();
    private void UpdateDay();
    private void UpdateYear();
    private void UpdateFlowDirection();
    private void UpdateCharacterSpacing();
    private void UpdateFont();
    private void UpdateMaximumDate();
    private void UpdateMinimumDate();
    private void UpdateTextColor();
    [CompilerGeneratedAttribute]
private void <OnElementFocusChangeRequested>b__6_0(DatePickerFlyout p, DatePickedEventArgs e);
}
internal class Xamarin.Forms.Platform.UWP.DefaultRenderer : ViewRenderer`2<View, FrameworkElement> {
}
internal class Xamarin.Forms.Platform.UWP.Dispatcher : object {
    private CoreDispatcher _coreDispatcher;
    private bool Xamarin.Forms.IDispatcher.IsInvokeRequired { get; }
    public Dispatcher(CoreDispatcher coreDispatcher);
    public sealed virtual void BeginInvokeOnMainThread(Action action);
    private sealed virtual override bool Xamarin.Forms.IDispatcher.get_IsInvokeRequired();
}
internal class Xamarin.Forms.Platform.UWP.DispatcherProvider : object {
    [ThreadStaticAttribute]
private static Dispatcher s_current;
    public sealed virtual IDispatcher GetDispatcher(object context);
}
internal interface Xamarin.Forms.Platform.UWP.DualScreen.IDualScreenService {
    public bool IsSpanned { get; }
    public bool IsLandscape { get; }
    public Size ScaledScreenSize { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnScreenChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnScreenChanged(EventHandler value);
    public abstract virtual bool get_IsSpanned();
    public abstract virtual bool get_IsLandscape();
    public abstract virtual Rectangle GetHinge();
    public abstract virtual Size get_ScaledScreenSize();
    public abstract virtual Nullable`1<Point> GetLocationOnScreen(VisualElement visualElement);
    public abstract virtual object WatchForChangesOnLayout(VisualElement visualElement, Action action);
    public abstract virtual void StopWatchingForChangesOnLayout(VisualElement visualElement, object handle);
    public abstract virtual Task`1<int> GetHingeAngleAsync();
}
public class Xamarin.Forms.Platform.UWP.EditorRenderer : ViewRenderer`2<Editor, FormsTextBox> {
    private bool _fontApplied;
    private Brush _backgroundColorFocusedDefaultBrush;
    private Brush _textDefaultBrush;
    private Brush _defaultTextColorFocusBrush;
    private Brush _defaultPlaceholderColorFocusBrush;
    private Brush _placeholderDefaultBrush;
    private string _transformedText;
    private IEditorController ElementController { get; }
    private IEditorController get_ElementController();
    private FormsTextBox CreateTextBox();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackground();
    private void OnLostFocus(object sender, RoutedEventArgs e);
    private void UpdatePlaceholderText();
    private void UpdatePlaceholderColor();
    protected virtual void UpdateBackgroundColor();
    private void OnNativeTextChanged(object sender, TextChangedEventArgs args);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private void UpdateFont();
    private void UpdateInputScope();
    private void UpdateCharacterSpacing();
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateFlowDirection();
    private void UpdateMaxLength();
    private void UpdateDetectReadingOrderFromContent();
    private void UpdateIsReadOnly();
    [CompilerGeneratedAttribute]
private Brush <UpdateBackground>b__13_0();
    [CompilerGeneratedAttribute]
private void <UpdateBackground>b__13_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdatePlaceholderColor>b__16_0();
    [CompilerGeneratedAttribute]
private void <UpdatePlaceholderColor>b__16_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdatePlaceholderColor>b__16_2();
    [CompilerGeneratedAttribute]
private void <UpdatePlaceholderColor>b__16_3(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateBackgroundColor>b__17_0();
    [CompilerGeneratedAttribute]
private void <UpdateBackgroundColor>b__17_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateTextColor>b__24_0();
    [CompilerGeneratedAttribute]
private void <UpdateTextColor>b__24_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateTextColor>b__24_2();
    [CompilerGeneratedAttribute]
private void <UpdateTextColor>b__24_3(Brush brush);
}
public class Xamarin.Forms.Platform.UWP.ElementChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TElement <NewElement>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <OldElement>k__BackingField;
    public TElement NewElement { get; private set; }
    public TElement OldElement { get; private set; }
    public ElementChangedEventArgs`1(TElement oldElement, TElement newElement);
    [CompilerGeneratedAttribute]
public TElement get_NewElement();
    [CompilerGeneratedAttribute]
private void set_NewElement(TElement value);
    [CompilerGeneratedAttribute]
public TElement get_OldElement();
    [CompilerGeneratedAttribute]
private void set_OldElement(TElement value);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.ElementExtensions : object {
    [ExtensionAttribute]
internal static T FindParent(Element self);
}
public class Xamarin.Forms.Platform.UWP.EllipseRenderer : ShapeRenderer`2<Ellipse, Ellipse> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Ellipse> args);
}
public class Xamarin.Forms.Platform.UWP.EmbeddedFontLoader : object {
    private static string _fontCacheFolderName;
    public sealed virtual ValueTuple`2<bool, string> LoadFont(EmbeddedFont font);
    private static string CleanseFilePath(string filePath);
}
public class Xamarin.Forms.Platform.UWP.EntryCellRenderer : object {
    public virtual DataTemplate GetTemplate(Cell cell);
}
public class Xamarin.Forms.Platform.UWP.EntryCellRendererCompleted : object {
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public sealed virtual bool CanExecute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void Execute(object parameter);
}
public class Xamarin.Forms.Platform.UWP.EntryCellTextBox : TextBox {
    protected virtual void OnKeyUp(KeyRoutedEventArgs e);
}
public class Xamarin.Forms.Platform.UWP.EntryRenderer : ViewRenderer`2<Entry, FormsTextBox> {
    private bool _fontApplied;
    private Brush _backgroundColorFocusedDefaultBrush;
    private Brush _placeholderDefaultBrush;
    private Brush _textDefaultBrush;
    private Brush _defaultTextColorFocusBrush;
    private Brush _defaultPlaceholderColorFocusBrush;
    private bool _cursorPositionChangePending;
    private bool _selectionLengthChangePending;
    private bool _nativeSelectionIsUpdating;
    private string _transformedText;
    private IElementController ElementController { get; }
    private IElementController get_ElementController();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    private void TextBoxGotFocus(object sender, RoutedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    private void OnNativeTextChanged(object sender, TextChangedEventArgs args);
    private void TextBoxOnKeyUp(object sender, KeyRoutedEventArgs args);
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateFont();
    private void UpdateCharacterSpacing();
    private void UpdateClearButtonVisibility();
    private void UpdateInputScope();
    private void UpdateIsPassword();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateMaxLength();
    private void UpdateDetectReadingOrderFromContent();
    private void UpdateReturnType();
    private void SelectionChanged(object sender, RoutedEventArgs e);
    private void UpdateSelectionLength();
    private void UpdateCursorPosition();
    private void SetCursorPositionFromRenderer(int start);
    private void SetSelectionLengthFromRenderer(int selectionLength);
    private void UpdateIsReadOnly();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    [CompilerGeneratedAttribute]
private Brush <UpdateBackgroundColor>b__16_0();
    [CompilerGeneratedAttribute]
private void <UpdateBackgroundColor>b__16_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdatePlaceholderColor>b__27_0();
    [CompilerGeneratedAttribute]
private void <UpdatePlaceholderColor>b__27_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdatePlaceholderColor>b__27_2();
    [CompilerGeneratedAttribute]
private void <UpdatePlaceholderColor>b__27_3(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateTextColor>b__29_0();
    [CompilerGeneratedAttribute]
private void <UpdateTextColor>b__29_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateTextColor>b__29_2();
    [CompilerGeneratedAttribute]
private void <UpdateTextColor>b__29_3(Brush brush);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.Platform.UWP.ExportCellAttribute : HandlerAttribute {
    public ExportCellAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.Platform.UWP.ExportImageSourceHandlerAttribute : HandlerAttribute {
    public ExportImageSourceHandlerAttribute(Type handler, Type target);
}
[AttributeUsageAttribute("1")]
public class Xamarin.Forms.Platform.UWP.ExportRendererAttribute : HandlerAttribute {
    public ExportRendererAttribute(Type handler, Type target);
    public ExportRendererAttribute(Type handler, Type target, Type[] supportedVisuals);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.Extensions : object {
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable`1<T> DontSync(IAsyncOperation`1<T> self);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable DontSync(IAsyncAction self);
    [ExtensionAttribute]
public static void SetBinding(FrameworkElement self, DependencyProperty property, string path);
    [ExtensionAttribute]
public static void SetBinding(FrameworkElement self, DependencyProperty property, string path, IValueConverter converter);
    [ExtensionAttribute]
internal static InputScopeNameValue GetKeyboardButtonType(ReturnType returnType);
    [ExtensionAttribute]
internal static InputScope ToInputScope(ReturnType returnType);
    [ExtensionAttribute]
internal static ScrollBarVisibility ToUwpScrollBarVisibility(ScrollBarVisibility visibility);
    [ExtensionAttribute]
public static T Clamp(T value, T min, T max);
    [ExtensionAttribute]
internal static int ToEm(double pt);
}
public class Xamarin.Forms.Platform.UWP.FileImageSourceHandler : object {
    public sealed virtual Task`1<ImageSource> LoadImageAsync(ImageSource imagesource, CancellationToken cancellationToken);
    public sealed virtual Task`1<IconSource> LoadIconSourceAsync(ImageSource imagesource, CancellationToken cancellationToken);
    public sealed virtual Task`1<IconElement> LoadIconElementAsync(ImageSource imagesource, CancellationToken cancellationToken);
    private void UpdateImageDirectory(FileImageSource fileSource);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.FlowDirectionExtensions : object {
    [ExtensionAttribute]
internal static void UpdateFlowDirection(FrameworkElement control, IVisualElementController controller);
}
public class Xamarin.Forms.Platform.UWP.FlyoutPageControl : Control {
    public static DependencyProperty FlyoutProperty;
    public static DependencyProperty FlyoutTitleProperty;
    public static DependencyProperty DetailProperty;
    public static DependencyProperty IsPaneOpenProperty;
    public static DependencyProperty ShouldShowSplitModeProperty;
    public static DependencyProperty ShouldShowNavigationBarProperty;
    public static DependencyProperty CollapseStyleProperty;
    public static DependencyProperty CollapsedPaneWidthProperty;
    public static DependencyProperty DetailTitleProperty;
    public static DependencyProperty DetailTitleIconProperty;
    public static DependencyProperty DetailTitleViewProperty;
    public static DependencyProperty ToolbarForegroundProperty;
    public static DependencyProperty ToolbarBackgroundProperty;
    public static DependencyProperty FlyoutTitleVisibilityProperty;
    public static DependencyProperty DetailTitleVisibilityProperty;
    public static DependencyProperty DetailTitleViewVisibilityProperty;
    public static DependencyProperty FlyoutToolbarVisibilityProperty;
    public static DependencyProperty ContentTogglePaneButtonVisibilityProperty;
    private CommandBar _commandBar;
    private ToolbarPlacementHelper _toolbarPlacementHelper;
    private bool _firstLoad;
    private TaskCompletionSource`1<CommandBar> _commandBarTcs;
    private FrameworkElement _flyoutPresenter;
    private FrameworkElement _detailPresenter;
    private SplitView _split;
    private ToolbarPlacement _toolbarPlacement;
    private bool _toolbarDynamicOverflowEnabled;
    private FrameworkElement _titleViewPresenter;
    private TitleViewManager _titleViewManager;
    public bool ShouldShowToolbar { get; public set; }
    private protected string FlyoutPresenterTemplateName { get; }
    public FrameworkElement Detail { get; public set; }
    public Size DetailSize { get; }
    public string DetailTitle { get; public set; }
    public ImageSource DetailTitleIcon { get; public set; }
    public View DetailTitleView { get; public set; }
    public Visibility DetailTitleVisibility { get; public set; }
    public Visibility DetailTitleViewVisibility { get; public set; }
    public bool IsPaneOpen { get; public set; }
    public FrameworkElement Flyout { get; public set; }
    public Size FlyoutSize { get; }
    public string FlyoutTitle { get; public set; }
    public Visibility FlyoutTitleVisibility { get; public set; }
    public Visibility FlyoutToolbarVisibility { get; public set; }
    public bool ShouldShowSplitMode { get; public set; }
    public CollapseStyle CollapseStyle { get; public set; }
    public ToolbarPlacement ToolbarPlacement { get; public set; }
    public bool ToolbarDynamicOverflowEnabled { get; public set; }
    public Visibility ContentTogglePaneButtonVisibility { get; public set; }
    public double CollapsedPaneWidth { get; public set; }
    public Brush ToolbarBackground { get; public set; }
    public Brush ToolbarForeground { get; public set; }
    public bool ShouldShowNavigationBar { get; public set; }
    private View Xamarin.Forms.Platform.UWP.ITitleViewRendererController.TitleView { get; }
    private FrameworkElement Xamarin.Forms.Platform.UWP.ITitleViewRendererController.TitleViewPresenter { get; }
    private Visibility Xamarin.Forms.Platform.UWP.ITitleViewRendererController.TitleViewVisibility { get; private set; }
    private CommandBar Xamarin.Forms.Platform.UWP.ITitleViewRendererController.CommandBar { get; }
    private static FlyoutPageControl();
    public bool get_ShouldShowToolbar();
    public void set_ShouldShowToolbar(bool value);
    private protected virtual string get_FlyoutPresenterTemplateName();
    public FrameworkElement get_Detail();
    public void set_Detail(FrameworkElement value);
    public Size get_DetailSize();
    public string get_DetailTitle();
    public void set_DetailTitle(string value);
    public ImageSource get_DetailTitleIcon();
    public void set_DetailTitleIcon(ImageSource value);
    public View get_DetailTitleView();
    public void set_DetailTitleView(View value);
    public Visibility get_DetailTitleVisibility();
    public void set_DetailTitleVisibility(Visibility value);
    public Visibility get_DetailTitleViewVisibility();
    public void set_DetailTitleViewVisibility(Visibility value);
    public bool get_IsPaneOpen();
    public void set_IsPaneOpen(bool value);
    public FrameworkElement get_Flyout();
    public void set_Flyout(FrameworkElement value);
    public Size get_FlyoutSize();
    public string get_FlyoutTitle();
    public void set_FlyoutTitle(string value);
    public Visibility get_FlyoutTitleVisibility();
    public void set_FlyoutTitleVisibility(Visibility value);
    public Visibility get_FlyoutToolbarVisibility();
    public void set_FlyoutToolbarVisibility(Visibility value);
    public bool get_ShouldShowSplitMode();
    public void set_ShouldShowSplitMode(bool value);
    public CollapseStyle get_CollapseStyle();
    public void set_CollapseStyle(CollapseStyle value);
    public ToolbarPlacement get_ToolbarPlacement();
    public void set_ToolbarPlacement(ToolbarPlacement value);
    public bool get_ToolbarDynamicOverflowEnabled();
    public void set_ToolbarDynamicOverflowEnabled(bool value);
    public Visibility get_ContentTogglePaneButtonVisibility();
    public void set_ContentTogglePaneButtonVisibility(Visibility value);
    public double get_CollapsedPaneWidth();
    public void set_CollapsedPaneWidth(double value);
    public Brush get_ToolbarBackground();
    public void set_ToolbarBackground(Brush value);
    public Brush get_ToolbarForeground();
    public void set_ToolbarForeground(Brush value);
    public bool get_ShouldShowNavigationBar();
    public void set_ShouldShowNavigationBar(bool value);
    private sealed virtual override Task`1<CommandBar> Xamarin.Forms.Platform.UWP.IToolbarProvider.GetCommandBarAsync();
    protected virtual void OnApplyTemplate();
    private static void OnShouldShowSplitModeChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void CollapseStyleChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void CollapsedPaneWidthChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void OnTitleViewPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private void OnToggleClicked(object sender, RoutedEventArgs args);
    private void UpdateMode();
    private sealed virtual override View Xamarin.Forms.Platform.UWP.ITitleViewRendererController.get_TitleView();
    private sealed virtual override FrameworkElement Xamarin.Forms.Platform.UWP.ITitleViewRendererController.get_TitleViewPresenter();
    private sealed virtual override Visibility Xamarin.Forms.Platform.UWP.ITitleViewRendererController.get_TitleViewVisibility();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleViewRendererController.set_TitleViewVisibility(Visibility value);
    private sealed virtual override CommandBar Xamarin.Forms.Platform.UWP.ITitleViewRendererController.get_CommandBar();
    private void UpdateToolbarDynamicOverflowEnabled();
    [CompilerGeneratedAttribute]
private ToolbarPlacement <OnApplyTemplate>b__100_0();
}
public class Xamarin.Forms.Platform.UWP.FlyoutPageRenderer : object {
    private Page _master;
    private Page _detail;
    private bool _showTitle;
    private string _defaultAutomationPropertiesName;
    private Nullable`1<AccessibilityView> _defaultAutomationPropertiesAccessibilityView;
    private string _defaultAutomationPropertiesHelpText;
    private UIElement _defaultAutomationPropertiesLabeledBy;
    private VisualElementTracker`2<Page, FrameworkElement> _tracker;
    [CompilerGeneratedAttribute]
private FlyoutPageControl <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private FlyoutPage <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    public FlyoutPageControl Control { get; private set; }
    public FlyoutPage Element { get; private set; }
    protected VisualElementTracker`2<Page, FrameworkElement> Tracker { get; protected set; }
    unknown Brush Xamarin.Forms.Platform.UWP.ITitleProvider.BarBackgroundBrush {private set; }
    unknown Brush Xamarin.Forms.Platform.UWP.ITitleProvider.BarForegroundBrush {private set; }
    private bool Xamarin.Forms.Platform.UWP.ITitleProvider.ShowTitle { get; private set; }
    private string Xamarin.Forms.Platform.UWP.ITitleProvider.Title { get; private set; }
    private FrameworkElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.ContainerElement { get; }
    private VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.Element { get; }
    private ImageSource Xamarin.Forms.Platform.UWP.ITitleIconProvider.TitleIcon { get; private set; }
    private View Xamarin.Forms.Platform.UWP.ITitleViewProvider.TitleView { get; private set; }
    [CompilerGeneratedAttribute]
public FlyoutPageControl get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(FlyoutPageControl value);
    [CompilerGeneratedAttribute]
public FlyoutPage get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(FlyoutPage value);
    protected VisualElementTracker`2<Page, FrameworkElement> get_Tracker();
    protected void set_Tracker(VisualElementTracker`2<Page, FrameworkElement> value);
    public sealed virtual void Dispose();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_BarBackgroundBrush(Brush value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_BarForegroundBrush(Brush value);
    private sealed virtual override bool Xamarin.Forms.Platform.UWP.ITitleProvider.get_ShowTitle();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_ShowTitle(bool value);
    private sealed virtual override string Xamarin.Forms.Platform.UWP.ITitleProvider.get_Title();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_Title(string value);
    private sealed virtual override Task`1<CommandBar> Xamarin.Forms.Platform.UWP.IToolbarProvider.GetCommandBarAsync();
    private sealed virtual override FrameworkElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_ContainerElement();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_Element();
    private sealed virtual override ImageSource Xamarin.Forms.Platform.UWP.ITitleIconProvider.get_TitleIcon();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleIconProvider.set_TitleIcon(ImageSource value);
    private sealed virtual override View Xamarin.Forms.Platform.UWP.ITitleViewProvider.get_TitleView();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleViewProvider.set_TitleView(View value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private sealed virtual override UIElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.GetNativeElement();
    public sealed virtual void SetElement(VisualElement element);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<FlyoutPage> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ClearDetail();
    private void ClearMaster();
    private void OnControlLoaded(object sender, RoutedEventArgs routedEventArgs);
    private void OnControlUnloaded(object sender, RoutedEventArgs routedEventArgs);
    private void OnDetailPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnIsPaneOpenChanged(DependencyObject sender, DependencyProperty dp);
    private void OnMasterPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnNativeSizeChanged(object sender, SizeChangedEventArgs e);
    private void UpdateBounds();
    private void UpdateDetail();
    private void UpdateDetailTitle();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.FlyoutPageRenderer/<UpdateDetailTitleIcon>d__60")]
private void UpdateDetailTitleIcon();
    private void UpdateDetailTitleView();
    private void UpdateFlowDirection();
    private void UpdateIsPresented();
    private void UpdateMaster();
    private void UpdateMode();
    private void UpdateToolbarPlacement();
    private void UpdateToolbarDynamicOverflowEnabled();
    private void UpdateToolbarVisibility();
    public sealed virtual void BindForegroundColor(AppBar appBar);
    public sealed virtual void BindForegroundColor(AppBarButton button);
    private void SetAppBarForegroundBinding(FrameworkElement element);
    private Page GetCurrentPage();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.FontExtensions : object {
    [ThreadStaticAttribute]
private static Dictionary`2<string, FontFamily> FontFamilies;
    private static double DefaultFontSize;
    private static FontExtensions();
    [ExtensionAttribute]
public static void ApplyFont(Control self, Font font);
    [ExtensionAttribute]
public static void ApplyFont(TextBlock self, Font font);
    [ExtensionAttribute]
public static void ApplyFont(TextElement self, Font font);
    [ExtensionAttribute]
internal static void ApplyFont(Control self, IFontElement element);
    [ExtensionAttribute]
internal static double GetFontSize(NamedSize size);
    [ExtensionAttribute]
internal static bool IsDefault(IFontElement self);
    [ExtensionAttribute]
public static FontFamily ToFontFamily(Font font);
    [ExtensionAttribute]
public static FontFamily ToFontFamily(string fontFamily);
    private static string FindFontFamilyName(string fontFile);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.UWP.FontExtensions/<GetAllFontPossibilities>d__11")]
private static IEnumerable`1<string> GetAllFontPossibilities(string fontFamily);
}
public class Xamarin.Forms.Platform.UWP.FontImageSourceHandler : object {
    private float _minimumDpi;
    public sealed virtual Task`1<ImageSource> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken);
    public sealed virtual Task`1<IconSource> LoadIconSourceAsync(ImageSource imagesource, CancellationToken cancellationToken);
    public sealed virtual Task`1<IconElement> LoadIconElementAsync(ImageSource imagesource, CancellationToken cancellationToken);
    private string GetFontSource(FontImageSource fontImageSource);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.FormattedStringExtensions : object {
    [ExtensionAttribute]
public static Run ToRun(Span span);
}
public class Xamarin.Forms.Platform.UWP.FormsButton : Button {
    public static DependencyProperty BorderRadiusProperty;
    public static DependencyProperty BackgroundColorProperty;
    private ContentPresenter _contentPresenter;
    private Grid _rootGrid;
    public Brush BackgroundColor { get; public set; }
    public int BorderRadius { get; public set; }
    private static FormsButton();
    public Brush get_BackgroundColor();
    public void set_BackgroundColor(Brush value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    protected virtual void OnApplyTemplate();
    private static void OnBackgroundColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBorderRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateBackgroundColor();
    private void UpdateBorderRadius();
    public void UpdateCharacterSpacing(int characterSpacing);
}
internal class Xamarin.Forms.Platform.UWP.FormsCancelButton : Button {
    private TextBlock _cancelButtonGlyph;
    private Border _cancelButtonBackground;
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler ReadyChanged;
    public Brush ForegroundBrush { get; public set; }
    public Brush BackgroundBrush { get; public set; }
    public bool IsReady { get; private set; }
    public Brush get_ForegroundBrush();
    public void set_ForegroundBrush(Brush value);
    public Brush get_BackgroundBrush();
    public void set_BackgroundBrush(Brush value);
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
private void set_IsReady(bool value);
    [CompilerGeneratedAttribute]
public void add_ReadyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReadyChanged(EventHandler value);
    protected virtual void OnApplyTemplate();
    protected virtual void OnReadyChanged();
}
public class Xamarin.Forms.Platform.UWP.FormsCheckBox : CheckBox {
    public static DependencyProperty TintBrushProperty;
    public static DependencyProperty DefaultFillBrushProperty;
    public Brush TintBrush { get; public set; }
    public Brush DefaultFillBrush { get; public set; }
    private static FormsCheckBox();
    private static void OnTintBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_TintBrush();
    public void set_TintBrush(Brush value);
    public Brush get_DefaultFillBrush();
    public void set_DefaultFillBrush(Brush value);
}
public class Xamarin.Forms.Platform.UWP.FormsComboBox : ComboBox {
    [CompilerGeneratedAttribute]
private bool <IsClosingAnimated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpeningAnimated>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ClosedAnimationStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> OpenAnimationCompleted;
    internal bool IsClosingAnimated { get; private set; }
    internal bool IsFullScreen { get; }
    internal bool IsOpeningAnimated { get; private set; }
    private void FormsComboBoxDropDownOpened(object sender, object e);
    private void FormsComboBoxSelectionChanged(object sender, SelectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
internal bool get_IsClosingAnimated();
    [CompilerGeneratedAttribute]
private void set_IsClosingAnimated(bool value);
    internal bool get_IsFullScreen();
    [CompilerGeneratedAttribute]
internal bool get_IsOpeningAnimated();
    [CompilerGeneratedAttribute]
private void set_IsOpeningAnimated(bool value);
    protected virtual void OnApplyTemplate();
    protected virtual void OnClosedAnimationStarted();
    protected virtual void OnOpenAnimationCompleted();
    [CompilerGeneratedAttribute]
internal void add_ClosedAnimationStarted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ClosedAnimationStarted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_OpenAnimationCompleted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_OpenAnimationCompleted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__13_0(object sender, object o);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__13_1(object sender, object o);
}
public class Xamarin.Forms.Platform.UWP.FormsCommandBar : CommandBar {
    private Button _moreButton;
    private ItemsControl _primaryItemsControl;
    private bool _isInValidLocation;
    private static DependencyProperty s_contentChangeWatcher;
    public bool IsInValidLocation { get; public set; }
    private static FormsCommandBar();
    public bool get_IsInValidLocation();
    public void set_IsInValidLocation(bool value);
    protected virtual void OnApplyTemplate();
    private void OnCommandsChanged(IObservableVector`1<ICommandBarElement> sender, IVectorChangedEventArgs args);
    private void UpdateVisibility();
    private void WatchForContentChanges();
    private static void ContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.UWP.FormsEmbeddedPageWrapper : Page {
    internal static Dictionary`2<Guid, ContentPage> Pages;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private ContentPresenter Root;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private bool _contentLoaded;
    private static FormsEmbeddedPageWrapper();
    protected virtual void OnNavigatedTo(NavigationEventArgs e);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
public class Xamarin.Forms.Platform.UWP.FormsFlyout : UserControl {
    private ActionSheetArguments options;
    [CompilerGeneratedAttribute]
private EventHandler OptionSelected;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private Button LeftBtn;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private Button RightBtn;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private TextBlock TitleBlock;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private ListView OptionsList;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private bool _contentLoaded;
    public FormsFlyout(ActionSheetArguments sheetOptions);
    [CompilerGeneratedAttribute]
public void add_OptionSelected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OptionSelected(EventHandler value);
    private void ListItemSelected(object sender, ItemClickEventArgs e);
    private void ActionButtonClicked(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
internal class Xamarin.Forms.Platform.UWP.FormsGridView : GridView {
    private int _span;
    private ItemsWrapGrid _wrapGrid;
    private ContentControl _emptyViewContentControl;
    private FrameworkElement _emptyView;
    private View _formsEmptyView;
    private Orientation _orientation;
    public static DependencyProperty EmptyViewVisibilityProperty;
    public int Span { get; public set; }
    public Visibility EmptyViewVisibility { get; public set; }
    public Orientation Orientation { get; public set; }
    private static FormsGridView();
    public int get_Span();
    public void set_Span(int value);
    public sealed virtual Visibility get_EmptyViewVisibility();
    public sealed virtual void set_EmptyViewVisibility(Visibility value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private void FindItemsWrapGrid();
    private void WrapGridSizeChanged(object sender, SizeChangedEventArgs e);
    private void UpdateItemSize();
    private void ItemsPanelChanged(DependencyObject sender, DependencyProperty dp);
    private void OnLoaded(object sender, RoutedEventArgs e);
    public sealed virtual void SetEmptyView(FrameworkElement emptyView, View formsEmptyView);
    protected virtual void OnApplyTemplate();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
internal class Xamarin.Forms.Platform.UWP.FormsListView : ListView {
    private ContentControl _emptyViewContentControl;
    private FrameworkElement _emptyView;
    private View _formsEmptyView;
    public static DependencyProperty EmptyViewVisibilityProperty;
    public Visibility EmptyViewVisibility { get; public set; }
    private static FormsListView();
    public sealed virtual Visibility get_EmptyViewVisibility();
    public sealed virtual void set_EmptyViewVisibility(Visibility value);
    public sealed virtual void SetEmptyView(FrameworkElement emptyView, View formsEmptyView);
    protected virtual void OnApplyTemplate();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
public class Xamarin.Forms.Platform.UWP.FormsPivot : Pivot {
    public static DependencyProperty TitleVisibilityProperty;
    public static DependencyProperty ToolbarForegroundProperty;
    public static DependencyProperty ToolbarBackgroundProperty;
    private CommandBar _commandBar;
    private ToolbarPlacementHelper _toolbarPlacementHelper;
    private TaskCompletionSource`1<CommandBar> _commandBarTcs;
    private ToolbarPlacement _toolbarPlacement;
    private bool _toolbarDynamicOverflowEnabled;
    public bool ShouldShowToolbar { get; public set; }
    public Brush ToolbarBackground { get; public set; }
    public Brush ToolbarForeground { get; public set; }
    public Visibility TitleVisibility { get; public set; }
    public ToolbarPlacement ToolbarPlacement { get; public set; }
    public bool ToolbarDynamicOverflowEnabled { get; public set; }
    private static FormsPivot();
    public bool get_ShouldShowToolbar();
    public void set_ShouldShowToolbar(bool value);
    public Brush get_ToolbarBackground();
    public void set_ToolbarBackground(Brush value);
    public Brush get_ToolbarForeground();
    public void set_ToolbarForeground(Brush value);
    public Visibility get_TitleVisibility();
    public void set_TitleVisibility(Visibility value);
    public ToolbarPlacement get_ToolbarPlacement();
    public void set_ToolbarPlacement(ToolbarPlacement value);
    public bool get_ToolbarDynamicOverflowEnabled();
    public void set_ToolbarDynamicOverflowEnabled(bool value);
    private sealed virtual override Task`1<CommandBar> Xamarin.Forms.Platform.UWP.IToolbarProvider.GetCommandBarAsync();
    protected virtual void OnApplyTemplate();
    protected virtual DependencyObject GetContainerForItemOverride();
    private static void SetPivotItemAutomationName(FrameworkElement frameworkElement, DataContextChangedEventArgs dataContextChangedEventArgs);
    private void UpdateToolbarDynamicOverflowEnabled();
    [CompilerGeneratedAttribute]
private ToolbarPlacement <OnApplyTemplate>b__27_0();
}
internal class Xamarin.Forms.Platform.UWP.FormsPresenter : ContentPresenter {
    private void FormsPresenter_Loaded(object sender, RoutedEventArgs e);
    private void FormsPresenter_Unloaded(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object s, SizeChangedEventArgs e);
}
public class Xamarin.Forms.Platform.UWP.FormsProgressBar : ProgressBar {
    public static DependencyProperty ElementOpacityProperty;
    public double ElementOpacity { get; public set; }
    private static FormsProgressBar();
    public double get_ElementOpacity();
    public void set_ElementOpacity(double value);
    protected virtual Size MeasureOverride(Size availableSize);
}
public class Xamarin.Forms.Platform.UWP.FormsRadioButton : RadioButton {
    public static DependencyProperty BorderRadiusProperty;
    public static DependencyProperty BackgroundColorProperty;
    private ContentPresenter _contentPresenter;
    public Brush BackgroundColor { get; public set; }
    public int BorderRadius { get; public set; }
    private static FormsRadioButton();
    public Brush get_BackgroundColor();
    public void set_BackgroundColor(Brush value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    protected virtual void OnApplyTemplate();
    private static void OnBackgroundColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBorderRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateBackgroundColor();
    private void UpdateBorderRadius();
}
public class Xamarin.Forms.Platform.UWP.FormsSlider : Slider {
    [CompilerGeneratedAttribute]
private Thumb <Thumb>k__BackingField;
    [CompilerGeneratedAttribute]
private Thumb <ImageThumb>k__BackingField;
    public static DependencyProperty ThumbImageSourceProperty;
    [ObsoleteAttribute("ThumbImageProperty is obsolete as of 4.0.0. Please use ThumbImageSourceProperty instead.")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty ThumbImageProperty;
    [CompilerGeneratedAttribute]
private EventHandler Ready;
    internal Thumb Thumb { get; internal set; }
    internal Thumb ImageThumb { get; internal set; }
    public ImageSource ThumbImageSource { get; public set; }
    [ObsoleteAttribute("ThumbImage is obsolete as of 4.0.0. Please use ThumbImageSource instead.")]
[EditorBrowsableAttribute("1")]
public BitmapImage ThumbImage { get; public set; }
    private static FormsSlider();
    [CompilerGeneratedAttribute]
internal Thumb get_Thumb();
    [CompilerGeneratedAttribute]
internal void set_Thumb(Thumb value);
    [CompilerGeneratedAttribute]
internal Thumb get_ImageThumb();
    [CompilerGeneratedAttribute]
internal void set_ImageThumb(Thumb value);
    private static void PropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void SwapThumbs(FormsSlider slider);
    public ImageSource get_ThumbImageSource();
    public void set_ThumbImageSource(ImageSource value);
    public BitmapImage get_ThumbImage();
    public void set_ThumbImage(BitmapImage value);
    [CompilerGeneratedAttribute]
internal void add_Ready(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Ready(EventHandler value);
    protected virtual void OnApplyTemplate();
    protected virtual void OnReady();
}
public class Xamarin.Forms.Platform.UWP.FormsTextBox : TextBox {
    private static char ObfuscationCharacter;
    public static DependencyProperty PlaceholderForegroundBrushProperty;
    public static DependencyProperty PlaceholderForegroundFocusBrushProperty;
    public static DependencyProperty ForegroundFocusBrushProperty;
    public static DependencyProperty BackgroundFocusBrushProperty;
    public static DependencyProperty IsPasswordProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty ClearButtonVisibleProperty;
    private InputScope _passwordInputScope;
    private InputScope _numericPasswordInputScope;
    private ScrollViewer _scrollViewer;
    private Grid _rootGrid;
    private VisualState _DeleteButtonVisibleState;
    private VisualStateGroup _DeleteButtonVisibleStateGroups;
    private InputScope _cachedInputScope;
    private bool _cachedPredictionsSetting;
    private bool _cachedSpellCheckSetting;
    private CancellationTokenSource _cts;
    private bool _internalChangeFlag;
    private int _cachedSelectionLength;
    [CompilerGeneratedAttribute]
private bool <UpdateVerticalAlignmentOnLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFormsVsm>k__BackingField;
    private static FormsTextBox _copyOfTextBox;
    private static Size _zeroSize;
    internal bool UpdateVerticalAlignmentOnLoad { get; internal set; }
    public bool ClearButtonVisible { get; public set; }
    public Brush BackgroundFocusBrush { get; public set; }
    public Brush ForegroundFocusBrush { get; public set; }
    public bool IsPassword { get; public set; }
    internal bool UseFormsVsm { get; internal set; }
    public Brush PlaceholderForegroundBrush { get; public set; }
    public Brush PlaceholderForegroundFocusBrush { get; public set; }
    public string Text { get; public set; }
    private InputScope PasswordInputScope { get; }
    private InputScope NumericPasswordInputScope { get; }
    private static FormsTextBox();
    private void OnIsEnabledChanged(object sender, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    [CompilerGeneratedAttribute]
internal bool get_UpdateVerticalAlignmentOnLoad();
    [CompilerGeneratedAttribute]
internal void set_UpdateVerticalAlignmentOnLoad(bool value);
    public bool get_ClearButtonVisible();
    public void set_ClearButtonVisible(bool value);
    public Brush get_BackgroundFocusBrush();
    public void set_BackgroundFocusBrush(Brush value);
    public Brush get_ForegroundFocusBrush();
    public void set_ForegroundFocusBrush(Brush value);
    public bool get_IsPassword();
    public void set_IsPassword(bool value);
    [CompilerGeneratedAttribute]
internal bool get_UseFormsVsm();
    [CompilerGeneratedAttribute]
internal void set_UseFormsVsm(bool value);
    public Brush get_PlaceholderForegroundBrush();
    public void set_PlaceholderForegroundBrush(Brush value);
    public Brush get_PlaceholderForegroundFocusBrush();
    public void set_PlaceholderForegroundFocusBrush(Brush value);
    public string get_Text();
    public void set_Text(string value);
    private InputScope get_PasswordInputScope();
    private InputScope get_NumericPasswordInputScope();
    protected virtual void OnApplyTemplate();
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnVerticalContentAlignmentChanged(DependencyObject sender, DependencyProperty dp);
    private void UpdateTemplateScrollViewerVerticalAlignment();
    private void DelayObfuscation();
    private static string DetermineTextFromPassword(string realText, int start, string passwordText);
    private string Obfuscate(string text, bool leaveLastVisible);
    private static void OnIsPasswordChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private void OnSelectionChanged(object sender, RoutedEventArgs routedEventArgs);
    protected virtual void OnKeyDown(KeyRoutedEventArgs e);
    private void OnTextChanged(object sender, TextChangedEventArgs textChangedEventArgs);
    private void SyncBaseText();
    private void UpdateClearButtonVisible();
    private static void ClearButtonVisibleChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void TextPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void UpdateInputScope();
    private static void FocusPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    internal void UpdateEnabled();
    public static Size GetCopyOfSize(FormsTextBox control, Size constraint);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.FormsTextBox/<<DelayObfuscation>b__59_0>d")]
[CompilerGeneratedAttribute]
private Task <DelayObfuscation>b__59_0();
    [CompilerGeneratedAttribute]
private void <DelayObfuscation>b__59_1();
}
public class Xamarin.Forms.Platform.UWP.FrameRenderer : ViewRenderer`2<Frame, Border> {
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Frame> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    private void PackChild();
    private void UpdateBorder();
    private void UpdateCornerRadius();
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.FrameworkElementExtensions : object {
    private static Lazy`1<ConcurrentDictionary`2<Type, DependencyProperty>> ForegroundProperties;
    private static FrameworkElementExtensions();
    [ExtensionAttribute]
public static Brush GetForeground(FrameworkElement element);
    [ExtensionAttribute]
public static Binding GetForegroundBinding(FrameworkElement element);
    [ExtensionAttribute]
public static object GetForegroundCache(FrameworkElement element);
    [ExtensionAttribute]
public static void RestoreForegroundCache(FrameworkElement element, object cache);
    [ExtensionAttribute]
public static void SetForeground(FrameworkElement element, Brush foregroundBrush);
    [ExtensionAttribute]
public static void SetForeground(FrameworkElement element, Binding binding);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.UWP.FrameworkElementExtensions/<GetDescendantsByName>d__7`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> GetDescendantsByName(DependencyObject parent, string elementName);
    [ExtensionAttribute]
internal static T GetFirstDescendant(DependencyObject element);
    private static DependencyProperty GetForegroundProperty(FrameworkElement element);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.UWP.FrameworkElementExtensions/<GetChildren>d__10`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> GetChildren(DependencyObject parent);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.GeometryExtensions : object {
    [ExtensionAttribute]
public static Geometry ToWindows(Geometry geometry);
    private static FillRule ConvertFillRule(FillRule fillRule);
}
public class Xamarin.Forms.Platform.UWP.GetDesiredSizeDelegate : MulticastDelegate {
    public GetDesiredSizeDelegate(object object, IntPtr method);
    public virtual Nullable`1<SizeRequest> Invoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, double widthConstraint, double heightConstraint, AsyncCallback callback, object object);
    public virtual Nullable`1<SizeRequest> EndInvoke(IAsyncResult result);
}
public class Xamarin.Forms.Platform.UWP.GroupableItemsViewRenderer`1 : SelectableItemsViewRenderer`1<TItemsView> {
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual CollectionViewSource CreateCollectionViewSource();
    protected virtual void UpdateItemTemplate();
    protected virtual object FindBoundItem(ScrollToRequestEventArgs args);
}
internal class Xamarin.Forms.Platform.UWP.GroupedItemTemplateCollection : ObservableCollection`1<GroupTemplateContext> {
    private IEnumerable _itemsSource;
    private DataTemplate _itemTemplate;
    private DataTemplate _groupHeaderTemplate;
    private DataTemplate _groupFooterTemplate;
    private BindableObject _container;
    private IList _groupList;
    public GroupedItemTemplateCollection(IEnumerable itemsSource, DataTemplate itemTemplate, DataTemplate groupHeaderTemplate, DataTemplate groupFooterTemplate, BindableObject container);
    private GroupTemplateContext CreateGroupTemplateContext(object group);
    private void GroupsChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void GroupsChanged(NotifyCollectionChangedEventArgs args);
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Reset();
}
internal class Xamarin.Forms.Platform.UWP.GroupFooterItemTemplateContext : ItemTemplateContext {
    public GroupFooterItemTemplateContext(DataTemplate formsDataTemplate, object item, BindableObject container, Nullable`1<double> height, Nullable`1<double> width, Nullable`1<Thickness> itemSpacing);
    public static void EnsureSelectionDisabled(DependencyObject element, object item);
}
internal class Xamarin.Forms.Platform.UWP.GroupHeaderStyleSelector : GroupStyleSelector {
    protected virtual GroupStyle SelectGroupStyleCore(object group, UInt32 level);
}
internal class Xamarin.Forms.Platform.UWP.GroupTemplateContext : object {
    [CompilerGeneratedAttribute]
private ItemTemplateContext <HeaderItemTemplateContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemTemplateContext <FooterItemTemplateContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Items>k__BackingField;
    public ItemTemplateContext HeaderItemTemplateContext { get; }
    public ItemTemplateContext FooterItemTemplateContext { get; }
    public object Items { get; }
    public GroupTemplateContext(ItemTemplateContext headerItemTemplateContext, ItemTemplateContext footerItemTemplateContext, object items);
    [CompilerGeneratedAttribute]
public ItemTemplateContext get_HeaderItemTemplateContext();
    [CompilerGeneratedAttribute]
public ItemTemplateContext get_FooterItemTemplateContext();
    [CompilerGeneratedAttribute]
public object get_Items();
}
public class Xamarin.Forms.Platform.UWP.HeightConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Xamarin.Forms.Platform.UWP.HorizontalTextAlignmentConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public interface Xamarin.Forms.Platform.UWP.ICellRenderer {
    public abstract virtual DataTemplate GetTemplate(Cell cell);
}
public interface Xamarin.Forms.Platform.UWP.IDontGetFocus {
}
internal interface Xamarin.Forms.Platform.UWP.IEmptyView {
    public Visibility EmptyViewVisibility { get; public set; }
    public abstract virtual Visibility get_EmptyViewVisibility();
    public abstract virtual void set_EmptyViewVisibility(Visibility value);
    public abstract virtual void SetEmptyView(FrameworkElement emptyView, View formsEmptyView);
}
public interface Xamarin.Forms.Platform.UWP.IIconElementHandler {
    public abstract virtual Task`1<IconSource> LoadIconSourceAsync(ImageSource imagesource, CancellationToken cancellationToken);
    public abstract virtual Task`1<IconElement> LoadIconElementAsync(ImageSource imagesource, CancellationToken cancellationToken);
}
public interface Xamarin.Forms.Platform.UWP.IImageSourceHandler {
    public abstract virtual Task`1<ImageSource> LoadImageAsync(ImageSource imagesource, CancellationToken cancellationToken);
}
public interface Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void SetImage(ImageSource image);
    public abstract virtual Image GetImage();
}
public class Xamarin.Forms.Platform.UWP.ImageButtonRenderer : ViewRenderer`2<ImageButton, FormsButton> {
    private bool _measured;
    private bool _disposed;
    private Image _image;
    private FormsButton _formsButton;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    private bool Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.IsDisposed { get; }
    protected virtual void Dispose(bool disposing);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageButtonRenderer/<OnElementChanged>d__7")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageButton> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageButtonRenderer/<TryUpdateSource>d__8")]
protected virtual Task TryUpdateSource();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageButtonRenderer/<UpdateSource>d__9")]
protected Task UpdateSource();
    private void OnImageOpened(object sender, RoutedEventArgs routedEventArgs);
    protected virtual void OnImageFailed(object sender, ExceptionRoutedEventArgs exceptionRoutedEventArgs);
    private void ButtonOnLoaded(object o, RoutedEventArgs routedEventArgs);
    private void WireUpFormsVsm();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageButtonRenderer/<OnElementPropertyChanged>d__14")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdatePadding();
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private sealed virtual override bool Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.get_IsDisposed();
    private void OnButtonClick(object sender, RoutedEventArgs e);
    private void OnPointerPressed(object sender, RoutedEventArgs e);
    private void UpdateImageButtonBackground();
    private void UpdateBorderColor();
    private void UpdateBorderRadius();
    private void UpdateBorderWidth();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.SetImage(ImageSource image);
    private sealed virtual override Image Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.GetImage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<ImageButton> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
public class Xamarin.Forms.Platform.UWP.ImageCellRenderer : object {
    public virtual DataTemplate GetTemplate(Cell cell);
}
public class Xamarin.Forms.Platform.UWP.ImageConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public static class Xamarin.Forms.Platform.UWP.ImageElementManager : object {
    private static bool _nativeAnimationSupport;
    private static ImageElementManager();
    public static void Init(IImageVisualElementRenderer renderer);
    internal static void Dispose(IImageVisualElementRenderer renderer);
    private static void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void StartStopAnimation(IImageVisualElementRenderer renderer, IImageElement controller);
    private static void OnIsPlaying(DependencyObject sender, DependencyProperty dp);
    private static void OnElementChanged(object sender, VisualElementChangedEventArgs e);
    private static void OnControlChanged(object sender, EventArgs e);
    public static void UpdateAspect(IImageVisualElementRenderer renderer, IImageElement controller);
    private static Stretch GetStretch(Aspect aspect);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageElementManager/<UpdateSource>d__11")]
public static Task UpdateSource(IImageVisualElementRenderer renderer);
    internal static void RefreshImage(IImageVisualElementRenderer renderer);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.ImageExtensions : object {
    [ExtensionAttribute]
public static Size GetImageSourceSize(ImageSource source);
    [ExtensionAttribute]
public static IconSource ToWindowsIconSource(ImageSource source);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageExtensions/<ToWindowsIconSourceAsync>d__2")]
[ExtensionAttribute]
public static Task`1<IconSource> ToWindowsIconSourceAsync(ImageSource source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IconElement ToWindowsIconElement(ImageSource source);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageExtensions/<ToWindowsIconElementAsync>d__4")]
[ExtensionAttribute]
public static Task`1<IconElement> ToWindowsIconElementAsync(ImageSource source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ImageSource ToWindowsImageSource(ImageSource source);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageExtensions/<ToWindowsImageSourceAsync>d__6")]
[ExtensionAttribute]
public static Task`1<ImageSource> ToWindowsImageSourceAsync(ImageSource source, CancellationToken cancellationToken);
}
public class Xamarin.Forms.Platform.UWP.ImageRenderer : ViewRenderer`2<Image, Image> {
    private bool _measured;
    private bool _disposed;
    private bool Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.IsDisposed { get; }
    private sealed virtual override bool Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.get_IsDisposed();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageRenderer/<OnElementChanged>d__7")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageRenderer/<OnElementPropertyChanged>d__8")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnImageOpened(object sender, RoutedEventArgs routedEventArgs);
    protected virtual void OnImageFailed(object sender, ExceptionRoutedEventArgs exceptionRoutedEventArgs);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageRenderer/<TryUpdateSource>d__11")]
protected virtual Task TryUpdateSource();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageRenderer/<UpdateSource>d__12")]
protected Task UpdateSource();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ImageRenderer/<OnResumingAsync>d__13")]
private void OnResumingAsync(object sender, object e);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.SetImage(ImageSource image);
    private sealed virtual override Image Xamarin.Forms.Platform.UWP.IImageVisualElementRenderer.GetImage();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Image> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
internal class Xamarin.Forms.Platform.UWP.ImageSourceIconElementConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
internal class Xamarin.Forms.Platform.UWP.IndicatorViewRenderer : ViewRenderer`2<IndicatorView, FrameworkElement> {
    private static int DefaultPadding;
    private SolidColorBrush _selectedColor;
    private SolidColorBrush _fillColor;
    private ObservableCollection`1<Shape> _dots;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<IndicatorView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateControl();
    private FrameworkElement CreateNativeControl();
    private void UpdateIndicatorsColor();
    private ItemsPanelTemplate GetItemsPanelTemplate();
    private void CreateIndicators();
    private Shape CreateIndicator(int i, int position);
}
internal class Xamarin.Forms.Platform.UWP.InterceptVisualStateManager : VisualStateManager {
    private static InterceptVisualStateManager s_instance;
    public static DependencyProperty FormsElementProperty;
    internal static InterceptVisualStateManager Instance { get; }
    private static InterceptVisualStateManager();
    public static void SetFormsElement(Control frameworkElement, VisualElement value);
    public static VisualElement GetFormsElement(Control frameworkElement);
    internal static InterceptVisualStateManager get_Instance();
    protected virtual bool GoToStateCore(Control control, FrameworkElement templateRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions);
    private static bool ShouldIntercept(Control control, VisualState state, string stateName);
    internal static void Hook(FrameworkElement rootElement, Control control, VisualElement visualElement);
}
public interface Xamarin.Forms.Platform.UWP.ITabStopOnDescendants {
}
public class Xamarin.Forms.Platform.UWP.ItemContentControl : ContentControl {
    private VisualElement _visualElement;
    private IVisualElementRenderer _renderer;
    private DataTemplate _currentTemplate;
    public static DependencyProperty FormsDataTemplateProperty;
    public static DependencyProperty FormsDataContextProperty;
    public static DependencyProperty FormsContainerProperty;
    public static DependencyProperty ItemHeightProperty;
    public static DependencyProperty ItemWidthProperty;
    public static DependencyProperty ItemSpacingProperty;
    public DataTemplate FormsDataTemplate { get; public set; }
    public object FormsDataContext { get; public set; }
    public BindableObject FormsContainer { get; public set; }
    public double ItemHeight { get; public set; }
    public double ItemWidth { get; public set; }
    public Thickness ItemSpacing { get; public set; }
    private static ItemContentControl();
    private static void FormsDataTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataTemplate get_FormsDataTemplate();
    public void set_FormsDataTemplate(DataTemplate value);
    private static void FormsDataContextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_FormsDataContext();
    public void set_FormsDataContext(object value);
    private static void FormsContainerChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public BindableObject get_FormsContainer();
    public void set_FormsContainer(BindableObject value);
    public double get_ItemHeight();
    public void set_ItemHeight(double value);
    public double get_ItemWidth();
    public void set_ItemWidth(double value);
    public Thickness get_ItemSpacing();
    public void set_ItemSpacing(Thickness value);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    internal void Realize();
    private void SetNativeStateConsistent(VisualElement visualElement);
    internal void UpdateIsSelected(bool isSelected);
    private void OnViewMeasureInvalidated(object sender, EventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    private double Max(double requested, double available);
    private double ClampInfinity(double value);
}
public abstract class Xamarin.Forms.Platform.UWP.ItemsViewRenderer`1 : ViewRenderer`2<TItemsView, ListViewBase> {
    protected CollectionViewSource CollectionViewSource;
    private Nullable`1<ScrollBarVisibility> _defaultHorizontalScrollVisibility;
    private Nullable`1<ScrollBarVisibility> _defaultVerticalScrollVisibility;
    private FrameworkElement _emptyView;
    private View _formsEmptyView;
    private bool _emptyViewDisplayed;
    private ScrollViewer _scrollViewer;
    private double _previousHorizontalOffset;
    private double _previousVerticalOffset;
    [CompilerGeneratedAttribute]
private ListViewBase <ListViewBase>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemsControl <ItemsControl>k__BackingField;
    protected ListViewBase ListViewBase { get; private set; }
    protected DataTemplate ViewTemplate { get; }
    protected DataTemplate ItemsViewTemplate { get; }
    protected TItemsView ItemsView { get; }
    protected ItemsControl ItemsControl { get; private set; }
    protected IItemsLayout Layout { get; }
    protected int ItemCount { get; }
    [CompilerGeneratedAttribute]
protected ListViewBase get_ListViewBase();
    [CompilerGeneratedAttribute]
private void set_ListViewBase(ListViewBase value);
    protected DataTemplate get_ViewTemplate();
    protected DataTemplate get_ItemsViewTemplate();
    protected TItemsView get_ItemsView();
    [CompilerGeneratedAttribute]
protected ItemsControl get_ItemsControl();
    [CompilerGeneratedAttribute]
private void set_ItemsControl(ItemsControl value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TItemsView> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected abstract virtual ListViewBase SelectListViewBase();
    protected abstract virtual void HandleLayoutPropertyChanged(PropertyChangedEventArgs property);
    protected abstract virtual IItemsLayout get_Layout();
    protected virtual void UpdateItemsSource();
    protected virtual ICollectionView GetCollectionView(CollectionViewSource collectionViewSource);
    protected virtual void CleanUpCollectionViewSource();
    protected virtual CollectionViewSource CreateCollectionViewSource();
    private void ItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void UpdateItemTemplate();
    private void LayoutPropertyChanged(object sender, PropertyChangedEventArgs property);
    protected virtual void SetUpNewElement(ItemsView newElement);
    protected virtual void TearDownOldElement(ItemsView oldElement);
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    private void FindScrollViewer(ListViewBase listView);
    protected virtual void OnScrollViewerFound(ScrollViewer scrollViewer);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ItemsViewRenderer`1/<ScrollTo>d__43")]
protected virtual Task ScrollTo(ScrollToRequestEventArgs args);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ItemsViewRenderer`1/<ScrollToRequested>d__44")]
private void ScrollToRequested(object sender, ScrollToRequestEventArgs args);
    protected virtual object FindBoundItem(ScrollToRequestEventArgs args);
    protected virtual void UpdateEmptyView();
    protected virtual void UpdateItemsLayout();
    private FrameworkElement RealizeEmptyViewTemplate(object bindingContext, DataTemplate emptyViewTemplate);
    private FrameworkElement RealizeEmptyView(View view);
    protected virtual void UpdateEmptyViewVisibility();
    internal void HandleScroll(ScrollViewer scrollViewer);
    private bool IsRemainingItemsThresholdReached(int lastVisibleItemIndex);
    protected virtual ItemsViewScrolledEventArgs ComputeVisibleIndexes(ItemsViewScrolledEventArgs args, ItemsLayoutOrientation orientation, bool advancing);
    private ValueTuple`3<int, int, int> GetVisibleIndexes(ItemsLayoutOrientation itemsLayoutOrientation, bool advancing);
    private bool IsElementVisibleInContainer(FrameworkElement element, FrameworkElement container, ItemsLayoutOrientation itemsLayoutOrientation);
    private void OnScrollViewChanged(object sender, ScrollViewerViewChangedEventArgs e);
    protected virtual int get_ItemCount();
    protected virtual object GetItem(int index);
}
internal class Xamarin.Forms.Platform.UWP.ItemTemplateContext : object {
    [CompilerGeneratedAttribute]
private DataTemplate <FormsDataTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableObject <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItemHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItemWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <ItemSpacing>k__BackingField;
    public DataTemplate FormsDataTemplate { get; }
    public object Item { get; }
    public BindableObject Container { get; }
    public double ItemHeight { get; }
    public double ItemWidth { get; }
    public Thickness ItemSpacing { get; }
    public ItemTemplateContext(DataTemplate formsDataTemplate, object item, BindableObject container, Nullable`1<double> height, Nullable`1<double> width, Nullable`1<Thickness> itemSpacing);
    [CompilerGeneratedAttribute]
public DataTemplate get_FormsDataTemplate();
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public BindableObject get_Container();
    [CompilerGeneratedAttribute]
public double get_ItemHeight();
    [CompilerGeneratedAttribute]
public double get_ItemWidth();
    [CompilerGeneratedAttribute]
public Thickness get_ItemSpacing();
}
internal class Xamarin.Forms.Platform.UWP.ItemTemplateContextEnumerable : object {
    private IEnumerable _itemsSource;
    private DataTemplate _formsDataTemplate;
    private BindableObject _container;
    private double _itemHeight;
    private double _itemWidth;
    private Thickness _itemSpacing;
    public ItemTemplateContextEnumerable(IEnumerable itemsSource, DataTemplate formsDataTemplate, BindableObject container, Nullable`1<double> itemHeight, Nullable`1<double> itemWidth, Nullable`1<Thickness> itemSpacing);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.UWP.ItemTemplateContextEnumerable/<GetEnumerator>d__7")]
public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.UWP.ItemTemplateContextList : object {
    private IList _itemsSource;
    private DataTemplate _itemTemplate;
    private BindableObject _container;
    private double _itemHeight;
    private double _itemWidth;
    private Thickness _itemSpacing;
    private List`1<ItemTemplateContext> _itemTemplateContexts;
    public int Count { get; }
    public ItemTemplateContext Item { get; }
    public ItemTemplateContextList(IList itemsSource, DataTemplate itemTemplate, BindableObject container, Nullable`1<double> itemHeight, Nullable`1<double> itemWidth, Nullable`1<Thickness> itemSpacing);
    public sealed virtual int get_Count();
    public sealed virtual ItemTemplateContext get_Item(int index);
    public sealed virtual IEnumerator`1<ItemTemplateContext> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface Xamarin.Forms.Platform.UWP.ITitleIconProvider {
    public ImageSource TitleIcon { get; public set; }
    public abstract virtual ImageSource get_TitleIcon();
    public abstract virtual void set_TitleIcon(ImageSource value);
}
internal interface Xamarin.Forms.Platform.UWP.ITitleProvider {
    unknown Brush BarBackgroundBrush {public set; }
    unknown Brush BarForegroundBrush {public set; }
    public bool ShowTitle { get; public set; }
    public string Title { get; public set; }
    public abstract virtual void set_BarBackgroundBrush(Brush value);
    public abstract virtual void set_BarForegroundBrush(Brush value);
    public abstract virtual bool get_ShowTitle();
    public abstract virtual void set_ShowTitle(bool value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
}
internal interface Xamarin.Forms.Platform.UWP.ITitleViewProvider {
    public View TitleView { get; public set; }
    public abstract virtual View get_TitleView();
    public abstract virtual void set_TitleView(View value);
}
internal interface Xamarin.Forms.Platform.UWP.ITitleViewRendererController {
    public View TitleView { get; }
    public FrameworkElement TitleViewPresenter { get; }
    public Visibility TitleViewVisibility { get; public set; }
    public CommandBar CommandBar { get; }
    public abstract virtual View get_TitleView();
    public abstract virtual FrameworkElement get_TitleViewPresenter();
    public abstract virtual Visibility get_TitleViewVisibility();
    public abstract virtual void set_TitleViewVisibility(Visibility value);
    public abstract virtual CommandBar get_CommandBar();
}
internal interface Xamarin.Forms.Platform.UWP.IToolBarForegroundBinder {
    public abstract virtual void BindForegroundColor(AppBar appBar);
    public abstract virtual void BindForegroundColor(AppBarButton button);
}
internal interface Xamarin.Forms.Platform.UWP.IToolbarProvider {
    public abstract virtual Task`1<CommandBar> GetCommandBarAsync();
}
public interface Xamarin.Forms.Platform.UWP.IVisualElementRenderer {
    public FrameworkElement ContainerElement { get; }
    public VisualElement Element { get; }
    public abstract virtual FrameworkElement get_ContainerElement();
    public abstract virtual VisualElement get_Element();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public abstract virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public abstract virtual void SetElement(VisualElement element);
    public abstract virtual UIElement GetNativeElement();
}
public interface Xamarin.Forms.Platform.UWP.IVisualNativeElementRenderer {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlChanged(EventHandler value);
}
public class Xamarin.Forms.Platform.UWP.KeyboardConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.KeyboardExtensions : object {
    [ExtensionAttribute]
public static InputScope ToInputScope(Keyboard self);
}
public class Xamarin.Forms.Platform.UWP.LabelRenderer : ViewRenderer`2<Label, TextBlock> {
    private bool _fontApplied;
    private bool _isInitiallyDefault;
    private SizeRequest _perfectSize;
    private bool _perfectSizeValid;
    private IList`1<double> _inlineHeights;
    protected virtual Size ArrangeOverride(Size finalSize);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateTextDecorations(TextBlock textBlock);
    private void UpdateAlign(TextBlock textBlock);
    private void UpdateColor(TextBlock textBlock);
    private void UpdateFont(TextBlock textBlock);
    private void UpdateLineBreakMode(TextBlock textBlock);
    private void UpdateCharacterSpacing(TextBlock textBlock);
    private void DetermineTruncatedTextWrapping(TextBlock textBlock);
    private void UpdateText(TextBlock textBlock);
    private void UpdateTextPlainText(TextBlock textBlock);
    private void UpdateTextHtml(TextBlock textBlock);
    private void UpdateDetectReadingOrderFromContent(TextBlock textBlock);
    private void UpdateLineHeight(TextBlock textBlock);
    private void UpdateMaxLines(TextBlock textBlock);
    private void UpdatePadding(TextBlock textBlock);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.LayoutExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<View> children, FrameworkElement view, GetDesiredSizeDelegate getDesiredSizeDelegate, ArrangeOverrideDelegate arrangeOverrideDelegate, MeasureOverrideDelegate measureOverrideDelegate);
    [ExtensionAttribute]
public static View ToView(FrameworkElement view, GetDesiredSizeDelegate getDesiredSizeDelegate, ArrangeOverrideDelegate arrangeOverrideDelegate, MeasureOverrideDelegate measureOverrideDelegate);
}
public class Xamarin.Forms.Platform.UWP.LayoutRenderer : ViewRenderer`2<Layout, FrameworkElement> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Layout> e);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void UpdateClipToBounds();
}
public class Xamarin.Forms.Platform.UWP.LineRenderer : ShapeRenderer`2<Line, Line> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Line> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateX1();
    private void UpdateY1();
    private void UpdateX2();
    private void UpdateY2();
}
public class Xamarin.Forms.Platform.UWP.ListGroupHeaderPresenter : ContentPresenter {
    private void OnTapped(object sender, TappedRoutedEventArgs tappedRoutedEventArgs);
}
public class Xamarin.Forms.Platform.UWP.ListViewGroupStyleSelector : GroupStyleSelector {
    protected virtual GroupStyle SelectGroupStyleCore(object group, UInt32 level);
}
public class Xamarin.Forms.Platform.UWP.ListViewRenderer : ViewRenderer`2<ListView, FrameworkElement> {
    private bool _collectionIsWrapped;
    private IList _collection;
    private bool _itemWasClicked;
    private bool _subscribedToItemClick;
    private bool _subscribedToTapped;
    private bool _disposed;
    private CollectionViewSource _collectionViewSource;
    private Nullable`1<ScrollBarVisibility> _defaultHorizontalScrollVisibility;
    private Nullable`1<ScrollBarVisibility> _defaultVerticalScrollVisibility;
    [CompilerGeneratedAttribute]
private ListView <List>k__BackingField;
    private SemanticZoom _zoom;
    private ScrollViewer _scrollViewer;
    private ContentControl _headerControl;
    private List`1<BrushedElement> _highlightedElements;
    private bool _deferSelection;
    private Tuple`2<object, SelectedItemChangedEventArgs> _deferredSelectedItemChangedEvent;
    private ITemplatedItemsView`1<Cell> TemplatedItemsView { get; }
    protected ListView List { get; private set; }
    private ITemplatedItemsView`1<Cell> get_TemplatedItemsView();
    [CompilerGeneratedAttribute]
protected ListView get_List();
    [CompilerGeneratedAttribute]
private void set_List(ListView value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ListView> e);
    private void ControlOnLoaded(object sender, RoutedEventArgs e);
    private bool IsObservableCollection(object source);
    private void ReloadData();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.UWP.ListViewRenderer/<FindDescendants>d__23`1")]
private static IEnumerable`1<T> FindDescendants(DependencyObject dobj);
    private void ClearSizeEstimate();
    private void UpdateFooter();
    private void UpdateHeader();
    private void UpdateGrouping();
    private void UpdateSelectionMode();
    private void UpdateWindowsSpecificSelectionMode();
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ListViewRenderer/<OnViewChangeCompleted>d__37")]
private void OnViewChangeCompleted(object sender, SemanticZoomViewChangedEventArgs e);
    private bool ScrollToItemWithAnimation(ScrollViewer viewer, object item);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ListViewRenderer/<ScrollTo>d__39")]
private void ScrollTo(object group, object item, ScrollToPosition toPosition, bool shouldAnimate, bool includeGroup, bool previouslyFailed);
    private void OnElementScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private T GetFirstDescendant(DependencyObject element);
    private ContentControl GetHeaderControl();
    private ScrollViewer GetScrollViewer();
    private void ListOnTapped(object sender, TappedRoutedEventArgs args);
    private void OnElementItemSelected(object sender, SelectedItemChangedEventArgs e);
    private void OnListItemClicked(int index);
    private void OnListItemClicked(object sender, ItemClickEventArgs e);
    private void OnControlSelectionChanged(object sender, SelectionChangedEventArgs e);
    private FrameworkElement FindElement(object cell);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [CompilerGeneratedAttribute]
private void <ControlOnLoaded>b__17_0(DependencyObject o, DependencyProperty dp);
    [CompilerGeneratedAttribute]
private void <OnCollectionChanged>b__20_0();
    [CompilerGeneratedAttribute]
private void <OnCollectionChanged>b__20_1();
}
[DefaultMemberAttribute("Item")]
internal class Xamarin.Forms.Platform.UWP.LoopableCollectionView : object {
    private static int FakeCount;
    private ICollectionView _internal;
    [CompilerGeneratedAttribute]
private bool <IsLoopingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CenterMode>k__BackingField;
    private EventRegistrationTokenTable`1<EventHandler`1<object>> _currentChangedTokenTable;
    private EventRegistrationTokenTable`1<CurrentChangingEventHandler> _currentChangingTokenTable;
    private EventRegistrationTokenTable`1<VectorChangedEventHandler`1<object>> _vectorChangedTokenTable;
    internal bool IsLoopingEnabled { get; internal set; }
    internal bool CenterMode { get; internal set; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public IObservableVector`1<object> CollectionGroups { get; }
    public object CurrentItem { get; }
    public int CurrentPosition { get; }
    public bool HasMoreItems { get; }
    public bool IsCurrentAfterLast { get; }
    public bool IsCurrentBeforeFirst { get; }
    public LoopableCollectionView(ICollectionView internal);
    [CompilerGeneratedAttribute]
internal bool get_IsLoopingEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsLoopingEnabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CenterMode();
    [CompilerGeneratedAttribute]
internal void set_CenterMode(bool value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(object item);
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual bool MoveCurrentTo(object item);
    public sealed virtual bool MoveCurrentToPosition(int index);
    public sealed virtual bool MoveCurrentToFirst();
    public sealed virtual bool MoveCurrentToLast();
    public sealed virtual bool MoveCurrentToNext();
    public sealed virtual bool MoveCurrentToPrevious();
    public sealed virtual IAsyncOperation`1<LoadMoreItemsResult> LoadMoreItemsAsync(UInt32 count);
    public sealed virtual IObservableVector`1<object> get_CollectionGroups();
    public sealed virtual object get_CurrentItem();
    public sealed virtual int get_CurrentPosition();
    public sealed virtual bool get_HasMoreItems();
    public sealed virtual bool get_IsCurrentAfterLast();
    public sealed virtual bool get_IsCurrentBeforeFirst();
    public sealed virtual void Insert(int index, object item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    public sealed virtual bool Remove(object item);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override EventRegistrationToken Windows.UI.Xaml.Data.ICollectionView.add_CurrentChanged(EventHandler`1<object> value);
    private sealed virtual override void Windows.UI.Xaml.Data.ICollectionView.remove_CurrentChanged(EventRegistrationToken value);
    private sealed virtual override EventRegistrationToken Windows.UI.Xaml.Data.ICollectionView.add_CurrentChanging(CurrentChangingEventHandler value);
    private sealed virtual override void Windows.UI.Xaml.Data.ICollectionView.remove_CurrentChanging(EventRegistrationToken value);
    private sealed virtual override EventRegistrationToken Windows.Foundation.Collections.IObservableVector<System.Object>.add_VectorChanged(VectorChangedEventHandler`1<object> value);
    private sealed virtual override void Windows.Foundation.Collections.IObservableVector<System.Object>.remove_VectorChanged(EventRegistrationToken value);
}
public class Xamarin.Forms.Platform.UWP.MasterBackgroundConverter : object {
    private static double Shift;
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
    private static DependencyProperty GetBackgroundProperty(FrameworkElement element);
}
public class Xamarin.Forms.Platform.UWP.MasterDetailControl : FlyoutPageControl {
    public FrameworkElement Master { get; public set; }
    public string MasterTitle { get; public set; }
    public Visibility MasterTitleVisibility { get; public set; }
    public Visibility MasterToolbarVisibility { get; public set; }
    public Size MasterSize { get; }
    private protected string FlyoutPresenterTemplateName { get; }
    public FrameworkElement get_Master();
    public void set_Master(FrameworkElement value);
    public string get_MasterTitle();
    public void set_MasterTitle(string value);
    public Visibility get_MasterTitleVisibility();
    public void set_MasterTitleVisibility(Visibility value);
    public Visibility get_MasterToolbarVisibility();
    public void set_MasterToolbarVisibility(Visibility value);
    public Size get_MasterSize();
    private protected virtual string get_FlyoutPresenterTemplateName();
}
public class Xamarin.Forms.Platform.UWP.MasterDetailPageRenderer : FlyoutPageRenderer {
}
public class Xamarin.Forms.Platform.UWP.MeasureOverrideDelegate : MulticastDelegate {
    public MeasureOverrideDelegate(object object, IntPtr method);
    public virtual Nullable`1<Size> Invoke(NativeViewWrapperRenderer renderer, Size availableSize);
    public virtual IAsyncResult BeginInvoke(NativeViewWrapperRenderer renderer, Size availableSize, AsyncCallback callback, object object);
    public virtual Nullable`1<Size> EndInvoke(IAsyncResult result);
}
internal class Xamarin.Forms.Platform.UWP.MenuItemCommand : object {
    private MenuItem _menuItem;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public MenuItemCommand(MenuItem item);
    public virtual bool CanExecute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void Execute(object parameter);
    private void OnCanExecuteChanged();
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.NativeBindingExtensions : object {
    [ExtensionAttribute]
public static void SetBinding(FrameworkElement view, string propertyName, BindingBase bindingBase, string updateSourceEventName);
    [ExtensionAttribute]
public static void SetBinding(FrameworkElement view, BindableProperty targetProperty, BindingBase binding);
    [ExtensionAttribute]
public static void SetValue(FrameworkElement target, BindableProperty targetProperty, object value);
    [ExtensionAttribute]
public static void SetBindingContext(FrameworkElement target, object bindingContext, Func`2<FrameworkElement, IEnumerable`1<FrameworkElement>> getChildren);
    [ExtensionAttribute]
internal static void TransferbindablePropertiesToWrapper(FrameworkElement target, View wrapper);
}
public class Xamarin.Forms.Platform.UWP.NativeBindingService : object {
    public sealed virtual bool TrySetBinding(object target, string propertyName, BindingBase binding);
    public sealed virtual bool TrySetBinding(object target, BindableProperty property, BindingBase binding);
    public sealed virtual bool TrySetValue(object target, BindableProperty property, object value);
}
internal class Xamarin.Forms.Platform.UWP.NativeEventWrapper : object {
    [CompilerGeneratedAttribute]
private static string <TargetProperty>k__BackingField;
    private static MethodInfo s_handlerinfo;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private static string TargetProperty { get; private set; }
    public NativeEventWrapper(object target, string targetProperty, string updateSourceEventName);
    private static NativeEventWrapper();
    [CompilerGeneratedAttribute]
private static string get_TargetProperty();
    [CompilerGeneratedAttribute]
private static void set_TargetProperty(string value);
    private void OnPropertyChanged(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
internal class Xamarin.Forms.Platform.UWP.NativePropertyListener : DependencyObject {
    private DependencyObject _target;
    private string _targetProperty;
    public static DependencyProperty TargetPropertyValueProperty;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public object TargetPropertyValue { get; }
    public NativePropertyListener(DependencyObject target, string propertyName);
    private static NativePropertyListener();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void Dispose();
    public object get_TargetPropertyValue();
    private static void OnNativePropertyChanged(object sender, DependencyPropertyChangedEventArgs args);
}
public class Xamarin.Forms.Platform.UWP.NativeValueConverterService : object {
    public sealed virtual bool ConvertTo(object value, Type toType, Object& nativeValue);
}
public class Xamarin.Forms.Platform.UWP.NativeViewWrapper : View {
    [CompilerGeneratedAttribute]
private ArrangeOverrideDelegate <ArrangeOverrideDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private GetDesiredSizeDelegate <GetDesiredSizeDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasureOverrideDelegate <MeasureOverrideDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkElement <NativeElement>k__BackingField;
    public ArrangeOverrideDelegate ArrangeOverrideDelegate { get; public set; }
    public GetDesiredSizeDelegate GetDesiredSizeDelegate { get; }
    public MeasureOverrideDelegate MeasureOverrideDelegate { get; public set; }
    public FrameworkElement NativeElement { get; }
    public NativeViewWrapper(FrameworkElement nativeElement, GetDesiredSizeDelegate getDesiredSizeDelegate, ArrangeOverrideDelegate arrangeOverrideDelegate, MeasureOverrideDelegate measureOverrideDelegate);
    [CompilerGeneratedAttribute]
public ArrangeOverrideDelegate get_ArrangeOverrideDelegate();
    [CompilerGeneratedAttribute]
public void set_ArrangeOverrideDelegate(ArrangeOverrideDelegate value);
    [CompilerGeneratedAttribute]
public GetDesiredSizeDelegate get_GetDesiredSizeDelegate();
    [CompilerGeneratedAttribute]
public MeasureOverrideDelegate get_MeasureOverrideDelegate();
    [CompilerGeneratedAttribute]
public void set_MeasureOverrideDelegate(MeasureOverrideDelegate value);
    [CompilerGeneratedAttribute]
public FrameworkElement get_NativeElement();
    protected virtual void OnBindingContextChanged();
}
public class Xamarin.Forms.Platform.UWP.NativeViewWrapperRenderer : ViewRenderer`2<NativeViewWrapper, FrameworkElement> {
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected Size MeasureOverride();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<NativeViewWrapper> e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__4_0(object sender, SizeChangedEventArgs args);
}
public class Xamarin.Forms.Platform.UWP.NavigationPageRenderer : object {
    private PageControl _container;
    private Page _currentPage;
    private Page _previousPage;
    private bool _disposed;
    private FlyoutPage _parentFlyoutPage;
    private TabbedPage _parentTabbedPage;
    private bool _showTitle;
    private ImageSource _titleIcon;
    private VisualElementTracker`2<Page, PageControl> _tracker;
    private EntranceThemeTransition _transition;
    private Platform _platform;
    private bool _parentsLookedUp;
    [CompilerGeneratedAttribute]
private NavigationPage <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private SystemNavigationManager _navManager;
    private Platform Platform { get; }
    public NavigationPage Element { get; private set; }
    protected VisualElementTracker`2<Page, PageControl> Tracker { get; protected set; }
    unknown Brush Xamarin.Forms.Platform.UWP.ITitleProvider.BarBackgroundBrush {private set; }
    unknown Brush Xamarin.Forms.Platform.UWP.ITitleProvider.BarForegroundBrush {private set; }
    private bool Xamarin.Forms.Platform.UWP.ITitleProvider.ShowTitle { get; private set; }
    public string Title { get; public set; }
    public ImageSource TitleIcon { get; public set; }
    public View TitleView { get; public set; }
    public FrameworkElement ContainerElement { get; }
    private VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.Element { get; }
    private Platform get_Platform();
    [CompilerGeneratedAttribute]
public NavigationPage get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(NavigationPage value);
    protected VisualElementTracker`2<Page, PageControl> get_Tracker();
    protected void set_Tracker(VisualElementTracker`2<Page, PageControl> value);
    public sealed virtual void Dispose();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_BarBackgroundBrush(Brush value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_BarForegroundBrush(Brush value);
    private sealed virtual override bool Xamarin.Forms.Platform.UWP.ITitleProvider.get_ShowTitle();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_ShowTitle(bool value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual ImageSource get_TitleIcon();
    public sealed virtual void set_TitleIcon(ImageSource value);
    public sealed virtual View get_TitleView();
    public sealed virtual void set_TitleView(View value);
    private sealed virtual override Task`1<CommandBar> Xamarin.Forms.Platform.UWP.IToolbarProvider.GetCommandBarAsync();
    public sealed virtual FrameworkElement get_ContainerElement();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private sealed virtual override UIElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.GetNativeElement();
    public sealed virtual void SetElement(VisualElement element);
    protected void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private Brush GetBarBackgroundColorBrush();
    private Brush GetBarBackgroundBrush();
    private Brush GetBarForegroundBrush();
    private bool GetIsNavBarPossible();
    private void LookupRelevantParents();
    private void MultiPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnBackClicked(object sender, RoutedEventArgs e);
    private void OnChildrenChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnCurrentPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnElementAppearing(object sender, EventArgs e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs args);
    private void OnNativeSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnPointerPressed(object sender, PointerRoutedEventArgs e);
    protected virtual void OnPopRequested(object sender, NavigationRequestedEventArgs e);
    protected virtual void OnPopToRootRequested(object sender, NavigationRequestedEventArgs e);
    protected virtual void OnPushRequested(object sender, NavigationRequestedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs args);
    private void PushExistingNavigationStack();
    private void SetPage(Page page, bool isAnimated, bool isPopping);
    protected virtual void SetupPageTransition(Transition transition, bool isAnimated, bool isPopping);
    private void UpdateBackButtonTitle();
    private void UpdateContainerArea();
    private void UpdateNavigationBarBackgroundColor();
    private void UpdateNavigationBarBackground();
    private void UpdateTitleVisible();
    private void UpdatePadding();
    private void UpdateTitleColor();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.NavigationPageRenderer/<UpdateTitleIcon>d__79")]
private void UpdateTitleIcon();
    private void UpdateTitleView();
    public sealed virtual void BindForegroundColor(AppBar appBar);
    public sealed virtual void BindForegroundColor(AppBarButton button);
    private void SetAppBarForegroundBinding(FrameworkElement element);
    private void UpdateToolbarPlacement();
    private void UpdateToolbarDynamicOverflowEnabled();
    private void UpdateShowTitle();
    private static object GetDefaultColor();
    private void UpdateBackButton();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.NavigationPageRenderer/<UpdateTitleOnParents>d__90")]
private void UpdateTitleOnParents();
}
internal class Xamarin.Forms.Platform.UWP.ObservableItemTemplateCollection : ObservableCollection`1<ItemTemplateContext> {
    private IList _itemsSource;
    private DataTemplate _itemTemplate;
    private BindableObject _container;
    private double _itemHeight;
    private double _itemWidth;
    private Thickness _itemSpacing;
    private INotifyCollectionChanged _notifyCollectionChanged;
    public ObservableItemTemplateCollection(IList itemsSource, DataTemplate itemTemplate, BindableObject container, Nullable`1<double> itemHeight, Nullable`1<double> itemWidth, Nullable`1<Thickness> itemSpacing);
    public void CleanUp();
    private void InnerCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void InnerCollectionChanged(NotifyCollectionChangedEventArgs args);
    private void Add(NotifyCollectionChangedEventArgs args);
    private void Move(NotifyCollectionChangedEventArgs args);
    private void Remove(NotifyCollectionChangedEventArgs args);
    private void Replace(NotifyCollectionChangedEventArgs args);
    private void Reset();
}
public class Xamarin.Forms.Platform.UWP.PageControl : ContentControl {
    public static DependencyProperty TitleVisibilityProperty;
    public static DependencyProperty ToolbarBackgroundProperty;
    public static DependencyProperty BackButtonTitleProperty;
    public static DependencyProperty ContentMarginProperty;
    public static DependencyProperty TitleIconProperty;
    public static DependencyProperty TitleViewProperty;
    public static DependencyProperty TitleViewVisibilityProperty;
    public static DependencyProperty TitleInsetProperty;
    public static DependencyProperty TitleBrushProperty;
    private CommandBar _commandBar;
    private FrameworkElement _titleViewPresenter;
    private ToolbarPlacement _toolbarPlacement;
    private bool _toolbarDynamicOverflowEnabled;
    private ToolbarPlacementHelper _toolbarPlacementHelper;
    private TaskCompletionSource`1<CommandBar> _commandBarTcs;
    private ContentPresenter _presenter;
    private TitleViewManager _titleViewManager;
    public bool ShouldShowToolbar { get; public set; }
    public ImageSource TitleIcon { get; public set; }
    public View TitleView { get; public set; }
    public string BackButtonTitle { get; public set; }
    public double ContentHeight { get; }
    public Thickness ContentMargin { get; public set; }
    public double ContentWidth { get; }
    public Brush ToolbarBackground { get; public set; }
    public ToolbarPlacement ToolbarPlacement { get; public set; }
    public bool ToolbarDynamicOverflowEnabled { get; public set; }
    public Visibility TitleVisibility { get; public set; }
    public Visibility TitleViewVisibility { get; public set; }
    public Brush TitleBrush { get; public set; }
    public double TitleInset { get; public set; }
    private FrameworkElement Xamarin.Forms.Platform.UWP.ITitleViewRendererController.TitleViewPresenter { get; }
    private CommandBar Xamarin.Forms.Platform.UWP.ITitleViewRendererController.CommandBar { get; }
    private static PageControl();
    public bool get_ShouldShowToolbar();
    public void set_ShouldShowToolbar(bool value);
    public ImageSource get_TitleIcon();
    public void set_TitleIcon(ImageSource value);
    public sealed virtual View get_TitleView();
    public void set_TitleView(View value);
    public string get_BackButtonTitle();
    public void set_BackButtonTitle(string value);
    public double get_ContentHeight();
    public Thickness get_ContentMargin();
    public void set_ContentMargin(Thickness value);
    public double get_ContentWidth();
    public Brush get_ToolbarBackground();
    public void set_ToolbarBackground(Brush value);
    public ToolbarPlacement get_ToolbarPlacement();
    public void set_ToolbarPlacement(ToolbarPlacement value);
    public bool get_ToolbarDynamicOverflowEnabled();
    public void set_ToolbarDynamicOverflowEnabled(bool value);
    public Visibility get_TitleVisibility();
    public void set_TitleVisibility(Visibility value);
    public sealed virtual Visibility get_TitleViewVisibility();
    public sealed virtual void set_TitleViewVisibility(Visibility value);
    public Brush get_TitleBrush();
    public void set_TitleBrush(Brush value);
    public double get_TitleInset();
    public void set_TitleInset(double value);
    private sealed virtual override FrameworkElement Xamarin.Forms.Platform.UWP.ITitleViewRendererController.get_TitleViewPresenter();
    private sealed virtual override CommandBar Xamarin.Forms.Platform.UWP.ITitleViewRendererController.get_CommandBar();
    private sealed virtual override Task`1<CommandBar> Xamarin.Forms.Platform.UWP.IToolbarProvider.GetCommandBarAsync();
    protected virtual void OnApplyTemplate();
    private static void OnTitleViewPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private void UpdateToolbarDynamicOverflowEnabled();
    [CompilerGeneratedAttribute]
private ToolbarPlacement <OnApplyTemplate>b__63_0();
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.PageExtensions : object {
    [ExtensionAttribute]
public static FrameworkElement CreateFrameworkElement(ContentPage contentPage);
    [ExtensionAttribute]
internal static FrameworkElement ToFrameworkElement(VisualElement visualElement);
    [ExtensionAttribute]
public static bool Navigate(Frame frame, ContentPage page);
    [ExtensionAttribute]
internal static bool Navigate(Frame frame, ContentPage page, NavigationTransitionInfo infoOverride);
    [ExtensionAttribute]
internal static Page GetCurrentPage(Page currentPage);
}
public class Xamarin.Forms.Platform.UWP.PageRenderer : VisualElementRenderer`2<Page, FrameworkElement> {
    private bool _disposed;
    private bool _loaded;
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Page> e);
    private void OnLoaded(object sender, RoutedEventArgs args);
    private void OnUnloaded(object sender, RoutedEventArgs args);
}
public class Xamarin.Forms.Platform.UWP.PageToRenderedElementConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Xamarin.Forms.Platform.UWP.PathRenderer : ShapeRenderer`2<Path, Path> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Path> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateData();
    private void UpdateRenderTransform();
}
public class Xamarin.Forms.Platform.UWP.PickerRenderer : ViewRenderer`2<Picker, FormsComboBox> {
    private bool _fontApplied;
    private bool _isAnimating;
    private Brush _defaultBrush;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Picker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ControlOnLoaded(object sender, RoutedEventArgs routedEventArgs);
    private void WireUpFormsVsm();
    private void ControlOnClosedAnimationStarted(object sender, EventArgs eventArgs);
    private void ControlOnOpenAnimationCompleted(object sender, EventArgs eventArgs);
    private void OnControlSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void OnDropDownOpenStateChanged(object sender, object o);
    private void StartAnimationRefresh();
    private void UpdateCharacterSpacing();
    private void UpdateFont();
    private void UpdateSelectedIndex();
    private void UpdateTextColor();
    private void UpdateTitle();
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.PickerRenderer/<<StartAnimationRefresh>b__12_0>d")]
[CompilerGeneratedAttribute]
private Task <StartAnimationRefresh>b__12_0();
    [CompilerGeneratedAttribute]
private void <StartAnimationRefresh>b__12_1();
}
public abstract class Xamarin.Forms.Platform.UWP.Platform : object {
    private static Task`1<bool> s_currentAlert;
    private static Task`1<string> s_currentPrompt;
    internal static BindableProperty RendererProperty;
    private Rectangle _bounds;
    private Canvas _container;
    private Page _page;
    private ProgressBar _busyIndicator;
    private Page _currentPage;
    private Page _modalBackgroundPage;
    private NavigationModel _navModel;
    private ToolbarTracker _toolbarTracker;
    private ImageConverter _imageConverter;
    private ImageSourceIconElementConverter _imageSourceIconElementConverter;
    internal static Platform Current { get; }
    public IReadOnlyList`1<Page> NavigationStack { get; }
    public IReadOnlyList`1<Page> ModalStack { get; }
    internal Rectangle ContainerBounds { get; }
    internal Platform(Page page);
    private static Platform();
    public static IVisualElementRenderer GetRenderer(VisualElement element);
    public static void SetRenderer(VisualElement element, IVisualElementRenderer value);
    public static IVisualElementRenderer CreateRenderer(VisualElement element);
    internal static Platform get_Current();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<OnResumingAsync>d__9")]
private void OnResumingAsync(object sender, object e);
    internal void SetPage(Page newRoot);
    public sealed virtual IReadOnlyList`1<Page> get_NavigationStack();
    public sealed virtual IReadOnlyList`1<Page> get_ModalStack();
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PushAsync(Page root, bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopAsync(bool animated);
    private sealed virtual override Task Xamarin.Forms.INavigation.PopToRootAsync(bool animated);
    private sealed virtual override void Xamarin.Forms.INavigation.RemovePage(Page page);
    private sealed virtual override void Xamarin.Forms.INavigation.InsertPageBefore(Page page, Page before);
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page page);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync();
    private sealed virtual override Task Xamarin.Forms.INavigation.PushModalAsync(Page page, bool animated);
    private sealed virtual override Task`1<Page> Xamarin.Forms.INavigation.PopModalAsync(bool animated);
    private sealed virtual override SizeRequest Xamarin.Forms.Internals.IPlatform.GetNativeSize(VisualElement element, double widthConstraint, double heightConstraint);
    public static SizeRequest GetNativeSize(VisualElement element, double widthConstraint, double heightConstraint);
    internal virtual Rectangle get_ContainerBounds();
    internal void UpdatePageSizes();
    private ProgressBar GetBusyIndicator();
    internal bool BackButtonPressed();
    private void OnRendererSizeChanged(object sender, SizeChangedEventArgs sizeChangedEventArgs);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<SetCurrent>d__45")]
private void SetCurrent(Page newPage, bool popping, bool modal, Action completedCallback);
    private void RemovePage(Page page);
    private void AddPage(Page page);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<OnToolbarItemsChanged>d__48")]
private void OnToolbarItemsChanged(object sender, EventArgs e);
    private void UpdateToolbarTracker();
    private void UpdateBounds();
    private void InitializeStatusBar();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<UpdateToolbarItems>d__52")]
internal Task UpdateToolbarItems();
    internal IToolbarProvider GetToolbarProvider();
    internal static void SubscribeAlertsAndActionSheets();
    private static void OnPageActionSheet(Page sender, ActionSheetArguments options);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<OnPagePrompt>d__56")]
private static void OnPagePrompt(Page sender, PromptArguments options);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<ShowPrompt>d__57")]
private static Task`1<string> ShowPrompt(PromptDialog prompt);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<OnPageAlert>d__58")]
private static void OnPageAlert(Page sender, AlertArguments options);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.Platform/<ShowAlert>d__59")]
private static Task`1<bool> ShowAlert(ContentDialog alert);
    private void OnBackRequested(object sender, BackRequestedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(Page sender, bool enabled);
    [CompilerGeneratedAttribute]
private void <InitializeStatusBar>b__51_0(StatusBar sender, object args);
    [CompilerGeneratedAttribute]
private void <InitializeStatusBar>b__51_1(StatusBar sender, object args);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.PlatformConfigurationExtensions : object {
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, T> OnThisPlatform(T element);
}
public abstract class Xamarin.Forms.Platform.UWP.PlatformEffect : PlatformEffect`2<FrameworkElement, FrameworkElement> {
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.PointCollectionExtensions : object {
    [ExtensionAttribute]
public static PointCollection ToWindows(PointCollection pointCollection);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.PointExtensions : object {
    [ExtensionAttribute]
public static Point ToWindows(Point point);
}
public class Xamarin.Forms.Platform.UWP.PolygonRenderer : ShapeRenderer`2<Polygon, Polygon> {
    private PointCollection _points;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polygon> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    protected virtual void Dispose(bool disposing);
    private void UpdatePoints();
    private void UpdateFillRule();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.UWP.PolylineRenderer : ShapeRenderer`2<Polyline, Polyline> {
    private PointCollection _points;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Polyline> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    protected virtual void Dispose(bool disposing);
    private void UpdatePoints();
    private void UpdateFillRule();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class Xamarin.Forms.Platform.UWP.ProgressBarRenderer : ViewRenderer`2<ProgressBar, ProgressBar> {
    private object _foregroundDefault;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ProgressBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnControlLoaded(object sender, RoutedEventArgs routedEventArgs);
    private void UpdateProgressColor();
    private void ProgressBarOnValueChanged(object sender, RangeBaseValueChangedEventArgs rangeBaseValueChangedEventArgs);
    private void UpdateFlowDirection();
}
public class Xamarin.Forms.Platform.UWP.PromptDialog : ContentDialog {
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private TextBlock TextBlockMessage;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private TextBox TextBoxInput;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private bool _contentLoaded;
    public string Message { get; public set; }
    public string Input { get; public set; }
    public string Placeholder { get; public set; }
    public int MaxLength { get; public set; }
    public InputScope InputScope { get; public set; }
    public string get_Message();
    public void set_Message(string value);
    public string get_Input();
    public void set_Input(string value);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public InputScope get_InputScope();
    public void set_InputScope(InputScope value);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.PropertyChangedEventArgsExtensions : object {
    [ExtensionAttribute]
public static bool Is(PropertyChangedEventArgs args, BindableProperty property);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2, BindableProperty p3);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyChangedEventArgs args, BindableProperty p0, BindableProperty p1, BindableProperty p2, BindableProperty p3, BindableProperty p4);
}
public class Xamarin.Forms.Platform.UWP.RadioButtonRenderer : ViewRenderer`2<RadioButton, FormsRadioButton> {
    private bool _fontApplied;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<RadioButton> e);
    private void ButtonOnLoaded(object o, RoutedEventArgs routedEventArgs);
    private void WireUpFormsVsm();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnRadioButtonCheckedOrUnchecked(object sender, RoutedEventArgs e);
    private void UpdateBackgroundBrush();
    private void UpdateBorderColor();
    private void UpdateBorderRadius();
    private void UpdateBorderWidth();
    private void UpdateContent();
    private void UpdateFont();
    private void UpdateTextColor();
    private void UpdatePadding();
    private void UpdateCheck();
}
public class Xamarin.Forms.Platform.UWP.RectangleRenderer : ShapeRenderer`2<Rectangle, Rectangle> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Rectangle> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateRadiusX();
    private void UpdateRadiusY();
}
public class Xamarin.Forms.Platform.UWP.RefreshViewRenderer : ViewRenderer`2<RefreshView, RefreshContainer> {
    private bool _isDisposed;
    private Deferral _refreshCompletionDeferral;
    private bool _isLoaded;
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<RefreshView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    private void UpdateContent();
    private void UpdateIsEnabled();
    private void UpdateIsRefreshing();
    private void UpdateColors();
    private void UpdateRefreshPullDirection();
    private void CompleteRefresh();
    private void OnRefresh(object sender, RefreshRequestedEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__5_2();
}
public static class Xamarin.Forms.Platform.UWP.RendererFactory : object {
    [ObsoleteAttribute("GetRenderer is obsolete as of version 2.0.1. Please use Platform.CreateRenderer instead.")]
[EditorBrowsableAttribute("1")]
public static IVisualElementRenderer CreateRenderer(VisualElement element);
}
internal class Xamarin.Forms.Platform.UWP.Resources : ResourceDictionary {
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private bool _contentLoaded;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
internal static class Xamarin.Forms.Platform.UWP.ScrollHelpers : object {
    private static Point Zero;
    private static ScrollHelpers();
    private static bool IsVertical(ScrollViewer scrollViewer);
    private static Point AdjustToMakeVisible(Point point, Size itemSize, ScrollViewer scrollViewer);
    private static Point AdjustToMakeVisibleVertical(Point point, Size itemSize, ScrollViewer scrollViewer);
    private static Point AdjustToMakeVisibleHorizontal(Point point, Size itemSize, ScrollViewer scrollViewer);
    private static Point AdjustToEnd(Point point, Size itemSize, ScrollViewer scrollViewer);
    private static Point AdjustToEndHorizontal(Point point, Size itemSize, ScrollViewer scrollViewer);
    private static Point AdjustToEndVertical(Point point, Size itemSize, ScrollViewer scrollViewer);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<AdjustToEndAsync>d__8")]
private static Task AdjustToEndAsync(ListViewBase list, ScrollViewer scrollViewer, object targetItem);
    private static Point AdjustToCenter(Point point, Size itemSize, ScrollViewer scrollViewer);
    private static Point AdjustToCenterHorizontal(Point point, Size itemSize, ScrollViewer scrollViewer);
    private static Point AdjustToCenterVertical(Point point, Size itemSize, ScrollViewer scrollViewer);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<AdjustToCenterAsync>d__12")]
private static Task AdjustToCenterAsync(ListViewBase list, ScrollViewer scrollViewer, object targetItem);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<JumpToOffsetAsync>d__13")]
private static Task JumpToOffsetAsync(ScrollViewer scrollViewer, double targetHorizontalOffset, double targetVerticalOffset);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<GetApproximateTargetAsync>d__14")]
private static Task`1<Point> GetApproximateTargetAsync(ListViewBase list, ScrollViewer scrollViewer, object targetItem);
    internal static void JumpToIndexAsync(ListViewBase list, int index, ScrollToPosition scrollToPosition);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<JumpToItemAsync>d__16")]
public static Task JumpToItemAsync(ListViewBase list, object targetItem, ScrollToPosition scrollToPosition);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<ScrollToItemAsync>d__17")]
private static Task`1<bool> ScrollToItemAsync(ListViewBase list, object targetItem, ScrollViewer scrollViewer, ScrollToPosition scrollToPosition);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<AnimateToItemAsync>d__18")]
public static Task AnimateToItemAsync(ListViewBase list, object targetItem, ScrollToPosition scrollToPosition);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<AnimateToOffsetAsync>d__19")]
private static Task AnimateToOffsetAsync(ScrollViewer scrollViewer, double targetHorizontalOffset, double targetVerticalOffset, Func`1<Task`1<bool>> interruptCheck);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollHelpers/<ScrollToTargetContainerAsync>d__20")]
private static Task ScrollToTargetContainerAsync(UIElement targetContainer, ScrollViewer scrollViewer, ScrollToPosition scrollToPosition);
}
public class Xamarin.Forms.Platform.UWP.ScrollViewRenderer : ViewRenderer`2<ScrollView, ScrollViewer> {
    private VisualElement _currentView;
    private bool _checkedForRtlScroll;
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void Dispose(bool disposing);
    protected virtual Size MeasureOverride(Size availableSize);
    private void CleanUp(ScrollView scrollView, ScrollViewer scrollViewer);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ScrollView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected void OnContentElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateContent();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ScrollViewRenderer/<OnScrollToRequested>d__12")]
private void OnScrollToRequested(object sender, ScrollToRequestedEventArgs e);
    private void SetInitialRtlPosition(object sender, object e);
    private void ClearRtlScrollCheck();
    private void OnViewChanged(object sender, ScrollViewerViewChangedEventArgs e);
    private Thickness AddMargin(Thickness original, double left, double top, double right, double bottom);
    private void UpdateContentMargins();
    private void UpdateOrientation();
    private ScrollBarVisibility ScrollBarVisibilityToUwp(ScrollBarVisibility visibility);
    private void UpdateVerticalScrollBarVisibility();
    private void UpdateHorizontalScrollBarVisibility();
}
public class Xamarin.Forms.Platform.UWP.SearchBarRenderer : ViewRenderer`2<SearchBar, AutoSuggestBox> {
    private Brush _defaultPlaceholderColorBrush;
    private Brush _defaultPlaceholderColorFocusBrush;
    private Brush _defaultTextColorBrush;
    private Brush _defaultTextColorFocusBrush;
    private bool _fontApplied;
    private bool _isDisposed;
    private FormsTextBox _queryTextBox;
    private FormsCancelButton _cancelButton;
    private Brush _defaultDeleteButtonForegroundColorBrush;
    private Brush _defaultDeleteButtonBackgroundColorBrush;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SearchBar> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnControlLoaded(object sender, RoutedEventArgs routedEventArgs);
    protected virtual void SetAutomationId(string id);
    private void OnQuerySubmitted(AutoSuggestBox sender, AutoSuggestBoxQuerySubmittedEventArgs e);
    private void OnTextChanged(AutoSuggestBox sender, AutoSuggestBoxTextChangedEventArgs e);
    private void UpdateHorizontalTextAlignment();
    private void UpdateVerticalTextAlignment();
    private void UpdateCancelButtonColor();
    private void UpdateFont();
    private void UpdateCharacterSpacing();
    private void UpdatePlaceholder();
    private void UpdatePlaceholderColor();
    private void UpdateText();
    private void UpdateTextColor();
    private void UpdateIsSpellCheckEnabled();
    private void UpdateMaxLength();
    private void UpdateInputScope();
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <OnControlLoaded>b__12_0(object o, EventArgs args);
    [CompilerGeneratedAttribute]
private Brush <UpdateCancelButtonColor>b__18_0();
    [CompilerGeneratedAttribute]
private void <UpdateCancelButtonColor>b__18_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateCancelButtonColor>b__18_2();
    [CompilerGeneratedAttribute]
private void <UpdateCancelButtonColor>b__18_3(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateCancelButtonColor>b__18_4();
    [CompilerGeneratedAttribute]
private void <UpdateCancelButtonColor>b__18_5(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdatePlaceholderColor>b__22_0();
    [CompilerGeneratedAttribute]
private void <UpdatePlaceholderColor>b__22_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdatePlaceholderColor>b__22_2();
    [CompilerGeneratedAttribute]
private void <UpdatePlaceholderColor>b__22_3(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateTextColor>b__24_0();
    [CompilerGeneratedAttribute]
private void <UpdateTextColor>b__24_1(Brush brush);
    [CompilerGeneratedAttribute]
private Brush <UpdateTextColor>b__24_2();
    [CompilerGeneratedAttribute]
private void <UpdateTextColor>b__24_3(Brush brush);
}
public class Xamarin.Forms.Platform.UWP.SelectableItemsViewRenderer`1 : StructuredItemsViewRenderer`1<TItemsView> {
    private bool _ignoreNativeSelectionChange;
    protected virtual void TearDownOldElement(ItemsView oldElement);
    protected virtual void SetUpNewElement(ItemsView newElement);
    protected virtual void UpdateItemsSource();
    private void UpdateNativeSelection();
    private void FormsSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void NativeSelectionChanged(object sender, SelectionChangedEventArgs args);
    private void UpdateFormsSelection();
    private void UpdateFormsSingleSelection();
    private void UpdateFormsMultipleSelection();
    [CompilerGeneratedAttribute]
private bool <UpdateNativeSelection>b__4_0(object item);
}
public class Xamarin.Forms.Platform.UWP.ShapeRenderer`2 : ViewRenderer`2<TShape, TNativeShape> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TShape> args);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void UpdateHeight();
    private void UpdateWidth();
    private void UpdateAspect();
    private void UpdateFill();
    private void UpdateStroke();
    private void UpdateStrokeThickness();
    private void UpdateStrokeDashArray();
    private void UpdateStrokeDashOffset();
    private void UpdateStrokeLineCap();
    private void UpdateStrokeLineJoin();
    private void UpdateStrokeMiterLimit();
}
public class Xamarin.Forms.Platform.UWP.ShellFlyoutItemRenderer : ContentControl {
    public static DependencyProperty IsSelectedProperty;
    private View _content;
    private object _previousDataContext;
    private double _previousWidth;
    [CompilerGeneratedAttribute]
private FrameworkElement <FrameworkElement>k__BackingField;
    private Shell _shell;
    private FrameworkElement FrameworkElement { get; private set; }
    public bool IsSelected { get; public set; }
    private static ShellFlyoutItemRenderer();
    [CompilerGeneratedAttribute]
private FrameworkElement get_FrameworkElement();
    [CompilerGeneratedAttribute]
private void set_FrameworkElement(FrameworkElement value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    private void OnDataContextChanged(FrameworkElement sender, DataContextChangedEventArgs args);
    private void ShellElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnMeasureInvalidated(object sender, EventArgs e);
    private void OnLayoutUpdated(object sender, object e);
    private void OnMeasureInvalidated();
    private void UpdateVisualState();
    private static void IsSelectedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnDataContextChanged>g__OnFrameworkElementLoaded|13_0(object _, RoutedEventArgs __);
}
internal class Xamarin.Forms.Platform.UWP.ShellFlyoutSeparator : ValueType {
}
public class Xamarin.Forms.Platform.UWP.ShellFlyoutTemplateSelector : DataTemplateSelector {
    [CompilerGeneratedAttribute]
private DataTemplate <BaseShellItemTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <MenuItemTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <SeperatorTemplate>k__BackingField;
    private DataTemplate BaseShellItemTemplate { get; }
    private DataTemplate MenuItemTemplate { get; }
    private DataTemplate SeperatorTemplate { get; }
    [CompilerGeneratedAttribute]
private DataTemplate get_BaseShellItemTemplate();
    [CompilerGeneratedAttribute]
private DataTemplate get_MenuItemTemplate();
    [CompilerGeneratedAttribute]
private DataTemplate get_SeperatorTemplate();
    protected virtual DataTemplate SelectTemplateCore(object item, DependencyObject container);
    protected virtual DataTemplate SelectTemplateCore(object item);
}
public class Xamarin.Forms.Platform.UWP.ShellFooterRenderer : ContentControl {
    private Shell _shell;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    internal VisualElement Element { get; internal set; }
    public ShellFooterRenderer(Shell element);
    private void OnShellFooterRendererSizeChanged(object sender, SizeChangedEventArgs e);
    [CompilerGeneratedAttribute]
internal VisualElement get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(VisualElement value);
    public void SetElement(Shell shell);
    private void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFooter();
}
public class Xamarin.Forms.Platform.UWP.ShellHeaderRenderer : ContentControl {
    private Shell _shell;
    [CompilerGeneratedAttribute]
private VisualElement <Element>k__BackingField;
    internal VisualElement Element { get; internal set; }
    public ShellHeaderRenderer(Shell element);
    private void OnShellHeaderRendererSizeChanged(object sender, SizeChangedEventArgs e);
    [CompilerGeneratedAttribute]
internal VisualElement get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(VisualElement value);
    public void SetElement(Shell shell);
    private void OnShellPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateHeader();
}
public class Xamarin.Forms.Platform.UWP.ShellItemRenderer : Grid {
    [CompilerGeneratedAttribute]
private ShellSectionRenderer <SectionRenderer>k__BackingField;
    private TextBlock _Title;
    private Border _BottomBarArea;
    private Grid _BottomBar;
    private Grid _HeaderArea;
    private ItemsControl _Toolbar;
    [CompilerGeneratedAttribute]
private ShellItem <ShellItem>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellRenderer <ShellContext>k__BackingField;
    private ShellSection _shellSection;
    [CompilerGeneratedAttribute]
private Page <DisplayedPage>k__BackingField;
    private ShellSectionRenderer SectionRenderer { get; }
    internal ShellItem ShellItem { get; internal set; }
    internal ShellRenderer ShellContext { get; internal set; }
    private IShellItemController ShellItemController { get; }
    private IShellController ShellController { get; }
    protected ShellSection ShellSection { get; protected set; }
    private Page DisplayedPage { get; private set; }
    public ShellItemRenderer(ShellRenderer shellContext);
    [CompilerGeneratedAttribute]
private ShellSectionRenderer get_SectionRenderer();
    [CompilerGeneratedAttribute]
internal ShellItem get_ShellItem();
    [CompilerGeneratedAttribute]
internal void set_ShellItem(ShellItem value);
    [CompilerGeneratedAttribute]
internal ShellRenderer get_ShellContext();
    [CompilerGeneratedAttribute]
internal void set_ShellContext(ShellRenderer value);
    private IShellItemController get_ShellItemController();
    private IShellController get_ShellController();
    internal void SetShellContext(ShellRenderer context);
    internal void NavigateToShellItem(ShellItem newItem, bool animate);
    internal void UpdateHeaderInsets();
    private void UpdateBottomBar();
    private void OnShellSectionClicked(ShellSection shellSection);
    protected virtual bool ChangeSection(ShellSection shellSection);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private void UpdateAppearance(ShellAppearance appearance);
    protected ShellSection get_ShellSection();
    protected void set_ShellSection(ShellSection value);
    private void HookEvents(ShellItem shellItem);
    protected virtual void UnhookEvents(ShellItem shellItem);
    private void HookChildEvents(ShellSection shellSection);
    protected virtual void UnhookChildEvents(ShellSection shellSection);
    protected virtual void OnShellItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnShellItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnShellSectionChanged(ShellSection oldSection, ShellSection newSection);
    private void OnShellStructureChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private Page get_DisplayedPage();
    [CompilerGeneratedAttribute]
private void set_DisplayedPage(Page value);
    private void UpdateDisplayedPage(Page page);
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateNavBarVisibility();
    private void UpdatePageTitle();
    private void UpdateBottomBarVisibility();
    private void UpdateToolbar();
    private void OnNavigationRequested(object sender, NavigationRequestedEventArgs e);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
}
internal class Xamarin.Forms.Platform.UWP.ShellPageWrapper : Page {
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private ContentPresenter Root;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private bool _contentLoaded;
    public Page Page { get; public set; }
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(Page value);
    protected virtual void OnNavigatedTo(NavigationEventArgs e);
    protected virtual void OnNavigatedFrom(NavigationEventArgs e);
    public void LoadPage();
    private void OnPageLoaded(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
[BindableAttribute]
public class Xamarin.Forms.Platform.UWP.ShellRenderer : NavigationView {
    public static DependencyProperty FlyoutBackgroundColorProperty;
    internal static Color DefaultBackgroundColor;
    internal static Color DefaultForegroundColor;
    internal static Color DefaultTitleColor;
    internal static Color DefaultUnselectedColor;
    private static string TogglePaneButton;
    private static string NavigationViewBackButton;
    internal static string ShellStyle;
    private Shell _shell;
    private Brush _flyoutBackdrop;
    private double _flyoutHeight;
    private double _flyoutWidth;
    private FlyoutBehavior _flyoutBehavior;
    private List`1<List`1<Element>> _flyoutGrouping;
    [CompilerGeneratedAttribute]
private ShellItemRenderer <ItemRenderer>k__BackingField;
    private ObservableCollection`1<object> FlyoutItems;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> _elementChanged;
    [CompilerGeneratedAttribute]
private Shell <Element>k__BackingField;
    private ShellItemRenderer ItemRenderer { get; }
    private IShellController ShellController { get; }
    public Brush FlyoutBackgroundColor { get; public set; }
    private FrameworkElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.ContainerElement { get; }
    private VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.Element { get; }
    private ShellSplitView ShellSplitView { get; }
    private ScrollViewer ShellLeftNavScrollViewer { get; }
    protected internal Shell Element { get; protected internal set; }
    internal Shell Shell { get; }
    private static ShellRenderer();
    [CompilerGeneratedAttribute]
private ShellItemRenderer get_ItemRenderer();
    private IShellController get_ShellController();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.ShellRenderer/<OnBackRequested>d__21")]
private void OnBackRequested(NavigationView sender, NavigationViewBackRequestedEventArgs args);
    public Brush get_FlyoutBackgroundColor();
    public void set_FlyoutBackgroundColor(Brush value);
    protected virtual void OnApplyTemplate();
    private void OnPaneOpening(NavigationView sender, object args);
    private void OnPaneOpened(NavigationView sender, object args);
    private void OnPaneClosing(NavigationView sender, NavigationViewPaneClosingEventArgs args);
    private void OnMenuItemInvoked(NavigationView sender, NavigationViewItemInvokedEventArgs args);
    [CompilerGeneratedAttribute]
private void add__elementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__elementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override FrameworkElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_ContainerElement();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_Element();
    private sealed virtual override SizeRequest Xamarin.Forms.Platform.UWP.IVisualElementRenderer.GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIElement GetNativeElement();
    public sealed virtual void Dispose();
    public sealed virtual void SetElement(VisualElement element);
    private ShellSplitView get_ShellSplitView();
    private ScrollViewer get_ShellLeftNavScrollViewer();
    [CompilerGeneratedAttribute]
protected internal Shell get_Element();
    [CompilerGeneratedAttribute]
protected internal void set_Element(Shell value);
    internal Shell get_Shell();
    private void OnElementSizeChanged(object sender, EventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFlyoutVerticalScrollMode();
    private void UpdateFlyoutPosition();
    private void UpdateFlyoutBackdrop();
    protected virtual void UpdateFlyoutBackgroundColor();
    protected virtual void OnElementSet(Shell shell);
    private void OnShellNavigated(object sender, ShellNavigatedEventArgs e);
    private void UpdateToolBar();
    private void OnFlyoutItemsChanged(object sender, EventArgs e);
    private void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateMenuItemSource();
    [IteratorStateMachineAttribute("Xamarin.Forms.Platform.UWP.ShellRenderer/<IterateItems>d__66")]
private IEnumerable`1<object> IterateItems(List`1<List`1<Element>> groups);
    private void SwitchShellItem(ShellItem newItem, bool animate);
    private void UpdatePaneButtonColor(string name, bool overrideColor);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private sealed virtual override void Xamarin.Forms.IFlyoutBehaviorObserver.OnFlyoutBehaviorChanged(FlyoutBehavior behavior);
    public virtual ShellFlyoutTemplateSelector CreateShellFlyoutTemplateSelector();
    public virtual ShellHeaderRenderer CreateShellHeaderRenderer(Shell shell);
    public virtual ShellFooterRenderer CreateShellFooterRenderer(Shell shell);
    public virtual ShellItemRenderer CreateShellItemRenderer();
    public virtual ShellSectionRenderer CreateShellSectionRenderer();
}
[BindableAttribute]
public class Xamarin.Forms.Platform.UWP.ShellSectionRenderer : NavigationView {
    [CompilerGeneratedAttribute]
private Frame <Frame>k__BackingField;
    private Page Page;
    private ShellContent CurrentContent;
    private ShellSection ShellSection;
    private List`1<Page> FormsNavigationStack;
    private ObservableCollection`1<ShellContent> ShellContentMenuItems;
    private SearchHandler _currentSearchHandler;
    private Frame Frame { get; }
    private IShellSectionController ShellSectionController { get; }
    [CompilerGeneratedAttribute]
private Frame get_Frame();
    private IShellSectionController get_ShellSectionController();
    private void OnShellSectionRendererSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnMenuItemInvoked(NavigationView sender, NavigationViewItemInvokedEventArgs args);
    internal void NavigateToShellSection(ShellSection section);
    private void SyncMenuItems();
    private void OnShellSectionRendererCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnShellSectionPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void NavigateToContent(NavigationRequestedEventArgs args, ShellSection shellSection);
    protected virtual void OnPopRequested(NavigationRequestedEventArgs e);
    protected virtual void OnPopToRootRequested(NavigationRequestedEventArgs e);
    protected virtual void OnPushRequested(NavigationRequestedEventArgs e);
    protected virtual void OnInsertRequested(NavigationRequestedEventArgs e);
    protected virtual void OnRemoveRequested(NavigationRequestedEventArgs e);
    protected virtual void OnShellSectionChanged();
    protected virtual NavigationTransitionInfo GetTransitionInfo(NavigationRequestedEventArgs e);
    protected virtual NavigationTransitionInfo GetTransitionInfo(ShellNavigationSource navSource);
    private void OnPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateSearchHandler(SearchHandler searchHandler);
    private void SearchHandler_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ToggleSearchBoxVisibility();
    private void UpdateQueryIcon();
    private void OnSearchBoxTextChanged(AutoSuggestBox sender, AutoSuggestBoxTextChangedEventArgs args);
    private void OnSearchBoxSuggestionChosen(AutoSuggestBox sender, AutoSuggestBoxSuggestionChosenEventArgs args);
    private void OnSearchBoxQuerySubmitted(AutoSuggestBox sender, AutoSuggestBoxQuerySubmittedEventArgs args);
    private sealed virtual override void Xamarin.Forms.IAppearanceObserver.OnAppearanceChanged(ShellAppearance appearance);
    private void UpdateAppearance(ShellAppearance appearance);
    private void UpdateBrushColor(string resourceKey, Color color);
}
public class Xamarin.Forms.Platform.UWP.ShellSplitView : SplitView {
    private Brush _flyoutBackdrop;
    private Brush _flyoutPlatformBrush;
    private Brush _defaultBrush;
    private Nullable`1<LightDismissOverlayMode> _defaultLightDismissOverlayMode;
    private double _height;
    private double _width;
    private double _defaultOpenPaneLength;
    unknown Brush FlyoutBackdrop {internal set; }
    internal void SetFlyoutSizes(double height, double width);
    internal void RefreshFlyoutPosition();
    internal void RefreshFlyoutBackdrop();
    internal void set_FlyoutBackdrop(Brush value);
}
public class Xamarin.Forms.Platform.UWP.ShellToolbarItemRenderer : Button {
    public static DependencyProperty ToolbarItemProperty;
    public ToolbarItem ToolbarItem { get; public set; }
    private static ShellToolbarItemRenderer();
    private static void OnToolbarItemChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnClick(object sender, RoutedEventArgs e);
    public ToolbarItem get_ToolbarItem();
    public void set_ToolbarItem(ToolbarItem value);
    private void ToolbarItemChanged(ToolbarItem oldItem, ToolbarItem newItem);
}
public class Xamarin.Forms.Platform.UWP.SliderRenderer : ViewRenderer`2<Slider, FormsSlider> {
    private Brush defaultforegroundcolor;
    private Brush defaultbackgroundcolor;
    private Brush _defaultThumbColor;
    private PointerEventHandler _pointerPressedHandler;
    private PointerEventHandler _pointerReleasedHandler;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Slider> e);
    private void UpdateSliderColors();
    private void UpdateMinimumTrackColor();
    private void UpdateMaximumTrackColor();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateThumbColor();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.SliderRenderer/<UpdateThumbImage>d__12")]
private void UpdateThumbImage();
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    private void UpdateFlowDirection();
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnNativeValueChanged(object sender, RangeBaseValueChangedEventArgs e);
    private void OnPointerPressed(object sender, PointerRoutedEventArgs e);
    private void OnPointerReleased(object sender, PointerRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__6_0(object sender, EventArgs args);
}
public class Xamarin.Forms.Platform.UWP.StepperControl : Control {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty IncrementProperty;
    public static DependencyProperty ButtonBackgroundColorProperty;
    public static DependencyProperty ButtonBackgroundProperty;
    private Button _plus;
    private Button _minus;
    private VisualStateCache _plusStateCache;
    private VisualStateCache _minusStateCache;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    public double Increment { get; public set; }
    public double Maximum { get; public set; }
    public double Minimum { get; public set; }
    public double Value { get; public set; }
    public Color ButtonBackgroundColor { get; public set; }
    public Brush ButtonBackground { get; public set; }
    private static StepperControl();
    public double get_Increment();
    public void set_Increment(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Value();
    public void set_Value(double value);
    public Color get_ButtonBackgroundColor();
    public void set_ButtonBackgroundColor(Color value);
    public Brush get_ButtonBackground();
    public void set_ButtonBackground(Brush value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    protected virtual void OnApplyTemplate();
    private static void OnButtonBackgroundColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnButtonBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIncrementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMaxMinChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnMinusClicked(object sender, RoutedEventArgs e);
    private void OnPlusClicked(object sender, RoutedEventArgs e);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private VisualStateCache PseudoDisable(Control control);
    private void PsuedoEnable(Control control, VisualStateCache& cache);
    private void UpdateButtonBackgroundColor(Color value);
    private void UpdateButtonBackground(Brush value);
    private void UpdateEnabled(double value);
    private void UpdateValue(double delta);
}
public class Xamarin.Forms.Platform.UWP.StepperRenderer : ViewRenderer`2<Stepper, StepperControl> {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Stepper> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnControlValue(object sender, EventArgs e);
    private void UpdateFlowDirection();
    private void UpdateIncrement();
    private void UpdateMaximum();
    private void UpdateMinimum();
    private void UpdateValue();
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.Forms.Platform.UWP.StreamImageSourceHandler : object {
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.StreamImageSourceHandler/<LoadImageAsync>d__0")]
public sealed virtual Task`1<ImageSource> LoadImageAsync(ImageSource imagesource, CancellationToken cancellationToken);
}
public class Xamarin.Forms.Platform.UWP.StructuredItemsViewRenderer`1 : ItemsViewRenderer`1<TItemsView> {
    private View _currentHeader;
    private View _currentFooter;
    protected IItemsLayout Layout { get; }
    protected virtual IItemsLayout get_Layout();
    protected virtual void SetUpNewElement(ItemsView newElement);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual ListViewBase SelectListViewBase();
    protected virtual void UpdateHeader();
    protected virtual void UpdateFooter();
    protected virtual void HandleLayoutPropertyChanged(PropertyChangedEventArgs property);
    private static ListViewBase CreateGridView(GridItemsLayout gridItemsLayout);
    private static ListViewBase CreateVerticalListView(LinearItemsLayout listItemsLayout);
    private static ListViewBase CreateHorizontalListView(LinearItemsLayout listItemsLayout);
    private static Style GetItemContainerStyle(GridItemsLayout layout);
    private static Style GetVerticalItemContainerStyle(LinearItemsLayout layout);
    private static Style GetHorizontalItemContainerStyle(LinearItemsLayout layout);
}
public class Xamarin.Forms.Platform.UWP.SwipeViewRenderer : ViewRenderer`2<SwipeView, SwipeControl> {
    private bool _isDisposed;
    private Dictionary`2<SwipeItem, SwipeItem> _leftItems;
    private Dictionary`2<SwipeItem, SwipeItem> _rightItems;
    private Dictionary`2<SwipeItem, SwipeItem> _topItems;
    private Dictionary`2<SwipeItem, SwipeItem> _bottomItems;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SwipeView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs changedProperty);
    protected virtual void Dispose(bool disposing);
    protected virtual void UpdateBackgroundColor();
    protected virtual Size MeasureOverride(Size availableSize);
    private void OnSwipeItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnSwipeItemsPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnSwipeItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateContent();
    private void UpdateSwipeItems();
    private void UpdateSwipeMode(SwipeItems swipeItems);
    private void UpdateSwipeBehaviorOnInvoked(SwipeItems swipeItems);
    private void UpdateSwipeItem(SwipeItem formsSwipeItem);
    private bool IsValidSwipeItems(SwipeItems swipeItems);
    private void DisposeSwipeItems(Dictionary`2<SwipeItem, SwipeItem> list);
    private SwipeItems CreateSwipeItems(SwipeDirection swipeDirection);
    private void FillSwipeItemsCache(SwipeDirection swipeDirection, SwipeItem windowsSwipeItem, SwipeItem formsSwipeItem);
    private void OnSwipeItemInvoked(SwipeItem sender, SwipeItemInvokedEventArgs args);
    private SwipeItems GetWindowsSwipeItems(SwipeItems swipeItems);
    private SwipeItem GetWindowsSwipeItem(SwipeItem swipeItem);
    private SwipeItem GetFormsSwipeItem(SwipeItem swipeItem);
    private SwipeMode GetSwipeMode(SwipeMode swipeMode);
    private SwipeBehaviorOnInvoked GetSwipeBehaviorOnInvoked(SwipeBehaviorOnInvoked swipeBehaviorOnInvoked);
    private Color GetSwipeItemColor(Color backgroundColor);
    private void OnCloseRequested(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.UWP.SwitchCellRenderer : object {
    public virtual DataTemplate GetTemplate(Cell cell);
}
public class Xamarin.Forms.Platform.UWP.SwitchRenderer : ViewRenderer`2<Switch, ToggleSwitch> {
    private static string ToggleSwitchCommonStates;
    private static string ToggleSwitchPointerOver;
    private static string ToggleSwitchKnobBounds;
    private static string ToggleSwitchKnobOn;
    private static string ToggleSwitchFillMode;
    private object _originalOnHoverColor;
    private Brush _originalOnColorBrush;
    private Brush _originalThumbOnBrush;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Switch> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnControlLoaded(object sender, RoutedEventArgs e);
    private void OnNativeToggled(object sender, RoutedEventArgs routedEventArgs);
    private void UpdateFlowDirection();
    private void UpdateOnColor();
    private void UpdateThumbColor();
}
public class Xamarin.Forms.Platform.UWP.TabbedPageRenderer : object {
    private static string TabBarHeaderStackPanelName;
    private static string TabBarHeaderImageName;
    private static string TabBarHeaderTextBlockName;
    private static string TabBarHeaderGridName;
    private Color _barBackgroundColor;
    private Brush _barBackground;
    private Color _barTextColor;
    private bool _disposed;
    private bool _showTitle;
    private Brush _defaultSelectedColor;
    private Brush _defaultUnselectedColor;
    private TextAlignment _oldBarTextBlockTextAlignment;
    private HorizontalAlignment _oldBarTextBlockHorinzontalAlignment;
    private VisualElementTracker`2<Page, Pivot> _tracker;
    [CompilerGeneratedAttribute]
private FormsPivot <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private TabbedPage <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<VisualElementChangedEventArgs> ElementChanged;
    private ITitleProvider TitleProvider { get; }
    public FormsPivot Control { get; private set; }
    public TabbedPage Element { get; private set; }
    protected VisualElementTracker`2<Page, Pivot> Tracker { get; protected set; }
    unknown Brush Xamarin.Forms.Platform.UWP.ITitleProvider.BarBackgroundBrush {private set; }
    unknown Brush Xamarin.Forms.Platform.UWP.ITitleProvider.BarForegroundBrush {private set; }
    private bool Xamarin.Forms.Platform.UWP.ITitleProvider.ShowTitle { get; private set; }
    private string Xamarin.Forms.Platform.UWP.ITitleProvider.Title { get; private set; }
    public FrameworkElement ContainerElement { get; }
    private VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.Element { get; }
    private ITitleProvider get_TitleProvider();
    [CompilerGeneratedAttribute]
public FormsPivot get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(FormsPivot value);
    [CompilerGeneratedAttribute]
public TabbedPage get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TabbedPage value);
    protected VisualElementTracker`2<Page, Pivot> get_Tracker();
    protected void set_Tracker(VisualElementTracker`2<Page, Pivot> value);
    public sealed virtual void Dispose();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_BarBackgroundBrush(Brush value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_BarForegroundBrush(Brush value);
    private sealed virtual override bool Xamarin.Forms.Platform.UWP.ITitleProvider.get_ShowTitle();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_ShowTitle(bool value);
    private sealed virtual override string Xamarin.Forms.Platform.UWP.ITitleProvider.get_Title();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.ITitleProvider.set_Title(string value);
    public sealed virtual Task`1<CommandBar> GetCommandBarAsync();
    public sealed virtual FrameworkElement get_ContainerElement();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public sealed virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private sealed virtual override UIElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.GetNativeElement();
    public sealed virtual void SetElement(VisualElement element);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs args);
    private void OnPagesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void EnsureBarColors(NotifyCollectionChangedAction action);
    private void OnChildPagePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs args);
    private Brush GetBarBackgroundBrush();
    private Brush GetBarForegroundBrush();
    private void UpdateBarBackgroundColor();
    private void UpdateBarBackground();
    private void ApplyBarBackgroundColor(bool force);
    private void ApplyBarBackground();
    private void UpdateBarTextColor();
    private void ApplyBarTextColor(bool force);
    private void UpdateTitleVisibility();
    private void UpdateCurrentPage();
    private void UpdateBarIcons();
    private void UpdateToolbarPlacement();
    private void UpdateToolbarDynamicOverflowEnabled();
    protected void UpdateAccessKeys();
    private void AccessKeyInvokedForTab(UIElement sender, AccessKeyInvokedEventArgs arg);
    protected void UpdateAccessKey(TextBlock control);
    public sealed virtual void BindForegroundColor(AppBar appBar);
    public sealed virtual void BindForegroundColor(AppBarButton button);
    private void SetAppBarForegroundBinding(FrameworkElement element);
    private void UpdateSelectedTabColors();
    [CompilerGeneratedAttribute]
private void <SetElement>b__48_0(TextBlock t);
}
public class Xamarin.Forms.Platform.UWP.TableViewRenderer : ViewRenderer`2<TableView, ListView> {
    private bool _ignoreSelectionEvent;
    private bool _disposed;
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    protected virtual void Dispose(bool disposing);
    private void OnModelChanged(object sender, EventArgs e);
    private void OnSelectionChanged(object sender, SelectionChangedEventArgs e);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.TaskExtensions : object {
    [ExtensionAttribute]
public static void WatchForError(IAsyncAction self);
    [ExtensionAttribute]
public static void WatchForError(IAsyncOperation`1<T> self);
    [ExtensionAttribute]
public static void WatchForError(Task self);
}
internal static class Xamarin.Forms.Platform.UWP.TemplatedItemSourceFactory : object {
    internal static object Create(IEnumerable itemsSource, DataTemplate itemTemplate, BindableObject container, Nullable`1<double> itemHeight, Nullable`1<double> itemWidth, Nullable`1<Thickness> itemSpacing);
    internal static object CreateGrouped(IEnumerable itemsSource, DataTemplate itemTemplate, DataTemplate groupHeaderTemplate, DataTemplate groupFooterTemplate, BindableObject container);
}
public class Xamarin.Forms.Platform.UWP.TextAlignmentToHorizontalAlignmentConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.TextBlockExtensions : object {
    [ExtensionAttribute]
public static double FindDefaultLineHeight(TextBlock control, Inline inline);
    [ExtensionAttribute]
public static void RecalculateSpanPositions(TextBlock control, Label element, IList`1<double> inlineHeights);
}
public class Xamarin.Forms.Platform.UWP.TextCellRenderer : object {
    public virtual DataTemplate GetTemplate(Cell cell);
}
public class Xamarin.Forms.Platform.UWP.TimePickerRenderer : ViewRenderer`2<TimePicker, TimePicker> {
    private Brush _defaultBrush;
    private bool _fontApplied;
    private FontFamily _defaultFontFamily;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    protected bool PreventGestureBubbling { get; protected set; }
    protected virtual void Dispose(bool disposing);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TimePicker> e);
    internal virtual void OnElementFocusChangeRequested(object sender, FocusRequestArgs args);
    private void ControlOnLoaded(object sender, RoutedEventArgs routedEventArgs);
    private void WireUpFormsVsm();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private void OnControlTimeChanged(object sender, TimePickerValueChangedEventArgs e);
    private void UpdateFlowDirection();
    private void PickerOnForceInvalidate(object sender, EventArgs eventArgs);
    private void UpdateFont();
    private void UpdateTime();
    private void UpdateCharacterSpacing();
    private void UpdateTextColor();
    [CompilerGeneratedAttribute]
private void <OnElementFocusChangeRequested>b__5_0(TimePickerFlyout p, TimePickedEventArgs e);
}
internal class Xamarin.Forms.Platform.UWP.TitleViewManager : object {
    private ITitleViewRendererController _titleViewRendererController;
    private View TitleView { get; }
    private CommandBar CommandBar { get; }
    private FrameworkElement TitleViewPresenter { get; }
    public TitleViewManager(ITitleViewRendererController titleViewRendererController);
    private View get_TitleView();
    private CommandBar get_CommandBar();
    private FrameworkElement get_TitleViewPresenter();
    internal void OnTitleViewPropertyChanged();
    private void OnTitleViewPresenterLoaded(object sender, RoutedEventArgs e);
    private void commandBarUnloaded(object sender, RoutedEventArgs e);
    private void commandLayoutUpdated(object sender, object e);
    private void UpdateTitleViewWidth();
    private void UpdateVisibility();
}
internal class Xamarin.Forms.Platform.UWP.ToolbarPlacementHelper : object {
    private Border _bottomCommandBarArea;
    private CommandBar _commandBar;
    private Func`1<ToolbarPlacement> _getToolbarPlacement;
    private Border _titleArea;
    private Border _topCommandBarArea;
    private bool _shouldShowToolBar;
    public bool ShouldShowToolBar { get; public set; }
    public void Initialize(CommandBar commandBar, Func`1<ToolbarPlacement> getToolbarPlacement, Func`2<string, DependencyObject> getTemplateChild);
    public void UpdateToolbarPlacement();
    private static void UpdateToolbarPlacement(CommandBar toolbar, ToolbarPlacement toolbarPlacement, Border bottomCommandBarArea, Border topCommandBarArea, Border titleArea);
    public bool get_ShouldShowToolBar();
    public void set_ShouldShowToolBar(bool value);
    private void UpdateIsInValidLocation();
    [CompilerGeneratedAttribute]
private void <Initialize>b__5_0(object sender, RoutedEventArgs args);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.TransformExtensions : object {
    [ExtensionAttribute]
public static MatrixTransform ToWindows(Transform transform);
}
public class Xamarin.Forms.Platform.UWP.UriImageSourceHandler : object {
    public sealed virtual Task`1<IconElement> LoadIconElementAsync(ImageSource imagesource, CancellationToken cancellationToken);
    public sealed virtual Task`1<IconSource> LoadIconSourceAsync(ImageSource imagesource, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.UriImageSourceHandler/<LoadImageAsync>d__2")]
public sealed virtual Task`1<ImageSource> LoadImageAsync(ImageSource imagesource, CancellationToken cancellationToken);
}
public class Xamarin.Forms.Platform.UWP.ViewCellRenderer : object {
    public virtual DataTemplate GetTemplate(Cell cell);
}
[ExtensionAttribute]
internal static class Xamarin.Forms.Platform.UWP.ViewExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Page> GetParentPages(Page target);
}
public class Xamarin.Forms.Platform.UWP.ViewRenderer`2 : VisualElementRenderer`2<TElement, TNativeElement> {
    private string _defaultAutomationPropertiesName;
    private Nullable`1<AccessibilityView> _defaultAutomationPropertiesAccessibilityView;
    private string _defaultAutomationPropertiesHelpText;
    private UIElement _defaultAutomationPropertiesLabeledBy;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected virtual void SetAutomationId(string id);
    protected virtual void SetAutomationPropertiesName();
    protected virtual void SetAutomationPropertiesAccessibilityView();
    protected virtual void SetAutomationPropertiesHelpText();
    protected virtual void SetAutomationPropertiesLabeledBy();
    private void UpdateFlowDirection();
}
public class Xamarin.Forms.Platform.UWP.ViewToRendererConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
public class Xamarin.Forms.Platform.UWP.VisualElementChangedEventArgs : ElementChangedEventArgs`1<VisualElement> {
    public VisualElementChangedEventArgs(VisualElement oldElement, VisualElement newElement);
}
[ExtensionAttribute]
public static class Xamarin.Forms.Platform.UWP.VisualElementExtensions : object {
    [ExtensionAttribute]
public static IVisualElementRenderer GetOrCreateRenderer(VisualElement self);
    [ExtensionAttribute]
internal static void Cleanup(VisualElement self);
    [ExtensionAttribute]
internal static bool UseFormsVsm(T element);
}
public class Xamarin.Forms.Platform.UWP.VisualElementPackager : object {
    private int _column;
    private int _columnSpan;
    private Panel _panel;
    private IVisualElementRenderer _renderer;
    private int _row;
    private int _rowSpan;
    private bool _disposed;
    private bool _isLoaded;
    private IElementController ElementController { get; }
    public VisualElementPackager(IVisualElementRenderer renderer);
    public VisualElementPackager(IVisualElementRenderer renderer, int row, int rowSpan, int column, int columnSpan);
    private IElementController get_ElementController();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Load();
    private void EnsureZIndex();
    private void SetupVisualElement(VisualElement view);
    private void OnChildAdded(object sender, ElementEventArgs e);
    private void OnChildRemoved(object sender, ElementEventArgs e);
    private void OnChildrenReordered(object sender, EventArgs e);
}
public class Xamarin.Forms.Platform.UWP.VisualElementRenderer`2 : Panel {
    private string _defaultAutomationPropertiesName;
    private Nullable`1<AccessibilityView> _defaultAutomationPropertiesAccessibilityView;
    private string _defaultAutomationPropertiesHelpText;
    private UIElement _defaultAutomationPropertiesLabeledBy;
    private bool _disposed;
    private FocusNavigationDirection focusDirection;
    private EventHandler`1<VisualElementChangedEventArgs> _elementChangedHandlers;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyChangedEventArgs> _elementPropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanging;
    [CompilerGeneratedAttribute]
private EventHandler _controlChanged;
    private VisualElementTracker`2<TElement, TNativeElement> _tracker;
    private Page _containingPage;
    private Canvas _backgroundLayer;
    [CompilerGeneratedAttribute]
private TNativeElement <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private TElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ArrangeNativeChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualElementPackager <Packager>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ElementChangedEventArgs`1<TElement>> ElementChanged;
    private Control _control { get; }
    public TNativeElement Control { get; private set; }
    public TElement Element { get; private set; }
    protected bool AutoPackage { get; protected set; }
    protected bool AutoTrack { get; protected set; }
    protected bool ArrangeNativeChildren { get; protected set; }
    protected bool PreventGestureBubbling { get; protected set; }
    private IElementController ElementController { get; }
    protected VisualElementTracker`2<TElement, TNativeElement> Tracker { get; protected set; }
    private VisualElementPackager Packager { get; private set; }
    public FrameworkElement ContainerElement { get; }
    private VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.Element { get; }
    [CompilerGeneratedAttribute]
private void add__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__elementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanging(EventHandler value);
    [CompilerGeneratedAttribute]
private void add__controlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__controlChanged(EventHandler value);
    private Control get__control();
    [CompilerGeneratedAttribute]
public TNativeElement get_Control();
    [CompilerGeneratedAttribute]
private void set_Control(TNativeElement value);
    [CompilerGeneratedAttribute]
public TElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(TElement value);
    [CompilerGeneratedAttribute]
protected bool get_AutoPackage();
    [CompilerGeneratedAttribute]
protected void set_AutoPackage(bool value);
    [CompilerGeneratedAttribute]
protected bool get_AutoTrack();
    [CompilerGeneratedAttribute]
protected void set_AutoTrack(bool value);
    [CompilerGeneratedAttribute]
protected bool get_ArrangeNativeChildren();
    [CompilerGeneratedAttribute]
protected void set_ArrangeNativeChildren(bool value);
    [CompilerGeneratedAttribute]
protected virtual bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
protected virtual void set_PreventGestureBubbling(bool value);
    private IElementController get_ElementController();
    protected VisualElementTracker`2<TElement, TNativeElement> get_Tracker();
    protected void set_Tracker(VisualElementTracker`2<TElement, TNativeElement> value);
    [CompilerGeneratedAttribute]
private VisualElementPackager get_Packager();
    [CompilerGeneratedAttribute]
private void set_Packager(VisualElementPackager value);
    private sealed virtual override void Xamarin.Forms.IEffectControlProvider.RegisterEffect(Effect effect);
    public sealed virtual FrameworkElement get_ContainerElement();
    private sealed virtual override VisualElement Xamarin.Forms.Platform.UWP.IVisualElementRenderer.get_Element();
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualElementRenderer.add_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualElementRenderer.remove_ElementChanged(EventHandler`1<VisualElementChangedEventArgs> value);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    public sealed virtual UIElement GetNativeElement();
    public sealed virtual void SetElement(VisualElement element);
    private void OnGettingFocus(UIElement sender, GettingFocusEventArgs args);
    private void OnGotFocus(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    [CompilerGeneratedAttribute]
public void remove_ElementChanged(EventHandler`1<ElementChangedEventArgs`1<TElement>> value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualNativeElementRenderer.add_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualNativeElementRenderer.remove_ElementPropertyChanged(EventHandler`1<PropertyChangedEventArgs> value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualNativeElementRenderer.add_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualNativeElementRenderer.remove_ControlChanging(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualNativeElementRenderer.add_ControlChanged(EventHandler value);
    private sealed virtual override void Xamarin.Forms.Platform.UWP.IVisualNativeElementRenderer.remove_ControlChanged(EventHandler value);
    protected virtual Size ArrangeOverride(Size finalSize);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TElement> e);
    protected void UpdateTabStop();
    protected void UpdateTabIndex();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnRegisterEffect(PlatformEffect effect);
    protected virtual void SetAutomationId(string id);
    protected virtual void SetAutomationPropertiesName();
    protected virtual void SetAutomationPropertiesAccessibilityView();
    protected virtual void SetAutomationPropertiesHelpText();
    protected virtual void SetAutomationPropertiesLabeledBy();
    protected void SetNativeControl(TNativeElement control);
    protected virtual void UpdateBackgroundColor();
    protected virtual void UpdateBackground();
    protected void UpdateAccessKey();
    protected virtual void UpdateNativeControl();
    internal virtual void OnElementFocusChangeRequested(object sender, FocusRequestArgs args);
    internal void UnfocusControl(Control control);
    private void OnControlGotFocus(object sender, RoutedEventArgs args);
    private void OnControlLoaded(object sender, RoutedEventArgs args);
    private void OnControlLostFocus(object sender, RoutedEventArgs args);
    private void OnTrackerUpdated(object sender, EventArgs e);
    private void UpdateEnabled();
    private void UpdateInputTransparent();
    private void AddBackgroundLayer();
    private void RemoveBackgroundLayer();
    internal static bool NeedsBackgroundLayer(VisualElement element);
    private void UpdateTracker();
    [CompilerGeneratedAttribute]
private void <UpdateTabStop>b__84_0(Control c);
}
public class Xamarin.Forms.Platform.UWP.VisualElementTracker`2 : object {
    private NotifyCollectionChangedEventHandler _collectionChangedHandler;
    private List`1<UInt32> _fingers;
    private FrameworkElement _container;
    private TNativeElement _control;
    private TElement _element;
    private bool _invalidateArrangeNeeded;
    private bool _isDisposed;
    private bool _isPanning;
    private bool _isSwiping;
    private bool _isPinching;
    private bool _wasPanGestureStartedSent;
    private bool _wasPinchGestureStartedSent;
    private static bool HasClip;
    [CompilerGeneratedAttribute]
private bool <PreventGestureBubbling>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Updated;
    public FrameworkElement Container { get; public set; }
    public bool PreventGestureBubbling { get; public set; }
    public TNativeElement Control { get; public set; }
    public TElement Element { get; public set; }
    public FrameworkElement get_Container();
    public void set_Container(FrameworkElement value);
    [CompilerGeneratedAttribute]
public bool get_PreventGestureBubbling();
    [CompilerGeneratedAttribute]
public void set_PreventGestureBubbling(bool value);
    public TNativeElement get_Control();
    public void set_Control(TNativeElement value);
    private void SendEventArgs(Action`1<TRecognizer> func);
    private void HandleDragLeave(object sender, DragEventArgs e);
    private void HandleDragOver(object sender, DragEventArgs e);
    private void HandleDropCompleted(UIElement sender, DropCompletedEventArgs e);
    private void HandleDrop(object sender, DragEventArgs e);
    private void HandleDragStarting(UIElement sender, DragStartingEventArgs e);
    public TElement get_Element();
    public void set_Element(TElement value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public void add_Updated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Updated(EventHandler value);
    private void ClearContainerEventHandlers();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void UpdateNativeControl();
    private void HandleSwipe(ManipulationDeltaRoutedEventArgs e, View view);
    private void HandlePan(ManipulationDeltaRoutedEventArgs e, View view);
    private void HandlePinch(ManipulationDeltaRoutedEventArgs e, View view);
    private void MaybeInvalidate();
    private void ModelGestureRecognizersOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs);
    private void OnDoubleTap(object sender, DoubleTappedRoutedEventArgs e);
    private void OnManipulationCompleted(object sender, ManipulationCompletedRoutedEventArgs e);
    private void OnManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e);
    private void OnManipulationStarted(object sender, ManipulationStartedRoutedEventArgs e);
    private void OnPointerCanceled(object sender, PointerRoutedEventArgs e);
    private void OnPointerExited(object sender, PointerRoutedEventArgs e);
    private void OnPointerPressed(object sender, PointerRoutedEventArgs e);
    private void OnPointerReleased(object sender, PointerRoutedEventArgs e);
    private void OnRedrawNeeded(object sender, EventArgs e);
    private void OnTap(object sender, TappedRoutedEventArgs e);
    private void SwipeComplete(bool success);
    private void OnUpdated();
    private void PanComplete(bool success);
    private void PinchComplete(bool success);
    private static void UpdateInputTransparent(VisualElement view, FrameworkElement frameworkElement);
    private static void UpdateClip(VisualElement view, FrameworkElement frameworkElement);
    private static bool ShouldUpdateClip(VisualElement view, FrameworkElement frameworkElement);
    private static void UpdateOpacity(VisualElement view, FrameworkElement frameworkElement);
    private static void UpdateRotation(VisualElement view, FrameworkElement frameworkElement);
    private static void UpdateScaleAndRotation(VisualElement view, FrameworkElement frameworkElement);
    private static void UpdateVisibility(VisualElement view, FrameworkElement frameworkElement);
    private void UpdateDragAndDropGestureRecognizers();
    private void UpdatingGestureRecognizers();
    private void HandleTapped(object sender, TappedRoutedEventArgs tappedRoutedEventArgs);
    private void HandleDoubleTapped(object sender, DoubleTappedRoutedEventArgs doubleTappedRoutedEventArgs);
    [CompilerGeneratedAttribute]
private bool <HandlePan>b__42_0(PanGestureRecognizer g);
    [CompilerGeneratedAttribute]
private bool <PanComplete>b__58_0(PanGestureRecognizer g);
}
public class Xamarin.Forms.Platform.UWP.WebViewRenderer : ViewRenderer`2<WebView, WebView> {
    private WebNavigationEvent _eventState;
    private bool _updating;
    private WebView _internalWebView;
    private static string LocalScheme;
    private static string BaseInsertionScript;
    private HashSet`1<string> _loadedCookies;
    public sealed virtual void LoadHtml(string html, string baseUrl);
    public sealed virtual void LoadUrl(string url);
    private void TearDown(WebView webView);
    private void Connect(WebView webView);
    protected virtual void Dispose(bool disposing);
    protected virtual WebView CreateNativeControl();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<WebView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private Uri CreateUriForCookies(string url);
    private HttpCookieCollection GetCookiesFromNativeStore(string url);
    private void InitialCookiePreloadIfNecessary(string url);
    private void SyncNativeCookiesToElement(string url);
    private void SyncNativeCookies(string url);
    private void Load();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WebViewRenderer/<OnEvalRequested>d__20")]
private void OnEvalRequested(object sender, EvalRequested eventArg);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WebViewRenderer/<OnEvaluateJavaScriptRequested>d__21")]
private Task`1<string> OnEvaluateJavaScriptRequested(string script);
    private void OnGoBackRequested(object sender, EventArgs eventArgs);
    private void OnGoForwardRequested(object sender, EventArgs eventArgs);
    private void OnReloadRequested(object sender, EventArgs eventArgs);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WebViewRenderer/<OnNavigationCompleted>d__25")]
private void OnNavigationCompleted(WebView sender, WebViewNavigationCompletedEventArgs e);
    private void OnNavigationFailed(object sender, WebViewNavigationFailedEventArgs e);
    private void OnNavigationStarted(WebView sender, WebViewNavigationStartingEventArgs e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WebViewRenderer/<OnScriptNotify>d__28")]
private void OnScriptNotify(object sender, NotifyEventArgs e);
    private void SendNavigated(UrlWebViewSource source, WebNavigationEvent evnt, WebNavigationResult result);
    private void UpdateCanGoBackForward();
    private void UpdateExecutionMode();
    private void OnSeparateProcessLost(WebView sender, WebViewSeparateProcessLostEventArgs e);
}
public abstract class Xamarin.Forms.Platform.UWP.WindowsBasePage : Page {
    private Application _application;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    internal Platform Platform { get; private set; }
    [CompilerGeneratedAttribute]
internal Platform get_Platform();
    [CompilerGeneratedAttribute]
private void set_Platform(Platform value);
    protected abstract virtual Platform CreatePlatform();
    protected void LoadApplication(Application application);
    protected void RegisterWindow(Page page);
    private void OnApplicationPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnApplicationResuming(object sender, object e);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsBasePage/<OnApplicationSuspending>d__11")]
private void OnApplicationSuspending(object sender, SuspendingEventArgs e);
}
internal abstract class Xamarin.Forms.Platform.UWP.WindowsBasePlatformServices : object {
    private static string WrongThreadError;
    private CoreDispatcher _dispatcher;
    private UISettings _uiSettings;
    public bool IsInvokeRequired { get; }
    public string RuntimePlatform { get; }
    public OSAppTheme RequestedTheme { get; }
    protected WindowsBasePlatformServices(CoreDispatcher dispatcher);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsBasePlatformServices/<BeginInvokeOnMainThread>d__4")]
public sealed virtual void BeginInvokeOnMainThread(Action action);
    public sealed virtual Ticker CreateTicker();
    public virtual Assembly[] GetAssemblies();
    public sealed virtual string GetHash(string input);
    private sealed virtual override string Xamarin.Forms.Internals.IPlatformServices.GetMD5Hash(string input);
    public sealed virtual double GetNamedSize(NamedSize size, Type targetElementType, bool useOldSizes);
    public sealed virtual Color GetNamedColor(string name);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsBasePlatformServices/<GetStreamAsync>d__11")]
public sealed virtual Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken);
    public sealed virtual IIsolatedStorageFile GetUserStoreForApplication();
    public sealed virtual bool get_IsInvokeRequired();
    public sealed virtual string get_RuntimePlatform();
    public sealed virtual void OpenUriAction(Uri uri);
    public sealed virtual void StartTimer(TimeSpan interval, Func`1<bool> callback);
    public sealed virtual void QuitApplication();
    public sealed virtual SizeRequest GetNativeSize(VisualElement view, double widthConstraint, double heightConstraint);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsBasePlatformServices/<UISettingsColorValuesChanged>d__21")]
private void UISettingsColorValuesChanged(UISettings sender, object args);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsBasePlatformServices/<TryAllDispatchers>d__22")]
private Task TryAllDispatchers(Action action);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsBasePlatformServices/<TryDispatch>d__23")]
private Task`1<bool> TryDispatch(CoreDispatcher dispatcher, Action action);
    public sealed virtual void Invalidate(VisualElement visualElement);
    public sealed virtual OSAppTheme get_RequestedTheme();
}
internal class Xamarin.Forms.Platform.UWP.WindowsDeviceInfo : DeviceInfo {
    private DisplayInformation _information;
    private bool _isDisposed;
    private IDualScreenService DualScreenService { get; }
    public Size PixelScreenSize { get; }
    public Size ScaledScreenSize { get; }
    public double ScalingFactor { get; }
    private IDualScreenService get_DualScreenService();
    public virtual Size get_PixelScreenSize();
    public virtual Size get_ScaledScreenSize();
    public virtual double get_ScalingFactor();
    protected virtual void Dispose(bool disposing);
    private static DeviceOrientation GetDeviceOrientation(DisplayOrientations orientations);
    private void OnOrientationChanged(DisplayInformation sender, object args);
}
internal class Xamarin.Forms.Platform.UWP.WindowsExpressionSearch : object {
    private List`1<object> _results;
    private Type _targeType;
    public sealed virtual List`1<T> FindObjects(Expression expression);
    private void Visit(Expression expression);
    private void VisitBinding(MemberBinding binding);
    private static void VisitList(IEnumerable`1<TList> list, Action`1<TList> visitor);
    private void VisitMemberAccess(MemberExpression member);
    [CompilerGeneratedAttribute]
private void <Visit>b__3_0(ElementInit initializer);
    [CompilerGeneratedAttribute]
private void <VisitBinding>b__4_0(ElementInit initializer);
}
internal class Xamarin.Forms.Platform.UWP.WindowsIsolatedStorage : object {
    private StorageFolder _folder;
    public WindowsIsolatedStorage(StorageFolder folder);
    public sealed virtual Task CreateDirectoryAsync(string path);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsIsolatedStorage/<GetDirectoryExistsAsync>d__3")]
public sealed virtual Task`1<bool> GetDirectoryExistsAsync(string path);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsIsolatedStorage/<GetFileExistsAsync>d__4")]
public sealed virtual Task`1<bool> GetFileExistsAsync(string path);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsIsolatedStorage/<GetLastWriteTimeAsync>d__5")]
public sealed virtual Task`1<DateTimeOffset> GetLastWriteTimeAsync(string path);
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsIsolatedStorage/<OpenFileAsync>d__6")]
public sealed virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access);
    public sealed virtual Task`1<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access, FileShare share);
}
public class Xamarin.Forms.Platform.UWP.WindowsPage : WindowsBasePage {
    protected virtual Platform CreatePlatform();
}
internal class Xamarin.Forms.Platform.UWP.WindowsPlatform : Platform {
    public WindowsPlatform(Page page);
}
internal class Xamarin.Forms.Platform.UWP.WindowsPlatformServices : WindowsBasePlatformServices {
    public WindowsPlatformServices(CoreDispatcher dispatcher);
}
internal class Xamarin.Forms.Platform.UWP.WindowsResourcesProvider : object {
    public sealed virtual IResourceDictionary GetSystemResources();
    private Style GetStyle(object nativeKey, TextBlock prototype);
    private static FontAttributes ToAttributes(FontWeight fontWeight);
}
internal class Xamarin.Forms.Platform.UWP.WindowsSerializer : object {
    private static string PropertyStoreFile;
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsSerializer/<DeserializePropertiesAsync>d__1")]
public sealed virtual Task`1<IDictionary`2<string, object>> DeserializePropertiesAsync();
    [AsyncStateMachineAttribute("Xamarin.Forms.Platform.UWP.WindowsSerializer/<SerializePropertiesAsync>d__2")]
public sealed virtual Task SerializePropertiesAsync(IDictionary`2<string, object> properties);
}
internal class Xamarin.Forms.Platform.UWP.WindowsTicker : Ticker {
    [ThreadStaticAttribute]
private static Ticker s_ticker;
    protected virtual void DisableTimer();
    protected virtual void EnableTimer();
    private void RenderingFrameEventHandler(object sender, object args);
    protected virtual Ticker GetTickerInstance();
}
public class Xamarin.Forms.Platform.WinRT.StepperControl : UserControl {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty IncrementProperty;
    public static DependencyProperty ButtonBackgroundColorProperty;
    public static DependencyProperty ButtonBackgroundProperty;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private Button Minus;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private Button Plus;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
private bool _contentLoaded;
    public double Increment { get; public set; }
    public double Maximum { get; public set; }
    public double Minimum { get; public set; }
    public double Value { get; public set; }
    public Color ButtonBackgroundColor { get; public set; }
    public Brush ButtonBackground { get; public set; }
    private static StepperControl();
    public double get_Increment();
    public void set_Increment(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Value();
    public void set_Value(double value);
    public Color get_ButtonBackgroundColor();
    public void set_ButtonBackgroundColor(Color value);
    public Brush get_ButtonBackground();
    public void set_ButtonBackground(Brush value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    private static void OnButtonBackgroundColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnButtonBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIncrementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMaxMinChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnMinusClicked(object sender, RoutedEventArgs e);
    private void OnPlusClicked(object sender, RoutedEventArgs e);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateButtonBackgroundColor(Color value);
    private void UpdateButtonBackground(Brush value);
    private void UpdateEnabled(double value);
    private void UpdateValue(double delta);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.19041.685")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
internal class Xamarin.Forms.StreamWrapper : Stream {
    private Stream _wrapped;
    private IDisposable _additionalDisposable;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamWrapper(Stream wrapped);
    public StreamWrapper(Stream wrapped, IDisposable additionalDisposable);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Xamarin.Forms.StreamWrapper/<GetStreamAsync>d__24")]
public static Task`1<Stream> GetStreamAsync(Uri uri, CancellationToken cancellationToken, HttpClient client);
}
