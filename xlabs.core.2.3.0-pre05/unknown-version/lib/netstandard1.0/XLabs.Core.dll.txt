public class XLabs.BigEndianReader : BinaryReader {
    public BigEndianReader(Stream stream, bool leaveOpen);
    public virtual decimal ReadDecimal();
    public virtual double ReadDouble();
    public virtual float ReadSingle();
    public virtual long ReadInt64();
    public virtual ulong ReadUInt64();
    public virtual int ReadInt32();
    public virtual UInt32 ReadUInt32();
    public virtual short ReadInt16();
    public virtual ushort ReadUInt16();
    public virtual char ReadChar();
    private Byte[] GetReversedBytes(int count);
}
public abstract class XLabs.Data.ObservableObject : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void NotifyPropertyChanged(string propertyName);
    protected virtual void NotifyPropertyChanged(Expression`1<Func`1<T>> propertyExpression);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected bool SetProperty(T& storage, T value, Expression`1<Func`1<T>> propertyExpression);
    protected bool SetProperty(T& storage, T value, string propertyName);
    private string GetPropertyName(Expression`1<Func`1<T>> propertyExpression);
}
[ExtensionAttribute]
public static class XLabs.DateTimeExtensions : object {
    public static DateTime UnixTime;
    private static DateTimeExtensions();
    [ExtensionAttribute]
public static TimeSpan SinceUnixTime(DateTime time);
    [ExtensionAttribute]
public static TimeSpan SinceUnixTime(DateTimeOffset time);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> SinceUnixTime(Nullable`1<DateTime> time);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> SinceUnixTime(Nullable`1<DateTimeOffset> time);
    [ExtensionAttribute]
public static Nullable`1<long> FullMilliseconds(Nullable`1<TimeSpan> timeSpan);
}
public enum XLabs.Enums.ImageOrientation : Enum {
    public int value__;
    public static ImageOrientation ImageToLeft;
    public static ImageOrientation ImageOnTop;
    public static ImageOrientation ImageToRight;
    public static ImageOrientation ImageOnBottom;
    public static ImageOrientation ImageCentered;
}
[FlagsAttribute]
public enum XLabs.Enums.Orientation : Enum {
    public int value__;
    public static Orientation None;
    public static Orientation Portrait;
    public static Orientation Landscape;
    public static Orientation PortraitUp;
    public static Orientation PortraitDown;
    public static Orientation LandscapeLeft;
    public static Orientation LandscapeRight;
}
public enum XLabs.Enums.TextCellDetailLocation : Enum {
    public int value__;
    public static TextCellDetailLocation Below;
    public static TextCellDetailLocation Right;
}
public class XLabs.EventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; private set; }
    public EventArgs`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
}
[ExtensionAttribute]
public static class XLabs.EventExtensions : object {
    [ExtensionAttribute]
public static void Invoke(EventHandler`1<EventArgs`1<T>> handler, object sender, T value);
    [ExtensionAttribute]
public static bool TryInvoke(EventHandler`1<T> handler, object sender, T args);
}
public class XLabs.Exceptions.InvalidNestingException : Exception {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SearchPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExpectedContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NestedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedContainerName>k__BackingField;
    public IEnumerable`1<string> SearchPath { get; public set; }
    public Type NestedType { get; public set; }
    public Type ExpectedContainer { get; public set; }
    public string NestedName { get; public set; }
    public string ExpectedContainerName { get; public set; }
    public InvalidNestingException(Type nestedType, Type expectedContainer, List`1<string> history);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_SearchPath();
    [CompilerGeneratedAttribute]
public void set_SearchPath(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Type get_NestedType();
    [CompilerGeneratedAttribute]
public void set_NestedType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ExpectedContainer();
    [CompilerGeneratedAttribute]
public void set_ExpectedContainer(Type value);
    [CompilerGeneratedAttribute]
public string get_NestedName();
    [CompilerGeneratedAttribute]
public void set_NestedName(string value);
    [CompilerGeneratedAttribute]
public string get_ExpectedContainerName();
    [CompilerGeneratedAttribute]
public void set_ExpectedContainerName(string value);
}
public class XLabs.Exceptions.InvalidVisualObjectException : Exception {
    [CompilerGeneratedAttribute]
private Type <InflatedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public Type InflatedType { get; public set; }
    public string MemberName { get; public set; }
    public InvalidVisualObjectException(Type inflatedtype, string name);
    [CompilerGeneratedAttribute]
public Type get_InflatedType();
    [CompilerGeneratedAttribute]
public void set_InflatedType(Type value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
}
public class XLabs.Exceptions.NoDataTemplateMatchException : Exception {
    [CompilerGeneratedAttribute]
private Type <AttemptedMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <TypesExamined>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TypeNamesExamined>k__BackingField;
    public Type AttemptedMatch { get; public set; }
    public List`1<Type> TypesExamined { get; public set; }
    public List`1<string> TypeNamesExamined { get; public set; }
    public NoDataTemplateMatchException(Type tomatch, List`1<Type> candidates);
    [CompilerGeneratedAttribute]
public Type get_AttemptedMatch();
    [CompilerGeneratedAttribute]
public void set_AttemptedMatch(Type value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_TypesExamined();
    [CompilerGeneratedAttribute]
public void set_TypesExamined(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TypeNamesExamined();
    [CompilerGeneratedAttribute]
public void set_TypeNamesExamined(List`1<string> value);
}
public class XLabs.Exceptions.PropertyNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private Type <InspectedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InspectedTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AvailableProperties>k__BackingField;
    public Type InspectedType { get; private set; }
    public string InspectedTypeName { get; private set; }
    public string PropertyName { get; private set; }
    public List`1<string> AvailableProperties { get; private set; }
    public PropertyNotFoundException(Type etype, string property, IEnumerable`1<string> available, string caller);
    [CompilerGeneratedAttribute]
public Type get_InspectedType();
    [CompilerGeneratedAttribute]
private void set_InspectedType(Type value);
    [CompilerGeneratedAttribute]
public string get_InspectedTypeName();
    [CompilerGeneratedAttribute]
private void set_InspectedTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AvailableProperties();
    [CompilerGeneratedAttribute]
private void set_AvailableProperties(List`1<string> value);
}
public class XLabs.Helpers.GroupedListSource`2 : ObservableCollection`1<ListGroup`2<TKey, T>> {
    public GroupedListSource`2(IEnumerable`1<ListGroup`2<TKey, T>> items);
}
public class XLabs.Helpers.ListGroup`2 : ObservableCollection`1<T> {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public TKey Key { get; public set; }
    public ListGroup`2(IEnumerable`1<T> items);
    public ListGroup`2(TKey key, IEnumerable`1<T> items);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(TKey value);
}
public static class XLabs.Icons : object {
    public static string Anchor { get; }
    public static string Check { get; }
    public static string Car { get; }
    public static string Cloud { get; }
    public static string Download { get; }
    public static string Envelope { get; }
    public static string ExternalLink { get; }
    public static string SignOut { get; }
    public static string Send { get; }
    public static string TrashCan { get; }
    public static string Undo { get; }
    public static string User { get; }
    public static string Warning { get; }
    public static string Pencil { get; }
    public static string Lock { get; }
    public static string Unlock { get; }
    public static string Save { get; }
    public static string Twitter { get; }
    public static string FacebookSquare { get; }
    public static string Facebook { get; }
    public static string Github { get; }
    public static string Google { get; }
    public static string GooglePlus { get; }
    public static string Gears { get; }
    public static string Ticket { get; }
    public static string Windows { get; }
    public static string Trello { get; }
    public static string get_Anchor();
    public static string get_Check();
    public static string get_Car();
    public static string get_Cloud();
    public static string get_Download();
    public static string get_Envelope();
    public static string get_ExternalLink();
    public static string get_SignOut();
    public static string get_Send();
    public static string get_TrashCan();
    public static string get_Undo();
    public static string get_User();
    public static string get_Warning();
    public static string get_Pencil();
    public static string get_Lock();
    public static string get_Unlock();
    public static string get_Save();
    public static string get_Twitter();
    public static string get_FacebookSquare();
    public static string get_Facebook();
    public static string get_Github();
    public static string get_Google();
    public static string get_GooglePlus();
    public static string get_Gears();
    public static string get_Ticket();
    public static string get_Windows();
    public static string get_Trello();
}
[ExtensionAttribute]
public static class XLabs.IEnumerableExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<T> ToReadOnlyCollection(IEnumerable`1<T> enumerable);
    [IteratorStateMachineAttribute("XLabs.IEnumerableExtensions/<ForEach>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> enumerable, Action`1<T> action);
}
[ExtensionAttribute]
public static class XLabs.NumericExtensions : object {
    [ExtensionAttribute]
public static double Clamp(double self, double min, double max);
    [ExtensionAttribute]
public static int Clamp(int self, int min, int max);
}
public class XLabs.RelayCommand : object {
    private Action execute;
    private Func`1<bool> canExecute;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public RelayCommand(Action execute, Func`1<bool> canExecute);
    public RelayCommand(Action execute);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
public class XLabs.RelayCommand`1 : object {
    private Action`1<T> execute;
    private Predicate`1<T> canExecute;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public RelayCommand`1(Action`1<T> execute);
    public RelayCommand`1(Action`1<T> execute, Predicate`1<T> canExecute);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
public class XLabs.Reporting.DebugReport : object {
    public sealed virtual void Exception(Exception exception);
}
public interface XLabs.Reporting.IReport {
    public abstract virtual void Exception(Exception exception);
}
public static class XLabs.Reporting.Report : object {
    private static List`1<IReport> Reporters;
    private static Report();
    public static void Add(IReport report);
    public static void Remove(IReport report);
    public static void Exception(Exception exception);
}
public static class XLabs.TaskUtils : object {
    public static Task`1<T> TaskFromResult(T result);
}
public class XLabs.Utilities.TtfFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TableCount>k__BackingField;
    public string FontName { get; private set; }
    public int Version { get; private set; }
    public short TableCount { get; private set; }
    public static TtfFileInfo FromStream(Stream stream);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
private void set_FontName(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    [CompilerGeneratedAttribute]
public short get_TableCount();
    [CompilerGeneratedAttribute]
private void set_TableCount(short value);
    private static int GetInt16(IReadOnlyList`1<byte> array, int offset);
}
public class XLabs.Vector3 : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Z>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Z { get; public set; }
    public Vector3(double x, double y, double z);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Z();
    [CompilerGeneratedAttribute]
public void set_Z(double value);
}
