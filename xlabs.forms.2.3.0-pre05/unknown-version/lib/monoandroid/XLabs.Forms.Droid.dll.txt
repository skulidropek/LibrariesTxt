public class XLabs.Forms.Controls.CalendarViewRenderer : ViewRenderer`2<CalendarView, RelativeLayout> {
    private static string TAG;
    private View _containerView;
    private bool _isElementChanging;
    private CalendarArrowView _leftArrow;
    private CalendarPickerView _picker;
    private CalendarArrowView _rightArrow;
    private CalendarView _view;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CalendarView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ProtectFromEventCycle(Action action);
    private void SetDisplayedMonth(DateTime newMonth);
    private void SetNavigationArrows();
    private void SelectMonth(int monthIndex, bool animated);
    protected virtual void Dispose(bool disposing);
    private void SetFonts();
    private void SetColors();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__7_0(object sender, DateSelectedEventArgs evt);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__7_2(object sender, MonthChangedEventArgs mch);
    [CompilerGeneratedAttribute]
private void <SetNavigationArrows>b__11_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <SetNavigationArrows>b__11_1(object sender, EventArgs e);
}
public class XLabs.Forms.Controls.CameraPreview : ViewGroup {
    private static string TAG;
    private SurfaceView _mSurfaceView;
    private ISurfaceHolder _mHolder;
    private Size _mPreviewSize;
    private IList`1<Size> _mSupportedPreviewSizes;
    private Camera _camera;
    public Camera PreviewCamera { get; public set; }
    public CameraPreview(Context context);
    public Camera get_PreviewCamera();
    public void set_PreviewCamera(Camera value);
    public void SwitchCamera(Camera camera);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    public sealed virtual void SurfaceCreated(ISurfaceHolder holder);
    public sealed virtual void SurfaceDestroyed(ISurfaceHolder holder);
    private Size GetOptimalPreviewSize(IList`1<Size> sizes, int w, int h);
    public sealed virtual void SurfaceChanged(ISurfaceHolder holder, Format format, int w, int h);
}
public class XLabs.Forms.Controls.CameraViewRenderer : ViewRenderer`2<CameraView, CameraPreview> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CameraView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
}
public class XLabs.Forms.Controls.CheckBoxRenderer : ViewRenderer`2<CheckBox, CheckBox> {
    private ColorStateList defaultTextColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void CheckBoxCheckedChange(object sender, CheckedChangeEventArgs e);
    private Typeface TrySetFont(string fontName);
    private void UpdateTextColor();
}
public class XLabs.Forms.Controls.CircleImageRenderer : ImageRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual bool DrawChild(Canvas canvas, View child, long drawingTime);
    private void ReshapeImage(Bitmap sourceBitmap);
    private Rect GetScaledRect(int sourceHeight, int sourceWidth);
    private static int MakeSquare(int height, Int32& width);
    private Rect GetTargetRect(int sourceHeight, int sourceWidth);
}
public class XLabs.Forms.Controls.CustomTypefaceSpan : TypefaceSpan {
    private Typeface _newType;
    private Color _fontColor;
    public CustomTypefaceSpan(string family, Typeface type, Color color);
    public virtual void UpdateDrawState(TextPaint ds);
    public virtual void UpdateMeasureState(TextPaint paint);
    private static void ApplyCustomTypeFace(Paint paint, Typeface tf, Color color);
}
public class XLabs.Forms.Controls.DragContentViewRenderer : ViewRenderer`2<DragContentView, View> {
    private View touchedElement;
    private View touchedView;
    private PointF homePosition;
    private PointF offsetLocation;
    private void HandleTouch(object sender, TouchEventArgs e);
    private static PointF GetPointF(MotionEvent e);
}
public class XLabs.Forms.Controls.DynamicListViewRenderer`1 : ViewRenderer`2<DynamicListView`1<T>, ListView> {
    private ListView _tableView;
    private DataSource<T> _source;
    private DataSource<T> Source { get; }
    private DataSource<T> get_Source();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DynamicListView`1<T>> e);
    protected virtual View GetView(T item, View convertView, ViewGroup parent);
    private void Unbind(DynamicListView`1<T> oldElement);
    private void Bind(DynamicListView`1<T> newElement);
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void DataCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class XLabs.Forms.Controls.ExtendedButtonRenderer : ButtonRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateFont();
    private void UpdateAlignment();
}
public class XLabs.Forms.Controls.ExtendedEditorRenderer : EditorRenderer {
    private static int MIN_DISTANCE;
    private float _downX;
    private float _downY;
    private float _upX;
    private float _upY;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    private void HandleTouch(object sender, TouchEventArgs e);
}
public class XLabs.Forms.Controls.ExtendedEntryCellRenderer : EntryCellRenderer {
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
}
public class XLabs.Forms.Controls.ExtendedEntryRenderer : EntryRenderer {
    private static int MinDistance;
    private float downX;
    private float downY;
    private float upX;
    private float upY;
    private Drawable originalBackground;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    private void HandleTouch(object sender, TouchEventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetBorder(ExtendedEntry view);
    private void SetTextAlignment(ExtendedEntry view);
    private void SetFont(ExtendedEntry view);
    private void SetPlaceholderTextColor(ExtendedEntry view);
    private void SetMaxLength(ExtendedEntry view);
}
public class XLabs.Forms.Controls.ExtendedLabelRenderer : LabelRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    private void UpdateUi(ExtendedLabel view, TextView control);
    private Typeface TrySetFont(string fontName);
}
public class XLabs.Forms.Controls.ExtendedScrollViewRenderer : ScrollViewRenderer {
    private static double Epsilon;
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__1_0(object sender, EventArgs ev);
}
public class XLabs.Forms.Controls.ExtendedSwitchRenderer : ViewRenderer`2<ExtendedSwitch, Switch> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ExtendedSwitch> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void SetTintColor(Color color);
    private void ElementToggled(object sender, ToggledEventArgs e);
    private void ControlValueChanged(object sender, EventArgs e);
}
public class XLabs.Forms.Controls.ExtendedTableViewRenderer : TableViewRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_0(object sender, EventArgs args);
}
public class XLabs.Forms.Controls.ExtendedTextCellRenderer : TextCellRenderer {
    private Context _context;
    protected virtual void OnCellPropertyChanged(object sender, PropertyChangedEventArgs args);
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
    private void UpdateTextViewFont(ExtendedTextCell view, TextView control);
    private Typeface TrySetFont(string fontName);
}
public class XLabs.Forms.Controls.GesturesContentViewRenderer : ViewRenderer`2<GesturesContentView, View> {
    private GestureDetector _detector;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<GesturesContentView> e);
    private void HandleTouch(object sender, TouchEventArgs e);
    private void HandleGenericMotion(object sender, GenericMotionEventArgs e);
    private List`1<View> ViewsContaing(Point pt);
    private IEnumerable`1<View> ViewsContainingImpl(Point pt, List`1<View> views, ViewGroup root);
    public sealed virtual bool OnDown(MotionEvent e);
    public sealed virtual bool OnFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY);
    private int ConvertPixelsToDp(float pixelValue);
    public sealed virtual void OnLongPress(MotionEvent e);
    public sealed virtual bool OnScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY);
    public sealed virtual void OnShowPress(MotionEvent e);
    public sealed virtual bool OnSingleTapUp(MotionEvent e);
    public sealed virtual bool OnDoubleTap(MotionEvent e);
    public sealed virtual bool OnDoubleTapEvent(MotionEvent e);
    public sealed virtual bool OnSingleTapConfirmed(MotionEvent e);
}
internal class XLabs.Forms.Controls.GradientContentViewRenderer : ViewRenderer`2<GradientContentView, View> {
    [CompilerGeneratedAttribute]
private GradientDrawable <GradientDrawable>k__BackingField;
    public GradientDrawable GradientDrawable { get; public set; }
    private GradientContentView GradientContentView { get; }
    [CompilerGeneratedAttribute]
public GradientDrawable get_GradientDrawable();
    [CompilerGeneratedAttribute]
public void set_GradientDrawable(GradientDrawable value);
    private GradientContentView get_GradientContentView();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<GradientContentView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual bool DrawChild(Canvas canvas, View child, long drawingTime);
}
[DefaultMemberAttribute("Item")]
public class XLabs.Forms.Controls.GridViewAdapter : CellAdapter {
    private Context _context;
    private GridView _aView;
    private GridView _view;
    public int Count { get; }
    public object Item { get; }
    public GridViewAdapter(Context context, GridView aView, GridView view);
    public virtual int get_Count();
    public virtual object get_Item(int position);
    public virtual long GetItemId(int position);
    public virtual View GetView(int position, View convertView, ViewGroup parent);
    protected virtual Cell GetCellForPosition(int position);
}
public class XLabs.Forms.Controls.GridViewCellRenderer : CellRenderer {
    protected virtual View GetCellCore(Cell item, View convertView, ViewGroup parent, Context context);
}
public class XLabs.Forms.Controls.GridViewRenderer : ViewRenderer`2<GridView, GridView> {
    private Orientation _orientation;
    private GridViewAdapter _adapter;
    protected virtual void OnConfigurationChanged(Configuration newConfig);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<GridView> e);
    private void CollectionViewItemClick(object sender, ItemClickEventArgs e);
    private void Unbind(GridView oldElement);
    private void Bind(GridView newElement);
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void DataCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ReloadData();
    public View GetCell(int position, View convertView, ViewGroup parent);
    private Bitmap GetImageBitmapFromUrl(string url);
}
public class XLabs.Forms.Controls.HybridWebViewRenderer : ViewRenderer`2<HybridWebView, NativeWebView> {
    public static Func`2<HybridWebViewRenderer, Client> GetWebViewClientDelegate;
    public static Func`2<HybridWebViewRenderer, ChromeClient> GetWebChromeClientDelegate;
    private static string NativeFuncCall;
    private static string NativeFunction;
    private static string FuncFormat;
    private static Regex FuncExpression;
    private static HybridWebViewRenderer();
    public virtual SizeRequest GetDesiredSize(int widthConstraint, int heightConstraint);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<HybridWebView> e);
    protected virtual void Dispose(bool disposing);
    protected virtual Client GetWebViewClient();
    protected virtual ChromeClient GetWebChromeClient();
    private void OnPageFinished();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private string GetFuncScript();
    private void Bind();
    private void LoadSource();
    private void Unbind(HybridWebView oldElement);
    private void OnInjectRequest(object sender, string script);
    private void Inject(string script);
    private void Load(Uri uri);
    private void LoadFromContent(object sender, LoadContentEventArgs contentArgs);
    private void LoadContent(object sender, LoadContentEventArgs contentArgs);
    private void LoadFromString(string html);
    private void HandleCleanup();
    private void TryInvoke(string function, string data);
}
public class XLabs.Forms.Controls.HyperLinkLabelRenderer : LabelRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
}
public class XLabs.Forms.Controls.IconButtonRenderer : ButtonRenderer {
    private Typeface _iconFont;
    private Typeface _textFont;
    private IconButton _iconButton;
    private SpannableString _iconSpan;
    private int _textStartIndex;
    private int _textStopIndex;
    private Button _nativeBtn;
    private TextViewRenderHelper _helper;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    private void nativeBtn_AfterTextChanged(object sender, AfterTextChangedEventArgs e);
    private string BuildRawTextString();
    private SpannableString BuildSpannableString(string computedString);
    protected virtual void Dispose(bool disposing);
}
public class XLabs.Forms.Controls.IconLabelRenderer : LabelRenderer {
    private Typeface _iconFont;
    private Typeface _textFont;
    private IconLabel _iconLabel;
    private SpannableString _iconSpan;
    private int _textStartIndex;
    private int _textStopIndex;
    private TextView _nativeLabel;
    private TextViewRenderHelper _helper;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetText();
    private string BuildRawTextString();
    private SpannableString BuildSpannableString(string computedString);
}
public class XLabs.Forms.Controls.ImageButtonRenderer : ButtonRenderer {
    private static float _density;
    private ImageButton ImageButton { get; }
    private static ImageButtonRenderer();
    private ImageButton get_ImageButton();
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<OnElementChanged>d__3")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<SetImageSourceAsync>d__5")]
private Task SetImageSourceAsync(Button targetButton, ImageButton model);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<GetBitmapAsync>d__6")]
private Task`1<Bitmap> GetBitmapAsync(ImageSource source);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<OnElementPropertyChanged>d__7")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private Drawable GetScaleDrawable(Drawable drawable, int width, int height);
    public int RequestToPixels(int sizeRequest);
    private static IImageSourceHandler GetHandler(ImageSource source);
    private int GetWidth(int requestedWidth);
    private int GetHeight(int requestedHeight);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Button> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
public class XLabs.Forms.Controls.ImageGalleryRenderer : ViewRenderer`2<ImageGallery, Gallery> {
    private Gallery _gallery;
    private DataSource _source;
    private DataSource Source { get; }
    private DataSource get_Source();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageGallery> e);
    protected virtual View GetView(string item, View convertView, ViewGroup parent, int position);
    private void Bind(ImageGallery newElement);
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void DataCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private bool IsValidUrl(string urlString);
    private Bitmap GetBitmapFromUrl(string url);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.CalendarArrowView : Button {
    private ArrowDirection _arrowDirection;
    private Path _trianglePath;
    private Paint _trianglePaint;
    public ArrowDirection Direction { get; public set; }
    unknown Color Color {public set; }
    public CalendarArrowView(Context context);
    public CalendarArrowView(Context context, IAttributeSet attrSet);
    public CalendarArrowView(IntPtr javaReference, JniHandleOwnership handleown);
    public ArrowDirection get_Direction();
    public void set_Direction(ArrowDirection value);
    public void set_Color(Color value);
    private void SharedConstructor();
    protected virtual void OnSizeChanged(int w, int h, int oldw, int oldh);
    protected virtual void OnDraw(Canvas canvas);
    private Path GetEquilateralTriangle(int width, int height);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.CalendarCellView : TextView {
    private bool _isSelectable;
    private bool _isCurrentMonth;
    private bool _isToday;
    private bool _isHighlighted;
    private RangeState _rangeState;
    unknown bool Selectable {public set; }
    unknown bool IsCurrentMonth {public set; }
    unknown bool IsToday {public set; }
    unknown bool IsHighlighted {public set; }
    unknown RangeState RangeState {public set; }
    public CalendarCellView(IntPtr handle, JniHandleOwnership transfer);
    public CalendarCellView(Context context);
    public CalendarCellView(Context context, IAttributeSet attrs);
    public CalendarCellView(Context context, IAttributeSet attrs, int defStyle);
    public void set_Selectable(bool value);
    public void set_IsCurrentMonth(bool value);
    public void set_IsToday(bool value);
    public void set_IsHighlighted(bool value);
    public void set_RangeState(RangeState value);
    public void SetStyle(StyleDescriptor style);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.CalendarGridView : ViewGroup {
    private Paint _dividerPaint;
    private int _oldWidthMeasureSize;
    private int _oldNumRows;
    private static float FloatFudge;
    private static int sidePadding;
    private int _oldHeightMeasureSize;
    unknown Color DividerColor {public set; }
    unknown int NumRows {public set; }
    public CalendarGridView(Context context, IAttributeSet attrs);
    private static CalendarGridView();
    public void set_DividerColor(Color value);
    public virtual void AddView(View child, int index, LayoutParams params);
    protected virtual void DispatchDraw(Canvas canvas);
    protected virtual bool DrawChild(Canvas canvas, View child, long drawingTime);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    public void set_NumRows(int value);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.CalendarMonthPageTransformer : Object {
    private static float MIN_SCALE;
    public sealed virtual void TransformPage(View page, float position);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.CalendarPickerView : ViewPager {
    private Context _context;
    internal MonthAdapter MyAdapter;
    internal List`1<MonthDescriptor> Months;
    internal List`1<List`1<List`1<MonthCellDescriptor>>> Cells;
    internal List`1<MonthCellDescriptor> SelectedCells;
    private List`1<MonthCellDescriptor> _highlightedCells;
    internal List`1<DateTime> SelectedCals;
    private List`1<DateTime> _highlightedCals;
    internal DateTime Today;
    internal DateTime MinDate;
    internal DateTime MaxDate;
    private DateTime _monthCounter;
    private StyleDescriptor _styleDescriptor;
    internal string MonthNameFormat;
    internal string WeekdayNameFormat;
    internal string FullDateFormat;
    internal ClickHandler ClickHandler;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateSelectedEventArgs> OnInvalidDateSelected;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateSelectedEventArgs> OnDateSelected;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateSelectedEventArgs> OnDateUnselected;
    [CompilerGeneratedAttribute]
private EventHandler`1<MonthChangedEventArgs> OnMonthChanged;
    [CompilerGeneratedAttribute]
private DateSelectableHandler OnDateSelectable;
    [CompilerGeneratedAttribute]
private SelectionMode <Mode>k__BackingField;
    private Dictionary`2<int, bool> _hlighlightedDaysOfWeek;
    public StyleDescriptor StyleDescriptor { get; }
    public SelectionMode Mode { get; public set; }
    public DateTime CurrentMonth { get; }
    public int MonthCount { get; }
    public DateTime SelectedDate { get; }
    public List`1<DateTime> SelectedDates { get; }
    public CalendarPickerView(Context context, IAttributeSet attrs);
    public StyleDescriptor get_StyleDescriptor();
    [CompilerGeneratedAttribute]
public void add_OnInvalidDateSelected(EventHandler`1<DateSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnInvalidDateSelected(EventHandler`1<DateSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnDateSelected(EventHandler`1<DateSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnDateSelected(EventHandler`1<DateSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnDateUnselected(EventHandler`1<DateSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnDateUnselected(EventHandler`1<DateSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnMonthChanged(EventHandler`1<MonthChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnMonthChanged(EventHandler`1<MonthChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnDateSelectable(DateSelectableHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnDateSelectable(DateSelectableHandler value);
    [CompilerGeneratedAttribute]
public SelectionMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(SelectionMode value);
    public DateTime get_CurrentMonth();
    public int get_MonthCount();
    protected void InvokeOnMonthChanged(int position);
    public DateTime get_SelectedDate();
    public List`1<DateTime> get_SelectedDates();
    public void UpdateStyles();
    private void OnCellClicked(MonthCellDescriptor cell);
    private void OnInvalidateDateClicked(object sender, DateSelectedEventArgs e);
    public FluentInitializer Init(DateTime minDate, DateTime maxDate, DayOfWeek[] highlightedDaysOfWeek);
    public void HighlighDaysOfWeeks(DayOfWeek[] daysOfWeeks);
    internal List`1<List`1<MonthCellDescriptor>> GetMonthCells(MonthDescriptor month, DateTime startCal);
    internal void ScrollToSelectedMonth(int selectedIndex);
    internal void ScrollToSelectedMonth(int selectedIndex, bool smoothScroll);
    private MonthCellWithMonthIndex GetMonthCellWithIndexByDate(DateTime date);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    private static DateTime SetMidnight(DateTime date);
    private bool IsSelectable(DateTime date);
    private DateTime ApplyMultiSelect(DateTime date, DateTime selectedCal);
    private void ClearOldSelection();
    public void DeselectDate();
    internal bool DoSelectDate(DateTime date, MonthCellDescriptor cell);
    internal void ValidateAndUpdate();
    internal bool SelectDate(DateTime date);
    private bool SelectDate(DateTime date, bool smoothScroll);
    private void ValidateDate(DateTime date);
    private static DateTime GetMinDate(List`1<DateTime> selectedCals);
    private static DateTime GetMaxDate(List`1<DateTime> selectedCals);
    private static bool IsBetweenDates(DateTime date, DateTime minCal, DateTime maxCal);
    private static bool IsSameDate(DateTime cal, DateTime selectedDate);
    internal static bool IsSameMonth(DateTime cal, MonthDescriptor month);
    private static bool ContatinsDate(IEnumerable`1<DateTime> selectedCals, DateTime cal);
    public void HighlightDates(ICollection`1<DateTime> dates);
    private static string Debug(DateTime minDate, DateTime maxDate);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.CalendarRowView : ViewGroup {
    [CompilerGeneratedAttribute]
private bool <IsHeaderRow>k__BackingField;
    public ClickHandler ClickHandler;
    private int _cellSize;
    public bool IsHeaderRow { get; public set; }
    public CalendarRowView(Context context, IAttributeSet attrs);
    [CompilerGeneratedAttribute]
public bool get_IsHeaderRow();
    [CompilerGeneratedAttribute]
public void set_IsHeaderRow(bool value);
    public virtual void AddView(View child, int index, LayoutParams params);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    protected virtual void OnLayout(bool changed, int l, int t, int r, int b);
    public sealed virtual void OnClick(View v);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.ClickHandler : MulticastDelegate {
    public ClickHandler(object object, IntPtr method);
    public virtual void Invoke(MonthCellDescriptor cell);
    public virtual IAsyncResult BeginInvoke(MonthCellDescriptor cell, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.DateSelectableHandler : MulticastDelegate {
    public DateSelectableHandler(object object, IntPtr method);
    public virtual bool Invoke(DateTime date);
    public virtual IAsyncResult BeginInvoke(DateTime date, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.DateSelectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <SelectedDate>k__BackingField;
    public DateTime SelectedDate { get; private set; }
    public DateSelectedEventArgs(DateTime date);
    [CompilerGeneratedAttribute]
public DateTime get_SelectedDate();
    [CompilerGeneratedAttribute]
private void set_SelectedDate(DateTime value);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.FluentInitializer : object {
    private CalendarPickerView _calendar;
    public FluentInitializer(CalendarPickerView calendar);
    public FluentInitializer InMode(SelectionMode mode);
    public FluentInitializer WithSelectedDate(DateTime selectedDate);
    public FluentInitializer WithSelectedDates(ICollection`1<DateTime> selectedDates);
    public FluentInitializer WithLocale(Locale locale);
    public FluentInitializer WithHighlightedDates(ICollection`1<DateTime> dates);
    public FluentInitializer WithHighlightedDate(DateTime date);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.Logr : object {
    public static void D(string message);
    public static void D(string message, Object[] args);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.MonthAdapter : PagerAdapter {
    private LayoutInflater _inflater;
    private CalendarPickerView _calendar;
    private MonthView _reusableMonthView;
    private Dictionary`2<int, MonthView> _activeMonthViews;
    public int Count { get; }
    public MonthAdapter(Context context, CalendarPickerView calendar);
    public virtual int get_Count();
    public virtual bool IsViewFromObject(View view, Object object);
    public virtual float GetPageWidth(int position);
    public virtual Object InstantiateItem(View container, int position);
    public virtual void NotifyDataSetChanged();
    public virtual void DestroyItem(View container, int position, Object object);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.MonthCellDescriptor : Object {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCurrentMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsToday>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelectable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighlighted>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeState <RangeState>k__BackingField;
    [CompilerGeneratedAttribute]
private StyleDescriptor <Style>k__BackingField;
    public DateTime DateTime { get; public set; }
    public int Value { get; public set; }
    public bool IsCurrentMonth { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsToday { get; public set; }
    public bool IsSelectable { get; public set; }
    public bool IsHighlighted { get; public set; }
    public RangeState RangeState { get; public set; }
    public StyleDescriptor Style { get; public set; }
    public MonthCellDescriptor(DateTime date, bool isCurrentMonth, bool isSelectable, bool isSelected, bool isToday, bool isHighlighted, int value, RangeState rangeState, StyleDescriptor style);
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public void set_DateTime(DateTime value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    [CompilerGeneratedAttribute]
public bool get_IsCurrentMonth();
    [CompilerGeneratedAttribute]
public void set_IsCurrentMonth(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public void set_IsSelected(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsToday();
    [CompilerGeneratedAttribute]
public void set_IsToday(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSelectable();
    [CompilerGeneratedAttribute]
public void set_IsSelectable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHighlighted();
    [CompilerGeneratedAttribute]
public void set_IsHighlighted(bool value);
    [CompilerGeneratedAttribute]
public RangeState get_RangeState();
    [CompilerGeneratedAttribute]
public void set_RangeState(RangeState value);
    [CompilerGeneratedAttribute]
public StyleDescriptor get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(StyleDescriptor value);
    public virtual string ToString();
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.MonthChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <DisplayedMonth>k__BackingField;
    public DateTime DisplayedMonth { get; private set; }
    public MonthChangedEventArgs(DateTime date);
    [CompilerGeneratedAttribute]
public DateTime get_DisplayedMonth();
    [CompilerGeneratedAttribute]
private void set_DisplayedMonth(DateTime value);
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.MonthDescriptor : object {
    [CompilerGeneratedAttribute]
private int <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private StyleDescriptor <Style>k__BackingField;
    public int Month { get; private set; }
    public int Year { get; private set; }
    public DateTime Date { get; private set; }
    public string Label { get; private set; }
    public StyleDescriptor Style { get; private set; }
    public MonthDescriptor(int month, int year, DateTime date, string label, StyleDescriptor style);
    [CompilerGeneratedAttribute]
public int get_Month();
    [CompilerGeneratedAttribute]
private void set_Month(int value);
    [CompilerGeneratedAttribute]
public int get_Year();
    [CompilerGeneratedAttribute]
private void set_Year(int value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
private void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public StyleDescriptor get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(StyleDescriptor value);
    public virtual string ToString();
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.MonthView : LinearLayout {
    private TextView _title;
    private CalendarGridView _grid;
    private ClickHandler _clickHandler;
    public MonthView(Context context, IAttributeSet attrs);
    public static MonthView Create(ViewGroup parent, LayoutInflater inflater, string weekdayNameFormat, DateTime today, ClickHandler handler);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
    public void Init(MonthDescriptor month, List`1<List`1<MonthCellDescriptor>> cells);
    protected virtual void OnFinishInflate();
}
public enum XLabs.Forms.Controls.MonoDroid.TimesSquare.RangeState : Enum {
    public int value__;
    public static RangeState None;
    public static RangeState First;
    public static RangeState Middle;
    public static RangeState Last;
}
public class XLabs.Forms.Controls.MonoDroid.TimesSquare.StyleDescriptor : object {
    public Color BackgroundColor;
    public Color DateForegroundColor;
    public Color DateBackgroundColor;
    public Color InactiveDateForegroundColor;
    public Color InactiveDateBackgroundColor;
    public Color SelectedDateForegroundColor;
    public Color SelectedDateBackgroundColor;
    public Color TitleForegroundColor;
    public Color TitleBackgroundColor;
    public Color TodayForegroundColor;
    public Color TodayBackgroundColor;
    public Color DayOfWeekLabelForegroundColor;
    public Color DayOfWeekLabelBackgroundColor;
    public Color HighlightedDateForegroundColor;
    public Color HighlightedDateBackgroundColor;
    public Color DateSeparatorColor;
    public Typeface MonthTitleFont;
    public Typeface DateLabelFont;
    public bool ShouldHighlightDaysOfWeekLabel;
}
public class XLabs.Forms.Controls.RadioButtonRenderer : ViewRenderer`2<CustomRadioButton, RadioButton> {
    private ColorStateList _defaultTextColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CustomRadioButton> e);
    private void radButton_CheckedChange(object sender, CheckedChangeEventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private Typeface TrySetFont(string fontName);
    private void UpdateTextColor();
}
public class XLabs.Forms.Controls.SensorBarDroidView : View {
    private Color _positiveColor;
    private Color _negativeColor;
    private double _limit;
    private double _currentValue;
    public double CurrentValue { get; public set; }
    public double Limit { get; public set; }
    public Color PositiveColor { get; public set; }
    public Color NegativeColor { get; public set; }
    public SensorBarDroidView(Context context);
    public SensorBarDroidView(Context context, IAttributeSet attrs);
    public SensorBarDroidView(Context context, IAttributeSet attrs, int defStyle);
    public double get_CurrentValue();
    public void set_CurrentValue(double value);
    public double get_Limit();
    public void set_Limit(double value);
    public Color get_PositiveColor();
    public void set_PositiveColor(Color value);
    public Color get_NegativeColor();
    public void set_NegativeColor(Color value);
    protected virtual void OnDraw(Canvas canvas);
    private void Initialize();
}
public class XLabs.Forms.Controls.SensorBarViewRenderer : ViewRenderer`2<SensorBarView, SensorBarDroidView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SensorBarView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetProperties();
}
public class XLabs.Forms.Controls.SeparatorDroidView : View {
    private SeparatorOrientation _orientation;
    private float _dm;
    [CompilerGeneratedAttribute]
private double <Thickness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SpacingBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SpacingAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private StrokeType <StrokeType>k__BackingField;
    public double Thickness { get; public set; }
    public double SpacingBefore { get; public set; }
    public double SpacingAfter { get; public set; }
    public Color StrokeColor { get; public set; }
    public StrokeType StrokeType { get; public set; }
    public SeparatorOrientation Orientation { get; public set; }
    public SeparatorDroidView(Context context);
    public SeparatorDroidView(Context context, IAttributeSet attrs);
    public SeparatorDroidView(Context context, IAttributeSet attrs, int defStyle);
    [CompilerGeneratedAttribute]
public void set_Thickness(double value);
    [CompilerGeneratedAttribute]
public double get_Thickness();
    [CompilerGeneratedAttribute]
public void set_SpacingBefore(double value);
    [CompilerGeneratedAttribute]
public double get_SpacingBefore();
    [CompilerGeneratedAttribute]
public void set_SpacingAfter(double value);
    [CompilerGeneratedAttribute]
public double get_SpacingAfter();
    [CompilerGeneratedAttribute]
public void set_StrokeColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_StrokeColor();
    [CompilerGeneratedAttribute]
public void set_StrokeType(StrokeType value);
    [CompilerGeneratedAttribute]
public StrokeType get_StrokeType();
    public void set_Orientation(SeparatorOrientation value);
    public SeparatorOrientation get_Orientation();
    protected virtual void OnDraw(Canvas canvas);
    private void Initialize();
}
public class XLabs.Forms.Controls.SeparatorRenderer : ViewRenderer`2<Separator, SeparatorDroidView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Separator> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetProperties();
}
internal class XLabs.Forms.Controls.TextViewRenderHelper : object {
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    public Context Context { get; private set; }
    public TextViewRenderHelper(Context context);
    [CompilerGeneratedAttribute]
public Context get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(Context value);
    public Color GetSpanColor(Color color, ColorStateList defaultColors);
    private Typeface LoadFontFromAsset(string fontName);
    private Typeface LoadFontFromFile(string fontName);
    public Typeface TrySetFont(string fontName);
}
internal class XLabs.Forms.Controls.TouchListener : Object {
    public static Lazy`1<TouchListener> Instance;
    private static TouchListener();
    public sealed virtual bool OnTouch(View v, MotionEvent e);
}
public class XLabs.Forms.Controls.WebImageRenderer : ImageRenderer {
    private WebImage WebImage { get; }
    private WebImage get_WebImage();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    private Bitmap GetImageFromWeb(string url);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class XLabs.Forms.Droid.Resource : object {
    private static Resource();
}
[ExtensionAttribute]
public static class XLabs.Forms.Extensions.AlignmentExtensions : object {
    [ExtensionAttribute]
public static TextAlignment ToDroidTextAlignment(TextAlignment alignment);
    [ExtensionAttribute]
public static GravityFlags ToDroidHorizontalGravity(TextAlignment alignment);
    [ExtensionAttribute]
public static GravityFlags ToDroidVerticalGravity(TextAlignment alignment);
}
internal class XLabs.Forms.Extensions.DefaultTypefaceCache : object {
    private Dictionary`2<string, Typeface> _cacheDict;
    public sealed virtual Typeface RetrieveTypeface(string key);
    public sealed virtual void StoreTypeface(string key, Typeface typeface);
    public sealed virtual void RemoveTypeface(string key);
    public void PurgeCache();
}
[ExtensionAttribute]
public static class XLabs.Forms.Extensions.FontExtensions : object {
    [ExtensionAttribute]
public static Typeface ToExtendedTypeface(Font font, Context context);
    [ExtensionAttribute]
private static string ToHasmapKey(Font font);
}
public interface XLabs.Forms.Extensions.ITypefaceCache {
    public abstract virtual void StoreTypeface(string key, Typeface typeface);
    public abstract virtual void RemoveTypeface(string key);
    public abstract virtual Typeface RetrieveTypeface(string key);
}
public static class XLabs.Forms.Extensions.TypefaceCache : object {
    private static ITypefaceCache sharedCache;
    public static ITypefaceCache SharedCache { get; public set; }
    public static ITypefaceCache get_SharedCache();
    public static void set_SharedCache(ITypefaceCache value);
}
public class XLabs.Forms.Pages.ExtendedMasterDetailRenderer : MasterDetailRenderer {
}
public class XLabs.Forms.Services.FontManager : object {
    [CompilerGeneratedAttribute]
private static ICollection`1<string> <FontDirectories>k__BackingField;
    private IDisplay display;
    private List`1<string> availableFonts;
    private static short InitialSize;
    public static ICollection`1<string> FontDirectories { get; private set; }
    public IEnumerable`1<string> AvailableFonts { get; }
    private static FontManager();
    public FontManager(IDisplay display);
    [CompilerGeneratedAttribute]
public static ICollection`1<string> get_FontDirectories();
    [CompilerGeneratedAttribute]
private static void set_FontDirectories(ICollection`1<string> value);
    public sealed virtual IEnumerable`1<string> get_AvailableFonts();
    public sealed virtual double GetHeight(Font font);
    public sealed virtual Font FindClosest(string name, double desiredHeight);
}
[ExtensionAttribute]
public static class XLabs.Forms.ViewExtensions : object {
    [ExtensionAttribute]
public static View FindFormsViewFromAccessibilityId(View view, View nativeView);
    [ExtensionAttribute]
public static ObservableCollection`1<Element> GetInternalChildren(View view);
    [ExtensionAttribute]
public static View GetNativeContent(View view);
}
public class XLabs.Forms.XFormsAppDroid : XFormsApp`1<XFormsApplicationDroid> {
    public XFormsAppDroid(XFormsApplicationDroid app);
    public void RaiseBackPress();
    protected virtual void OnInit(XFormsApplicationDroid app, bool initServices);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_0(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_1(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_2(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_3(object o, EventArgs e);
}
public class XLabs.Forms.XFormsApplicationDroid : FormsApplicationActivity {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Destroy>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Pause>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Restart>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Resume>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Stop>k__BackingField;
    public EventHandler`1<EventArgs> Destroy { get; public set; }
    public EventHandler`1<EventArgs> Pause { get; public set; }
    public EventHandler`1<EventArgs> Restart { get; public set; }
    public EventHandler`1<EventArgs> Resume { get; public set; }
    public EventHandler`1<EventArgs> Start { get; public set; }
    public EventHandler`1<EventArgs> Stop { get; public set; }
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Destroy();
    [CompilerGeneratedAttribute]
public void set_Destroy(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Pause();
    [CompilerGeneratedAttribute]
public void set_Pause(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Restart();
    [CompilerGeneratedAttribute]
public void set_Restart(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Resume();
    [CompilerGeneratedAttribute]
public void set_Resume(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_Stop();
    [CompilerGeneratedAttribute]
public void set_Stop(EventHandler`1<EventArgs> value);
    protected virtual void OnDestroy();
    protected virtual void OnPause();
    protected virtual void OnRestart();
    protected virtual void OnResume();
    protected virtual void OnStart();
    protected virtual void OnStop();
}
