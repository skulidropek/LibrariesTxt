[ExtensionAttribute]
public static class XLabs.Forms.AlignmentExtensions : object {
    [ExtensionAttribute]
public static VerticalAlignment ToContentVerticalAlignment(TextAlignment alignment);
    [ExtensionAttribute]
public static HorizontalAlignment ToContentHorizontalAlignment(TextAlignment alignment);
}
[ExtensionAttribute]
public static class XLabs.Forms.ColorExtensions : object {
    [ExtensionAttribute]
public static Brush ToBrush(Color color);
    [ExtensionAttribute]
public static Color ToMediaColor(Color color);
}
public class XLabs.Forms.Controls.CheckBoxRenderer : ViewRenderer`2<CheckBox, CheckBox> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void CheckedChanged(object sender, EventArgs`1<bool> eventArgs);
    private void UpdateFont();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_0(object s, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_1(object s, RoutedEventArgs args);
}
public class XLabs.Forms.Controls.HybridWebViewRenderer : ViewRenderer`2<HybridWebView, WebView> {
    private static string NativeFuncCall;
    private static string NativeFunction;
    private static string FuncFormat;
    private static Regex FuncExpression;
    private static HybridWebViewRenderer();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private string GetFuncScript();
    private void Bind();
    private void LoadSource();
    private void Unbind(HybridWebView oldElement);
    private void OnInjectRequest(object sender, string script);
    private void Inject(string script);
    private void Load(Uri uri);
    private void LoadFromContent(object sender, LoadContentEventArgs contentArgs);
    private void LoadContent(object sender, LoadContentEventArgs contentArgs);
    private void LoadFromString(string html);
    private void TryInvoke(string function, string data);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<HybridWebView> e);
    private void WebViewOnNavigationCompleted(WebView sender, WebViewNavigationCompletedEventArgs args);
    private void WebViewOnNavigationStarting(WebView sender, WebViewNavigationStartingEventArgs args);
    private void WebViewOnScriptNotify(object sender, NotifyEventArgs notifyEventArgs);
}
public class XLabs.Forms.Controls.ImageButtonRenderer : ButtonRenderer {
    private Image _currentImage;
    private static IImageSourceHandler GetHandler(ImageSource source);
    private int GetWidth(int requestedWidth);
    private int GetHeight(int requestedHeight);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<OnElementChanged>d__4")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private Task`1<Image> GetCurrentImage();
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<AssignContent>d__7")]
private Task AssignContent();
    private static TextAlignment GetTextAlignment(ImageOrientation imageOrientation);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<GetImageAsync>d__9")]
private static Task`1<Image> GetImageAsync(ImageSource source, int height, int width, Image currentImage);
    private static void SetImageMargin(Image image, ImageOrientation orientation);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Button> e);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<<OnElementPropertyChanged>b__5_0>d")]
[CompilerGeneratedAttribute]
private void <OnElementPropertyChanged>b__5_0();
}
[ExtensionAttribute]
public static class XLabs.Forms.FontExtensions : object {
    [ExtensionAttribute]
public static double GetHeight(Font font);
    [ExtensionAttribute]
public static FontFamily GetFontFamily(Font font);
}
public static class XLabs.Forms.PageExtensions : object {
}
public class XLabs.Forms.Services.FontManager : object {
    private static short InitialSize;
    private IDisplay _display;
    private FontService _fontService;
    public IEnumerable`1<string> AvailableFonts { get; }
    public FontManager(IDisplay display);
    public sealed virtual Font FindClosest(string name, double desiredHeight);
    [IteratorStateMachineAttribute("XLabs.Forms.Services.FontManager/<get_AvailableFonts>d__6")]
public sealed virtual IEnumerable`1<string> get_AvailableFonts();
    public sealed virtual double GetHeight(Font font);
}
public class XLabs.Forms.Services.NavigationService : object {
    private IDictionary`2<string, Type> _pageLookup;
    public sealed virtual void RegisterPage(string pageKey, Type pageType);
    public sealed virtual void NavigateTo(string pageKey, bool animated, Object[] args);
    public sealed virtual void NavigateTo(Type pageType, bool animated, Object[] args);
    public sealed virtual void NavigateTo(bool animated, Object[] args);
    public void NavigateTo(string pageKey, object parameter, bool animated);
    public void NavigateTo(Type pageType, object parameter, bool animated);
    public sealed virtual void GoBack();
    public sealed virtual void GoForward();
}
public class XLabs.Forms.XFormsAppWin : XFormsApp`1<Application> {
    public XFormsAppWin(Application application);
    public void RaiseBackPress();
    public void RaiseStartup();
    public void RaiseClosing();
    protected virtual void OnInit(Application app, bool initServices);
    [CompilerGeneratedAttribute]
private void <OnInit>b__5_0(object o, UnhandledExceptionEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__5_1(object o, object e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__5_2(object o, SuspendingEventArgs e);
}
