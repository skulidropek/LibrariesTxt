public class XLabs.Forms.Behaviors.GestureCollection : ObservableCollection`1<GestureInterest> {
}
public class XLabs.Forms.Behaviors.GestureInterest : BindableObject {
    public static BindableProperty NotifcationProperty;
    public static BindableProperty GestureTypeProperty;
    public static BindableProperty DirectionProperty;
    public static BindableProperty GestureCommandProperty;
    public static BindableProperty GestureParameterProperty;
    public GestureNotification Notification { get; public set; }
    public GestureType GestureType { get; public set; }
    public Directionality Direction { get; public set; }
    public IGesture GestureCommand { get; public set; }
    public object GestureParameter { get; public set; }
    private static GestureInterest();
    public GestureNotification get_Notification();
    public void set_Notification(GestureNotification value);
    public GestureType get_GestureType();
    public void set_GestureType(GestureType value);
    public Directionality get_Direction();
    public void set_Direction(Directionality value);
    public IGesture get_GestureCommand();
    public void set_GestureCommand(IGesture value);
    public object get_GestureParameter();
    public void set_GestureParameter(object value);
}
public class XLabs.Forms.Behaviors.GestureResult : object {
    [CompilerGeneratedAttribute]
private GestureType <GestureType>k__BackingField;
    [CompilerGeneratedAttribute]
private Directionality <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Origin2>k__BackingField;
    [CompilerGeneratedAttribute]
private View <StartView>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<View> <ViewStack>k__BackingField;
    public GestureType GestureType { get; internal set; }
    public Directionality Direction { get; internal set; }
    public Point Origin { get; internal set; }
    public Point Origin2 { get; internal set; }
    public View StartView { get; internal set; }
    public double Length { get; public set; }
    internal double VerticalDistance { get; internal set; }
    internal double HorizontalDistance { get; internal set; }
    internal List`1<View> ViewStack { get; internal set; }
    [CompilerGeneratedAttribute]
public GestureType get_GestureType();
    [CompilerGeneratedAttribute]
internal void set_GestureType(GestureType value);
    [CompilerGeneratedAttribute]
public Directionality get_Direction();
    [CompilerGeneratedAttribute]
internal void set_Direction(Directionality value);
    [CompilerGeneratedAttribute]
public Point get_Origin();
    [CompilerGeneratedAttribute]
internal void set_Origin(Point value);
    [CompilerGeneratedAttribute]
public Point get_Origin2();
    [CompilerGeneratedAttribute]
internal void set_Origin2(Point value);
    [CompilerGeneratedAttribute]
public View get_StartView();
    [CompilerGeneratedAttribute]
internal void set_StartView(View value);
    [CompilerGeneratedAttribute]
public double get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(double value);
    [CompilerGeneratedAttribute]
internal double get_VerticalDistance();
    [CompilerGeneratedAttribute]
internal void set_VerticalDistance(double value);
    [CompilerGeneratedAttribute]
internal double get_HorizontalDistance();
    [CompilerGeneratedAttribute]
internal void set_HorizontalDistance(double value);
    [CompilerGeneratedAttribute]
internal List`1<View> get_ViewStack();
    [CompilerGeneratedAttribute]
internal void set_ViewStack(List`1<View> value);
}
public class XLabs.Forms.Behaviors.Gestures : BindableObject {
    public static BindableProperty InterestsProperty;
    private static List`1<PendingInterestParams> PendingInterestParameters;
    public GestureCollection Interests { get; public set; }
    private static Gestures();
    public GestureCollection get_Interests();
    public void set_Interests(GestureCollection value);
    private static void InterestsChanged(BindableObject bo, GestureCollection oldvalue, GestureCollection newvalue);
    private static void ViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static GesturesContentView FindContentViewParent(View view, bool throwException);
}
public class XLabs.Forms.Behaviors.GridLayout : BindableObject {
    public static BindableProperty RowHeightsProperty;
    public static BindableProperty ColumnWidthsProperty;
    private static GridLayout();
    public static void RowHeightsChanged(BindableObject bo, string oldval, string newval);
    public static void ColumnWidthsChanged(BindableObject bo, string oldval, string newval);
    private static GridLength LengthFromString(string measure);
}
public interface XLabs.Forms.Behaviors.IGesture {
    public abstract virtual void ExecuteGesture(GestureResult result, object param);
    public abstract virtual bool CanExecuteGesture(GestureResult result, object param);
}
public class XLabs.Forms.Behaviors.RelayGesture : object {
    private Action`2<GestureResult, object> _execute;
    private Func`3<GestureResult, object, bool> _canexecute;
    public RelayGesture(Action`2<GestureResult, object> execute, Func`3<GestureResult, object, bool> predicate);
    public sealed virtual void ExecuteGesture(GestureResult result, object annoyingbaseobjectthing);
    public sealed virtual bool CanExecuteGesture(GestureResult result, object annoyingbaseobjectthing);
}
public class XLabs.Forms.Behaviors.RelayGesture`1 : object {
    private Action`2<GestureResult, T> _execute;
    private Func`3<GestureResult, T, bool> _canexecute;
    public RelayGesture`1(Action`2<GestureResult, T> execute, Func`3<GestureResult, T, bool> predicate);
    public sealed virtual void ExecuteGesture(GestureResult result, object param);
    public sealed virtual bool CanExecuteGesture(GestureResult result, object param);
}
public class XLabs.Forms.Behaviors.RelayGestureAsync : object {
    private Func`3<GestureResult, object, Task> _asyncExecute;
    private Func`3<GestureResult, object, bool> _canexecute;
    public RelayGestureAsync(Func`3<GestureResult, object, Task> execute, Func`3<GestureResult, object, bool> predicate);
    [AsyncStateMachineAttribute("XLabs.Forms.Behaviors.RelayGestureAsync/<ExecuteGesture>d__3")]
public sealed virtual void ExecuteGesture(GestureResult result, object param);
    public sealed virtual bool CanExecuteGesture(GestureResult result, object annoyingbaseobjectthing);
    [AsyncStateMachineAttribute("XLabs.Forms.Behaviors.RelayGestureAsync/<Execute>d__5")]
protected virtual Task Execute(GestureResult gesture, object annoyingbaseobjectthing);
}
public class XLabs.Forms.Behaviors.RelayGestureAsync`1 : object {
    private Func`3<GestureResult, T, Task> _asyncExecute;
    private Func`3<GestureResult, T, bool> _canexecute;
    public RelayGestureAsync`1(Func`3<GestureResult, T, Task> execute, Func`3<GestureResult, T, bool> predicate);
    [AsyncStateMachineAttribute("XLabs.Forms.Behaviors.RelayGestureAsync`1/<ExecuteGesture>d__3")]
public sealed virtual void ExecuteGesture(GestureResult result, object param);
    public sealed virtual bool CanExecuteGesture(GestureResult result, object annoyingbaseobjectthing);
    [AsyncStateMachineAttribute("XLabs.Forms.Behaviors.RelayGestureAsync`1/<Execute>d__5")]
protected virtual Task Execute(GestureResult gesture, object annoyingbaseobjectthing);
}
[ExtensionAttribute]
public static class XLabs.Forms.BindableObjectExtensions : object {
    [ExtensionAttribute]
public static T GetValue(BindableObject bindableObject, BindableProperty property);
}
[ContentPropertyAttribute("InstanceType")]
public class XLabs.Forms.CollectionTypeExtension : object {
    [CompilerGeneratedAttribute]
private CollectionTypes <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceType>k__BackingField;
    public CollectionTypes Collection { get; public set; }
    public string InstanceType { get; public set; }
    [CompilerGeneratedAttribute]
public CollectionTypes get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(CollectionTypes value);
    [CompilerGeneratedAttribute]
public string get_InstanceType();
    [CompilerGeneratedAttribute]
public void set_InstanceType(string value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
}
public enum XLabs.Forms.CollectionTypes : Enum {
    public int value__;
    public static CollectionTypes None;
    public static CollectionTypes ObservableCollection;
    public static CollectionTypes GenericList;
}
public class XLabs.Forms.Controls.AccessoryViewCell : ExtendedTextCell {
    [CompilerGeneratedAttribute]
private View <AccessoryView>k__BackingField;
    public View AccessoryView { get; public set; }
    [CompilerGeneratedAttribute]
public View get_AccessoryView();
    [CompilerGeneratedAttribute]
public void set_AccessoryView(View value);
}
public class XLabs.Forms.Controls.AutoCompleteView : ContentView {
    public static BindableProperty ExecuteOnSuggestionClickProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty SearchBackgroundColorProperty;
    public static BindableProperty SearchBorderColorProperty;
    public static BindableProperty SearchBorderRadiusProperty;
    public static BindableProperty SearchBorderWidthProperty;
    public static BindableProperty SearchCommandProperty;
    public static BindableProperty SearchHorizontalOptionsProperty;
    public static BindableProperty SearchTextColorProperty;
    public static BindableProperty SearchTextProperty;
    public static BindableProperty SearchVerticalOptionsProperty;
    public static BindableProperty SelectedCommandProperty;
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty ShowSearchProperty;
    public static BindableProperty SuggestionBackgroundColorProperty;
    public static BindableProperty SuggestionItemDataTemplateProperty;
    public static BindableProperty SuggestionsHeightRequestProperty;
    public static BindableProperty SuggestionsProperty;
    public static BindableProperty TextBackgroundColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TextHorizontalOptionsProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty TextVerticalOptionsProperty;
    private ObservableCollection`1<object> _availableSuggestions;
    private Button _btnSearch;
    private Entry _entText;
    private ListView _lstSuggestions;
    private StackLayout _stkBase;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectedItemChangedEventArgs> SelectedItemChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<TextChangedEventArgs> TextChanged;
    public IEnumerable AvailableSuggestions { get; }
    public bool ExecuteOnSuggestionClick { get; public set; }
    public string Placeholder { get; public set; }
    public Color SearchBackgroundColor { get; public set; }
    public Color SearchBorderColor { get; public set; }
    public int SearchBorderRadius { get; public set; }
    public int SearchBorderWidth { get; public set; }
    public ICommand SearchCommand { get; public set; }
    public LayoutOptions SearchHorizontalOptions { get; public set; }
    public string SearchText { get; public set; }
    public Color SearchTextColor { get; public set; }
    public LayoutOptions SearchVerticalOptions { get; public set; }
    public ICommand SelectedCommand { get; public set; }
    public object SelectedItem { get; public set; }
    public bool ShowSearchButton { get; public set; }
    public Color SuggestionBackgroundColor { get; public set; }
    public DataTemplate SuggestionItemDataTemplate { get; public set; }
    public IEnumerable Suggestions { get; public set; }
    public double SuggestionsHeightRequest { get; public set; }
    public string Text { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public Color TextColor { get; public set; }
    public LayoutOptions TextHorizontalOptions { get; public set; }
    public LayoutOptions TextVerticalOptions { get; public set; }
    private static AutoCompleteView();
    [CompilerGeneratedAttribute]
public void add_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedItemChanged(EventHandler`1<SelectedItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    public IEnumerable get_AvailableSuggestions();
    public bool get_ExecuteOnSuggestionClick();
    public void set_ExecuteOnSuggestionClick(bool value);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public Color get_SearchBackgroundColor();
    public void set_SearchBackgroundColor(Color value);
    public Color get_SearchBorderColor();
    public void set_SearchBorderColor(Color value);
    public int get_SearchBorderRadius();
    public void set_SearchBorderRadius(int value);
    public int get_SearchBorderWidth();
    public void set_SearchBorderWidth(int value);
    public ICommand get_SearchCommand();
    public void set_SearchCommand(ICommand value);
    public LayoutOptions get_SearchHorizontalOptions();
    public void set_SearchHorizontalOptions(LayoutOptions value);
    public string get_SearchText();
    public void set_SearchText(string value);
    public Color get_SearchTextColor();
    public void set_SearchTextColor(Color value);
    public LayoutOptions get_SearchVerticalOptions();
    public void set_SearchVerticalOptions(LayoutOptions value);
    public ICommand get_SelectedCommand();
    public void set_SelectedCommand(ICommand value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public bool get_ShowSearchButton();
    public void set_ShowSearchButton(bool value);
    public Color get_SuggestionBackgroundColor();
    public void set_SuggestionBackgroundColor(Color value);
    public DataTemplate get_SuggestionItemDataTemplate();
    public void set_SuggestionItemDataTemplate(DataTemplate value);
    public IEnumerable get_Suggestions();
    public void set_Suggestions(IEnumerable value);
    public double get_SuggestionsHeightRequest();
    public void set_SuggestionsHeightRequest(double value);
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextBackgroundColor();
    public void set_TextBackgroundColor(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public LayoutOptions get_TextHorizontalOptions();
    public void set_TextHorizontalOptions(LayoutOptions value);
    public LayoutOptions get_TextVerticalOptions();
    public void set_TextVerticalOptions(LayoutOptions value);
    private static void PlaceHolderChanged(BindableObject obj, string oldPlaceHolderValue, string newPlaceHolderValue);
    private static void SearchBackgroundColorChanged(BindableObject obj, Color oldValue, Color newValue);
    private static void SearchBorderColorChanged(BindableObject obj, Color oldValue, Color newValue);
    private static void SearchBorderRadiusChanged(BindableObject obj, int oldValue, int newValue);
    private static void SearchBorderWidthChanged(BindableObject obj, int oldValue, int newValue);
    private static void SearchHorizontalOptionsChanged(BindableObject obj, LayoutOptions oldValue, LayoutOptions newValue);
    private static void SearchTextChanged(BindableObject obj, string oldValue, string newValue);
    private static void SearchTextColorChanged(BindableObject obj, Color oldValue, Color newValue);
    private static void SearchVerticalOptionsChanged(BindableObject obj, LayoutOptions oldValue, LayoutOptions newValue);
    private static void ShowSearchChanged(BindableObject obj, bool oldShowSearchValue, bool newShowSearchValue);
    private static void SuggestionBackgroundColorChanged(BindableObject obj, Color oldValue, Color newValue);
    private static void SuggestionHeightRequestChanged(BindableObject obj, double oldValue, double newValue);
    private static void SuggestionItemDataTemplateChanged(BindableObject obj, DataTemplate oldShowSearchValue, DataTemplate newShowSearchValue);
    private static void TestVerticalOptionsChanged(BindableObject obj, LayoutOptions oldValue, LayoutOptions newValue);
    private static void TextBackgroundColorChanged(BindableObject obj, Color oldValue, Color newValue);
    private static void TextColorChanged(BindableObject obj, Color oldValue, Color newValue);
    private static void TextHorizontalOptionsChanged(BindableObject obj, LayoutOptions oldValue, LayoutOptions newValue);
    private static void TextValueChanged(BindableObject obj, string oldPlaceHolderValue, string newPlaceHolderValue);
    private void OnSelectedItemChanged(object selectedItem);
    private void OnTextChanged(TextChangedEventArgs e);
    private void ShowHideListbox(bool show);
    [CompilerGeneratedAttribute]
private void <.ctor>b__28_0(object s, TextChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__28_1(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__28_2(object s, SelectedItemChangedEventArgs e);
}
public class XLabs.Forms.Controls.BindablePicker : View {
    public static BindableProperty HasBorderProperty;
    public static BindableProperty TitleProperty;
    public static BindableProperty SelectedIndexProperty;
    [CompilerGeneratedAttribute]
private EventHandler SelectedIndexChanged;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <SourceItemLabelConverter>k__BackingField;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty SelectedItemProperty;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Items>k__BackingField;
    public Func`2<object, string> SourceItemLabelConverter { get; public set; }
    public IList ItemsSource { get; public set; }
    public object SelectedItem { get; public set; }
    public string Title { get; public set; }
    public ObservableCollection`1<string> Items { get; private set; }
    public int SelectedIndex { get; public set; }
    public bool HasBorder { get; public set; }
    private static BindablePicker();
    [CompilerGeneratedAttribute]
public void add_SelectedIndexChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectedIndexChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_SourceItemLabelConverter();
    [CompilerGeneratedAttribute]
public void set_SourceItemLabelConverter(Func`2<object, string> value);
    public IList get_ItemsSource();
    public void set_ItemsSource(IList value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public string get_Title();
    public void set_Title(string value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<string> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(ObservableCollection`1<string> value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public bool get_HasBorder();
    public void set_HasBorder(bool value);
    private static void OnItemsSourceChanged(BindableObject bindable, IList oldvalue, IList newvalue);
    private void OnSelectedIndexChanged(object sender, EventArgs eventArgs);
    private static void OnSelectedItemChanged(BindableObject bindable, object oldvalue, object newvalue);
    private static int CoerceSelectedIndex(BindableObject bindable, int value);
    private void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class XLabs.Forms.Controls.BindableRadioGroup : StackLayout {
    public ObservableCollection`1<CustomRadioButton> Items;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty SelectedIndexProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontNameProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<int> CheckedChanged;
    public IEnumerable ItemsSource { get; public set; }
    public int SelectedIndex { get; public set; }
    public Color TextColor { get; public set; }
    public double FontSize { get; public set; }
    public string FontName { get; public set; }
    private static BindableRadioGroup();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public string get_FontName();
    public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler`1<int> value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler`1<int> value);
    private void OnCheckedChanged(object sender, EventArgs`1<bool> e);
    private static void OnSelectedIndexChanged(BindableObject bindable, int oldvalue, int newvalue);
    private static void OnItemsSourceChanged(BindableObject bindable, IEnumerable oldValue, IEnumerable newValue);
}
public class XLabs.Forms.Controls.ButtonGroup : ContentView {
    public static BindableProperty OutlineColorProperty;
    public static BindableProperty ViewBackgroundColorProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty SelectedBackgroundColorProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty SelectedTextColorProperty;
    public static BindableProperty BorderColorProperty;
    public static BindableProperty SelectedBorderColorProperty;
    public static BindableProperty SelectedFrameBackgroundColorProperty;
    public static BindableProperty SelectedIndexProperty;
    public static BindableProperty ItemsPropertyProperty;
    public static BindableProperty FontProperty;
    public static BindableProperty RoundedProperty;
    public static BindableProperty IsNumberProperty;
    private WrapLayout _buttonLayout;
    private static int SPACING;
    private static int PADDING;
    private static int BUTTON_BORDER_WIDTH;
    private static int FRAME_PADDING;
    private static int BUTTON_BORDER_RADIUS;
    private static int BUTTON_HEIGHT;
    private static int BUTTON_HEIGHT_WP;
    private static int BUTTON_HALF_HEIGHT;
    private static int BUTTON_HALF_HEIGHT_WP;
    private Command _clickedCommand;
    public Color OutlineColor { get; public set; }
    public Color ViewBackgroundColor { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color SelectedBackgroundColor { get; public set; }
    public Color TextColor { get; public set; }
    public Color SelectedTextColor { get; public set; }
    public Color BorderColor { get; public set; }
    public Color SelectedBorderColor { get; public set; }
    public Color SelectedFrameBackgroundColor { get; public set; }
    public Font Font { get; public set; }
    public int SelectedIndex { get; public set; }
    public List`1<string> Items { get; public set; }
    public bool Rounded { get; public set; }
    public bool IsNumber { get; public set; }
    private static ButtonGroup();
    public Color get_OutlineColor();
    public void set_OutlineColor(Color value);
    public Color get_ViewBackgroundColor();
    public void set_ViewBackgroundColor(Color value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public Color get_SelectedBackgroundColor();
    public void set_SelectedBackgroundColor(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Color get_SelectedTextColor();
    public void set_SelectedTextColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_SelectedBorderColor();
    public void set_SelectedBorderColor(Color value);
    public Color get_SelectedFrameBackgroundColor();
    public void set_SelectedFrameBackgroundColor(Color value);
    public Font get_Font();
    public void set_Font(Font value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public List`1<string> get_Items();
    public void set_Items(List`1<string> value);
    public bool get_Rounded();
    public void set_Rounded(bool value);
    public bool get_IsNumber();
    public void set_IsNumber(bool value);
    public void AddButton(string text);
    private void SetSelectedButton(object o);
    private void SetSelectedState(int index, bool isSelected);
}
public class XLabs.Forms.Controls.CalendarView : View {
    public static BindableProperty MinDateProperty;
    public static BindableProperty MaxDateProperty;
    public static BindableProperty SelectedDateProperty;
    public static BindableProperty DisplayedMonthProperty;
    public static BindableProperty DateLabelFontProperty;
    public static BindableProperty MonthTitleFontProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty TodayDateForegroundColorProperty;
    public static BindableProperty TodayDateBackgroundColorProperty;
    public static BindableProperty DateForegroundColorProperty;
    public static BindableProperty DateBackgroundColorProperty;
    public static BindableProperty InactiveDateForegroundColorProperty;
    public static BindableProperty InactiveDateBackgroundColorProperty;
    public static BindableProperty HighlightedDateForegroundColorProperty;
    public static BindableProperty HighlightedDateBackgroundColorProperty;
    public static BindableProperty TodayBackgroundStyleProperty;
    public static BindableProperty SelectionBackgroundStyleProperty;
    public static BindableProperty SelectedDateForegroundColorProperty;
    public static BindableProperty SelectedDateBackgroundColorProperty;
    public static BindableProperty DayOfWeekLabelForegroundColorProperty;
    public static BindableProperty DayOfWeekLabelBackgroundColorProperty;
    public static BindableProperty MonthTitleForegroundColorProperty;
    public static BindableProperty MonthTitleBackgroundColorProperty;
    public static BindableProperty DateSeparatorColorProperty;
    public static BindableProperty ShowNavigationArrowsProperty;
    public static BindableProperty NavigationArrowsColorProperty;
    public static BindableProperty ShouldHighlightDaysOfWeekLabelsProperty;
    public static BindableProperty HighlightedDaysOfWeekProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateTime> MonthChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DateTime> DateSelected;
    public DateTime MinDate { get; public set; }
    public DateTime MaxDate { get; public set; }
    public Nullable`1<DateTime> SelectedDate { get; public set; }
    public DateTime DisplayedMonth { get; public set; }
    public Font DateLabelFont { get; public set; }
    public Font MonthTitleFont { get; public set; }
    public Color TextColor { get; public set; }
    public Color TodayDateForegroundColor { get; public set; }
    public Color TodayDateBackgroundColor { get; public set; }
    public Color DateForegroundColor { get; public set; }
    public Color DateBackgroundColor { get; public set; }
    public Color InactiveDateForegroundColor { get; public set; }
    public Color InactiveDateBackgroundColor { get; public set; }
    public Color HighlightedDateForegroundColor { get; public set; }
    public Color HighlightedDateBackgroundColor { get; public set; }
    public BackgroundStyle TodayBackgroundStyle { get; public set; }
    public BackgroundStyle SelectionBackgroundStyle { get; public set; }
    public Color SelectedDateForegroundColor { get; public set; }
    public Color SelectedDateBackgroundColor { get; public set; }
    public Color DayOfWeekLabelForegroundColor { get; public set; }
    public Color DayOfWeekLabelBackgroundColor { get; public set; }
    public Color MonthTitleForegroundColor { get; public set; }
    public Color MonthTitleBackgroundColor { get; public set; }
    public Color DateSeparatorColor { get; public set; }
    public bool ShowNavigationArrows { get; public set; }
    public Color NavigationArrowsColor { get; public set; }
    public bool ShouldHighlightDaysOfWeekLabels { get; public set; }
    public DayOfWeek[] HighlightedDaysOfWeek { get; public set; }
    public Color ActualDateBackgroundColor { get; }
    public Color ActualDateForegroundColor { get; }
    public Color ActualInactiveDateBackgroundColor { get; }
    public Color ActualInactiveDateForegroundColor { get; }
    public Color ActualTodayDateForegroundColor { get; }
    public Color ActualTodayDateBackgroundColor { get; }
    public Color ActualSelectedDateForegroundColor { get; }
    public Color ActualSelectedDateBackgroundColor { get; }
    public Color ActualMonthTitleForegroundColor { get; }
    public Color ActualMonthTitleBackgroundColor { get; }
    public Color ActualDayOfWeekLabelForegroundColor { get; }
    public Color ActualDayOfWeekLabelBackroundColor { get; }
    public Color ActualNavigationArrowsColor { get; }
    public Color ActualHighlightedDateForegroundColor { get; }
    public Color ActualHighlightedDateBackgroundColor { get; }
    private static CalendarView();
    public DateTime get_MinDate();
    public void set_MinDate(DateTime value);
    public DateTime get_MaxDate();
    public void set_MaxDate(DateTime value);
    public static DateTime FirstDayOfMonth(DateTime date);
    public static DateTime LastDayOfMonth(DateTime date);
    public Nullable`1<DateTime> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTime> value);
    public DateTime get_DisplayedMonth();
    public void set_DisplayedMonth(DateTime value);
    public Font get_DateLabelFont();
    public void set_DateLabelFont(Font value);
    public Font get_MonthTitleFont();
    public void set_MonthTitleFont(Font value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Color get_TodayDateForegroundColor();
    public void set_TodayDateForegroundColor(Color value);
    public Color get_TodayDateBackgroundColor();
    public void set_TodayDateBackgroundColor(Color value);
    public Color get_DateForegroundColor();
    public void set_DateForegroundColor(Color value);
    public Color get_DateBackgroundColor();
    public void set_DateBackgroundColor(Color value);
    public Color get_InactiveDateForegroundColor();
    public void set_InactiveDateForegroundColor(Color value);
    public Color get_InactiveDateBackgroundColor();
    public void set_InactiveDateBackgroundColor(Color value);
    public Color get_HighlightedDateForegroundColor();
    public void set_HighlightedDateForegroundColor(Color value);
    public Color get_HighlightedDateBackgroundColor();
    public void set_HighlightedDateBackgroundColor(Color value);
    public BackgroundStyle get_TodayBackgroundStyle();
    public void set_TodayBackgroundStyle(BackgroundStyle value);
    public BackgroundStyle get_SelectionBackgroundStyle();
    public void set_SelectionBackgroundStyle(BackgroundStyle value);
    public Color get_SelectedDateForegroundColor();
    public void set_SelectedDateForegroundColor(Color value);
    public Color get_SelectedDateBackgroundColor();
    public void set_SelectedDateBackgroundColor(Color value);
    public Color get_DayOfWeekLabelForegroundColor();
    public void set_DayOfWeekLabelForegroundColor(Color value);
    public Color get_DayOfWeekLabelBackgroundColor();
    public void set_DayOfWeekLabelBackgroundColor(Color value);
    public Color get_MonthTitleForegroundColor();
    public void set_MonthTitleForegroundColor(Color value);
    public Color get_MonthTitleBackgroundColor();
    public void set_MonthTitleBackgroundColor(Color value);
    public Color get_DateSeparatorColor();
    public void set_DateSeparatorColor(Color value);
    public bool get_ShowNavigationArrows();
    public void set_ShowNavigationArrows(bool value);
    public Color get_NavigationArrowsColor();
    public void set_NavigationArrowsColor(Color value);
    public bool get_ShouldHighlightDaysOfWeekLabels();
    public void set_ShouldHighlightDaysOfWeekLabels(bool value);
    public DayOfWeek[] get_HighlightedDaysOfWeek();
    public void set_HighlightedDaysOfWeek(DayOfWeek[] value);
    public Color get_ActualDateBackgroundColor();
    public Color get_ActualDateForegroundColor();
    public Color get_ActualInactiveDateBackgroundColor();
    public Color get_ActualInactiveDateForegroundColor();
    public Color get_ActualTodayDateForegroundColor();
    public Color get_ActualTodayDateBackgroundColor();
    public Color get_ActualSelectedDateForegroundColor();
    public Color get_ActualSelectedDateBackgroundColor();
    public Color get_ActualMonthTitleForegroundColor();
    public Color get_ActualMonthTitleBackgroundColor();
    public Color get_ActualDayOfWeekLabelForegroundColor();
    public Color get_ActualDayOfWeekLabelBackroundColor();
    public Color get_ActualNavigationArrowsColor();
    public Color get_ActualHighlightedDateForegroundColor();
    public Color get_ActualHighlightedDateBackgroundColor();
    public void NotifyDisplayedMonthChanged(DateTime date);
    [CompilerGeneratedAttribute]
public void add_MonthChanged(EventHandler`1<DateTime> value);
    [CompilerGeneratedAttribute]
public void remove_MonthChanged(EventHandler`1<DateTime> value);
    public void NotifyDateSelected(DateTime dateSelected);
    [CompilerGeneratedAttribute]
public void add_DateSelected(EventHandler`1<DateTime> value);
    [CompilerGeneratedAttribute]
public void remove_DateSelected(EventHandler`1<DateTime> value);
}
public class XLabs.Forms.Controls.CameraView : View {
    public static BindableProperty CameraProperty;
    public CameraDevice Camera { get; public set; }
    private static CameraView();
    public CameraDevice get_Camera();
    public void set_Camera(CameraDevice value);
}
public class XLabs.Forms.Controls.CarouselView`1 : ContentView {
    private int currentview;
    private GesturesContentView gestureView;
    private TemplateContentView`1<object> contentView;
    private List`1<GestureInterest> interests;
    private Grid myGrid;
    private Grid marker;
    public static BindableProperty ViewModelsProperty;
    public static BindableProperty SelectedViewModelProperty;
    public static BindableProperty TemplateSelectorProperty;
    public static BindableProperty TickColorProperty;
    public static BindableProperty ShowTickProperty;
    public static BindableProperty ItemTemplateSelectorProperty;
    private DataTemplateSelector currentItemSelector;
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public bool ShowTick { get; public set; }
    public Color TickColor { get; public set; }
    public ObservableCollection`1<T> ViewModels { get; public set; }
    public T SelectedViewModel { get; public set; }
    public TemplateSelector TemplateSelector { get; public set; }
    private static CarouselView`1();
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    private static void OnDataTemplateSelectorChanged(BindableObject bindable, DataTemplateSelector oldvalue, DataTemplateSelector newvalue);
    protected virtual void OnDataTemplateSelectorChanged(DataTemplateSelector oldValue, DataTemplateSelector newValue);
    public bool get_ShowTick();
    public void set_ShowTick(bool value);
    public Color get_TickColor();
    public void set_TickColor(Color value);
    public ObservableCollection`1<T> get_ViewModels();
    public void set_ViewModels(ObservableCollection`1<T> value);
    public T get_SelectedViewModel();
    public void set_SelectedViewModel(T value);
    public TemplateSelector get_TemplateSelector();
    public void set_TemplateSelector(TemplateSelector value);
    protected virtual void OnBindingContextChanged();
    private void SetupTickBoard();
    private void SwitchView(bool increment);
    private void SwitchView(int newval);
    private void ShowTickChanged(bool newval);
    private void SelectorChanged(TemplateSelector newval);
    private void ViewModelsChanged(ObservableCollection`1<T> oldval, ObservableCollection`1<T> newval);
    private void ViewModelCollectionContentsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static void SelectedViewModelChanged(BindableObject bo, T oldval, T newval);
    private static void ShowTickchanged(BindableObject bo, bool oldval, bool newval);
    private static void ViewModelsChanged(BindableObject bo, ObservableCollection`1<T> oldval, ObservableCollection`1<T> newval);
    private static void TemplateSelectorChanged(BindableObject bo, TemplateSelector oldval, TemplateSelector newval);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(GestureResult g, object x);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__6_1(GestureResult g, object x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_2(GestureResult g, object x);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__6_3(GestureResult g, object x);
}
public class XLabs.Forms.Controls.CheckBox : View {
    public static BindableProperty CheckedProperty;
    public static BindableProperty CheckedTextProperty;
    public static BindableProperty UncheckedTextProperty;
    public static BindableProperty DefaultTextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontNameProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<bool>> CheckedChanged;
    public bool Checked { get; public set; }
    public string CheckedText { get; public set; }
    public string UncheckedText { get; public set; }
    public string DefaultText { get; public set; }
    public Color TextColor { get; public set; }
    public double FontSize { get; public set; }
    public string FontName { get; public set; }
    public string Text { get; }
    private static CheckBox();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler`1<EventArgs`1<bool>> value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public string get_CheckedText();
    public void set_CheckedText(string value);
    public string get_UncheckedText();
    public void set_UncheckedText(string value);
    public string get_DefaultText();
    public void set_DefaultText(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public string get_FontName();
    public void set_FontName(string value);
    public string get_Text();
    private static void OnCheckedPropertyChanged(BindableObject bindable, bool oldvalue, bool newvalue);
}
public class XLabs.Forms.Controls.CheckboxCell : ExtendedTextCell {
    public EventHandler`1<EventArgs`1<bool>> CheckedChanged;
    public static BindableProperty CheckedProperty;
    private bool _turnOnOnly;
    public bool Checked { get; public set; }
    public CheckboxCell(bool turnOnOnly);
    private static CheckboxCell();
    public bool get_Checked();
    public void set_Checked(bool value);
    private void HandleTapped(object sender, EventArgs e);
    private void RaiseCheckedChanged(bool val);
}
public class XLabs.Forms.Controls.CircleImage : Image {
}
public class XLabs.Forms.Controls.CollectionChangedHandle`2 : object {
    private Func`2<T, TSyncType> _projector;
    private Action`3<TSyncType, T, int> _postadd;
    private Action`1<TSyncType> _cleanup;
    private INotifyCollectionChanged _itemsSourceCollectionChangedImplementation;
    private IEnumerable`1<T> _sourceCollection;
    private IList`1<TSyncType> _target;
    public CollectionChangedHandle`2(IList`1<TSyncType> target, IEnumerable`1<T> source, Func`2<T, TSyncType> projector, Action`3<TSyncType, T, int> postadd, Action`1<TSyncType> cleanup);
    public sealed virtual void Dispose();
    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void InitialPopulation();
    private void SafeClearTarget();
}
public class XLabs.Forms.Controls.ContentControl : ContentView {
    public static BindableProperty ContentTemplateProperty;
    public DataTemplate ContentTemplate { get; public set; }
    private static ContentControl();
    private static void OnContentTemplateChanged(BindableObject bindable, object oldvalue, object newvalue);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
}
public class XLabs.Forms.Controls.CurrentPageChangedEventHandler : MulticastDelegate {
    public CurrentPageChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.CurrentPageChangingEventHandler : MulticastDelegate {
    public CurrentPageChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.CustomRadioButton : View {
    public static BindableProperty CheckedProperty;
    public static BindableProperty TextProperty;
    public static BindableProperty TextColorProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontNameProperty;
    public EventHandler`1<EventArgs`1<bool>> CheckedChanged;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public bool Checked { get; public set; }
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public double FontSize { get; public set; }
    public string FontName { get; public set; }
    public int Id { get; public set; }
    private static CustomRadioButton();
    public bool get_Checked();
    public void set_Checked(bool value);
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public string get_FontName();
    public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
}
public class XLabs.Forms.Controls.DataTemplateCollection : ObservableCollection`1<IDataTemplateWrapper> {
}
public class XLabs.Forms.Controls.DataTemplateSelector : object {
    public virtual DataTemplate SelectTemplate(object item, BindableObject container);
}
[ExtensionAttribute]
public static class XLabs.Forms.Controls.DataTemplateSelectorExtensions : object {
    [ExtensionAttribute]
public static Cell CellFor(BindableObject This, object item, DataTemplateSelector selector);
    [ExtensionAttribute]
public static View ViewFor(BindableObject This, object item, DataTemplateSelector selector);
}
[ContentPropertyAttribute("WrappedTemplate")]
public class XLabs.Forms.Controls.DataTemplateWrapper`1 : BindableObject {
    public static BindableProperty WrappedTemplateProperty;
    public static BindableProperty IsDefaultProperty;
    public bool IsDefault { get; public set; }
    public DataTemplate WrappedTemplate { get; public set; }
    public Type Type { get; }
    private static DataTemplateWrapper`1();
    public sealed virtual bool get_IsDefault();
    public sealed virtual void set_IsDefault(bool value);
    public sealed virtual DataTemplate get_WrappedTemplate();
    public sealed virtual void set_WrappedTemplate(DataTemplate value);
    public sealed virtual Type get_Type();
}
[FlagsAttribute]
public enum XLabs.Forms.Controls.Directionality : Enum {
    public int value__;
    public static Directionality None;
    public static Directionality Left;
    public static Directionality Right;
    public static Directionality Up;
    public static Directionality Down;
    public static Directionality HorizontalMask;
    public static Directionality VerticalMask;
}
public class XLabs.Forms.Controls.DragContentView : ContentView {
}
public class XLabs.Forms.Controls.DynamicListView`1 : View {
    private ObservableCollection`1<T> _data;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<T>> OnSelected;
    public ObservableCollection`1<T> Data { get; public set; }
    [CompilerGeneratedAttribute]
public void add_OnSelected(EventHandler`1<EventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_OnSelected(EventHandler`1<EventArgs`1<T>> value);
    public void Add(T item);
    public bool Replace(T original, T replacement);
    public void Remove(T item);
    public ObservableCollection`1<T> get_Data();
    public void set_Data(ObservableCollection`1<T> value);
    public void InvokeItemSelectedEvent(object sender, T item);
}
public class XLabs.Forms.Controls.EditableListView`1 : View {
    public static BindableProperty SourceProperty;
    public static BindableProperty AddRowCommandProperty;
    [CompilerGeneratedAttribute]
private float <CellHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ViewType>k__BackingField;
    public ObservableCollection`1<T> Source { get; public set; }
    public Command AddRowCommand { get; public set; }
    public float CellHeight { get; public set; }
    public Type ViewType { get; public set; }
    private static EditableListView`1();
    public ObservableCollection`1<T> get_Source();
    public void set_Source(ObservableCollection`1<T> value);
    public Command get_AddRowCommand();
    public void set_AddRowCommand(Command value);
    [CompilerGeneratedAttribute]
public float get_CellHeight();
    [CompilerGeneratedAttribute]
public void set_CellHeight(float value);
    [CompilerGeneratedAttribute]
public Type get_ViewType();
    [CompilerGeneratedAttribute]
public void set_ViewType(Type value);
    public void ExecuteAddRow();
}
public class XLabs.Forms.Controls.ExtendedButton : Button {
    public static BindableProperty VerticalContentAlignmentProperty;
    public static BindableProperty HorizontalContentAlignmentProperty;
    public TextAlignment VerticalContentAlignment { get; public set; }
    public TextAlignment HorizontalContentAlignment { get; public set; }
    private static ExtendedButton();
    public TextAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(TextAlignment value);
    public TextAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(TextAlignment value);
}
public class XLabs.Forms.Controls.ExtendedContentView : ContentView {
    public static BindableProperty WidthRequestInInchesProperty;
    public double WidthRequestInInches { get; public set; }
    public double HeightRequestInInches { get; public set; }
    private static ExtendedContentView();
    public double get_WidthRequestInInches();
    public void set_WidthRequestInInches(double value);
    public double get_HeightRequestInInches();
    public void set_HeightRequestInInches(double value);
}
public class XLabs.Forms.Controls.ExtendedDatePicker : DatePicker {
    public static BindableProperty HasBorderProperty;
    public bool HasBorder { get; public set; }
    private static ExtendedDatePicker();
    public bool get_HasBorder();
    public void set_HasBorder(bool value);
}
public class XLabs.Forms.Controls.ExtendedEditor : Editor {
    public static BindableProperty FontProperty;
    public EventHandler LeftSwipe;
    public EventHandler RightSwipe;
    public Font Font { get; public set; }
    private static ExtendedEditor();
    public Font get_Font();
    public void set_Font(Font value);
    internal void OnLeftSwipe(object sender, EventArgs e);
    internal void OnRightSwipe(object sender, EventArgs e);
}
public class XLabs.Forms.Controls.ExtendedEntry : Entry {
    public static BindableProperty FontProperty;
    public static BindableProperty XAlignProperty;
    public static BindableProperty HasBorderProperty;
    public static BindableProperty PlaceholderTextColorProperty;
    public static BindableProperty MaxLengthProperty;
    public EventHandler LeftSwipe;
    public EventHandler RightSwipe;
    public int MaxLength { get; public set; }
    public Font Font { get; public set; }
    public TextAlignment XAlign { get; public set; }
    public bool HasBorder { get; public set; }
    public Color PlaceholderTextColor { get; public set; }
    private static ExtendedEntry();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public Font get_Font();
    public void set_Font(Font value);
    public TextAlignment get_XAlign();
    public void set_XAlign(TextAlignment value);
    public bool get_HasBorder();
    public void set_HasBorder(bool value);
    public Color get_PlaceholderTextColor();
    public void set_PlaceholderTextColor(Color value);
    internal void OnLeftSwipe(object sender, EventArgs e);
    internal void OnRightSwipe(object sender, EventArgs e);
}
public class XLabs.Forms.Controls.ExtendedEntryCell : EntryCell {
    public static BindableProperty IsPasswordProperty;
    public bool IsPassword { get; public set; }
    private static ExtendedEntryCell();
    public bool get_IsPassword();
    public void set_IsPassword(bool value);
}
public class XLabs.Forms.Controls.ExtendedLabel : Label {
    [ObsoleteAttribute("This is now obsolete. Please rather use FontName and FriendlyFontName to cover all platforms.")]
public static BindableProperty FontNameAndroidProperty;
    [ObsoleteAttribute("This is now obsolete. Please rather use FontName and FriendlyFontName to cover all platforms.")]
public static BindableProperty FontNameIosProperty;
    public static BindableProperty FontNameProperty;
    public static BindableProperty FriendlyFontNameProperty;
    public static BindableProperty IsUnderlineProperty;
    public static BindableProperty IsStrikeThroughProperty;
    public static BindableProperty IsDropShadowProperty;
    public static BindableProperty DropShadowColorProperty;
    public static BindableProperty PlaceholderProperty;
    public static BindableProperty FormattedPlaceholderProperty;
    [ObsoleteAttribute("This is now obsolete. Please rather use FontName and FriendlyFontName to cover all platforms.")]
public string FontNameAndroid { get; public set; }
    [ObsoleteAttribute]
public string FontNameIOS { get; public set; }
    public string FontName { get; public set; }
    public string FriendlyFontName { get; public set; }
    public bool IsUnderline { get; public set; }
    public bool IsStrikeThrough { get; public set; }
    public bool IsDropShadow { get; public set; }
    public Color DropShadowColor { get; public set; }
    public string Placeholder { get; public set; }
    public FormattedString FormattedPlaceholder { get; public set; }
    private static ExtendedLabel();
    public string get_FontNameAndroid();
    public void set_FontNameAndroid(string value);
    public string get_FontNameIOS();
    public void set_FontNameIOS(string value);
    public string get_FontName();
    public void set_FontName(string value);
    public string get_FriendlyFontName();
    public void set_FriendlyFontName(string value);
    public bool get_IsUnderline();
    public void set_IsUnderline(bool value);
    public bool get_IsStrikeThrough();
    public void set_IsStrikeThrough(bool value);
    public bool get_IsDropShadow();
    public void set_IsDropShadow(bool value);
    public Color get_DropShadowColor();
    public void set_DropShadowColor(Color value);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public FormattedString get_FormattedPlaceholder();
    public void set_FormattedPlaceholder(FormattedString value);
}
public class XLabs.Forms.Controls.ExtendedListView : ListView {
    public static BindableProperty ItemTemplateSelectorProperty;
    private DataTemplateSelector currentItemSelector;
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    private static ExtendedListView();
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    private static void OnDataTemplateSelectorChanged(BindableObject bindable, DataTemplateSelector oldvalue, DataTemplateSelector newvalue);
    protected virtual void OnDataTemplateSelectorChanged(DataTemplateSelector oldValue, DataTemplateSelector newValue);
    protected virtual Cell CreateDefault(object item);
}
public class XLabs.Forms.Controls.ExtendedPicker : Picker {
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty DisplayPropertyProperty;
    public static BindableProperty KeyMemberPathProperty;
    public IList ItemsSource { get; public set; }
    public object SelectedItem { get; public set; }
    public string DisplayProperty { get; public set; }
    public string KeyMemberPath { get; public set; }
    private static ExtendedPicker();
    public IList get_ItemsSource();
    public void set_ItemsSource(IList value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public string get_DisplayProperty();
    public void set_DisplayProperty(string value);
    public string get_KeyMemberPath();
    public void set_KeyMemberPath(string value);
    private void OnSelectedIndexChanged(object sender, EventArgs e);
    private static void OnSelectedItemChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnDisplayPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnKeyMemberPathChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnItemsSourceChanged(BindableObject bindable, object oldValue, object newValue);
    private static void loadItemsAndSetSelected(BindableObject bindable);
}
public class XLabs.Forms.Controls.ExtendedScrollView : ScrollView {
    [CompilerGeneratedAttribute]
private Action`2<ScrollView, Rectangle> Scrolled;
    public static BindableProperty PositionProperty;
    public static BindableProperty AnimateScrollProperty;
    public Point Position { get; public set; }
    public bool AnimateScroll { get; public set; }
    private static ExtendedScrollView();
    [CompilerGeneratedAttribute]
public void add_Scrolled(Action`2<ScrollView, Rectangle> value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(Action`2<ScrollView, Rectangle> value);
    public void UpdateBounds(Rectangle bounds);
    public Point get_Position();
    public void set_Position(Point value);
    public bool get_AnimateScroll();
    public void set_AnimateScroll(bool value);
}
public class XLabs.Forms.Controls.ExtendedSlider : Slider {
    public static BindableProperty CurrentStepValueProperty;
    public double StepValue { get; public set; }
    private static ExtendedSlider();
    public double get_StepValue();
    public void set_StepValue(double value);
    private void OnSliderValueChanged(object sender, ValueChangedEventArgs e);
}
public class XLabs.Forms.Controls.ExtendedSwitch : Switch {
    public static BindableProperty TintColorProperty;
    public Color TintColor { get; public set; }
    private static ExtendedSwitch();
    public Color get_TintColor();
    public void set_TintColor(Color value);
}
public class XLabs.Forms.Controls.ExtendedTabbedPage : TabbedPage {
    public static BindableProperty TintColorProperty;
    public static BindableProperty BarTintColorProperty;
    public static BindableProperty BadgesProperty;
    public static BindableProperty TabBarSelectedImageProperty;
    public static BindableProperty TabBarBackgroundImageProperty;
    public static BindableProperty ItemTemplateSelectorProperty;
    private DataTemplateSelector currentItemSelector;
    [CompilerGeneratedAttribute]
private bool <SwipeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private CurrentPageChangingEventHandler CurrentPageChanging;
    [CompilerGeneratedAttribute]
private CurrentPageChangedEventHandler CurrentPageChanged;
    [CompilerGeneratedAttribute]
private EventHandler OnSwipeRight;
    [CompilerGeneratedAttribute]
private EventHandler OnSwipeLeft;
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public Color TintColor { get; public set; }
    public Color BarTintColor { get; public set; }
    public List`1<string> Badges { get; public set; }
    public string TabBarSelectedImage { get; public set; }
    public string TabBarBackgroundImage { get; public set; }
    public bool SwipeEnabled { get; public set; }
    private static ExtendedTabbedPage();
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    private static void OnDataTemplateSelectorChanged(BindableObject bindable, DataTemplateSelector oldvalue, DataTemplateSelector newvalue);
    protected virtual void OnDataTemplateSelectorChanged(DataTemplateSelector oldValue, DataTemplateSelector newValue);
    public Color get_TintColor();
    public void set_TintColor(Color value);
    public Color get_BarTintColor();
    public void set_BarTintColor(Color value);
    public List`1<string> get_Badges();
    public void set_Badges(List`1<string> value);
    public string get_TabBarSelectedImage();
    public void set_TabBarSelectedImage(string value);
    public string get_TabBarBackgroundImage();
    public void set_TabBarBackgroundImage(string value);
    [CompilerGeneratedAttribute]
public bool get_SwipeEnabled();
    [CompilerGeneratedAttribute]
public void set_SwipeEnabled(bool value);
    [CompilerGeneratedAttribute]
public void add_CurrentPageChanging(CurrentPageChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CurrentPageChanging(CurrentPageChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_CurrentPageChanged(CurrentPageChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CurrentPageChanged(CurrentPageChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_OnSwipeRight(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnSwipeRight(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_OnSwipeLeft(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnSwipeLeft(EventHandler value);
    public void InvokeSwipeRightEvent(object sender, object item);
    public void InvokeSwipeLeftEvent(object sender, object item);
    private void OnPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SwipeLeft(object a, EventArgs e);
    private void SwipeRight(object a, EventArgs e);
    private void RaiseCurrentPageChanging();
    private void RaiseCurrentPageChanged();
    private void NextPage();
    private void PreviousPage();
    protected virtual Page CreateDefault(object item);
}
public class XLabs.Forms.Controls.ExtendedTableView : TableView {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> DataChanged;
    [CompilerGeneratedAttribute]
public void add_DataChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DataChanged(EventHandler`1<EventArgs> value);
    public void OnDataChanged();
}
public class XLabs.Forms.Controls.ExtendedTextCell : TextCell {
    public static BindableProperty DetailLocationProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontNameAndroidProperty;
    public static BindableProperty FontNameIosProperty;
    public static BindableProperty FontNameWpProperty;
    public static BindableProperty FontNameProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty SeparatorColorProperty;
    public static BindableProperty SeparatorPaddingProperty;
    public static BindableProperty ShowSeparatorProperty;
    public static BindableProperty ShowDisclousureProperty;
    public static BindableProperty DisclousureImageProperty;
    public TextCellDetailLocation DetailLocation { get; public set; }
    public double FontSize { get; public set; }
    public string FontNameAndroid { get; public set; }
    public string FontNameIos { get; public set; }
    public string FontNameWp { get; public set; }
    public string FontName { get; public set; }
    public Color BackgroundColor { get; public set; }
    public Color SeparatorColor { get; public set; }
    public Thickness SeparatorPadding { get; public set; }
    public bool ShowSeparator { get; public set; }
    public bool ShowDisclousure { get; public set; }
    public string DisclousureImage { get; public set; }
    private static ExtendedTextCell();
    public TextCellDetailLocation get_DetailLocation();
    public void set_DetailLocation(TextCellDetailLocation value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public string get_FontNameAndroid();
    public void set_FontNameAndroid(string value);
    public string get_FontNameIos();
    public void set_FontNameIos(string value);
    public string get_FontNameWp();
    public void set_FontNameWp(string value);
    public string get_FontName();
    public void set_FontName(string value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public Thickness get_SeparatorPadding();
    public void set_SeparatorPadding(Thickness value);
    public bool get_ShowSeparator();
    public void set_ShowSeparator(bool value);
    public bool get_ShowDisclousure();
    public void set_ShowDisclousure(bool value);
    public string get_DisclousureImage();
    public void set_DisclousureImage(string value);
}
public class XLabs.Forms.Controls.ExtendedTimePicker : TimePicker {
    public static BindableProperty HasBorderProperty;
    public static BindableProperty MinimumTimeProperty;
    public static BindableProperty MaximumTimeProperty;
    public bool HasBorder { get; public set; }
    public TimeSpan MinimumTime { get; public set; }
    public TimeSpan MaximumTime { get; public set; }
    private static ExtendedTimePicker();
    public bool get_HasBorder();
    public void set_HasBorder(bool value);
    public TimeSpan get_MinimumTime();
    public void set_MinimumTime(TimeSpan value);
    public TimeSpan get_MaximumTime();
    public void set_MaximumTime(TimeSpan value);
}
public class XLabs.Forms.Controls.ExtendedViewCell : ViewCell {
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty SeparatorColorProperty;
    public static BindableProperty SeparatorPaddingProperty;
    public static BindableProperty ShowSeparatorProperty;
    public static BindableProperty ShowDisclousureProperty;
    public static BindableProperty DisclousureImageProperty;
    public Color BackgroundColor { get; public set; }
    public Color SeparatorColor { get; public set; }
    public Thickness SeparatorPadding { get; public set; }
    public bool ShowSeparator { get; public set; }
    public bool ShowDisclousure { get; public set; }
    public string DisclousureImage { get; public set; }
    private static ExtendedViewCell();
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public Thickness get_SeparatorPadding();
    public void set_SeparatorPadding(Thickness value);
    public bool get_ShowSeparator();
    public void set_ShowSeparator(bool value);
    public bool get_ShowDisclousure();
    public void set_ShowDisclousure(bool value);
    public string get_DisclousureImage();
    public void set_DisclousureImage(string value);
}
public enum XLabs.Forms.Controls.GestureNotification : Enum {
    public int value__;
    public static GestureNotification None;
    public static GestureNotification Vibrate;
}
public class XLabs.Forms.Controls.GesturesContentView : ContentView {
    public static BindableProperty AccuracyProperty;
    public static BindableProperty MinimumSwipeLengthProperty;
    public static BindableProperty ExcludeChildrenProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<GestureResult> GestureRecognized;
    private List`1<ViewInterest> _viewInterests;
    public bool ExcludeChildren { get; public set; }
    public float MinimumSwipeLength { get; public set; }
    public float Accuracy { get; public set; }
    private static GesturesContentView();
    public bool get_ExcludeChildren();
    public void set_ExcludeChildren(bool value);
    public float get_MinimumSwipeLength();
    public void set_MinimumSwipeLength(float value);
    public float get_Accuracy();
    public void set_Accuracy(float value);
    [CompilerGeneratedAttribute]
public void add_GestureRecognized(EventHandler`1<GestureResult> value);
    [CompilerGeneratedAttribute]
public void remove_GestureRecognized(EventHandler`1<GestureResult> value);
    internal void RegisterInterests(View view, IEnumerable`1<GestureInterest> interestedin);
    internal void RemoveInterestsFor(View view);
    private void BindInterests(ViewInterest vi);
    private object FindBindingContext(View view);
    internal bool ProcessGesture(GestureResult gesture);
    private ViewInterest InterestedView(Point point);
    private double DistanceToClosestEdge(Rectangle r, Point pt);
    private double DistanceToEdge(Point originPoint, Point vertex1Point, Point vertex2Point);
    private void SatisfyInterest(GestureInterest gi, GestureResult args);
}
public enum XLabs.Forms.Controls.GestureType : Enum {
    public int value__;
    public static GestureType Unknown;
    public static GestureType SingleTap;
    public static GestureType DoubleTap;
    public static GestureType LongPress;
    public static GestureType Swipe;
    public static GestureType Pinch;
    public static GestureType Move;
    public static GestureType Up;
    public static GestureType Down;
}
public class XLabs.Forms.Controls.GradientContentView : ContentView {
    public static BindableProperty OrientationProperty;
    public static BindableProperty StartColorProperty;
    public static BindableProperty EndColorProperty;
    public GradientOrientation Orientation { get; public set; }
    public Color StartColor { get; public set; }
    public Color EndColor { get; public set; }
    private static GradientContentView();
    public GradientOrientation get_Orientation();
    public void set_Orientation(GradientOrientation value);
    public Color get_StartColor();
    public void set_StartColor(Color value);
    public Color get_EndColor();
    public void set_EndColor(Color value);
}
public enum XLabs.Forms.Controls.GradientOrientation : Enum {
    public int value__;
    public static GradientOrientation Vertical;
    public static GradientOrientation Horizontal;
}
public class XLabs.Forms.Controls.GridView : View {
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty RowSpacingProperty;
    public static BindableProperty ColumnSpacingProperty;
    public static BindableProperty ItemWidthProperty;
    public static BindableProperty ItemHeightProperty;
    public static BindableProperty PaddingProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<object>> ItemSelected;
    [CompilerGeneratedAttribute]
private bool <SelectionEnabled>k__BackingField;
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public double RowSpacing { get; public set; }
    public double ColumnSpacing { get; public set; }
    public double ItemWidth { get; public set; }
    public double ItemHeight { get; public set; }
    public Thickness Padding { get; public set; }
    public bool SelectionEnabled { get; public set; }
    private static GridView();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public double get_RowSpacing();
    public void set_RowSpacing(double value);
    public double get_ColumnSpacing();
    public void set_ColumnSpacing(double value);
    public double get_ItemWidth();
    public void set_ItemWidth(double value);
    public double get_ItemHeight();
    public void set_ItemHeight(double value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    [CompilerGeneratedAttribute]
public void add_ItemSelected(EventHandler`1<EventArgs`1<object>> value);
    [CompilerGeneratedAttribute]
public void remove_ItemSelected(EventHandler`1<EventArgs`1<object>> value);
    public void InvokeItemSelectedEvent(object sender, object item);
    [CompilerGeneratedAttribute]
public bool get_SelectionEnabled();
    [CompilerGeneratedAttribute]
public void set_SelectionEnabled(bool value);
}
public class XLabs.Forms.Controls.HybridWebView : View {
    public static BindableProperty UriProperty;
    public static BindableProperty SourceProperty;
    public static BindableProperty CleanupProperty;
    internal EventHandler`1<string> JavaScriptLoadRequested;
    internal EventHandler`1<LoadContentEventArgs> LoadFromContentRequested;
    internal EventHandler`1<LoadContentEventArgs> LoadContentRequested;
    public EventHandler LeftSwipe;
    public EventHandler LoadFinished;
    public EventHandler`1<EventArgs`1<Uri>> Navigating;
    public EventHandler RightSwipe;
    private object injectLock;
    private IJsonSerializer jsonSerializer;
    private Dictionary`2<string, Action`1<string>> registeredActions;
    private Dictionary`2<string, Func`2<string, Object[]>> registeredFunctions;
    public Uri Uri { get; public set; }
    public WebViewSource Source { get; public set; }
    public bool CleanupCalled { get; public set; }
    public HybridWebView(IJsonSerializer jsonSerializer);
    private static HybridWebView();
    public Uri get_Uri();
    public void set_Uri(Uri value);
    public WebViewSource get_Source();
    public void set_Source(WebViewSource value);
    public bool get_CleanupCalled();
    public void set_CleanupCalled(bool value);
    public void RegisterCallback(string name, Action`1<string> action);
    public bool RemoveCallback(string name);
    public void RegisterNativeFunction(string name, Func`2<string, Object[]> func);
    public bool RemoveNativeFunction(string name);
    public void LoadFromContent(string contentFullName, string baseUri);
    public void LoadContent(string content, string baseUri);
    public void InjectJavaScript(string script);
    public void CallJsFunction(string funcName, Object[] parameters);
    internal bool TryGetAction(string name, Action`1& action);
    internal bool TryGetFunc(string name, Func`2& func);
    internal void OnLoadFinished(object sender, EventArgs e);
    internal void OnLeftSwipe(object sender, EventArgs e);
    internal void OnRightSwipe(object sender, EventArgs e);
    internal void OnNavigating(Uri uri);
    internal void MessageReceived(string message);
    public void RemoveAllCallbacks();
    public void RemoveAllFunctions();
    public void Cleanup();
}
public class XLabs.Forms.Controls.HyperLinkLabel : Label {
    public static BindableProperty SubjectProperty;
    public static BindableProperty NavigateUriProperty;
    public static BindableProperty NavigateCommandProperty;
    private TapGestureRecognizer _tapGestureRecognizer;
    public string Subject { get; public set; }
    public string NavigateUri { get; public set; }
    public ICommand NavigateCommand { get; public set; }
    private static HyperLinkLabel();
    public string get_Subject();
    public void set_Subject(string value);
    public string get_NavigateUri();
    public void set_NavigateUri(string value);
    public ICommand get_NavigateCommand();
    public void set_NavigateCommand(ICommand value);
    protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public interface XLabs.Forms.Controls.IAutoCompleteSearchObject {
    public abstract virtual string StringToSearchBy();
}
public interface XLabs.Forms.Controls.ICarouselView {
    public abstract virtual void Showing();
    public abstract virtual void Shown();
    public abstract virtual void Hiding();
    public abstract virtual void Hiden();
}
public class XLabs.Forms.Controls.IconButton : Button {
    public static BindableProperty TextAlignementProperty;
    public static BindableProperty OrientationProperty;
    public static BindableProperty IconProperty;
    public static BindableProperty ShowIconSeparatorProperty;
    public static BindableProperty IconColorProperty;
    public static BindableProperty IconSizeProperty;
    public static BindableProperty IconFontNameProperty;
    public TextAlignment TextAlignement { get; public set; }
    public ImageOrientation Orientation { get; public set; }
    public string Icon { get; public set; }
    public bool ShowIconSeparator { get; public set; }
    public Color IconColor { get; public set; }
    public float IconSize { get; public set; }
    public string IconFontName { get; public set; }
    private static IconButton();
    public TextAlignment get_TextAlignement();
    public void set_TextAlignement(TextAlignment value);
    public ImageOrientation get_Orientation();
    public void set_Orientation(ImageOrientation value);
    public string get_Icon();
    public void set_Icon(string value);
    public bool get_ShowIconSeparator();
    public void set_ShowIconSeparator(bool value);
    public Color get_IconColor();
    public void set_IconColor(Color value);
    public float get_IconSize();
    public void set_IconSize(float value);
    public string get_IconFontName();
    public void set_IconFontName(string value);
}
public class XLabs.Forms.Controls.IconLabel : Label {
    public static BindableProperty TextAlignementProperty;
    public static BindableProperty OrientationProperty;
    public static BindableProperty IconProperty;
    public static BindableProperty ShowIconSeparatorProperty;
    public static BindableProperty IconColorProperty;
    public static BindableProperty IconSizeProperty;
    public static BindableProperty IconFontNameProperty;
    public TextAlignment TextAlignement { get; public set; }
    public ImageOrientation Orientation { get; public set; }
    public string Icon { get; public set; }
    public bool ShowIconSeparator { get; public set; }
    public Color IconColor { get; public set; }
    public double IconSize { get; public set; }
    public string IconFontName { get; public set; }
    private static IconLabel();
    public TextAlignment get_TextAlignement();
    public void set_TextAlignement(TextAlignment value);
    public ImageOrientation get_Orientation();
    public void set_Orientation(ImageOrientation value);
    public string get_Icon();
    public void set_Icon(string value);
    public bool get_ShowIconSeparator();
    public void set_ShowIconSeparator(bool value);
    public Color get_IconColor();
    public void set_IconColor(Color value);
    public double get_IconSize();
    public void set_IconSize(double value);
    public string get_IconFontName();
    public void set_IconFontName(string value);
}
public interface XLabs.Forms.Controls.IDataTemplateWrapper {
    public bool IsDefault { get; public set; }
    public DataTemplate WrappedTemplate { get; public set; }
    public Type Type { get; }
    public abstract virtual bool get_IsDefault();
    public abstract virtual void set_IsDefault(bool value);
    public abstract virtual DataTemplate get_WrappedTemplate();
    public abstract virtual void set_WrappedTemplate(DataTemplate value);
    public abstract virtual Type get_Type();
}
public class XLabs.Forms.Controls.ImageButton : Button {
    public static BindableProperty SourceProperty;
    public static BindableProperty DisabledSourceProperty;
    public static BindableProperty ImageWidthRequestProperty;
    public static BindableProperty ImageHeightRequestProperty;
    public static BindableProperty OrientationProperty;
    public static BindableProperty ImageTintColorProperty;
    public static BindableProperty DisabledImageTintColorProperty;
    [TypeConverterAttribute("XLabs.Forms.Controls.ImageSourceConverter")]
public ImageSource Source { get; public set; }
    [TypeConverterAttribute("XLabs.Forms.Controls.ImageSourceConverter")]
public ImageSource DisabledSource { get; public set; }
    public ImageOrientation Orientation { get; public set; }
    public int ImageHeightRequest { get; public set; }
    public int ImageWidthRequest { get; public set; }
    public Color ImageTintColor { get; public set; }
    public Color DisabledImageTintColor { get; public set; }
    private static ImageButton();
    public ImageSource get_Source();
    public void set_Source(ImageSource value);
    public ImageSource get_DisabledSource();
    public void set_DisabledSource(ImageSource value);
    public ImageOrientation get_Orientation();
    public void set_Orientation(ImageOrientation value);
    public int get_ImageHeightRequest();
    public void set_ImageHeightRequest(int value);
    public int get_ImageWidthRequest();
    public void set_ImageWidthRequest(int value);
    public Color get_ImageTintColor();
    public void set_ImageTintColor(Color value);
    public Color get_DisabledImageTintColor();
    public void set_DisabledImageTintColor(Color value);
}
public class XLabs.Forms.Controls.ImageGallery : View {
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    private static ImageGallery();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
}
public class XLabs.Forms.Controls.ImageSourceConverter : TypeConverter {
    public virtual bool CanConvertFrom(Type sourceType);
    public virtual object ConvertFrom(CultureInfo culture, object value);
}
public class XLabs.Forms.Controls.PopupLayout : ContentView {
    private View content;
    private View popup;
    private RelativeLayout layout;
    public View Content { get; public set; }
    public bool IsPopupActive { get; }
    public View get_Content();
    public void set_Content(View value);
    public bool get_IsPopupActive();
    public void ShowPopup(View popupView);
    public void ShowPopup(View popupView, Constraint xConstraint, Constraint yConstraint, Constraint widthConstraint, Constraint heightConstraint);
    public void ShowPopup(View popupView, View presenter, PopupLocation location, float paddingX, float paddingY);
    public void DismissPopup();
    [CompilerGeneratedAttribute]
private double <ShowPopup>b__10_0(RelativeLayout p);
    [CompilerGeneratedAttribute]
private double <ShowPopup>b__10_1(RelativeLayout p);
}
public class XLabs.Forms.Controls.RepeaterView`1 : StackLayout {
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemClickCommandProperty;
    public static BindableProperty TemplateSelectorProperty;
    public static BindableProperty ItemTemplateSelectorProperty;
    private DataTemplateSelector currentItemSelector;
    [CompilerGeneratedAttribute]
private RepeaterViewItemAddedEventHandler<T> ItemCreated;
    private IDisposable _collectionChangedHandle;
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public IEnumerable`1<T> ItemsSource { get; public set; }
    public TemplateSelector TemplateSelector { get; public set; }
    public ICommand ItemClickCommand { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    private static RepeaterView`1();
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    private static void OnDataTemplateSelectorChanged(BindableObject bindable, DataTemplateSelector oldvalue, DataTemplateSelector newvalue);
    protected virtual void OnDataTemplateSelectorChanged(DataTemplateSelector oldValue, DataTemplateSelector newValue);
    [CompilerGeneratedAttribute]
public void add_ItemCreated(RepeaterViewItemAddedEventHandler<T> value);
    [CompilerGeneratedAttribute]
public void remove_ItemCreated(RepeaterViewItemAddedEventHandler<T> value);
    public IEnumerable`1<T> get_ItemsSource();
    public void set_ItemsSource(IEnumerable`1<T> value);
    public TemplateSelector get_TemplateSelector();
    public void set_TemplateSelector(TemplateSelector value);
    public ICommand get_ItemClickCommand();
    public void set_ItemClickCommand(ICommand value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    protected virtual void NotifyItemAdded(View view, T model);
    protected virtual DataTemplate GetTemplateFor(Type type);
    protected virtual View ViewFor(T item);
    private static void ItemsChanged(BindableObject bindable, IEnumerable`1<T> oldValue, IEnumerable`1<T> newValue);
}
public class XLabs.Forms.Controls.RepeaterViewItemAddedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private View <View>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    public View View { get; public set; }
    public object Model { get; public set; }
    public RepeaterViewItemAddedEventArgs(View view, object model);
    [CompilerGeneratedAttribute]
public View get_View();
    [CompilerGeneratedAttribute]
public void set_View(View value);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(object value);
}
public class XLabs.Forms.Controls.SegmentControl : ContentView {
    private StackLayout _layout;
    private Color _tintColor;
    private int _selectedSegment;
    [CompilerGeneratedAttribute]
private EventHandler`1<int> SelectedSegmentChanged;
    private Command _clickedCommand;
    public Color TintColor { get; public set; }
    public int SelectedSegment { get; public set; }
    public Color get_TintColor();
    public void set_TintColor(Color value);
    public int get_SelectedSegment();
    public void set_SelectedSegment(int value);
    [CompilerGeneratedAttribute]
public void add_SelectedSegmentChanged(EventHandler`1<int> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedSegmentChanged(EventHandler`1<int> value);
    public void AddSegment(string segmentText);
    private void SetSelectedSegment(object o);
    public void SetSegmentText(int iSegment, string segmentText);
    private void SetSelectedState(int indexer, bool isSelected, bool setBorderColor);
}
public class XLabs.Forms.Controls.SegmentedControlView : BoxView {
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty SegmentsItensProperty;
    public static BindableProperty TintColorProperty;
    public int SelectedItem { get; public set; }
    public string SegmentsItens { get; public set; }
    public Color TintColor { get; public set; }
    private static SegmentedControlView();
    public int get_SelectedItem();
    public void set_SelectedItem(int value);
    public string get_SegmentsItens();
    public void set_SegmentsItens(string value);
    public Color get_TintColor();
    public void set_TintColor(Color value);
}
public class XLabs.Forms.Controls.SelectCell : ExtendedTextCell {
    public static BindableProperty ItemsProperty;
    public static BindableProperty SelectedItemProperty;
    [CompilerGeneratedAttribute]
private Func`1<INavigation> <Navigation>k__BackingField;
    private List`1<CheckboxCell> _cells;
    private TableView _selectionTableView;
    [CompilerGeneratedAttribute]
private Action SelectedItemChanged;
    public List`1<string> Items { get; public set; }
    public string SelectedItem { get; public set; }
    public Func`1<INavigation> Navigation { get; public set; }
    public SelectCell(Func`1<INavigation> navigation);
    private static SelectCell();
    public List`1<string> get_Items();
    public void set_Items(List`1<string> value);
    public string get_SelectedItem();
    public void set_SelectedItem(string value);
    [CompilerGeneratedAttribute]
public Func`1<INavigation> get_Navigation();
    [CompilerGeneratedAttribute]
public void set_Navigation(Func`1<INavigation> value);
    [CompilerGeneratedAttribute]
public void add_SelectedItemChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_SelectedItemChanged(Action value);
    protected virtual ContentPage CreatePage();
    private void CheckboxChanged(object sender, EventArgs`1<bool> args);
    private void HandleTapped(object sender, EventArgs e);
}
public class XLabs.Forms.Controls.SensorBar.SensorBarView : View {
    public static BindableProperty PositiveColorProperty;
    public static BindableProperty NegativeColorProperty;
    public static BindableProperty CurrentValueProperty;
    public static BindableProperty LimitProperty;
    public double CurrentValue { get; public set; }
    public double Limit { get; public set; }
    public Color PositiveColor { get; public set; }
    public Color NegativeColor { get; public set; }
    private static SensorBarView();
    public double get_CurrentValue();
    public void set_CurrentValue(double value);
    public double get_Limit();
    public void set_Limit(double value);
    public Color get_PositiveColor();
    public void set_PositiveColor(Color value);
    public Color get_NegativeColor();
    public void set_NegativeColor(Color value);
}
public class XLabs.Forms.Controls.Separator : View {
    public static BindableProperty OrientationProperty;
    public static BindableProperty ColorProperty;
    public static BindableProperty SpacingBeforeProperty;
    public static BindableProperty SpacingAfterProperty;
    public static BindableProperty ThicknessProperty;
    public static BindableProperty StrokeTypeProperty;
    public SeparatorOrientation Orientation { get; private set; }
    public Color Color { get; public set; }
    public double SpacingBefore { get; public set; }
    public double SpacingAfter { get; public set; }
    public double Thickness { get; public set; }
    public StrokeType StrokeType { get; public set; }
    private static Separator();
    public SeparatorOrientation get_Orientation();
    private void set_Orientation(SeparatorOrientation value);
    public Color get_Color();
    public void set_Color(Color value);
    public double get_SpacingBefore();
    public void set_SpacingBefore(double value);
    public double get_SpacingAfter();
    public void set_SpacingAfter(double value);
    public double get_Thickness();
    public void set_Thickness(double value);
    public StrokeType get_StrokeType();
    public void set_StrokeType(StrokeType value);
    protected virtual void OnPropertyChanged(string propertyName);
    private void UpdateRequestedSize();
}
public enum XLabs.Forms.Controls.SeparatorOrientation : Enum {
    public int value__;
    public static SeparatorOrientation Vertical;
    public static SeparatorOrientation Horizontal;
}
public enum XLabs.Forms.Controls.StrokeType : Enum {
    public int value__;
    public static StrokeType Solid;
    public static StrokeType Dotted;
    public static StrokeType Dashed;
}
public class XLabs.Forms.Controls.SwipeLeftEventHandler : MulticastDelegate {
    public SwipeLeftEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.SwipeRightEventHandler : MulticastDelegate {
    public SwipeRightEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.TemplateContentView`1 : ContentView {
    public static BindableProperty TemplateSelectorProperty;
    public static BindableProperty ViewModelProperty;
    public static BindableProperty ItemTemplateSelectorProperty;
    private DataTemplateSelector currentItemSelector;
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public TemplateSelector TemplateSelector { get; public set; }
    public T ViewModel { get; public set; }
    private static TemplateContentView`1();
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    private static void OnDataTemplateSelectorChanged(BindableObject bindable, DataTemplateSelector oldvalue, DataTemplateSelector newvalue);
    protected virtual void OnDataTemplateSelectorChanged(DataTemplateSelector oldValue, DataTemplateSelector newValue);
    public TemplateSelector get_TemplateSelector();
    public void set_TemplateSelector(TemplateSelector value);
    public T get_ViewModel();
    public void set_ViewModel(T value);
    private static void ViewModelChanged(BindableObject bindable, T oldValue, T newValue);
    private void ViewModelChangedImpl(T newvalue);
}
[ContentPropertyAttribute("Templates")]
public class XLabs.Forms.Controls.TemplateSelector : BindableObject {
    public static BindableProperty TemplatesProperty;
    public static BindableProperty SelectorFunctionProperty;
    public static BindableProperty ExceptionOnNoMatchProperty;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, DataTemplate> <Cache>k__BackingField;
    private Dictionary`2<Type, DataTemplate> Cache { get; private set; }
    public bool ExceptionOnNoMatch { get; public set; }
    public DataTemplateCollection Templates { get; public set; }
    public Func`2<Type, DataTemplate> SelectorFunction { get; public set; }
    private static TemplateSelector();
    public static void TemplatesChanged(BindableObject bo, DataTemplateCollection oldval, DataTemplateCollection newval);
    private void TemplateSetChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, DataTemplate> get_Cache();
    [CompilerGeneratedAttribute]
private void set_Cache(Dictionary`2<Type, DataTemplate> value);
    public bool get_ExceptionOnNoMatch();
    public void set_ExceptionOnNoMatch(bool value);
    public DataTemplateCollection get_Templates();
    public void set_Templates(DataTemplateCollection value);
    public Func`2<Type, DataTemplate> get_SelectorFunction();
    public void set_SelectorFunction(Func`2<Type, DataTemplate> value);
    public DataTemplate TemplateFor(Type type);
    private DataTemplate TemplateForImpl(Type type, List`1<Type> examined);
    public View ViewFor(object item);
}
public class XLabs.Forms.Controls.WebImage : Image {
    public static BindableProperty ImageUrlProperty;
    public static BindableProperty DefaultImageProperty;
    public string ImageUrl { get; public set; }
    public string DefaultImage { get; public set; }
    private static WebImage();
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public string get_DefaultImage();
    public void set_DefaultImage(string value);
}
public class XLabs.Forms.Controls.WrapLayout : Layout`1<View> {
    public static BindableProperty OrientationProperty;
    public static BindableProperty SpacingProperty;
    public StackOrientation Orientation { get; public set; }
    public double Spacing { get; public set; }
    private static WrapLayout();
    public StackOrientation get_Orientation();
    public void set_Orientation(StackOrientation value);
    public double get_Spacing();
    public void set_Spacing(double value);
    private void OnSizeChanged();
    protected virtual SizeRequest OnSizeRequest(double widthConstraint, double heightConstraint);
    private SizeRequest DoVerticalMeasure(double widthConstraint, double heightConstraint);
    private SizeRequest DoHorizontalMeasure(double widthConstraint, double heightConstraint);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
}
public class XLabs.Forms.Converter.BooleanToColorConverter : object {
    [CompilerGeneratedAttribute]
private Color <TrueColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <FalseColor>k__BackingField;
    public Color TrueColor { get; public set; }
    public Color FalseColor { get; public set; }
    public BooleanToColorConverter(Color trueColor, Color falseColor);
    [CompilerGeneratedAttribute]
public Color get_TrueColor();
    [CompilerGeneratedAttribute]
public void set_TrueColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_FalseColor();
    [CompilerGeneratedAttribute]
public void set_FalseColor(Color value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class XLabs.Forms.Converter.CollectionEmptyToBool : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private bool IsEmpty(IEnumerable en);
}
public class XLabs.Forms.Converter.HeightToMillimeters : object {
    private static IDisplay _display;
    private static double MILLIMETERS_IN_INCH;
    private static IDisplay Display { get; }
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private static IDisplay get_Display();
    private static double ToMillimeters(double inches);
}
public class XLabs.Forms.Converter.InverseBooleanConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class XLabs.Forms.Converter.ObjectRefToBooleanConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class XLabs.Forms.Exceptions.InvalidBindableException : Exception {
    [CompilerGeneratedAttribute]
private BindableObject <IncorrectBindableObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExpectedType>k__BackingField;
    public BindableObject IncorrectBindableObject { get; public set; }
    public Type ExpectedType { get; public set; }
    public InvalidBindableException(BindableObject bindable, Type expected, string name);
    [CompilerGeneratedAttribute]
public BindableObject get_IncorrectBindableObject();
    [CompilerGeneratedAttribute]
public void set_IncorrectBindableObject(BindableObject value);
    [CompilerGeneratedAttribute]
public Type get_ExpectedType();
    [CompilerGeneratedAttribute]
public void set_ExpectedType(Type value);
}
public class XLabs.Forms.Mvvm.BaseView : ContentPage {
    protected virtual void OnAppearing();
    protected virtual void OnDisappearing();
}
public interface XLabs.Forms.Mvvm.INavigationAware {
    public abstract virtual void OnNavigatingTo(TView previousView);
    public abstract virtual void OnNavigatingFrom(TView nextView);
}
public interface XLabs.Forms.Mvvm.INavigationAwareAsync {
    public abstract virtual Task OnNavigatingToAsync(TView previousView);
    public abstract virtual Task OnNavigatingFromAsync(TView nextView);
}
public interface XLabs.Forms.Mvvm.IPage {
    public INavigation Navigation { get; }
    public object BindingContext { get; public set; }
    public abstract virtual INavigation get_Navigation();
    public abstract virtual object get_BindingContext();
    public abstract virtual void set_BindingContext(object value);
    public abstract virtual void NavigatingTo(IPage previousPage, object argument);
    public abstract virtual void NavigatingFrom(IPage nextPage);
    public abstract virtual object ToNativePage();
}
public interface XLabs.Forms.Mvvm.IViewModel {
    public INavigationService NavigationService { get; public set; }
    public ViewModelNavigation Navigation { get; public set; }
    public bool IsBusy { get; public set; }
    public abstract virtual INavigationService get_NavigationService();
    public abstract virtual void set_NavigationService(INavigationService value);
    public abstract virtual ViewModelNavigation get_Navigation();
    public abstract virtual void set_Navigation(ViewModelNavigation value);
    public abstract virtual bool get_IsBusy();
    public abstract virtual void set_IsBusy(bool value);
}
public class XLabs.Forms.Mvvm.NavigationAwareViewModel : ViewModel {
    public virtual void OnNavigatingTo(TView previousView);
    public virtual void OnNavigatingFrom(TView nextView);
}
internal class XLabs.Forms.Mvvm.NavigationConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class XLabs.Forms.Mvvm.NavigationView : NavigationPage {
    private static string CURRENT_PAGE_PROPERTY_NAME;
    private Page _previousPage;
    private Page _mainPage;
    public NavigationView(Page root);
    protected virtual void OnChildAdded(Element child);
    protected virtual void OnChildRemoved(Element child);
    protected virtual void OnPropertyChanging(string propertyName);
    private INavigationAware AsNavigationAware(VisualElement element);
    protected void OnNavigatingTo(Page targetView, Page previousView);
    protected void OnNavigatingFrom(Page targetView, Page nextView);
}
public static class XLabs.Forms.Mvvm.ViewFactory : object {
    private static Dictionary`2<Type, Type> TypeDictionary;
    private static Dictionary`2<string, Tuple`2<IViewModel, object>> PageCache;
    [CompilerGeneratedAttribute]
private static bool <EnableCache>k__BackingField;
    public static bool EnableCache { get; public set; }
    private static ViewFactory();
    [CompilerGeneratedAttribute]
public static bool get_EnableCache();
    [CompilerGeneratedAttribute]
public static void set_EnableCache(bool value);
    public static void Register(Func`2<IResolver, TViewModel> func);
    public static object CreatePage(Type viewModelType, Action`2<object, object> initialiser, Object[] args);
    public static object CreatePage(Action`2<TViewModel, TPage> initialiser, Object[] args);
    public static void ClearCache();
}
public abstract class XLabs.Forms.Mvvm.ViewModel : ObservableObject {
    private bool _isBusy;
    private INavigationService _navigationService;
    [CompilerGeneratedAttribute]
private ViewModelNavigation <Navigation>k__BackingField;
    public INavigationService NavigationService { get; public set; }
    public ViewModelNavigation Navigation { get; public set; }
    public bool IsBusy { get; public set; }
    public sealed virtual INavigationService get_NavigationService();
    public sealed virtual void set_NavigationService(INavigationService value);
    [CompilerGeneratedAttribute]
public sealed virtual ViewModelNavigation get_Navigation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Navigation(ViewModelNavigation value);
    public sealed virtual bool get_IsBusy();
    public sealed virtual void set_IsBusy(bool value);
    public virtual void OnViewAppearing();
    public virtual void OnViewDisappearing();
    [ObsoleteAttribute("Use the SetProperty method instead.")]
protected bool ChangeAndNotify(T& property, T value, string propertyName);
}
public class XLabs.Forms.Mvvm.ViewModelNavigation : object {
    private INavigation _implementor;
    public ViewModelNavigation(INavigation implementor);
    public Task PushAsync(Page page, bool animated);
    public Task PushAsync(bool animated);
    public Task PushAsync(Action`2<TViewModel, Page> activateAction, bool animated);
    public Task PopAsync(bool animated);
    public Task PopToRootAsync(bool animated);
    public Task PushModalAsync(Page page, bool animated);
    public Task PushModalAsync(bool animated);
    public Task PushModalAsync(Action`2<TViewModel, Page> activateAction, bool animated);
    public Task PopModalAsync(bool animated);
    [AsyncStateMachineAttribute("XLabs.Forms.Mvvm.ViewModelNavigation/<RemoveAsync>d__11`1")]
public Task RemoveAsync(TViewModel viewModel, bool animated);
}
[AttributeUsageAttribute("4")]
public class XLabs.Forms.Mvvm.ViewTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ViewType>k__BackingField;
    public Type ViewType { get; private set; }
    public ViewTypeAttribute(Type viewType);
    [CompilerGeneratedAttribute]
public Type get_ViewType();
    [CompilerGeneratedAttribute]
private void set_ViewType(Type value);
}
public class XLabs.Forms.OnPlatformList`1 : ObservableCollection`1<T> {
    private ObservableCollection`1<T> _realData;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<T> <iOS>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<T> <Android>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<T> <WinPhone>k__BackingField;
    public ObservableCollection`1<T> iOS { get; private set; }
    public ObservableCollection`1<T> Android { get; private set; }
    public ObservableCollection`1<T> WinPhone { get; private set; }
    [CompilerGeneratedAttribute]
public ObservableCollection`1<T> get_iOS();
    [CompilerGeneratedAttribute]
private void set_iOS(ObservableCollection`1<T> value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<T> get_Android();
    [CompilerGeneratedAttribute]
private void set_Android(ObservableCollection`1<T> value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<T> get_WinPhone();
    [CompilerGeneratedAttribute]
private void set_WinPhone(ObservableCollection`1<T> value);
    private void OnInitialize(object sender, NotifyCollectionChangedEventArgs e);
    private void Setup(ObservableCollection`1<T> data);
    [CompilerGeneratedAttribute]
private void <Setup>b__15_0(object sender, NotifyCollectionChangedEventArgs e);
}
public class XLabs.Forms.Pages.ExtendedMasterDetailPage : MasterDetailPage {
}
public interface XLabs.Forms.Pages.IModal`1 {
    public IModalHost`1<T> Host { get; public set; }
    public abstract virtual IModalHost`1<T> get_Host();
    public abstract virtual void set_Host(IModalHost`1<T> value);
}
public interface XLabs.Forms.Pages.IModalHost`1 {
    public abstract virtual void ModalSuccess(T returnvalue);
    public abstract virtual void ModalCancel();
}
public class XLabs.Forms.Pages.ModalHost`2 : object {
    private INavigation _navigation;
    private TPage _page;
    private Action _cancelAction;
    private Action`1<T> _successAction;
    public ModalHost`2(INavigation navigation, TPage page, Action`1<T> success, Action cancel);
    [AsyncStateMachineAttribute("XLabs.Forms.Pages.ModalHost`2/<Show>d__5")]
public void Show();
    public sealed virtual void ModalSuccess(T result);
    public sealed virtual void ModalCancel();
    [AsyncStateMachineAttribute("XLabs.Forms.Pages.ModalHost`2/<Close>d__8")]
private void Close(Action resultAction);
    [CompilerGeneratedAttribute]
private void <ModalCancel>b__7_0();
}
public interface XLabs.Forms.Services.IFontManager {
    public IEnumerable`1<string> AvailableFonts { get; }
    public abstract virtual IEnumerable`1<string> get_AvailableFonts();
    public abstract virtual double GetHeight(Font font);
    public abstract virtual Font FindClosest(string name, double desiredHeight);
}
public class XLabs.Forms.Services.NavigationService : object {
    private INavigation _navigation;
    private IDictionary`2<string, Type> _pageLookup;
    public NavigationService(INavigation nav);
    public sealed virtual void RegisterPage(string pageKey, Type pageType);
    public sealed virtual void NavigateTo(string pageKey, bool animated, Object[] args);
    public sealed virtual void NavigateTo(Type pageType, bool animated, Object[] args);
    public sealed virtual void NavigateTo(bool animated, Object[] args);
    public sealed virtual void GoBack();
    public sealed virtual void GoForward();
}
public class XLabs.Forms.Services.NavigationServiceV2 : object {
    [CompilerGeneratedAttribute]
private INavigation <NativeNavigation>k__BackingField;
    public INavigation NativeNavigation { get; internal set; }
    public IReadOnlyList`1<Page> NavigationStack { get; }
    public IReadOnlyList`1<Page> ModalStack { get; }
    internal NavigationServiceV2(INavigation navigation);
    internal NavigationServiceV2(Page page);
    [CompilerGeneratedAttribute]
public INavigation get_NativeNavigation();
    [CompilerGeneratedAttribute]
internal void set_NativeNavigation(INavigation value);
    public static void Init(Page page, IDependencyContainer container);
    public static void Init(INavigation navigation, IDependencyContainer container);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<NavigateToAsync>d__9`1")]
public sealed virtual Task NavigateToAsync(INavigationOptions options);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<NavigateToAsync>d__10`2")]
public sealed virtual Task NavigateToAsync(INavigationOptions options);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<NavigateToAsync>d__11`2")]
public sealed virtual Task NavigateToAsync(bool animated);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<NavigateToAsync>d__12`2")]
public sealed virtual Task NavigateToAsync(TViewModel viewModel, bool animated);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<NavigateToAsync>d__13`2")]
public sealed virtual Task NavigateToAsync(TView view, TViewModel viewModel, bool animated);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<NavigateToAsync>d__14`1")]
public sealed virtual Task NavigateToAsync(TView view, INavigationOptions options);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<RaiseOnNavigateToAsync>d__15`2")]
private Task RaiseOnNavigateToAsync(TView viewFrom, TView viewTo, TViewModel vm);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<RaiseOnNavigateFromAsync>d__16`2")]
private Task RaiseOnNavigateFromAsync(TView viewFrom, TView viewTo, TViewModel vm);
    public sealed virtual void RemovePage(Page page);
    public sealed virtual void InsertPageBefore(Page page, Page before);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PushAsync>d__19")]
public sealed virtual Task PushAsync(Page page);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PopAsync>d__20")]
public sealed virtual Task`1<Page> PopAsync();
    public sealed virtual Task PopToRootAsync();
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PushModalAsync>d__22")]
public sealed virtual Task PushModalAsync(Page page);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PopModalAsync>d__23")]
public sealed virtual Task`1<Page> PopModalAsync();
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PushAsync>d__24")]
public sealed virtual Task PushAsync(Page page, bool animated);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PopAsync>d__25")]
public sealed virtual Task`1<Page> PopAsync(bool animated);
    public sealed virtual Task PopToRootAsync(bool animated);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PushModalAsync>d__27")]
public sealed virtual Task PushModalAsync(Page page, bool animated);
    [AsyncStateMachineAttribute("XLabs.Forms.Services.NavigationServiceV2/<PopModalAsync>d__28")]
public sealed virtual Task`1<Page> PopModalAsync(bool animated);
    public sealed virtual IReadOnlyList`1<Page> get_NavigationStack();
    public sealed virtual IReadOnlyList`1<Page> get_ModalStack();
}
public class XLabs.Forms.Validation.Action : BindableObject {
    public static BindableProperty SettersProperty;
    public static BindableProperty ElementProperty;
    public static BindableProperty InvalidValueProperty;
    public static BindableProperty PropertyProperty;
    public static BindableProperty ValidValueProperty;
    private static Dictionary`2<Type, TypeConverter> Converters;
    private PropertyInfo _pi;
    public PropertySetters Setters { get; public set; }
    public BindableObject Element { get; public set; }
    public object InvalidValue { get; public set; }
    public string Property { get; public set; }
    public object ValidValue { get; public set; }
    protected PropertyInfo PropertyInfo { get; }
    private static Action();
    public PropertySetters get_Setters();
    public void set_Setters(PropertySetters value);
    public BindableObject get_Element();
    public void set_Element(BindableObject value);
    public object get_InvalidValue();
    public void set_InvalidValue(object value);
    public string get_Property();
    public void set_Property(string value);
    public object get_ValidValue();
    public void set_ValidValue(object value);
    protected virtual PropertyInfo get_PropertyInfo();
    internal void ApplyResult(bool result, BindableObject sourceElement);
    private static void AppplyValueToProperty(BindableObject target, PropertyInfo info, object value);
    private static object TryConvert(object value, Type targetType);
    private PropertyInfo GetPropertyInfo(string property, Type type);
}
public class XLabs.Forms.Validation.Actions : ObservableCollection`1<Action> {
}
internal enum XLabs.Forms.Validation.PredicatePriority : Enum {
    public int value__;
    public static PredicatePriority High;
    public static PredicatePriority Medium;
    public static PredicatePriority Low;
    public static PredicatePriority User;
}
public class XLabs.Forms.Validation.PropertySetter : BindableObject {
    public BindableProperty PropertyProperty;
    public BindableProperty ValidValueProperty;
    public BindableProperty InvalidValueProperty;
    public string Property { get; public set; }
    public string ValidValue { get; public set; }
    public string InvalidValue { get; public set; }
    public string get_Property();
    public void set_Property(string value);
    public string get_ValidValue();
    public void set_ValidValue(string value);
    public string get_InvalidValue();
    public void set_InvalidValue(string value);
}
public class XLabs.Forms.Validation.PropertySetters : ObservableCollection`1<PropertySetter> {
}
public class XLabs.Forms.Validation.Rule : BindableObject {
    public static BindableProperty UserDefinedProperty;
    public static BindableProperty ActionsProperty;
    public static BindableProperty CallbackProperty;
    public static BindableProperty ElementProperty;
    public static BindableProperty MaximumLengthProperty;
    public static BindableProperty MaximumProperty;
    public static BindableProperty MinimumLengthProperty;
    public static BindableProperty MinimumProperty;
    public static BindableProperty PropertyProperty;
    public static BindableProperty RegexProperty;
    public static BindableProperty ResultCallbackProperty;
    public static BindableProperty RuleNameProperty;
    public static BindableProperty ValidatorsProperty;
    private static List`1<UserValidator> UserValidatorPredicates;
    private static ValidatorPredicate[] AvailablePredicates;
    private List`1<Func`3<Rule, string, bool>> _predicates;
    private PropertyInfo _pi;
    [CompilerGeneratedAttribute]
private RuleSet <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LastResult>k__BackingField;
    public string UserDefined { get; public set; }
    public Actions Actions { get; public set; }
    public Predicate`1<string> Callback { get; public set; }
    public BindableObject Element { get; public set; }
    public double Maximum { get; public set; }
    public int MaximumLength { get; public set; }
    public double Minimum { get; public set; }
    public int MinimumLength { get; public set; }
    public string Property { get; public set; }
    public string Regex { get; public set; }
    public Action`3<BindableObject, string, RuleResult> ResultCallback { get; public set; }
    public string RuleName { get; public set; }
    public Validators Validators { get; public set; }
    protected PropertyInfo PropertyInfo { get; }
    private RuleSet Host { get; private set; }
    internal Nullable`1<bool> LastResult { get; internal set; }
    private static Rule();
    public string get_UserDefined();
    public void set_UserDefined(string value);
    public Actions get_Actions();
    public void set_Actions(Actions value);
    public Predicate`1<string> get_Callback();
    public void set_Callback(Predicate`1<string> value);
    public BindableObject get_Element();
    public void set_Element(BindableObject value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public int get_MaximumLength();
    public void set_MaximumLength(int value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public int get_MinimumLength();
    public void set_MinimumLength(int value);
    public string get_Property();
    public void set_Property(string value);
    public string get_Regex();
    public void set_Regex(string value);
    public Action`3<BindableObject, string, RuleResult> get_ResultCallback();
    public void set_ResultCallback(Action`3<BindableObject, string, RuleResult> value);
    public string get_RuleName();
    public void set_RuleName(string value);
    public Validators get_Validators();
    public void set_Validators(Validators value);
    protected virtual PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
private RuleSet get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(RuleSet value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_LastResult();
    [CompilerGeneratedAttribute]
internal void set_LastResult(Nullable`1<bool> value);
    public static void AddValidator(string name, Func`3<Rule, string, bool> predicate);
    internal void Connect(RuleSet vs);
    internal void Disconnect();
    internal RuleResult IsSatisfied();
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <get_PropertyInfo>b__58_0(PropertyInfo x);
    [CompilerGeneratedAttribute]
private bool <Connect>b__68_0(ValidatorPredicate x);
    [CompilerGeneratedAttribute]
private bool <Connect>b__68_1(UserValidator x);
}
public enum XLabs.Forms.Validation.RuleResult : Enum {
    public int value__;
    public static RuleResult Unknown;
    public static RuleResult ValidationSuccess;
    public static RuleResult ValidationFailure;
    public static RuleResult ValidationNoChange;
}
public class XLabs.Forms.Validation.Rules : ObservableCollection`1<Rule> {
}
public class XLabs.Forms.Validation.RuleSet : BindableObject {
    public static BindableProperty ActionsProperty;
    public static BindableProperty IsValidProperty;
    public static BindableProperty RulesProperty;
    public Actions Actions { get; public set; }
    public bool IsValid { get; public set; }
    public Rules Rules { get; public set; }
    private static RuleSet();
    public Actions get_Actions();
    public void set_Actions(Actions value);
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public Rules get_Rules();
    public void set_Rules(Rules value);
    internal void CheckState();
    private void RulesChanged(ObservableCollection`1<Rule> oldvalue, ObservableCollection`1<Rule> newvalue);
    private void RulesCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
}
internal class XLabs.Forms.Validation.UserValidator : ValidatorPredicate {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public string UserName { get; public set; }
    public UserValidator(Validators id, PredicatePriority priority, Func`3<Rule, string, bool> eval);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
}
internal class XLabs.Forms.Validation.ValidateAlphaNumeric : ValidatorPredicate {
    private static Regex AlphaNumeric;
    private static ValidateAlphaNumeric();
    private static bool IsAlphaNumeric(Rule rule, string value);
}
internal class XLabs.Forms.Validation.ValidateAlphaOnly : ValidatorPredicate {
    private static Regex AlphaOnly;
    private static ValidateAlphaOnly();
    private static bool IsAlphaOnly(Rule rule, string value);
}
internal class XLabs.Forms.Validation.ValidateDateTime : ValidatorPredicate {
    private static Regex LongDate;
    private static Regex ShortDate;
    private static ValidateDateTime();
    private static bool IsDateTime(Rule rule, string value);
}
internal class XLabs.Forms.Validation.ValidateEmailAddress : ValidatorPredicate {
    private static Regex EmailAddress;
    private static ValidateEmailAddress();
    private static bool IsEmailAddress(Rule rule, string value);
}
internal class XLabs.Forms.Validation.ValidateNumericOnly : ValidatorPredicate {
    private static Regex Numeric;
    private static ValidateNumericOnly();
    private static bool IsAlphaNumeric(Rule rule, string value);
}
public class XLabs.Forms.Validation.ValidationSets : ObservableCollection`1<RuleSet> {
}
public class XLabs.Forms.Validation.Validator : BindableObject {
    public static BindableProperty SetsProperty;
    public ValidationSets Sets { get; public set; }
    private static Validator();
    public ValidationSets get_Sets();
    public void set_Sets(ValidationSets value);
}
internal class XLabs.Forms.Validation.ValidatorPredicate : object {
    private Func`3<Rule, string, bool> _evaluator;
    private Validators _id;
    [CompilerGeneratedAttribute]
private PredicatePriority <Priority>k__BackingField;
    public Func`3<Rule, string, bool> Predicate { get; }
    public Validators ValidatorType { get; }
    public PredicatePriority Priority { get; private set; }
    public ValidatorPredicate(Validators id, PredicatePriority priority, Func`3<Rule, string, bool> eval);
    public Func`3<Rule, string, bool> get_Predicate();
    public Validators get_ValidatorType();
    [CompilerGeneratedAttribute]
public PredicatePriority get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(PredicatePriority value);
    public bool IsA(Validators identifier);
}
[FlagsAttribute]
public enum XLabs.Forms.Validation.Validators : Enum {
    public ulong value__;
    public static Validators None;
    public static Validators Required;
    public static Validators Email;
    public static Validators GreaterThan;
    public static Validators LessThan;
    public static Validators Pattern;
    public static Validators Between;
    public static Validators Predicate;
    public static Validators DateTime;
    public static Validators Numeric;
    public static Validators Integer;
    public static Validators MinLength;
    public static Validators MaxLength;
    public static Validators AlphaOnly;
    public static Validators AlphaNumeric;
    public static Validators NumericOnly;
    public static Validators UserSupplied;
}
[ExtensionAttribute]
public static class XLabs.Forms.ViewExtensions : object {
    private static Nullable`1<double> _widthInInches;
    private static Nullable`1<double> _heightInInches;
    private static IDisplay Display { get; }
    private static double WidthInInches { get; }
    private static double HeightInInches { get; }
    private static IDisplay get_Display();
    private static double get_WidthInInches();
    private static double get_HeightInInches();
    [ExtensionAttribute]
public static double GetWidthRequestInInches(View view);
    [ExtensionAttribute]
public static void SetWidthRequestInInches(View view, double inches);
    [ExtensionAttribute]
public static double GetHeightRequestInInches(View view);
    [ExtensionAttribute]
public static void SetHeightRequestInInches(View view, double inches);
}
