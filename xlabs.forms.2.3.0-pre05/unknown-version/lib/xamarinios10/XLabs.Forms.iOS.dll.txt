public class XLabs.Forms.Controls.AccessoryViewCellRenderer : ExtendedTextCellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
}
public class XLabs.Forms.Controls.BindablePickerRenderer : ViewRenderer`2<BindablePicker, UITextField> {
    private UIPickerView _picker;
    private UIPopoverController _popOver;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<BindablePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void RowsCollectionChanged(object sender, EventArgs e);
    private void HandleValueChanged(object sender, EventArgs e);
    private void UpdatePicker();
    private void SetBorder(BindablePicker view);
    [CompilerGeneratedAttribute]
private void <OnStarted>b__6_0(object s, EventArgs e);
}
public class XLabs.Forms.Controls.CalendarArrowView : UIButton {
    private ArrowDirection _arrowDirection;
    private UIColor _color;
    public ArrowDirection Direction { get; public set; }
    unknown UIColor Color {public set; }
    public CalendarArrowView(CGRect frame);
    public ArrowDirection get_Direction();
    public void set_Direction(ArrowDirection value);
    public void set_Color(UIColor value);
    public virtual void Draw(CGRect rect);
    private UIImage GenerateImageForButton(CGRect rect);
}
public class XLabs.Forms.Controls.CalendarDayView : UIView {
    private static NSMutableParagraphStyle paragraphStyle;
    private string _text;
    private UIColor _oldBackgorundColor;
    private bool _active;
    private bool _today;
    private bool _selected;
    private bool _marked;
    private bool _available;
    private bool _highlighted;
    private CalendarMonthView _mv;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    public bool Available { get; public set; }
    public string Text { get; public set; }
    public bool Active { get; public set; }
    public bool Today { get; public set; }
    public bool Selected { get; public set; }
    public bool Marked { get; public set; }
    public bool Highlighted { get; public set; }
    public DateTime Date { get; public set; }
    public CalendarDayView(CalendarMonthView mv);
    public bool get_Available();
    public void set_Available(bool value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_Active();
    public void set_Active(bool value);
    public bool get_Today();
    public void set_Today(bool value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public bool get_Marked();
    public void set_Marked(bool value);
    public bool get_Highlighted();
    public void set_Highlighted(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    public virtual void Draw(CGRect rect);
    private void DrawDateString(NSString dateString, UIColor color, CGRect rect);
}
public class XLabs.Forms.Controls.CalendarMonthView : UIView {
    private bool _calendarIsLoaded;
    private CalendarArrowView _leftArrow;
    private Nullable`1<DateTime> _maxDateTime;
    private Nullable`1<DateTime> _minDateTime;
    private MonthGridView _monthGridView;
    private CalendarArrowView _rightArrow;
    private UIScrollView _scrollView;
    private int _headerHeight;
    private bool _showHeader;
    private bool _showNavArrows;
    public int BoxHeight;
    public int BoxWidth;
    public DateTime CurrentMonthYear;
    public DateTime CurrentSelectedDate;
    public Func`2<DateTime, bool> IsDateAvailable;
    public Func`2<DateTime, bool> IsDayMarkedDelegate;
    public Action`1<DateTime> MonthChanged;
    public Action`1<DateTime> OnDateSelected;
    public Action`1<DateTime> OnFinishedDateSelection;
    public Action SwipedUp;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, bool> <HighlightedDaysOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentDate>k__BackingField;
    [CompilerGeneratedAttribute]
private StyleDescriptor <StyleDescriptor>k__BackingField;
    public Dictionary`2<int, bool> HighlightedDaysOfWeek { get; private set; }
    protected DateTime CurrentDate { get; protected set; }
    public StyleDescriptor StyleDescriptor { get; private set; }
    public CalendarMonthView(DateTime selectedDate, bool showHeader, bool showNavArrows, float width);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, bool> get_HighlightedDaysOfWeek();
    [CompilerGeneratedAttribute]
private void set_HighlightedDaysOfWeek(Dictionary`2<int, bool> value);
    [CompilerGeneratedAttribute]
protected DateTime get_CurrentDate();
    [CompilerGeneratedAttribute]
protected void set_CurrentDate(DateTime value);
    [CompilerGeneratedAttribute]
public StyleDescriptor get_StyleDescriptor();
    [CompilerGeneratedAttribute]
private void set_StyleDescriptor(StyleDescriptor value);
    public virtual void Draw(CGRect rect);
    public void SetDate(DateTime newDate, bool animated);
    public void SetMaxAllowedDate(Nullable`1<DateTime> maxDate);
    public void SetMinAllowedDate(Nullable`1<DateTime> minDate);
    public void HighlightDaysOfWeeks(DayOfWeek[] daysOfWeeks);
    public void SetDisplayedMonthYear(DateTime newDate, bool animated);
    public virtual void SetNeedsDisplay();
    public virtual void LayoutSubviews();
    public void DeselectDate();
    public void MoveCalendarMonths(bool right, bool animated);
    public void RebuildGrid(bool right, bool animated);
    private void LoadNavArrows();
    private void HandlePreviousMonthTouch(object sender, EventArgs e);
    private void HandleNextMonthTouch(object sender, EventArgs e);
    private void SetNavigationArrows(bool animated);
    private void MonthViewSwipedUp(UISwipeGestureRecognizer ges);
    private void MonthViewSwipedRight(UISwipeGestureRecognizer ges);
    private void MonthViewSwipedLeft(UISwipeGestureRecognizer ges);
    private MonthGridView CreateNewGrid(DateTime date);
    private void LoadInitialGrids();
    private void DrawMonthLabel(CGRect rect);
    private void DrawDayLabels(CGRect rect);
    private static void DrawCenteredString(NSString text, UIColor color, CGRect rect, UIFont font);
}
public class XLabs.Forms.Controls.CalendarViewRenderer : ViewRenderer`2<CalendarView, CalendarMonthView> {
    private object elementLock;
    private bool isElementChanging;
    private bool disposed;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CalendarView> e);
    private void MonthChanged(DateTime dateTime);
    private void OnDateSelected(DateTime dateTime);
    private void ProtectFromEventCycle(Action action);
    private void SetFonts();
    private void SetColors();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("CameraPreview")]
public class XLabs.Forms.Controls.CameraPreview : UIView {
    private AVCaptureVideoPreviewLayer _previewLayer;
    public CameraPreview(CGRect bounds);
    public virtual void Draw(CGRect rect);
    private void Initialize();
}
public class XLabs.Forms.Controls.CameraViewRenderer : ViewRenderer`2<CameraView, CameraPreview> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CameraView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class XLabs.Forms.Controls.CheckBoxCellRenderer : ExtendedTextCellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
}
public class XLabs.Forms.Controls.CheckBoxRenderer : ViewRenderer`2<CheckBox, CheckBoxView> {
    private UIColor defaultTextColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CheckBox> e);
    private void ResizeText();
    public virtual void Draw(CGRect rect);
    private void UpdateFont();
    private void UpdateTextColor();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__1_0(object s, EventArgs args);
}
[RegisterAttribute("CheckBoxView")]
public class XLabs.Forms.Controls.CheckBoxView : UIButton {
    unknown string CheckedTitle {public set; }
    unknown string UncheckedTitle {public set; }
    public bool Checked { get; public set; }
    public CheckBoxView(CGRect bounds);
    public void set_CheckedTitle(string value);
    public void set_UncheckedTitle(string value);
    public void set_Checked(bool value);
    public bool get_Checked();
    private void Initialize();
    private void AdjustEdgeInsets();
    private void ApplyStyle();
    [CompilerGeneratedAttribute]
private void <Initialize>b__9_0(object sender, EventArgs args);
}
public class XLabs.Forms.Controls.CircleImageRenderer : ImageRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void DrawOther();
    private void DrawFill();
    private int MakeSquare(int height, Int32& width);
}
public class XLabs.Forms.Controls.DateSelected : MulticastDelegate {
    public DateSelected(object object, IntPtr method);
    public virtual void Invoke(DateTime date);
    public virtual IAsyncResult BeginInvoke(DateTime date, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.DragContentViewRenderer : ViewRenderer`2<DragContentView, UIView> {
    private UIView touchedView;
    private View touchedElement;
    private CGPoint offsetLocation;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DragContentView> e);
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesCancelled(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    public virtual void TouchesMoved(NSSet touches, UIEvent evt);
    private static View GetMovedElement(object nativeView, View view);
    private static string GetAccessibilityId(object view);
}
public class XLabs.Forms.Controls.DynamicUITableViewRenderer`1 : ViewRenderer`2<DynamicListView`1<T>, UITableView> {
    private static float DEFAULT_ROW_HEIGHT;
    private TableViewDelegate<T> _tableDelegate;
    private TableDataSource<T> _dataSource;
    private UITableView _tableView;
    private TableDataSource<T> DataSource { get; }
    private TableViewDelegate<T> TableDelegate { get; }
    private TableDataSource<T> get_DataSource();
    private TableViewDelegate<T> get_TableDelegate();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<DynamicListView`1<T>> e);
    private void Unbind(DynamicListView`1<T> oldElement);
    private void Bind(DynamicListView`1<T> newElement);
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void DataCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    protected virtual UITableViewCell GetCell(UITableView tableView, T item);
    public int RowsInSection(UITableView tableView, nint section);
    public void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual float GetHeightForRow(UITableView tableView, NSIndexPath indexPath);
    protected virtual float GetHeightForRow(UITableView tableView, T item);
}
public class XLabs.Forms.Controls.EditableListViewRenderer`1 : ViewRenderer`2<EditableListView`1<T>, UITableView> {
    protected float RowHeight;
    private EditableListViewSource<T> _editableListViewSource;
    private UITableView _tableView;
    private bool disposed;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<EditableListView`1<T>> e);
    private void Unbind(EditableListView`1<T> oldElement);
    private void Bind(EditableListView`1<T> newElement);
    private void DataCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
}
public class XLabs.Forms.Controls.ExtendedButtonRenderer : ButtonRenderer {
    public ExtendedButton Element { get; }
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public ExtendedButton get_Element();
}
public class XLabs.Forms.Controls.ExtendedDatePickerRenderer : ViewRenderer`2<ExtendedDatePicker, UITextField> {
    private UIDatePicker _picker;
    private UIPopoverController _popOver;
    private void SetBorder(ExtendedDatePicker view);
    private void HandleValueChanged(object sender, EventArgs e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ExtendedDatePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void UpdateDateFromModel(bool animate);
    private void UpdateMaximumDate();
    private void UpdateMinimumDate();
    [CompilerGeneratedAttribute]
private void <OnStarted>b__8_0(object s, EventArgs e);
}
public class XLabs.Forms.Controls.ExtendedEditorRenderer : EditorRenderer {
    private UISwipeGestureRecognizer _leftSwipeGestureRecognizer;
    private UISwipeGestureRecognizer _rightSwipeGestureRecognizer;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
}
public class XLabs.Forms.Controls.ExtendedEntryCellRenderer : EntryCellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
}
public class XLabs.Forms.Controls.ExtendedEntryRenderer : EntryRenderer {
    private UISwipeGestureRecognizer _leftSwipeGestureRecognizer;
    private UISwipeGestureRecognizer _rightSwipeGestureRecognizer;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Entry> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetTextAlignment(ExtendedEntry view);
    private void SetFont(ExtendedEntry view);
    private void SetBorder(ExtendedEntry view);
    private void SetMaxLength(ExtendedEntry view);
    private void ResizeHeight();
    private void SetPlaceholderTextColor(ExtendedEntry view);
}
public class XLabs.Forms.Controls.ExtendedLabelRenderer : LabelRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateUi(ExtendedLabel view);
    private void SetPlaceholder(ExtendedLabel view);
}
public class XLabs.Forms.Controls.ExtendedScrollViewRenderer : ScrollViewRenderer {
    private double _epsilon;
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    protected void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_0(object sender, EventArgs ev);
}
public class XLabs.Forms.Controls.ExtendedSwitchRenderer : ViewRenderer`2<ExtendedSwitch, UISwitch> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ExtendedSwitch> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void SetTintColor(UIColor color);
    private void ElementToggled(object sender, ToggledEventArgs e);
    private void ControlValueChanged(object sender, EventArgs e);
}
public class XLabs.Forms.Controls.ExtendedTabbedPageRenderer : TabbedRenderer {
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    public virtual void ViewDidLoad();
    public virtual void ViewWillAppear(bool animated);
}
public class XLabs.Forms.Controls.ExtendedTableViewRenderer : TableViewRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TableView> e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_0(object sender, EventArgs args);
}
public class XLabs.Forms.Controls.ExtendedTextCellRenderer : TextCellRenderer {
    private static Color DefaultDetailColor;
    private static Color DefaultTextColor;
    private static ExtendedTextCellRenderer();
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
}
public class XLabs.Forms.Controls.ExtendedTimePickerRenderer : ViewRenderer`2<ExtendedTimePicker, UITextField> {
    private UIDatePicker _picker;
    private UIPopoverController _popOver;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ExtendedTimePicker> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnEnded(object sender, EventArgs eventArgs);
    private void OnStarted(object sender, EventArgs eventArgs);
    private void UpdateTime();
    private void SetBorder();
    private void UpdateTimeConstraints();
    private void HandleValueChanged(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <OnStarted>b__5_0(object s, EventArgs e);
}
public class XLabs.Forms.Controls.ExtendedViewCellRenderer : ViewCellRenderer {
    public virtual UITableViewCell GetCell(Cell item, UITableViewCell reusableCell, UITableView tv);
}
public class XLabs.Forms.Controls.GesturesContentViewRenderer : ViewRenderer`2<GesturesContentView, UIView> {
    private static UISwipeGestureRecognizerDirection AllDirections;
    private List`1<UIGestureRecognizer> _recognizers;
    private Point _swipeStart;
    private void SwipeRecognizer(UISwipeGestureRecognizer x);
    private List`1<View> ViewsContaining(Point pt);
    private IEnumerable`1<View> ViewsContainingImpl(Point pt, List`1<View> views, UIView root);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<GesturesContentView> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(UITapGestureRecognizer x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(UITapGestureRecognizer x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2(UILongPressGestureRecognizer x);
}
internal class XLabs.Forms.Controls.GradientContentViewRenderer : VisualElementRenderer`1<ContentView> {
    [CompilerGeneratedAttribute]
private CAGradientLayer <GradientLayer>k__BackingField;
    private GradientContentView GradientContentView { get; }
    protected CAGradientLayer GradientLayer { get; protected set; }
    private GradientContentView get_GradientContentView();
    [CompilerGeneratedAttribute]
protected CAGradientLayer get_GradientLayer();
    [CompilerGeneratedAttribute]
protected void set_GradientLayer(CAGradientLayer value);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ContentView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetOrientation();
}
public class XLabs.Forms.Controls.GridCollectionView : UICollectionView {
    [CompilerGeneratedAttribute]
private bool <SelectionEnable>k__BackingField;
    public bool SelectionEnable { get; public set; }
    public double RowSpacing { get; public set; }
    public double ColumnSpacing { get; public set; }
    public CGSize ItemSize { get; public set; }
    public GridCollectionView(CGRect frm);
    [CompilerGeneratedAttribute]
public bool get_SelectionEnable();
    [CompilerGeneratedAttribute]
public void set_SelectionEnable(bool value);
    public double get_RowSpacing();
    public void set_RowSpacing(double value);
    public double get_ColumnSpacing();
    public void set_ColumnSpacing(double value);
    public CGSize get_ItemSize();
    public void set_ItemSize(CGSize value);
    public virtual UICollectionViewCell CellForItem(NSIndexPath indexPath);
    public virtual void Draw(CGRect rect);
    public virtual CGSize SizeThatFits(CGSize size);
}
public class XLabs.Forms.Controls.GridDataSource : UICollectionViewSource {
    private OnGetCell _onGetCell;
    private OnRowsInSection _onRowsInSection;
    private OnItemSelected _onItemSelected;
    public GridDataSource(OnGetCell onGetCell, OnRowsInSection onRowsInSection, OnItemSelected onItemSelected);
    public virtual nint GetItemsCount(UICollectionView collectionView, nint section);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
}
public class XLabs.Forms.Controls.GridItemSelectedViewOverlay : UIView {
    public GridItemSelectedViewOverlay(CGRect frame);
    public virtual void Draw(CGRect rect);
}
public class XLabs.Forms.Controls.GridViewCell : UICollectionViewCell {
    public static string Key;
    private ViewCell _viewCell;
    private UIView _view;
    public ViewCell ViewCell { get; public set; }
    [ExportAttribute("initWithFrame:")]
public GridViewCell(CGRect frame);
    public virtual void LayoutSubviews();
    public ViewCell get_ViewCell();
    public void set_ViewCell(ViewCell value);
    private void UpdateCell(ViewCell cell);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateView();
}
public class XLabs.Forms.Controls.GridViewDelegate : UICollectionViewDelegate {
    private OnItemSelected _onItemSelected;
    public GridViewDelegate(OnItemSelected onItemSelected);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemHighlighted(UICollectionView collectionView, NSIndexPath indexPath);
}
public class XLabs.Forms.Controls.GridViewRenderer : ViewRenderer`2<GridView, GridCollectionView> {
    private GridDataSource _dataSource;
    private GridDataSource DataSource { get; }
    public int RowsInSection(UICollectionView collectionView, nint section);
    public void ItemSelected(UICollectionView tableView, NSIndexPath indexPath);
    public UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    protected virtual UICollectionViewCell GetCell(UICollectionView collectionView, ViewCell item, NSIndexPath indexPath);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<GridView> e);
    private void Unbind(GridView oldElement);
    private void Bind(GridView newElement);
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void DataCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private GridDataSource get_DataSource();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <DataCollectionChanged>b__11_0();
}
public class XLabs.Forms.Controls.Helpers : object {
    public static bool IsValidUrl(string urlString);
    public static UIImage LoadFromUrl(string uri);
}
public class XLabs.Forms.Controls.HybridWebViewRenderer : ViewRenderer`2<HybridWebView, WKWebView> {
    private UISwipeGestureRecognizer _leftSwipeGestureRecognizer;
    private UISwipeGestureRecognizer _rightSwipeGestureRecognizer;
    private WKUserContentController _userController;
    private static string NativeFuncCall;
    private static string NativeFunction;
    private static string FuncFormat;
    private static Regex FuncExpression;
    private static HybridWebViewRenderer();
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    [ExportAttribute("webView:didFinishNavigation:")]
public void DidFinishNavigation(WKWebView webView, WKNavigation navigation);
    [ExportAttribute("webView:didStartProvisionalNavigation:")]
public void DidStartProvisionalNavigation(WKWebView webView, WKNavigation navigation);
    public virtual void LayoutSubviews();
    public sealed virtual void DidReceiveScriptMessage(WKUserContentController userContentController, WKScriptMessage message);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<HybridWebView> e);
    public static void CopyBundleDirectory(string path);
    private static string GetTempDirectory();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private string GetFuncScript();
    private void Bind();
    private void LoadSource();
    private void Unbind(HybridWebView oldElement);
    private void OnInjectRequest(object sender, string script);
    private void Inject(string script);
    private void Load(Uri uri);
    private void LoadFromContent(object sender, LoadContentEventArgs contentArgs);
    private void LoadContent(object sender, LoadContentEventArgs contentArgs);
    private void LoadFromString(string html);
    private void HandleCleanup();
    private void TryInvoke(string function, string data);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__8_0();
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__8_1();
}
public class XLabs.Forms.Controls.HyperLinkLabelRenderer : LabelRenderer {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    private string GetNavigationUri(string uri);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__0_0();
}
public class XLabs.Forms.Controls.IconButtonRenderer : ButtonRenderer {
    private IconButton IconButton { get; }
    private IconButton get_IconButton();
    private static void SetText(IconButton iconButton, UIButton targetButton);
    private static UIFont GetButtonFont(IconButton iconButton, UIButton targetButton);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class XLabs.Forms.Controls.IconLabelRenderer : LabelRenderer {
    private IconLabel _iconLabel;
    private UILabel _nativeLabel;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetText(IconLabel iconLabel, UILabel targetLabel);
    private UIFont GetButtonFont(IconLabel iconLabel, UILabel targetLabel, nfloat fontSize);
}
public class XLabs.Forms.Controls.ImageButtonRenderer : ButtonRenderer {
    private static int CONTROL_PADDING;
    private static string IPAD;
    private ImageButton ImageButton { get; }
    private ImageButton get_ImageButton();
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<OnElementChanged>d__4")]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Button> e);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<OnElementPropertyChanged>d__5")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<SetupImages>d__6")]
private Task SetupImages(ImageButton imageButton, UIButton targetButton, int width, int height);
    private static void AlignToLeft(UIButton targetButton);
    private static void AlignToRight(int widthRequest, UIButton targetButton);
    private static void AlignToTop(int heightRequest, int widthRequest, UIButton targetButton, double buttonWidthRequest);
    private static void AlignToBottom(int heightRequest, int widthRequest, UIButton targetButton);
    [AsyncStateMachineAttribute("XLabs.Forms.Controls.ImageButtonRenderer/<SetImageAsync>d__11")]
private static Task SetImageAsync(ImageSource source, int widthRequest, int heightRequest, UIButton targetButton, UIControlState state, UIColor tintColor);
    public virtual void LayoutSubviews();
    private static IImageSourceHandler GetHandler(ImageSource source);
    private int GetWidth(int requestedWidth);
    private int GetHeight(int requestedHeight);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ElementChangedEventArgs`1<Button> e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(object sender, PropertyChangedEventArgs e);
}
public class XLabs.Forms.Controls.ImageGalleryRenderer : ViewRenderer`2<ImageGallery, ImageGalleryView> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ImageGallery> e);
    private void Bind(ImageGallery newElement);
    private void ElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ElementPropertyChanging(object sender, PropertyChangingEventArgs e);
}
public class XLabs.Forms.Controls.ImageGalleryView : UIView {
    private UIPageControl _pageControl;
    private UIScrollView _scroller;
    [CompilerGeneratedAttribute]
private bool <FadeImages>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Images>k__BackingField;
    public bool FadeImages { get; public set; }
    public ObservableCollection`1<string> Images { get; public set; }
    public ImageGalleryView(ObservableCollection`1<string> images);
    public ImageGalleryView(CGRect frame, ObservableCollection`1<string> images);
    [CompilerGeneratedAttribute]
public bool get_FadeImages();
    [CompilerGeneratedAttribute]
public void set_FadeImages(bool value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<string> get_Images();
    [CompilerGeneratedAttribute]
public void set_Images(ObservableCollection`1<string> value);
    protected virtual void Dispose(bool disposing);
    public virtual void Draw(CGRect rect);
    private void AddImage(CGRect rect, nint position, string im);
    private Task LoadImageAsync(nint position, string url);
    private void ScrollChanged(object sender, EventArgs e);
    private void HandleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void SetImage(UIImageView imgView, UIImage img);
    private void UpdateScrollPositionBasedOnPageControl();
    private void FadeImageViewIn(UIImageView imgView, UIImage img);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(object sender, EventArgs e);
}
public class XLabs.Forms.Controls.MonthChanged : MulticastDelegate {
    public MonthChanged(object object, IntPtr method);
    public virtual void Invoke(DateTime monthSelected);
    public virtual IAsyncResult BeginInvoke(DateTime monthSelected, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class XLabs.Forms.Controls.MonthGridView : UIView {
    private CalendarMonthView _calendarMonthView;
    [CompilerGeneratedAttribute]
private DateTime <CurrentDate>k__BackingField;
    private DateTime _currentMonth;
    protected IList`1<CalendarDayView> DayTiles;
    [CompilerGeneratedAttribute]
private int <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private CalendarDayView <SelectedDayView>k__BackingField;
    public int WeekdayOfFirst;
    [CompilerGeneratedAttribute]
private IList`1<DateTime> <Marks>k__BackingField;
    public DateTime CurrentDate { get; public set; }
    public int Lines { get; public set; }
    protected CalendarDayView SelectedDayView { get; protected set; }
    public IList`1<DateTime> Marks { get; public set; }
    public MonthGridView(CalendarMonthView calendarMonthView, DateTime month);
    [CompilerGeneratedAttribute]
public DateTime get_CurrentDate();
    [CompilerGeneratedAttribute]
public void set_CurrentDate(DateTime value);
    [CompilerGeneratedAttribute]
public int get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(int value);
    [CompilerGeneratedAttribute]
protected CalendarDayView get_SelectedDayView();
    [CompilerGeneratedAttribute]
protected void set_SelectedDayView(CalendarDayView value);
    [CompilerGeneratedAttribute]
public IList`1<DateTime> get_Marks();
    [CompilerGeneratedAttribute]
public void set_Marks(IList`1<DateTime> value);
    private void PTapped(UITapGestureRecognizer tapRecg);
    public void Update();
    public void UpdateDayView(CalendarDayView dayView);
    public void BuildGrid();
    private bool SelectDayView(CGPoint p);
    public void DeselectDayView();
}
public class XLabs.Forms.Controls.NoCaretField : UITextField {
    public virtual CGRect GetCaretRectForPosition(UITextPosition position);
}
public class XLabs.Forms.Controls.RadioButtonRenderer : ViewRenderer`2<CustomRadioButton, RadioButtonView> {
    private UIColor _defaultTextColor;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<CustomRadioButton> e);
    private void ResizeText();
    public virtual void Draw(CGRect rect);
    private void UpdateFont();
    private void UpdateTextColor();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnElementChanged>b__1_0(object s, EventArgs args);
}
[RegisterAttribute("RadioButtonView")]
public class XLabs.Forms.Controls.RadioButtonView : UIButton {
    public bool Checked { get; public set; }
    unknown string Text {public set; }
    public RadioButtonView(CGRect bounds);
    public void set_Checked(bool value);
    public bool get_Checked();
    public void set_Text(string value);
    private void Initialize();
    private void AdjustEdgeInsets();
    private void ApplyStyle();
    [CompilerGeneratedAttribute]
private void <Initialize>b__7_0(object sender, EventArgs args);
}
public class XLabs.Forms.Controls.SegmentedControlViewRenderer : ViewRenderer`2<SegmentedControlView, UISegmentedControl> {
    protected virtual void Dispose(bool disposing);
    private void HandleControlValueChanged(object sender, EventArgs e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SegmentedControlView> e);
}
public class XLabs.Forms.Controls.SensorBarViewRenderer : ViewRenderer`2<SensorBarView, UISensorBar> {
    private UISensorBar _sensorBar;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SensorBarView> e);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetProperties();
}
public class XLabs.Forms.Controls.SeparatorRenderer : ViewRenderer`2<Separator, UISeparator> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Separator> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetProperties();
}
public class XLabs.Forms.Controls.StyleDescriptor : object {
    public UIColor BackgroundColor;
    public UIColor DateForegroundColor;
    public UIColor DateBackgroundColor;
    public UIColor InactiveDateForegroundColor;
    public UIColor InactiveDateBackgroundColor;
    public UIColor SelectedDateForegroundColor;
    public UIColor SelectedDateBackgroundColor;
    public UIColor TitleForegroundColor;
    public UIColor TitleBackgroundColor;
    public UIColor TodayForegroundColor;
    public UIColor TodayBackgroundColor;
    public UIColor DayOfWeekLabelForegroundColor;
    public UIColor DayOfWeekLabelBackgroundColor;
    public UIColor HighlightedDateForegroundColor;
    public UIColor HighlightedDateBackgroundColor;
    public UIColor DateSeparatorColor;
    public BackgroundStyle SelectionBackgroundStyle;
    public BackgroundStyle TodayBackgroundStyle;
    public UIFont DateLabelFont;
    public UIFont MonthTitleFont;
    public bool ShouldHighlightDaysOfWeekLabel;
}
[RegisterAttribute("SensorBarView")]
public class XLabs.Forms.Controls.UISensorBar : UIView {
    private UIColor _positiveColor;
    private UIColor _negativeColor;
    private double _limit;
    private double _currentValue;
    public double CurrentValue { get; public set; }
    public double Limit { get; public set; }
    public UIColor PositiveColor { get; public set; }
    public UIColor NegativeColor { get; public set; }
    public UISensorBar(CGRect bounds);
    public UISensorBar(IntPtr handle);
    public double get_CurrentValue();
    public void set_CurrentValue(double value);
    public double get_Limit();
    public void set_Limit(double value);
    public UIColor get_PositiveColor();
    public void set_PositiveColor(UIColor value);
    public UIColor get_NegativeColor();
    public void set_NegativeColor(UIColor value);
    public virtual void Draw(CGRect rect);
    private static void Initialize();
}
public class XLabs.Forms.Controls.UISeparator : UIView {
    private double _thickness;
    private double _spacingBefore;
    private double _spacingAfter;
    private UIColor _strokeColor;
    private StrokeType _strokeType;
    private SeparatorOrientation _orientation;
    public double Thickness { get; public set; }
    public double SpacingBefore { get; public set; }
    public double SpacingAfter { get; public set; }
    public UIColor StrokeColor { get; public set; }
    public StrokeType StrokeType { get; public set; }
    public SeparatorOrientation Orientation { get; public set; }
    public UISeparator(CGRect bounds);
    public UISeparator(IntPtr handle);
    public void set_Thickness(double value);
    public double get_Thickness();
    public void set_SpacingBefore(double value);
    public double get_SpacingBefore();
    public void set_SpacingAfter(double value);
    public double get_SpacingAfter();
    public void set_StrokeColor(UIColor value);
    public UIColor get_StrokeColor();
    public void set_StrokeType(StrokeType value);
    public StrokeType get_StrokeType();
    public void set_Orientation(SeparatorOrientation value);
    public SeparatorOrientation get_Orientation();
    private void Initialize();
    public virtual void Draw(CGRect rect);
}
public class XLabs.Forms.Controls.WebImageRenderer : ImageRenderer {
    private WebImage WebImage { get; }
    private WebImage get_WebImage();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Image> e);
    private UIImage GetImageFromWeb(string url);
}
[ExtensionAttribute]
public static class XLabs.Forms.Extensions.AlignmentExtensions : object {
    [ExtensionAttribute]
public static UIControlContentVerticalAlignment ToContentVerticalAlignment(TextAlignment alignment);
    [ExtensionAttribute]
public static UIControlContentHorizontalAlignment ToContentHorizontalAlignment(TextAlignment alignment);
}
[ExtensionAttribute]
public static class XLabs.Forms.Extensions.ColorExtensions : object {
    [ExtensionAttribute]
public static UIColor ToUIColorOrDefault(Color color, UIColor defaultColor);
}
[ExtensionAttribute]
public static class XLabs.Forms.Extensions.LabelExtensions : object {
    [ExtensionAttribute]
public static void AdjustHeight(Label label);
}
[ExtensionAttribute]
public static class XLabs.Forms.Extensions.UiImageExtensions : object {
    [AsyncStateMachineAttribute("XLabs.Forms.Extensions.UiImageExtensions/<AddText>d__0")]
[ExtensionAttribute]
public static Task`1<ImageSource> AddText(StreamImageSource source, string text, CGPoint point, Font font, Color color);
    [ExtensionAttribute]
public static UIImage AddText(UIImage image, string text, CGPoint point, UIFont font, UIColor color, UITextAlignment alignment);
}
public class XLabs.Forms.Pages.ExtendedPhoneMasterDetailPageRenderer : PhoneMasterDetailRenderer {
}
public class XLabs.Forms.Pages.ExtendedTabletMasterDetailPageRenderer : TabletMasterDetailRenderer {
    public static Func`1<bool> ShouldHideMenu;
    private static bool ShouldHide { get; }
    protected virtual void OnElementChanged(VisualElementChangedEventArgs e);
    private static bool get_ShouldHide();
}
public class XLabs.Forms.Services.FontManager : object {
    private IDisplay display;
    private static short InitialSize;
    public IEnumerable`1<string> AvailableFonts { get; }
    public FontManager(IDisplay display);
    public sealed virtual IEnumerable`1<string> get_AvailableFonts();
    public sealed virtual double GetHeight(Font font);
    public sealed virtual Font FindClosest(string name, double desiredHeight);
}
[ExtensionAttribute]
public static class XLabs.Forms.ViewExtensions : object {
    [ExtensionAttribute]
public static ObservableCollection`1<Element> GetInternalChildren(View view);
}
public class XLabs.Forms.XFormsAppiOS : XFormsApp`1<XFormsApplicationDelegate> {
    public XFormsAppiOS(XFormsApplicationDelegate appDelegate);
    public static void Init();
    protected virtual void OnInit(XFormsApplicationDelegate app, bool initServices);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_0(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_1(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_2(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnInit>b__3_3(object o, EventArgs e);
}
public class XLabs.Forms.XFormsApplicationDelegate : FormsApplicationDelegate {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <FinishedLaunchingEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <WillTerminateEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <OnActivatedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <DidEnterBackgroundEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <WillEnterForegroundEvent>k__BackingField;
    public EventHandler`1<EventArgs> FinishedLaunchingEvent { get; public set; }
    public EventHandler`1<EventArgs> WillTerminateEvent { get; public set; }
    public EventHandler`1<EventArgs> OnActivatedEvent { get; public set; }
    public EventHandler`1<EventArgs> DidEnterBackgroundEvent { get; public set; }
    public EventHandler`1<EventArgs> WillEnterForegroundEvent { get; public set; }
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_FinishedLaunchingEvent();
    [CompilerGeneratedAttribute]
public void set_FinishedLaunchingEvent(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_WillTerminateEvent();
    [CompilerGeneratedAttribute]
public void set_WillTerminateEvent(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_OnActivatedEvent();
    [CompilerGeneratedAttribute]
public void set_OnActivatedEvent(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_DidEnterBackgroundEvent();
    [CompilerGeneratedAttribute]
public void set_DidEnterBackgroundEvent(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<EventArgs> get_WillEnterForegroundEvent();
    [CompilerGeneratedAttribute]
public void set_WillEnterForegroundEvent(EventHandler`1<EventArgs> value);
    public virtual void FinishedLaunching(UIApplication application);
    public virtual bool FinishedLaunching(UIApplication app, NSDictionary options);
    public virtual void WillTerminate(UIApplication application);
    public virtual void OnActivated(UIApplication application);
    public virtual void DidEnterBackground(UIApplication application);
    public virtual void WillEnterForeground(UIApplication application);
}
