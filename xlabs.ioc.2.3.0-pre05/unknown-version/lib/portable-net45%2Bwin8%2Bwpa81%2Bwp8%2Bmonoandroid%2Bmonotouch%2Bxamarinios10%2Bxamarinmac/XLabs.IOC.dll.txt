public interface XLabs.Ioc.IDependencyContainer {
    public abstract virtual IResolver GetResolver();
    public abstract virtual IDependencyContainer Register(T instance);
    public abstract virtual IDependencyContainer Register();
    public abstract virtual IDependencyContainer RegisterSingle();
    public abstract virtual IDependencyContainer Register(Type type);
    public abstract virtual IDependencyContainer Register(Type type, Type impl);
    public abstract virtual IDependencyContainer Register(Func`2<IResolver, T> func);
}
public interface XLabs.Ioc.IResolver {
    public abstract virtual T Resolve();
    public abstract virtual object Resolve(Type type);
    public abstract virtual IEnumerable`1<T> ResolveAll();
    public abstract virtual IEnumerable`1<object> ResolveAll(Type type);
    public abstract virtual bool IsRegistered(Type type);
    public abstract virtual bool IsRegistered();
}
public static class XLabs.Ioc.Resolver : object {
    private static IResolver instance;
    private static IResolver Instance { get; private set; }
    public static bool IsSet { get; }
    private static IResolver get_Instance();
    private static void set_Instance(IResolver value);
    public static bool get_IsSet();
    public static void SetResolver(IResolver resolver);
    public static void ResetResolver(IResolver newInstance);
    public static T Resolve();
    public static object Resolve(Type type);
    public static IEnumerable`1<T> ResolveAll();
    public static IEnumerable`1<object> ResolveAll(Type type);
    public static bool IsRegistered(Type type);
    public static bool IsRegistered();
}
public class XLabs.Ioc.SimpleContainer : object {
    private IResolver resolver;
    private Dictionary`2<Type, List`1<object>> services;
    private Dictionary`2<Type, List`1<Func`2<IResolver, object>>> registeredServices;
    public sealed virtual IResolver GetResolver();
    public sealed virtual IDependencyContainer Register(T instance);
    public sealed virtual IDependencyContainer Register();
    public sealed virtual IDependencyContainer RegisterSingle();
    public sealed virtual IDependencyContainer Register(Type type);
    public sealed virtual IDependencyContainer Register(Type type, Type impl);
    public sealed virtual IDependencyContainer Register(Func`2<IResolver, T> func);
    [IteratorStateMachineAttribute("XLabs.Ioc.SimpleContainer/<ResolveAll>d__11")]
private IEnumerable`1<object> ResolveAll(Type type);
}
