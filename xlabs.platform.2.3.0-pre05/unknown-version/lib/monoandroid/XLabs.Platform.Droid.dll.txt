[ExtensionAttribute]
public static class XLabs.Platform.BroadcastReceiverExtensions : object {
    [ExtensionAttribute]
public static Intent RegisterReceiver(BroadcastReceiver receiver, IntentFilter intentFilter);
    [ExtensionAttribute]
public static void UnregisterReceiver(BroadcastReceiver receiver);
}
public class XLabs.Platform.Device.Accelerometer : Object {
    private Sensor accelerometer;
    private SensorDelay delay;
    private SensorManager sensorManager;
    public static double Gravitation;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Vector3>> readingAvailable;
    [CompilerGeneratedAttribute]
private Vector3 <LatestReading>k__BackingField;
    public static bool IsSupported { get; }
    public AccelerometerInterval Interval { get; public set; }
    public Vector3 LatestReading { get; private set; }
    public static bool get_IsSupported();
    public sealed virtual AccelerometerInterval get_Interval();
    public sealed virtual void set_Interval(AccelerometerInterval value);
    private sealed virtual override void Android.Hardware.ISensorEventListener.OnAccuracyChanged(Sensor sensor, SensorStatus accuracy);
    private sealed virtual override void Android.Hardware.ISensorEventListener.OnSensorChanged(SensorEvent e);
    public sealed virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void add_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void remove_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_LatestReading();
    [CompilerGeneratedAttribute]
private void set_LatestReading(Vector3 value);
    private void Start();
    private void Stop();
}
public class XLabs.Platform.Device.AndroidBluetoothDevice : object {
    private static string BT_UUID;
    private BluetoothSocket _socket;
    private BluetoothDevice _device;
    private UUID _uuid;
    public string Name { get; }
    public string Address { get; }
    public Stream InputStream { get; }
    public Stream OutputStream { get; }
    public AndroidBluetoothDevice(BluetoothDevice device);
    [AsyncStateMachineAttribute("XLabs.Platform.Device.AndroidBluetoothDevice/<Connect>d__5")]
public sealed virtual Task Connect();
    public sealed virtual void Disconnect();
    public sealed virtual string get_Name();
    public sealed virtual string get_Address();
    public sealed virtual Stream get_InputStream();
    public sealed virtual Stream get_OutputStream();
}
public class XLabs.Platform.Device.AndroidDevice : object {
    private static long DeviceTotalMemory;
    private static IDevice currentDevice;
    private IBluetoothHub btHub;
    private IFileManager fileManager;
    private INetwork network;
    [CompilerGeneratedAttribute]
private IPhoneService <PhoneService>k__BackingField;
    [CompilerGeneratedAttribute]
private IDisplay <Display>k__BackingField;
    [CompilerGeneratedAttribute]
private IBattery <Battery>k__BackingField;
    [CompilerGeneratedAttribute]
private IMediaPicker <MediaPicker>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccelerometer <Accelerometer>k__BackingField;
    [CompilerGeneratedAttribute]
private IGyroscope <Gyroscope>k__BackingField;
    [CompilerGeneratedAttribute]
private IAudioStream <Microphone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirmwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HardwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manufacturer>k__BackingField;
    public static IDevice CurrentDevice { get; public set; }
    public string Id { get; }
    public IPhoneService PhoneService { get; private set; }
    public IDisplay Display { get; private set; }
    public IBattery Battery { get; private set; }
    public IMediaPicker MediaPicker { get; private set; }
    public INetwork Network { get; }
    public IAccelerometer Accelerometer { get; private set; }
    public IGyroscope Gyroscope { get; private set; }
    public IBluetoothHub BluetoothHub { get; }
    public IAudioStream Microphone { get; private set; }
    public IFileManager FileManager { get; }
    public string Name { get; private set; }
    public string FirmwareVersion { get; private set; }
    public string HardwareVersion { get; private set; }
    public string Manufacturer { get; private set; }
    public string LanguageCode { get; }
    public double TimeZoneOffset { get; }
    public string TimeZone { get; }
    public Orientation Orientation { get; }
    public long TotalMemory { get; }
    private static AndroidDevice();
    public static IDevice get_CurrentDevice();
    public static void set_CurrentDevice(IDevice value);
    public virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IPhoneService get_PhoneService();
    [CompilerGeneratedAttribute]
private void set_PhoneService(IPhoneService value);
    [CompilerGeneratedAttribute]
public sealed virtual IDisplay get_Display();
    [CompilerGeneratedAttribute]
private void set_Display(IDisplay value);
    [CompilerGeneratedAttribute]
public sealed virtual IBattery get_Battery();
    [CompilerGeneratedAttribute]
private void set_Battery(IBattery value);
    [CompilerGeneratedAttribute]
public sealed virtual IMediaPicker get_MediaPicker();
    [CompilerGeneratedAttribute]
private void set_MediaPicker(IMediaPicker value);
    public sealed virtual INetwork get_Network();
    [CompilerGeneratedAttribute]
public sealed virtual IAccelerometer get_Accelerometer();
    [CompilerGeneratedAttribute]
private void set_Accelerometer(IAccelerometer value);
    [CompilerGeneratedAttribute]
public sealed virtual IGyroscope get_Gyroscope();
    [CompilerGeneratedAttribute]
private void set_Gyroscope(IGyroscope value);
    public sealed virtual IBluetoothHub get_BluetoothHub();
    [CompilerGeneratedAttribute]
public sealed virtual IAudioStream get_Microphone();
    [CompilerGeneratedAttribute]
private void set_Microphone(IAudioStream value);
    public sealed virtual IFileManager get_FileManager();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FirmwareVersion();
    [CompilerGeneratedAttribute]
private void set_FirmwareVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HardwareVersion();
    [CompilerGeneratedAttribute]
private void set_HardwareVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Manufacturer();
    [CompilerGeneratedAttribute]
private void set_Manufacturer(string value);
    public sealed virtual string get_LanguageCode();
    public sealed virtual double get_TimeZoneOffset();
    public sealed virtual string get_TimeZone();
    public sealed virtual Orientation get_Orientation();
    public sealed virtual Task`1<bool> LaunchUriAsync(Uri uri);
    public sealed virtual long get_TotalMemory();
    private static long GetTotalMemory();
}
public class XLabs.Platform.Device.Battery : object {
    private static Nullable`1<int> level;
    private static LevelMonitor levelMonitor;
    private static ChargerMonitor chargerMonitor;
    private static Nullable`1<bool> chargerConnected;
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs`1<int>> onLevelChange;
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs`1<bool>> onChargerStatusChanged;
    public int Level { get; private set; }
    public bool Charging { get; private set; }
    public sealed virtual int get_Level();
    private void set_Level(int value);
    public sealed virtual bool get_Charging();
    private void set_Charging(bool value);
    private static int GetLevel();
    private static bool GetChargerState();
    public sealed virtual void add_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    public sealed virtual void remove_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    public sealed virtual void add_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    public sealed virtual void remove_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
private static void add_onLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
private static void remove_onLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
private static void add_onChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
private static void remove_onChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    private void StartLevelMonitoring();
    private void StopLevelMonitoring();
    private void StartChargerMonitoring();
    private void StopChargerMonitoring();
}
public class XLabs.Platform.Device.BluetoothHub : object {
    private BluetoothAdapter _adapter;
    public bool Enabled { get; }
    public BluetoothHub(BluetoothAdapter adapter);
    public sealed virtual bool get_Enabled();
    [AsyncStateMachineAttribute("XLabs.Platform.Device.BluetoothHub/<GetPairedDevices>d__5")]
public sealed virtual Task`1<IReadOnlyList`1<IBluetoothDevice>> GetPairedDevices();
    public sealed virtual Task OpenSettings();
    [CompilerGeneratedAttribute]
private List`1<AndroidBluetoothDevice> <GetPairedDevices>b__5_0();
    [CompilerGeneratedAttribute]
private void <OpenSettings>b__6_0();
}
public abstract class XLabs.Platform.Device.BroadcastMonitor : BroadcastReceiver {
    protected IntentFilter Filter { get; }
    public virtual bool Start();
    public virtual void Stop();
    protected abstract virtual IntentFilter get_Filter();
}
public class XLabs.Platform.Device.Display : object {
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Xdpi>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ydpi>k__BackingField;
    public static DisplayMetrics Metrics { get; }
    public int Height { get; private set; }
    public int Width { get; private set; }
    public double Xdpi { get; private set; }
    public double Ydpi { get; private set; }
    public double Scale { get; }
    public static DisplayMetrics get_Metrics();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Xdpi();
    [CompilerGeneratedAttribute]
private void set_Xdpi(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Ydpi();
    [CompilerGeneratedAttribute]
private void set_Ydpi(double value);
    public sealed virtual double WidthRequestInInches(double inches);
    public sealed virtual double HeightRequestInInches(double inches);
    public sealed virtual double get_Scale();
}
public class XLabs.Platform.Device.Gyroscope : Object {
    private SensorDelay delay;
    private Sensor gyroscope;
    private SensorManager sensorManager;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Vector3>> readingAvailable;
    [CompilerGeneratedAttribute]
private Vector3 <LatestReading>k__BackingField;
    public static bool IsSupported { get; }
    public AccelerometerInterval Interval { get; public set; }
    public Vector3 LatestReading { get; private set; }
    public static bool get_IsSupported();
    public sealed virtual AccelerometerInterval get_Interval();
    public sealed virtual void set_Interval(AccelerometerInterval value);
    private sealed virtual override void Android.Hardware.ISensorEventListener.OnAccuracyChanged(Sensor sensor, SensorStatus accuracy);
    private sealed virtual override void Android.Hardware.ISensorEventListener.OnSensorChanged(SensorEvent e);
    [CompilerGeneratedAttribute]
private void add_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void remove_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_LatestReading();
    [CompilerGeneratedAttribute]
private void set_LatestReading(Vector3 value);
    private void Start();
    private void Stop();
}
[ExtensionAttribute]
public static class XLabs.Platform.IntentExtensions : object {
    [ExtensionAttribute]
public static void AddAttachments(Intent intent, IEnumerable`1<string> attachments);
}
[ExtensionAttribute]
public static class XLabs.Platform.IntentFilterExtensions : object {
    [ExtensionAttribute]
public static Intent RegisterReceiver(IntentFilter intentFilter);
}
public class XLabs.Platform.JavaObject`1 : Object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; private set; }
    public JavaObject`1(T obj);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
}
[ExtensionAttribute]
public static class XLabs.Platform.ObjectExtensions : object {
    [ExtensionAttribute]
public static void StartActivity(object o, Intent intent);
    [ExtensionAttribute]
public static JavaObject`1<T> ToJavaObject(T o);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class XLabs.Platform.Resource : object {
    private static Resource();
}
public class XLabs.Platform.Services.Email.EmailService : object {
    public bool CanSend { get; }
    public sealed virtual bool get_CanSend();
    public sealed virtual void ShowDraft(string subject, string body, bool html, String[] to, String[] cc, String[] bcc, IEnumerable`1<string> attachments);
    public sealed virtual void ShowDraft(string subject, string body, bool html, string to, IEnumerable`1<string> attachments);
}
internal class XLabs.Platform.Services.Geolocation.GeolocationContinuousListener : Object {
    private string _activeProvider;
    private Location _lastLocation;
    private IList`1<string> _providers;
    private TimeSpan _timePeriod;
    private HashSet`1<string> _activeProviders;
    private LocationManager _manager;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionErrorEventArgs> PositionError;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionEventArgs> PositionChanged;
    public GeolocationContinuousListener(LocationManager manager, TimeSpan timePeriod, IList`1<string> providers);
    public sealed virtual void OnLocationChanged(Location location);
    public sealed virtual void OnProviderDisabled(string provider);
    public sealed virtual void OnProviderEnabled(string provider);
    public sealed virtual void OnStatusChanged(string provider, Availability status, Bundle extras);
    [CompilerGeneratedAttribute]
public void add_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PositionChanged(EventHandler`1<PositionEventArgs> value);
    private TimeSpan GetTimeSpan(long time);
    private void OnPositionError(PositionErrorEventArgs e);
}
internal class XLabs.Platform.Services.Geolocation.GeolocationSingleListener : Object {
    private Location _bestLocation;
    private HashSet`1<string> _activeProviders;
    private TaskCompletionSource`1<Position> _completionSource;
    private float _desiredAccuracy;
    private Action _finishedCallback;
    private object _locationSync;
    private Timer _timer;
    public Task`1<Position> Task { get; }
    public GeolocationSingleListener(float desiredAccuracy, int timeout, IEnumerable`1<string> activeProviders, Action finishedCallback);
    public Task`1<Position> get_Task();
    public sealed virtual void OnLocationChanged(Location location);
    public sealed virtual void OnProviderDisabled(string provider);
    public sealed virtual void OnProviderEnabled(string provider);
    public sealed virtual void OnStatusChanged(string provider, Availability status, Bundle extras);
    public void Cancel();
    private void TimesUp(object state);
    private void Finish(Location location);
}
public class XLabs.Platform.Services.Geolocation.Geolocator : object {
    private static DateTime Epoch;
    private Position _lastPosition;
    private GeolocationContinuousListener _listener;
    private LocationManager _manager;
    private object _positionSync;
    private String[] _providers;
    [CompilerGeneratedAttribute]
private double <DesiredAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionErrorEventArgs> PositionError;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionEventArgs> PositionChanged;
    public bool IsListening { get; }
    public double DesiredAccuracy { get; public set; }
    public bool SupportsHeading { get; }
    public bool IsGeolocationAvailable { get; }
    public bool IsGeolocationEnabled { get; }
    private static Geolocator();
    public sealed virtual bool get_IsListening();
    [CompilerGeneratedAttribute]
public sealed virtual double get_DesiredAccuracy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DesiredAccuracy(double value);
    public sealed virtual bool get_SupportsHeading();
    public sealed virtual bool get_IsGeolocationAvailable();
    public sealed virtual bool get_IsGeolocationEnabled();
    public sealed virtual void StopListening();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionChanged(EventHandler`1<PositionEventArgs> value);
    public sealed virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken);
    public sealed virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken, bool includeHeading);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, bool includeHeading);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken, bool includeHeading);
    public sealed virtual void StartListening(UInt32 minTime, double minDistance);
    public sealed virtual void StartListening(UInt32 minTime, double minDistance, bool includeHeading);
    private void OnListenerPositionChanged(object sender, PositionEventArgs e);
    private void OnListenerPositionError(object sender, PositionErrorEventArgs e);
    internal static DateTimeOffset GetTimestamp(Location location);
}
public class XLabs.Platform.Services.IO.FileManager : object {
    private IsolatedStorageFile isolatedStorageFile;
    public FileManager(IsolatedStorageFile isolatedStorageFile);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual Stream OpenFile(string path, FileMode mode, FileAccess access);
    public sealed virtual Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual bool FileExists(string path);
    public sealed virtual DateTimeOffset GetLastWriteTime(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void DeleteDirectory(string path);
    public static void CopyDirectory(DirectoryInfo source, DirectoryInfo destination);
}
public class XLabs.Platform.Services.KeyVaultStorage : object {
    private static object SaveLock;
    private static string StorageFile;
    private KeyStore keyStore;
    private PasswordProtection protection;
    private static IsolatedStorageFile File { get; }
    public KeyVaultStorage(Char[] password);
    private static KeyVaultStorage();
    private static IsolatedStorageFile get_File();
    public sealed virtual void Store(string key, Byte[] dataBytes);
    public sealed virtual Byte[] Retrieve(string key);
    public sealed virtual void Delete(string key);
    public sealed virtual bool Contains(string key);
    private void Save();
}
internal class XLabs.Platform.Services.Media.MediaPickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaFile <Media>k__BackingField;
    public int RequestId { get; private set; }
    public bool IsCanceled { get; private set; }
    public Exception Error { get; private set; }
    public MediaFile Media { get; private set; }
    public MediaPickedEventArgs(int id, Exception error);
    public MediaPickedEventArgs(int id, bool isCanceled, MediaFile media);
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
private void set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public MediaFile get_Media();
    [CompilerGeneratedAttribute]
private void set_Media(MediaFile value);
    public Task`1<MediaFile> ToTask();
}
public class XLabs.Platform.Services.Media.MediaPicker : object {
    private TaskCompletionSource`1<MediaFile> _completionSource;
    private int _requestId;
    [CompilerGeneratedAttribute]
private bool <IsPhotosSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVideosSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MediaPickerArgs> <OnMediaSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MediaPickerErrorArgs> <OnError>k__BackingField;
    private static Context Context { get; }
    public bool IsCameraAvailable { get; }
    public bool IsPhotosSupported { get; private set; }
    public bool IsVideosSupported { get; private set; }
    public EventHandler`1<MediaPickerArgs> OnMediaSelected { get; public set; }
    public EventHandler`1<MediaPickerErrorArgs> OnError { get; public set; }
    private static Context get_Context();
    public sealed virtual bool get_IsCameraAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPhotosSupported();
    [CompilerGeneratedAttribute]
private void set_IsPhotosSupported(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVideosSupported();
    [CompilerGeneratedAttribute]
private void set_IsVideosSupported(bool value);
    public sealed virtual Task`1<MediaFile> SelectPhotoAsync(CameraMediaStorageOptions options);
    public sealed virtual Task`1<MediaFile> TakePhotoAsync(CameraMediaStorageOptions options);
    public sealed virtual Task`1<MediaFile> SelectVideoAsync(VideoMediaStorageOptions options);
    public sealed virtual Task`1<MediaFile> TakeVideoAsync(VideoMediaStorageOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<MediaPickerArgs> get_OnMediaSelected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnMediaSelected(EventHandler`1<MediaPickerArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<MediaPickerErrorArgs> get_OnError();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnError(EventHandler`1<MediaPickerErrorArgs> value);
    private Intent CreateMediaIntent(int id, string type, string action, MediaStorageOptions options, bool tasked);
    private int GetRequestId();
    private Task`1<MediaFile> TakeMediaAsync(string type, string action, MediaStorageOptions options);
}
[ActivityAttribute]
internal class XLabs.Platform.Services.Media.MediaPickerActivity : Activity {
    internal static string ExtraPath;
    internal static string ExtraLocation;
    internal static string ExtraType;
    internal static string ExtraId;
    internal static string ExtraAction;
    internal static string ExtraTasked;
    internal static string MediaFileExtraName;
    private string _action;
    private string _description;
    private int _id;
    private bool _isPhoto;
    private Uri _path;
    private VideoQuality _quality;
    private int _seconds;
    private bool _tasked;
    private string _title;
    private string _type;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MediaPickedEventArgs> MediaPicked;
    [CompilerGeneratedAttribute]
internal static void add_MediaPicked(EventHandler`1<MediaPickedEventArgs> value);
    [CompilerGeneratedAttribute]
internal static void remove_MediaPicked(EventHandler`1<MediaPickedEventArgs> value);
    protected virtual void OnSaveInstanceState(Bundle outState);
    protected virtual void OnCreate(Bundle savedInstanceState);
    protected virtual void OnActivityResult(int requestCode, Result resultCode, Intent data);
    internal static Task`1<MediaPickedEventArgs> GetMediaFileAsync(Context context, int requestCode, string action, bool isPhoto, Uri& path, Uri data);
    private static Task`1<bool> TryMoveFileAsync(Context context, Uri url, Uri path, bool isPhoto);
    private static int GetVideoQuality(VideoQuality videoQuality);
    private static Uri GetOutputMediaFile(Context context, string subdir, string name, bool isPhoto);
    private static Uri FixUri(string uriPath);
    internal static Task`1<Tuple`2<string, bool>> GetFileForUriAsync(Context context, Uri uri, bool isPhoto);
    private static string GetLocalPath(Uri uri);
    private void Touch();
    private static void RaiseOnMediaPicked(MediaPickedEventArgs e);
}
public class XLabs.Platform.Services.Media.Microphone : object {
    private AudioRecord _audioSource;
    private int _bufferSize;
    [CompilerGeneratedAttribute]
private IEnumerable`1<int> <SupportedSampleRates>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Byte[]>> OnBroadcast;
    public static bool IsEnabled { get; }
    public int SampleRate { get; }
    public int BitsPerSample { get; }
    public int ChannelCount { get; }
    public int AverageBytesPerSecond { get; }
    public bool Active { get; }
    public IEnumerable`1<int> SupportedSampleRates { get; private set; }
    public static bool get_IsEnabled();
    public sealed virtual int get_SampleRate();
    public sealed virtual int get_BitsPerSample();
    public sealed virtual int get_ChannelCount();
    public int get_AverageBytesPerSecond();
    public bool get_Active();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<int> get_SupportedSampleRates();
    [CompilerGeneratedAttribute]
private void set_SupportedSampleRates(IEnumerable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    public sealed virtual Task`1<bool> Start(int sampleRate);
    public sealed virtual Task Stop();
    private void StartRecording();
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.Microphone/<Record>d__25")]
private Task Record();
    [CompilerGeneratedAttribute]
private void <Stop>b__23_0();
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.Microphone/<<StartRecording>b__24_0>d")]
[CompilerGeneratedAttribute]
private Task <StartRecording>b__24_0();
}
public class XLabs.Platform.Services.Media.SoundService : object {
    private bool isPlayerPrepared;
    private bool isScrubbing;
    private MediaPlayer player;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler SoundFileFinished;
    [CompilerGeneratedAttribute]
private SoundFile <CurrentFile>k__BackingField;
    public double Volume { get; public set; }
    public double CurrentTime { get; public set; }
    public bool IsPlaying { get; }
    public SoundFile CurrentFile { get; private set; }
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.SoundService/<StartPlayerAsyncFromAssetsFolder>d__3")]
private Task StartPlayerAsyncFromAssetsFolder(AssetFileDescriptor fp);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SoundFileFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SoundFileFinished(EventHandler value);
    public sealed virtual Task`1<SoundFile> PlayAsync(string filename, string extension);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.SoundService/<SetMediaAsync>d__10")]
public sealed virtual Task`1<SoundFile> SetMediaAsync(string filename);
    public sealed virtual Task GoToAsync(double position);
    public sealed virtual void Play();
    public sealed virtual void Stop();
    public sealed virtual void Pause();
    public sealed virtual double get_Volume();
    public sealed virtual void set_Volume(double value);
    public sealed virtual double get_CurrentTime();
    public void set_CurrentTime(double value);
    public sealed virtual bool get_IsPlaying();
    [CompilerGeneratedAttribute]
public sealed virtual SoundFile get_CurrentFile();
    [CompilerGeneratedAttribute]
private void set_CurrentFile(SoundFile value);
    [CompilerGeneratedAttribute]
private void <StartPlayerAsyncFromAssetsFolder>b__3_0(object s, EventArgs e);
}
public class XLabs.Platform.Services.Network : BroadcastMonitor {
    private Action`1<NetworkStatus> reachabilityChanged;
    private object lockObject;
    protected IntentFilter Filter { get; }
    public sealed virtual NetworkStatus InternetConnectionStatus();
    public sealed virtual void add_ReachabilityChanged(Action`1<NetworkStatus> value);
    public sealed virtual void remove_ReachabilityChanged(Action`1<NetworkStatus> value);
    public sealed virtual Task`1<bool> IsReachable(string host, TimeSpan timeout);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Network/<IsReachableByWifi>d__7")]
public sealed virtual Task`1<bool> IsReachableByWifi(string host, TimeSpan timeout);
    public virtual void OnReceive(Context context, Intent intent);
    protected virtual IntentFilter get_Filter();
}
public class XLabs.Platform.Services.NfcDevice : Object {
    private NfcMonitor _monitor;
    private NfcAdapter _device;
    private Dictionary`2<Guid, NdefRecord> _published;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<INfcDevice>> InRange;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<INfcDevice>> OutOfRange;
    private static Context Context { get; }
    public static NfcManager Manager { get; }
    public static bool SupportsNfc { get; }
    public string DeviceId { get; }
    public bool IsEnabled { get; }
    public NfcDevice(NfcAdapter adapter);
    private static Context get_Context();
    public static NfcManager get_Manager();
    public static bool get_SupportsNfc();
    public sealed virtual NdefMessage CreateNdefMessage(NfcEvent e);
    [CompilerGeneratedAttribute]
private void add_InRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
private void remove_InRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
private void add_OutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
private void remove_OutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    private void RegisterNfcCallback();
    private void UnregisterNfcCallback();
    public string get_DeviceId();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void add_DeviceInRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual void remove_DeviceInRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual void add_DeviceOutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual void remove_DeviceOutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual Guid PublishUri(Uri uri);
    public sealed virtual void Unpublish(Guid id);
}
public class XLabs.Platform.Services.PhoneService : object {
    public static TelephonyManager Manager { get; }
    public static ConnectivityManager ConnectivityManager { get; }
    public string CellularProvider { get; }
    public string ICC { get; }
    public string MCC { get; }
    public string MNC { get; }
    public Nullable`1<bool> IsCellularDataEnabled { get; }
    public Nullable`1<bool> IsCellularDataRoamingEnabled { get; }
    public Nullable`1<bool> IsNetworkAvailable { get; }
    public bool CanSendSMS { get; }
    public static TelephonyManager get_Manager();
    public static ConnectivityManager get_ConnectivityManager();
    public sealed virtual string get_CellularProvider();
    public sealed virtual string get_ICC();
    public sealed virtual string get_MCC();
    public sealed virtual string get_MNC();
    public sealed virtual Nullable`1<bool> get_IsCellularDataEnabled();
    public sealed virtual Nullable`1<bool> get_IsCellularDataRoamingEnabled();
    public sealed virtual Nullable`1<bool> get_IsNetworkAvailable();
    public sealed virtual bool get_CanSendSMS();
    public sealed virtual void DialNumber(string number);
    public sealed virtual void SendSMS(string to, string body);
}
public static class XLabs.Platform.Services.Reachability : object {
    public static ConnectivityManager ConnectivityManager { get; }
    public static bool IsActiveNetworkWifi { get; }
    public static ConnectivityManager get_ConnectivityManager();
    public static bool get_IsActiveNetworkWifi();
    public static bool IsNetworkAvailable();
    public static NetworkStatus InternetConnectionStatus();
}
public class XLabs.Platform.Services.SharedPreferencesStorage : object {
    private ISharedPreferences preferences;
    public SharedPreferencesStorage(string preferenceKey);
    public sealed virtual void Store(string key, Byte[] dataBytes);
    public sealed virtual Byte[] Retrieve(string key);
    public sealed virtual void Delete(string key);
    public sealed virtual bool Contains(string key);
}
public class XLabs.Platform.Services.TextToSpeechService : Object {
    private static string DefaultLocale;
    private TextToSpeech _speaker;
    private string _toSpeak;
    private static Context Context { get; }
    private static Context get_Context();
    public sealed virtual void OnInit(OperationResult status);
    public sealed virtual void Speak(string text, string language);
    public sealed virtual IEnumerable`1<string> GetInstalledLanguages();
}
[ExtensionAttribute]
public static class XLabs.Platform.UriExtensions : object {
    [ExtensionAttribute]
public static Uri ToAndroidUri(Uri uri);
    [ExtensionAttribute]
public static Uri ToSystemUri(Uri uri);
}
[ExtensionAttribute]
public static class XLabs.Platform.ViewExtensions : object {
    [ExtensionAttribute]
public static Bitmap ToBitmap(View view);
    [AsyncStateMachineAttribute("XLabs.Platform.ViewExtensions/<StreamToPng>d__1")]
[ExtensionAttribute]
public static Task StreamToPng(View view, Stream stream);
    [ExtensionAttribute]
public static bool IsHit(View view, PointF point);
}
[ExtensionAttribute]
public static class XLabs.Platform.ViewGroupExtensions : object {
    [ExtensionAttribute]
public static Tuple`2<View, PointF> GetTouchedView(ViewGroup viewGroup, PointF point, PointF offset);
}
