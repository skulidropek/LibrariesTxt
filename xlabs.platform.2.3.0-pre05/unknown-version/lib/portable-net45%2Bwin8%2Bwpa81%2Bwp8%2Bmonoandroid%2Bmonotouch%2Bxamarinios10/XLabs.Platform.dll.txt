public enum XLabs.Platform.Device.AccelerometerInterval : Enum {
    public int value__;
    public static AccelerometerInterval Fastest;
    public static AccelerometerInterval Game;
    public static AccelerometerInterval Ui;
    public static AccelerometerInterval Normal;
}
public class XLabs.Platform.Device.BluetoothServiceType : object {
    [CompilerGeneratedAttribute]
private static IEnumerable`1<BluetoothServiceType> <StandardServices>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ServiceId>k__BackingField;
    public static IEnumerable`1<BluetoothServiceType> StandardServices { get; private set; }
    public ServiceType Type { get; public set; }
    public string Name { get; public set; }
    public Guid ServiceId { get; public set; }
    private static BluetoothServiceType();
    [CompilerGeneratedAttribute]
public static IEnumerable`1<BluetoothServiceType> get_StandardServices();
    [CompilerGeneratedAttribute]
private static void set_StandardServices(IEnumerable`1<BluetoothServiceType> value);
    [CompilerGeneratedAttribute]
public ServiceType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ServiceType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_ServiceId();
    [CompilerGeneratedAttribute]
public void set_ServiceId(Guid value);
}
[ExtensionAttribute]
public static class XLabs.Platform.Device.DeviceExtensions : object {
    [ExtensionAttribute]
public static bool IsInLandscape(IDevice device);
    [ExtensionAttribute]
public static bool IsInPortrait(IDevice device);
    [ExtensionAttribute]
public static double WidthRequestInInches(IDevice device, double inches);
    [ExtensionAttribute]
public static double HeightRequestInInches(IDevice device, double inches);
    [ExtensionAttribute]
public static double ScreenWidthInches(IDevice device);
    [ExtensionAttribute]
public static double ScreenHeightInches(IDevice device);
}
public abstract class XLabs.Platform.Device.DeviceSensor : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Vector3>> readingAvailable;
    [CompilerGeneratedAttribute]
private Vector3 <LatestReading>k__BackingField;
    public Vector3 LatestReading { get; protected set; }
    public AccelerometerInterval Interval { get; public set; }
    [CompilerGeneratedAttribute]
protected void add_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
protected void remove_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_LatestReading();
    [CompilerGeneratedAttribute]
protected void set_LatestReading(Vector3 value);
    protected abstract virtual void Start();
    protected abstract virtual void Stop();
    public abstract virtual AccelerometerInterval get_Interval();
    public abstract virtual void set_Interval(AccelerometerInterval value);
}
[ExtensionAttribute]
public static class XLabs.Platform.Device.DisplayExtensions : object {
    [ExtensionAttribute]
public static double ScreenSizeInches(IDisplay screen);
    [ExtensionAttribute]
public static double ScreenWidthInches(IDisplay screen);
    [ExtensionAttribute]
public static double ScreenHeightInches(IDisplay screen);
}
public interface XLabs.Platform.Device.IAccelerometer {
    public Vector3 LatestReading { get; }
    public AccelerometerInterval Interval { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public abstract virtual Vector3 get_LatestReading();
    public abstract virtual AccelerometerInterval get_Interval();
    public abstract virtual void set_Interval(AccelerometerInterval value);
}
public interface XLabs.Platform.Device.IBattery {
    public int Level { get; }
    public bool Charging { get; }
    public abstract virtual int get_Level();
    public abstract virtual bool get_Charging();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
}
public interface XLabs.Platform.Device.IBluetoothDevice {
    public string Name { get; }
    public string Address { get; }
    public Stream InputStream { get; }
    public Stream OutputStream { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Address();
    public abstract virtual Stream get_InputStream();
    public abstract virtual Stream get_OutputStream();
    public abstract virtual Task Connect();
    public abstract virtual void Disconnect();
}
public interface XLabs.Platform.Device.IBluetoothHub {
    public bool Enabled { get; }
    public abstract virtual bool get_Enabled();
    public abstract virtual Task`1<IReadOnlyList`1<IBluetoothDevice>> GetPairedDevices();
    public abstract virtual Task OpenSettings();
}
public interface XLabs.Platform.Device.IDevice {
    public string Id { get; }
    public IDisplay Display { get; }
    public IPhoneService PhoneService { get; }
    public IBattery Battery { get; }
    public IAccelerometer Accelerometer { get; }
    public IGyroscope Gyroscope { get; }
    public IMediaPicker MediaPicker { get; }
    public INetwork Network { get; }
    public IBluetoothHub BluetoothHub { get; }
    public IAudioStream Microphone { get; }
    public IFileManager FileManager { get; }
    public string Name { get; }
    public string FirmwareVersion { get; }
    public string HardwareVersion { get; }
    public string Manufacturer { get; }
    public long TotalMemory { get; }
    public string LanguageCode { get; }
    public double TimeZoneOffset { get; }
    public string TimeZone { get; }
    public Orientation Orientation { get; }
    public abstract virtual string get_Id();
    public abstract virtual IDisplay get_Display();
    public abstract virtual IPhoneService get_PhoneService();
    public abstract virtual IBattery get_Battery();
    public abstract virtual IAccelerometer get_Accelerometer();
    public abstract virtual IGyroscope get_Gyroscope();
    public abstract virtual IMediaPicker get_MediaPicker();
    public abstract virtual INetwork get_Network();
    public abstract virtual IBluetoothHub get_BluetoothHub();
    public abstract virtual IAudioStream get_Microphone();
    public abstract virtual IFileManager get_FileManager();
    public abstract virtual string get_Name();
    public abstract virtual string get_FirmwareVersion();
    public abstract virtual string get_HardwareVersion();
    public abstract virtual string get_Manufacturer();
    public abstract virtual long get_TotalMemory();
    public abstract virtual string get_LanguageCode();
    public abstract virtual double get_TimeZoneOffset();
    public abstract virtual string get_TimeZone();
    public abstract virtual Orientation get_Orientation();
    public abstract virtual Task`1<bool> LaunchUriAsync(Uri uri);
}
public interface XLabs.Platform.Device.IDisplay {
    public int Height { get; }
    public int Width { get; }
    public double Xdpi { get; }
    public double Ydpi { get; }
    public double Scale { get; }
    public abstract virtual int get_Height();
    public abstract virtual int get_Width();
    public abstract virtual double get_Xdpi();
    public abstract virtual double get_Ydpi();
    public abstract virtual double get_Scale();
    public abstract virtual double WidthRequestInInches(double inches);
    public abstract virtual double HeightRequestInInches(double inches);
}
public interface XLabs.Platform.Device.IGyroscope {
    public Vector3 LatestReading { get; }
    public AccelerometerInterval Interval { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public abstract virtual Vector3 get_LatestReading();
    public abstract virtual AccelerometerInterval get_Interval();
    public abstract virtual void set_Interval(AccelerometerInterval value);
}
public interface XLabs.Platform.Device.ISensor {
    public Vector3 LatestReading { get; }
    public AccelerometerInterval Interval { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public abstract virtual Vector3 get_LatestReading();
    public abstract virtual AccelerometerInterval get_Interval();
    public abstract virtual void set_Interval(AccelerometerInterval value);
}
public interface XLabs.Platform.Mvvm.IXFormsApp {
    public bool IsInitialized { get; }
    public string AppDataDirectory { get; public set; }
    public Orientation Orientation { get; }
    [ObsoleteAttribute]
public Func`1<Task`1<bool>> BackPressDelegate { get; public set; }
    public EventHandler`1<EventArgs> Initialize { get; public set; }
    public EventHandler`1<EventArgs> Startup { get; public set; }
    public EventHandler`1<EventArgs> Closing { get; public set; }
    public EventHandler`1<EventArgs> Suspended { get; public set; }
    public EventHandler`1<EventArgs> Resumed { get; public set; }
    public EventHandler`1<EventArgs> Error { get; public set; }
    public EventHandler`1<EventArgs`1<Orientation>> Rotation { get; public set; }
    public EventHandler`1<EventArgs> BackPress { get; public set; }
    public abstract virtual bool get_IsInitialized();
    public abstract virtual string get_AppDataDirectory();
    public abstract virtual void set_AppDataDirectory(string value);
    public abstract virtual Orientation get_Orientation();
    public abstract virtual Func`1<Task`1<bool>> get_BackPressDelegate();
    public abstract virtual void set_BackPressDelegate(Func`1<Task`1<bool>> value);
    public abstract virtual EventHandler`1<EventArgs> get_Initialize();
    public abstract virtual void set_Initialize(EventHandler`1<EventArgs> value);
    public abstract virtual EventHandler`1<EventArgs> get_Startup();
    public abstract virtual void set_Startup(EventHandler`1<EventArgs> value);
    public abstract virtual EventHandler`1<EventArgs> get_Closing();
    public abstract virtual void set_Closing(EventHandler`1<EventArgs> value);
    public abstract virtual EventHandler`1<EventArgs> get_Suspended();
    public abstract virtual void set_Suspended(EventHandler`1<EventArgs> value);
    public abstract virtual EventHandler`1<EventArgs> get_Resumed();
    public abstract virtual void set_Resumed(EventHandler`1<EventArgs> value);
    public abstract virtual EventHandler`1<EventArgs> get_Error();
    public abstract virtual void set_Error(EventHandler`1<EventArgs> value);
    public abstract virtual EventHandler`1<EventArgs`1<Orientation>> get_Rotation();
    public abstract virtual void set_Rotation(EventHandler`1<EventArgs`1<Orientation>> value);
    public abstract virtual EventHandler`1<EventArgs> get_BackPress();
    public abstract virtual void set_BackPress(EventHandler`1<EventArgs> value);
}
public interface XLabs.Platform.Mvvm.IXFormsApp`1 {
    public TApp AppContext { get; public set; }
    public abstract virtual TApp get_AppContext();
    public abstract virtual void set_AppContext(TApp value);
    public abstract virtual void Init(TApp context, bool initServices);
}
public class XLabs.Platform.Mvvm.XFormsApp`1 : object {
    private Orientation orientation;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppDataDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private TApp <AppContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<bool>> <BackPressDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Initialize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Startup>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Closing>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Suspended>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Resumed>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Orientation>> <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> <BackPress>k__BackingField;
    public bool IsInitialized { get; private set; }
    public string AppDataDirectory { get; public set; }
    public TApp AppContext { get; public set; }
    public Orientation Orientation { get; protected set; }
    public Func`1<Task`1<bool>> BackPressDelegate { get; public set; }
    public EventHandler`1<EventArgs> Initialize { get; public set; }
    public EventHandler`1<EventArgs> Startup { get; public set; }
    public EventHandler`1<EventArgs> Closing { get; public set; }
    public EventHandler`1<EventArgs> Suspended { get; public set; }
    public EventHandler`1<EventArgs> Resumed { get; public set; }
    public EventHandler`1<EventArgs> Error { get; public set; }
    public EventHandler`1<EventArgs`1<Orientation>> Rotation { get; public set; }
    public EventHandler`1<EventArgs> BackPress { get; public set; }
    public XFormsApp`1(TApp context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppDataDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AppDataDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TApp get_AppContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AppContext(TApp value);
    public sealed virtual Orientation get_Orientation();
    protected void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<Task`1<bool>> get_BackPressDelegate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackPressDelegate(Func`1<Task`1<bool>> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs> get_Initialize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Initialize(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs> get_Startup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Startup(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs> get_Closing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closing(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs> get_Suspended();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Suspended(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs> get_Resumed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Resumed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs> get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs`1<Orientation>> get_Rotation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Rotation(EventHandler`1<EventArgs`1<Orientation>> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventArgs> get_BackPress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackPress(EventHandler`1<EventArgs> value);
    public sealed virtual void Init(TApp context, bool initServices);
    protected virtual void OnInit(TApp context, bool initServices);
    protected virtual void OnStartup();
    protected virtual void OnClosing();
    protected virtual void OnSuspended();
    protected virtual void OnResumed();
    protected virtual void OnError(Exception ex);
    protected virtual void OnBackPress();
    protected virtual void RaiseOnInitialize();
    protected virtual void RaiseOnStartUp();
    protected virtual void RaiseOnClosing();
    protected virtual void RaiseOnSuspeded();
    protected virtual void RaiseOnResumed();
    protected virtual void RaiseOnError(Exception e);
    protected virtual void RaiseOnBackPress();
}
[ExtensionAttribute]
public static class XLabs.Platform.PositionExtensions : object {
    [ExtensionAttribute]
public static Uri ToUri(Position position);
    [ExtensionAttribute]
public static Uri ToBingMaps(Position position);
    [ExtensionAttribute]
public static Uri ToGoogleMaps(Position position);
    [ExtensionAttribute]
public static Uri ToAppleMaps(Position position);
    [ExtensionAttribute]
public static Uri DriveToLink(Position position, string destination);
}
public interface XLabs.Platform.Services.Email.IEmailService {
    public bool CanSend { get; }
    public abstract virtual bool get_CanSend();
    public abstract virtual void ShowDraft(string subject, string body, bool html, string to, IEnumerable`1<string> attachments);
    public abstract virtual void ShowDraft(string subject, string body, bool html, String[] to, String[] cc, String[] bcc, IEnumerable`1<string> attachments);
}
public enum XLabs.Platform.Services.Geolocation.GeolocationError : Enum {
    public int value__;
    public static GeolocationError PositionUnavailable;
    public static GeolocationError Unauthorized;
}
public class XLabs.Platform.Services.Geolocation.GeolocationException : Exception {
    [CompilerGeneratedAttribute]
private GeolocationError <Error>k__BackingField;
    public GeolocationError Error { get; private set; }
    public GeolocationException(GeolocationError error);
    public GeolocationException(GeolocationError error, Exception innerException);
    [CompilerGeneratedAttribute]
public GeolocationError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(GeolocationError value);
}
public interface XLabs.Platform.Services.Geolocation.IGeolocator {
    public double DesiredAccuracy { get; public set; }
    public bool IsListening { get; }
    public bool SupportsHeading { get; }
    public bool IsGeolocationAvailable { get; }
    public bool IsGeolocationEnabled { get; }
    public abstract virtual double get_DesiredAccuracy();
    public abstract virtual void set_DesiredAccuracy(double value);
    public abstract virtual bool get_IsListening();
    public abstract virtual bool get_SupportsHeading();
    public abstract virtual bool get_IsGeolocationAvailable();
    public abstract virtual bool get_IsGeolocationEnabled();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PositionChanged(EventHandler`1<PositionEventArgs> value);
    public abstract virtual Task`1<Position> GetPositionAsync(int timeout);
    public abstract virtual Task`1<Position> GetPositionAsync(int timeout, bool includeHeading);
    public abstract virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken);
    public abstract virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken, bool includeHeading);
    public abstract virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken);
    public abstract virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken, bool includeHeading);
    public abstract virtual void StartListening(UInt32 minTime, double minDistance);
    public abstract virtual void StartListening(UInt32 minTime, double minDistance, bool includeHeading);
    public abstract virtual void StopListening();
}
public class XLabs.Platform.Services.Geolocation.Position : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Altitude>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Accuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <AltitudeAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Heading>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Speed>k__BackingField;
    public DateTimeOffset Timestamp { get; public set; }
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public Nullable`1<double> Altitude { get; public set; }
    public Nullable`1<double> Accuracy { get; public set; }
    public Nullable`1<double> AltitudeAccuracy { get; public set; }
    public Nullable`1<double> Heading { get; public set; }
    public Nullable`1<double> Speed { get; public set; }
    public Position(Position position);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Altitude();
    [CompilerGeneratedAttribute]
public void set_Altitude(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Accuracy();
    [CompilerGeneratedAttribute]
public void set_Accuracy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_AltitudeAccuracy();
    [CompilerGeneratedAttribute]
public void set_AltitudeAccuracy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Heading();
    [CompilerGeneratedAttribute]
public void set_Heading(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Speed();
    [CompilerGeneratedAttribute]
public void set_Speed(Nullable`1<double> value);
}
public class XLabs.Platform.Services.Geolocation.PositionErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private GeolocationError <Error>k__BackingField;
    public GeolocationError Error { get; private set; }
    public PositionErrorEventArgs(GeolocationError error);
    [CompilerGeneratedAttribute]
public GeolocationError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(GeolocationError value);
}
public class XLabs.Platform.Services.Geolocation.PositionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    public Position Position { get; private set; }
    public PositionEventArgs(Position position);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(Position value);
}
[ExtensionAttribute]
public static class XLabs.Platform.Services.Geolocation.PositionExtensions : object {
    public static int EquatorRadius;
    [ExtensionAttribute]
public static double DistanceFrom(Position a, Position b);
    [ExtensionAttribute]
public static double BearingFrom(Position start, Position stop);
    [ExtensionAttribute]
public static double RadiansToDegrees(double rad);
    [ExtensionAttribute]
public static double DegreesToRadians(double deg);
}
public interface XLabs.Platform.Services.INavigationOptions {
    public object ViewModel { get; public set; }
    public bool Animated { get; public set; }
    public NavigationActionTypes NavigationAction { get; public set; }
    public bool Modal { get; public set; }
    public bool DisableBackButton { get; public set; }
    public abstract virtual object get_ViewModel();
    public abstract virtual void set_ViewModel(object value);
    public abstract virtual bool get_Animated();
    public abstract virtual void set_Animated(bool value);
    public abstract virtual NavigationActionTypes get_NavigationAction();
    public abstract virtual void set_NavigationAction(NavigationActionTypes value);
    public abstract virtual bool get_Modal();
    public abstract virtual void set_Modal(bool value);
    public abstract virtual bool get_DisableBackButton();
    public abstract virtual void set_DisableBackButton(bool value);
}
public interface XLabs.Platform.Services.INavigationService {
    public abstract virtual void RegisterPage(string pageKey, Type pageType);
    public abstract virtual void NavigateTo(string pageKey, bool animated, Object[] args);
    public abstract virtual void NavigateTo(Type pageType, bool animated, Object[] args);
    public abstract virtual void NavigateTo(bool animated, Object[] args);
    public abstract virtual void GoBack();
    public abstract virtual void GoForward();
}
public interface XLabs.Platform.Services.INavigationServiceV2 {
    public abstract virtual Task NavigateToAsync(INavigationOptions options);
    public abstract virtual Task NavigateToAsync(bool animated);
    public abstract virtual Task NavigateToAsync(INavigationOptions options);
    public abstract virtual Task NavigateToAsync(TViewModel viewModel, bool animated);
    public abstract virtual Task NavigateToAsync(TView view, TViewModel viewModel, bool animated);
    public abstract virtual Task NavigateToAsync(TView view, INavigationOptions options);
}
public interface XLabs.Platform.Services.INetwork {
    public abstract virtual Task`1<bool> IsReachable(string host, TimeSpan timeout);
    public abstract virtual Task`1<bool> IsReachableByWifi(string host, TimeSpan timeout);
    public abstract virtual NetworkStatus InternetConnectionStatus();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReachabilityChanged(Action`1<NetworkStatus> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReachabilityChanged(Action`1<NetworkStatus> value);
}
public interface XLabs.Platform.Services.INfcDevice {
    public bool IsEnabled { get; }
    public abstract virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public abstract virtual void add_DeviceInRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DeviceInRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DeviceOutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DeviceOutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public abstract virtual Guid PublishUri(Uri uri);
    public abstract virtual void Unpublish(Guid id);
}
public enum XLabs.Platform.Services.IO.FileAccess : Enum {
    public int value__;
    public static FileAccess Read;
    public static FileAccess Write;
    public static FileAccess ReadWrite;
}
public enum XLabs.Platform.Services.IO.FileMode : Enum {
    public int value__;
    public static FileMode CreateNew;
    public static FileMode Create;
    public static FileMode Open;
    public static FileMode OpenOrCreate;
    public static FileMode Truncate;
    public static FileMode Append;
}
[FlagsAttribute]
public enum XLabs.Platform.Services.IO.FileShare : Enum {
    public int value__;
    public static FileShare None;
    public static FileShare Read;
    public static FileShare Write;
    public static FileShare ReadWrite;
    public static FileShare Delete;
    public static FileShare Inheritable;
}
public interface XLabs.Platform.Services.IO.IFileManager {
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual Stream OpenFile(string path, FileMode mode, FileAccess access);
    public abstract virtual Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual bool FileExists(string path);
    public abstract virtual DateTimeOffset GetLastWriteTime(string path);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual void DeleteDirectory(string path);
}
public interface XLabs.Platform.Services.IPhoneService {
    public string CellularProvider { get; }
    public Nullable`1<bool> IsCellularDataEnabled { get; }
    public Nullable`1<bool> IsCellularDataRoamingEnabled { get; }
    public Nullable`1<bool> IsNetworkAvailable { get; }
    public string ICC { get; }
    public string MCC { get; }
    public string MNC { get; }
    public bool CanSendSMS { get; }
    public abstract virtual string get_CellularProvider();
    public abstract virtual Nullable`1<bool> get_IsCellularDataEnabled();
    public abstract virtual Nullable`1<bool> get_IsCellularDataRoamingEnabled();
    public abstract virtual Nullable`1<bool> get_IsNetworkAvailable();
    public abstract virtual string get_ICC();
    public abstract virtual string get_MCC();
    public abstract virtual string get_MNC();
    public abstract virtual bool get_CanSendSMS();
    public abstract virtual void DialNumber(string number);
    public abstract virtual void SendSMS(string to, string body);
}
public interface XLabs.Platform.Services.ISecureStorage {
    public abstract virtual void Store(string key, Byte[] dataBytes);
    public abstract virtual Byte[] Retrieve(string key);
    public abstract virtual void Delete(string key);
    public abstract virtual bool Contains(string key);
}
public interface XLabs.Platform.Services.ITextToSpeechService {
    public abstract virtual void Speak(string text, string language);
    public abstract virtual IEnumerable`1<string> GetInstalledLanguages();
}
public enum XLabs.Platform.Services.Media.CameraDevice : Enum {
    public int value__;
    public static CameraDevice Rear;
    public static CameraDevice Front;
}
public class XLabs.Platform.Services.Media.CameraMediaStorageOptions : MediaStorageOptions {
    [CompilerGeneratedAttribute]
private CameraDevice <DefaultCamera>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveMediaOnCapture>k__BackingField;
    public CameraDevice DefaultCamera { get; public set; }
    public bool SaveMediaOnCapture { get; public set; }
    [CompilerGeneratedAttribute]
public CameraDevice get_DefaultCamera();
    [CompilerGeneratedAttribute]
public void set_DefaultCamera(CameraDevice value);
    [CompilerGeneratedAttribute]
public bool get_SaveMediaOnCapture();
    [CompilerGeneratedAttribute]
public void set_SaveMediaOnCapture(bool value);
}
public interface XLabs.Platform.Services.Media.IAudioStream {
    public int SampleRate { get; }
    public int ChannelCount { get; }
    public int BitsPerSample { get; }
    public IEnumerable`1<int> SupportedSampleRates { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    public abstract virtual int get_SampleRate();
    public abstract virtual int get_ChannelCount();
    public abstract virtual int get_BitsPerSample();
    public abstract virtual IEnumerable`1<int> get_SupportedSampleRates();
    public abstract virtual Task`1<bool> Start(int sampleRate);
    public abstract virtual Task Stop();
}
public interface XLabs.Platform.Services.Media.IMediaPicker {
    public bool IsCameraAvailable { get; }
    public bool IsPhotosSupported { get; }
    public bool IsVideosSupported { get; }
    public EventHandler`1<MediaPickerArgs> OnMediaSelected { get; public set; }
    public EventHandler`1<MediaPickerErrorArgs> OnError { get; public set; }
    public abstract virtual bool get_IsCameraAvailable();
    public abstract virtual bool get_IsPhotosSupported();
    public abstract virtual bool get_IsVideosSupported();
    public abstract virtual Task`1<MediaFile> SelectPhotoAsync(CameraMediaStorageOptions options);
    public abstract virtual Task`1<MediaFile> TakePhotoAsync(CameraMediaStorageOptions options);
    public abstract virtual Task`1<MediaFile> SelectVideoAsync(VideoMediaStorageOptions options);
    public abstract virtual Task`1<MediaFile> TakeVideoAsync(VideoMediaStorageOptions options);
    public abstract virtual EventHandler`1<MediaPickerArgs> get_OnMediaSelected();
    public abstract virtual void set_OnMediaSelected(EventHandler`1<MediaPickerArgs> value);
    public abstract virtual EventHandler`1<MediaPickerErrorArgs> get_OnError();
    public abstract virtual void set_OnError(EventHandler`1<MediaPickerErrorArgs> value);
}
public interface XLabs.Platform.Services.Media.ISoundService {
    public double Volume { get; public set; }
    public double CurrentTime { get; }
    public bool IsPlaying { get; }
    public SoundFile CurrentFile { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_SoundFileFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SoundFileFinished(EventHandler value);
    public abstract virtual Task`1<SoundFile> PlayAsync(string filename, string extension);
    public abstract virtual Task`1<SoundFile> SetMediaAsync(string filename);
    public abstract virtual Task GoToAsync(double position);
    public abstract virtual void Play();
    public abstract virtual void Stop();
    public abstract virtual void Pause();
    public abstract virtual double get_Volume();
    public abstract virtual void set_Volume(double value);
    public abstract virtual double get_CurrentTime();
    public abstract virtual bool get_IsPlaying();
    public abstract virtual SoundFile get_CurrentFile();
}
[ExtensionAttribute]
public static class XLabs.Platform.Services.Media.MediaExtensions : object {
    [ExtensionAttribute]
public static void VerifyOptions(MediaStorageOptions self);
    [ExtensionAttribute]
public static string GetMediaFileWithPath(MediaStorageOptions self, string rootPath);
    [ExtensionAttribute]
public static string GetUniqueMediaFileWithPath(MediaStorageOptions self, string rootPath, Func`2<string, bool> checkExists);
}
public class XLabs.Platform.Services.Media.MediaFile : object {
    private Action`1<bool> _dispose;
    private string _path;
    private Func`1<Stream> _streamGetter;
    private bool _isDisposed;
    public string Path { get; }
    public Stream Source { get; }
    public JpegInfo Exif { get; }
    public MediaFile(string path, Func`1<Stream> streamGetter, Action`1<bool> dispose);
    protected virtual override void Finalize();
    public string get_Path();
    public Stream get_Source();
    public JpegInfo get_Exif();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public static class XLabs.Platform.Services.Media.MediaFileHelpers : object {
    public static string GetMediaFileWithPath(bool isPhoto, string folder, string subdir, string name);
    public static string GetUniqueMediaFileWithPath(bool isPhoto, string folder, string name, Func`2<string, bool> checkExists);
}
public class XLabs.Platform.Services.Media.MediaFileNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; private set; }
    public MediaFileNotFoundException(string path);
    public MediaFileNotFoundException(string path, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
public class XLabs.Platform.Services.Media.MediaPickerArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MediaFile <MediaFile>k__BackingField;
    public MediaFile MediaFile { get; private set; }
    public MediaPickerArgs(MediaFile mf);
    [CompilerGeneratedAttribute]
public MediaFile get_MediaFile();
    [CompilerGeneratedAttribute]
private void set_MediaFile(MediaFile value);
}
public class XLabs.Platform.Services.Media.MediaPickerErrorArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public Exception Error { get; private set; }
    public MediaPickerErrorArgs(Exception ex);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
}
public class XLabs.Platform.Services.Media.MediaStorageOptions : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxPixelDimension>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PercentQuality>k__BackingField;
    public string Directory { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<int> MaxPixelDimension { get; public set; }
    public Nullable`1<int> PercentQuality { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxPixelDimension();
    [CompilerGeneratedAttribute]
public void set_MaxPixelDimension(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PercentQuality();
    [CompilerGeneratedAttribute]
public void set_PercentQuality(Nullable`1<int> value);
}
public class XLabs.Platform.Services.Media.SoundFile : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public string Filename { get; public set; }
    public TimeSpan Duration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
}
public class XLabs.Platform.Services.Media.SoundFinishedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SoundFile <File>k__BackingField;
    public SoundFile File { get; public set; }
    public SoundFinishedEventArgs(SoundFile f);
    [CompilerGeneratedAttribute]
public SoundFile get_File();
    [CompilerGeneratedAttribute]
public void set_File(SoundFile value);
}
public class XLabs.Platform.Services.Media.VideoMediaStorageOptions : MediaStorageOptions {
    [CompilerGeneratedAttribute]
private CameraDevice <DefaultCamera>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveMediaOnCapture>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DesiredLength>k__BackingField;
    [CompilerGeneratedAttribute]
private VideoQuality <Quality>k__BackingField;
    public CameraDevice DefaultCamera { get; public set; }
    public bool SaveMediaOnCapture { get; public set; }
    public TimeSpan DesiredLength { get; public set; }
    public VideoQuality Quality { get; public set; }
    [CompilerGeneratedAttribute]
public CameraDevice get_DefaultCamera();
    [CompilerGeneratedAttribute]
public void set_DefaultCamera(CameraDevice value);
    [CompilerGeneratedAttribute]
public bool get_SaveMediaOnCapture();
    [CompilerGeneratedAttribute]
public void set_SaveMediaOnCapture(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DesiredLength();
    [CompilerGeneratedAttribute]
public void set_DesiredLength(TimeSpan value);
    [CompilerGeneratedAttribute]
public VideoQuality get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(VideoQuality value);
}
public enum XLabs.Platform.Services.Media.VideoQuality : Enum {
    public int value__;
    public static VideoQuality Low;
    public static VideoQuality Medium;
    public static VideoQuality High;
}
public class XLabs.Platform.Services.Media.WaveRecorder : object {
    private int _bitsPerSample;
    private int _byteCount;
    private int _channelCount;
    private int _sampleRate;
    private IAudioStream _stream;
    private BinaryWriter _writer;
    protected virtual override void Finalize();
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.WaveRecorder/<StartRecorder>d__7")]
public Task`1<bool> StartRecorder(IAudioStream stream, Stream fileStream, int sampleRate);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.WaveRecorder/<StopRecorder>d__8")]
public Task StopRecorder();
    private void OnStreamBroadcast(object sender, EventArgs`1<Byte[]> eventArgs);
    private void WriteHeader();
}
public enum XLabs.Platform.Services.NavigationActionTypes : Enum {
    public int value__;
    public static NavigationActionTypes None;
    public static NavigationActionTypes PopCurrentBefore;
    public static NavigationActionTypes PopToRootBefore;
}
public class XLabs.Platform.Services.NavigationOptions : object {
    [CompilerGeneratedAttribute]
private object <ViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationActionTypes <NavigationAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Modal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableBackButton>k__BackingField;
    public object ViewModel { get; public set; }
    public bool Animated { get; public set; }
    public NavigationActionTypes NavigationAction { get; public set; }
    public bool Modal { get; public set; }
    public bool DisableBackButton { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual object get_ViewModel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewModel(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Animated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Animated(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual NavigationActionTypes get_NavigationAction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NavigationAction(NavigationActionTypes value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Modal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Modal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableBackButton();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableBackButton(bool value);
}
public enum XLabs.Platform.Services.NdefType : Enum {
    public int value__;
    public static NdefType Uri;
}
public enum XLabs.Platform.Services.NetworkStatus : Enum {
    public int value__;
    public static NetworkStatus NotReachable;
    public static NetworkStatus ReachableViaCarrierDataNetwork;
    public static NetworkStatus ReachableViaWiFiNetwork;
    public static NetworkStatus ReachableViaUnknownNetwork;
}
