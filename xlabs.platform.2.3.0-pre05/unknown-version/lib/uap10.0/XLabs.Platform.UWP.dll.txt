public class DeviceInfo.DeviceProperties : object {
    private static string DebugTag;
    private String[] _wp80PhoneModelsWithAutoFocus;
    private static DeviceProperties _instance;
    private static object _syncLock;
    private MediaCapture _mediaCapture;
    private int _numberOfAsyncOperationsToComplete;
    private int _numberOfAsyncOperationsCompleted;
    [CompilerGeneratedAttribute]
private DisplayInfo <DisplayInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<bool> <IsReadyChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemainingBatteryCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBatteryStatusInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnectedToExternalPowerSupply>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PowerSavingModeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBackCamera>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFrontCamera>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBackCameraFlash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFrontCameraFlash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBackCameraAutoFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFrontCameraAutoFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Size> <BackCameraPhotoResolutions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Size> <FrontCameraPhotoResolutions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Size> <BackCameraVideoResolutions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Size> <FrontCameraVideoResolutions>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ApplicationCurrentMemoryUsageInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ApplicationMemoryUsageLimitInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ApplicationPeakMemoryUsageInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DeviceTotalMemoryInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Resolutions <ScreenResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <ScreenResolutionSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DisplaySizeInInches>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAccelerometerSensor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCompass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasGyroscopeSensor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasInclinometerSensor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasOrientationSensor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasProximitySensor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensorCoreActivityMonitorApiSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensorCorePlaceMonitorApiSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensorCoreStepCounterApiSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensorCoreTrackPointMonitorApiSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HardwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirmwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSDCardPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasVibrationDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessorCoreCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ThemeAccentColor>k__BackingField;
    internal static CoreDispatcher Dispatcher { get; }
    public DisplayInfo DisplayInfo { get; private set; }
    public EventHandler`1<bool> IsReadyChanged { get; public set; }
    public bool IsReady { get; private set; }
    public int RemainingBatteryCharge { get; private set; }
    public bool HasBatteryStatusInfo { get; private set; }
    public bool IsConnectedToExternalPowerSupply { get; private set; }
    public bool PowerSavingModeEnabled { get; private set; }
    public bool HasBackCamera { get; private set; }
    public bool HasFrontCamera { get; private set; }
    public bool HasBackCameraFlash { get; private set; }
    public bool HasFrontCameraFlash { get; private set; }
    public bool HasBackCameraAutoFocus { get; private set; }
    public bool HasFrontCameraAutoFocus { get; private set; }
    public List`1<Size> BackCameraPhotoResolutions { get; private set; }
    public List`1<Size> FrontCameraPhotoResolutions { get; private set; }
    public List`1<Size> BackCameraVideoResolutions { get; private set; }
    public List`1<Size> FrontCameraVideoResolutions { get; private set; }
    public ulong ApplicationCurrentMemoryUsageInBytes { get; private set; }
    public ulong ApplicationMemoryUsageLimitInBytes { get; private set; }
    public ulong ApplicationPeakMemoryUsageInBytes { get; public set; }
    public ulong DeviceTotalMemoryInBytes { get; public set; }
    public Resolutions ScreenResolution { get; private set; }
    public Size ScreenResolutionSize { get; private set; }
    public double DisplaySizeInInches { get; private set; }
    public bool HasAccelerometerSensor { get; private set; }
    public bool HasCompass { get; private set; }
    public bool HasGyroscopeSensor { get; private set; }
    public bool HasInclinometerSensor { get; private set; }
    public bool HasOrientationSensor { get; private set; }
    public bool HasProximitySensor { get; private set; }
    public bool SensorCoreActivityMonitorApiSupported { get; private set; }
    public bool SensorCorePlaceMonitorApiSupported { get; private set; }
    public bool SensorCoreStepCounterApiSupported { get; private set; }
    public bool SensorCoreTrackPointMonitorApiSupported { get; private set; }
    public string DeviceName { get; private set; }
    public string DeviceId { get; private set; }
    public string Manufacturer { get; private set; }
    public string HardwareVersion { get; private set; }
    public string FirmwareVersion { get; private set; }
    public bool HasSDCardPresent { get; private set; }
    public bool HasVibrationDevice { get; private set; }
    public int ProcessorCoreCount { get; private set; }
    public Color ThemeAccentColor { get; private set; }
    private static DeviceProperties();
    internal static CoreDispatcher get_Dispatcher();
    [CompilerGeneratedAttribute]
public DisplayInfo get_DisplayInfo();
    [CompilerGeneratedAttribute]
private void set_DisplayInfo(DisplayInfo value);
    [CompilerGeneratedAttribute]
public EventHandler`1<bool> get_IsReadyChanged();
    [CompilerGeneratedAttribute]
public void set_IsReadyChanged(EventHandler`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
private void set_IsReady(bool value);
    [CompilerGeneratedAttribute]
public int get_RemainingBatteryCharge();
    [CompilerGeneratedAttribute]
private void set_RemainingBatteryCharge(int value);
    [CompilerGeneratedAttribute]
public bool get_HasBatteryStatusInfo();
    [CompilerGeneratedAttribute]
private void set_HasBatteryStatusInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsConnectedToExternalPowerSupply();
    [CompilerGeneratedAttribute]
private void set_IsConnectedToExternalPowerSupply(bool value);
    [CompilerGeneratedAttribute]
public bool get_PowerSavingModeEnabled();
    [CompilerGeneratedAttribute]
private void set_PowerSavingModeEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasBackCamera();
    [CompilerGeneratedAttribute]
private void set_HasBackCamera(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasFrontCamera();
    [CompilerGeneratedAttribute]
private void set_HasFrontCamera(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasBackCameraFlash();
    [CompilerGeneratedAttribute]
private void set_HasBackCameraFlash(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasFrontCameraFlash();
    [CompilerGeneratedAttribute]
private void set_HasFrontCameraFlash(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasBackCameraAutoFocus();
    [CompilerGeneratedAttribute]
private void set_HasBackCameraAutoFocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasFrontCameraAutoFocus();
    [CompilerGeneratedAttribute]
private void set_HasFrontCameraAutoFocus(bool value);
    [CompilerGeneratedAttribute]
public List`1<Size> get_BackCameraPhotoResolutions();
    [CompilerGeneratedAttribute]
private void set_BackCameraPhotoResolutions(List`1<Size> value);
    [CompilerGeneratedAttribute]
public List`1<Size> get_FrontCameraPhotoResolutions();
    [CompilerGeneratedAttribute]
private void set_FrontCameraPhotoResolutions(List`1<Size> value);
    [CompilerGeneratedAttribute]
public List`1<Size> get_BackCameraVideoResolutions();
    [CompilerGeneratedAttribute]
private void set_BackCameraVideoResolutions(List`1<Size> value);
    [CompilerGeneratedAttribute]
public List`1<Size> get_FrontCameraVideoResolutions();
    [CompilerGeneratedAttribute]
private void set_FrontCameraVideoResolutions(List`1<Size> value);
    [CompilerGeneratedAttribute]
public ulong get_ApplicationCurrentMemoryUsageInBytes();
    [CompilerGeneratedAttribute]
private void set_ApplicationCurrentMemoryUsageInBytes(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ApplicationMemoryUsageLimitInBytes();
    [CompilerGeneratedAttribute]
private void set_ApplicationMemoryUsageLimitInBytes(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ApplicationPeakMemoryUsageInBytes();
    [CompilerGeneratedAttribute]
public void set_ApplicationPeakMemoryUsageInBytes(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_DeviceTotalMemoryInBytes();
    [CompilerGeneratedAttribute]
public void set_DeviceTotalMemoryInBytes(ulong value);
    [CompilerGeneratedAttribute]
public Resolutions get_ScreenResolution();
    [CompilerGeneratedAttribute]
private void set_ScreenResolution(Resolutions value);
    [CompilerGeneratedAttribute]
public Size get_ScreenResolutionSize();
    [CompilerGeneratedAttribute]
private void set_ScreenResolutionSize(Size value);
    [CompilerGeneratedAttribute]
public double get_DisplaySizeInInches();
    [CompilerGeneratedAttribute]
private void set_DisplaySizeInInches(double value);
    [CompilerGeneratedAttribute]
public bool get_HasAccelerometerSensor();
    [CompilerGeneratedAttribute]
private void set_HasAccelerometerSensor(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasCompass();
    [CompilerGeneratedAttribute]
private void set_HasCompass(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasGyroscopeSensor();
    [CompilerGeneratedAttribute]
private void set_HasGyroscopeSensor(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasInclinometerSensor();
    [CompilerGeneratedAttribute]
private void set_HasInclinometerSensor(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasOrientationSensor();
    [CompilerGeneratedAttribute]
private void set_HasOrientationSensor(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasProximitySensor();
    [CompilerGeneratedAttribute]
private void set_HasProximitySensor(bool value);
    [CompilerGeneratedAttribute]
public bool get_SensorCoreActivityMonitorApiSupported();
    [CompilerGeneratedAttribute]
private void set_SensorCoreActivityMonitorApiSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_SensorCorePlaceMonitorApiSupported();
    [CompilerGeneratedAttribute]
private void set_SensorCorePlaceMonitorApiSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_SensorCoreStepCounterApiSupported();
    [CompilerGeneratedAttribute]
private void set_SensorCoreStepCounterApiSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_SensorCoreTrackPointMonitorApiSupported();
    [CompilerGeneratedAttribute]
private void set_SensorCoreTrackPointMonitorApiSupported(bool value);
    [CompilerGeneratedAttribute]
public string get_DeviceName();
    [CompilerGeneratedAttribute]
private void set_DeviceName(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    [CompilerGeneratedAttribute]
private void set_DeviceId(string value);
    [CompilerGeneratedAttribute]
public string get_Manufacturer();
    [CompilerGeneratedAttribute]
private void set_Manufacturer(string value);
    [CompilerGeneratedAttribute]
public string get_HardwareVersion();
    [CompilerGeneratedAttribute]
private void set_HardwareVersion(string value);
    [CompilerGeneratedAttribute]
public string get_FirmwareVersion();
    [CompilerGeneratedAttribute]
private void set_FirmwareVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_HasSDCardPresent();
    [CompilerGeneratedAttribute]
private void set_HasSDCardPresent(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasVibrationDevice();
    [CompilerGeneratedAttribute]
private void set_HasVibrationDevice(bool value);
    [CompilerGeneratedAttribute]
public int get_ProcessorCoreCount();
    [CompilerGeneratedAttribute]
private void set_ProcessorCoreCount(int value);
    [CompilerGeneratedAttribute]
public Color get_ThemeAccentColor();
    [CompilerGeneratedAttribute]
private void set_ThemeAccentColor(Color value);
    public static DeviceProperties GetInstance();
    public void Resolve();
    [AsyncStateMachineAttribute("DeviceInfo.DeviceProperties/<ResolveAsync>d__186")]
public Task ResolveAsync();
    private void AsyncOperationComplete();
    [AsyncStateMachineAttribute("DeviceInfo.DeviceProperties/<NotifyIsReadyChangedAsync>d__188")]
private void NotifyIsReadyChangedAsync();
    private void ResolvePowerInfo();
    [AsyncStateMachineAttribute("DeviceInfo.DeviceProperties/<ResolveCameraInfoAsync>d__190")]
private Task ResolveCameraInfoAsync();
    private List`1<Size> ResolveCameraResolutions(MediaCapture mediaCapture, MediaStreamType mediaStreamType);
    private void ResolveMemoryInfo();
    [AsyncStateMachineAttribute("DeviceInfo.DeviceProperties/<ResolveScreenResolutionAsync>d__193")]
private Task ResolveScreenResolutionAsync();
    private void ResolveSensorInfo();
    private void ResolveDeviceInformation();
    private void ResolveDeviceId();
    [AsyncStateMachineAttribute("DeviceInfo.DeviceProperties/<ResolveSDCardInfoAsync>d__197")]
private Task ResolveSDCardInfoAsync();
    private void ResolveVibrationDeviceInfo();
    private void ResolveProcessorCoreCount();
    [AsyncStateMachineAttribute("DeviceInfo.DeviceProperties/<ResolveUiThemeAsync>d__200")]
private Task ResolveUiThemeAsync();
    public static double TransformBytes(ulong bytes, UnitPrefixes toUnit, int numberOfDecimals);
    [AsyncStateMachineAttribute("DeviceInfo.DeviceProperties/<DumpDeviceInformation>d__202")]
public static Task DumpDeviceInformation();
    private void SortSizesFromHighestToLowest(List`1<Size> sizes);
    [CompilerGeneratedAttribute]
private void <ResolveAsync>b__186_0();
    [CompilerGeneratedAttribute]
private void <NotifyIsReadyChangedAsync>b__188_0();
}
public class DeviceInfo.DisplayInfo : object {
    [CompilerGeneratedAttribute]
private DisplayOrientations <CurrentOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LogicalDpi>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayOrientations <NativeOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RawDpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RawDpiY>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolutionScale <ResolutionScale>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StereoEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RawPixelsPerViewPixel>k__BackingField;
    public DisplayOrientations CurrentOrientation { get; internal set; }
    public float LogicalDpi { get; internal set; }
    public DisplayOrientations NativeOrientation { get; internal set; }
    public float RawDpiX { get; internal set; }
    public float RawDpiY { get; internal set; }
    public ResolutionScale ResolutionScale { get; internal set; }
    public bool StereoEnabled { get; internal set; }
    public double RawPixelsPerViewPixel { get; public set; }
    [CompilerGeneratedAttribute]
public DisplayOrientations get_CurrentOrientation();
    [CompilerGeneratedAttribute]
internal void set_CurrentOrientation(DisplayOrientations value);
    [CompilerGeneratedAttribute]
public float get_LogicalDpi();
    [CompilerGeneratedAttribute]
internal void set_LogicalDpi(float value);
    [CompilerGeneratedAttribute]
public DisplayOrientations get_NativeOrientation();
    [CompilerGeneratedAttribute]
internal void set_NativeOrientation(DisplayOrientations value);
    [CompilerGeneratedAttribute]
public float get_RawDpiX();
    [CompilerGeneratedAttribute]
internal void set_RawDpiX(float value);
    [CompilerGeneratedAttribute]
public float get_RawDpiY();
    [CompilerGeneratedAttribute]
internal void set_RawDpiY(float value);
    [CompilerGeneratedAttribute]
public ResolutionScale get_ResolutionScale();
    [CompilerGeneratedAttribute]
internal void set_ResolutionScale(ResolutionScale value);
    [CompilerGeneratedAttribute]
public bool get_StereoEnabled();
    [CompilerGeneratedAttribute]
internal void set_StereoEnabled(bool value);
    [CompilerGeneratedAttribute]
public double get_RawPixelsPerViewPixel();
    [CompilerGeneratedAttribute]
public void set_RawPixelsPerViewPixel(double value);
}
internal interface ProcessedByFody {
}
[ExtensionAttribute]
public static class XLabs.Platform.ColorExtensions : object {
    [ExtensionAttribute]
public static Brush ToBrush(Color color);
    [ExtensionAttribute]
public static Color ToMediaColor(Color color);
}
public class XLabs.Platform.Device.Accelerometer : object {
    [CompilerGeneratedAttribute]
private AccelerometerInterval <Interval>k__BackingField;
    public static double Gravitation;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Vector3>> readingAvailable;
    [CompilerGeneratedAttribute]
private Vector3 <LatestReading>k__BackingField;
    public AccelerometerInterval Interval { get; public set; }
    public Vector3 LatestReading { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual AccelerometerInterval get_Interval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Interval(AccelerometerInterval value);
    private void AccelerometerOnReadingChanged(Accelerometer sender, AccelerometerReadingChangedEventArgs args);
    public sealed virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void add_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void remove_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_LatestReading();
    [CompilerGeneratedAttribute]
private void set_LatestReading(Vector3 value);
    private void Start();
    private void Stop();
}
public class XLabs.Platform.Device.AudioStream : object {
    private MediaCapture _capture;
    private InMemoryRandomAccessStream _buffer;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Byte[]>> OnBroadcast;
    [CompilerGeneratedAttribute]
private int <SampleRate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChannelCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<int> <SupportedSampleRates>k__BackingField;
    public static bool Recording;
    public int SampleRate { get; }
    public int ChannelCount { get; }
    public int BitsPerSample { get; }
    public IEnumerable`1<int> SupportedSampleRates { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SampleRate();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ChannelCount();
    [CompilerGeneratedAttribute]
public sealed virtual int get_BitsPerSample();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<int> get_SupportedSampleRates();
    [AsyncStateMachineAttribute("XLabs.Platform.Device.AudioStream/<Init>d__18")]
public Task`1<bool> Init(int sampleRate);
    [AsyncStateMachineAttribute("XLabs.Platform.Device.AudioStream/<Start>d__19")]
public sealed virtual Task`1<bool> Start(int sampleRate);
    [AsyncStateMachineAttribute("XLabs.Platform.Device.AudioStream/<Stop>d__20")]
public sealed virtual Task Stop();
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("XLabs.Platform.Device.AudioStream/<<Init>b__18_0>d")]
private void <Init>b__18_0(MediaCapture sender);
}
public class XLabs.Platform.Device.Battery : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs`1<int>> onLevelChange;
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs`1<bool>> onChargerStatusChanged;
    public bool Charging { get; }
    public int Level { get; }
    public sealed virtual bool get_Charging();
    public sealed virtual void add_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    public sealed virtual void remove_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    public sealed virtual void add_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    public sealed virtual void remove_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
private static void add_onLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
private static void remove_onLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
private static void add_onChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
private static void remove_onChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    private void StartLevelMonitoring();
    private void StopLevelMonitoring();
    private void StartChargerMonitoring();
    private void StopChargerMonitoring();
    public sealed virtual int get_Level();
    private void OnRemainingChargePercentChanged(object sender, object o);
    private void OnPowerSourceChanged(object sender, EventArgs eventArgs);
}
public class XLabs.Platform.Device.BluetoothDevice : object {
    private StreamSocket _socket;
    private PeerInformation _device;
    public string Name { get; }
    public string Address { get; }
    public Stream InputStream { get; }
    public Stream OutputStream { get; }
    private string ServiceName { get; }
    public BluetoothDevice(PeerInformation peerInfo);
    public sealed virtual string get_Name();
    public sealed virtual string get_Address();
    public sealed virtual Stream get_InputStream();
    public sealed virtual Stream get_OutputStream();
    private string get_ServiceName();
    [AsyncStateMachineAttribute("XLabs.Platform.Device.BluetoothDevice/<Connect>d__13")]
public sealed virtual Task Connect();
    public sealed virtual void Disconnect();
}
public class XLabs.Platform.Device.BluetoothHub : object {
    public bool Enabled { get; }
    public sealed virtual bool get_Enabled();
    public sealed virtual Task OpenSettings();
    [AsyncStateMachineAttribute("XLabs.Platform.Device.BluetoothHub/<GetPairedDevices>d__4")]
public sealed virtual Task`1<IReadOnlyList`1<IBluetoothDevice>> GetPairedDevices();
}
public class XLabs.Platform.Device.Display : object {
    private DeviceProperties _deviceProperties;
    public int Height { get; }
    public int Width { get; }
    public double Xdpi { get; }
    public double Ydpi { get; }
    public double Scale { get; }
    private static DisplayInformation Info { get; }
    public virtual string ToString();
    public sealed virtual int get_Height();
    public sealed virtual int get_Width();
    public sealed virtual double get_Xdpi();
    public sealed virtual double get_Ydpi();
    public sealed virtual double get_Scale();
    public sealed virtual double WidthRequestInInches(double inches);
    public sealed virtual double HeightRequestInInches(double inches);
    private static DisplayInformation get_Info();
}
public class XLabs.Platform.Device.Gyroscope : object {
    [CompilerGeneratedAttribute]
private AccelerometerInterval <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Vector3>> readingAvailable;
    [CompilerGeneratedAttribute]
private Vector3 <LatestReading>k__BackingField;
    public AccelerometerInterval Interval { get; public set; }
    public Vector3 LatestReading { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual AccelerometerInterval get_Interval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Interval(AccelerometerInterval value);
    private void GyroscopeReadingChanged(Gyrometer sender, GyrometerReadingChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void add_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void remove_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_LatestReading();
    [CompilerGeneratedAttribute]
private void set_LatestReading(Vector3 value);
    private void Start();
    private void Stop();
}
public class XLabs.Platform.Device.WindowsDevice : object {
    private static IDevice _currentDevice;
    private IBluetoothHub _bluetoothHub;
    private IFileManager _fileManager;
    private IMediaPicker _mediaPicker;
    private INetwork _network;
    private IAudioStream _microphone;
    private IPhoneService _phoneService;
    private IBattery _battery;
    private IDisplay _display;
    private IAccelerometer _accelerometer;
    private IGyroscope _gyroscope;
    private Orientation _orientation;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirmwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HardwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TimeZoneOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguageCode>k__BackingField;
    private PropertyChangedEventHandler PropertyChanged;
    public static IDevice CurrentDevice { get; public set; }
    public IFileManager FileManager { get; public set; }
    public IMediaPicker MediaPicker { get; public set; }
    public IDisplay Display { get; public set; }
    public IPhoneService PhoneService { get; public set; }
    public IBattery Battery { get; public set; }
    public IAccelerometer Accelerometer { get; public set; }
    public IGyroscope Gyroscope { get; public set; }
    public INetwork Network { get; public set; }
    public IBluetoothHub BluetoothHub { get; public set; }
    public IAudioStream Microphone { get; public set; }
    public string Id { get; private set; }
    public string Name { get; private set; }
    public string FirmwareVersion { get; private set; }
    public string HardwareVersion { get; private set; }
    public string Manufacturer { get; private set; }
    public long TotalMemory { get; private set; }
    public double TimeZoneOffset { get; private set; }
    public string TimeZone { get; private set; }
    public string LanguageCode { get; private set; }
    public Orientation Orientation { get; private set; }
    public static IDevice get_CurrentDevice();
    public static void set_CurrentDevice(IDevice value);
    public sealed virtual IFileManager get_FileManager();
    public void set_FileManager(IFileManager value);
    public sealed virtual IMediaPicker get_MediaPicker();
    public void set_MediaPicker(IMediaPicker value);
    public sealed virtual IDisplay get_Display();
    public void set_Display(IDisplay value);
    public sealed virtual IPhoneService get_PhoneService();
    public void set_PhoneService(IPhoneService value);
    public sealed virtual IBattery get_Battery();
    public void set_Battery(IBattery value);
    public sealed virtual IAccelerometer get_Accelerometer();
    public void set_Accelerometer(IAccelerometer value);
    public sealed virtual IGyroscope get_Gyroscope();
    public void set_Gyroscope(IGyroscope value);
    public sealed virtual INetwork get_Network();
    public void set_Network(INetwork value);
    public sealed virtual IBluetoothHub get_BluetoothHub();
    public void set_BluetoothHub(IBluetoothHub value);
    public sealed virtual IAudioStream get_Microphone();
    public void set_Microphone(IAudioStream value);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FirmwareVersion();
    [CompilerGeneratedAttribute]
private void set_FirmwareVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HardwareVersion();
    [CompilerGeneratedAttribute]
private void set_HardwareVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Manufacturer();
    [CompilerGeneratedAttribute]
private void set_Manufacturer(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TotalMemory();
    [CompilerGeneratedAttribute]
private void set_TotalMemory(long value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_TimeZoneOffset();
    [CompilerGeneratedAttribute]
private void set_TimeZoneOffset(double value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeZone();
    [CompilerGeneratedAttribute]
private void set_TimeZone(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LanguageCode();
    [CompilerGeneratedAttribute]
private void set_LanguageCode(string value);
    public sealed virtual Orientation get_Orientation();
    private void set_Orientation(Orientation value);
    [AsyncStateMachineAttribute("XLabs.Platform.Device.WindowsDevice/<LaunchUriAsync>d__85")]
public sealed virtual Task`1<bool> LaunchUriAsync(Uri uri);
    [AsyncStateMachineAttribute("XLabs.Platform.Device.WindowsDevice/<Refresh>d__86")]
public Task Refresh();
    private void Query();
    private void QueryOrientation();
    private void QueryLanguageCode();
    private void QueryTimeZoneName();
    private void QueryTimeZoneOffset();
    private void QueryDeviceMemory();
    private void QueryDeviceDetails();
    [CompilerGeneratedAttribute]
private void <Refresh>b__86_0(object sender, bool b);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void OnPropertyChanged(string propertyName);
}
[ExtensionAttribute]
public static class XLabs.Platform.DeviceExtensions : object {
    [ExtensionAttribute]
public static Task`1<bool> DriveTo(IDevice device, Position position);
}
public class XLabs.Platform.Services.FontService : object {
    public IEnumerable`1<string> GetFontNames();
}
[ExtensionAttribute]
public static class XLabs.Platform.Services.Geolocation.CoordinateExtensions : object {
    [ExtensionAttribute]
public static Position GetPosition(Geocoordinate geocoordinate);
}
public class XLabs.Platform.Services.Geolocation.Geolocator : object {
    private Geolocator _locator;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionErrorEventArgs> PositionError;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionEventArgs> PositionChanged;
    [CompilerGeneratedAttribute]
private bool <IsListening>k__BackingField;
    public double DesiredAccuracy { get; public set; }
    public bool IsListening { get; private set; }
    public bool SupportsHeading { get; }
    public bool IsGeolocationAvailable { get; }
    public bool IsGeolocationEnabled { get; }
    private void LocatorPositionChanged(Geolocator sender, PositionChangedEventArgs args);
    private void LocatorStatusChanged(Geolocator sender, StatusChangedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionChanged(EventHandler`1<PositionEventArgs> value);
    public sealed virtual double get_DesiredAccuracy();
    public sealed virtual void set_DesiredAccuracy(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsListening();
    [CompilerGeneratedAttribute]
private void set_IsListening(bool value);
    public sealed virtual bool get_SupportsHeading();
    public sealed virtual bool get_IsGeolocationAvailable();
    public sealed virtual bool get_IsGeolocationEnabled();
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Geolocation.Geolocator/<GetPositionAsync>d__23")]
public sealed virtual Task`1<Position> GetPositionAsync(int timeout);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Geolocation.Geolocator/<GetPositionAsync>d__24")]
public sealed virtual Task`1<Position> GetPositionAsync(int timeout, bool includeHeading);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Geolocation.Geolocator/<GetPositionAsync>d__25")]
public sealed virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken);
    public sealed virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken, bool includeHeading);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken, bool includeHeading);
    public sealed virtual void StartListening(UInt32 minTime, double minDistance);
    public sealed virtual void StartListening(UInt32 minTime, double minDistance, bool includeHeading);
    public sealed virtual void StopListening();
}
public class XLabs.Platform.Services.Media.SoundService : object {
    private bool isScrubbing;
    [CompilerGeneratedAttribute]
private bool <IsPlaying>k__BackingField;
    [CompilerGeneratedAttribute]
private SoundFile <CurrentFile>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler SoundFileFinished;
    public static MediaElement GlobalMediaElement { get; }
    public bool IsPlaying { get; private set; }
    public double CurrentTime { get; }
    public double Volume { get; public set; }
    public SoundFile CurrentFile { get; private set; }
    public static MediaElement get_GlobalMediaElement();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPlaying();
    [CompilerGeneratedAttribute]
private void set_IsPlaying(bool value);
    public sealed virtual double get_CurrentTime();
    public sealed virtual double get_Volume();
    public sealed virtual void set_Volume(double value);
    [CompilerGeneratedAttribute]
public sealed virtual SoundFile get_CurrentFile();
    [CompilerGeneratedAttribute]
private void set_CurrentFile(SoundFile value);
    public sealed virtual void Play();
    public sealed virtual void Stop();
    public sealed virtual void Pause();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SoundFileFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SoundFileFinished(EventHandler value);
    protected virtual void OnFileFinished(SoundFinishedEventArgs e);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.SoundService/<PlayAsync>d__24")]
public sealed virtual Task`1<SoundFile> PlayAsync(string filename, string extension);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Media.SoundService/<SetMediaAsync>d__25")]
public sealed virtual Task`1<SoundFile> SetMediaAsync(string filename);
    private void GlobalMediaElementMediaOpened(object sender, RoutedEventArgs e);
    private void GlobalMediaElementMediaEnded(object sender, RoutedEventArgs e);
    public sealed virtual Task GoToAsync(double position);
    [CompilerGeneratedAttribute]
private void <GoToAsync>b__28_0();
}
public class XLabs.Platform.Services.Network : object {
    private NetworkStatus _networkStatus;
    [CompilerGeneratedAttribute]
private Action`1<NetworkStatus> reachabilityChanged;
    private bool IsConnected { get; }
    public sealed virtual NetworkStatus InternetConnectionStatus();
    [CompilerGeneratedAttribute]
private void add_reachabilityChanged(Action`1<NetworkStatus> value);
    [CompilerGeneratedAttribute]
private void remove_reachabilityChanged(Action`1<NetworkStatus> value);
    public sealed virtual void add_ReachabilityChanged(Action`1<NetworkStatus> value);
    public sealed virtual void remove_ReachabilityChanged(Action`1<NetworkStatus> value);
    private void NetworkInformationOnNetworkStatusChanged(object sender);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Network/<IsReachable>d__10")]
public sealed virtual Task`1<bool> IsReachable(string host, TimeSpan timeout);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.Network/<IsReachableByWifi>d__11")]
public sealed virtual Task`1<bool> IsReachableByWifi(string host, TimeSpan timeout);
    private bool get_IsConnected();
    internal static byte GetConnectionGeneration();
}
public class XLabs.Platform.Services.NfcDevice : object {
    private Nullable`1<long> _publishId;
    private ProximityDevice _device;
    private Dictionary`2<Guid, long> _published;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<INfcDevice>> InRange;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<INfcDevice>> OutOfRange;
    public string DeviceId { get; }
    public bool IsEnabled { get; }
    public NfcDevice(ProximityDevice proximityDevice);
    [CompilerGeneratedAttribute]
private void add_InRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
private void remove_InRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
private void add_OutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    [CompilerGeneratedAttribute]
private void remove_OutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    private void DeviceArrived(ProximityDevice sender);
    private void DeviceDeparted(ProximityDevice sender);
    public string get_DeviceId();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void add_DeviceInRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual void remove_DeviceInRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual void add_DeviceOutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual void remove_DeviceOutOfRange(EventHandler`1<EventArgs`1<INfcDevice>> value);
    public sealed virtual Guid PublishUri(Uri uri);
    public sealed virtual void Unpublish(Guid id);
}
public class XLabs.Platform.Services.SecureStorage : object {
    private static DataProtectionProvider _dataProtectionProvider;
    private Byte[] _optionalEntropy;
    private static ApplicationData AppStorage { get; }
    public SecureStorage(Byte[] optionalEntropy);
    private static SecureStorage();
    private static ApplicationData get_AppStorage();
    [AsyncStateMachineAttribute("XLabs.Platform.Services.SecureStorage/<Store>d__6")]
public sealed virtual void Store(string key, Byte[] dataBytes);
    public sealed virtual Byte[] Retrieve(string key);
    [AsyncStateMachineAttribute("XLabs.Platform.Services.SecureStorage/<Delete>d__8")]
public sealed virtual void Delete(string key);
    public sealed virtual bool Contains(string key);
}
public class XLabs.Platform.Services.TextToSpeechService : object {
    private static string DEFAULT_LOCALE;
    private SpeechSynthesizer _synth;
    public static MediaElement GlobalMediaElement { get; }
    public static MediaElement get_GlobalMediaElement();
    [AsyncStateMachineAttribute("XLabs.Platform.Services.TextToSpeechService/<Speak>d__5")]
public sealed virtual void Speak(string text, string language);
    public sealed virtual IEnumerable`1<string> GetInstalledLanguages();
}
[ExtensionAttribute]
public static class XLabs.Platform.VectorExtensions : object {
    [ExtensionAttribute]
public static Vector3 AsVector3(AccelerometerReading reading);
    [ExtensionAttribute]
public static Vector3 AsVector3(GyrometerReading reading);
}
