public class XLabs.Platform.Device.Accelerometer : object {
    private AccelerometerInterval _interval;
    public static double Gravitation;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Vector3>> readingAvailable;
    [CompilerGeneratedAttribute]
private Vector3 <LatestReading>k__BackingField;
    public AccelerometerInterval Interval { get; public set; }
    public Vector3 LatestReading { get; private set; }
    public sealed virtual AccelerometerInterval get_Interval();
    public sealed virtual void set_Interval(AccelerometerInterval value);
    private void HandleAcceleration(object sender, UIAccelerometerEventArgs e);
    public sealed virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void add_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void remove_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_LatestReading();
    [CompilerGeneratedAttribute]
private void set_LatestReading(Vector3 value);
    private void Start();
    private void Stop();
}
public abstract class XLabs.Platform.Device.AppleDevice : object {
    protected static string PhoneExpression;
    protected static string PodExpression;
    protected static string PadExpression;
    private static int CtlHw;
    private static int HwPhysmem;
    private static IDevice device;
    private static long DeviceTotalMemory;
    private IFileManager fileManager;
    private IBluetoothHub bluetoothHub;
    private IAudioStream microphone;
    [CompilerGeneratedAttribute]
private IDisplay <Display>k__BackingField;
    [CompilerGeneratedAttribute]
private IPhoneService <PhoneService>k__BackingField;
    [CompilerGeneratedAttribute]
private IBattery <Battery>k__BackingField;
    [CompilerGeneratedAttribute]
private IMediaPicker <MediaPicker>k__BackingField;
    [CompilerGeneratedAttribute]
private INetwork <Network>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccelerometer <Accelerometer>k__BackingField;
    [CompilerGeneratedAttribute]
private IGyroscope <Gyroscope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirmwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HardwareVersion>k__BackingField;
    public static IDevice CurrentDevice { get; public set; }
    public string Id { get; }
    public IDisplay Display { get; protected set; }
    public IPhoneService PhoneService { get; protected set; }
    public IBattery Battery { get; protected set; }
    public IMediaPicker MediaPicker { get; private set; }
    public INetwork Network { get; private set; }
    public IAccelerometer Accelerometer { get; protected set; }
    public IGyroscope Gyroscope { get; private set; }
    public IAudioStream Microphone { get; }
    public IFileManager FileManager { get; }
    public string Name { get; protected set; }
    public string FirmwareVersion { get; protected set; }
    public string HardwareVersion { get; protected set; }
    public string Manufacturer { get; }
    public IBluetoothHub BluetoothHub { get; }
    public long TotalMemory { get; }
    public string LanguageCode { get; }
    public double TimeZoneOffset { get; }
    public string TimeZone { get; }
    public Orientation Orientation { get; }
    private static AppleDevice();
    public static IDevice get_CurrentDevice();
    public static void set_CurrentDevice(IDevice value);
    internal static int sysctlbyname(string property, IntPtr output, IntPtr oldLen, IntPtr newp, UInt32 newlen);
    internal static int sysctl(Int32[] name, UInt32 namelen, UInt32& oldp, Int32& oldlenp, IntPtr newp, UInt32 newlen);
    public static string GetSystemProperty(string property);
    public virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IDisplay get_Display();
    [CompilerGeneratedAttribute]
protected void set_Display(IDisplay value);
    [CompilerGeneratedAttribute]
public sealed virtual IPhoneService get_PhoneService();
    [CompilerGeneratedAttribute]
protected void set_PhoneService(IPhoneService value);
    [CompilerGeneratedAttribute]
public sealed virtual IBattery get_Battery();
    [CompilerGeneratedAttribute]
protected void set_Battery(IBattery value);
    [CompilerGeneratedAttribute]
public sealed virtual IMediaPicker get_MediaPicker();
    [CompilerGeneratedAttribute]
private void set_MediaPicker(IMediaPicker value);
    [CompilerGeneratedAttribute]
public sealed virtual INetwork get_Network();
    [CompilerGeneratedAttribute]
private void set_Network(INetwork value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccelerometer get_Accelerometer();
    [CompilerGeneratedAttribute]
protected void set_Accelerometer(IAccelerometer value);
    [CompilerGeneratedAttribute]
public sealed virtual IGyroscope get_Gyroscope();
    [CompilerGeneratedAttribute]
private void set_Gyroscope(IGyroscope value);
    public sealed virtual IAudioStream get_Microphone();
    public sealed virtual IFileManager get_FileManager();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FirmwareVersion();
    [CompilerGeneratedAttribute]
protected void set_FirmwareVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HardwareVersion();
    [CompilerGeneratedAttribute]
protected void set_HardwareVersion(string value);
    public sealed virtual string get_Manufacturer();
    public sealed virtual IBluetoothHub get_BluetoothHub();
    public sealed virtual long get_TotalMemory();
    public sealed virtual string get_LanguageCode();
    public sealed virtual double get_TimeZoneOffset();
    public sealed virtual string get_TimeZone();
    public sealed virtual Orientation get_Orientation();
    public sealed virtual Task`1<bool> LaunchUriAsync(Uri uri);
    public static DeviceInfo GetDeviceInfo();
    private static UInt32 GetTotalMemory();
}
public class XLabs.Platform.Device.Battery : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs`1<int>> onLevelChange;
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs`1<bool>> onChargerStatusChanged;
    public int Level { get; }
    public bool Charging { get; }
    public sealed virtual int get_Level();
    public sealed virtual bool get_Charging();
    public sealed virtual void add_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    public sealed virtual void remove_OnLevelChange(EventHandler`1<EventArgs`1<int>> value);
    public sealed virtual void add_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    public sealed virtual void remove_OnChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
private static void add_onLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
private static void remove_onLevelChange(EventHandler`1<EventArgs`1<int>> value);
    [CompilerGeneratedAttribute]
private static void add_onChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
private static void remove_onChargerStatusChanged(EventHandler`1<EventArgs`1<bool>> value);
    private void StartLevelMonitoring();
    private void StopLevelMonitoring();
    private void StartChargerMonitoring();
    private void StopChargerMonitoring();
    [CompilerGeneratedAttribute]
private void <StartLevelMonitoring>b__16_0(NSNotification n);
    [CompilerGeneratedAttribute]
private void <StartChargerMonitoring>b__18_0(NSNotification n);
}
public class XLabs.Platform.Device.BluetoothDevice : object {
    private CBPeripheral device;
    public string Name { get; }
    public string Address { get; }
    public Stream InputStream { get; }
    public Stream OutputStream { get; }
    public BluetoothDevice(CBPeripheral device);
    public sealed virtual Task Connect();
    public sealed virtual void Disconnect();
    public sealed virtual string get_Name();
    public sealed virtual string get_Address();
    public sealed virtual Stream get_InputStream();
    public sealed virtual Stream get_OutputStream();
}
public class XLabs.Platform.Device.BluetoothHub : CBCentralManagerDelegate {
    private static string SerialPortUuid;
    private static string TransferServiceUuid;
    private static string TransferCharacteristicUuid;
    private CBCentralManager manager;
    public bool Enabled { get; }
    public sealed virtual bool get_Enabled();
    [AsyncStateMachineAttribute("XLabs.Platform.Device.BluetoothHub/<GetPairedDevices>d__7")]
public sealed virtual Task`1<IReadOnlyList`1<IBluetoothDevice>> GetPairedDevices();
    private void manager_DiscoveredPeripheral(object sender, CBDiscoveredPeripheralEventArgs e);
    private void ManagerOnRetrievedConnectedPeripherals(object sender, CBPeripheralsEventArgs cbPeripheralsEventArgs);
    public sealed virtual Task OpenSettings();
    public virtual void UpdatedState(CBCentralManager central);
    [CompilerGeneratedAttribute]
private List`1<IBluetoothDevice> <GetPairedDevices>b__7_0();
}
public class XLabs.Platform.Device.DeviceInfo : object {
    [CompilerGeneratedAttribute]
private DeviceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinorVersion>k__BackingField;
    public DeviceType Type { get; private set; }
    public int MajorVersion { get; private set; }
    public int MinorVersion { get; private set; }
    internal DeviceInfo(DeviceType type, int majorVersion, int minorVersion);
    [CompilerGeneratedAttribute]
public DeviceType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(DeviceType value);
    [CompilerGeneratedAttribute]
public int get_MajorVersion();
    [CompilerGeneratedAttribute]
private void set_MajorVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinorVersion();
    [CompilerGeneratedAttribute]
private void set_MinorVersion(int value);
}
public enum XLabs.Platform.Device.DeviceType : Enum {
    public int value__;
    public static DeviceType Phone;
    public static DeviceType Pad;
    public static DeviceType Pod;
    public static DeviceType Simulator;
}
public class XLabs.Platform.Device.Display : object {
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Xdpi>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ydpi>k__BackingField;
    public int Height { get; private set; }
    public int Width { get; private set; }
    public double Xdpi { get; private set; }
    public double Ydpi { get; private set; }
    public double Scale { get; }
    internal Display(int height, int width, double xdpi, double ydpi);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Xdpi();
    [CompilerGeneratedAttribute]
private void set_Xdpi(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Ydpi();
    [CompilerGeneratedAttribute]
private void set_Ydpi(double value);
    public sealed virtual double get_Scale();
    public sealed virtual double WidthRequestInInches(double inches);
    public sealed virtual double HeightRequestInInches(double inches);
}
public class XLabs.Platform.Device.Gyroscope : object {
    private CMMotionManager _motionManager;
    [CompilerGeneratedAttribute]
private AccelerometerInterval <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Vector3>> readingAvailable;
    [CompilerGeneratedAttribute]
private Vector3 <LatestReading>k__BackingField;
    public AccelerometerInterval Interval { get; public set; }
    public static bool IsSupported { get; }
    public Vector3 LatestReading { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual AccelerometerInterval get_Interval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Interval(AccelerometerInterval value);
    public static bool get_IsSupported();
    private void OnUpdate(CMGyroData gyroData, NSError error);
    [CompilerGeneratedAttribute]
private void add_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
private void remove_readingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void add_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    public sealed virtual void remove_ReadingAvailable(EventHandler`1<EventArgs`1<Vector3>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_LatestReading();
    [CompilerGeneratedAttribute]
private void set_LatestReading(Vector3 value);
    private void Start();
    private void Stop();
}
public class XLabs.Platform.Device.Pad : AppleDevice {
    [CompilerGeneratedAttribute]
private IPadVersion <Version>k__BackingField;
    public IPadVersion Version { get; private set; }
    public Pad(int majorVersion, int minorVersion);
    [CompilerGeneratedAttribute]
public IPadVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(IPadVersion value);
}
public class XLabs.Platform.Device.Phone : AppleDevice {
    [CompilerGeneratedAttribute]
private PhoneType <Version>k__BackingField;
    public PhoneType Version { get; private set; }
    public Phone(int majorVersion, int minorVersion);
    [CompilerGeneratedAttribute]
public PhoneType get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(PhoneType value);
}
public class XLabs.Platform.Device.Pod : AppleDevice {
    [CompilerGeneratedAttribute]
private PodVersion <Version>k__BackingField;
    public PodVersion Version { get; private set; }
    public Pod(int majorVersion, int minorVersion);
    [CompilerGeneratedAttribute]
public PodVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(PodVersion value);
}
public class XLabs.Platform.Device.Simulator : AppleDevice {
}
[ExtensionAttribute]
public static class XLabs.Platform.Extensions.EnumExtensions : object {
    [ExtensionAttribute]
public static string GetDescription(Enum value);
}
internal class XLabs.Platform.Extensions.NsDataStream : UnmanagedMemoryStream {
    private NSData _data;
    public NsDataStream(NSData data);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class XLabs.Platform.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static nfloat StringHeight(string text, UIFont font, nfloat width);
    [ExtensionAttribute]
public static NSString ToNativeString(string text);
    [ExtensionAttribute]
public static CGRect StringRect(string text, UIFont font, nfloat width);
    [ExtensionAttribute]
public static CGSize StringSize(string text, UIFont font);
}
[ExtensionAttribute]
public static class XLabs.Platform.Extensions.UiViewExtensions : object {
    [AsyncStateMachineAttribute("XLabs.Platform.Extensions.UiViewExtensions/<StreamToPng>d__0")]
[ExtensionAttribute]
public static Task StreamToPng(UIView view, Stream stream);
    [ExtensionAttribute]
public static UIImage ToNativeImage(UIView view);
    [ExtensionAttribute]
public static CGBitmapContext ToBitmapContext(CGSize size);
}
public class XLabs.Platform.Services.Email.EmailService : object {
    public bool CanSend { get; }
    public sealed virtual bool get_CanSend();
    public sealed virtual void ShowDraft(string subject, string body, bool html, String[] to, String[] cc, String[] bcc, IEnumerable`1<string> attachments);
    public sealed virtual void ShowDraft(string subject, string body, bool html, string to, IEnumerable`1<string> attachments);
    private string GetMimeType(string filename);
}
internal class XLabs.Platform.Services.Geolocation.GeolocationSingleUpdateDelegate : CLLocationManagerDelegate {
    private CLHeading _bestHeading;
    private bool _haveHeading;
    private bool _haveLocation;
    private double _desiredAccuracy;
    private bool _includeHeading;
    private CLLocationManager _manager;
    private Position _position;
    private TaskCompletionSource`1<Position> _tcs;
    public Task`1<Position> Task { get; }
    public GeolocationSingleUpdateDelegate(CLLocationManager manager, double desiredAccuracy, bool includeHeading, int timeout, CancellationToken cancelToken);
    public Task`1<Position> get_Task();
    public virtual void AuthorizationChanged(CLLocationManager manager, CLAuthorizationStatus status);
    public virtual void Failed(CLLocationManager manager, NSError error);
    public virtual bool ShouldDisplayHeadingCalibration(CLLocationManager manager);
    public virtual void UpdatedLocation(CLLocationManager manager, CLLocation newLocation, CLLocation oldLocation);
    public virtual void UpdatedHeading(CLLocationManager manager, CLHeading newHeading);
    private void StopListening();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_1();
}
public class XLabs.Platform.Services.Geolocation.Geolocator : object {
    private Position _position;
    private CLLocationManager _manager;
    [CompilerGeneratedAttribute]
private double <DesiredAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsListening>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionErrorEventArgs> PositionError;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionEventArgs> PositionChanged;
    public double DesiredAccuracy { get; public set; }
    public bool IsListening { get; private set; }
    public bool SupportsHeading { get; }
    public bool IsGeolocationAvailable { get; }
    public bool IsGeolocationEnabled { get; }
    [CompilerGeneratedAttribute]
public sealed virtual double get_DesiredAccuracy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DesiredAccuracy(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsListening();
    [CompilerGeneratedAttribute]
private void set_IsListening(bool value);
    public sealed virtual bool get_SupportsHeading();
    public sealed virtual bool get_IsGeolocationAvailable();
    public sealed virtual bool get_IsGeolocationEnabled();
    public sealed virtual void StopListening();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionError(EventHandler`1<PositionErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PositionChanged(EventHandler`1<PositionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PositionChanged(EventHandler`1<PositionEventArgs> value);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, bool includeHeading);
    public sealed virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken);
    public sealed virtual Task`1<Position> GetPositionAsync(CancellationToken cancelToken, bool includeHeading);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken);
    public sealed virtual Task`1<Position> GetPositionAsync(int timeout, CancellationToken cancelToken, bool includeHeading);
    public sealed virtual void StartListening(UInt32 minTime, double minDistance);
    public sealed virtual void StartListening(UInt32 minTime, double minDistance, bool includeHeading);
    private CLLocationManager GetManager();
    private void OnUpdatedHeading(object sender, CLHeadingUpdatedEventArgs e);
    private void OnLocationsUpdated(object sender, CLLocationsUpdatedEventArgs e);
    private void OnUpdatedLocation(object sender, CLLocationUpdatedEventArgs e);
    private void UpdatePosition(CLLocation location);
    private void OnFailed(object sender, NSErrorEventArgs e);
    private void OnAuthorizationChanged(object sender, CLAuthorizationChangedEventArgs e);
    private void OnPositionChanged(PositionEventArgs e);
    private void OnPositionError(PositionErrorEventArgs e);
}
public class XLabs.Platform.Services.IO.FileManager : object {
    private IsolatedStorageFile isolatedStorageFile;
    public FileManager(IsolatedStorageFile isolatedStorageFile);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual Stream OpenFile(string path, FileMode mode, FileAccess access);
    public sealed virtual Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual bool FileExists(string path);
    public sealed virtual DateTimeOffset GetLastWriteTime(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void DeleteDirectory(string path);
    public static void CopyDirectory(DirectoryInfo source, DirectoryInfo destination);
}
public class XLabs.Platform.Services.Media.MediaPicker : object {
    internal static string TypeImage;
    internal static string TypeMovie;
    private UIImagePickerControllerDelegate _pickerDelegate;
    private UIPopoverController _popover;
    [CompilerGeneratedAttribute]
private bool <IsCameraAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPhotosSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVideosSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MediaPickerArgs> <OnMediaSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MediaPickerErrorArgs> <OnError>k__BackingField;
    public bool IsCameraAvailable { get; private set; }
    public bool IsPhotosSupported { get; private set; }
    public bool IsVideosSupported { get; private set; }
    public EventHandler`1<MediaPickerArgs> OnMediaSelected { get; public set; }
    public EventHandler`1<MediaPickerErrorArgs> OnError { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCameraAvailable();
    [CompilerGeneratedAttribute]
private void set_IsCameraAvailable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPhotosSupported();
    [CompilerGeneratedAttribute]
private void set_IsPhotosSupported(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVideosSupported();
    [CompilerGeneratedAttribute]
private void set_IsVideosSupported(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<MediaPickerArgs> get_OnMediaSelected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnMediaSelected(EventHandler`1<MediaPickerArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<MediaPickerErrorArgs> get_OnError();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnError(EventHandler`1<MediaPickerErrorArgs> value);
    public sealed virtual Task`1<MediaFile> SelectPhotoAsync(CameraMediaStorageOptions options);
    public sealed virtual Task`1<MediaFile> TakePhotoAsync(CameraMediaStorageOptions options);
    public sealed virtual Task`1<MediaFile> SelectVideoAsync(VideoMediaStorageOptions options);
    public sealed virtual Task`1<MediaFile> TakeVideoAsync(VideoMediaStorageOptions options);
    private Task`1<MediaFile> GetMediaAsync(UIImagePickerControllerSourceType sourceType, string mediaType, MediaStorageOptions options);
    private static MediaPickerController SetupController(MediaPickerDelegate mpDelegate, UIImagePickerControllerSourceType sourceType, string mediaType, MediaStorageOptions options);
    private static UIImagePickerControllerCameraDevice GetCameraDevice(CameraDevice device);
    private static UIImagePickerControllerQualityType GetQuailty(VideoQuality quality);
    private static void VerifyOptions(MediaStorageOptions options);
    private static void VerifyCameraOptions(CameraMediaStorageOptions options);
    [CompilerGeneratedAttribute]
private Task`1<MediaFile> <GetMediaAsync>b__29_0(Task`1<MediaFile> t);
}
public class XLabs.Platform.Services.Media.MediaPickerController : UIImagePickerController {
    public NSObject Delegate { get; public set; }
    internal MediaPickerController(MediaPickerDelegate mpDelegate);
    public virtual NSObject get_Delegate();
    public virtual void set_Delegate(NSObject value);
    public Task`1<MediaFile> GetResultAsync();
}
internal class XLabs.Platform.Services.Media.MediaPickerDelegate : UIImagePickerControllerDelegate {
    private Nullable`1<UIDeviceOrientation> _orientation;
    private NSObject _observer;
    private MediaStorageOptions _options;
    private UIImagePickerControllerSourceType _source;
    private TaskCompletionSource`1<MediaFile> _tcs;
    private UIViewController _viewController;
    [CompilerGeneratedAttribute]
private UIPopoverController <Popover>k__BackingField;
    public UIPopoverController Popover { get; public set; }
    public UIView View { get; }
    public Task`1<MediaFile> Task { get; }
    private bool IsCaptured { get; }
    internal MediaPickerDelegate(UIViewController viewController, UIImagePickerControllerSourceType sourceType, MediaStorageOptions options);
    [CompilerGeneratedAttribute]
public UIPopoverController get_Popover();
    [CompilerGeneratedAttribute]
public void set_Popover(UIPopoverController value);
    public UIView get_View();
    public Task`1<MediaFile> get_Task();
    private bool get_IsCaptured();
    public virtual void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info);
    public virtual void Canceled(UIImagePickerController picker);
    public void DisplayPopover(bool hideFirst);
    private void Dismiss(UIImagePickerController picker, Action onDismiss);
    private void DidRotate(NSNotification notice);
    private bool GetShouldRotate(UIDeviceOrientation orientation);
    private bool GetShouldRotate6(UIDeviceOrientation orientation);
    private MediaFile GetPictureMediaFile(NSDictionary info);
    private MediaFile GetMovieMediaFile(NSDictionary info);
    private static string GetUniquePath(string type, string path, string name);
    private static string GetOutputPath(string type, string path, string name);
    private static bool IsValidInterfaceOrientation(UIDeviceOrientation self);
    private static bool IsSameOrientationKind(UIDeviceOrientation o1, UIDeviceOrientation o2);
    private static UIDeviceOrientation GetDeviceOrientation(UIInterfaceOrientation self);
    [CompilerGeneratedAttribute]
private void <Canceled>b__18_0();
}
internal class XLabs.Platform.Services.Media.MediaPickerPopoverDelegate : UIPopoverControllerDelegate {
    private UIImagePickerController _picker;
    private MediaPickerDelegate _pickerDelegate;
    internal MediaPickerPopoverDelegate(MediaPickerDelegate pickerDelegate, UIImagePickerController picker);
    public virtual bool ShouldDismiss(UIPopoverController popoverController);
    public virtual void DidDismiss(UIPopoverController popoverController);
}
public class XLabs.Platform.Services.Media.Microphone : object {
    private InputAudioQueue _audioQueue;
    private int _bufferSize;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<Byte[]>> OnBroadcast;
    [CompilerGeneratedAttribute]
private int <SampleRate>k__BackingField;
    public int SampleRate { get; private set; }
    public int ChannelCount { get; }
    public int BitsPerSample { get; }
    public bool Active { get; }
    public IEnumerable`1<int> SupportedSampleRates { get; }
    public Microphone(int bufferSize);
    private void StartRecording(int rate);
    private void Clear();
    private void QueueInputCompleted(object sender, InputCompletedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnBroadcast(EventHandler`1<EventArgs`1<Byte[]>> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SampleRate();
    [CompilerGeneratedAttribute]
private void set_SampleRate(int value);
    public sealed virtual int get_ChannelCount();
    public sealed virtual int get_BitsPerSample();
    public bool get_Active();
    public sealed virtual IEnumerable`1<int> get_SupportedSampleRates();
    public sealed virtual Task`1<bool> Start(int sampleRate);
    public sealed virtual Task Stop();
    [CompilerGeneratedAttribute]
private void <Stop>b__22_0();
}
public class XLabs.Platform.Services.Media.SoundService : object {
    private bool isScrubbing;
    private AVAudioPlayer player;
    [CompilerGeneratedAttribute]
private bool <IsPlaying>k__BackingField;
    [CompilerGeneratedAttribute]
private SoundFile <CurrentFile>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler SoundFileFinished;
    public double Volume { get; public set; }
    public bool IsPlaying { get; private set; }
    public double CurrentTime { get; }
    public SoundFile CurrentFile { get; private set; }
    public sealed virtual double get_Volume();
    public sealed virtual void set_Volume(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPlaying();
    [CompilerGeneratedAttribute]
private void set_IsPlaying(bool value);
    public sealed virtual double get_CurrentTime();
    [CompilerGeneratedAttribute]
public sealed virtual SoundFile get_CurrentFile();
    [CompilerGeneratedAttribute]
private void set_CurrentFile(SoundFile value);
    public sealed virtual void Play();
    public sealed virtual void Stop();
    public sealed virtual void Pause();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SoundFileFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SoundFileFinished(EventHandler value);
    protected virtual void OnFileFinished(SoundFinishedEventArgs e);
    public sealed virtual Task`1<SoundFile> SetMediaAsync(string filename);
    public sealed virtual Task`1<SoundFile> PlayAsync(string filename, string extension);
    public sealed virtual Task GoToAsync(double position);
    [CompilerGeneratedAttribute]
private void <SetMediaAsync>b__23_1(object sender, AVStatusEventArgs e);
}
public class XLabs.Platform.Services.Network : object {
    [CompilerGeneratedAttribute]
private Action`1<NetworkStatus> reachabilityChanged;
    public sealed virtual NetworkStatus InternetConnectionStatus();
    [CompilerGeneratedAttribute]
private void add_reachabilityChanged(Action`1<NetworkStatus> value);
    [CompilerGeneratedAttribute]
private void remove_reachabilityChanged(Action`1<NetworkStatus> value);
    private void HandleReachabilityChanged(object sender, EventArgs e);
    public sealed virtual void add_ReachabilityChanged(Action`1<NetworkStatus> value);
    public sealed virtual void remove_ReachabilityChanged(Action`1<NetworkStatus> value);
    public sealed virtual Task`1<bool> IsReachable(string host, TimeSpan timeout);
    public sealed virtual Task`1<bool> IsReachableByWifi(string host, TimeSpan timeout);
}
public class XLabs.Platform.Services.PhoneService : object {
    private static Lazy`1<CTTelephonyNetworkInfo> TelNet;
    public string CellularProvider { get; }
    public Nullable`1<bool> IsCellularDataEnabled { get; }
    public Nullable`1<bool> IsCellularDataRoamingEnabled { get; }
    public Nullable`1<bool> IsNetworkAvailable { get; }
    public string ICC { get; }
    public string MCC { get; }
    public string MNC { get; }
    public bool CanSendSMS { get; }
    private static PhoneService();
    public sealed virtual string get_CellularProvider();
    public sealed virtual Nullable`1<bool> get_IsCellularDataEnabled();
    public sealed virtual Nullable`1<bool> get_IsCellularDataRoamingEnabled();
    public sealed virtual Nullable`1<bool> get_IsNetworkAvailable();
    public sealed virtual string get_ICC();
    public sealed virtual string get_MCC();
    public sealed virtual string get_MNC();
    public sealed virtual bool get_CanSendSMS();
    public sealed virtual void DialNumber(string number);
    public sealed virtual void SendSMS(string to, string body);
}
public static class XLabs.Platform.Services.Reachability : object {
    private static NetworkReachability adHocWiFiNetworkReachability;
    private static NetworkReachability defaultRouteReachability;
    private static NetworkReachability remoteHostReachability;
    [CompilerGeneratedAttribute]
private static EventHandler ReachabilityChanged;
    public static bool IsReachableWithoutRequiringConnection(NetworkReachabilityFlags flags);
    public static bool IsHostReachable(string host);
    [CompilerGeneratedAttribute]
public static void add_ReachabilityChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_ReachabilityChanged(EventHandler value);
    public static bool IsAdHocWiFiNetworkAvailable(NetworkReachabilityFlags& flags);
    public static NetworkStatus RemoteHostStatus(string hostName);
    public static NetworkStatus InternetConnectionStatus();
    public static NetworkStatus LocalWifiConnectionStatus();
    private static void OnChange(NetworkReachabilityFlags flags);
    public static bool IsNetworkAvailable(NetworkReachabilityFlags& flags);
}
public class XLabs.Platform.Services.SecureStorage : object {
    public sealed virtual void Store(string key, Byte[] dataBytes);
    public sealed virtual Byte[] Retrieve(string key);
    public sealed virtual void Delete(string key);
    public sealed virtual bool Contains(string key);
    private static void CheckError(SecStatusCode resultCode, string caller);
    private static SecRecord GetKeyRecord(string key, NSData data);
    private static SecRecord GetExistingRecord(string key);
}
public class XLabs.Platform.Services.TextToSpeechService : object {
    private static string DEFAULT_LOCALE;
    public sealed virtual void Speak(string text, string language);
    public sealed virtual IEnumerable`1<string> GetInstalledLanguages();
}
