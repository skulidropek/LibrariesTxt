public interface XLabs.Serialization.IByteSerializer {
    public abstract virtual Byte[] SerializeToBytes(T obj);
    public abstract virtual T Deserialize(Byte[] data);
    public abstract virtual object Deserialize(Byte[] data, Type type);
}
public interface XLabs.Serialization.IJsonConvert {
    public abstract virtual string ToJson(object obj);
}
public interface XLabs.Serialization.IJsonSerializer {
}
public interface XLabs.Serialization.IProtoBufSerializer {
}
public interface XLabs.Serialization.ISerializer {
    public SerializationFormat Format { get; }
    public abstract virtual SerializationFormat get_Format();
    public abstract virtual void Flush();
}
public interface XLabs.Serialization.IStreamSerializer {
    public abstract virtual void Serialize(T obj, Stream stream);
    public abstract virtual T Deserialize(Stream stream);
    public abstract virtual object Deserialize(Stream stream, Type type);
}
public interface XLabs.Serialization.IStringSerializer {
    public abstract virtual string Serialize(T obj);
    public abstract virtual T Deserialize(string data);
    public abstract virtual object Deserialize(string data, Type type);
}
public interface XLabs.Serialization.IXmlSerializer {
}
public class XLabs.Serialization.JsonDelegate : object {
    private Func`2<object, string> func;
    public JsonDelegate(Func`2<object, string> func);
    public sealed virtual string ToJson(object obj);
}
public enum XLabs.Serialization.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Custom;
    public static SerializationFormat Json;
    public static SerializationFormat Xml;
    public static SerializationFormat ProtoBuffer;
    public static SerializationFormat Binary;
}
public abstract class XLabs.Serialization.StreamSerializer : object {
    public SerializationFormat Format { get; }
    public abstract virtual SerializationFormat get_Format();
    public abstract virtual void Flush();
    public virtual Byte[] SerializeToBytes(T obj);
    public virtual T Deserialize(Byte[] data);
    public sealed virtual object Deserialize(Byte[] data, Type type);
    public abstract virtual void Serialize(T obj, Stream stream);
    public abstract virtual T Deserialize(Stream stream);
    public abstract virtual object Deserialize(Stream stream, Type type);
    public virtual string Serialize(T obj);
    public virtual T Deserialize(string data);
    public sealed virtual object Deserialize(string data, Type type);
}
[ExtensionAttribute]
public static class XLabs.Serialization.StreamSerializerExtensions : object {
    [ExtensionAttribute]
public static T DeserializeFromString(IStreamSerializer serializer, string value, Encoding encoding);
    [ExtensionAttribute]
public static object DeserializeFromString(IStreamSerializer serializer, string value, Type type, Encoding encoding);
    [ExtensionAttribute]
public static string SerializeToString(IStreamSerializer serializer, T obj, Encoding encoding);
    [ExtensionAttribute]
public static T DeserializeFromBytes(IStreamSerializer serializer, Byte[] data);
    [ExtensionAttribute]
public static object DeserializeFromBytes(IStreamSerializer serializer, Byte[] data, Type type);
    [ExtensionAttribute]
public static Byte[] GetSerializedBytes(IStreamSerializer serializer, object obj);
}
public abstract class XLabs.Serialization.StringSerializer : object {
    public SerializationFormat Format { get; }
    public abstract virtual SerializationFormat get_Format();
    public abstract virtual void Flush();
    public sealed virtual Byte[] SerializeToBytes(T obj);
    public sealed virtual T Deserialize(Byte[] data);
    public sealed virtual object Deserialize(Byte[] data, Type type);
    public sealed virtual void Serialize(T obj, Stream stream);
    public sealed virtual T Deserialize(Stream stream);
    public sealed virtual object Deserialize(Stream stream, Type type);
    public abstract virtual string Serialize(T obj);
    public abstract virtual T Deserialize(string data);
    public abstract virtual object Deserialize(string data, Type type);
}
[ExtensionAttribute]
public static class XLabs.Serialization.StringSerializerExtensions : object {
    [ExtensionAttribute]
public static void SerializeToStream(IStringSerializer serializer, object obj, Stream stream);
    [ExtensionAttribute]
public static T DeserializeFromStream(IStringSerializer serializer, Stream stream);
    [ExtensionAttribute]
public static object DeserializeFromStream(IStringSerializer serializer, Stream stream, Type type);
    [ExtensionAttribute]
public static void SerializeToWriter(IStringSerializer serializer, object obj, TextWriter writer);
    [ExtensionAttribute]
public static T DeserializeFromReader(IStringSerializer serializer, TextReader reader);
    [ExtensionAttribute]
public static T DeserializeFromBytes(IStringSerializer serializer, Byte[] data, Encoding encoding);
    [ExtensionAttribute]
public static object DeserializeFromBytes(IStringSerializer serializer, Byte[] data, Type type, Encoding encoding);
    [ExtensionAttribute]
public static Byte[] GetSerializedBytes(IStringSerializer serializer, object obj, Encoding encoding);
}
public class XLabs.Serialization.SystemJsonSerializer : StreamSerializer {
    public SerializationFormat Format { get; }
    public virtual SerializationFormat get_Format();
    public virtual void Flush();
    public virtual void Serialize(T obj, Stream stream);
    public virtual T Deserialize(Stream stream);
    public virtual object Deserialize(Stream stream, Type type);
    public virtual T Deserialize(string data);
    public virtual string Serialize(T obj);
}
public class XLabs.Serialization.SystemXmlSerializer : StreamSerializer {
    public SerializationFormat Format { get; }
    public virtual SerializationFormat get_Format();
    public virtual void Flush();
    public virtual void Serialize(T obj, Stream stream);
    public virtual T Deserialize(Stream stream);
    public virtual object Deserialize(Stream stream, Type type);
    public virtual T Deserialize(string data);
    public virtual string Serialize(T obj);
}
