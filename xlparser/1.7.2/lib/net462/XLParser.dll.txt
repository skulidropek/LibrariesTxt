[LanguageAttribute("Excel Formulas", "1.7.2", "Grammar for Excel Formulas")]
public class XLParser.ExcelFormulaGrammar : Grammar {
    [CompilerGeneratedAttribute]
private Terminal <intersectop>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <BoolToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <NumberToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <TextToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <SingleQuotedStringToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <ErrorToken>k__BackingField;
    private static string SpecialUdfChars;
    private static string AllUdfChars;
    private static string UdfPrefixRegex;
    private static string UdfTokenRegex;
    [CompilerGeneratedAttribute]
private Terminal <UDFToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <ExcelRefFunctionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <ExcelConditionalRefFunctionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <ExcelFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <EmptyArgumentToken>k__BackingField;
    private static string ColumnPattern;
    private static string RowPattern;
    private static String[] ColumnPrefix;
    private static String[] RowPrefix;
    [CompilerGeneratedAttribute]
private Terminal <VRangeToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Terminal <HRangeToken>k__BackingField;
    private static string CellTokenRegex;
    [CompilerGeneratedAttribute]
private Terminal <CellToken>k__BackingField;
    private static HashSet`1<UnicodeCategory> UnicodeLetterCategories;
    private static String[] UnicodeLetters;
    private static String[] NameStartCharPrefix;
    private static string NameStartCharRegex;
    private static string NameValidCharacterRegex;
    [CompilerGeneratedAttribute]
private Terminal <NameToken>k__BackingField;
    private static string NamedRangeCombinationRegex;
    [CompilerGeneratedAttribute]
private Terminal <NamedRangeCombinationToken>k__BackingField;
    public Terminal ReservedNameToken;
    private static string SRSpecifierRegex;
    public Terminal SRSpecifierToken;
    private static string SRColumnRegex;
    public Terminal SRColumnToken;
    private static string mustBeQuotedInSheetName;
    private static string notSheetNameChars;
    private static string normalSheetName;
    private static string quotedSheetName;
    public Terminal SheetToken;
    public Terminal SheetQuotedToken;
    private static string multiSheetRegex;
    private static string multiSheetQuotedRegex;
    public Terminal MultipleSheetsToken;
    public Terminal MultipleSheetsQuotedToken;
    private static string fileNameNumericRegex;
    public Terminal FileNameNumericToken;
    private static string fileNameInBracketsRegex;
    [CompilerGeneratedAttribute]
private Terminal <FileNameEnclosedInBracketsToken>k__BackingField;
    private static string fileNameRegex;
    [CompilerGeneratedAttribute]
private Terminal <FileName>k__BackingField;
    private static string windowsFilePathRegex;
    private static string urlPathRegex;
    private static string filePathRegex;
    [CompilerGeneratedAttribute]
private Terminal <FilePathToken>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ArrayColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ArrayConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ArrayFormula>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ArrayRows>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Bool>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Cell>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Constant>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ConstantArray>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <DynamicDataExchange>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <EmptyArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <File>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Formula>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <FormulaWithEq>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <FunctionCall>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <HRange>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <InfixOp>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <MultiRangeFormula>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <NamedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <PostfixOp>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <PrefixOp>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <QuotedFileSheet>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ReferenceItem>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ReferenceFunctionCall>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <RefError>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <RefFunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <ReservedName>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Sheet>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <StructuredReference>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <StructuredReferenceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <StructuredReferenceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <StructuredReferenceSpecifier>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <StructuredReferenceQualifier>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <UDFName>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <UDFunctionCall>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private NonTerminal <VRange>k__BackingField;
    public Terminal at { get; }
    public Terminal comma { get; }
    public Terminal colon { get; }
    public Terminal hash { get; }
    public Terminal semicolon { get; }
    public Terminal OpenParen { get; }
    public Terminal CloseParen { get; }
    public Terminal CloseSquareParen { get; }
    public Terminal OpenSquareParen { get; }
    public Terminal exclamationMark { get; }
    public Terminal CloseCurlyParen { get; }
    public Terminal OpenCurlyParen { get; }
    public Terminal QuoteS { get; }
    public Terminal mulop { get; }
    public Terminal plusop { get; }
    public Terminal divop { get; }
    public Terminal minop { get; }
    public Terminal concatop { get; }
    public Terminal expop { get; }
    public Terminal intersectop { get; }
    public Terminal percentop { get; }
    public Terminal gtop { get; }
    public Terminal eqop { get; }
    public Terminal ltop { get; }
    public Terminal neqop { get; }
    public Terminal gteop { get; }
    public Terminal lteop { get; }
    public Terminal BoolToken { get; }
    public Terminal NumberToken { get; }
    public Terminal TextToken { get; }
    public Terminal SingleQuotedStringToken { get; }
    public Terminal ErrorToken { get; }
    public Terminal RefErrorToken { get; }
    public Terminal UDFToken { get; }
    public Terminal ExcelRefFunctionToken { get; }
    public Terminal ExcelConditionalRefFunctionToken { get; }
    public Terminal ExcelFunction { get; }
    public Terminal EmptyArgumentToken { get; }
    public Terminal VRangeToken { get; }
    public Terminal HRangeToken { get; }
    public Terminal CellToken { get; }
    public Terminal NameToken { get; }
    public Terminal NamedRangeCombinationToken { get; }
    public Terminal FileNameEnclosedInBracketsToken { get; }
    public Terminal FileName { get; }
    public Terminal FilePathToken { get; }
    public NonTerminal Argument { get; }
    public NonTerminal Arguments { get; }
    public NonTerminal ArrayColumns { get; }
    public NonTerminal ArrayConstant { get; }
    public NonTerminal ArrayFormula { get; }
    public NonTerminal ArrayRows { get; }
    public NonTerminal Bool { get; }
    public NonTerminal Cell { get; }
    public NonTerminal Constant { get; }
    public NonTerminal ConstantArray { get; }
    public NonTerminal DynamicDataExchange { get; }
    public NonTerminal EmptyArgument { get; }
    public NonTerminal Error { get; }
    public NonTerminal File { get; }
    public NonTerminal Formula { get; }
    public NonTerminal FormulaWithEq { get; }
    public NonTerminal FunctionCall { get; }
    public NonTerminal FunctionName { get; }
    public NonTerminal HRange { get; }
    public NonTerminal InfixOp { get; }
    public NonTerminal MultiRangeFormula { get; }
    public NonTerminal NamedRange { get; }
    public NonTerminal Number { get; }
    public NonTerminal PostfixOp { get; }
    public NonTerminal Prefix { get; }
    public NonTerminal PrefixOp { get; }
    public NonTerminal QuotedFileSheet { get; }
    public NonTerminal Reference { get; }
    public NonTerminal ReferenceItem { get; }
    public NonTerminal ReferenceFunctionCall { get; }
    public NonTerminal RefError { get; }
    public NonTerminal RefFunctionName { get; }
    public NonTerminal ReservedName { get; }
    public NonTerminal Sheet { get; }
    public NonTerminal Start { get; }
    public NonTerminal StructuredReference { get; }
    public NonTerminal StructuredReferenceColumn { get; }
    public NonTerminal StructuredReferenceExpression { get; }
    public NonTerminal StructuredReferenceSpecifier { get; }
    public NonTerminal StructuredReferenceQualifier { get; }
    public NonTerminal Text { get; }
    public NonTerminal UDFName { get; }
    public NonTerminal UDFunctionCall { get; }
    public NonTerminal Union { get; }
    public NonTerminal VRange { get; }
    private static String[] excelFunctionList { get; }
    private static ExcelFormulaGrammar();
    public Terminal get_at();
    public Terminal get_comma();
    public Terminal get_colon();
    public Terminal get_hash();
    public Terminal get_semicolon();
    public Terminal get_OpenParen();
    public Terminal get_CloseParen();
    public Terminal get_CloseSquareParen();
    public Terminal get_OpenSquareParen();
    public Terminal get_exclamationMark();
    public Terminal get_CloseCurlyParen();
    public Terminal get_OpenCurlyParen();
    public Terminal get_QuoteS();
    public Terminal get_mulop();
    public Terminal get_plusop();
    public Terminal get_divop();
    public Terminal get_minop();
    public Terminal get_concatop();
    public Terminal get_expop();
    [CompilerGeneratedAttribute]
public Terminal get_intersectop();
    public Terminal get_percentop();
    public Terminal get_gtop();
    public Terminal get_eqop();
    public Terminal get_ltop();
    public Terminal get_neqop();
    public Terminal get_gteop();
    public Terminal get_lteop();
    [CompilerGeneratedAttribute]
public Terminal get_BoolToken();
    [CompilerGeneratedAttribute]
public Terminal get_NumberToken();
    [CompilerGeneratedAttribute]
public Terminal get_TextToken();
    [CompilerGeneratedAttribute]
public Terminal get_SingleQuotedStringToken();
    [CompilerGeneratedAttribute]
public Terminal get_ErrorToken();
    public Terminal get_RefErrorToken();
    [CompilerGeneratedAttribute]
public Terminal get_UDFToken();
    [CompilerGeneratedAttribute]
public Terminal get_ExcelRefFunctionToken();
    [CompilerGeneratedAttribute]
public Terminal get_ExcelConditionalRefFunctionToken();
    [CompilerGeneratedAttribute]
public Terminal get_ExcelFunction();
    [CompilerGeneratedAttribute]
public Terminal get_EmptyArgumentToken();
    [CompilerGeneratedAttribute]
public Terminal get_VRangeToken();
    [CompilerGeneratedAttribute]
public Terminal get_HRangeToken();
    [CompilerGeneratedAttribute]
public Terminal get_CellToken();
    [CompilerGeneratedAttribute]
public Terminal get_NameToken();
    [CompilerGeneratedAttribute]
public Terminal get_NamedRangeCombinationToken();
    [CompilerGeneratedAttribute]
public Terminal get_FileNameEnclosedInBracketsToken();
    [CompilerGeneratedAttribute]
public Terminal get_FileName();
    [CompilerGeneratedAttribute]
public Terminal get_FilePathToken();
    [CompilerGeneratedAttribute]
public NonTerminal get_Argument();
    [CompilerGeneratedAttribute]
public NonTerminal get_Arguments();
    [CompilerGeneratedAttribute]
public NonTerminal get_ArrayColumns();
    [CompilerGeneratedAttribute]
public NonTerminal get_ArrayConstant();
    [CompilerGeneratedAttribute]
public NonTerminal get_ArrayFormula();
    [CompilerGeneratedAttribute]
public NonTerminal get_ArrayRows();
    [CompilerGeneratedAttribute]
public NonTerminal get_Bool();
    [CompilerGeneratedAttribute]
public NonTerminal get_Cell();
    [CompilerGeneratedAttribute]
public NonTerminal get_Constant();
    [CompilerGeneratedAttribute]
public NonTerminal get_ConstantArray();
    [CompilerGeneratedAttribute]
public NonTerminal get_DynamicDataExchange();
    [CompilerGeneratedAttribute]
public NonTerminal get_EmptyArgument();
    [CompilerGeneratedAttribute]
public NonTerminal get_Error();
    [CompilerGeneratedAttribute]
public NonTerminal get_File();
    [CompilerGeneratedAttribute]
public NonTerminal get_Formula();
    [CompilerGeneratedAttribute]
public NonTerminal get_FormulaWithEq();
    [CompilerGeneratedAttribute]
public NonTerminal get_FunctionCall();
    [CompilerGeneratedAttribute]
public NonTerminal get_FunctionName();
    [CompilerGeneratedAttribute]
public NonTerminal get_HRange();
    [CompilerGeneratedAttribute]
public NonTerminal get_InfixOp();
    [CompilerGeneratedAttribute]
public NonTerminal get_MultiRangeFormula();
    [CompilerGeneratedAttribute]
public NonTerminal get_NamedRange();
    [CompilerGeneratedAttribute]
public NonTerminal get_Number();
    [CompilerGeneratedAttribute]
public NonTerminal get_PostfixOp();
    [CompilerGeneratedAttribute]
public NonTerminal get_Prefix();
    [CompilerGeneratedAttribute]
public NonTerminal get_PrefixOp();
    [CompilerGeneratedAttribute]
public NonTerminal get_QuotedFileSheet();
    [CompilerGeneratedAttribute]
public NonTerminal get_Reference();
    [CompilerGeneratedAttribute]
public NonTerminal get_ReferenceItem();
    [CompilerGeneratedAttribute]
public NonTerminal get_ReferenceFunctionCall();
    [CompilerGeneratedAttribute]
public NonTerminal get_RefError();
    [CompilerGeneratedAttribute]
public NonTerminal get_RefFunctionName();
    [CompilerGeneratedAttribute]
public NonTerminal get_ReservedName();
    [CompilerGeneratedAttribute]
public NonTerminal get_Sheet();
    [CompilerGeneratedAttribute]
public NonTerminal get_Start();
    [CompilerGeneratedAttribute]
public NonTerminal get_StructuredReference();
    [CompilerGeneratedAttribute]
public NonTerminal get_StructuredReferenceColumn();
    [CompilerGeneratedAttribute]
public NonTerminal get_StructuredReferenceExpression();
    [CompilerGeneratedAttribute]
public NonTerminal get_StructuredReferenceSpecifier();
    [CompilerGeneratedAttribute]
public NonTerminal get_StructuredReferenceQualifier();
    [CompilerGeneratedAttribute]
public NonTerminal get_Text();
    [CompilerGeneratedAttribute]
public NonTerminal get_UDFName();
    [CompilerGeneratedAttribute]
public NonTerminal get_UDFunctionCall();
    [CompilerGeneratedAttribute]
public NonTerminal get_Union();
    [CompilerGeneratedAttribute]
public NonTerminal get_VRange();
    private static String[] get_excelFunctionList();
    private static String[] GetExcelFunctionList();
}
[ExtensionAttribute]
public static class XLParser.ExcelFormulaParser : object {
    [ThreadStaticAttribute]
private static Parser _p;
    private static Parser P { get; }
    private static Parser get_P();
    public static ParseTreeNode Parse(string input);
    public static ParseTree ParseToTree(string input);
    [IteratorStateMachineAttribute("XLParser.ExcelFormulaParser/<AllNodesConditional>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<ParseTreeNode> AllNodesConditional(ParseTreeNode root, Predicate`1<ParseTreeNode> stopAt);
    [ExtensionAttribute]
public static IEnumerable`1<ParseTreeNode> AllNodes(ParseTreeNode root);
    [ExtensionAttribute]
public static IEnumerable`1<ParseTreeNode> AllNodes(ParseTreeNode root, string type);
    internal static IEnumerable`1<ParseTreeNode> AllNodes(IEnumerable`1<ParseTreeNode> allNodes, string type);
    [ExtensionAttribute]
public static ParseTreeNode Parent(ParseTreeNode child, ParseTreeNode treeRoot);
    [ExtensionAttribute]
public static string Type(ParseTreeNode node);
    [ExtensionAttribute]
public static bool Is(ParseTreeNode pt, string type);
    [ExtensionAttribute]
public static bool IsFunction(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsParentheses(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsBinaryOperation(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsBinaryNonReferenceOperation(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsBinaryReferenceOperation(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsUnaryOperation(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsUnaryPrefixOperation(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsUnaryPostfixOperation(ParseTreeNode input);
    private static string RemoveFinalSymbol(string input);
    [ExtensionAttribute]
public static string GetFunction(ParseTreeNode input);
    [ExtensionAttribute]
public static bool MatchFunction(ParseTreeNode input, string functionName);
    [ExtensionAttribute]
public static IEnumerable`1<ParseTreeNode> GetFunctionArguments(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsBuiltinFunction(ParseTreeNode node);
    [ExtensionAttribute]
public static bool IsIntersection(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsUnion(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsNamedFunction(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsOperation(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsExternalUDFunction(ParseTreeNode input);
    [ExtensionAttribute]
public static bool IsNumberWithSign(ParseTreeNode input);
    [ExtensionAttribute]
public static PrefixInfo GetPrefixInfo(ParseTreeNode prefix);
    [ExtensionAttribute]
public static ParseTreeNode SkipFormula(ParseTreeNode input);
    [ExtensionAttribute]
public static IEnumerable`1<ParseTreeNode> GetReferenceNodes(ParseTreeNode input);
    [ExtensionAttribute]
public static IEnumerable`1<ParserReference> GetParserReferences(ParseTreeNode node);
    [ExtensionAttribute]
public static bool IsRange(ParseTreeNode input);
    [ExtensionAttribute]
public static ParseTreeNode SkipToRelevant(ParseTreeNode input, bool skipReferencesWithoutPrefix);
    [ExtensionAttribute]
public static string Print(ParseTreeNode input);
}
public class XLParser.FormulaAnalyzer : object {
    [CompilerGeneratedAttribute]
private ParseTreeNode <Root>k__BackingField;
    private List`1<ParseTreeNode> allNodes;
    private static ISet`1<string> conditionalFunctions;
    public ParseTreeNode Root { get; private set; }
    public List`1<ParseTreeNode> AllNodes { get; }
    public FormulaAnalyzer(ParseTreeNode root);
    public FormulaAnalyzer(string formula);
    private static FormulaAnalyzer();
    [CompilerGeneratedAttribute]
public ParseTreeNode get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(ParseTreeNode value);
    public List`1<ParseTreeNode> get_AllNodes();
    public IEnumerable`1<ParseTreeNode> References();
    public IEnumerable`1<string> Functions();
    public IEnumerable`1<string> Constants();
    public IEnumerable`1<double> Numbers();
    public int Depth();
    private static int Depth(ParseTreeNode node);
    public int OperatorDepth(ISet`1<string> operators);
    private int OperatorDepth(ParseTreeNode node, ISet`1<string> operators);
    public int ConditionalComplexity();
    public IEnumerable`1<ParserReference> ParserReferences();
}
public static class XLParser.GrammarNames : object {
    public static string Argument;
    public static string Arguments;
    public static string ArrayColumns;
    public static string ArrayConstant;
    public static string ArrayFormula;
    public static string ArrayRows;
    public static string Bool;
    public static string Cell;
    public static string Constant;
    public static string ConstantArray;
    public static string DynamicDataExchange;
    public static string EmptyArgument;
    public static string Error;
    public static string ExcelFunction;
    public static string File;
    public static string Formula;
    public static string FormulaWithEq;
    public static string FunctionCall;
    public static string FunctionName;
    public static string HorizontalRange;
    public static string MultiRangeFormula;
    public static string NamedRange;
    public static string Number;
    public static string Prefix;
    public static string QuotedFileSheet;
    public static string Range;
    public static string Reference;
    public static string ReferenceFunctionCall;
    public static string RefError;
    public static string RefFunctionName;
    public static string ReservedName;
    public static string Sheet;
    public static string StructuredReference;
    public static string StructuredReferenceColumn;
    public static string StructuredReferenceExpression;
    public static string StructuredReferenceSpecifier;
    public static string StructuredReferenceQualifier;
    public static string Text;
    public static string UDFName;
    public static string UDFunctionCall;
    public static string Union;
    public static string VerticalRange;
    public static string TransientStart;
    public static string TransientInfixOp;
    public static string TransientPostfixOp;
    public static string TransientPrefixOp;
    public static string TransientReferenceItem;
    public static string TokenBool;
    public static string TokenCell;
    public static string TokenEmptyArgument;
    public static string TokenError;
    public static string TokenExcelRefFunction;
    public static string TokenExcelConditionalRefFunction;
    public static string TokenFilePath;
    public static string TokenFileName;
    public static string TokenFileNameEnclosedInBrackets;
    public static string TokenFileNameNumeric;
    public static string TokenHRange;
    public static string TokenIntersect;
    public static string TokenMultipleSheets;
    public static string TokenMultipleSheetsQuoted;
    public static string TokenName;
    public static string TokenNamedRangeCombination;
    public static string TokenNumber;
    public static string TokenRefError;
    public static string TokenReservedName;
    public static string TokenSingleQuotedString;
    public static string TokenSheet;
    public static string TokenSheetQuoted;
    public static string TokenSRColumn;
    public static string TokenSRSpecifier;
    public static string TokenText;
    public static string TokenUDF;
    public static string TokenUnionOperator;
    public static string TokenVRange;
}
public class XLParser.ParserReference : object {
    [CompilerGeneratedAttribute]
private ReferenceType <ReferenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private ParseTreeNode <ReferenceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastWorksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TableSpecifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TableColumns>k__BackingField;
    public ReferenceType ReferenceType { get; public set; }
    public ParseTreeNode ReferenceNode { get; public set; }
    public string LocationString { get; public set; }
    public string Worksheet { get; public set; }
    public string LastWorksheet { get; public set; }
    public string FilePath { get; public set; }
    public string FileName { get; public set; }
    public string Name { get; public set; }
    public string MinLocation { get; public set; }
    public string MaxLocation { get; public set; }
    public String[] TableSpecifiers { get; public set; }
    public String[] TableColumns { get; public set; }
    public ParserReference(ParseTreeNode node);
    [CompilerGeneratedAttribute]
public ReferenceType get_ReferenceType();
    [CompilerGeneratedAttribute]
public void set_ReferenceType(ReferenceType value);
    [CompilerGeneratedAttribute]
public ParseTreeNode get_ReferenceNode();
    [CompilerGeneratedAttribute]
public void set_ReferenceNode(ParseTreeNode value);
    [CompilerGeneratedAttribute]
public string get_LocationString();
    [CompilerGeneratedAttribute]
public void set_LocationString(string value);
    [CompilerGeneratedAttribute]
public string get_Worksheet();
    [CompilerGeneratedAttribute]
public void set_Worksheet(string value);
    [CompilerGeneratedAttribute]
public string get_LastWorksheet();
    [CompilerGeneratedAttribute]
public void set_LastWorksheet(string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_MinLocation();
    [CompilerGeneratedAttribute]
public void set_MinLocation(string value);
    [CompilerGeneratedAttribute]
public string get_MaxLocation();
    [CompilerGeneratedAttribute]
public void set_MaxLocation(string value);
    [CompilerGeneratedAttribute]
public String[] get_TableSpecifiers();
    [CompilerGeneratedAttribute]
public void set_TableSpecifiers(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TableColumns();
    [CompilerGeneratedAttribute]
public void set_TableColumns(String[] value);
    public void InitializeReference(ParseTreeNode node);
    private string UnEscape(string value, string escapeCharacter);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private string <InitializeReference>b__49_2(ParseTreeNode x);
    [CompilerGeneratedAttribute]
private string <InitializeReference>b__49_4(ParseTreeNode x);
}
public class XLParser.PrefixInfo : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    private Nullable`1<int> _fileNumber;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sheet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultipleSheets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuoted>k__BackingField;
    public string FilePath { get; }
    public bool HasFilePath { get; }
    public int FileNumber { get; }
    public bool HasFileNumber { get; }
    public string FileName { get; }
    public bool HasFileName { get; }
    public bool HasFile { get; }
    public string Sheet { get; }
    public bool HasSheet { get; }
    public string MultipleSheets { get; }
    public bool HasMultipleSheets { get; }
    public bool IsQuoted { get; }
    public PrefixInfo(string sheet, Nullable`1<int> fileNumber, string fileName, string filePath, string multipleSheets, bool isQuoted);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    public bool get_HasFilePath();
    public int get_FileNumber();
    public bool get_HasFileNumber();
    [CompilerGeneratedAttribute]
public string get_FileName();
    public bool get_HasFileName();
    public bool get_HasFile();
    [CompilerGeneratedAttribute]
public string get_Sheet();
    public bool get_HasSheet();
    [CompilerGeneratedAttribute]
public string get_MultipleSheets();
    public bool get_HasMultipleSheets();
    [CompilerGeneratedAttribute]
public bool get_IsQuoted();
    internal static PrefixInfo From(ParseTreeNode prefix);
    internal static void FixQuotedSheetNodeForWhitespace(ParseTreeNode quotedSheetNode, string sourceText);
    private static int GetSheetNamePositionFromSourceText(ParseTreeNode nodeSheetQuoted, string sourceText);
    private static string Substr(string s, int removeLast, int removeFirst);
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(PrefixInfo other);
    public virtual int GetHashCode();
    public static bool op_Equality(PrefixInfo left, PrefixInfo right);
    public static bool op_Inequality(PrefixInfo left, PrefixInfo right);
    public virtual string ToString();
}
public enum XLParser.ReferenceType : Enum {
    public int value__;
    public static ReferenceType Cell;
    public static ReferenceType CellRange;
    public static ReferenceType UserDefinedName;
    public static ReferenceType HorizontalRange;
    public static ReferenceType VerticalRange;
    public static ReferenceType RefError;
    public static ReferenceType Table;
    public static ReferenceType UserDefinedFunction;
}
public class XLParser.WordsTerminal : Terminal {
    private Node _rootNode;
    private List`1<string> _words;
    private bool _caseSensitive;
    public WordsTerminal(string name, IEnumerable`1<string> words);
    public virtual void Init(GrammarData grammarData);
    public virtual IList`1<string> GetFirsts();
    public virtual Token TryMatch(ParsingContext context, ISourceStream source);
    private void AddWordToTree(string word);
}
