public class CookComputing.XmlRpc.ArrayValue : ComplexValueNode {
    public ArrayValue(int depth);
}
public class CookComputing.XmlRpc.Base64Value : SimpleValueNode {
    public Base64Value(int depth, string value);
}
public class CookComputing.XmlRpc.BooleanValue : SimpleValueNode {
    public BooleanValue(int depth, string value);
}
public class CookComputing.XmlRpc.ComplexValueNode : ValueNode {
    public ComplexValueNode(int depth);
}
public static class CookComputing.XmlRpc.DateTime8601 : object {
    private static Regex _dateTime8601Regex;
    private static DateTime8601();
    public static bool TryParseDateTime8601(string date, DateTime& result);
}
public class CookComputing.XmlRpc.DateTimeValue : SimpleValueNode {
    public DateTimeValue(int depth, string value);
}
public class CookComputing.XmlRpc.DoubleValue : SimpleValueNode {
    public DoubleValue(int depth, string value);
}
public class CookComputing.XmlRpc.EndArrayValue : EndComplexValueNode {
    public EndArrayValue(int depth);
}
public class CookComputing.XmlRpc.EndComplexValueNode : Node {
    public EndComplexValueNode(int depth);
}
public class CookComputing.XmlRpc.EndStructValue : EndComplexValueNode {
    public EndStructValue(int depth);
}
public enum CookComputing.XmlRpc.EnumMapping : Enum {
    public int value__;
    public static EnumMapping Number;
    public static EnumMapping String;
}
internal class CookComputing.XmlRpc.Fault : ValueType {
    public int faultCode;
    public string faultString;
}
public class CookComputing.XmlRpc.FaultNode : Node {
    public FaultNode(int depth);
}
public class CookComputing.XmlRpc.IntValue : SimpleValueNode {
    public IntValue(int depth, string value);
}
public interface CookComputing.XmlRpc.IXmlRpcProxy {
    public bool AllowAutoRedirect { get; public set; }
    public X509CertificateCollection ClientCertificates { get; }
    public string ConnectionGroupName { get; public set; }
    public CookieContainer CookieContainer { get; }
    [BrowsableAttribute("False")]
public ICredentials Credentials { get; public set; }
    public bool EnableCompression { get; public set; }
    public bool Expect100Continue { get; public set; }
    public bool UseNagleAlgorithm { get; public set; }
    [BrowsableAttribute("False")]
public WebHeaderCollection Headers { get; }
    public Guid Id { get; }
    public int Indentation { get; public set; }
    public bool KeepAlive { get; public set; }
    public XmlRpcNonStandard NonStandard { get; public set; }
    public bool PreAuthenticate { get; public set; }
    [BrowsableAttribute("False")]
public Version ProtocolVersion { get; public set; }
    [BrowsableAttribute("False")]
public IWebProxy Proxy { get; public set; }
    [BrowsableAttribute("False")]
public CookieCollection ResponseCookies { get; }
    [BrowsableAttribute("False")]
public WebHeaderCollection ResponseHeaders { get; }
    public int Timeout { get; public set; }
    public string Url { get; public set; }
    public bool UseEmptyElementTags { get; public set; }
    public bool UseEmptyParamsTag { get; public set; }
    public bool UseIndentation { get; public set; }
    public bool UseIntTag { get; public set; }
    public bool UseStringTag { get; public set; }
    public string UserAgent { get; public set; }
    [BrowsableAttribute("False")]
public Encoding XmlEncoding { get; public set; }
    public string XmlRpcMethod { get; public set; }
    public abstract virtual bool get_AllowAutoRedirect();
    public abstract virtual void set_AllowAutoRedirect(bool value);
    public abstract virtual void AttachLogger(XmlRpcLogger logger);
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual string get_ConnectionGroupName();
    public abstract virtual void set_ConnectionGroupName(string value);
    public abstract virtual CookieContainer get_CookieContainer();
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual bool get_EnableCompression();
    public abstract virtual void set_EnableCompression(bool value);
    public abstract virtual bool get_Expect100Continue();
    public abstract virtual void set_Expect100Continue(bool value);
    public abstract virtual bool get_UseNagleAlgorithm();
    public abstract virtual void set_UseNagleAlgorithm(bool value);
    public abstract virtual WebHeaderCollection get_Headers();
    public abstract virtual Guid get_Id();
    public abstract virtual int get_Indentation();
    public abstract virtual void set_Indentation(int value);
    public abstract virtual bool get_KeepAlive();
    public abstract virtual void set_KeepAlive(bool value);
    public abstract virtual XmlRpcNonStandard get_NonStandard();
    public abstract virtual void set_NonStandard(XmlRpcNonStandard value);
    public abstract virtual bool get_PreAuthenticate();
    public abstract virtual void set_PreAuthenticate(bool value);
    public abstract virtual Version get_ProtocolVersion();
    public abstract virtual void set_ProtocolVersion(Version value);
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual void set_Proxy(IWebProxy value);
    public abstract virtual CookieCollection get_ResponseCookies();
    public abstract virtual WebHeaderCollection get_ResponseHeaders();
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual string get_Url();
    public abstract virtual void set_Url(string value);
    public abstract virtual bool get_UseEmptyElementTags();
    public abstract virtual void set_UseEmptyElementTags(bool value);
    public abstract virtual bool get_UseEmptyParamsTag();
    public abstract virtual void set_UseEmptyParamsTag(bool value);
    public abstract virtual bool get_UseIndentation();
    public abstract virtual void set_UseIndentation(bool value);
    public abstract virtual bool get_UseIntTag();
    public abstract virtual void set_UseIntTag(bool value);
    public abstract virtual bool get_UseStringTag();
    public abstract virtual void set_UseStringTag(bool value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
    public abstract virtual Encoding get_XmlEncoding();
    public abstract virtual void set_XmlEncoding(Encoding value);
    public abstract virtual string get_XmlRpcMethod();
    public abstract virtual void set_XmlRpcMethod(string value);
    public abstract virtual String[] SystemListMethods();
    public abstract virtual Object[] SystemMethodSignature(string MethodName);
    public abstract virtual string SystemMethodHelp(string MethodName);
    public abstract virtual void add_RequestEvent(XmlRpcRequestEventHandler value);
    public abstract virtual void remove_RequestEvent(XmlRpcRequestEventHandler value);
    public abstract virtual void add_ResponseEvent(XmlRpcResponseEventHandler value);
    public abstract virtual void remove_ResponseEvent(XmlRpcResponseEventHandler value);
}
public class CookComputing.XmlRpc.LongValue : SimpleValueNode {
    public LongValue(int depth, string value);
}
public enum CookComputing.XmlRpc.MappingAction : Enum {
    public int value__;
    public static MappingAction Ignore;
    public static MappingAction Error;
}
public class CookComputing.XmlRpc.MappingActions : object {
    [CompilerGeneratedAttribute]
private NullMappingAction <NullMappingAction>k__BackingField;
    [CompilerGeneratedAttribute]
private EnumMapping <EnumMapping>k__BackingField;
    public NullMappingAction NullMappingAction { get; public set; }
    public EnumMapping EnumMapping { get; public set; }
    [CompilerGeneratedAttribute]
public NullMappingAction get_NullMappingAction();
    [CompilerGeneratedAttribute]
public void set_NullMappingAction(NullMappingAction value);
    [CompilerGeneratedAttribute]
public EnumMapping get_EnumMapping();
    [CompilerGeneratedAttribute]
public void set_EnumMapping(EnumMapping value);
}
public class CookComputing.XmlRpc.MappingStack : Stack`1<string> {
    public string m_parseType;
    public string MappingType { get; }
    public MappingStack(string parseType);
    private void Push(string str);
    public string get_MappingType();
}
public class CookComputing.XmlRpc.MethodName : Node {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public MethodName(int depth, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class CookComputing.XmlRpc.NilValue : SimpleValueNode {
    public NilValue(int depth);
}
public class CookComputing.XmlRpc.Node : object {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    public int Depth { get; private set; }
    public Node(int depth);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
private void set_Depth(int value);
}
public enum CookComputing.XmlRpc.NullMappingAction : Enum {
    public int value__;
    public static NullMappingAction Error;
    public static NullMappingAction Ignore;
    public static NullMappingAction Nil;
}
public class CookComputing.XmlRpc.ParamNode : Node {
    public ParamNode(int depth);
}
public class CookComputing.XmlRpc.ParamsNode : Node {
    public ParamsNode(int depth);
}
public class CookComputing.XmlRpc.RequestResponseLogger : XmlRpcLogger {
    private string _directory;
    public string Directory { get; public set; }
    public string get_Directory();
    public void set_Directory(string value);
    protected virtual void OnRequest(object sender, XmlRpcRequestEventArgs e);
    protected virtual void OnResponse(object sender, XmlRpcResponseEventArgs e);
}
public class CookComputing.XmlRpc.ResponseNode : Node {
    public ResponseNode(int depth);
}
public class CookComputing.XmlRpc.SimpleValueNode : ValueNode {
    public SimpleValueNode(int depth);
    public SimpleValueNode(int depth, string value);
    public SimpleValueNode(int depth, string value, bool implicitValue);
}
public class CookComputing.XmlRpc.StringValue : SimpleValueNode {
    public StringValue(int depth, string value, bool implicitValue);
}
public class CookComputing.XmlRpc.StructMember : ValueNode {
    public StructMember(int depth, string name);
}
public class CookComputing.XmlRpc.StructValue : ComplexValueNode {
    public StructValue(int depth);
}
public class CookComputing.XmlRpc.Tracer : XmlRpcLogger {
    protected virtual void OnRequest(object sender, XmlRpcRequestEventArgs e);
    protected virtual void OnResponse(object sender, XmlRpcResponseEventArgs e);
    private void DumpStream(Stream stm);
}
public class CookComputing.XmlRpc.Util : object {
    public static void CopyStream(Stream src, Stream dst);
    public static Stream StringAsStream(string S);
    public static void TraceStream(Stream stm);
    public static void DumpStream(Stream stm);
    public static Guid NewGuid();
}
public class CookComputing.XmlRpc.ValueNode : Node {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplicitValue>k__BackingField;
    public string Value { get; public set; }
    public bool ImplicitValue { get; private set; }
    public ValueNode(int depth);
    public ValueNode(int depth, string value);
    public ValueNode(int depth, string value, bool implicitValue);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_ImplicitValue();
    [CompilerGeneratedAttribute]
private void set_ImplicitValue(bool value);
}
public class CookComputing.XmlRpc.WebSettings : object {
    private bool _allowAutoRedirect;
    private X509CertificateCollection _clientCertificates;
    private string _connectionGroupName;
    private ICredentials _credentials;
    private bool _enableCompression;
    private WebHeaderCollection _headers;
    private bool _expect100Continue;
    private CookieContainer _cookies;
    private bool _keepAlive;
    private bool _preAuthenticate;
    private Version _protocolVersion;
    private IWebProxy _proxy;
    private int _timeout;
    private string _url;
    private bool _useNagleAlgorithm;
    private string _userAgent;
    public bool AllowAutoRedirect { get; public set; }
    [BrowsableAttribute("False")]
public X509CertificateCollection ClientCertificates { get; }
    public string ConnectionGroupName { get; public set; }
    [BrowsableAttribute("False")]
public ICredentials Credentials { get; public set; }
    public bool EnableCompression { get; public set; }
    [BrowsableAttribute("False")]
public WebHeaderCollection Headers { get; }
    public bool Expect100Continue { get; public set; }
    public CookieContainer CookieContainer { get; }
    public bool KeepAlive { get; public set; }
    public bool PreAuthenticate { get; public set; }
    [BrowsableAttribute("False")]
public Version ProtocolVersion { get; public set; }
    [BrowsableAttribute("False")]
public IWebProxy Proxy { get; public set; }
    public int Timeout { get; public set; }
    public string Url { get; public set; }
    public bool UseNagleAlgorithm { get; public set; }
    public string UserAgent { get; public set; }
    public bool get_AllowAutoRedirect();
    public void set_AllowAutoRedirect(bool value);
    public X509CertificateCollection get_ClientCertificates();
    public string get_ConnectionGroupName();
    public void set_ConnectionGroupName(string value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public bool get_EnableCompression();
    public void set_EnableCompression(bool value);
    public WebHeaderCollection get_Headers();
    public bool get_Expect100Continue();
    public void set_Expect100Continue(bool value);
    public CookieContainer get_CookieContainer();
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public Version get_ProtocolVersion();
    public void set_ProtocolVersion(Version value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_Url();
    public void set_Url(string value);
    public bool get_UseNagleAlgorithm();
    public void set_UseNagleAlgorithm(bool value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
}
public class CookComputing.XmlRpc.XmlRpcAsyncResult : object {
    private XmlRpcClientProtocol clientProtocol;
    private WebRequest request;
    private AsyncCallback userCallback;
    private object userAsyncState;
    private bool completedSynchronously;
    private bool isCompleted;
    private bool endSendCalled;
    private ManualResetEvent manualResetEvent;
    private Exception exception;
    private WebResponse response;
    private Stream responseStream;
    private Stream responseBufferedStream;
    private Byte[] buffer;
    private XmlRpcRequest xmlRpcRequest;
    internal CookieCollection _responseCookies;
    internal WebHeaderCollection _responseHeaders;
    [CompilerGeneratedAttribute]
private XmlRpcFormatSettings <XmlRpcFormatSettings>k__BackingField;
    public XmlRpcFormatSettings XmlRpcFormatSettings { get; private set; }
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; public set; }
    public bool IsCompleted { get; }
    public CookieCollection ResponseCookies { get; }
    public WebHeaderCollection ResponseHeaders { get; }
    public Exception Exception { get; }
    public XmlRpcClientProtocol ClientProtocol { get; }
    internal bool EndSendCalled { get; internal set; }
    internal Byte[] Buffer { get; internal set; }
    internal WebRequest Request { get; }
    internal WebResponse Response { get; internal set; }
    internal Stream ResponseStream { get; internal set; }
    internal XmlRpcRequest XmlRpcRequest { get; internal set; }
    internal Stream ResponseBufferedStream { get; internal set; }
    internal XmlRpcAsyncResult(XmlRpcClientProtocol ClientProtocol, XmlRpcRequest XmlRpcReq, XmlRpcFormatSettings xmlRpcFormatSettings, WebRequest Request, AsyncCallback UserCallback, object UserAsyncState, int retryNumber);
    [CompilerGeneratedAttribute]
public XmlRpcFormatSettings get_XmlRpcFormatSettings();
    [CompilerGeneratedAttribute]
private void set_XmlRpcFormatSettings(XmlRpcFormatSettings value);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public void set_CompletedSynchronously(bool value);
    public sealed virtual bool get_IsCompleted();
    public CookieCollection get_ResponseCookies();
    public WebHeaderCollection get_ResponseHeaders();
    public void Abort();
    public Exception get_Exception();
    public XmlRpcClientProtocol get_ClientProtocol();
    internal void Complete(Exception ex);
    internal void Complete();
    internal WebResponse WaitForResponse();
    internal bool get_EndSendCalled();
    internal void set_EndSendCalled(bool value);
    internal Byte[] get_Buffer();
    internal void set_Buffer(Byte[] value);
    internal WebRequest get_Request();
    internal WebResponse get_Response();
    internal void set_Response(WebResponse value);
    internal Stream get_ResponseStream();
    internal void set_ResponseStream(Stream value);
    internal XmlRpcRequest get_XmlRpcRequest();
    internal void set_XmlRpcRequest(XmlRpcRequest value);
    internal Stream get_ResponseBufferedStream();
    internal void set_ResponseBufferedStream(Stream value);
}
[AttributeUsageAttribute("64")]
public class CookComputing.XmlRpc.XmlRpcBeginAttribute : Attribute {
    public string Description;
    public bool Hidden;
    private string method;
    private bool introspectionMethod;
    private Type returnType;
    public string Method { get; }
    public Type ReturnType { get; public set; }
    public bool IntrospectionMethod { get; public set; }
    public XmlRpcBeginAttribute(string method);
    public string get_Method();
    public Type get_ReturnType();
    public void set_ReturnType(Type value);
    public bool get_IntrospectionMethod();
    public void set_IntrospectionMethod(bool value);
    public virtual string ToString();
}
public class CookComputing.XmlRpc.XmlRpcClientFormatterSink : object {
    private IClientChannelSink m_next;
    public IClientChannelSink NextChannelSink { get; }
    public IMessageSink NextSink { get; }
    public IDictionary Properties { get; }
    public XmlRpcClientFormatterSink(IClientChannelSink NextSink);
    public sealed virtual IClientChannelSink get_NextChannelSink();
    public sealed virtual IMessageSink get_NextSink();
    public sealed virtual IDictionary get_Properties();
    public sealed virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
    public sealed virtual void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream stream);
    public sealed virtual void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream);
    public sealed virtual Stream GetRequestStream(IMessage msg, ITransportHeaders headers);
    public sealed virtual void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, ITransportHeaders& responseHeaders, Stream& responseStream);
    public sealed virtual IMessage SyncProcessMessage(IMessage msg);
    private void SerializeMessage(IMethodCallMessage mcm, ITransportHeaders& headers, Stream& stream);
    private IMessage DeserializeMessage(IMethodCallMessage mcm, ITransportHeaders headers, Stream stream);
    private string GetRpcMethodName(MethodInfo mi);
}
public class CookComputing.XmlRpc.XmlRpcClientFormatterSinkProvider : object {
    private IClientChannelSinkProvider m_next;
    public IClientChannelSinkProvider Next { get; public set; }
    public XmlRpcClientFormatterSinkProvider(IDictionary properties, ICollection providerData);
    public sealed virtual IClientChannelSink CreateSink(IChannelSender channel, string url, object remoteChannelData);
    public sealed virtual IClientChannelSinkProvider get_Next();
    public sealed virtual void set_Next(IClientChannelSinkProvider value);
}
public class CookComputing.XmlRpc.XmlRpcClientProtocol : Component {
    private WebSettings webSettings;
    private XmlRpcFormatSettings XmlRpcFormatSettings;
    private CookieCollection _responseCookies;
    private WebHeaderCollection _responseHeaders;
    private XmlRpcNonStandard _nonStandard;
    private string _url;
    private string _xmlRpcMethod;
    private Guid _id;
    private XmlRpcRequestEventHandler RequestEvent;
    private XmlRpcResponseEventHandler ResponseEvent;
    public bool AllowAutoRedirect { get; public set; }
    [BrowsableAttribute("False")]
public X509CertificateCollection ClientCertificates { get; }
    public string ConnectionGroupName { get; public set; }
    [BrowsableAttribute("False")]
public ICredentials Credentials { get; public set; }
    public bool EnableCompression { get; public set; }
    [BrowsableAttribute("False")]
public WebHeaderCollection Headers { get; }
    public bool Expect100Continue { get; public set; }
    public bool UseNagleAlgorithm { get; public set; }
    public CookieContainer CookieContainer { get; }
    public Guid Id { get; }
    public int Indentation { get; public set; }
    public bool KeepAlive { get; public set; }
    public XmlRpcNonStandard NonStandard { get; public set; }
    public bool PreAuthenticate { get; public set; }
    [BrowsableAttribute("False")]
public Version ProtocolVersion { get; public set; }
    [BrowsableAttribute("False")]
public IWebProxy Proxy { get; public set; }
    public CookieCollection ResponseCookies { get; }
    public WebHeaderCollection ResponseHeaders { get; }
    public int Timeout { get; public set; }
    public string Url { get; public set; }
    public bool UseEmptyElementTags { get; public set; }
    public bool UseEmptyParamsTag { get; public set; }
    public bool UseIndentation { get; public set; }
    public bool UseIntTag { get; public set; }
    public string UserAgent { get; public set; }
    public bool UseStringTag { get; public set; }
    [BrowsableAttribute("False")]
public Encoding XmlEncoding { get; public set; }
    public string XmlRpcMethod { get; public set; }
    internal bool LogResponse { get; }
    private static XmlRpcClientProtocol();
    public XmlRpcClientProtocol(IContainer container);
    public object Invoke(MethodBase mb, Object[] Parameters);
    public object Invoke(MethodInfo mi, Object[] Parameters);
    public object Invoke(string MethodName, Object[] Parameters);
    public object Invoke(object clientObj, string methodName, Object[] parameters);
    public object Invoke(object clientObj, MethodInfo mi, Object[] parameters);
    public sealed virtual bool get_AllowAutoRedirect();
    public sealed virtual void set_AllowAutoRedirect(bool value);
    public sealed virtual X509CertificateCollection get_ClientCertificates();
    public sealed virtual string get_ConnectionGroupName();
    public sealed virtual void set_ConnectionGroupName(string value);
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual bool get_EnableCompression();
    public sealed virtual void set_EnableCompression(bool value);
    public sealed virtual WebHeaderCollection get_Headers();
    public sealed virtual bool get_Expect100Continue();
    public sealed virtual void set_Expect100Continue(bool value);
    public sealed virtual bool get_UseNagleAlgorithm();
    public sealed virtual void set_UseNagleAlgorithm(bool value);
    public sealed virtual CookieContainer get_CookieContainer();
    public sealed virtual Guid get_Id();
    public sealed virtual int get_Indentation();
    public sealed virtual void set_Indentation(int value);
    public sealed virtual bool get_KeepAlive();
    public sealed virtual void set_KeepAlive(bool value);
    public sealed virtual XmlRpcNonStandard get_NonStandard();
    public sealed virtual void set_NonStandard(XmlRpcNonStandard value);
    public sealed virtual bool get_PreAuthenticate();
    public sealed virtual void set_PreAuthenticate(bool value);
    public sealed virtual Version get_ProtocolVersion();
    public sealed virtual void set_ProtocolVersion(Version value);
    public sealed virtual IWebProxy get_Proxy();
    public sealed virtual void set_Proxy(IWebProxy value);
    public sealed virtual CookieCollection get_ResponseCookies();
    public sealed virtual WebHeaderCollection get_ResponseHeaders();
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual string get_Url();
    public sealed virtual void set_Url(string value);
    public sealed virtual bool get_UseEmptyElementTags();
    public sealed virtual void set_UseEmptyElementTags(bool value);
    public sealed virtual bool get_UseEmptyParamsTag();
    public sealed virtual void set_UseEmptyParamsTag(bool value);
    public sealed virtual bool get_UseIndentation();
    public sealed virtual void set_UseIndentation(bool value);
    public sealed virtual bool get_UseIntTag();
    public sealed virtual void set_UseIntTag(bool value);
    public sealed virtual string get_UserAgent();
    public sealed virtual void set_UserAgent(string value);
    public sealed virtual bool get_UseStringTag();
    public sealed virtual void set_UseStringTag(bool value);
    public sealed virtual Encoding get_XmlEncoding();
    public sealed virtual void set_XmlEncoding(Encoding value);
    public sealed virtual string get_XmlRpcMethod();
    public sealed virtual void set_XmlRpcMethod(string value);
    public void SetProperties(WebRequest webReq);
    private void SetRequestHeaders(WebHeaderCollection headers, WebRequest webReq);
    private void SetClientCertificates(X509CertificateCollection certificates, WebRequest webReq);
    private XmlRpcRequest MakeXmlRpcRequest(WebRequest webReq, MethodInfo mi, Object[] parameters, object clientObj, string xmlRpcMethod, Guid proxyId);
    private XmlRpcResponse ReadResponse(XmlRpcRequest req, WebResponse webResp, Stream respStm);
    private MethodInfo GetMethodInfoFromName(object clientObj, string methodName, Object[] parameters);
    public IAsyncResult BeginInvoke(MethodBase mb, Object[] parameters, AsyncCallback callback, object outerAsyncState);
    public IAsyncResult BeginInvoke(MethodInfo mi, Object[] parameters, AsyncCallback callback, object outerAsyncState);
    public IAsyncResult BeginInvoke(string methodName, Object[] parameters, object clientObj, AsyncCallback callback, object outerAsyncState);
    public IAsyncResult BeginInvoke(MethodInfo mi, Object[] parameters, object clientObj, AsyncCallback callback, object outerAsyncState);
    private static void GetRequestStreamCallback(IAsyncResult asyncResult);
    private static void GetResponseCallback(IAsyncResult asyncResult);
    private static void ReadAsyncResponse(XmlRpcAsyncResult result);
    private static void ReadAsyncResponseStream(XmlRpcAsyncResult result);
    private static bool ProcessAsyncResponseStreamResult(XmlRpcAsyncResult result, IAsyncResult asyncResult);
    private static void ReadResponseCallback(IAsyncResult asyncResult);
    private static void ProcessAsyncException(XmlRpcAsyncResult clientResult, Exception ex);
    public object EndInvoke(IAsyncResult asr);
    public object EndInvoke(IAsyncResult asr, Type returnType);
    private string GetEffectiveUrl(object clientObj);
    [XmlRpcMethodAttribute("system.listMethods")]
public sealed virtual String[] SystemListMethods();
    [XmlRpcMethodAttribute("system.listMethods")]
public IAsyncResult BeginSystemListMethods(AsyncCallback Callback, object State);
    public String[] EndSystemListMethods(IAsyncResult AsyncResult);
    [XmlRpcMethodAttribute("system.methodSignature")]
public sealed virtual Object[] SystemMethodSignature(string MethodName);
    [XmlRpcMethodAttribute("system.methodSignature")]
public IAsyncResult BeginSystemMethodSignature(string MethodName, AsyncCallback Callback, object State);
    public Array EndSystemMethodSignature(IAsyncResult AsyncResult);
    [XmlRpcMethodAttribute("system.methodHelp")]
public sealed virtual string SystemMethodHelp(string MethodName);
    [XmlRpcMethodAttribute("system.methodHelp")]
public IAsyncResult BeginSystemMethodHelp(string MethodName, AsyncCallback Callback, object State);
    public string EndSystemMethodHelp(IAsyncResult AsyncResult);
    private void InitializeComponent();
    protected virtual WebRequest GetWebRequest(Uri uri);
    protected virtual WebResponse GetWebResponse(WebRequest request);
    protected Stream MaybeDecompressStream(HttpWebResponse httpWebResp, Stream respStream);
    protected virtual WebResponse GetWebResponse(WebRequest request, IAsyncResult result);
    public sealed virtual void AttachLogger(XmlRpcLogger logger);
    public sealed virtual void add_RequestEvent(XmlRpcRequestEventHandler value);
    public sealed virtual void remove_RequestEvent(XmlRpcRequestEventHandler value);
    public sealed virtual void add_ResponseEvent(XmlRpcResponseEventHandler value);
    public sealed virtual void remove_ResponseEvent(XmlRpcResponseEventHandler value);
    protected virtual void OnRequest(XmlRpcRequestEventArgs e);
    internal bool get_LogResponse();
    protected virtual void OnResponse(XmlRpcResponseEventArgs e);
    internal void InternalOnResponse(XmlRpcResponseEventArgs e);
}
public class CookComputing.XmlRpc.XmlRpcDebugLogger : XmlRpcLogger {
    protected virtual void OnRequest(object sender, XmlRpcRequestEventArgs e);
    protected virtual void OnResponse(object sender, XmlRpcResponseEventArgs e);
    private void DumpStream(Stream stm);
}
public class CookComputing.XmlRpc.XmlRpcDeserializer : object {
    private XmlRpcNonStandard m_nonStandard;
    public XmlRpcNonStandard NonStandard { get; public set; }
    protected bool AllowInvalidHTTPContent { get; }
    protected bool AllowNonStandardDateTime { get; }
    protected bool AllowStringFaultCode { get; }
    protected bool IgnoreDuplicateMembers { get; }
    protected bool MapEmptyDateTimeToMinValue { get; }
    protected bool MapZerosDateTimeToMinValue { get; }
    public XmlRpcNonStandard get_NonStandard();
    public void set_NonStandard(XmlRpcNonStandard value);
    protected bool get_AllowInvalidHTTPContent();
    protected bool get_AllowNonStandardDateTime();
    protected bool get_AllowStringFaultCode();
    protected bool get_IgnoreDuplicateMembers();
    protected bool get_MapEmptyDateTimeToMinValue();
    protected bool get_MapZerosDateTimeToMinValue();
    public object MapValueNode(IEnumerator`1<Node> iter, Type valType, MappingStack mappingStack, MappingAction mappingAction);
    private object MapDateTime(string value, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapDouble(string value, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapBoolean(string value, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapString(string value, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapStringToEnum(string value, Type enumType, string xmlRpcType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapLong(string value, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapInt(string value, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapNumberToEnum(string value, Type enumType, string xmlRpcType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapBase64(string value, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapNilValue(string p, Type type, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    protected object MapHashtable(IEnumerator`1<Node> iter, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapStruct(IEnumerator`1<Node> iter, Type valueType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private object MapArray(IEnumerator`1<Node> iter, Type valType, MappingStack mappingStack, MappingAction mappingAction, Type& mappedType);
    private static Type DetermineArrayItemType(Type valType);
    private void CheckImplictString(Type valType, MappingStack mappingStack);
    private object MapMultiDimArray(IEnumerator`1<Node> iter, Type ValueType, MappingStack mappingStack, MappingAction mappingAction);
    private void MapMultiDimElements(IEnumerator`1<Node> iter, int Rank, int CurRank, Type elemType, List`1<object> elements, Int32[] dimLengths, MappingStack mappingStack, MappingAction mappingAction);
    public object ParseValueElement(XmlReader rdr, Type valType, MappingStack mappingStack, MappingAction mappingAction);
    private static void CreateFieldNamesMap(Type valueType, List`1<string> names);
    private void CheckExpectedType(Type expectedType, Type actualType, MappingStack mappingStack);
    private T OnStack(string p, MappingStack mappingStack, Func`1<T> func);
    private void ReportMissingMembers(Type valueType, List`1<string> names, MappingStack mappingStack);
    private string GetStructName(Type ValueType, string XmlRpcName);
    private MappingAction StructMappingAction(Type type, MappingAction currentAction);
    private MappingAction MemberMappingAction(Type type, string memberName, MappingAction currentAction);
    private string StackDump(MappingStack mappingStack);
    private object CreateArrayInstance(Type type, Object[] args);
    private bool IsStructParamsMethod(MethodInfo mi);
}
public class CookComputing.XmlRpc.XmlRpcDupXmlRpcMethodNames : XmlRpcException {
    public XmlRpcDupXmlRpcMethodNames(string msg);
}
[AttributeUsageAttribute("64")]
public class CookComputing.XmlRpc.XmlRpcEndAttribute : Attribute {
    public string Description;
    public bool Hidden;
    private string method;
    private bool introspectionMethod;
    public string Method { get; }
    public bool IntrospectionMethod { get; public set; }
    public XmlRpcEndAttribute(string method);
    public string get_Method();
    public bool get_IntrospectionMethod();
    public void set_IntrospectionMethod(bool value);
    public virtual string ToString();
}
[AttributeUsageAttribute("11724")]
public class CookComputing.XmlRpc.XmlRpcEnumMappingAttribute : Attribute {
    private EnumMapping _mapping;
    public EnumMapping Mapping { get; }
    public XmlRpcEnumMappingAttribute(EnumMapping mapping);
    public EnumMapping get_Mapping();
    public virtual string ToString();
}
public class CookComputing.XmlRpc.XmlRpcException : ApplicationException {
    public XmlRpcException(string msg);
    public XmlRpcException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcFaultException : ApplicationException {
    private int m_faultCode;
    private string m_faultString;
    public int FaultCode { get; }
    public string FaultString { get; }
    public XmlRpcFaultException(int TheCode, string TheString);
    protected XmlRpcFaultException(SerializationInfo info, StreamingContext context);
    public int get_FaultCode();
    public string get_FaultString();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class CookComputing.XmlRpc.XmlRpcFormatSettings : object {
    private int m_indentation;
    private bool m_bUseEmptyElementTag;
    private bool m_bUseEmptyParamsTag;
    private bool m_bUseIndentation;
    private bool m_useIntTag;
    private bool m_useStringTag;
    private Encoding m_encoding;
    [CompilerGeneratedAttribute]
private bool <OmitXmlDeclaration>k__BackingField;
    public int Indentation { get; public set; }
    public bool UseEmptyElementTags { get; public set; }
    public bool UseEmptyParamsTag { get; public set; }
    public bool UseIndentation { get; public set; }
    public bool UseIntTag { get; public set; }
    public bool UseStringTag { get; public set; }
    public Encoding XmlEncoding { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public int get_Indentation();
    public void set_Indentation(int value);
    public bool get_UseEmptyElementTags();
    public void set_UseEmptyElementTags(bool value);
    public bool get_UseEmptyParamsTag();
    public void set_UseEmptyParamsTag(bool value);
    public bool get_UseIndentation();
    public void set_UseIndentation(bool value);
    public bool get_UseIntTag();
    public void set_UseIntTag(bool value);
    public bool get_UseStringTag();
    public void set_UseStringTag(bool value);
    public Encoding get_XmlEncoding();
    public void set_XmlEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_OmitXmlDeclaration();
    [CompilerGeneratedAttribute]
public void set_OmitXmlDeclaration(bool value);
}
public class CookComputing.XmlRpc.XmlRpcIllFormedXmlException : XmlRpcException {
    public XmlRpcIllFormedXmlException(string msg);
    public XmlRpcIllFormedXmlException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcInvalidEnumValue : XmlRpcException {
    public XmlRpcInvalidEnumValue(string msg);
    public XmlRpcInvalidEnumValue(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcInvalidParametersException : XmlRpcException {
    public XmlRpcInvalidParametersException(string msg);
    public XmlRpcInvalidParametersException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcInvalidReturnType : XmlRpcException {
    public XmlRpcInvalidReturnType(string msg);
    public XmlRpcInvalidReturnType(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcInvalidXmlRpcException : XmlRpcException {
    public XmlRpcInvalidXmlRpcException(string msg);
    public XmlRpcInvalidXmlRpcException(string msg, Exception innerEx);
}
public abstract class CookComputing.XmlRpc.XmlRpcLogger : object {
    public void SubscribeTo(IXmlRpcProxy proxy);
    [ObsoleteAttribute("This method is obsolete; use SubscribeTo instead")]
public void Attach(IXmlRpcProxy proxy);
    public void UnsubscribeFrom(IXmlRpcProxy proxy);
    [ObsoleteAttribute("This method is obsolete; use UnsubcribeFrom instead")]
public void Detach(IXmlRpcProxy proxy);
    protected virtual void OnRequest(object sender, XmlRpcRequestEventArgs e);
    protected virtual void OnResponse(object sender, XmlRpcResponseEventArgs e);
}
public class CookComputing.XmlRpc.XmlRpcMappingSerializeException : XmlRpcException {
    public XmlRpcMappingSerializeException(string msg);
    public XmlRpcMappingSerializeException(string msg, Exception innerEx);
}
[AttributeUsageAttribute("384")]
public class CookComputing.XmlRpc.XmlRpcMemberAttribute : Attribute {
    private string _member;
    private string _description;
    public string Member { get; public set; }
    public string Description { get; public set; }
    public XmlRpcMemberAttribute(string member);
    public string get_Member();
    public void set_Member(string value);
    public string get_Description();
    public void set_Description(string value);
    public virtual string ToString();
}
[AttributeUsageAttribute("64")]
public class CookComputing.XmlRpc.XmlRpcMethodAttribute : Attribute {
    public string Description;
    public bool Hidden;
    private string method;
    private bool introspectionMethod;
    private bool structParams;
    public string Method { get; }
    public bool IntrospectionMethod { get; public set; }
    public bool StructParams { get; public set; }
    public XmlRpcMethodAttribute(string method);
    public string get_Method();
    public bool get_IntrospectionMethod();
    public void set_IntrospectionMethod(bool value);
    public bool get_StructParams();
    public void set_StructParams(bool value);
    public virtual string ToString();
}
public class CookComputing.XmlRpc.XmlRpcMethodAttributeException : XmlRpcException {
    public XmlRpcMethodAttributeException(string msg);
    public XmlRpcMethodAttributeException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcMethodInfo : object {
    private MethodInfo mi;
    private bool isHidden;
    private string doc;
    private string name;
    private string xmlRpcName;
    private string returnDoc;
    private Type returnType;
    private string returnXmlRpcType;
    private XmlRpcParameterInfo[] paramInfos;
    public bool IsHidden { get; public set; }
    public string Doc { get; public set; }
    public MethodInfo MethodInfo { get; public set; }
    public string MiName { get; public set; }
    public XmlRpcParameterInfo[] Parameters { get; public set; }
    public Type ReturnType { get; public set; }
    public string ReturnXmlRpcType { get; public set; }
    public string ReturnDoc { get; public set; }
    public string XmlRpcName { get; public set; }
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public string get_Doc();
    public void set_Doc(string value);
    public MethodInfo get_MethodInfo();
    public void set_MethodInfo(MethodInfo value);
    public string get_MiName();
    public void set_MiName(string value);
    public XmlRpcParameterInfo[] get_Parameters();
    public void set_Parameters(XmlRpcParameterInfo[] value);
    public Type get_ReturnType();
    public void set_ReturnType(Type value);
    public string get_ReturnXmlRpcType();
    public void set_ReturnXmlRpcType(string value);
    public string get_ReturnDoc();
    public void set_ReturnDoc(string value);
    public string get_XmlRpcName();
    public void set_XmlRpcName(string value);
    public sealed virtual int CompareTo(object obj);
}
[AttributeUsageAttribute("396")]
public class CookComputing.XmlRpc.XmlRpcMissingMappingAttribute : Attribute {
    private MappingAction _action;
    public MappingAction Action { get; }
    public XmlRpcMissingMappingAttribute(MappingAction action);
    public MappingAction get_Action();
    public virtual string ToString();
}
public class CookComputing.XmlRpc.XmlRpcMissingUrl : XmlRpcException {
    public XmlRpcMissingUrl(string msg);
}
public class CookComputing.XmlRpc.XmlRpcNonRegularArrayException : XmlRpcException {
    public XmlRpcNonRegularArrayException(string msg);
    public XmlRpcNonRegularArrayException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcNonSerializedMember : XmlRpcException {
    public XmlRpcNonSerializedMember(string msg);
    public XmlRpcNonSerializedMember(string msg, Exception innerEx);
}
[FlagsAttribute]
public enum CookComputing.XmlRpc.XmlRpcNonStandard : Enum {
    public int value__;
    public static XmlRpcNonStandard None;
    public static XmlRpcNonStandard AllowStringFaultCode;
    public static XmlRpcNonStandard AllowNonStandardDateTime;
    public static XmlRpcNonStandard IgnoreDuplicateMembers;
    public static XmlRpcNonStandard MapZerosDateTimeToMinValue;
    public static XmlRpcNonStandard MapEmptyDateTimeToMinValue;
    public static XmlRpcNonStandard AllowInvalidHTTPContent;
    public static XmlRpcNonStandard All;
}
[AttributeUsageAttribute("396")]
public class CookComputing.XmlRpc.XmlRpcNullMappingAttribute : Attribute {
    private NullMappingAction _action;
    public NullMappingAction Action { get; }
    public XmlRpcNullMappingAttribute(NullMappingAction action);
    public NullMappingAction get_Action();
    public virtual string ToString();
}
public class CookComputing.XmlRpc.XmlRpcNullParameterException : XmlRpcException {
    public XmlRpcNullParameterException(string msg);
    public XmlRpcNullParameterException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcNullReferenceException : XmlRpcException {
    public XmlRpcNullReferenceException(string msg);
    public XmlRpcNullReferenceException(string msg, Exception innerEx);
}
[AttributeUsageAttribute("2048")]
public class CookComputing.XmlRpc.XmlRpcParameterAttribute : Attribute {
    private string name;
    private string description;
    public string Name { get; }
    public string Description { get; public set; }
    public XmlRpcParameterAttribute(string name);
    public string get_Name();
    public string get_Description();
    public void set_Description(string value);
    public virtual string ToString();
}
public class CookComputing.XmlRpc.XmlRpcParameterInfo : object {
    private string doc;
    private string name;
    private Type type;
    private string xmlRpcName;
    private string xmlRpcType;
    private bool isparams;
    public string Doc { get; public set; }
    public bool IsParams { get; public set; }
    public string Name { get; public set; }
    public string XmlRpcName { get; public set; }
    public Type Type { get; public set; }
    public string XmlRpcType { get; public set; }
    public string get_Doc();
    public void set_Doc(string value);
    public bool get_IsParams();
    public void set_IsParams(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_XmlRpcName();
    public void set_XmlRpcName(string value);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_XmlRpcType();
    public void set_XmlRpcType(string value);
}
public class CookComputing.XmlRpc.XmlRpcParser : object {
    private static List`1<string> _xmlRpcMembers;
    private int _depth;
    private static XmlRpcParser();
    public IEnumerable`1<Node> ParseRequest(XmlReader rdr);
    public IEnumerable`1<Node> ParseResponse(XmlReader rdr);
    private IEnumerable`1<Node> ParseFault(XmlReader rdr);
    private IEnumerable`1<Node> ParseParam(XmlReader rdr);
    public IEnumerable`1<Node> ParseValue(XmlReader rdr);
    private IEnumerable`1<Node> ParseArray(XmlReader rdr);
    private IEnumerable`1<Node> ParseStruct(XmlReader rdr);
    private bool MovetoSibling(XmlReader rdr, string p);
    private bool MovetoSibling(XmlReader rdr, string p, bool required);
    private bool MoveToEndElement(XmlReader rdr, int mcDepth);
    private bool IsXmlRpcElement(string elementName);
    private bool MoveToChild(XmlReader rdr, string nodeName);
    private bool MoveToChild(XmlReader rdr, string nodeName1, string nodeName2);
    private bool MoveToChild(XmlReader rdr, string nodeName, bool required);
    private bool MoveToChild(XmlReader rdr, string nodeName1, string nodeName2, bool required);
    private string MakeMissingChildMessage(string nodeName1, string nodeName2);
    private void MoveOverWhiteSpace(XmlReader rdr);
    private MethodName CreateMethodName(string name);
    private StringValue CreateStringValue(string value, bool implicitValue);
    private IntValue CreateIntValue(string value);
    private LongValue CreateLongValue(string value);
    private DoubleValue CreateDoubleValue(string value);
    private BooleanValue CreateBooleanValue(string value);
    private DateTimeValue CreateDateTimeValue(string value);
    private Base64Value CreateBase64Value(string value);
    private NilValue CreateNilValue();
    private StructValue CreateStructValue();
    private StructMember CreateStructMember(string name);
    private EndStructValue CreateEndStructValue();
    private ArrayValue CreateArrayValue();
    private EndArrayValue CreateEndArrayValue();
}
public class CookComputing.XmlRpc.XmlRpcProxyGen : object {
    private static Dictionary`2<Type, Type> _types;
    private static XmlRpcProxyGen();
    public static T Create();
    public static object Create(Type itf);
    public static object CreateAssembly(Type itf, string typeName, string assemblyName);
    private static AssemblyBuilder BuildAssembly(Type itf, string assemblyName, string moduleName, string typeName, AssemblyBuilderAccess access);
    private static void BuildMethods(TypeBuilder tb, List`1<MethodData> methods);
    private static void BuildMethod(TypeBuilder tb, string methodName, string rpcMethodName, String[] paramNames, Type[] argTypes, bool paramsMethod, Type returnType, bool structParams, EnumMapping enumMapping);
    private static void BuildBeginMethods(TypeBuilder tb, List`1<MethodData> methods);
    private static void BuildEndMethods(TypeBuilder tb, List`1<MethodData> methods);
    private static void BuildConstructor(TypeBuilder typeBldr, Type baseType, string urlStr);
    private static string GetXmlRpcUrl(Type itf);
    private static MethodInfo[] GetMethods(Type type);
    private static List`1<MethodData> GetXmlRpcMethods(Type itf);
    private static string GetXmlRpcMethodName(MethodInfo mi);
    private static List`1<MethodData> GetXmlRpcBeginMethods(Type itf);
    private static List`1<MethodData> GetXmlRpcEndMethods(Type itf);
}
public class CookComputing.XmlRpc.XmlRpcRequest : object {
    public string method;
    public Object[] args;
    public MethodInfo mi;
    public Guid proxyId;
    private static int _created;
    public int number;
    public Type ReturnType;
    public XmlRpcRequest(string methodName, Object[] parameters, MethodInfo methodInfo);
    public XmlRpcRequest(string methodName, Object[] parameters, MethodInfo methodInfo, string XmlRpcMethod, Guid proxyGuid);
    public XmlRpcRequest(string methodName, Object[] parameters);
}
public class CookComputing.XmlRpc.XmlRpcRequestEventArgs : EventArgs {
    private Guid _guid;
    private long _request;
    private Stream _requestStream;
    public Guid ProxyID { get; }
    public long RequestNum { get; }
    public Stream RequestStream { get; }
    public XmlRpcRequestEventArgs(Guid guid, long request, Stream requestStream);
    public Guid get_ProxyID();
    public long get_RequestNum();
    public Stream get_RequestStream();
}
public class CookComputing.XmlRpc.XmlRpcRequestEventHandler : MulticastDelegate {
    public XmlRpcRequestEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlRpcRequestEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, XmlRpcRequestEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class CookComputing.XmlRpc.XmlRpcRequestSerializer : XmlRpcSerializer {
    public XmlRpcRequestSerializer(XmlRpcFormatSettings settings);
    public void SerializeRequest(Stream stm, XmlRpcRequest request);
    private void SerializeParams(XmlWriter xtw, XmlRpcRequest request, MappingActions mappingActions);
    private void SerializeStructParams(XmlWriter xtw, XmlRpcRequest request, MappingActions mappingActions);
}
public class CookComputing.XmlRpc.XmlRpcResponse : object {
    public object retVal;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; public set; }
    public XmlRpcResponse(object retValue);
    public XmlRpcResponse(object retValue, MethodInfo mi);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
}
public class CookComputing.XmlRpc.XmlRpcResponseDeserializer : XmlRpcDeserializer {
    public XmlRpcResponse DeserializeResponse(Stream stm, Type svcType);
    public XmlRpcResponse DeserializeResponse(TextReader txtrdr, Type svcType);
    public XmlRpcResponse DeserializeResponse(XmlReader rdr, Type returnType);
    private XmlRpcException DeserializeFault(IEnumerator`1<Node> iter);
    private XmlRpcFaultException ParseFault(IEnumerator`1<Node> iter, MappingStack parseStack, MappingAction mappingAction);
}
public class CookComputing.XmlRpc.XmlRpcResponseEventArgs : EventArgs {
    private Guid _guid;
    private long _request;
    private Stream _responseStream;
    public Guid ProxyID { get; }
    public long RequestNum { get; }
    public Stream ResponseStream { get; }
    public XmlRpcResponseEventArgs(Guid guid, long request, Stream responseStream);
    public Guid get_ProxyID();
    public long get_RequestNum();
    public Stream get_ResponseStream();
}
public class CookComputing.XmlRpc.XmlRpcResponseEventHandler : MulticastDelegate {
    public XmlRpcResponseEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlRpcResponseEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, XmlRpcResponseEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("8192")]
public class CookComputing.XmlRpc.XmlRpcReturnValueAttribute : Attribute {
    private string description;
    public string Description { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public virtual string ToString();
}
public class CookComputing.XmlRpc.XmlRpcSerializer : object {
    [CompilerGeneratedAttribute]
private XmlRpcFormatSettings <XmlRpcFormatSettings>k__BackingField;
    protected XmlRpcFormatSettings XmlRpcFormatSettings { get; private set; }
    public int Indentation { get; public set; }
    public bool UseEmptyElementTags { get; public set; }
    public bool UseEmptyParamsTag { get; public set; }
    public bool UseIndentation { get; public set; }
    public bool UseIntTag { get; public set; }
    public bool UseStringTag { get; public set; }
    public Encoding XmlEncoding { get; public set; }
    public XmlRpcSerializer(XmlRpcFormatSettings settings);
    [CompilerGeneratedAttribute]
protected XmlRpcFormatSettings get_XmlRpcFormatSettings();
    [CompilerGeneratedAttribute]
private void set_XmlRpcFormatSettings(XmlRpcFormatSettings value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public bool get_UseEmptyElementTags();
    public void set_UseEmptyElementTags(bool value);
    public bool get_UseEmptyParamsTag();
    public void set_UseEmptyParamsTag(bool value);
    public bool get_UseIndentation();
    public void set_UseIndentation(bool value);
    public bool get_UseIntTag();
    public void set_UseIntTag(bool value);
    public bool get_UseStringTag();
    public void set_UseStringTag(bool value);
    public Encoding get_XmlEncoding();
    public void set_XmlEncoding(Encoding value);
    public void Serialize(XmlWriter xtw, object o, MappingActions mappingActions);
    public void Serialize(XmlWriter xtw, object o, MappingActions mappingActions, List`1<object> nestedObjs);
    private void SerializeString(XmlWriter xtw, object o);
    private object SerializeInt64(XmlWriter xtw, object o, MappingActions mappingActions);
    private object SerializeInt32(XmlWriter xtw, object o, MappingActions mappingActions);
    private void BuildArrayXml(XmlWriter xtw, Array ary, int CurRank, Int32[] indices, MappingActions mappingActions, List`1<object> nestedObjs);
    public void SerializeFaultResponse(Stream stm, XmlRpcFaultException faultEx);
    protected XmlWriterSettings ConfigureXmlFormat();
    protected void WriteFullEndElement(XmlWriter xtw);
    protected void WriteFullElementString(XmlWriter xtw, string name, string value);
    private string StackDump(MappingStack parseStack);
    public bool IsStructParamsMethod(MethodInfo mi);
    private MappingActions MemberMappingActions(Type type, string memberName, MappingActions currentActions);
    protected MappingActions GetTypeMappings(MethodInfo mi, MappingActions mappingActions);
    protected MappingActions GetMappingActions(ICustomAttributeProvider cap, MappingActions mappingActions);
    private static T GetAttribute(ICustomAttributeProvider cap);
    private static NullMappingAction MapToNullMappingAction(MappingAction missingMappingAction);
}
public class CookComputing.XmlRpc.XmlRpcServerException : XmlRpcException {
    public XmlRpcServerException(string msg);
    public XmlRpcServerException(string msg, Exception innerEx);
}
[DefaultMemberAttribute("Item")]
public class CookComputing.XmlRpc.XmlRpcStruct : object {
    private List`1<string> _keys;
    private List`1<object> _values;
    private Dictionary`2<string, object> _base;
    private object _syncRoot;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public bool ContainsKey(object key);
    public bool ContainsValue(object value);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection get_Keys();
    public sealed virtual void Remove(object key);
    public sealed virtual ICollection get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public void CopyTo(Array array, int index);
    public int get_Count();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual void OnDeserialization(object sender);
    public sealed virtual object Clone();
}
public class CookComputing.XmlRpc.XmlRpcStructs : Dictionary`2<object, object> {
}
public enum CookComputing.XmlRpc.XmlRpcType : Enum {
    public int value__;
    public static XmlRpcType tInvalid;
    public static XmlRpcType tInt32;
    public static XmlRpcType tInt64;
    public static XmlRpcType tBoolean;
    public static XmlRpcType tString;
    public static XmlRpcType tDouble;
    public static XmlRpcType tDateTime;
    public static XmlRpcType tBase64;
    public static XmlRpcType tStruct;
    public static XmlRpcType tHashtable;
    public static XmlRpcType tArray;
    public static XmlRpcType tMultiDimArray;
    public static XmlRpcType tVoid;
    public static XmlRpcType tNil;
}
public class CookComputing.XmlRpc.XmlRpcTypeInfo : object {
    private static bool IsVisibleXmlRpcMethod(MethodInfo mi);
    public static string GetXmlRpcMethodName(MethodInfo mi);
    public static XmlRpcType GetXmlRpcType(object o);
    public static XmlRpcType GetXmlRpcType(Type t);
    private static XmlRpcType GetXmlRpcType(Type t, Stack`1<Type> typeStack);
    public static string GetXmlRpcTypeString(Type t);
    public static string GetXmlRpcTypeString(XmlRpcType t);
    public static string GetUrlFromAttribute(Type type);
    public static string GetRpcMethodName(MethodInfo mi);
}
public class CookComputing.XmlRpc.XmlRpcTypeMismatchException : XmlRpcException {
    public XmlRpcTypeMismatchException(string msg);
    public XmlRpcTypeMismatchException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcUnexpectedTypeException : XmlRpcException {
    public XmlRpcUnexpectedTypeException(string msg);
    public XmlRpcUnexpectedTypeException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcUnsupportedMethodException : XmlRpcException {
    public XmlRpcUnsupportedMethodException(string msg);
    public XmlRpcUnsupportedMethodException(string msg, Exception innerEx);
}
public class CookComputing.XmlRpc.XmlRpcUnsupportedTypeException : XmlRpcException {
    private Type _unsupportedType;
    public Type UnsupportedType { get; }
    public XmlRpcUnsupportedTypeException(Type t);
    public XmlRpcUnsupportedTypeException(Type t, string msg);
    public XmlRpcUnsupportedTypeException(Type t, string msg, Exception innerEx);
    public Type get_UnsupportedType();
}
[AttributeUsageAttribute("1028")]
public class CookComputing.XmlRpc.XmlRpcUrlAttribute : Attribute {
    private string uri;
    public string Uri { get; }
    public XmlRpcUrlAttribute(string UriString);
    public string get_Uri();
    public virtual string ToString();
}
public static class CookComputing.XmlRpc.XmlRpcXmlReader : object {
    public static XmlReader Create(Stream stm);
    public static XmlReader Create(TextReader textReader);
    private static void ConfigureXmlTextReader(XmlTextReader xmlRdr);
}
public static class CookComputing.XmlRpc.XmlRpcXmlWriter : object {
    public static XmlWriter Create(Stream stm, XmlRpcFormatSettings settings);
    private static XmlWriterSettings ConfigureXmlFormat(XmlRpcFormatSettings settings);
}
public class Headblender.XmlRpc.XmlRpcProxyCodeGen : object {
    private static string DEFAULT_RET;
    private static string DEFAULT_TEMP;
    private static string DEFAULT_ARR;
    private static string DEFAULT_CALLBACK;
    private static string DEFAULT_STATUS;
    private static string DEFAULT_RESULT;
    private static string DEFAULT_SUFFIX;
    private static string DEFAULT_END;
    private static string DEFAULT_BEGIN;
    public static string CreateCode(Type proxyType, ICodeGenerator generator);
    public static string CreateCode(Type proxyType, ICodeGenerator generator, XmlRpcProxyCodeGenOptions options);
    public static CodeCompileUnit CreateCodeCompileUnit(Type proxyType, ICodeGenerator generator);
    public static CodeCompileUnit CreateCodeCompileUnit(Type proxyType, ICodeGenerator generator, XmlRpcProxyCodeGenOptions options);
    private static CodeCompileUnit BuildCompileUnit(Type proxyType, string assemblyName, string moduleName, string typeName, bool implicitAsync, bool flattenInterfaces);
    private static void BuildMethods(CodeTypeDeclaration declaration, Hashtable methods, BuildMethodDelegate buildDelegate);
    private static void BuildStandardMethod(CodeTypeDeclaration declaration, string methodName, string rpcMethodName, Type[] argTypes, String[] argNames, Type returnType, Type implementationType);
    private static void BuildBeginMethod(CodeTypeDeclaration declaration, string methodName, string rpcMethodName, Type[] argTypes, String[] argNames, Type returnType, Type implementationType);
    private static void BuildEndMethod(CodeTypeDeclaration declaration, string methodName, string rpcMethodName, Type[] argTypes, String[] argNames, Type returnType, Type implementationType);
    private static void BuildConstructor(CodeTypeDeclaration declaration, Type baseType, string urlStr);
    private static string GetXmlRpcUrl(Type proxyType);
    private static Hashtable GetXmlRpcMethods(Type proxyType, bool flatten);
    private static void RecurseGetXmlRpcMethods(Type proxyType, Hashtable& h, bool flatten);
    private static Hashtable GetXmlRpcBeginMethods(Type proxyType, bool flatten);
    private static void RecurseGetXmlRpcBeginMethods(Type proxyType, Hashtable& h, bool flatten);
    private static Hashtable GetXmlRpcEndMethods(Type proxyType, bool flatten);
    private static void RecurseGetXmlRpcEndMethods(Type proxyType, Hashtable& h, bool flatten);
    private static string GetXmlRpcMethodName(MethodInfo mi);
    private static void MakeParameterList(CodeMemberMethod method, Type[] types, String[] names);
    private static void MakeReturnVariable(CodeMemberMethod method, Type returnType);
    private static void MakeTempVariable(CodeMemberMethod method, Type tempType);
    private static void MakeTempParameterArray(CodeMemberMethod method, Type[] types, String[] names);
    private static void MakeReturnStatement(CodeMemberMethod method, Type returnType);
}
public class Headblender.XmlRpc.XmlRpcProxyCodeGenOptions : object {
    private string GenNamespace;
    private string GenTypeName;
    private bool GenImplicitAsync;
    private bool GenFlattenInterfaces;
    public string Namespace { get; public set; }
    public string TypeName { get; public set; }
    public bool ImplicitAsync { get; public set; }
    public bool FlattenInterfaces { get; public set; }
    public XmlRpcProxyCodeGenOptions(string initNamespace, string initTypeName, bool initImplicitAsync, bool flattenInterfaces);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public bool get_ImplicitAsync();
    public void set_ImplicitAsync(bool value);
    public bool get_FlattenInterfaces();
    public void set_FlattenInterfaces(bool value);
}
