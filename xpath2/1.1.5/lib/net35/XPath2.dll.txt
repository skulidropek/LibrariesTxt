[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class TimSort.TimSort`1 : object {
    private static int MIN_MERGE;
    private T[] a;
    private IComparer`1<T> c;
    private static int MIN_GALLOP;
    private int minGallop;
    private static int INITIAL_TMP_STORAGE_LENGTH;
    private T[] tmp;
    private int stackSize;
    private Int32[] runBase;
    private Int32[] runLen;
    private TimSort`1(T[] a, IComparer`1<T> c);
    public static void sort(T[] a, IComparer`1<T> c);
    public static void sort(T[] a, int lo, int hi, IComparer`1<T> c);
    private static void binarySort(T[] a, int lo, int hi, int start, IComparer`1<T> c);
    private static int countRunAndMakeAscending(T[] a, int lo, int hi, IComparer`1<T> c);
    private static void reverseRange(T[] a, int lo, int hi);
    private static int minRunLength(int n);
    private void pushRun(int runBase, int runLen);
    private void mergeCollapse();
    private void mergeForceCollapse();
    private void mergeAt(int i);
    private static int gallopLeft(T key, T[] a, int basei, int len, int hint, IComparer`1<T> c);
    private static int gallopRight(T key, T[] a, int basei, int len, int hint, IComparer`1<T> c);
    private void mergeLo(int base1, int len1, int base2, int len2);
    private void mergeHi(int base1, int len1, int base2, int len2);
    private T[] ensureCapacity(int minCapacity);
    private static void rangeCheck(int arrayLen, int fromIndex, int toIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class Wmhelp.XPath2.AST.AbstractNode : object {
    private AbstractNode _parent;
    private List`1<AbstractNode> _childs;
    private XPath2Context _context;
    public int Count { get; }
    public AbstractNode Parent { get; }
    public XPath2Context Context { get; }
    public bool IsLeaf { get; }
    public AbstractNode Item { get; public set; }
    public AbstractNode(XPath2Context context);
    public int get_Count();
    public AbstractNode get_Parent();
    public XPath2Context get_Context();
    public bool get_IsLeaf();
    public AbstractNode get_Item(int index);
    public void set_Item(int index, AbstractNode value);
    public void Add(AbstractNode node);
    public void Add(object arg);
    public void AddRange(IEnumerable`1<object> nodes);
    public virtual void Bind();
    public static AbstractNode Create(XPath2Context context, object value);
    public void TraverseSubtree(Action`1<AbstractNode> action);
    public virtual bool IsContextSensitive();
    public abstract virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
    internal virtual XPath2ResultType GetItemType(Object[] dataPool);
    public virtual bool IsEmptySequence();
    public sealed virtual IEnumerator`1<AbstractNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.AndExprNode : AbstractNode {
    public AndExprNode(XPath2Context context, object node1, object node2);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.ArithmeticBinaryOperatorNode : AtomizedBinaryOperatorNode {
    private GetReturnTypeDelegate _returnTypeDelegate;
    public ArithmeticBinaryOperatorNode(XPath2Context context, BinaryOperator action, object node1, object node2, GetReturnTypeDelegate returnTypeDelegate);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
    public static XPath2ResultType AdditionResult(XPath2ResultType resType1, XPath2ResultType resType2);
    public static XPath2ResultType SubstractionResult(XPath2ResultType resType1, XPath2ResultType resType2);
    public static XPath2ResultType MultiplyResult(XPath2ResultType resType1, XPath2ResultType resType2);
    public static XPath2ResultType DivisionResult(XPath2ResultType resType1, XPath2ResultType resType2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.ArithmeticUnaryOperatorNode : AtomizedUnaryOperatorNode {
    public ArithmeticUnaryOperatorNode(XPath2Context context, UnaryOperator action, object node);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.AtomizedBinaryOperatorNode : BinaryOperatorNode {
    public AtomizedBinaryOperatorNode(XPath2Context context, BinaryOperator action, object node1, object node2, XPath2ResultType resultType);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.AtomizedUnaryOperatorNode : UnaryOperatorNode {
    public AtomizedUnaryOperatorNode(XPath2Context context, UnaryOperator action, object node, XPath2ResultType resultType);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
}
public class Wmhelp.XPath2.AST.BinaryOperator : MulticastDelegate {
    public BinaryOperator(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(IContextProvider provider, object arg1, object arg2);
    public virtual IAsyncResult BeginInvoke(IContextProvider provider, object arg1, object arg2, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.BinaryOperatorNode : AbstractNode {
    protected BinaryOperator _binaryOper;
    private XPath2ResultType _resultType;
    public BinaryOperatorNode(XPath2Context context, BinaryOperator action, object node1, object node2, XPath2ResultType resultType);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.ContextItemNode : AbstractNode {
    public ContextItemNode(XPath2Context context);
    public virtual bool IsContextSensitive();
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.ExprNode : AbstractNode {
    public ExprNode(XPath2Context context, AbstractNode node);
    public ExprNode(XPath2Context context, object node);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
    internal virtual XPath2ResultType GetItemType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.FilterExprNode : AbstractNode {
    private bool m_contextSensitive;
    public FilterExprNode(XPath2Context context, object src, List`1<object> nodes);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.AST.FilterExprNode/<CreateEnumerator>d__2")]
private IEnumerable`1<XPathItem> CreateEnumerator(Object[] dataPool, AbstractNode expr, XPath2NodeIterator baseIter);
    public virtual bool IsContextSensitive();
    public virtual void Bind();
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.ForNode : AbstractNode {
    private VarName _varName;
    private ReferenceLink _varRef;
    public ForNode(XPath2Context context, VarName varName, object expr);
    public void AddTail(object expr);
    public virtual void Bind();
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
    private bool MoveNext(IContextProvider provider, Object[] dataPool, XPathItem curr, Object& res);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.FuncNode : AbstractNode {
    private string _name;
    private string _ns;
    private XPathFunctionDef _func;
    private static HashSet`1<string> s_aggregates;
    private static String[] s_names;
    private static HashSet`1<string> s_contextDs;
    private static String[] s_names2;
    public FuncNode(XPath2Context context, string name, string ns);
    public FuncNode(XPath2Context context, string name, string ns, List`1<object> nodes);
    private static FuncNode();
    public virtual void Bind();
    public virtual bool IsContextSensitive();
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
    internal virtual XPath2ResultType GetItemType(Object[] dataPool);
}
public class Wmhelp.XPath2.AST.GetReturnTypeDelegate : MulticastDelegate {
    public GetReturnTypeDelegate(object object, IntPtr method);
    public virtual XPath2ResultType Invoke(XPath2ResultType resType1, XPath2ResultType resType2);
    public virtual IAsyncResult BeginInvoke(XPath2ResultType resType1, XPath2ResultType resType2, AsyncCallback callback, object object);
    public virtual XPath2ResultType EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.IfNode : AbstractNode {
    public IfNode(XPath2Context context, object cond, object thenBranch, object elseBranch);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
public class Wmhelp.XPath2.AST.OrderedBinaryOperatorNode : BinaryOperatorNode {
    [NullableContextAttribute("1")]
public OrderedBinaryOperatorNode(XPath2Context context, BinaryOperator action, object node1, object node2, XPath2ResultType resultType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.OrExprNode : AbstractNode {
    public OrExprNode(XPath2Context context, object node1, object node2);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.PathExprNode : AbstractNode {
    private bool _isOrderedSet;
    private PathStep[] _path;
    private bool _evaluateFromRoot;
    [CompilerGeneratedAttribute]
private bool <Unordered>k__BackingField;
    public bool Unordered { get; public set; }
    public PathStep FirstStep { get; }
    public PathExprNode(XPath2Context context, PathStep pathStep, bool evaluateFromRoot);
    [CompilerGeneratedAttribute]
public bool get_Unordered();
    [CompilerGeneratedAttribute]
public void set_Unordered(bool value);
    public PathStep get_FirstStep();
    public virtual void Bind();
    public virtual bool IsContextSensitive();
    private bool IsOrderedSet();
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.PathStep : object {
    public object nodeTest;
    public XPath2ExprType type;
    public AbstractNode node;
    [CompilerGeneratedAttribute]
private PathStep <Next>k__BackingField;
    public PathStep Next { get; private set; }
    public PathStep(AbstractNode node);
    public PathStep(object nodeTest, XPath2ExprType type);
    public PathStep(XPath2ExprType type);
    [CompilerGeneratedAttribute]
public PathStep get_Next();
    [CompilerGeneratedAttribute]
private void set_Next(PathStep value);
    public void AddLast(PathStep pathStep);
    public XPath2NodeIterator Create(XPath2Context context, Object[] dataPool, XPath2NodeIterator baseIter, bool special);
    public static PathStep Create(XPath2Context context, object node);
    public static PathStep CreateFilter(XPath2Context context, object node, List`1<object> predicateList);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.RangeNode : AbstractNode {
    public RangeNode(XPath2Context context, object node1, object node2);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
    internal virtual XPath2ResultType GetItemType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.SingletonBinaryOperatorNode : BinaryOperatorNode {
    public SingletonBinaryOperatorNode(XPath2Context context, BinaryOperator action, object node1, object node2, XPath2ResultType resultType);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
}
public class Wmhelp.XPath2.AST.UnaryOperator : MulticastDelegate {
    public UnaryOperator(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(IContextProvider provider, object arg);
    public virtual IAsyncResult BeginInvoke(IContextProvider provider, object arg, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.UnaryOperatorNode : AbstractNode {
    protected UnaryOperator _unaryOper;
    private XPath2ResultType _resultType;
    public UnaryOperatorNode(XPath2Context context, UnaryOperator action, object node, XPath2ResultType resultType);
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.ValueNode : AbstractNode {
    private object _value;
    public object Content { get; }
    public ValueNode(XPath2Context context, object value);
    public object get_Content();
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
    public virtual bool IsEmptySequence();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.AST.VarRefNode : AbstractNode {
    private VarName _varName;
    private ReferenceLink _varRef;
    public ReferenceLink VarRef { get; }
    public XmlQualifiedName QNVarName { get; }
    public VarRefNode(XPath2Context context, VarName varRef);
    public ReferenceLink get_VarRef();
    public XmlQualifiedName get_QNVarName();
    public virtual void Bind();
    public virtual object Execute(IContextProvider provider, Object[] dataPool);
    public virtual XPath2ResultType GetReturnType(Object[] dataPool);
}
public enum Wmhelp.XPath2.AST.XPath2ExprType : Enum {
    public int value__;
    public static XPath2ExprType Child;
    public static XPath2ExprType Descendant;
    public static XPath2ExprType Attribute;
    public static XPath2ExprType Self;
    public static XPath2ExprType DescendantOrSelf;
    public static XPath2ExprType FollowingSibling;
    public static XPath2ExprType Following;
    public static XPath2ExprType Parent;
    public static XPath2ExprType Ancestor;
    public static XPath2ExprType PrecedingSibling;
    public static XPath2ExprType Preceding;
    public static XPath2ExprType AncestorOrSelf;
    public static XPath2ExprType Namespace;
    public static XPath2ExprType PositionFilter;
    public static XPath2ExprType ChildOverDescendants;
    public static XPath2ExprType Expr;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.BufferedNodeIterator : XPath2NodeIterator {
    private List`1<XPathItem> buffer;
    private XPath2NodeIterator src;
    public int Count { get; }
    public bool IsSingleIterator { get; }
    public BufferedNodeIterator(XPath2NodeIterator src);
    public BufferedNodeIterator(XPath2NodeIterator src, bool clone);
    public virtual int get_Count();
    public virtual bool get_IsSingleIterator();
    public void Fill();
    public static BufferedNodeIterator Preload(XPath2NodeIterator baseIter);
    [DebuggerStepThroughAttribute]
public virtual XPath2NodeIterator Clone();
    protected virtual XPathItem NextItem();
    public virtual void ResetSequentialPosition();
    public virtual XPath2NodeIterator CreateBufferedIterator();
}
public class Wmhelp.XPath2.ChangeValueAction : MulticastDelegate {
    public ChangeValueAction(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ReferenceLink sender, Object[] dataPool);
    public virtual IAsyncResult BeginInvoke(ReferenceLink sender, Object[] dataPool, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Wmhelp.XPath2.Compatibility.PlatformHelper : object {
    [NullableAttribute("1")]
private static Lazy`1<bool> IsRunningOnMonoValue;
    private static PlatformHelper();
    public static bool IsRunningOnMono();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.ContextProvider : object {
    private XPath2NodeIterator m_iter;
    public XPath2NodeIterator Iterator { get; }
    public XPathItem Context { get; }
    public int CurrentPosition { get; }
    public int LastPosition { get; }
    public ContextProvider(object value);
    public ContextProvider(XPath2NodeIterator iter);
    public XPath2NodeIterator get_Iterator();
    public bool MoveNext();
    public sealed virtual XPathItem get_Context();
    public sealed virtual int get_CurrentPosition();
    public sealed virtual int get_LastPosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Wmhelp.XPath2.CoreFuncs : object {
    private static char CharSpace;
    public static object True;
    public static object False;
    private static CoreFuncs();
    [NullableContextAttribute("2")]
public static object OperatorEq(object arg1, object arg2);
    [NullableContextAttribute("2")]
public static object OperatorGt(object arg1, object arg2);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<RootIterator>d__6")]
internal static IEnumerable`1<XPathItem> RootIterator(XPath2NodeIterator iter);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<AttributeIterator>d__7")]
internal static IEnumerable`1<XPathItem> AttributeIterator(XPath2NodeIterator iter);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<UnionIterator1>d__8")]
internal static IEnumerable`1<XPathItem> UnionIterator1(XPath2NodeIterator iter1, XPath2NodeIterator iter2);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<UnionIterator2>d__9")]
internal static IEnumerable`1<XPathItem> UnionIterator2(XPath2NodeIterator iter1, XPath2NodeIterator iter2);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<IntersectExceptIterator1>d__10")]
internal static IEnumerable`1<XPathItem> IntersectExceptIterator1(bool except, XPath2NodeIterator iter1, XPath2NodeIterator iter2);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<IntersectExceptIterator2>d__11")]
internal static IEnumerable`1<XPathItem> IntersectExceptIterator2(bool except, XPath2NodeIterator iter1, XPath2NodeIterator iter2);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<ConvertIterator>d__12")]
internal static IEnumerable`1<XPathItem> ConvertIterator(XPath2NodeIterator iter, SequenceType destType, XPath2Context context);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<ValueIterator>d__13")]
internal static IEnumerable`1<XPathItem> ValueIterator(XPath2NodeIterator iter, SequenceType destType, XPath2Context context);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<TreatIterator>d__14")]
internal static IEnumerable`1<XPathItem> TreatIterator(XPath2NodeIterator iter, SequenceType destType, XPath2Context context);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.CoreFuncs/<ValidateIterator>d__15")]
internal static IEnumerable`1<XPathItem> ValidateIterator(XPath2NodeIterator iter, XmlSchemaSet schemaSet, bool lax);
    internal static IEnumerable`1<XPathItem> CodepointIterator(string text);
    [ExtensionAttribute]
internal static XPathItem Clone(XPathItem item);
    [ExtensionAttribute]
internal static XPathItem ChangeType(XPathItem item, SequenceType destType, XPath2Context context);
    public static string NormalizeStringValue(string value, bool attr, bool raiseException);
    public static object BooleanValue(object value);
    public static bool GetBooleanValue(object value);
    public static string NormalizeSpace(object item);
    public static object Atomize(object value);
    public static T Atomize(object value);
    public static XPathNavigator NodeValue(object value, bool raise);
    public static object Some(object expr);
    public static object Every(object expr);
    public static object CastTo(XPath2Context context, object value, SequenceType destType, bool isLiteral);
    public static object CastArg(XPath2Context context, object value, SequenceType destType);
    public static object TreatAs(XPath2Context context, object value, SequenceType destType);
    public static object CastToItem(XPath2Context context, object value, SequenceType destType);
    public static object InstanceOf(XPath2Context context, object value, SequenceType destType);
    public static object Castable(XPath2Context context, object value, SequenceType destType, bool isLiteral);
    public static object SameNode(object a, object b);
    public static object PrecedingNode(object a, object b);
    public static object FollowingNode(object a, object b);
    private static void MagnitudeRelationship(XPath2Context context, XPathItem item1, XPathItem item2, Object& x, Object& y);
    public static object GeneralEQ(XPath2Context context, object a, object b);
    public static object GeneralGT(XPath2Context context, object a, object b);
    public static object GeneralNE(XPath2Context context, object a, object b);
    public static object GeneralGE(XPath2Context context, object a, object b);
    public static object GeneralLT(XPath2Context context, object a, object b);
    public static object GeneralLE(XPath2Context context, object a, object b);
    public static XPath2NodeIterator GetRange(object arg1, object arg2);
    public static XPath2NodeIterator Union(XPath2Context context, object a, object b);
    public static XPath2NodeIterator Except(XPath2Context context, object a, object b);
    public static XPath2NodeIterator Intersect(XPath2Context context, object a, object b);
    public static XPathItem ContextNode(IContextProvider provider);
    public static XPath2ResultType GetXPath2ResultType(SequenceType sequenceType);
    [NullableContextAttribute("2")]
public static XPath2ResultType GetXPath2ResultType(object value);
    public static object GetRoot(IContextProvider provider);
    public static object GetRoot(object node);
    public static object Not(object value);
    public static string CastToStringOptional(XPath2Context context, object value);
    public static string CastToStringExactOne(XPath2Context context, object value, bool atomize);
    public static int CastToInt(XPath2Context context, object value);
    public static double Number(XPath2Context context, IContextProvider provider);
    public static double Number(XPath2Context context, object value);
    public static object CastToNumber1(XPath2Context context, object value);
    public static double CastToNumber2(XPath2Context context, object value);
    public static double CastToNumber3(XPath2Context context, object value);
    public static string StringValue(XPath2Context context, IContextProvider provider);
    public static string StringValue(XPath2Context context, object value);
    public static bool TryProcessTypeName(XPath2Context context, string qname, bool raise, XmlSchemaObject& schemaObject);
    public static bool TryProcessTypeName(XPath2Context context, XmlQualifiedName qualifiedName, bool raise, XmlSchemaObject& schemaObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.EmptyIterator : XPath2NodeIterator {
    public static EmptyIterator Shared;
    public bool IsFinished { get; }
    private static EmptyIterator();
    public virtual XPath2NodeIterator Clone();
    public virtual bool get_IsFinished();
    protected virtual XPathItem NextItem();
    public virtual XPath2NodeIterator CreateBufferedIterator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Wmhelp.XPath2.ExtFuncs : object {
    public static string GetName(IContextProvider provider);
    public static string GetName(XPathNavigator nav);
    public static object GetNodeName(XPath2Context context, XPathNavigator nav);
    public static string GetLocalName(IContextProvider provider);
    public static string GetLocalName(XPathNavigator nav);
    public static object GetNamespaceUri(IContextProvider provider);
    public static object GetNamespaceUri(XPathNavigator nav);
    public static object GetNilled(XPathNavigator nav);
    public static object GetBaseUri(XPath2Context context, XPathNavigator nav);
    public static object GetBaseUri(XPath2Context context, IContextProvider provider);
    public static object DocumentUri(XPathNavigator nav);
    public static XPath2NodeIterator WriteTrace(XPath2Context context, XPath2NodeIterator iter, string label);
    public static XPath2NodeIterator WriteTrace(XPath2Context context, XPath2NodeIterator iter);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<AtomizeIterator>d__13")]
private static IEnumerable`1<XPathItem> AtomizeIterator(XPath2NodeIterator iter);
    public static XPath2NodeIterator GetData(XPath2NodeIterator iter);
    public static string Concat(XPath2Context context, Object[] args);
    public static object StringJoin(XPath2NodeIterator iter, object s);
    public static string Substring(object item, double startingLoc);
    public static string Substring(object item, double startingLoc, double length);
    public static int StringLength(object source);
    public static int StringLength(XPath2Context context, IContextProvider provider);
    public static string NormalizeSpace(XPath2Context context, IContextProvider provider);
    public static string NormalizeUnicode(object arg, string form);
    public static string NormalizeUnicode(object arg);
    public static string UpperCase(object value);
    public static string LowerCase(object value);
    private static Dictionary`2<int, int> CreateMapping(string mapString, string translateString);
    public static string Translate(object item, string mapString, string transString);
    public static string EncodeForUri(object value);
    public static string IriToUri(object item);
    public static string EscapeHtmlUri(object item);
    public static bool Contains(string arg1, string arg2);
    public static bool Contains(XPath2Context context, string arg1, string arg2, string collation);
    public static bool StartsWith(string arg1, string arg2);
    public static bool StartsWith(XPath2Context context, string arg1, string arg2, string collation);
    public static bool EndsWith(string arg1, string arg2);
    public static bool EndsWith(XPath2Context context, string arg1, string arg2, string collation);
    public static string SubstringBefore(string arg1, string arg2);
    public static string SubstringBefore(XPath2Context context, string arg1, string arg2, string collation);
    public static string SubstringAfter(string arg1, string arg2);
    public static string SubstringAfter(XPath2Context context, string arg1, string arg2, string collation);
    private static bool ParseFlags(string flagString, RegexOptions& flags);
    private static bool IsValidReplacementString(string str);
    private static string UnescapeReplacementString(string str);
    public static bool Matches(object arg1, object arg2, string flagString);
    public static bool Matches(object arg1, object arg2);
    public static string Replace(object arg1, object arg2, string replacement, string flagString);
    public static string Replace(object arg1, object arg2, string replacement);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<StringEnumerator>d__48")]
private static IEnumerable`1<XPathItem> StringEnumerator(string input, string exclude, RegexOptions flags);
    public static XPath2NodeIterator Tokenize(object arg1, object arg2, string flagString);
    public static XPath2NodeIterator Tokenize(object arg1, object arg2);
    public static object YearsFromDuration(object arg);
    public static object MonthsFromDuration(object arg);
    public static object DaysFromDuration(object arg);
    public static object HoursFromDuration(object arg);
    public static object MinutesFromDuration(object arg);
    public static object SecondsFromDuration(object arg);
    public static object YearFromDateTime(object arg);
    public static object MonthFromDateTime(object arg);
    public static object DayFromDateTime(object arg);
    public static object HoursFromDateTime(object arg);
    public static object MinutesFromDateTime(object arg);
    public static object SecondsFromDateTime(object arg);
    public static object TimezoneFromDateTime(object arg);
    public static object YearFromDate(object arg);
    public static object MonthFromDate(object arg);
    public static object DayFromDate(object arg);
    public static object TimezoneFromDate(object arg);
    public static object HoursFromTime(object arg);
    public static object MinutesFromTime(object arg);
    public static object SecondsFromTime(object arg);
    public static object TimezoneFromTime(object arg);
    public static object AdjustDateTimeToTimezone(object arg);
    public static object AdjustDateTimeToTimezone(object arg, object tz);
    public static object AdjustDateToTimezone(object arg);
    public static object AdjustDateToTimezone(object arg, object tz);
    public static object AdjustTimeToTimezone(object arg);
    public static object AdjustTimeToTimezone(object arg, object tz);
    public static object GetAbs(object value);
    public static object GetCeiling(object value);
    public static object GetFloor(object value);
    public static object GetRound(object value);
    public static object GetRoundHalfToEven(object value);
    public static object GetRoundHalfToEven(object value, object precision);
    public static object Compare(XPath2Context context, object a, object b, string collation);
    public static object Compare(object a, object b);
    public static object CodepointEqual(object a, object b);
    public static bool EmptySequence(XPath2NodeIterator iter);
    public static bool ExistsSequence(XPath2NodeIterator iter);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<ReverseIterator>d__89")]
private static IEnumerable`1<XPathItem> ReverseIterator(LinkedList`1<XPathItem> list);
    public static XPath2NodeIterator ReverseSequence(XPath2NodeIterator iter);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<IndexOfIterator>d__91")]
private static IEnumerable`1<XPathItem> IndexOfIterator(XPath2NodeIterator iter, object value, CultureInfo collation);
    public static XPath2NodeIterator IndexOfSequence(XPath2NodeIterator iter, object value);
    public static XPath2NodeIterator IndexOfSequence(XPath2Context context, XPath2NodeIterator iter, object value, string collation);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<RemoveIterator>d__94")]
private static IEnumerable`1<XPathItem> RemoveIterator(XPath2NodeIterator iter, int index);
    public static XPath2NodeIterator Remove(XPath2NodeIterator iter, int index);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<InsertIterator>d__96")]
private static IEnumerable`1<XPathItem> InsertIterator(XPath2NodeIterator iter, int index, XPath2NodeIterator iter2);
    public static XPath2NodeIterator InsertBefore(XPath2NodeIterator iter, int index, XPath2NodeIterator iter2);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<SubsequenceIterator>d__98")]
private static IEnumerable`1<XPathItem> SubsequenceIterator(XPath2NodeIterator iter, double startingLoc, double length);
    public static XPath2NodeIterator Subsequence(XPath2NodeIterator iter, double startingLoc);
    public static XPath2NodeIterator Subsequence(XPath2NodeIterator iter, double startingLoc, double length);
    public static XPath2NodeIterator Unordered(XPath2NodeIterator iter);
    public static object ZeroOrOne(XPath2NodeIterator iter);
    public static XPath2NodeIterator OneOrMore(XPath2NodeIterator iter);
    public static object ExactlyOne(XPath2NodeIterator iter);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<DistinctIterator>d__106")]
private static IEnumerable`1<XPathItem> DistinctIterator(XPath2NodeIterator iter, CultureInfo cultute);
    public static XPath2NodeIterator DistinctValues(XPath2NodeIterator iter);
    public static XPath2NodeIterator DistinctValues(XPath2Context context, XPath2NodeIterator iter, string collation);
    public static bool DeepEqual(XPath2NodeIterator iter1, XPath2NodeIterator iter2);
    public static bool DeepEqual(XPath2Context context, XPath2NodeIterator iter1, XPath2NodeIterator iter2, string collation);
    public static int CountValues(XPath2NodeIterator iter);
    public static object MaxValue(XPath2Context context, XPath2NodeIterator iter, string collation);
    public static object MaxValue(XPath2Context context, XPath2NodeIterator iter);
    public static object MinValue(XPath2Context context, XPath2NodeIterator iter, string collation);
    public static object MinValue(XPath2Context context, XPath2NodeIterator iter);
    public static object SumValue(XPath2Context context, XPath2NodeIterator iter);
    public static object SumValue(XPath2Context context, XPath2NodeIterator iter, object zero);
    public static object AvgValue(XPath2Context context, XPath2NodeIterator iter);
    public static object CreateDateTime(object dateArg, object timeArg);
    public static DateTimeValue GetCurrentDateTime(XPath2Context context);
    public static DateValue GetCurrentDate(XPath2Context context);
    public static TimeValue GetCurrentTime(XPath2Context context);
    public static void ScanLocalNamespaces(XmlNamespaceManager nsmgr, XPathNavigator node, bool recursive);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.ExtFuncs/<PrefixEnumerator>d__124")]
private static IEnumerable`1<XPathItem> PrefixEnumerator(XPathNavigator nav);
    public static XPath2NodeIterator GetInScopePrefixes(XPathNavigator nav);
    public static object GetNamespaceUriForPrefix(XPath2Context context, object prefix, XPathNavigator nav);
    public static object ResolveQName(XPath2Context context, object qname, XPathNavigator nav);
    public static QNameValue CreateQName(XPath2Context context, object ns, string qname);
    public static object PrefixFromQName(object qname);
    public static object LocalNameFromQName(object qname);
    public static object NamespaceUriFromQName(object qname);
    public static XPath2NodeIterator StringToCodepoint(object text);
    public static string CodepointToString(XPath2NodeIterator iter);
    public static string DefaultCollation(XPath2Context context);
    public static object ResolveUri(XPath2Context context, object relative);
    public static object ResolveUri(object relative, object baseUri);
    public static object StaticBaseUri(XPath2Context context);
    public static DayTimeDurationValue ImplicitTimezone(XPath2Context context);
    public static bool NodeLang(IContextProvider provider, object testLang);
    public static bool NodeLang(object testLang, object node);
    public static int CurrentPosition(IContextProvider provider);
    public static int LastPosition(IContextProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.FunctionTable : object {
    private Dictionary`2<FunctionDesc, XPathFunctionDef> _funcTable;
    private static object SyncRoot;
    [NullableAttribute("2")]
private static FunctionTable modreq(System.Runtime.CompilerServices.IsVolatile) _inst;
    public static FunctionTable Inst { get; }
    private static FunctionTable();
    public XPathFunctionDef Bind(string name, string ns, int arity);
    public void Add(string ns, string name, XPath2ResultType resultType, XPathFunctionDelegate action, bool overwriteExistingEntry);
    public void Add(string ns, string name, int arity, XPath2ResultType resultType, XPathFunctionDelegate action, bool overwriteExistingEntry);
    public static void Clear();
    public static FunctionTable get_Inst();
}
[NullableContextAttribute("1")]
public interface Wmhelp.XPath2.IContextProvider {
    public XPathItem Context { get; }
    public int CurrentPosition { get; }
    public int LastPosition { get; }
    public abstract virtual XPathItem get_Context();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual int get_LastPosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Integer : ValueType {
    private decimal _value;
    internal Integer(decimal value);
    public Integer(int value);
    public Integer(UInt32 value);
    public Integer(long value);
    public Integer(ulong value);
    public Integer(Integer other);
    public static Integer op_Implicit(byte value);
    public static Integer op_Implicit(sbyte value);
    public static Integer op_Implicit(short value);
    public static Integer op_Implicit(ushort value);
    public static Integer op_Implicit(long value);
    public static Integer op_Implicit(ulong value);
    public static Integer op_Implicit(int value);
    public static Integer op_Implicit(UInt32 value);
    public static sbyte op_Explicit(Integer i1);
    public static byte op_Explicit(Integer i1);
    public static char op_Explicit(Integer i1);
    public static short op_Explicit(Integer i1);
    public static ushort op_Explicit(Integer i1);
    public static int op_Explicit(Integer i1);
    public static UInt32 op_Explicit(Integer i1);
    public static long op_Explicit(Integer i1);
    public static ulong op_Explicit(Integer i1);
    public static float op_Explicit(Integer i1);
    public static double op_Explicit(Integer i1);
    public static decimal op_Explicit(Integer i1);
    public static Integer op_Explicit(decimal value);
    public static Integer op_Explicit(float value);
    public static Integer op_Explicit(double value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static string ToString(Integer value);
    public static Integer op_Addition(Integer i1, Integer i2);
    public static Integer op_Increment(Integer i1);
    public static Integer op_UnaryNegation(Integer i1);
    public static Integer op_Subtraction(Integer i1, Integer i2);
    public static Integer op_Decrement(Integer i1);
    public static Integer op_Multiply(Integer i1, Integer i2);
    public static Integer op_Division(Integer i1, Integer i2);
    public static Integer op_Modulus(Integer i1, Integer i2);
    public static bool op_Equality(Integer i1, Integer i2);
    public static bool op_Inequality(Integer i1, Integer i2);
    public static bool op_GreaterThan(Integer i1, Integer i2);
    public static bool op_LessThan(Integer i1, Integer i2);
    public static bool op_GreaterThanOrEqual(Integer i1, Integer i2);
    public static bool op_LessThanOrEqual(Integer i1, Integer i2);
    public static bool IsDerivedSubtype(object value);
    public static Integer ToInteger(object value);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual string ToString(IFormatProvider provider);
    public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    public sealed virtual ushort ToUInt16(IFormatProvider provider);
    public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    public sealed virtual ulong ToUInt64(IFormatProvider provider);
    private sealed virtual override int System.IComparable<Wmhelp.XPath2.Integer>.CompareTo(Integer other);
    private sealed virtual override bool System.IEquatable<Wmhelp.XPath2.Integer>.Equals(Integer other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Wmhelp.XPath2.ItemSet : object {
    private int _size;
    private XPathItem[] _items;
    private static XPathItem[] emptySet;
    [CompilerGeneratedAttribute]
private bool <Completed>k__BackingField;
    public int Capacity { get; public set; }
    public int Count { get; }
    public XPathItem Item { get; public set; }
    public bool Completed { get; public set; }
    private static ItemSet();
    private void EnsureCapacity(int min);
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_Count();
    public XPathItem get_Item(int index);
    public void set_Item(int index, XPathItem value);
    public void Add(XPathItem item);
    public void Clear();
    [CompilerGeneratedAttribute]
public bool get_Completed();
    [CompilerGeneratedAttribute]
public void set_Completed(bool value);
    public void Sort();
    public sealed virtual IEnumerator`1<XPathItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.AncestorNodeIterator : SequentialAxisNodeIterator {
    public AncestorNodeIterator(XPath2Context context, object nodeTest, bool matchSelf, XPath2NodeIterator iter);
    private AncestorNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.AttributeNodeIterator : SequentialAxisNodeIterator {
    public AttributeNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private AttributeNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Wmhelp.XPath2.Iterator.AxisNodeIterator : XPath2NodeIterator {
    protected XPath2Context context;
    protected XmlQualifiedNameTest nameTest;
    protected SequenceType typeTest;
    protected bool matchSelf;
    protected XPath2NodeIterator iter;
    protected XPathNavigator curr;
    protected int sequentialPosition;
    protected bool accept;
    public int SequentialPosition { get; }
    public AxisNodeIterator(XPath2Context context, object nodeTest, bool matchSelf, XPath2NodeIterator iter);
    public virtual XPath2NodeIterator CreateBufferedIterator();
    protected void AssignFrom(AxisNodeIterator src);
    protected bool TestItem();
    protected bool MoveNextIter();
    public virtual int get_SequentialPosition();
    public virtual void ResetSequentialPosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.ChildNodeIterator : SequentialAxisNodeIterator {
    public ChildNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private ChildNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.ChildOverDescendantsNodeIterator : XPath2NodeIterator {
    private XPathNodeType _kind;
    private XPath2Context _context;
    private NodeTest[] _nodeTest;
    private NodeTest _lastTest;
    private XPath2NodeIterator _iterator;
    private XPathNavigator _current;
    private int _depth;
    private bool _accept;
    private XPathNavigator _navigator;
    private int _sequentialPosition;
    public int SequentialPosition { get; }
    public ChildOverDescendantsNodeIterator(XPath2Context context, NodeTest[] nodeTest, XPath2NodeIterator iterator);
    private ChildOverDescendantsNodeIterator(ChildOverDescendantsNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    public virtual XPath2NodeIterator CreateBufferedIterator();
    private bool TestItem(XPathNavigator navigator, NodeTest nodeTest);
    protected virtual XPathItem NextItem();
    public virtual int get_SequentialPosition();
    public virtual void ResetSequentialPosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.DescendantNodeIterator : AxisNodeIterator {
    private int depth;
    public DescendantNodeIterator(XPath2Context context, object nodeTest, bool matchSelf, XPath2NodeIterator iter);
    private DescendantNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.DocumentOrderNodeIterator : XPath2NodeIterator {
    private ItemSet itemSet;
    private XPathNavigator lastNode;
    private int index;
    private DocumentOrderNodeIterator(ItemSet itemSet);
    public DocumentOrderNodeIterator(XPath2NodeIterator baseIter);
    public virtual XPath2NodeIterator Clone();
    public virtual XPath2NodeIterator CreateBufferedIterator();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.ExprNodeIterator : XPath2NodeIterator {
    private XPath2Context context;
    private AbstractNode node;
    private Object[] dataPool;
    private XPath2NodeIterator baseIter;
    private XPath2NodeIterator iter;
    private int sequentialPosition;
    public int SequentialPosition { get; }
    public ExprNodeIterator(XPath2Context context, AbstractNode node, Object[] dataPool, XPath2NodeIterator baseIter);
    public virtual XPath2NodeIterator Clone();
    public virtual XPath2NodeIterator CreateBufferedIterator();
    protected virtual XPathItem NextItem();
    public virtual int get_SequentialPosition();
    public virtual void ResetSequentialPosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.FollowingNodeIterator : AxisNodeIterator {
    private XPathNodeType kind;
    public FollowingNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private FollowingNodeIterator(FollowingNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.FollowingSiblingNodeIterator : SequentialAxisNodeIterator {
    public FollowingSiblingNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private FollowingSiblingNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.ItemIterator : XPath2NodeIterator {
    private XPath2NodeIterator iter;
    public ItemIterator(XPath2NodeIterator baseIter);
    public virtual XPath2NodeIterator Clone();
    public virtual XPath2NodeIterator CreateBufferedIterator();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.NamespaceNodeIterator : SequentialAxisNodeIterator {
    public NamespaceNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private NamespaceNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.ParentNodeIterator : SequentialAxisNodeIterator {
    public ParentNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private ParentNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.PositionFilterNodeIterator : XPath2NodeIterator {
    private XPath2NodeIterator iter;
    private int position;
    public PositionFilterNodeIterator(int pos, XPath2NodeIterator baseIter);
    public virtual XPath2NodeIterator Clone();
    public virtual XPath2NodeIterator CreateBufferedIterator();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.PrecedingNodeIterator : AxisNodeIterator {
    private XPathNodeType kind;
    private XPathNavigator nav;
    public PrecedingNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private PrecedingNodeIterator(PrecedingNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.PrecedingSiblingNodeIterator : SequentialAxisNodeIterator {
    public PrecedingSiblingNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private PrecedingSiblingNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.SelfNodeIterator : SequentialAxisNodeIterator {
    public SelfNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private SelfNodeIterator(AxisNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Wmhelp.XPath2.Iterator.SequentialAxisNodeIterator : AxisNodeIterator {
    private bool first;
    public SequentialAxisNodeIterator(XPath2Context context, object nodeTest, bool matchSelf, XPath2NodeIterator iter);
    protected abstract virtual bool MoveToFirst(XPathNavigator nav);
    protected abstract virtual bool MoveToNext(XPathNavigator nav);
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.SpecialChildNodeIterator : SequentialAxisNodeIterator {
    private XPathNodeType kind;
    public SpecialChildNodeIterator(XPath2Context context, object nodeTest, XPath2NodeIterator iter);
    private SpecialChildNodeIterator(SpecialChildNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual bool MoveToFirst(XPathNavigator nav);
    protected virtual bool MoveToNext(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Iterator.SpecialDescendantNodeIterator : AxisNodeIterator {
    private XPathNodeType kind;
    private int depth;
    public SpecialDescendantNodeIterator(XPath2Context context, object nodeTest, bool matchSelf, XPath2NodeIterator iter);
    private SpecialDescendantNodeIterator(SpecialDescendantNodeIterator src);
    public virtual XPath2NodeIterator Clone();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.MS.XmlCharType : ValueType {
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fPublicId;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    internal static string s_Whitespace;
    private static string s_LetterXml4e;
    private static string s_NCNameXml4e;
    private static string s_NCStartName;
    private static string s_NCName;
    private static string s_AttrValue;
    private static string s_CharData;
    private static string s_Text;
    private static UInt32 CharPropertiesSize;
    private static object s_Lock;
    private static Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) s_CharProperties;
    internal Byte[] charProperties;
    private static object StaticLock { get; }
    public static XmlCharType Instance { get; }
    private XmlCharType(Byte[] charProperties);
    private static object get_StaticLock();
    private static void InitInstanceNetStandardAndMono();
    private static void SetProperties(string ranges, byte value);
    private static void InitInstanceOther();
    private static void InitInstance();
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsLetter(char ch);
    public bool IsExtender(char ch);
    public bool IsNCNameChar(char ch);
    public bool IsStartNCNameChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsNameChar(char ch);
    public bool IsStartNameChar(char ch);
    public bool IsDigit(char ch);
    public bool IsHexDigit(char ch);
    public bool IsOnlyWhitespace(string str);
    public int IsOnlyWhitespaceWithPos(string str);
    public bool IsName(string str);
    public bool IsNmToken(string str);
    public int IsOnlyCharData(string str);
    public int IsPublicId(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.MS.XmlQualifiedNameTest : XmlQualifiedName {
    private bool exclude;
    private static string wildcard;
    private static XmlQualifiedNameTest wc;
    public static XmlQualifiedNameTest Wildcard { get; }
    public bool IsWildcard { get; }
    public bool IsNameWildcard { get; }
    public bool IsNamespaceWildcard { get; }
    private XmlQualifiedNameTest(string name, string ns, bool exclude);
    private static XmlQualifiedNameTest();
    public static XmlQualifiedNameTest get_Wildcard();
    public static XmlQualifiedNameTest New(string name, string ns);
    public static XmlQualifiedNameTest New(XmlQualifiedName qn);
    public bool get_IsWildcard();
    public bool get_IsNameWildcard();
    public bool get_IsNamespaceWildcard();
    private bool IsNameSubsetOf(XmlQualifiedNameTest other);
    private bool IsNamespaceSubsetOf(XmlQualifiedNameTest other);
    public bool IsSubsetOf(XmlQualifiedNameTest other);
    public bool HasIntersection(XmlQualifiedNameTest other);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Wmhelp.XPath2.MS.XmlReservedNs : object {
    public static string NsWdXsl;
    public static string NsXml;
    public static string NsXmlNs;
    public static string NsXs;
    public static string NsXsd;
    public static string NsXsi;
    public static string NsXQueryFunc;
    public static string NsXPathFunc;
    public static string NsXqtErrors;
    public static string NsXQueryDataType;
    public static string NsXQueryLocalFunc;
    public static string NsCollationCodepoint;
    public static string NsWmhExt;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.NameBinder : object {
    private int _slotIndex;
    private List`1<NameSlot> _slots;
    public int Length { get; }
    public int get_Length();
    public ReferenceLink PushVar(XmlQualifiedName name);
    public void PopVar();
    public ReferenceLink VarIndexByName(XmlQualifiedName name);
    public ReferenceLink NewReference();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.NodeIterator : XPath2NodeIterator {
    private IEnumerable`1<XPathItem> master;
    private IEnumerator`1<XPathItem> iterator;
    public NodeIterator(IEnumerable`1<XPathItem> enumerable);
    [DebuggerStepThroughAttribute]
public virtual XPath2NodeIterator Clone();
    public virtual XPath2NodeIterator CreateBufferedIterator();
    protected virtual void Init();
    protected virtual XPathItem NextItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.NodeList : XmlNodeList {
    private List`1<XmlNode> _list;
    private XPath2NodeIterator _iter;
    private bool _done;
    public int Count { get; }
    public NodeList(XPath2NodeIterator iter, XmlDocument doc);
    public virtual int get_Count();
    private XmlNode GetNode(XPathItem item);
    public static XmlNode ToXmlNode(XPathNavigator nav);
    public virtual IEnumerator GetEnumerator();
    public virtual XmlNode Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.NodeProvider : object {
    private XPathItem item;
    public XPathItem Context { get; }
    public int CurrentPosition { get; }
    public int LastPosition { get; }
    public NodeProvider(XPathItem item);
    public sealed virtual XPathItem get_Context();
    public sealed virtual int get_CurrentPosition();
    public sealed virtual int get_LastPosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Wmhelp.XPath2.Properties.Resources : object {
    public static string BadCharRef;
    public static string BinaryOperatorNotDefined;
    public static string ContextItemNotDefined;
    public static string ExpectedAtomicValue;
    public static string ExpectedBlockStart;
    public static string ExpectedModuleDecl;
    public static string ExpectedNCName;
    public static string ExpectedQNamePrefix;
    public static string ExpectedVariablePrefix;
    public static string ExpectingCharAfterQName;
    public static string ExternalVariableNotSet;
    public static string FileNotFound;
    public static string FOAR0001;
    public static string FOAR0002;
    public static string FOCA0002;
    public static string FOCA0005;
    public static string FOCH0001;
    public static string FODC0001;
    public static string FODC0004;
    public static string FODT0001;
    public static string FODT0002;
    public static string FODT0003;
    public static string FOER0000;
    public static string FONS0005;
    public static string FORG0001;
    public static string FORG0003;
    public static string FORG0004;
    public static string FORG0005;
    public static string FORG0006;
    public static string FORG0008;
    public static string FORG0009;
    public static string FORX0003;
    public static string FORX0004;
    public static string FOTY0012;
    public static string InvalidAttributeSequence;
    public static string InvalidFormat;
    public static string InvalidPITarget;
    public static string InvalidRegularExpr;
    public static string InvalidRegularExpressionFlags;
    public static string MoreThanOneItem;
    public static string Sch_EnumFinished;
    public static string Sch_EnumNotStarted;
    public static string UnaryOperatorNotDefined;
    public static string UnexpectedChar;
    public static string UnexpectedEOF;
    public static string UnknownExternalVariable;
    public static string UnsupportedNormalizationForm;
    public static string XPDY0002;
    public static string XPST0003;
    public static string XPST0004;
    public static string XPST0008;
    public static string XPST0017;
    public static string XPST0051;
    public static string XPST0080;
    public static string XPST0081;
    public static string XPTY0004;
    public static string XPTY0004_CAST;
    public static string XPTY0018;
    public static string XPTY0019;
    public static string XQDY0025;
    public static string XQDY0026;
    public static string XQDY0044;
    public static string XQDY0064;
    public static string XQDY0072;
    public static string XQST0022;
    public static string XQST0031;
    public static string XQST0032;
    public static string XQST0033;
    public static string XQST0034;
    public static string XQST0038;
    public static string XQST0039;
    public static string XQST0040;
    public static string XQST0045;
    public static string XQST0047;
    public static string XQST0049;
    public static string XQST0054;
    public static string XQST0055;
    public static string XQST0058;
    public static string XQST0059;
    public static string XQST0065;
    public static string XQST0066;
    public static string XQST0067;
    public static string XQST0068;
    public static string XQST0069;
    public static string XQST0070;
    public static string XQST0073;
    public static string XQST0076;
    public static string XQST0087;
    public static string XQST0088;
    public static string XQST0089;
    public static string XQTY0024;
    public static string XQTY0030;
    private static Resources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.Bool : ValueProxy {
    private bool _value;
    public object Value { get; }
    public Bool(bool value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual bool TryGt(ValueProxy val, Boolean& res);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.BoolFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.ByteProxy : ValueProxy {
    private byte _value;
    public object Value { get; }
    public ByteProxy(byte value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.ByteProxyFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual Type GetResultType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.DecimalProxy : ValueProxy {
    private decimal _value;
    public object Value { get; }
    public DecimalProxy(decimal value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.DecimalProxyFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.DoubleProxy : ValueProxy {
    private double _value;
    public object Value { get; }
    public DoubleProxy(double value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNaN();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.DoubleProxyFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.Float : ValueProxy {
    private float _value;
    public object Value { get; }
    public Float(float value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNaN();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.FloatFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.Int : ValueProxy {
    private int _value;
    public object Value { get; }
    public Int(int value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.IntegerProxy : ValueProxy {
    private Integer _value;
    public object Value { get; }
    public IntegerProxy(Integer value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.IntegerProxyFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.IntFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.Long : ValueProxy {
    private long _value;
    public object Value { get; }
    public Long(long value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.LongFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.SByteProxy : ValueProxy {
    private sbyte _value;
    public object Value { get; }
    public SByteProxy(sbyte value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.SByteProxyFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual Type GetResultType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.Short : ValueProxy {
    private short _value;
    public object Value { get; }
    public Short(short value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.ShortFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual Type GetResultType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.StringProxy : ValueProxy {
    private string _value;
    public object Value { get; }
    public StringProxy(string value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.StringProxyFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.UInt : ValueProxy {
    private UInt32 _value;
    public object Value { get; }
    public UInt(UInt32 value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.UIntFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.ULong : ValueProxy {
    private ulong _value;
    public object Value { get; }
    public ULong(ulong value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.ULongFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual Type GetResultType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.UShort : ValueProxy {
    private ushort _value;
    public object Value { get; }
    public UShort(ushort value);
    public virtual int GetValueCode();
    public virtual object get_Value();
    public virtual bool IsNumeric();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Proxy.UShortFactory : ValueProxyFactory {
    public static int Code;
    public bool IsNumeric { get; }
    public virtual ValueProxy Create(object value);
    public virtual int GetValueCode();
    public virtual Type GetValueType();
    public virtual Type GetResultType();
    public virtual bool get_IsNumeric();
    public virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Wmhelp.XPath2.Proxy.ValueProxy : object {
    public static int TYPES_MAX;
    private static Type dynamicValueType;
    protected static Dictionary`2<Type, ValueProxyFactory> valueFactory;
    private static Int32[0...,0...] conv_t;
    public object Value { get; }
    private static ValueProxy();
    public abstract virtual int GetValueCode();
    public abstract virtual object get_Value();
    protected abstract virtual bool Eq(ValueProxy val);
    protected virtual bool TryEq(ValueProxy val, Boolean& res);
    protected abstract virtual bool Gt(ValueProxy val);
    protected virtual bool TryGt(ValueProxy val, Boolean& res);
    protected abstract virtual ValueProxy Promote(ValueProxy val);
    protected abstract virtual ValueProxy Neg();
    protected abstract virtual ValueProxy Add(ValueProxy val);
    protected abstract virtual ValueProxy Sub(ValueProxy val);
    protected abstract virtual ValueProxy Mul(ValueProxy val);
    protected abstract virtual ValueProxy Div(ValueProxy val);
    protected abstract virtual Integer IDiv(ValueProxy val);
    protected abstract virtual ValueProxy Mod(ValueProxy val);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool IsNaN();
    public virtual bool IsNumeric();
    public static ValueProxy New(object value);
    public static bool IsProxyType(Type type);
    public static void AddFactory(IEnumerable`1<ValueProxyFactory> factories);
    private static void Bind();
    public static bool IsNumeric(Type type);
    public static Type GetType(Type type1, Type type2);
    public static bool Equals(ValueProxy val1, ValueProxy val2);
    public static bool Eq(object val1, object val2, Boolean& res);
    public static bool Eq(ValueProxy val1, ValueProxy val2, Boolean& res);
    public static bool op_GreaterThan(ValueProxy val1, ValueProxy val2);
    public static bool Gt(object val1, object val2, Boolean& res);
    public static bool Gt(ValueProxy val1, ValueProxy val2, Boolean& res);
    public static bool op_LessThan(ValueProxy val1, ValueProxy val2);
    public static bool op_GreaterThanOrEqual(ValueProxy val1, ValueProxy val2);
    public static bool op_LessThanOrEqual(ValueProxy val1, ValueProxy val2);
    public static ValueProxy op_Addition(ValueProxy val1, ValueProxy val2);
    public static ValueProxy op_UnaryNegation(ValueProxy val);
    public static ValueProxy op_Subtraction(ValueProxy val1, ValueProxy val2);
    public static ValueProxy op_Multiply(ValueProxy val1, ValueProxy val2);
    public static ValueProxy op_Division(ValueProxy val1, ValueProxy val2);
    public static ValueProxy op_Modulus(ValueProxy val1, ValueProxy val2);
    public static Integer op_IntegerDivide(ValueProxy val1, ValueProxy val2);
    public static ValueProxy Max(ValueProxy val1, ValueProxy val2);
    public static ValueProxy Min(ValueProxy val1, ValueProxy val2);
    public static object Unwrap(object value);
    public static ValueProxy op_Implicit(sbyte value);
    public static ValueProxy op_Implicit(byte value);
    public static ValueProxy op_Implicit(short value);
    public static ValueProxy op_Implicit(ushort value);
    public static ValueProxy op_Implicit(int value);
    public static ValueProxy op_Implicit(UInt32 value);
    public static ValueProxy op_Implicit(long value);
    public static ValueProxy op_Implicit(ulong value);
    public static ValueProxy op_Implicit(decimal value);
    public static ValueProxy op_Implicit(Integer value);
    public static ValueProxy op_Implicit(float value);
    public static ValueProxy op_Implicit(double value);
    public static ValueProxy op_Implicit(string value);
    public static sbyte op_Explicit(ValueProxy dv);
    public static byte op_Explicit(ValueProxy dv);
    public static short op_Explicit(ValueProxy dv);
    public static ushort op_Explicit(ValueProxy dv);
    public static int op_Explicit(ValueProxy dv);
    public static UInt32 op_Explicit(ValueProxy dv);
    public static long op_Explicit(ValueProxy dv);
    public static ulong op_Explicit(ValueProxy dv);
    public static decimal op_Explicit(ValueProxy dv);
    public static Integer op_Explicit(ValueProxy dv);
    public static float op_Explicit(ValueProxy dv);
    public static double op_Explicit(ValueProxy dv);
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Wmhelp.XPath2.Proxy.ValueProxyFactory : object {
    public bool IsNumeric { get; }
    public abstract virtual ValueProxy Create(object value);
    public abstract virtual int GetValueCode();
    public abstract virtual Type GetValueType();
    public virtual Type GetResultType();
    public abstract virtual bool get_IsNumeric();
    public abstract virtual int Compare(ValueProxyFactory other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.QNameParser : object {
    public static XmlQualifiedName Parse(string name, IXmlNamespaceResolver resolver, XmlNameTable nameTable);
    public static XmlQualifiedName Parse(string name, IXmlNamespaceResolver resolver, string defaultNamespace, XmlNameTable nameTable);
    public static XmlQualifiedName ParseFunction(string name, IXmlNamespaceResolver resolver, string defaultNamespace, XmlNameTable nameTable);
    public static int ParseNCName(string s, int offset);
    public static int ParseQName(string s, int offset, Int32& colonOffset);
    public static void Split(string value, String& prefix, String& localName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.RangeIterator : XPath2NodeIterator {
    private Integer _min;
    private Integer _max;
    private Integer _index;
    public int Count { get; }
    public bool IsRange { get; }
    public RangeIterator(Integer min, Integer max);
    public virtual XPath2NodeIterator Clone();
    public virtual int get_Count();
    protected virtual void Init();
    protected virtual XPathItem NextItem();
    public virtual XPath2NodeIterator CreateBufferedIterator();
    public virtual bool get_IsRange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.SequenceType : object {
    [CompilerGeneratedAttribute]
private XmlTypeCode <TypeCode>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlQualifiedNameTest <NameTest>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlTypeCardinality <Cardinality>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlSchemaType <SchemaType>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlSchemaElement <SchemaElement>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlSchemaAttribute <SchemaAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nillable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNode>k__BackingField;
    internal static SequenceType Void;
    internal static SequenceType Item;
    internal static SequenceType Items;
    internal static SequenceType Node;
    internal static SequenceType ProcessingInstruction;
    internal static SequenceType Text;
    internal static SequenceType Comment;
    internal static SequenceType Element;
    internal static SequenceType Attribute;
    internal static SequenceType Document;
    internal static SequenceType Boolean;
    internal static SequenceType AnyAtomicType;
    internal static SequenceType AnyAtomicTypeOptional;
    internal static SequenceType Double;
    internal static SequenceType Date;
    internal static SequenceType Time;
    internal static SequenceType DateTime;
    internal static SequenceType StringOptional;
    internal static SequenceType String;
    internal static SequenceType Int;
    public XmlTypeCode TypeCode { get; public set; }
    public XmlQualifiedNameTest NameTest { get; public set; }
    public XmlTypeCardinality Cardinality { get; public set; }
    public XmlSchemaType SchemaType { get; public set; }
    public XmlSchemaElement SchemaElement { get; public set; }
    public XmlSchemaAttribute SchemaAttribute { get; public set; }
    public bool Nillable { get; public set; }
    [NullableAttribute("2")]
public Type ParameterType { get; public set; }
    public Type ItemType { get; }
    public bool IsNode { get; }
    public Type ValueType { get; }
    public Type AtomizedValueType { get; }
    public bool IsNumeric { get; }
    public bool IsUntypedAtomic { get; }
    public SequenceType(XmlTypeCode typeCode);
    public SequenceType(XmlTypeCode typeCode, XmlTypeCardinality cardinality);
    public SequenceType(XmlTypeCode typeCode, XmlTypeCardinality cardinality, Type clrType);
    public SequenceType(XmlTypeCode typeCode, XmlQualifiedNameTest nameTest);
    public SequenceType(XmlTypeCode typeCode, XmlQualifiedNameTest nameTest, XmlSchemaType schemaType, bool isNillable);
    public SequenceType(XmlSchemaElement schemaElement);
    public SequenceType(XmlSchemaAttribute schemaAttribute);
    public SequenceType(XmlSchemaType schemaType, XmlTypeCardinality cardinality, Type clrType);
    public SequenceType(Type clrType, XmlTypeCardinality cardinality);
    public SequenceType(XmlTypeCode typeCode, IXmlSchemaInfo schemaInfo, Type clrType);
    public SequenceType(SequenceType src);
    private static SequenceType();
    [CompilerGeneratedAttribute]
public XmlTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
public void set_TypeCode(XmlTypeCode value);
    [CompilerGeneratedAttribute]
public XmlQualifiedNameTest get_NameTest();
    [CompilerGeneratedAttribute]
public void set_NameTest(XmlQualifiedNameTest value);
    [CompilerGeneratedAttribute]
public XmlTypeCardinality get_Cardinality();
    [CompilerGeneratedAttribute]
public void set_Cardinality(XmlTypeCardinality value);
    [CompilerGeneratedAttribute]
public XmlSchemaType get_SchemaType();
    [CompilerGeneratedAttribute]
public void set_SchemaType(XmlSchemaType value);
    [CompilerGeneratedAttribute]
public XmlSchemaElement get_SchemaElement();
    [CompilerGeneratedAttribute]
public void set_SchemaElement(XmlSchemaElement value);
    [CompilerGeneratedAttribute]
public XmlSchemaAttribute get_SchemaAttribute();
    [CompilerGeneratedAttribute]
public void set_SchemaAttribute(XmlSchemaAttribute value);
    [CompilerGeneratedAttribute]
public bool get_Nillable();
    [CompilerGeneratedAttribute]
public void set_Nillable(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_ParameterType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ParameterType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ItemType();
    [CompilerGeneratedAttribute]
public bool get_IsNode();
    public Type get_ValueType();
    public Type get_AtomizedValueType();
    public bool get_IsNumeric();
    public bool get_IsUntypedAtomic();
    private bool MatchName(XPathNavigator nav, XPath2Context context);
    public XPathNodeType GetNodeKind();
    public bool Match(XPathItem item, XPath2Context context);
    public virtual string ToString();
    public static XmlTypeCode GetXmlTypeCode(object value);
    public static bool TypeCodeIsNodeType(XmlTypeCode typeCode);
    public static Type TypeCodeToItemType(XmlTypeCode typeCode, XmlSchemaType schemaType);
    public static XmlTypeCode GetXmlTypeCode(Type type);
    public bool IsDerivedFrom(SequenceType src);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SequenceType Create(string name);
}
public class Wmhelp.XPath2.Token : object {
    public static int StringLiteral;
    public static int IntegerLiteral;
    public static int DecimalLiteral;
    public static int DoubleLiteral;
    public static int NCName;
    public static int QName;
    public static int VarName;
    public static int FOR;
    public static int IN;
    public static int IF;
    public static int THEN;
    public static int ELSE;
    public static int SOME;
    public static int EVERY;
    public static int SATISFIES;
    public static int RETURN;
    public static int AND;
    public static int OR;
    public static int TO;
    public static int DOCUMENT;
    public static int ELEMENT;
    public static int ATTRIBUTE;
    public static int TEXT;
    public static int COMMENT;
    public static int PROCESSING_INSTRUCTION;
    public static int ML;
    public static int DIV;
    public static int IDIV;
    public static int MOD;
    public static int UNION;
    public static int EXCEPT;
    public static int INTERSECT;
    public static int INSTANCE_OF;
    public static int TREAT_AS;
    public static int CASTABLE_AS;
    public static int CAST_AS;
    public static int EQ;
    public static int NE;
    public static int LT;
    public static int GT;
    public static int GE;
    public static int LE;
    public static int IS;
    public static int NODE;
    public static int DOUBLE_PERIOD;
    public static int DOUBLE_SLASH;
    public static int EMPTY_SEQUENCE;
    public static int ITEM;
    public static int AXIS_CHILD;
    public static int AXIS_DESCENDANT;
    public static int AXIS_ATTRIBUTE;
    public static int AXIS_SELF;
    public static int AXIS_DESCENDANT_OR_SELF;
    public static int AXIS_FOLLOWING_SIBLING;
    public static int AXIS_FOLLOWING;
    public static int AXIS_PARENT;
    public static int AXIS_ANCESTOR;
    public static int AXIS_PRECEDING_SIBLING;
    public static int AXIS_PRECEDING;
    public static int AXIS_ANCESTOR_OR_SELF;
    public static int AXIS_NAMESPACE;
    public static int Indicator1;
    public static int Indicator2;
    public static int Indicator3;
    public static int DOCUMENT_NODE;
    public static int SCHEMA_ELEMENT;
    public static int SCHEMA_ATTRIBUTE;
    public static int yyErrorCode;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Tokenizer : object {
    private TextReader m_reader;
    private int m_position;
    private LexerState m_state;
    private StringBuilder m_buffer;
    private Stack`1<LexerState> m_states;
    private Queue`1<CurrentToken> m_token;
    private int m_anchor;
    private Int32[] m_bookmark;
    private int m_length;
    private object m_value;
    [CompilerGeneratedAttribute]
private int <LineNo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColNo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentPos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentLength>k__BackingField;
    public int LineNo { get; protected set; }
    public int ColNo { get; protected set; }
    public int Position { get; }
    public int CurrentPos { get; private set; }
    public int CurrentLength { get; private set; }
    internal Tokenizer(string strInput);
    internal Tokenizer(TextReader reader);
    [CompilerGeneratedAttribute]
public int get_LineNo();
    [CompilerGeneratedAttribute]
protected void set_LineNo(int value);
    [CompilerGeneratedAttribute]
public int get_ColNo();
    [CompilerGeneratedAttribute]
protected void set_ColNo(int value);
    public int get_Position();
    protected char Peek(int lookahead);
    protected char Read();
    private void BeginToken();
    private void EndToken();
    private void BeginToken(int anchor);
    private void EndToken(string s);
    private void ConsumeNumber();
    private void ConsumeLiteral();
    private void ConsumeNCName();
    private void ConsumeQName();
    private void ConsumeChar(char token);
    private void ConsumeToken(int token);
    private void ConsumeToken(int token, int anchor, int length);
    private void ConsumeToken(int token, object value, int anchor, int length);
    private void ConsumeToken(int token, object value);
    private bool MatchText(string text);
    private bool MatchIdentifer(String[] identifer);
    private void SkipWhitespace();
    private void DefaultState();
    private void VarNameState();
    private void OperatorState();
    public sealed virtual bool advance();
    private void SingleTypeState();
    private void ItemTypeState();
    private void KindTestState();
    private void KindTestForPiState();
    private void CloseKindTestState();
    private void OccurrenceIndicatorState();
    private void EnterState();
    public sealed virtual int token();
    public sealed virtual object value();
    [CompilerGeneratedAttribute]
public int get_CurrentPos();
    [CompilerGeneratedAttribute]
private void set_CurrentPos(int value);
    [CompilerGeneratedAttribute]
public int get_CurrentLength();
    [CompilerGeneratedAttribute]
private void set_CurrentLength(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.TreeComparer : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreWhitespace>k__BackingField;
    public bool IgnoreWhitespace { get; public set; }
    public TreeComparer(CultureInfo culture);
    [CompilerGeneratedAttribute]
public bool get_IgnoreWhitespace();
    [CompilerGeneratedAttribute]
public void set_IgnoreWhitespace(bool value);
    private bool TextEqual(string a, string b);
    private bool ItemEqual(XPathItem item1, XPathItem item2);
    private bool IsWhitespaceNode(XPathNavigator nav);
    private bool NodeEqual(XPathNavigator nav1, XPathNavigator nav2);
    private bool ElementEqual(XPathNavigator nav1, XPathNavigator nav2);
    private bool ElementAttributesEqual(XPathNavigator nav1, XPathNavigator nav2);
    private bool ProcessingInstructionEqual(XPathNavigator nav1, XPathNavigator nav2);
    private bool AttributeEqual(XPathNavigator nav1, XPathNavigator nav2);
    public bool DeepEqual(XPathNavigator nav1, XPathNavigator nav2);
    public bool DeepEqual(XPath2NodeIterator iter1, XPath2NodeIterator iter2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Undefined : object {
    [CompilerGeneratedAttribute]
private static Undefined <Value>k__BackingField;
    public static Undefined Value { get; }
    private static Undefined();
    [CompilerGeneratedAttribute]
public static Undefined get_Value();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.AnyUriValue : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public AnyUriValue(string value);
    public AnyUriValue(Uri uri);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual object ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
    public sealed virtual int CompareTo(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.Base64BinaryValue : object {
    [CompilerGeneratedAttribute]
private Byte[] <BinaryValue>k__BackingField;
    public Byte[] BinaryValue { get; }
    public Base64BinaryValue(Byte[] binaryValue);
    [CompilerGeneratedAttribute]
public Byte[] get_BinaryValue();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object Wmhelp.XPath2.Value.IXmlConvertable.ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.DateTimeValue : DateTimeValueBase {
    public static int ProxyValueCode;
    private static String[] DateTimeFormats;
    private static String[] DateTimeOffsetFormats;
    private static Int16[] monthData;
    public DateTimeValue(bool sign, DateTime value);
    public DateTimeValue(bool sign, DateTimeOffset value);
    public DateTimeValue(bool sign, DateTime date, DateTime time);
    public DateTimeValue(bool sign, DateTime date, DateTime time, TimeSpan offset);
    private static DateTimeValue();
    public virtual string ToString();
    public static DateTimeValue Parse(string text);
    public static int GetJulianDayNumber(int year, int month, int day);
    public static DateTimeValue GetDateFromJulianDayNumber(int julianDayNumber);
    public decimal ToJulianInstant();
    public static DateTimeValue CreateFromJulianInstant(decimal instant);
    public static DateTimeValue Add(DateTimeValue dat, YearMonthDurationValue duration);
    public static DateTimeValue Add(DateTimeValue dat, DayTimeDurationValue duration);
    private static DayTimeDurationValue Sub(DateTimeValue dat1, DateTimeValue dat2);
    private sealed virtual override object Wmhelp.XPath2.Value.IXmlConvertable.ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Wmhelp.XPath2.Value.DateTimeValueBase : object {
    [CompilerGeneratedAttribute]
private bool <S>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    public bool S { get; protected set; }
    public DateTimeOffset Value { get; }
    public bool IsLocal { get; public set; }
    public DateTimeValueBase(bool sign, DateTime value);
    public DateTimeValueBase(bool sign, DateTimeOffset value);
    public DateTimeValueBase(bool sign, DateTime date, DateTime time);
    public DateTimeValueBase(bool sign, DateTime date, DateTime time, TimeSpan offset);
    [CompilerGeneratedAttribute]
public bool get_S();
    [CompilerGeneratedAttribute]
protected void set_S(bool value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsLocal();
    [CompilerGeneratedAttribute]
public void set_IsLocal(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public GYearMonthValue ToGYearMonth();
    public GYearValue ToGYear();
    public GDayValue ToGDay();
    public GMonthValue ToGMonth();
    public GMonthDayValue ToGMonthDay();
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual string ToString(IFormatProvider provider);
    public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    public sealed virtual ushort ToUInt16(IFormatProvider provider);
    public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    public sealed virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.DateValue : DateTimeValueBase {
    public static int ProxyValueCode;
    private static String[] DateTimeFormats;
    private static String[] DateTimeOffsetFormats;
    public DateValue(bool sign, DateTimeOffset value);
    public DateValue(bool sign, DateTime value);
    private static DateValue();
    public virtual string ToString();
    public static DateValue Parse(string text);
    public decimal ToJulianInstant();
    public static DateValue Add(DateValue dat, YearMonthDurationValue duration);
    public static DateValue Add(DateValue dat, DayTimeDurationValue duration);
    private static DayTimeDurationValue Sub(DateValue dat1, DateValue dat2);
    private sealed virtual override object Wmhelp.XPath2.Value.IXmlConvertable.ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.DayTimeDurationValue : DurationValue {
    public static int ProxyValueCode;
    public DayTimeDurationValue(TimeSpan value);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public static DayTimeDurationValue Multiply(DayTimeDurationValue a, double b);
    public static DayTimeDurationValue Divide(DayTimeDurationValue a, double b);
    private static decimal Divide(DayTimeDurationValue a, DayTimeDurationValue b);
    public static DayTimeDurationValue op_UnaryNegation(DayTimeDurationValue d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.DurationValue : object {
    public static int ProxyValueCode;
    [CompilerGeneratedAttribute]
private TimeSpan <LowPartValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HighPartValue>k__BackingField;
    public TimeSpan LowPartValue { get; }
    public TimeSpan HighPartValue { get; }
    public bool IsZero { get; }
    public int Years { get; }
    public int Months { get; }
    public int Days { get; }
    public int Hours { get; }
    public int Minutes { get; }
    public int Seconds { get; }
    public int Milliseconds { get; }
    public int TotalDays { get; }
    public int TotalMonths { get; }
    public DurationValue(TimeSpan hi, TimeSpan low);
    [CompilerGeneratedAttribute]
public TimeSpan get_LowPartValue();
    [CompilerGeneratedAttribute]
public TimeSpan get_HighPartValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool get_IsZero();
    public int get_Years();
    public int get_Months();
    public int get_Days();
    public int get_Hours();
    public int get_Minutes();
    public int get_Seconds();
    public int get_Milliseconds();
    public int get_TotalDays();
    public int get_TotalMonths();
    public virtual string ToString();
    public virtual string ZeroStringValue();
    public static DurationValue Parse(string text);
    public sealed virtual object ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.ENTITIESValue : object {
    [CompilerGeneratedAttribute]
private String[] <ValueList>k__BackingField;
    public String[] ValueList { get; }
    public ENTITIESValue(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ValueList();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.GDayValue : DateTimeValueBase {
    public GDayValue(DateTimeOffset value);
    public GDayValue(DateTime value);
    public virtual string ToString();
    public static GDayValue Parse(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.GMonthDayValue : DateTimeValueBase {
    public GMonthDayValue(DateTimeOffset value);
    public GMonthDayValue(DateTime value);
    public virtual string ToString();
    public static GMonthDayValue Parse(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.GMonthValue : DateTimeValueBase {
    public GMonthValue(DateTimeOffset value);
    public GMonthValue(DateTime value);
    public virtual string ToString();
    public static GMonthValue Parse(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.GYearMonthValue : DateTimeValueBase {
    private static String[] GYearMonthFormats;
    private static String[] GYearMonthOffsetFormats;
    public GYearMonthValue(bool sign, DateTimeOffset value);
    public GYearMonthValue(bool sign, DateTime value);
    private static GYearMonthValue();
    public virtual string ToString();
    public static GYearMonthValue Parse(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.GYearValue : DateTimeValueBase {
    private static String[] GYearFormats;
    private static String[] GYearOffsetFormats;
    public GYearValue(bool sign, DateTimeOffset value);
    public GYearValue(bool sign, DateTime value);
    private static GYearValue();
    public virtual string ToString();
    public static GYearValue Parse(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.HexBinaryValue : object {
    [CompilerGeneratedAttribute]
private Byte[] <BinaryValue>k__BackingField;
    public Byte[] BinaryValue { get; }
    public HexBinaryValue(Byte[] binaryValue);
    [CompilerGeneratedAttribute]
public Byte[] get_BinaryValue();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object Wmhelp.XPath2.Value.IXmlConvertable.ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.IDREFSValue : object {
    [CompilerGeneratedAttribute]
private String[] <ValueList>k__BackingField;
    public String[] ValueList { get; }
    public IDREFSValue(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ValueList();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface Wmhelp.XPath2.Value.IXmlConvertable {
    public abstract virtual object ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.NMTOKENSValue : object {
    [CompilerGeneratedAttribute]
private String[] <ValueList>k__BackingField;
    public String[] ValueList { get; }
    public NMTOKENSValue(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ValueList();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.NotationValue : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceUri>k__BackingField;
    public string Prefix { get; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public NotationValue(QNameValue name);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_LocalName();
    [CompilerGeneratedAttribute]
public string get_NamespaceUri();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override object Wmhelp.XPath2.Value.IXmlConvertable.ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
    public static NotationValue Parse(string name, XmlNamespaceManager resolver);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.QNameValue : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceUri>k__BackingField;
    public string Prefix { get; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public bool IsEmpty { get; }
    public QNameValue(string prefix, string localName, string ns, XmlNameTable nameTable);
    public QNameValue(XmlQualifiedName qname);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_LocalName();
    [CompilerGeneratedAttribute]
public string get_NamespaceUri();
    public bool get_IsEmpty();
    public XmlQualifiedName ToQualifiedName();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object Wmhelp.XPath2.Value.IXmlConvertable.ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
    public static QNameValue Parse(string qname, string ns, XmlNameTable nameTable);
    public static QNameValue Parse(string qname, XmlNamespaceManager resolver);
    public static QNameValue Parse(string qname, XmlNamespaceManager resolver, string defaultNs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Value.ShadowProxy : ValueProxy {
    private object _value;
    private int _valueCode;
    private bool _isNumeric;
    public object Value { get; }
    public ShadowProxy(ValueProxy proxy);
    public virtual int GetValueCode();
    public virtual bool IsNumeric();
    public virtual object get_Value();
    protected virtual bool Eq(ValueProxy val);
    protected virtual bool Gt(ValueProxy val);
    protected virtual ValueProxy Promote(ValueProxy val);
    protected virtual ValueProxy Neg();
    protected virtual ValueProxy Add(ValueProxy val);
    protected virtual ValueProxy Sub(ValueProxy val);
    protected virtual ValueProxy Mul(ValueProxy val);
    protected virtual ValueProxy Div(ValueProxy val);
    protected virtual Integer IDiv(ValueProxy val);
    protected virtual ValueProxy Mod(ValueProxy val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.Value.StringTokenizer : object {
    private string _text;
    private int _offset;
    [CompilerGeneratedAttribute]
private int <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineCount>k__BackingField;
    public static int TokenInt;
    public int Token { get; private set; }
    public string Value { get; private set; }
    public int LineCount { get; private set; }
    public int Offset { get; }
    public StringTokenizer(string text);
    private static StringTokenizer();
    [CompilerGeneratedAttribute]
public int get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(int value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_LineCount();
    [CompilerGeneratedAttribute]
private void set_LineCount(int value);
    public int get_Offset();
    public virtual string ToString();
    public int NextToken();
    public void SkipTo(char ch);
    public void SkipTo(Char[] charset);
    public void SkipTo(string charset);
    public string SkipToEOL();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.TimeValue : object {
    public static int ProxyValueCode;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    private static String[] TimeFormats;
    private static String[] TimeOffsetFormats;
    public DateTimeOffset Value { get; }
    public bool IsLocal { get; }
    public TimeValue(DateTimeOffset value);
    public TimeValue(DateTime value);
    private static TimeValue();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsLocal();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static TimeValue Parse(string text);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public static TimeValue Add(TimeValue tm, DayTimeDurationValue duration);
    public static DayTimeDurationValue Sub(TimeValue tm1, TimeValue tm2);
    private sealed virtual override object Wmhelp.XPath2.Value.IXmlConvertable.ValueAs(SequenceType type, XmlNamespaceManager nsmgr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.UntypedAtomic : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    private object _doubleValue;
    public string Value { get; }
    public UntypedAtomic(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private bool CanBeNumber();
    public bool TryParseDouble(Double& num);
    public sealed virtual object Clone();
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual string ToString(IFormatProvider provider);
    public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    public sealed virtual ushort ToUInt16(IFormatProvider provider);
    public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    public sealed virtual ulong ToUInt64(IFormatProvider provider);
    private sealed virtual override bool System.IEquatable<Wmhelp.XPath2.Value.UntypedAtomic>.Equals(UntypedAtomic other);
    private sealed virtual override int System.IComparable<Wmhelp.XPath2.Value.UntypedAtomic>.CompareTo(UntypedAtomic other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.Value.YearMonthDurationValue : DurationValue {
    public static int ProxyValueCode;
    public YearMonthDurationValue(TimeSpan value);
    public virtual string ZeroStringValue();
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private static int DaysToMonth(int days);
    private static int MonthToDays(int month);
    public static YearMonthDurationValue Multiply(YearMonthDurationValue a, double b);
    public static YearMonthDurationValue Divide(YearMonthDurationValue a, double b);
    public static decimal Divide(YearMonthDurationValue a, YearMonthDurationValue b);
    public static YearMonthDurationValue op_UnaryNegation(YearMonthDurationValue d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Wmhelp.XPath2.XmlNodeExtensions : object {
    [ExtensionAttribute]
public static XmlNodeList XPath2SelectNodes(XmlNode node, string xpath);
    [ExtensionAttribute]
public static XmlNodeList XPath2SelectNodes(XmlNode node, string xpath, IXmlNamespaceResolver nsmgr);
    [ExtensionAttribute]
public static object XPath2Evaluate(XmlNode node, string xpath);
    [ExtensionAttribute]
public static object XPath2Evaluate(XmlNode node, string xpath, object arg);
    [ExtensionAttribute]
public static object XPath2Evaluate(XmlNode node, string xpath, IXmlNamespaceResolver nsmgr);
    [ExtensionAttribute]
public static object XPath2Evaluate(XmlNode node, string xpath, IXmlNamespaceResolver nsmgr, object arg);
    [ExtensionAttribute]
public static XmlNode XPath2SelectSingleNode(XmlNode node, string xquery);
    [ExtensionAttribute]
public static XmlNode XPath2SelectSingleNode(XmlNode node, string xquery, IXmlNamespaceResolver nsmgr);
    [ExtensionAttribute]
public static XmlNode XPath2SelectSingleNode(XmlNode node, string xquery, object arg);
    [ExtensionAttribute]
public static XmlNode XPath2SelectSingleNode(XmlNode node, string xquery, IXmlNamespaceResolver nsmgr, object arg);
}
public enum Wmhelp.XPath2.XmlTypeCardinality : Enum {
    public int value__;
    public static XmlTypeCardinality One;
    public static XmlTypeCardinality ZeroOrOne;
    public static XmlTypeCardinality OneOrMore;
    public static XmlTypeCardinality ZeroOrMore;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Wmhelp.XPath2.XNodeExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> XPath2Select(XNode node, string xpath);
    [ExtensionAttribute]
public static IEnumerable`1<T> XPath2Select(XNode node, string xpath, IXmlNamespaceResolver nsResolver);
    [ExtensionAttribute]
public static IEnumerable`1<T> XPath2Select(XNode node, string xpath, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<T> XPath2Select(XNode node, string xpath, IXmlNamespaceResolver nsResolver, object arg);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XNodeExtensions/<XPath2Select>d__4`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> XPath2Select(XNode node, XPath2Expression expression, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<object> XPath2Select(XNode node, string xpath, IXmlNamespaceResolver nsResolver);
    [ExtensionAttribute]
public static IEnumerable`1<object> XPath2Select(XNode node, string xpath, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<object> XPath2Select(XNode node, string xpath, IXmlNamespaceResolver nsResolver, object arg);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XNodeExtensions/<XPath2Select>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<object> XPath2Select(XNode node, XPath2Expression expression, object arg);
    [ExtensionAttribute]
public static T XPath2SelectOne(XNode node, string xpath);
    [ExtensionAttribute]
public static T XPath2SelectOne(XNode node, string xpath, IXmlNamespaceResolver nsResolver);
    [ExtensionAttribute]
public static T XPath2SelectOne(XNode node, string xpath, object arg);
    [ExtensionAttribute]
public static T XPath2SelectOne(XNode node, string xpath, IXmlNamespaceResolver nsResolver, object arg);
    [ExtensionAttribute]
public static T XPath2SelectOne(XNode node, XPath2Expression expression, object arg);
    [ExtensionAttribute]
public static object XPath2SelectOne(XNode node, string xpath, object arg);
    [ExtensionAttribute]
public static object XPath2SelectOne(XNode node, string xpath, IXmlNamespaceResolver nsResolver, object arg);
    [ExtensionAttribute]
public static object XPath2SelectOne(XNode node, XPath2Expression expression, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPath2SelectElements(XNode node, string xpath, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPath2SelectElements(XNode node, string xpath, IXmlNamespaceResolver nsResolver, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPath2SelectElements(XNode node, XPath2Expression expression);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPath2SelectElements(XNode node, XPath2Expression expression, object arg);
    [ExtensionAttribute]
public static XElement XPath2SelectElement(XNode node, string xpath, object arg);
    [ExtensionAttribute]
public static XElement XPath2SelectElement(XNode node, string xpath, IXmlNamespaceResolver nsResolver, object arg);
    [ExtensionAttribute]
public static XElement XPath2SelectElement(XNode node, XPath2Expression expression, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<object> XPath2SelectValues(XNode node, string xpath, object arg);
    [ExtensionAttribute]
public static IEnumerable`1<object> XPath2SelectValues(XNode node, string xpath, IXmlNamespaceResolver nsResolver, object arg);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XNodeExtensions/<XPath2SelectValues>d__26")]
[ExtensionAttribute]
public static IEnumerable`1<object> XPath2SelectValues(XNode node, XPath2Expression expr, object arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.XPath2Context : object {
    [CompilerGeneratedAttribute]
private XPath2RunningContext <RunningContext>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNameTable <NameTable>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <NamespaceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlSchemaSet <SchemaSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultFunctionNamespace>k__BackingField;
    public XPath2RunningContext RunningContext { get; public set; }
    public XmlNameTable NameTable { get; }
    public XmlNamespaceManager NamespaceManager { get; }
    public XmlSchemaSet SchemaSet { get; public set; }
    public string DefaultFunctionNamespace { get; }
    public XPath2Context(IXmlNamespaceResolver nsManager);
    [CompilerGeneratedAttribute]
public XPath2RunningContext get_RunningContext();
    [CompilerGeneratedAttribute]
public void set_RunningContext(XPath2RunningContext value);
    [CompilerGeneratedAttribute]
public XmlNameTable get_NameTable();
    [CompilerGeneratedAttribute]
public XmlNamespaceManager get_NamespaceManager();
    [CompilerGeneratedAttribute]
public XmlSchemaSet get_SchemaSet();
    [CompilerGeneratedAttribute]
public void set_SchemaSet(XmlSchemaSet value);
    [CompilerGeneratedAttribute]
public string get_DefaultFunctionNamespace();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Wmhelp.XPath2.XPath2Convert : object {
    public static string ToString(object value);
    public static string ToString(bool value);
    public static string ToString(decimal value);
    public static string ToString(double value);
    public static string ToString(float value);
    public static object ChangeType(XmlSchemaType xmlType, object value, SequenceType type, XmlNameTable nameTable, XmlNamespaceManager nsmgr);
    public static object ChangeType(object value, Type returnType);
    public static object ValueAs(object value, SequenceType type, XmlNameTable nameTable, XmlNamespaceManager nsmgr);
    public static object TreatValueAs(object value, SequenceType type);
    [ExtensionAttribute]
public static object GetTypedValue(XPathItem item);
    [ExtensionAttribute]
public static XmlSchemaType GetSchemaType(XPathItem item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.XPath2Exception : Exception {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    public string ErrorCode { get; internal set; }
    protected XPath2Exception(SerializationInfo info, StreamingContext context);
    public XPath2Exception(string message, Exception innerException);
    public XPath2Exception(string errorCode, string message);
    public XPath2Exception(string errorCode, string message, Object[] args);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
internal void set_ErrorCode(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.XPath2Expression : object {
    private string expr;
    private XPath2Context context;
    private Nullable`1<XPath2ResultType> resultType;
    [CompilerGeneratedAttribute]
private AbstractNode <ExpressionTree>k__BackingField;
    public AbstractNode ExpressionTree { get; }
    public string Expression { get; }
    private XPath2Expression(string expr, AbstractNode exprTree, XPath2Context context);
    [CompilerGeneratedAttribute]
public AbstractNode get_ExpressionTree();
    public XPath2Expression Clone();
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XPath2Expression/<CreateIterator>d__8")]
private IEnumerable`1<XPathItem> CreateIterator(IEnumerable`1<XNode> en);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XPath2Expression/<CreateIterator>d__9")]
private IEnumerable`1<XPathItem> CreateIterator(IEnumerable`1<object> en);
    private object PrepareValue(object value);
    public static XPath2Expression Compile(string xpath);
    public static object Evaluate(string xpath2, object arg);
    public static object Evaluate(string xpath2, IXmlNamespaceResolver nsResolver, object arg);
    [ObsoleteAttribute("Please use Evaluate")]
public static object Evalute(string xpath2, IXmlNamespaceResolver nsResolver, IDictionary`2<XmlQualifiedName, object> param);
    public static object Evaluate(string xpath2, IXmlNamespaceResolver nsResolver, IDictionary`2<XmlQualifiedName, object> param);
    public static IEnumerable`1<T> Select(string xpath, object arg);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XPath2Expression/<Select>d__17`1")]
public static IEnumerable`1<T> Select(string xpath, IXmlNamespaceResolver resolver, object arg);
    public static IEnumerable`1<object> SelectValues(string xpath, object arg);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XPath2Expression/<SelectValues>d__19")]
public static IEnumerable`1<object> SelectValues(string xpath, IXmlNamespaceResolver resolver, object arg);
    public static IEnumerable`1<object> SelectValues(string xpath, IDictionary`2<XmlQualifiedName, object> param);
    [IteratorStateMachineAttribute("Wmhelp.XPath2.XPath2Expression/<SelectValues>d__21")]
public static IEnumerable`1<object> SelectValues(string xpath, IXmlNamespaceResolver resolver, IDictionary`2<XmlQualifiedName, object> vars);
    public static XPath2Expression Compile(string xpath, IXmlNamespaceResolver resolver);
    public object Evaluate();
    private Object[] BindExpr(IDictionary`2<XmlQualifiedName, object> vars);
    public object Evaluate(IContextProvider provider, IDictionary`2<XmlQualifiedName, object> vars);
    public object EvaluateWithProperties(IContextProvider provider, object props);
    public string get_Expression();
    public XPath2ResultType GetResultType(IDictionary`2<XmlQualifiedName, object> vars);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Atom|{Value},{ValueType}")]
public class Wmhelp.XPath2.XPath2Item : XPathItem {
    private object _value;
    private XmlSchemaType _xmlType;
    unknown object RawValue {public set; }
    public bool IsNode { get; }
    public object TypedValue { get; }
    public string Value { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public Type ValueType { get; }
    public XmlSchemaType XmlType { get; }
    public XPath2Item(object value);
    public XPath2Item(object value, XmlSchemaType xmlType);
    private void InferXmlType();
    public virtual string ToString();
    public void set_RawValue(object value);
    public virtual bool get_IsNode();
    public virtual object get_TypedValue();
    public virtual string get_Value();
    public virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual Type get_ValueType();
    public virtual XmlSchemaType get_XmlType();
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual string ToString(IFormatProvider provider);
    public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    public sealed virtual ushort ToUInt16(IFormatProvider provider);
    public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    public sealed virtual ulong ToUInt64(IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{curr}")]
[DebuggerTypeProxyAttribute("Wmhelp.XPath2.XPath2NodeIteratorDebugView")]
public abstract class Wmhelp.XPath2.XPath2NodeIterator : object {
    private int count;
    private XPathItem curr;
    private int pos;
    private bool iteratorStarted;
    private bool iteratorFinished;
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsSingleIterator { get; }
    public bool IsRange { get; }
    public XPathItem Current { get; }
    public int CurrentPosition { get; }
    public int SequentialPosition { get; }
    public bool IsStarted { get; }
    public bool IsFinished { get; }
    public abstract virtual XPath2NodeIterator Clone();
    public virtual int get_Count();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsSingleIterator();
    public virtual bool get_IsRange();
    public XPathItem get_Current();
    public int get_CurrentPosition();
    public virtual int get_SequentialPosition();
    public virtual void ResetSequentialPosition();
    public bool get_IsStarted();
    public virtual bool get_IsFinished();
    public bool MoveNext();
    public virtual List`1<XPathItem> ToList();
    public abstract virtual XPath2NodeIterator CreateBufferedIterator();
    public virtual string ToString();
    protected virtual void Init();
    protected abstract virtual XPathItem NextItem();
    public static XPath2NodeIterator Create(object value);
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<XPathItem> System.Collections.Generic.IEnumerable<System.Xml.XPath.XPathItem>.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.XPath2NodeIteratorDebugView : object {
    private XPath2NodeIterator iter;
    [DebuggerBrowsableAttribute("3")]
public XPathItem[] Items { get; }
    public XPathItem Current { get; }
    public int CurrentPosition { get; }
    public XPath2NodeIteratorDebugView(XPath2NodeIterator iter);
    public XPathItem[] get_Items();
    public XPathItem get_Current();
    public int get_CurrentPosition();
}
public enum Wmhelp.XPath2.XPath2ResultType : Enum {
    public int value__;
    public static XPath2ResultType Number;
    public static XPath2ResultType String;
    public static XPath2ResultType Navigator;
    public static XPath2ResultType Boolean;
    public static XPath2ResultType NodeSet;
    public static XPath2ResultType Any;
    public static XPath2ResultType Error;
    public static XPath2ResultType DateTime;
    public static XPath2ResultType Duration;
    public static XPath2ResultType AnyUri;
    public static XPath2ResultType QName;
    public static XPath2ResultType Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.XPath2RunningContext : object {
    [CompilerGeneratedAttribute]
private DateTime <Now>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <DefaultCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOrdered>k__BackingField;
    [CompilerGeneratedAttribute]
private NameBinder <NameBinder>k__BackingField;
    internal DateTime Now { get; }
    internal CultureInfo DefaultCulture { get; }
    internal string BaseUri { get; internal set; }
    internal bool IsOrdered { get; internal set; }
    internal NameBinder NameBinder { get; }
    [CompilerGeneratedAttribute]
internal DateTime get_Now();
    [CompilerGeneratedAttribute]
internal CultureInfo get_DefaultCulture();
    [CompilerGeneratedAttribute]
internal string get_BaseUri();
    [CompilerGeneratedAttribute]
internal void set_BaseUri(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsOrdered();
    [CompilerGeneratedAttribute]
internal void set_IsOrdered(bool value);
    [CompilerGeneratedAttribute]
internal NameBinder get_NameBinder();
    public CultureInfo GetCulture(string collationName);
}
internal class Wmhelp.XPath2.XPathComparer : object {
    [NullableContextAttribute("1")]
public sealed virtual int Compare(XPathItem x, XPathItem y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Wmhelp.XPath2.XPathFunctionDef : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private XPathFunctionDelegate <Delegate>k__BackingField;
    [CompilerGeneratedAttribute]
private XPath2ResultType <ResultType>k__BackingField;
    public string Name { get; private set; }
    [NullableAttribute("2")]
public XPathFunctionDelegate Delegate { get; }
    public XPath2ResultType ResultType { get; private set; }
    public XPathFunctionDef(string name, XPathFunctionDelegate delegate, XPath2ResultType resultType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public XPathFunctionDelegate get_Delegate();
    [CompilerGeneratedAttribute]
public XPath2ResultType get_ResultType();
    [CompilerGeneratedAttribute]
private void set_ResultType(XPath2ResultType value);
    public object Invoke(XPath2Context context, IContextProvider provider, Object[] args);
}
public class Wmhelp.XPath2.XPathFunctionDelegate : MulticastDelegate {
    public XPathFunctionDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(XPath2Context context, IContextProvider provider, Object[] args);
    public virtual IAsyncResult BeginInvoke(XPath2Context context, IContextProvider provider, Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.XPathNavigatorEqualityComparer : object {
    public sealed virtual bool Equals(XPathItem x, XPathItem y);
    public sealed virtual int GetHashCode(XPathItem obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Wmhelp.XPath2.XPathNavigatorExtensions : object {
    [ExtensionAttribute]
public static object XPath2Evaluate(XPathNavigator nav, string xpath2);
    [ExtensionAttribute]
public static object XPath2Evaluate(XPathNavigator nav, string xpath2, IXmlNamespaceResolver nsResolver);
    [ExtensionAttribute]
public static object XPath2Evaluate(XPathNavigator nav, string xpath2, IXmlNamespaceResolver nsResolver, object arg);
    [ExtensionAttribute]
public static object XPath2Evaluate(XPathNavigator nav, XPath2Expression expr);
    [ExtensionAttribute]
public static object XPath2Evaluate(XPathNavigator nav, XPath2Expression expr, object arg);
    [ExtensionAttribute]
public static XPath2NodeIterator XPath2Select(XPathNavigator nav, string xpath);
    [ExtensionAttribute]
public static XPath2NodeIterator XPath2Select(XPathNavigator nav, string xpath, object arg);
    [ExtensionAttribute]
public static XPath2NodeIterator XPath2Select(XPathNavigator nav, string xpath, IXmlNamespaceResolver resolver);
    [ExtensionAttribute]
public static XPath2NodeIterator XPath2Select(XPathNavigator nav, string xpath, IXmlNamespaceResolver resolver, object arg);
    [ExtensionAttribute]
public static XPath2NodeIterator XPath2Select(XPathNavigator nav, XPath2Expression expr, object arg);
    [ExtensionAttribute]
public static XPathNodeIterator XPath2SelectNodes(XPathNavigator nav, string xpath);
    [ExtensionAttribute]
public static XPathNodeIterator XPath2SelectNodes(XPathNavigator nav, XPath2Expression expr);
    [ExtensionAttribute]
public static XPathNodeIterator XPath2SelectNodes(XPathNavigator nav, XPath2Expression expr, object arg);
    [ExtensionAttribute]
public static XPathNodeIterator XPath2SelectNodes(XPathNavigator nav, string xpath, IXmlNamespaceResolver resolver);
    [ExtensionAttribute]
public static XPathNavigator XPath2SelectSingleNode(XPathNavigator nav, string xpath);
    [ExtensionAttribute]
public static XPathNavigator XPath2SelectSingleNode(XPathNavigator nav, XPath2Expression expression);
    [ExtensionAttribute]
public static XPathNavigator XPath2SelectSingleNode(XPathNavigator nav, XPath2Expression expression, object arg);
    [ExtensionAttribute]
public static XPathNavigator XPath2SelectSingleNode(XPathNavigator nav, string xpath, IXmlNamespaceResolver resolver);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.XPathNodeIteratorAdapter : XPathNodeIterator {
    private XPath2NodeIterator iter;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public XPathNodeIteratorAdapter(XPath2NodeIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
[NullableContextAttribute("1")]
public interface Wmhelp.XPath2.yydebug.yyDebug {
    public abstract virtual void push(int state, object value);
    public abstract virtual void lex(int state, int token, string name, object value);
    public abstract virtual void shift(int from, int to, int errorFlag);
    public abstract virtual void pop(int state);
    public abstract virtual void discard(int state, int token, string name, object value);
    public abstract virtual void reduce(int from, int to, int rule, string text, int len);
    public abstract virtual void shift(int from, int to);
    public abstract virtual void accept(object value);
    public abstract virtual void error(string message);
    public abstract virtual void reject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.yydebug.yyDebugSimple : object {
    private void println(string s);
    public sealed virtual void push(int state, object value);
    public sealed virtual void lex(int state, int token, string name, object value);
    public sealed virtual void shift(int from, int to, int errorFlag);
    public sealed virtual void pop(int state);
    public sealed virtual void discard(int state, int token, string name, object value);
    public sealed virtual void reduce(int from, int to, int rule, string text, int len);
    public sealed virtual void shift(int from, int to);
    public sealed virtual void accept(object value);
    public sealed virtual void error(string message);
    public sealed virtual void reject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Wmhelp.XPath2.YYParser : object {
    private XPath2Context context;
    public TextWriter errorText;
    protected static int yyFinal;
    protected static String[] yyNames;
    protected int yyMax;
    private static Int16[] yyLhs;
    private static Int16[] yyLen;
    private static Int16[] yyDefRed;
    protected static Int16[] yyDgoto;
    protected static Int16[] yySindex;
    protected static Int16[] yyRindex;
    protected static Int16[] yyGindex;
    protected static Int16[] yyTable;
    protected static Int16[] yyCheck;
    public YYParser(XPath2Context context);
    private static YYParser();
    public object yyparseSafe(Tokenizer tok);
    public object yyparseSafe(Tokenizer tok, object yyDebug);
    public object yyparseDebug(Tokenizer tok);
    public void yyerror(string message);
    public void yyerror(string message, String[] expected);
    public static string yyname(int token);
    protected String[] yyExpecting(int state);
    public object yyparse(yyInput yyLex, object yyd);
    protected object yyDefault(object first);
    public object yyparse(yyInput yyLex);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_0(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_1(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_2(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_3(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_4(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_5(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_21(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_22(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_23(IContextProvider provider, object arg1, object arg2);
    [CompilerGeneratedAttribute]
private object <yyparse>b__15_24(IContextProvider provider, object arg1, object arg2);
}
public class Wmhelp.XPath2.yyParser.yyException : Exception {
    [NullableContextAttribute("1")]
public yyException(string message);
}
[NullableContextAttribute("1")]
public interface Wmhelp.XPath2.yyParser.yyInput {
    public abstract virtual bool advance();
    public abstract virtual int token();
    public abstract virtual object value();
}
