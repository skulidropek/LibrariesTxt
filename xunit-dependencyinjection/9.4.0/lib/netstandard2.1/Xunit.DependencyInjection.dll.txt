[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.AwaitableInfo : ValueType {
    private static BindingFlags Everything;
    private static MethodInfo OnCompleted;
    private static MethodInfo UnsafeOnCompleted;
    [CompilerGeneratedAttribute]
private Type <AwaiterType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <AwaiterIsCompletedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterGetResultMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterOnCompletedMethod>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MethodInfo <AwaiterUnsafeOnCompletedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <GetAwaiterMethod>k__BackingField;
    public Type AwaiterType { get; }
    public PropertyInfo AwaiterIsCompletedProperty { get; }
    public MethodInfo AwaiterGetResultMethod { get; }
    public MethodInfo AwaiterOnCompletedMethod { get; }
    [NullableAttribute("2")]
public MethodInfo AwaiterUnsafeOnCompletedMethod { get; }
    public MethodInfo GetAwaiterMethod { get; }
    public AwaitableInfo(Type awaiterType, PropertyInfo awaiterIsCompletedProperty, MethodInfo awaiterGetResultMethod, MethodInfo awaiterOnCompletedMethod, MethodInfo awaiterUnsafeOnCompletedMethod, MethodInfo getAwaiterMethod);
    private static AwaitableInfo();
    [CompilerGeneratedAttribute]
public Type get_AwaiterType();
    [CompilerGeneratedAttribute]
public PropertyInfo get_AwaiterIsCompletedProperty();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterGetResultMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterOnCompletedMethod();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MethodInfo get_AwaiterUnsafeOnCompletedMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_GetAwaiterMethod();
    public static bool IsTypeAwaitable(Type type, AwaitableInfo& awaitableInfo);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.CoercedAwaitableInfo : ValueType {
    [CompilerGeneratedAttribute]
private AwaitableInfo <AwaitableInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <CoercerExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CoercerResultType>k__BackingField;
    public AwaitableInfo AwaitableInfo { get; }
    public Expression CoercerExpression { get; }
    public Type CoercerResultType { get; }
    [MemberNotNullWhenAttribute("True", "CoercerExpression")]
public bool RequiresCoercion { get; }
    public CoercedAwaitableInfo(AwaitableInfo awaitableInfo);
    [NullableContextAttribute("1")]
public CoercedAwaitableInfo(Expression coercerExpression, Type coercerResultType, AwaitableInfo coercedAwaitableInfo);
    [CompilerGeneratedAttribute]
public AwaitableInfo get_AwaitableInfo();
    [CompilerGeneratedAttribute]
public Expression get_CoercerExpression();
    [CompilerGeneratedAttribute]
public Type get_CoercerResultType();
    [MemberNotNullWhenAttribute("True", "CoercerExpression")]
public bool get_RequiresCoercion();
    [NullableContextAttribute("1")]
public static bool IsTypeAwaitable(Type type, CoercedAwaitableInfo& info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Internal.ObjectMethodExecutor : object {
    [NullableAttribute("2")]
private Object[] _parameterDefaultValues;
    [NullableAttribute("2")]
private MethodExecutorAsync _executorAsync;
    private MethodExecutor _executor;
    private static ConstructorInfo ObjectMethodExecutorAwaitableConstructor;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo[] <MethodParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <TargetTypeInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <AsyncResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MethodReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMethodAsync>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public ParameterInfo[] MethodParameters { get; }
    public TypeInfo TargetTypeInfo { get; }
    [NullableAttribute("2")]
public Type AsyncResultType { get; }
    public Type MethodReturnType { get; internal set; }
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public bool IsMethodAsync { get; }
    private ObjectMethodExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    private static ObjectMethodExecutor();
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public ParameterInfo[] get_MethodParameters();
    [CompilerGeneratedAttribute]
public TypeInfo get_TargetTypeInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_AsyncResultType();
    [CompilerGeneratedAttribute]
public Type get_MethodReturnType();
    [CompilerGeneratedAttribute]
internal void set_MethodReturnType(Type value);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public bool get_IsMethodAsync();
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    [NullableContextAttribute("2")]
public object Execute(object target, Object[] parameters);
    public ObjectMethodExecutorAwaitable ExecuteAsync(object target, Object[] parameters);
    [NullableContextAttribute("2")]
public object GetDefaultValueForParameter(int index);
    private static MethodExecutor GetExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    private static MethodExecutor WrapVoidMethod(VoidMethodExecutor executor);
    private static MethodExecutorAsync GetExecutorAsync(MethodInfo methodInfo, TypeInfo targetTypeInfo, CoercedAwaitableInfo coercedAwaitableInfo);
    public static Expression ConvertToObjectMethodExecutorAwaitable(CoercedAwaitableInfo coercedAwaitableInfo, Expression awaitable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable : ValueType {
    [CompilerGeneratedAttribute]
private object <customAwaitable>P;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <getAwaiterMethod>P;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <isCompletedMethod>P;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <getResultMethod>P;
    [CompilerGeneratedAttribute]
private Action`2<object, Action> <onCompletedMethod>P;
    [CompilerGeneratedAttribute]
private Action`2<object, Action> <unsafeOnCompletedMethod>P;
    public ObjectMethodExecutorAwaitable(object customAwaitable, Func`2<object, object> getAwaiterMethod, Func`2<object, bool> isCompletedMethod, Func`2<object, object> getResultMethod, Action`2<object, Action> onCompletedMethod, Action`2<object, Action> unsafeOnCompletedMethod);
    public Awaiter GetAwaiter();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport : object {
    [NullableAttribute("1")]
private static object FsharpValuesCacheLock;
    private static Assembly _fsharpCoreAssembly;
    private static MethodInfo _fsharpAsyncStartAsTaskGenericMethod;
    private static PropertyInfo _fsharpOptionOfTaskCreationOptionsNoneProperty;
    private static PropertyInfo _fsharpOptionOfCancellationTokenNoneProperty;
    private static ObjectMethodExecutorFSharpSupport();
    public static bool TryBuildCoercerFromFSharpAsyncToAwaitable(Type possibleFSharpAsyncType, Expression& coerceToAwaitableExpression, Type& awaitableType);
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
private static bool IsFSharpAsyncOpenGenericType(Type possibleFSharpAsyncGenericType);
    [NullableContextAttribute("1")]
private static bool TryPopulateFSharpValueCaches(Type possibleFSharpAsyncGenericType);
    [NullableContextAttribute("1")]
private static bool TypesHaveSameIdentity(Type type1, Type type2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.DependencyInjection.BeforeAfterTest : object {
    public virtual void After(object testClassInstance, MethodInfo methodUnderTest);
    public virtual ValueTask AfterAsync(object testClassInstance, MethodInfo methodUnderTest);
    public virtual void Before(object testClassInstance, MethodInfo methodUnderTest);
    public virtual ValueTask BeforeAsync(object testClassInstance, MethodInfo methodUnderTest);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.ContextValue`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncLocal`1<ValueHolder<T>> _value;
    public T Value { get; public set; }
    public virtual T get_Value();
    public virtual void set_Value(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionContext : object {
    [CompilerGeneratedAttribute]
private IHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    public IHost Host { get; }
    public IServiceProvider RootServices { get; }
    public bool DisableParallelization { get; }
    public DependencyInjectionContext(IHost host, bool disableParallelization);
    [CompilerGeneratedAttribute]
public IHost get_Host();
    public IServiceProvider get_RootServices();
    [CompilerGeneratedAttribute]
public bool get_DisableParallelization();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionEnhancedParallelizationTestFramework : XunitTestFramework {
    public DependencyInjectionEnhancedParallelizationTestFramework(IMessageSink messageSink);
    protected virtual ITestFrameworkExecutor CreateExecutor(AssemblyName assemblyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionForcedParallelizationTestFramework : XunitTestFramework {
    public DependencyInjectionForcedParallelizationTestFramework(IMessageSink messageSink);
    protected virtual ITestFrameworkExecutor CreateExecutor(AssemblyName assemblyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionStartupContext : object {
    [CompilerGeneratedAttribute]
private IHost <defaultHost>P;
    [CompilerGeneratedAttribute]
private ParallelizationMode <ParallelizationMode>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<ITestClass, DependencyInjectionContext> <ContextMap>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <ParallelSemaphore>k__BackingField;
    public IServiceProvider DefaultRootServices { get; }
    public ParallelizationMode ParallelizationMode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<ITestClass, DependencyInjectionContext> ContextMap { get; }
    public SemaphoreSlim ParallelSemaphore { get; internal set; }
    public DependencyInjectionStartupContext(IHost defaultHost, ParallelizationMode parallelizationMode, IReadOnlyDictionary`2<ITestClass, DependencyInjectionContext> contextMap);
    public IServiceProvider get_DefaultRootServices();
    [CompilerGeneratedAttribute]
public ParallelizationMode get_ParallelizationMode();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<ITestClass, DependencyInjectionContext> get_ContextMap();
    [CompilerGeneratedAttribute]
public SemaphoreSlim get_ParallelSemaphore();
    [CompilerGeneratedAttribute]
internal void set_ParallelSemaphore(SemaphoreSlim value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestAssemblyRunner : XunitTestAssemblyRunner {
    private DependencyInjectionStartupContext _context;
    [NullableAttribute("2")]
private ITestClassOrderer _testClassOrderer;
    public DependencyInjectionTestAssemblyRunner(DependencyInjectionStartupContext context, ITestAssembly testAssembly, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, IEnumerable`1<Exception> exceptions);
    protected virtual Task`1<RunSummary> RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, CancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestAssemblyRunner/<RunTestCollectionsAsync>d__4")]
protected virtual Task`1<RunSummary> RunTestCollectionsAsync(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<RunSummary> <>n__0(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestCaseRunner : XunitTestCaseRunner {
    [CompilerGeneratedAttribute]
private DependencyInjectionContext <context>P;
    public DependencyInjectionTestCaseRunner(DependencyInjectionContext context, IXunitTestCase testCase, string displayName, string skipReason, Object[] constructorArguments, Object[] testMethodArguments, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual Task`1<RunSummary> RunTestAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestCaseRunnerWrapper : object {
    public Type TestCaseType { get; }
    public virtual Type get_TestCaseType();
    public virtual Task`1<RunSummary> RunAsync(IXunitTestCase testCase, DependencyInjectionContext context, IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestClassRunner : XunitTestClassRunner {
    [CompilerGeneratedAttribute]
private DependencyInjectionTestContext <context>P;
    private Nullable`1<AsyncServiceScope> _serviceScope;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, object> <CollectionFixtureMappings>k__BackingField;
    private IDictionary`2<Type, object> CollectionFixtureMappings { get; }
    public DependencyInjectionTestClassRunner(DependencyInjectionTestContext context, ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IDictionary`2<Type, object> collectionFixtureMappings);
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, object> get_CollectionFixtureMappings();
    protected virtual Object[] CreateTestClassConstructorArguments();
    protected virtual bool TryGetConstructorArgument(ConstructorInfo constructor, int index, ParameterInfo parameter, Object& argumentValue);
    protected virtual void CreateClassFixture(Type fixtureType);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestClassRunner/<BeforeTestClassFinishedAsync>d__9")]
protected virtual Task BeforeTestClassFinishedAsync();
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestClassRunner/<RunTestMethodsAsync>d__10")]
protected virtual Task`1<RunSummary> RunTestMethodsAsync();
    protected virtual Task`1<RunSummary> RunTestMethodAsync(ITestMethod testMethod, IReflectionMethodInfo method, IEnumerable`1<IXunitTestCase> testCases, Object[] constructorArguments);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<RunSummary> <>n__1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestCollectionRunner : XunitTestCollectionRunner {
    [CompilerGeneratedAttribute]
private DependencyInjectionStartupContext <context>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITestClassOrderer <testClassOrderer>P;
    private Nullable`1<AsyncServiceScope> _serviceScope;
    public DependencyInjectionTestCollectionRunner(DependencyInjectionStartupContext context, ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ITestClassOrderer testClassOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual void CreateCollectionFixture(Type fixtureType);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestCollectionRunner/<BeforeTestCollectionFinishedAsync>d__5")]
protected virtual Task BeforeTestCollectionFinishedAsync();
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestCollectionRunner/<RunTestClassesAsync>d__6")]
protected virtual Task`1<RunSummary> RunTestClassesAsync();
    protected virtual Task`1<RunSummary> RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<IXunitTestCase> testCases);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestContext : DependencyInjectionContext {
    [CompilerGeneratedAttribute]
private bool <ForcedParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <ParallelSemaphore>k__BackingField;
    public bool ForcedParallelization { get; }
    public SemaphoreSlim ParallelSemaphore { get; }
    [NullableContextAttribute("1")]
public DependencyInjectionTestContext(IHost host, bool disableParallelization, bool force, SemaphoreSlim parallelSemaphore);
    [CompilerGeneratedAttribute]
public bool get_ForcedParallelization();
    [CompilerGeneratedAttribute]
public SemaphoreSlim get_ParallelSemaphore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestFramework : XunitTestFramework {
    public DependencyInjectionTestFramework(IMessageSink messageSink);
    protected virtual ITestFrameworkExecutor CreateExecutor(AssemblyName assemblyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestFrameworkExecutor : XunitTestFrameworkExecutor {
    private ParallelizationMode _parallelizationMode;
    private HostManager _hostManager;
    public DependencyInjectionTestFrameworkExecutor(AssemblyName assemblyName, ISourceInformationProvider sourceInformationProvider, ParallelizationMode parallelizationMode, IMessageSink diagnosticMessageSink);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestFrameworkExecutor/<RunTestCases>d__3")]
protected virtual void RunTestCases(IEnumerable`1<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [CompilerGeneratedAttribute]
internal static DependencyInjectionContext <RunTestCases>g__GetHost|3_0(ICollection`1<Exception> exceptions, Func`1<DependencyInjectionContext> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestInvoker : XunitTestInvoker {
    [CompilerGeneratedAttribute]
private IServiceProvider <provider>P;
    private static ActivitySource ActivitySource;
    private static MethodInfo AsTaskMethod;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ITypeInfo, Func`2<object, Task>> Factories;
    public DependencyInjectionTestInvoker(IServiceProvider provider, ITest test, IMessageBus messageBus, Type testClass, Object[] constructorArguments, MethodInfo testMethod, Object[] testMethodArguments, IReadOnlyList`1<BeforeAfterTestAttribute> beforeAfterAttributes, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    private static DependencyInjectionTestInvoker();
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestInvoker/<InvokeTestMethodAsync>d__4")]
protected virtual Task`1<decimal> InvokeTestMethodAsync(object testClassInstance);
    protected virtual object CallTestMethod(object testClassInstance);
    [NullableContextAttribute("2")]
private static bool TryAsTask(ITypeInfo typeInfo, object result, Task& task);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestInvoker/<AsTask>d__8")]
private static Task AsTask(ObjectMethodExecutorAwaitable awaitable);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestInvoker/<AsyncStack>d__9")]
private Task AsyncStack(Task task, Activity activity);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<decimal> <>n__0(object testClassInstance);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.DependencyInjection.DependencyInjectionTestMethodRunner : TestMethodRunner`1<IXunitTestCase> {
    [CompilerGeneratedAttribute]
private DependencyInjectionTestContext <context>P;
    [CompilerGeneratedAttribute]
private IMessageSink <diagnosticMessageSink>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <constructorArguments>P;
    public DependencyInjectionTestMethodRunner(DependencyInjectionTestContext context, ITestMethod testMethod, IReflectionTypeInfo class, IReflectionMethodInfo method, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, Object[] constructorArguments);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestMethodRunner/<RunTestCasesAsync>d__4")]
protected virtual Task`1<RunSummary> RunTestCasesAsync();
    protected virtual Task`1<RunSummary> RunTestCaseAsync(IXunitTestCase testCase);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<RunSummary> <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTestRunner : XunitTestRunner {
    [CompilerGeneratedAttribute]
private DependencyInjectionContext <context>P;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, ParameterInfo> <fromServices>P;
    public DependencyInjectionTestRunner(DependencyInjectionContext context, ITest test, IMessageBus messageBus, IReadOnlyDictionary`2<int, ParameterInfo> fromServices, Type testClass, Object[] constructorArguments, MethodInfo testMethod, Object[] testMethodArguments, string skipReason, IReadOnlyList`1<BeforeAfterTestAttribute> beforeAfterAttributes, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTestRunner/<InvokeTestAsync>d__3")]
protected virtual Task`1<Tuple`2<decimal, string>> InvokeTestAsync(ExceptionAggregator aggregator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTheoryTestCaseRunner : XunitTheoryTestCaseRunner {
    [CompilerGeneratedAttribute]
private DependencyInjectionContext <context>P;
    private static Func`2<XunitTheoryTestCaseRunner, List`1<XunitTestRunner>> GetTestRunners;
    private static Func`2<TestRunner`1<IXunitTestCase>, ITest> GetTest;
    private static Func`2<TestRunner`1<IXunitTestCase>, Object[]> GetTestMethodArguments;
    public DependencyInjectionTheoryTestCaseRunner(DependencyInjectionContext context, IXunitTestCase testCase, string displayName, string skipReason, Object[] constructorArguments, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    private static DependencyInjectionTheoryTestCaseRunner();
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTheoryTestCaseRunner/<AfterTestCaseStartingAsync>d__6")]
protected virtual Task AfterTestCaseStartingAsync();
    [AsyncStateMachineAttribute("Xunit.DependencyInjection.DependencyInjectionTheoryTestCaseRunner/<RunAsync>d__7")]
public Task`1<RunSummary> RunAsync();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.DependencyInjection.DependencyInjectionTheoryTestCaseRunnerWrapper : object {
    public Type TestCaseType { get; }
    public virtual Type get_TestCaseType();
    public virtual Task`1<RunSummary> RunAsync(IXunitTestCase testCase, DependencyInjectionContext context, IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
[AttributeUsageAttribute("68")]
public class Xunit.DependencyInjection.DisableParallelizationAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class Xunit.DependencyInjection.FromServicesAttribute : FromKeyedServicesAttribute {
    [NullableContextAttribute("1")]
internal static IReadOnlyDictionary`2<int, ParameterInfo> CreateFromServices(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xunit.DependencyInjection.HostManager : object {
    [CompilerGeneratedAttribute]
private AssemblyName <assemblyName>P;
    [CompilerGeneratedAttribute]
private IMessageSink <diagnosticMessageSink>P;
    private Dictionary`2<Type, DependencyInjectionContext> _hostMap;
    private List`1<IHost> _hosts;
    [NullableAttribute("2")]
private Type _defaultStartupType;
    [NullableAttribute("2")]
private DependencyInjectionContext _defaultHost;
    public HostManager(AssemblyName assemblyName, IMessageSink diagnosticMessageSink);
    [NullableContextAttribute("2")]
public DependencyInjectionContext BuildDefaultHost();
    public DependencyInjectionContext GetContext(Type type);
    public static Exception MissingDefaultHost(string message);
    private static Type FindStartup(Type testClassType, Boolean& shared);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private static Task DisposeAsync(IDisposable disposable);
}
[NullableContextAttribute("1")]
public interface Xunit.DependencyInjection.IAsyncExceptionFilter {
    public abstract virtual Exception Process(Exception exception);
}
[NullableContextAttribute("1")]
public interface Xunit.DependencyInjection.ITestClassOrderer {
    public abstract virtual IEnumerable`1<ITestClass> OrderTestClasses(IEnumerable`1<ITestClass> testCases);
}
[NullableContextAttribute("2")]
public interface Xunit.DependencyInjection.ITestOutputHelperAccessor {
    public ITestOutputHelper Output { get; public set; }
    public abstract virtual ITestOutputHelper get_Output();
    public abstract virtual void set_Output(ITestOutputHelper value);
}
[NullableContextAttribute("1")]
public interface Xunit.DependencyInjection.IXunitTestCaseRunnerWrapper {
    public Type TestCaseType { get; }
    public abstract virtual Type get_TestCaseType();
    public abstract virtual Task`1<RunSummary> RunAsync(IXunitTestCase testCase, DependencyInjectionContext context, IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataDiscovererAttribute("Xunit.Sdk.MemberDataDiscoverer", "xunit.core")]
[AttributeUsageAttribute("64")]
public class Xunit.DependencyInjection.MethodDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <ClassType>k__BackingField;
    public string MethodName { get; }
    [NullableAttribute("2")]
public Object[] Parameters { get; }
    [NullableAttribute("2")]
public Type ClassType { get; }
    public MethodDataAttribute(string methodName, Object[] parameters);
    public MethodDataAttribute(string methodName, Type classType, Object[] parameters);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Object[] get_Parameters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_ClassType();
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
    private MethodInfo GetMethodInfo(Type type);
    private static bool ParameterTypesCompatible(IReadOnlyCollection`1<ParameterInfo> parameters, IReadOnlyList`1<Type> parameterTypes);
    private Object[] GetParameters(IServiceProvider serviceProvider, MethodBase method);
}
public enum Xunit.DependencyInjection.ParallelizationMode : Enum {
    public int value__;
    public static ParallelizationMode None;
    public static ParallelizationMode Enhance;
    public static ParallelizationMode Force;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Xunit.DependencyInjection.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static object GetRequiredService(IServiceProvider provider, ParameterInfo parameter);
    [ExtensionAttribute]
public static object GetService(IServiceProvider provider, ParameterInfo parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Xunit.DependencyInjection.StartupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <StartupType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shared>k__BackingField;
    public Type StartupType { get; }
    public bool Shared { get; public set; }
    public StartupAttribute(Type startupType);
    [CompilerGeneratedAttribute]
public Type get_StartupType();
    [CompilerGeneratedAttribute]
public bool get_Shared();
    [CompilerGeneratedAttribute]
public void set_Shared(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xunit.DependencyInjection.StartupLoader : object {
    public static DependencyInjectionContext CreateHost(Type startupType, AssemblyName assemblyName, IMessageSink diagnosticMessageSink);
    private static DependencyInjectionContext CreateHostWithHostApplicationBuilder(Type startupType, MethodInfo methodInfo, AssemblyName assemblyName, IMessageSink diagnosticMessageSink);
    public static ValueTuple`4<IHostBuilder, object, MethodInfo, MethodInfo> CreateHostBuilder(Type startupType, AssemblyName assemblyName, IMessageSink diagnosticMessageSink);
    public static IHost CreateHost(IHostBuilder hostBuilder, Type startupType, object startup, MethodInfo buildHostMethod, MethodInfo configureMethod);
    public static Type GetStartupType(AssemblyName assemblyName);
    public static object CreateStartup(Type startupType);
    [NullableContextAttribute("2")]
public static IHostBuilder CreateHostBuilder(AssemblyName assemblyName, object startup, Type startupType, MethodInfo method);
    public static void ConfigureHost(IHostBuilder builder, object startup, Type startupType, MethodInfo method);
    public static void ConfigureServices(IHostBuilder builder, object startup, Type startupType, MethodInfo method);
    [NullableContextAttribute("2")]
public static void Configure(IServiceProvider provider, object startup, MethodInfo method);
    [NullableContextAttribute("2")]
public static IHost BuildHost(IHostBuilder hostBuilder, object startup, Type startupType, MethodInfo method);
    public static MethodInfo FindMethod(Type startupType, string methodName);
    public static MethodInfo FindMethod(Type startupType, string methodName, Type returnType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Xunit.DependencyInjection.StartupTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    public string TypeName { get; }
    [NullableAttribute("2")]
public string AssemblyName { get; }
    public StartupTypeAttribute(string typeName, string assemblyName);
    public StartupTypeAttribute(Type startupType);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AssemblyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Xunit.DependencyInjection.TestHelper : object {
    [ExtensionAttribute]
public static Object[] CreateTestClassConstructorArguments(IServiceProvider provider, Object[] constructorArguments, ExceptionAggregator aggregator);
    [ExtensionAttribute]
public static Exception Unwrap(Exception ex);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.DependencyInjection.TestOutputHelperAccessor : ContextValue`1<ITestOutputHelper> {
    public ITestOutputHelper Output { get; public set; }
    public sealed virtual ITestOutputHelper get_Output();
    public sealed virtual void set_Output(ITestOutputHelper value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Xunit.DependencyInjection.TheoryTestCaseDataContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ContextValue`1<IServiceProvider> AsyncLocalServices;
    public static IServiceProvider Services { get; private set; }
    private static TheoryTestCaseDataContext();
    public static IServiceProvider get_Services();
    private static void set_Services(IServiceProvider value);
    [NullableContextAttribute("1")]
public static IAsyncDisposable BeginContext(IServiceProvider provider);
}
