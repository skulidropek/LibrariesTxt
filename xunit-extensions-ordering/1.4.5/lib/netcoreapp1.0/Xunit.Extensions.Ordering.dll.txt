[AttributeUsageAttribute("1")]
public class Xunit.Extensions.Ordering.AssemblyFixtureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <FixtureTypes>k__BackingField;
    public Type[] FixtureTypes { get; }
    public AssemblyFixtureAttribute(Type[] fixtureTypes);
    [CompilerGeneratedAttribute]
public Type[] get_FixtureTypes();
}
public class Xunit.Extensions.Ordering.CollectionOrderer : OrdererBase {
    public CollectionOrderer(IMessageSink diagnosticSink);
    public sealed virtual IEnumerable`1<ITestCollection> OrderTestCollections(IEnumerable`1<ITestCollection> testCollections);
    protected virtual int GetOrder(ITestCollection col);
    [CompilerGeneratedAttribute]
private int <OrderTestCollections>b__1_1(ITestCollection tc);
    [CompilerGeneratedAttribute]
private string <OrderTestCollections>b__1_3(ITestCollection tc);
    [CompilerGeneratedAttribute]
private int <OrderTestCollections>b__1_0(ITestCollection c);
}
public interface Xunit.Extensions.Ordering.IAssemblyFixture`1 {
}
[AttributeUsageAttribute("68")]
public class Xunit.Extensions.Ordering.OrderAttribute : Attribute {
    private int _order;
    public OrderAttribute(int order);
}
public abstract class Xunit.Extensions.Ordering.OrdererBase : object {
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticSink>k__BackingField;
    protected IMessageSink DiagnosticSink { get; }
    public OrdererBase(IMessageSink diagnosticSink);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticSink();
    protected virtual int ExtractOrderFromAttribute(IEnumerable`1<IAttributeInfo> attributes);
    protected virtual string GetCollectionName(ITestCollection col);
    protected virtual string GetCollectionTypeName(ITestCollection col);
}
public class Xunit.Extensions.Ordering.TestAssemblyRunner : XunitTestAssemblyRunner {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <AssemblyFixtureMappings>k__BackingField;
    protected Dictionary`2<Type, object> AssemblyFixtureMappings { get; }
    public TestAssemblyRunner(ITestAssembly testAssembly, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [CompilerGeneratedAttribute]
protected Dictionary`2<Type, object> get_AssemblyFixtureMappings();
    [AsyncStateMachineAttribute("Xunit.Extensions.Ordering.TestAssemblyRunner/<AfterTestAssemblyStartingAsync>d__4")]
protected virtual Task AfterTestAssemblyStartingAsync();
    [AsyncStateMachineAttribute("Xunit.Extensions.Ordering.TestAssemblyRunner/<BeforeTestAssemblyFinishedAsync>d__5")]
protected virtual Task BeforeTestAssemblyFinishedAsync();
    protected virtual void CreateAssemlbyFixture(Type fixtureType);
    [AsyncStateMachineAttribute("Xunit.Extensions.Ordering.TestAssemblyRunner/<CreateAssemblyFixturesAsync>d__7")]
protected virtual Task CreateAssemblyFixturesAsync();
    protected virtual Task`1<RunSummary> RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
private Task <BeforeTestAssemblyFinishedAsync>b__5_0(IAsyncLifetime fixture);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
    [CompilerGeneratedAttribute]
private Task <CreateAssemblyFixturesAsync>b__7_0(IAsyncLifetime fixture);
}
public class Xunit.Extensions.Ordering.TestCaseOrderer : OrdererBase {
    public TestCaseOrderer(IMessageSink diagnosticSink);
    public virtual IEnumerable`1<TTestCase> OrderTestCases(IEnumerable`1<TTestCase> testCases);
    public virtual IEnumerable`1<IGrouping`2<ITestClass, IXunitTestCase>> OrderTestClasses(IEnumerable`1<IGrouping`2<ITestClass, IXunitTestCase>> testCaseGroups);
    protected virtual int GetClassOrder(ITestClass tc);
    protected virtual int GetCaseOrder(ITestCase tc);
    [CompilerGeneratedAttribute]
private int <OrderTestCases>b__1_1(TTestCase tc);
    [CompilerGeneratedAttribute]
private int <OrderTestCases>b__1_0(TTestCase tc);
    [CompilerGeneratedAttribute]
private int <OrderTestClasses>b__2_1(IGrouping`2<ITestClass, IXunitTestCase> g);
    [CompilerGeneratedAttribute]
private int <OrderTestClasses>b__2_0(IGrouping`2<ITestClass, IXunitTestCase> g);
}
public class Xunit.Extensions.Ordering.TestCollectionRunner : XunitTestCollectionRunner {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <AssemblyFixtureMappings>k__BackingField;
    protected Dictionary`2<Type, object> AssemblyFixtureMappings { get; }
    public TestCollectionRunner(Dictionary`2<Type, object> assemblyFixtureMappings, ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected Dictionary`2<Type, object> get_AssemblyFixtureMappings();
    [AsyncStateMachineAttribute("Xunit.Extensions.Ordering.TestCollectionRunner/<RunTestClassesAsync>d__4")]
protected virtual Task`1<RunSummary> RunTestClassesAsync();
    protected virtual Task`1<RunSummary> RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<IXunitTestCase> testCases);
}
public class Xunit.Extensions.Ordering.TestFramework : XunitTestFramework {
    public TestFramework(IMessageSink messageSink);
    protected virtual ITestFrameworkExecutor CreateExecutor(AssemblyName assemblyName);
}
public class Xunit.Extensions.Ordering.TestFrameworkExecutor : XunitTestFrameworkExecutor {
    public TestFrameworkExecutor(AssemblyName assemblyName, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink);
    [AsyncStateMachineAttribute("Xunit.Extensions.Ordering.TestFrameworkExecutor/<RunTestCases>d__1")]
protected virtual void RunTestCases(IEnumerable`1<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
}
