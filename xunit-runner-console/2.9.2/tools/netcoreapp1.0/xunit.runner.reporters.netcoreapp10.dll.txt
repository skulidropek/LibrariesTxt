[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.143.54359")]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
internal static class Xunit.EnvironmentHelper : object {
    public static string GetEnvironmentVariable(string variable);
}
[DefaultMemberAttribute("Item")]
internal class Xunit.JsonArray : JsonValue {
    private JsonValue[] _array;
    public int Length { get; }
    public JsonValue Item { get; }
    public JsonArray(JsonValue[] array, int line, int column);
    public int get_Length();
    public JsonValue get_Item(int index);
}
internal class Xunit.JsonBoolean : JsonValue {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; private set; }
    public JsonBoolean(JsonToken token);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(bool value);
    public static bool op_Implicit(JsonBoolean jsonBoolean);
}
internal class Xunit.JsonBuffer : object {
    public static string ValueNull;
    public static string ValueTrue;
    public static string ValueFalse;
    private StringBuilder _buffer;
    private StringBuilder _codePointBuffer;
    private TextReader _reader;
    private JsonToken _token;
    private int _line;
    private int _column;
    public JsonBuffer(TextReader reader);
    public JsonToken Read();
    private int ReadNextChar();
    private string ReadNumber(int firstRead);
    private void ReadLiteral(string literal);
    private string ReadString();
    private static bool IsWhitespace(int value);
}
internal static class Xunit.JsonDeserializer : object {
    public static JsonValue Deserialize(TextReader reader);
    private static JsonValue DeserializeInternal(JsonToken next, JsonBuffer buffer);
    private static JsonArray DeserializeArray(JsonToken head, JsonBuffer buffer);
    private static JsonObject DeserializeObject(JsonToken head, JsonBuffer buffer);
}
internal class Xunit.JsonDeserializerException : Exception {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public JsonDeserializerException(string message, Exception innerException, int line, int column);
    public JsonDeserializerException(string message, int line, int column);
    public JsonDeserializerException(string message, JsonToken nextToken);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
}
internal static class Xunit.JsonDeserializerResource : object {
    internal static string JSON_OpenString { get; }
    internal static string JSON_InvalidEnd { get; }
    internal static string Format_IllegalCharacter(int value);
    internal static string Format_IllegalTrailingCharacterAfterLiteral(int value, string literal);
    internal static string Format_UnrecognizedLiteral(string literal);
    internal static string Format_DuplicateObjectMemberName(string memberName);
    internal static string Format_InvalidFloatNumberFormat(string raw);
    internal static string Format_FloatNumberOverflow(string raw);
    internal static string Format_InvalidSyntax(string syntaxName, string issue);
    internal static string Format_InvalidSyntaxNotExpected(string syntaxName, char unexpected);
    internal static string Format_InvalidSyntaxNotExpected(string syntaxName, string unexpected);
    internal static string Format_InvalidSyntaxExpectation(string syntaxName, char expectation);
    internal static string Format_InvalidSyntaxExpectation(string syntaxName, string expectation);
    internal static string Format_InvalidSyntaxExpectation(string syntaxName, char expectation1, char expectation2);
    internal static string Format_InvalidTokenExpectation(string tokenValue, string expectation);
    internal static string Format_InvalidUnicode(string unicode);
    internal static string Format_UnfinishedJSON(string nextTokenValue);
    internal static string get_JSON_OpenString();
    internal static string get_JSON_InvalidEnd();
}
internal class Xunit.JsonNull : JsonValue {
    public JsonNull(int line, int column);
}
internal class Xunit.JsonNumber : JsonValue {
    private string _raw;
    private double _double;
    public double Double { get; }
    public string Raw { get; }
    public JsonNumber(JsonToken token);
    public double get_Double();
    public string get_Raw();
}
internal class Xunit.JsonObject : JsonValue {
    private IDictionary`2<string, JsonValue> _data;
    public ICollection`1<string> Keys { get; }
    public JsonObject(IDictionary`2<string, JsonValue> data, int line, int column);
    public ICollection`1<string> get_Keys();
    public JsonValue Value(string key);
    public JsonObject ValueAsJsonObject(string key);
    public JsonString ValueAsString(string key);
    public int ValueAsInt(string key);
    public bool ValueAsBoolean(string key, bool defaultValue);
    public Nullable`1<bool> ValueAsNullableBoolean(string key);
    public String[] ValueAsStringArray(string key);
}
internal class Xunit.JsonString : JsonValue {
    private string _value;
    public string Value { get; }
    public JsonString(string value, int line, int column);
    public string get_Value();
    public virtual string ToString();
    public static string op_Implicit(JsonString instance);
}
internal class Xunit.JsonToken : ValueType {
    public JsonTokenType Type;
    public string Value;
    public int Line;
    public int Column;
}
internal enum Xunit.JsonTokenType : Enum {
    public int value__;
    public static JsonTokenType LeftCurlyBracket;
    public static JsonTokenType LeftSquareBracket;
    public static JsonTokenType RightCurlyBracket;
    public static JsonTokenType RightSquareBracket;
    public static JsonTokenType Colon;
    public static JsonTokenType Comma;
    public static JsonTokenType Null;
    public static JsonTokenType True;
    public static JsonTokenType False;
    public static JsonTokenType Number;
    public static JsonTokenType String;
    public static JsonTokenType EOF;
}
internal class Xunit.JsonValue : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public JsonValue(int line, int column);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
}
public class Xunit.Runner.Reporters.AppVeyorClient : object {
    private IRunnerLogger logger;
    private string baseUri;
    private HttpClient client;
    private MediaTypeWithQualityHeaderValue jsonMediaType;
    private Task workTask;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) previousErrors;
    private ManualResetEventSlim finished;
    private ManualResetEventSlim workEvent;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shouldExit;
    private ConcurrentQueue`1<IDictionary`2<string, object>> addQueue;
    private ConcurrentQueue`1<IDictionary`2<string, object>> updateQueue;
    public AppVeyorClient(IRunnerLogger logger, string baseUri);
    public void WaitOne(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.AppVeyorClient/<RunLoop>d__13")]
private Task RunLoop();
    public void AddTest(IDictionary`2<string, object> request);
    public void UpdateTest(IDictionary`2<string, object> request);
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.AppVeyorClient/<SendRequest>d__16")]
private Task SendRequest(HttpMethod method, ICollection`1<IDictionary`2<string, object>> body);
    private static string ToJson(IEnumerable`1<IDictionary`2<string, object>> data);
}
public class Xunit.Runner.Reporters.AppVeyorReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.AppVeyorReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    private static int MaxLength;
    private ConcurrentDictionary`2<string, Tuple`2<string, Dictionary`2<string, int>>> assemblyNames;
    private string baseUri;
    private AppVeyorClient client;
    private int assembliesInFlight;
    private object clientLock;
    public AppVeyorReporterMessageHandler(IRunnerLogger logger, string baseUri);
    private void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    private void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    private void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    protected virtual void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    private static string GetFinishedTestName(string methodName, Dictionary`2<string, int> testMethods);
    private void AppVeyorAddTest(string testName, string testFramework, string fileName, string outcome, Nullable`1<long> durationMilliseconds, string errorMessage, string errorStackTrace, string stdOut);
    private void AppVeyorUpdateTest(string testName, string testFramework, string fileName, string outcome, Nullable`1<long> durationMilliseconds, string errorMessage, string errorStackTrace, string stdOut);
    private static string TrimStdOut(string str);
}
[ExtensionAttribute]
public static class Xunit.Runner.Reporters.JsonExtentions : object {
    private static AddFields AddFieldsForITestCollectionMessage;
    private static AddFields AddFieldsForIFinishedMessage;
    private static AddFields AddFieldsForITestResultMessage;
    private static AddFields AddFieldsForITestMessage;
    private static AddFields AddFieldsForIFailureInformation;
    private static Dictionary`2<Type, List`1<AddFields>> TypeToFieldAdders;
    private static JsonExtentions();
    [ExtensionAttribute]
public static string ToJson(IDictionary`2<string, object> data);
    private static void AddValue(StringBuilder sb, string name, object value);
    private static string JsonEscape(string value);
    private static Dictionary`2<string, object> initObject(string messageName, object message, Type messageType, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestCollectionStarting testCollectionStarting, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestCollectionFinished testCollectionFinished, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestFailed testFailed, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestSkipped testSkipped, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestStarting testStarting, string flowId);
    [ExtensionAttribute]
public static string ToJson(IErrorMessage errorMessage);
    [ExtensionAttribute]
public static string ToJson(ITestPassed testPassed, string flowId);
    [ExtensionAttribute]
public static string ToJson(ITestMethodCleanupFailure ITestMethodCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestCleanupFailure testCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestCollectionCleanupFailure testCollectionCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestClassCleanupFailure testClassCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestAssemblyCleanupFailure testAssemblyCleanupFailure);
    [ExtensionAttribute]
public static string ToJson(ITestCaseCleanupFailure testAssemblyCleanupFailure);
}
public class Xunit.Runner.Reporters.JsonReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.JsonReporterMessageHandler : TestMessageSink {
    private Func`2<string, string> flowIdMapper;
    private Dictionary`2<string, string> flowMappings;
    private ReaderWriterLockSlim flowMappingsLock;
    public JsonReporterMessageHandler(IRunnerLogger logger);
    public JsonReporterMessageHandler(IRunnerLogger logger, Func`2<string, string> flowIdMapper);
    private string ToFlowId(string testCollectionName);
}
public class Xunit.Runner.Reporters.QuietReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.QuietReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    public QuietReporterMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.SilentReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.SilentReporterMessageHandler : LongLivedMarshalByRefObject {
    public sealed virtual void Dispose();
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
    public sealed virtual bool OnMessageWithTypes(IMessageSinkMessage message, HashSet`1<string> messageTypes);
}
public class Xunit.Runner.Reporters.TeamCityReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.TeamCityReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    private string rootFlowId;
    protected DateTimeOffset UtcNow { get; }
    public TeamCityReporterMessageHandler(IRunnerLogger logger, string rootFlowId);
    protected virtual DateTimeOffset get_UtcNow();
    protected virtual void HandleErrorMessage(MessageHandlerArgs`1<IErrorMessage> args);
    protected virtual void HandleTestAssemblyCleanupFailure(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    protected virtual void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    protected virtual void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    protected virtual void HandleTestCaseCleanupFailure(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    protected virtual void HandleTestClassCleanupFailure(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    protected virtual void HandleTestCollectionCleanupFailure(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    protected virtual void HandleTestCollectionFinished(MessageHandlerArgs`1<ITestCollectionFinished> args);
    protected virtual void HandleTestCollectionStarting(MessageHandlerArgs`1<ITestCollectionStarting> args);
    protected virtual void HandleTestCleanupFailure(MessageHandlerArgs`1<ITestCleanupFailure> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    protected virtual void HandleTestFinished(MessageHandlerArgs`1<ITestFinished> args);
    protected virtual void HandleTestMethodCleanupFailure(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    private static string TeamCityEscape(string value);
    private void TeamCityLogError(IFailureInformation failure, string messageType);
    private void TeamCityLogError(string flowId, IFailureInformation failure, string messageTypeFormat, Object[] args);
    private void TeamCityLogMessage(string flowId, string messageType, string extraMetadataFormat, Object[] args);
    private void TeamCityLogSuiteFinished(string flowId, string name);
    private void TeamCityLogSuiteStarted(string flowId, string escapedName, string parentFlowId);
    private string ToAssemblyFlowId(ITestAssemblyMessage message);
    private string ToAssemblyName(ITestAssemblyMessage message);
    private string ToTestCaseName(ITestCaseMessage message);
    private string ToTestClassName(ITestClassMessage message);
    private string ToCollectionFlowId(ITestCollectionMessage message);
    private string ToTestCollectionName(ITestCollectionMessage message);
    private string ToTestMethodName(ITestMethodMessage message);
    private string ToTestName(ITestMessage message);
}
public class Xunit.Runner.Reporters.VerboseReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.VerboseReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    public VerboseReporterMessageHandler(IRunnerLogger logger);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(MessageHandlerArgs`1<ITestStarting> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1(MessageHandlerArgs`1<ITestFinished> args);
}
public class Xunit.Runner.Reporters.VstsClient : object {
    private static MediaTypeWithQualityHeaderValue JsonMediaType;
    private static HttpMethod PatchHttpMethod;
    private static string UNIQUEIDKEY;
    private ConcurrentQueue`1<IDictionary`2<string, object>> addQueue;
    private string baseUri;
    private int buildId;
    private HttpClient client;
    private ManualResetEventSlim finished;
    private IRunnerLogger logger;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) previousErrors;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shouldExit;
    private ConcurrentDictionary`2<ITest, int> testToTestIdMap;
    private ConcurrentQueue`1<IDictionary`2<string, object>> updateQueue;
    private AutoResetEvent workEvent;
    private Task workTask;
    private bool disposedValue;
    public VstsClient(IRunnerLogger logger, string baseUri, string accessToken, int buildId);
    private static VstsClient();
    public void WaitOne(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.VstsClient/<RunLoop>d__17")]
private Task RunLoop();
    public void AddTest(IDictionary`2<string, object> request, ITest uniqueId);
    public void UpdateTest(IDictionary`2<string, object> request, ITest uniqueId);
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.VstsClient/<CreateTestRun>d__20")]
private Task`1<int> CreateTestRun();
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.VstsClient/<FinishTestRun>d__21")]
private Task FinishTestRun(int testRunId);
    [AsyncStateMachineAttribute("Xunit.Runner.Reporters.VstsClient/<SendTestResults>d__22")]
private Task SendTestResults(bool isAdd, int runId, ICollection`1<IDictionary`2<string, object>> body);
    private static string ToJson(IEnumerable`1<IDictionary`2<string, object>> data);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Xunit.Runner.Reporters.VstsReporter : object {
    public string Description { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual IMessageSink CreateMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Reporters.VstsReporterMessageHandler : DefaultRunnerReporterWithTypesMessageHandler {
    private static int MaxLength;
    private string accessToken;
    private int assembliesInFlight;
    private ConcurrentDictionary`2<string, string> assemblyNames;
    private string baseUri;
    private int buildId;
    private VstsClient client;
    private object clientLock;
    public VstsReporterMessageHandler(IRunnerLogger logger, string baseUri, string accessToken, int buildId);
    private void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    private void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    private void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    protected virtual void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    private void VstsAddTest(string testName, string displayName, string fileName, ITest uniqueId);
    private void VstsUpdateTest(ITest uniqueId, string outcome, Nullable`1<long> durationMilliseconds, string errorMessage, string errorStackTrace, string stdOut);
    private static string TrimStdOut(string str);
}
internal class Xunit.Sdk.XunitWorkerThread : object {
    private Thread thread;
    public XunitWorkerThread(Action threadProc);
    public sealed virtual void Dispose();
    public void Join();
    public static void QueueUserWorkItem(Action backgroundTask, EventWaitHandle finished);
}
