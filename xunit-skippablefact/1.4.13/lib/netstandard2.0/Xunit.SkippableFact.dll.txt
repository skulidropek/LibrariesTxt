[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.1.74.65439")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SkippableFactDiscoverer : object {
    private IMessageSink diagnosticMessageSink;
    public SkippableFactDiscoverer(IMessageSink diagnosticMessageSink);
    public static String[] GetSkippableExceptionNames(IAttributeInfo factAttribute);
    [IteratorStateMachineAttribute("Xunit.Sdk.SkippableFactDiscoverer/<Discover>d__3")]
public virtual IEnumerable`1<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SkippableFactTestCase : XunitTestCase {
    [CompilerGeneratedAttribute]
private String[] <SkippingExceptionNames>k__BackingField;
    internal String[] SkippingExceptionNames { get; private set; }
    public SkippableFactTestCase(String[] skippingExceptionNames, IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, ITestMethod testMethod, Object[] testMethodArguments);
    public SkippableFactTestCase(String[] skippingExceptionNames, IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod, Object[] testMethodArguments);
    [CompilerGeneratedAttribute]
internal String[] get_SkippingExceptionNames();
    [CompilerGeneratedAttribute]
private void set_SkippingExceptionNames(String[] value);
    [AsyncStateMachineAttribute("Xunit.Sdk.SkippableFactTestCase/<RunAsync>d__7")]
public virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    public virtual void Serialize(IXunitSerializationInfo data);
    public virtual void Deserialize(IXunitSerializationInfo data);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<RunSummary> <>n__0(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SkippableTestMessageBus : object {
    private IMessageBus inner;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private int <SkippedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SkippingExceptionNames>k__BackingField;
    public int SkippedCount { get; private set; }
    internal String[] SkippingExceptionNames { get; }
    public SkippableTestMessageBus(IMessageBus inner, String[] skippingExceptionNames);
    [CompilerGeneratedAttribute]
public int get_SkippedCount();
    [CompilerGeneratedAttribute]
private void set_SkippedCount(int value);
    [CompilerGeneratedAttribute]
internal String[] get_SkippingExceptionNames();
    public sealed virtual void Dispose();
    public sealed virtual bool QueueMessage(IMessageSinkMessage message);
    protected virtual void Dispose(bool disposing);
    private bool ShouldSkipException(string exceptionType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SkippableTheoryDiscoverer : object {
    private IMessageSink diagnosticMessageSink;
    private TheoryDiscoverer theoryDiscoverer;
    public SkippableTheoryDiscoverer(IMessageSink diagnosticMessageSink);
    [IteratorStateMachineAttribute("Xunit.Sdk.SkippableTheoryDiscoverer/<Discover>d__3")]
public virtual IEnumerable`1<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SkippableTheoryTestCase : XunitTheoryTestCase {
    [CompilerGeneratedAttribute]
private String[] <SkippingExceptionNames>k__BackingField;
    internal String[] SkippingExceptionNames { get; private set; }
    public SkippableTheoryTestCase(String[] skippingExceptionNames, IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, ITestMethod testMethod);
    public SkippableTheoryTestCase(String[] skippingExceptionNames, IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod);
    [CompilerGeneratedAttribute]
internal String[] get_SkippingExceptionNames();
    [CompilerGeneratedAttribute]
private void set_SkippingExceptionNames(String[] value);
    [AsyncStateMachineAttribute("Xunit.Sdk.SkippableTheoryTestCase/<RunAsync>d__7")]
public virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    public virtual void Serialize(IXunitSerializationInfo data);
    public virtual void Deserialize(IXunitSerializationInfo data);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<RunSummary> <>n__0(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Xunit.Skip : object {
    public static void If(bool condition, string reason);
    public static void IfNot(bool condition, string reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.SkipException : Exception {
    [NullableContextAttribute("2")]
public SkipException(string reason);
    public SkipException(string reason, Exception innerException);
    protected SkipException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[AttributeUsageAttribute("64")]
[XunitTestCaseDiscovererAttribute("Xunit.Sdk.SkippableFactDiscoverer", "Xunit.SkippableFact")]
public class Xunit.SkippableFactAttribute : FactAttribute {
    [NullableContextAttribute("1")]
public SkippableFactAttribute(Type[] skippingExceptions);
}
[AttributeUsageAttribute("64")]
[XunitTestCaseDiscovererAttribute("Xunit.Sdk.SkippableTheoryDiscoverer", "Xunit.SkippableFact")]
public class Xunit.SkippableTheoryAttribute : TheoryAttribute {
    [NullableContextAttribute("1")]
public SkippableTheoryAttribute(Type[] skippingExceptions);
}
