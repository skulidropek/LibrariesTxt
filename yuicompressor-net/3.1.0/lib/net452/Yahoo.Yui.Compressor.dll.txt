public enum Yahoo.Yui.Compressor.CompressionType : Enum {
    public int value__;
    public static CompressionType Standard;
    public static CompressionType None;
}
public abstract class Yahoo.Yui.Compressor.Compressor : object {
    [CompilerGeneratedAttribute]
private CompressionType <CompressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineBreakPosition>k__BackingField;
    public CompressionType CompressionType { get; public set; }
    public int LineBreakPosition { get; public set; }
    public string ContentType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual CompressionType get_CompressionType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CompressionType(CompressionType value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineBreakPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineBreakPosition(int value);
    public abstract virtual string get_ContentType();
    public sealed virtual string Compress(string source);
    protected abstract virtual string DoCompress(string source);
    private static string RemoveByteOrderMark(string source);
}
public enum Yahoo.Yui.Compressor.CssCompressionType : Enum {
    public int value__;
    public static CssCompressionType None;
    public static CssCompressionType StockYuiCompressor;
}
public class Yahoo.Yui.Compressor.CssCompressor : Compressor {
    [CompilerGeneratedAttribute]
private bool <RemoveComments>k__BackingField;
    private static Regex protectStringRegex;
    private static Regex calcRegex;
    private static Regex spaceRemoverRegex;
    private static Regex backgroundPositionRegex;
    private static Regex colorRegex;
    private static Regex colorShortenerRegex;
    private static Regex borderRegex;
    private static Regex emptyRuleRegex;
    public bool RemoveComments { get; public set; }
    public string ContentType { get; }
    private static CssCompressor();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RemoveComments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoveComments(bool value);
    public virtual string get_ContentType();
    protected virtual string DoCompress(string source);
}
public class Yahoo.Yui.Compressor.CustomErrorReporter : object {
    private LoggingType loggingType;
    [CompilerGeneratedAttribute]
private StringCollection <ErrorMessages>k__BackingField;
    public StringCollection ErrorMessages { get; private set; }
    public CustomErrorReporter(LoggingType loggingType);
    [CompilerGeneratedAttribute]
public StringCollection get_ErrorMessages();
    [CompilerGeneratedAttribute]
private void set_ErrorMessages(StringCollection value);
    public virtual void Warning(string message, string sourceName, int line, string lineSource, int lineOffset);
    public virtual void Error(string message, string sourceName, int line, string lineSource, int lineOffset);
    public virtual EcmaScriptRuntimeException RuntimeError(string message, string sourceName, int line, string lineSource, int lineOffset);
}
public static class Yahoo.Yui.Compressor.Extensions : object {
    public static int AppendReplacement(Capture capture, StringBuilder value, string input, string replacement, int index);
    public static void AppendTail(StringBuilder value, string input, int index);
    public static string RegexReplace(string input, string pattern, string replacement);
    public static string RegexReplace(string input, string pattern, string replacement, RegexOptions options);
    public static string Fill(string format, Object[] args);
    public static string RemoveRange(string input, int startIndex, int endIndex);
    public static bool EqualsIgnoreCase(string left, string right);
    public static string ToHexString(int value);
    public static string ToPluralString(int value);
    public static bool IsNullOrEmpty(IList`1<T> value);
    public static IList`1<T> ToListIfNotNullOrEmpty(IList`1<T> value);
    public static string Replace(string value, int startIndex, int endIndex, string newContent);
}
public interface Yahoo.Yui.Compressor.ICompressor {
    public CompressionType CompressionType { get; public set; }
    public int LineBreakPosition { get; public set; }
    public string ContentType { get; }
    public abstract virtual CompressionType get_CompressionType();
    public abstract virtual void set_CompressionType(CompressionType value);
    public abstract virtual int get_LineBreakPosition();
    public abstract virtual void set_LineBreakPosition(int value);
    public abstract virtual string get_ContentType();
    public abstract virtual string Compress(string source);
}
public interface Yahoo.Yui.Compressor.ICompressorTask {
    public string CssCompressionType { get; public set; }
    public string DeleteCssFiles { get; public set; }
    public string CssOutputFile { get; public set; }
    public string ObfuscateJavaScript { get; public set; }
    public string PreserveAllSemicolons { get; public set; }
    public string DisableOptimizations { get; public set; }
    public string LineBreakPosition { get; public set; }
    public string EncodingType { get; public set; }
    public string DeleteJavaScriptFiles { get; public set; }
    public string JavaScriptOutputFile { get; public set; }
    public string LoggingType { get; public set; }
    public string ThreadCulture { get; public set; }
    public string IsEvalIgnored { get; public set; }
    public string DoNotErrorWhenNoFilesAreProvided { get; public set; }
    public string PreserveCssComments { get; public set; }
    public abstract virtual string get_CssCompressionType();
    public abstract virtual void set_CssCompressionType(string value);
    public abstract virtual string get_DeleteCssFiles();
    public abstract virtual void set_DeleteCssFiles(string value);
    public abstract virtual string get_CssOutputFile();
    public abstract virtual void set_CssOutputFile(string value);
    public abstract virtual string get_ObfuscateJavaScript();
    public abstract virtual void set_ObfuscateJavaScript(string value);
    public abstract virtual string get_PreserveAllSemicolons();
    public abstract virtual void set_PreserveAllSemicolons(string value);
    public abstract virtual string get_DisableOptimizations();
    public abstract virtual void set_DisableOptimizations(string value);
    public abstract virtual string get_LineBreakPosition();
    public abstract virtual void set_LineBreakPosition(string value);
    public abstract virtual string get_EncodingType();
    public abstract virtual void set_EncodingType(string value);
    public abstract virtual string get_DeleteJavaScriptFiles();
    public abstract virtual void set_DeleteJavaScriptFiles(string value);
    public abstract virtual string get_JavaScriptOutputFile();
    public abstract virtual void set_JavaScriptOutputFile(string value);
    public abstract virtual string get_LoggingType();
    public abstract virtual void set_LoggingType(string value);
    public abstract virtual string get_ThreadCulture();
    public abstract virtual void set_ThreadCulture(string value);
    public abstract virtual string get_IsEvalIgnored();
    public abstract virtual void set_IsEvalIgnored(string value);
    public abstract virtual string get_DoNotErrorWhenNoFilesAreProvided();
    public abstract virtual void set_DoNotErrorWhenNoFilesAreProvided(string value);
    public abstract virtual string get_PreserveCssComments();
    public abstract virtual void set_PreserveCssComments(string value);
}
public interface Yahoo.Yui.Compressor.ICssCompressor {
    public bool RemoveComments { get; public set; }
    public abstract virtual bool get_RemoveComments();
    public abstract virtual void set_RemoveComments(bool value);
}
public interface Yahoo.Yui.Compressor.IJavaScriptCompressor {
    public Encoding Encoding { get; public set; }
    public ErrorReporter ErrorReporter { get; public set; }
    public bool DisableOptimizations { get; public set; }
    public bool IgnoreEval { get; public set; }
    public bool ObfuscateJavascript { get; public set; }
    public bool PreserveAllSemicolons { get; public set; }
    public CultureInfo ThreadCulture { get; public set; }
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual ErrorReporter get_ErrorReporter();
    public abstract virtual void set_ErrorReporter(ErrorReporter value);
    public abstract virtual bool get_DisableOptimizations();
    public abstract virtual void set_DisableOptimizations(bool value);
    public abstract virtual bool get_IgnoreEval();
    public abstract virtual void set_IgnoreEval(bool value);
    public abstract virtual bool get_ObfuscateJavascript();
    public abstract virtual void set_ObfuscateJavascript(bool value);
    public abstract virtual bool get_PreserveAllSemicolons();
    public abstract virtual void set_PreserveAllSemicolons(bool value);
    public abstract virtual CultureInfo get_ThreadCulture();
    public abstract virtual void set_ThreadCulture(CultureInfo value);
}
public enum Yahoo.Yui.Compressor.JavaScriptCompressionType : Enum {
    public int value__;
    public static JavaScriptCompressionType None;
    public static JavaScriptCompressionType YuiStockCompression;
}
public class Yahoo.Yui.Compressor.JavaScriptCompressor : Compressor {
    private static int BUILDING_SYMBOL_TREE;
    private static int CHECKING_SYMBOL_TREE;
    private static object _synLock;
    private static Regex SIMPLE_IDENTIFIER_NAME_PATTERN;
    private static IList`1<string> _builtin;
    private ScriptOrFunctionScope _globalScope;
    private Hashtable _indexedScopes;
    private Stack _scopes;
    private ArrayList _tokens;
    private int _braceNesting;
    private int _mode;
    private int _offset;
    internal static List`1<string> Ones;
    internal static List`1<string> Threes;
    internal static List`1<string> Twos;
    [CompilerGeneratedAttribute]
private static Hashtable <Literals>k__BackingField;
    [CompilerGeneratedAttribute]
private static IList`1<string> <Reserved>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorReporter <ErrorReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableOptimizations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ObfuscateJavascript>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveAllSemicolons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEval>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <ThreadCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingType <LoggingType>k__BackingField;
    private static Hashtable Literals { get; private set; }
    private static IList`1<string> Reserved { get; private set; }
    public Encoding Encoding { get; public set; }
    public ErrorReporter ErrorReporter { get; public set; }
    public bool DisableOptimizations { get; public set; }
    public bool ObfuscateJavascript { get; public set; }
    public bool PreserveAllSemicolons { get; public set; }
    public bool IgnoreEval { get; public set; }
    public CultureInfo ThreadCulture { get; public set; }
    public string ContentType { get; }
    public LoggingType LoggingType { get; public set; }
    private static JavaScriptCompressor();
    [CompilerGeneratedAttribute]
private static Hashtable get_Literals();
    [CompilerGeneratedAttribute]
private static void set_Literals(Hashtable value);
    [CompilerGeneratedAttribute]
private static IList`1<string> get_Reserved();
    [CompilerGeneratedAttribute]
private static void set_Reserved(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorReporter get_ErrorReporter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorReporter(ErrorReporter value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableOptimizations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableOptimizations(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ObfuscateJavascript();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObfuscateJavascript(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreserveAllSemicolons();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreserveAllSemicolons(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreEval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreEval(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_ThreadCulture();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThreadCulture(CultureInfo value);
    public virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public LoggingType get_LoggingType();
    [CompilerGeneratedAttribute]
public void set_LoggingType(LoggingType value);
    protected virtual string DoCompress(string source);
    private static void InitialiseBuiltIn();
    private static void InitialiseOnesList();
    private static void InitialiseTwosList();
    private static void InitialiseThreesList();
    private static void InitialiseLiterals();
    private static void InitialiseReserved();
    private static int CountChar(string haystack, char needle);
    private static int PrintSourceString(string source, int offset, StringBuilder stringBuilder);
    private static int PrintSourceNumber(string source, int offset, StringBuilder stringBuilder);
    private static ArrayList Parse(StreamReader stream, ErrorReporter reporter);
    private static void ProcessStringLiterals(IList tokens, bool merge);
    private static string EscapeString(string s, char quotechar);
    private static bool IsValidIdentifier(string s);
    private static void OptimizeObjectMemberAccess(IList tokens);
    private static void OptimizeObjLitMemberDecl(IList tokens);
    private ScriptOrFunctionScope GetCurrentScope();
    private void EnterScope(ScriptOrFunctionScope scope);
    private void LeaveCurrentScope();
    private JavaScriptToken ConsumeToken();
    private JavaScriptToken GetToken(int delta);
    private static JavaScriptIdentifier GetIdentifier(string symbol, ScriptOrFunctionScope scope);
    private void ProtectScopeFromObfuscation(ScriptOrFunctionScope scope);
    private string GetDebugString(int max);
    private void Warn(string message);
    private void ParseFunctionDeclaration();
    private void ParseCatch();
    private void ParseExpression();
    private void ParseScope(ScriptOrFunctionScope scope);
    private void BuildSymbolTree();
    private void MungeSymboltree();
    private StringBuilder PrintSymbolTree(int linebreakpos, bool preserveAllSemiColons);
}
public class Yahoo.Yui.Compressor.JavaScriptIdentifier : JavaScriptToken {
    [CompilerGeneratedAttribute]
private int <RefCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MungedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptOrFunctionScope <DeclaredScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MarkedForMunging>k__BackingField;
    public int RefCount { get; public set; }
    public string MungedValue { get; public set; }
    public ScriptOrFunctionScope DeclaredScope { get; public set; }
    public bool MarkedForMunging { get; public set; }
    public JavaScriptIdentifier(string value, ScriptOrFunctionScope declaredScope);
    [CompilerGeneratedAttribute]
public int get_RefCount();
    [CompilerGeneratedAttribute]
public void set_RefCount(int value);
    [CompilerGeneratedAttribute]
public string get_MungedValue();
    [CompilerGeneratedAttribute]
public void set_MungedValue(string value);
    [CompilerGeneratedAttribute]
public ScriptOrFunctionScope get_DeclaredScope();
    [CompilerGeneratedAttribute]
public void set_DeclaredScope(ScriptOrFunctionScope value);
    [CompilerGeneratedAttribute]
public bool get_MarkedForMunging();
    [CompilerGeneratedAttribute]
public void set_MarkedForMunging(bool value);
}
public class Yahoo.Yui.Compressor.JavaScriptToken : object {
    [CompilerGeneratedAttribute]
private int <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public int TokenType { get; private set; }
    public string Value { get; private set; }
    public JavaScriptToken(int type, string value);
    [CompilerGeneratedAttribute]
public int get_TokenType();
    [CompilerGeneratedAttribute]
private void set_TokenType(int value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public virtual string ToString();
}
public enum Yahoo.Yui.Compressor.LoggingType : Enum {
    public int value__;
    public static LoggingType None;
    public static LoggingType Info;
    public static LoggingType Debug;
}
public class Yahoo.Yui.Compressor.Mozilla.Decompiler : object {
    public static int ONLY_BODY_FLAG;
    public static int TO_SOURCE_FLAG;
    public static int INITIAL_INDENT_PROP;
    public static int INDENT_GAP_PROP;
    public static int CASE_GAP_PROP;
    private static int FUNCTION_END;
    private Char[] _sourceBuffer;
    private int _sourceTop;
    private static bool _printSource;
    public string EncodedSource { get; }
    public int CurrentOffset { get; }
    private static Decompiler();
    public string get_EncodedSource();
    public int get_CurrentOffset();
    private void AppendString(string value);
    private void Append(char c);
    private void IncreaseSourceCapacity(int minimalCapacity);
    private string SourceToString(int offset);
    public int MarkFunctionStart(int functionType);
    public int MarkFunctionEnd(int functionStart);
    public void AddToken(Token token);
    public void AddToken(int token);
    public void AddEOL(int token);
    public void AddName(string name);
    public void AddRegexp(string regexp, string flags);
    public void AddJScriptConditionalComment(string jScriptConditionalComment);
    public void AddNumber(double number);
}
[ExtensionAttribute]
public static class Yahoo.Yui.Compressor.Mozilla.Extensions : object {
    [ExtensionAttribute]
public static string Description(Token value);
    [ExtensionAttribute]
public static int ToInt(Token value);
    [ExtensionAttribute]
public static char ToChar(Token value);
}
public enum Yahoo.Yui.Compressor.Mozilla.Token : Enum {
    public int value__;
    public static Token ERROR;
    public static Token EOF;
    public static Token EOL;
    public static Token FIRST_BYTECODE_TOKEN;
    public static Token ENTERWITH;
    public static Token LEAVEWITH;
    public static Token RETURN;
    public static Token GOTO;
    public static Token IFEQ;
    public static Token IFNE;
    public static Token SETNAME;
    public static Token BITOR;
    public static Token BITXOR;
    public static Token BITAND;
    public static Token EQ;
    public static Token NE;
    public static Token LT;
    public static Token LE;
    public static Token GT;
    public static Token GE;
    public static Token LSH;
    public static Token RSH;
    public static Token URSH;
    public static Token ADD;
    public static Token SUB;
    public static Token MUL;
    public static Token DIV;
    public static Token MOD;
    public static Token NOT;
    public static Token BITNOT;
    public static Token POS;
    public static Token NEG;
    public static Token NEW;
    public static Token DELPROP;
    public static Token TYPEOF;
    public static Token GETPROP;
    public static Token SETPROP;
    public static Token GETELEM;
    public static Token SETELEM;
    public static Token CALL;
    public static Token NAME;
    public static Token NUMBER;
    public static Token STRING;
    public static Token NULL;
    public static Token THIS;
    public static Token FALSE;
    public static Token TRUE;
    public static Token SHEQ;
    public static Token SHNE;
    public static Token REGEXP;
    public static Token BINDNAME;
    public static Token THROW;
    public static Token RETHROW;
    public static Token IN;
    public static Token INSTANCEOF;
    public static Token LOCAL_LOAD;
    public static Token GETVAR;
    public static Token SETVAR;
    public static Token CATCH_SCOPE;
    public static Token ENUM_INIT_KEYS;
    public static Token ENUM_INIT_VALUES;
    public static Token ENUM_NEXT;
    public static Token ENUM_ID;
    public static Token THISFN;
    public static Token RETURN_RESULT;
    public static Token ARRAYLIT;
    public static Token OBJECTLIT;
    public static Token GET_REF;
    public static Token SET_REF;
    public static Token DEL_REF;
    public static Token REF_CALL;
    public static Token REF_SPECIAL;
    public static Token DEFAULTNAMESPACE;
    public static Token ESCXMLATTR;
    public static Token ESCXMLTEXT;
    public static Token REF_MEMBER;
    public static Token REF_NS_MEMBER;
    public static Token REF_NAME;
    public static Token REF_NS_NAME;
    public static Token LAST_BYTECODE_TOKEN;
    public static Token TRY;
    public static Token SEMI;
    public static Token LB;
    public static Token RB;
    public static Token LC;
    public static Token RC;
    public static Token LP;
    public static Token RP;
    public static Token COMMA;
    public static Token ASSIGN;
    public static Token ASSIGN_BITOR;
    public static Token ASSIGN_BITXOR;
    public static Token ASSIGN_BITAND;
    public static Token ASSIGN_LSH;
    public static Token ASSIGN_RSH;
    public static Token ASSIGN_URSH;
    public static Token ASSIGN_ADD;
    public static Token ASSIGN_SUB;
    public static Token ASSIGN_MUL;
    public static Token ASSIGN_DIV;
    public static Token ASSIGN_MOD;
    public static Token FIRST_ASSIGN;
    public static Token LAST_ASSIGN;
    public static Token HOOK;
    public static Token COLON;
    public static Token OR;
    public static Token AND;
    public static Token INC;
    public static Token DEC;
    public static Token DOT;
    public static Token FUNCTION;
    public static Token EXPORT;
    public static Token IMPORT;
    public static Token IF;
    public static Token ELSE;
    public static Token SWITCH;
    public static Token CASE;
    public static Token DEFAULT;
    public static Token WHILE;
    public static Token DO;
    public static Token FOR;
    public static Token BREAK;
    public static Token CONTINUE;
    public static Token VAR;
    public static Token WITH;
    public static Token CATCH;
    public static Token FINALLY;
    public static Token VOID;
    public static Token RESERVED;
    public static Token EMPTY;
    public static Token BLOCK;
    public static Token LABEL;
    public static Token TARGET;
    public static Token LOOP;
    public static Token EXPR_VOID;
    public static Token EXPR_RESULT;
    public static Token JSR;
    public static Token SCRIPT;
    public static Token TYPEOFNAME;
    public static Token USE_STACK;
    public static Token SETPROP_OP;
    public static Token SETELEM_OP;
    public static Token LOCAL_BLOCK;
    public static Token SET_REF_OP;
    public static Token DOTDOT;
    public static Token COLONCOLON;
    public static Token XML;
    public static Token DOTQUERY;
    public static Token XMLATTR;
    public static Token XMLEND;
    public static Token TO_OBJECT;
    public static Token TO_DOUBLE;
    public static Token GET;
    public static Token SET;
    public static Token CONST;
    public static Token SETCONST;
    public static Token SETCONSTVAR;
    public static Token SPECIALCOMMENT;
    public static Token LAST_TOKEN;
}
public class Yahoo.Yui.Compressor.ScriptOrFunctionScope : object {
    private IDictionary`2<string, string> _hints;
    private IDictionary`2<string, JavaScriptIdentifier> _identifiers;
    private bool _markedForMunging;
    [CompilerGeneratedAttribute]
private int <BraceNesting>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptOrFunctionScope <ParentScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayList <SubScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VarCount>k__BackingField;
    public int BraceNesting { get; private set; }
    public ScriptOrFunctionScope ParentScope { get; private set; }
    private ArrayList SubScopes { get; private set; }
    public int VarCount { get; public set; }
    public ScriptOrFunctionScope(int braceNesting, ScriptOrFunctionScope parentScope);
    [CompilerGeneratedAttribute]
public int get_BraceNesting();
    [CompilerGeneratedAttribute]
private void set_BraceNesting(int value);
    [CompilerGeneratedAttribute]
public ScriptOrFunctionScope get_ParentScope();
    [CompilerGeneratedAttribute]
private void set_ParentScope(ScriptOrFunctionScope value);
    [CompilerGeneratedAttribute]
private ArrayList get_SubScopes();
    [CompilerGeneratedAttribute]
private void set_SubScopes(ArrayList value);
    [CompilerGeneratedAttribute]
public int get_VarCount();
    [CompilerGeneratedAttribute]
public void set_VarCount(int value);
    private ArrayList GetUsedSymbols();
    private ArrayList GetAllUsedSymbols();
    public JavaScriptIdentifier DeclareIdentifier(string symbol);
    public void Munge();
    public void PreventMunging();
    public JavaScriptIdentifier GetIdentifier(string symbol);
    public void AddHint(string variableName, string variableType);
}
public static class Yahoo.Yui.Compressor.Tokens : object {
    public static string PreserveCandidateComment;
    public static string PreservedToken;
    public static string PseudoClassColon;
}
public static class Yahoo.Yui.Compressor.YUICompressor : object {
    public static string Compress(string css, int columnWidth);
    public static string Compress(string css, int columnWidth, bool removeComments);
}
