[ExtensionAttribute]
public static class System.Linq.ToExpandoListForBulkExtensions : object {
    [ExtensionAttribute]
public static List`1<ExpandoObject> ToExpandoListForBulk(IEnumerable`1<Dictionary`2<string, T>> source);
}
public enum Z.BulkOperations.AuditActionType : Enum {
    public int value__;
    public static AuditActionType Delete;
    public static AuditActionType Insert;
    public static AuditActionType Update;
    public static AuditActionType SoftDelete;
}
public class Z.BulkOperations.AuditEntry : object {
    internal AuditActionType ;
    internal DateTime ;
    internal Dictionary`2<object, object> ;
    internal string ;
    internal List`1<AuditEntryItem> ;
    public AuditActionType Action { get; public set; }
    public DateTime Date { get; public set; }
    public Dictionary`2<object, object> Metas { get; public set; }
    public string TableName { get; public set; }
    public List`1<AuditEntryItem> Values { get; public set; }
    public AuditActionType get_Action();
    public void set_Action(AuditActionType value);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public Dictionary`2<object, object> get_Metas();
    public void set_Metas(Dictionary`2<object, object> value);
    public string get_TableName();
    public void set_TableName(string value);
    public List`1<AuditEntryItem> get_Values();
    public void set_Values(List`1<AuditEntryItem> value);
}
public class Z.BulkOperations.AuditEntryItem : object {
    internal string ;
    internal object ;
    internal object ;
    public string ColumnName { get; public set; }
    public object NewValue { get; public set; }
    public object OldValue { get; public set; }
    public string get_ColumnName();
    public void set_ColumnName(string value);
    public object get_NewValue();
    public void set_NewValue(object value);
    public object get_OldValue();
    public void set_OldValue(object value);
}
public enum Z.BulkOperations.AuditModeType : Enum {
    public int value__;
    public static AuditModeType IncludeAll;
    public static AuditModeType ExcludeAll;
}
public enum Z.BulkOperations.AutoMapType : Enum {
    public int value__;
    public static AutoMapType ByName;
    public static AutoMapType ByOrdinal;
    public static AutoMapType ByIndexerName;
}
[ObsoleteAttribute("Use BulkOperation class instead. This class will be removed at the start of 2019.")]
public class Z.BulkOperations.BasicBulkOperation : object {
    internal BulkOperation ;
    public BulkOperation Advanced { get; }
    public int BatchSize { get; public set; }
    public List`1<BasicColumnMapping> ColumnMappings { get; public set; }
    public DbConnection Connection { get; public set; }
    public object DataSource { get; public set; }
    public string DestinationTableName { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public void BulkDelete();
    public void BulkDelete(object datasource);
    public void BulkDelete(DataTable datasource, DataRowState dataRowState);
    public void BulkInsert();
    public void BulkInsert(object datasource);
    public void BulkInsert(DataTable datasource, DataRowState dataRowState);
    public void BulkMerge();
    public void BulkMerge(object datasource);
    public void BulkMerge(DataTable datasource, DataRowState dataRowState);
    public virtual void BulkSaveChanges(DataTable dt);
    public virtual void BulkSynchronize();
    public virtual void BulkSynchronize(object datasource);
    public void BulkUpdate();
    public void BulkUpdate(object datasource);
    public void BulkUpdate(DataTable datasource, DataRowState dataRowState);
    public BulkOperation get_Advanced();
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public List`1<BasicColumnMapping> get_ColumnMappings();
    public void set_ColumnMappings(List`1<BasicColumnMapping> value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public sealed virtual void Dispose();
}
[ObsoleteAttribute("Use BulkOperation class instead. This class will be removed at the start of 2019.")]
public class Z.BulkOperations.BasicBulkOperation`1 : object {
    internal BulkOperation`1<TEntity> ;
    internal List`1<BasicColumnMapping`1<TEntity>> ;
    public BulkOperation`1<TEntity> Advanced { get; }
    public int BatchSize { get; public set; }
    public List`1<BasicColumnMapping`1<TEntity>> ColumnMappings { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnPrimaryKeyExpression { get; public set; }
    public DbConnection Connection { get; public set; }
    public object DataSource { get; public set; }
    public string DestinationTableName { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public void BulkDelete();
    public void BulkDelete(List`1<TEntity> datasource);
    public void BulkInsert();
    public void BulkInsert(List`1<TEntity> datasource);
    public void BulkMerge();
    public void BulkMerge(List`1<TEntity> datasource);
    public virtual void BulkSynchronize();
    public virtual void BulkSynchronize(List`1<TEntity> datasource);
    public void BulkUpdate();
    public void BulkUpdate(List`1<TEntity> datasource);
    public virtual void DeleteFromQuery(Func`2<IQueryable`1<TEntity>, IEnumerable`1<TEntity>> query);
    public BulkOperation`1<TEntity> get_Advanced();
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public List`1<BasicColumnMapping`1<TEntity>> get_ColumnMappings();
    public void set_ColumnMappings(List`1<BasicColumnMapping`1<TEntity>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public sealed virtual void Dispose();
}
public class Z.BulkOperations.BasicColumnMapping : object {
    internal ColumnMapping ;
    public ColumnMapping Advanced { get; }
    public string DestinationName { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public ColumnMappingDirectionType Direction { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public string SourceName { get; public set; }
    public int SourceOrdinal { get; public set; }
    public BasicColumnMapping(string columnName);
    public BasicColumnMapping(string columnName, bool isPrimaryKey);
    public BasicColumnMapping(string columnName, ColumnMappingDirectionType direction);
    public BasicColumnMapping(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping(string sourceName, string destinationName);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal);
    public BasicColumnMapping(int sourceOrdinal, string destinationName);
    public BasicColumnMapping(string sourceName, int destinationOrdinal);
    public BasicColumnMapping(string sourceName, string destinationName, bool isPrimaryKey);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public BasicColumnMapping(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public BasicColumnMapping(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping get_Advanced();
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public ColumnMappingDirectionType get_Direction();
    public void set_Direction(ColumnMappingDirectionType value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
    internal static int (int );
}
public class Z.BulkOperations.BasicColumnMapping`1 : object {
    internal ColumnMapping`1<TEntity> ;
    public ColumnMapping`1<TEntity> Advanced { get; }
    public Expression`1<Func`2<TEntity, object>> DestinationExpression { get; public set; }
    public string DestinationName { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public ColumnMappingDirectionType Direction { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SourceExpression { get; public set; }
    public string SourceName { get; public set; }
    public int SourceOrdinal { get; public set; }
    public object InternalAdvanced { get; }
    public BasicColumnMapping`1(string columnName);
    public BasicColumnMapping`1(string columnName, bool isPrimaryKey);
    public BasicColumnMapping`1(string columnName, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(string sourceName, string destinationName);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal);
    public BasicColumnMapping`1(int sourceOrdinal, string destinationName);
    public BasicColumnMapping`1(string sourceName, int destinationOrdinal);
    public BasicColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public BasicColumnMapping`1(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1<TEntity> get_Advanced();
    public Expression`1<Func`2<TEntity, object>> get_DestinationExpression();
    public void set_DestinationExpression(Expression`1<Func`2<TEntity, object>> value);
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public ColumnMappingDirectionType get_Direction();
    public void set_Direction(ColumnMappingDirectionType value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public Expression`1<Func`2<TEntity, object>> get_SourceExpression();
    public void set_SourceExpression(Expression`1<Func`2<TEntity, object>> value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
    public sealed virtual object get_InternalAdvanced();
}
public class Z.BulkOperations.BulkOperation : object {
    [CompilerGeneratedAttribute]
private CancellationToken ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal List`1<AuditEntry> ;
    internal AuditModeType ;
    internal bool ;
    internal bool ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private InternalOptions ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal TimeSpan ;
    [CompilerGeneratedAttribute]
private bool ;
    internal AutoMapType ;
    internal string ;
    internal string ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal Func`3<string, object, object> ;
    internal Action`2<string, ColumnMapping> ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal List`1<> ;
    internal CaseSensitiveType ;
    internal bool ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal bool ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal List`1<BasicColumnMapping> ;
    internal IEnumerable`1<> ;
    internal List`1<ColumnMapping> ;
    internal IEnumerable`1<object> ;
    internal DefaultValueResolutionType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal DbConnection ;
    internal Func`1<DbConnection> ;
    internal string ;
    internal string ;
    internal CustomProvider ;
    internal object ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    public bool _isDapperPlus;
    public bool _isLinqToSql;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal bool ;
    internal Action`1<BulkOperation> ;
    internal bool ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal ErrorModeType ;
    internal List`1<BulkOperationError> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal object ;
    internal object ;
    internal bool ;
    internal object ;
    internal Expression ;
    internal Type ;
    internal Action`1<string> ;
    internal Action`1<string> ;
    internal StringBuilder ;
    internal bool ;
    internal Stopwatch ;
    internal Action`2<object, StringBuilder> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal ProviderType ;
    internal Assembly ;
    internal ResolutionType ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal ResultInfo ;
    internal bool ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal Nullable`1<int> ;
    internal Nullable`1<bool> ;
    internal int ;
    internal int ;
    internal int ;
    internal string ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal InternalTransactionType ;
    internal DbTransaction ;
    internal Nullable`1<IsolationLevel> ;
    internal int ;
    internal TimeSpan ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal BulkOperationActionType ;
    internal ConcurrentBag`1<AuditEntry> ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
    internal CancellationToken  { get; internal set; }
    internal bool  { get; internal set; }
    internal bool  { get; internal set; }
    internal bool  { get; }
    public List`1<AuditEntry> AuditEntries { get; public set; }
    public AuditModeType AuditMode { get; public set; }
    public bool UseAudit { get; public set; }
    internal bool  { get; internal set; }
    public bool ForceRowsAffectedValidation { get; public set; }
    public InternalOptions InternalOptions { get; public set; }
    public TimeSpan PostgreSqlBinaryImportTimeout { get; public set; }
    public bool UsePostgreSqlInsertOnConflictDoNothing { get; public set; }
    public bool UsePostgreSqlTimeZone { get; public set; }
    public bool UsePostgreSqlGetInformationSchema2 { get; public set; }
    public bool UsePostgreSqlUnprepare { get; public set; }
    internal bool  { get; internal set; }
    public AutoMapType AutoMap { get; public set; }
    public string AutoMapKeyName { get; public set; }
    public string AutoMapIdentityName { get; public set; }
    public bool AutoMapOutputIdentity { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapIdentityExpression { get; public set; }
    public Func`3<string, object, object> AutoMapValueFactory { get; public set; }
    public Action`2<string, ColumnMapping> AutoMapColumnBuilder { get; public set; }
    public int BatchDelayInterval { get; public set; }
    public int BatchSize { get; public set; }
    public int CombineMaxCommand { get; public set; }
    public int BatchTimeout { get; public set; }
    public CaseSensitiveType CaseSensitive { get; public set; }
    public List`1<string> ColumnInputNames { get; public set; }
    public List`1<string> ColumnInputOutputNames { get; public set; }
    public List`1<string> ColumnOutputNames { get; public set; }
    public List`1<string> ColumnPrimaryKeyNames { get; public set; }
    public List`1<string> ColumnSynchronizeDeleteKeySubsetNames { get; public set; }
    public List`1<string> IgnoreOnMergeInsertNames { get; public set; }
    public List`1<string> IgnoreOnMergeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeInsertNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnInsertNames { get; public set; }
    public List`1<string> IgnoreOnUpdateNames { get; public set; }
    public List`1<string> MergeMatchedAndConditionNames { get; public set; }
    public List`1<string> MergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> CoalesceOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnUpdateNames { get; public set; }
    public List`1<string> OnMergeUpdateInputNames { get; public set; }
    public List`1<string> OnMergeInsertInputNames { get; public set; }
    public List`1<string> OnSynchronizeUpdateInputNames { get; public set; }
    public List`1<string> OnSynchronizeInsertInputNames { get; public set; }
    public List`1<string> ColumnStagingTableFormulaNames { get; public set; }
    public List`1<string> IgnoreColumnOutputNames { get; public set; }
    public LambdaExpression LambdaInputExpression { get; public set; }
    public LambdaExpression LambdaInputOutputExpression { get; public set; }
    public LambdaExpression LambdaOutputExpression { get; public set; }
    public LambdaExpression LambdaPrimaryKeyExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeDeleteKeySubsetExpression { get; public set; }
    public LambdaExpression LambdaIgnoreColumnOutputExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaOnMergeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnMergeInsertInputExpression { get; public set; }
    public LambdaExpression LambdaColumnStagingTableFormulaExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public List`1<ColumnMapping> ColumnMappings { get; public set; }
    public bool OnMergeUpdateUseCoalesce { get; public set; }
    public bool OnMergeUpdateUseCoalesceDestination { get; public set; }
    public bool OnUpdateUseCoalesce { get; public set; }
    public bool OnUpdateUseCoalesceDestination { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesce { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesceDestination { get; public set; }
    public DefaultValueResolutionType DefaultValueResolution { get; public set; }
    public bool MatchNamesWithUnderscores { get; public set; }
    public bool UseSmartMatchNames { get; public set; }
    internal bool  { get; }
    public bool CommandParameterAddRowIndex { get; public set; }
    public string CommandParameterPrefix { get; public set; }
    public string CommandParameterSuffix { get; public set; }
    public bool UseCompile { get; public set; }
    public DbConnection Connection { get; public set; }
    public string ConnectionName { get; public set; }
    public string ConnectionString { get; public set; }
    public Func`1<DbConnection> ConnectionFactory { get; public set; }
    public CustomProvider CustomProvider { get; public set; }
    public object DataSource { get; public set; }
    public bool Debug1 { get; public set; }
    public string DestinationTableName { get; public set; }
    public string DestinationSchemaName { get; public set; }
    public bool DisableDotCheckForEscapeTableName { get; public set; }
    public bool InternalIsEntityFrameworkPlus { get; public set; }
    public bool UseLegacyBatchOperation { get; public set; }
    public bool IncludeGraph { get; public set; }
    public Action`1<BulkOperation> IncludeGraphOperationBuilder { get; public set; }
    internal Dictionary`2<string, string>  { get; internal set; }
    public bool AutoMapOutputDirection { get; public set; }
    public ErrorModeType ErrorMode { get; public set; }
    public List`1<BulkOperationError> Errors { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuting { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuted { get; public set; }
    public Action`1<BulkOperation> DeleteFromQueryExecuted { get; public set; }
    public string MergeStagingTableFilterFormula { get; public set; }
    public string InsertStagingTableFilterFormula { get; public set; }
    public string UpdateStagingTableFilterFormula { get; public set; }
    public string DeleteStagingTableFilterFormula { get; public set; }
    public string SynchronizeDeleteDestinationTableFilterFormula { get; public set; }
    public string SynchronizeSoftDeleteFormula { get; public set; }
    public string InsertNotMatchedAndFormula { get; public set; }
    public string MergeNotMatchedAndFormula { get; public set; }
    public string SynchronizeNotMatchedAndFormula { get; public set; }
    public string MergeMatchedAndFormula { get; public set; }
    public string SynchronizeMatchedAndFormula { get; public set; }
    public string UpdateMatchedAndFormula { get; public set; }
    public string DeleteMatchedAndFormula { get; public set; }
    public string UpdatePrimaryKeyAndFormula { get; public set; }
    public string MergePrimaryKeyAndFormula { get; public set; }
    public string InsertPrimaryKeyAndFormula { get; public set; }
    public string DeletePrimaryKeyAndFormula { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaDelete { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaMerge { get; public set; }
    public string ColumnSynchronizeDeleteKeySubsetFormula { get; public set; }
    public bool UseStopwatchForSqlExecutingTime { get; public set; }
    public Stopwatch StopwatchForSqlExecutingTime { get; public set; }
    public Action`1<string> Log { get; public set; }
    public StringBuilder LogDump { get; public set; }
    public bool UseLogDump { get; public set; }
    public Action`2<object, StringBuilder> AddLogExecuting { get; public set; }
    public bool IgnoreOnMergeUpdate { get; public set; }
    public bool IgnoreOnMergeInsert { get; public set; }
    public bool UseOracleGlobalSequenceIndexTable { get; public set; }
    public bool ForceSelectOutput { get; public set; }
    public int ParallelBatchByTask { get; public set; }
    public int ParallelMinBatch { get; public set; }
    public int ParallelMinRecord { get; public set; }
    public bool UseParallel { get; public set; }
    public bool AllowDuplicateKeys { get; public set; }
    public bool AllowUpdatePrimaryKeys { get; public set; }
    public bool InsertIfNotExists { get; public set; }
    public bool DisablePrimaryKeyNullCheck { get; public set; }
    public ProviderType Provider { get; public set; }
    public Assembly ProviderAssembly { get; public set; }
    public ResolutionType Resolution { get; public set; }
    public bool ForceTriggerResolution { get; public set; }
    public bool DisableInformationSchemaCache { get; public set; }
    public ResultInfo ResultInfo { get; public set; }
    public int RowsAffected { get; public set; }
    public bool UseRowsAffected { get; public set; }
    public bool ValidateNoDuplicateKey { get; public set; }
    public bool DisableTemporaryTableClusteredIndex { get; public set; }
    public bool DisableSqlBulkCopyDirect { get; public set; }
    public bool ForceOutputFromUnmodifiedRow { get; public set; }
    public Nullable`1<bool> AutoTruncate { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsCheckConstraintOnInsertDisabled { get; public set; }
    public Nullable`1<int> SqlBulkCopyOptions { get; public set; }
    public bool MergeKeepIdentity { get; public set; }
    public bool SynchronizeKeepidentity { get; public set; }
    public bool InsertKeepIdentity { get; public set; }
    public bool HasColumnEncrypted { get; public set; }
    public bool UseTempDbForColumnEncrypted { get; public set; }
    public bool SynchronizeOnlyDelete { get; public set; }
    public bool SynchronizeIgnoreUpdate { get; public set; }
    public bool SynchronizeIgnoreInsert { get; public set; }
    public string QueryHint { get; public set; }
    public int TemporaryTableBatchByTable { get; public set; }
    public int TemporaryTableInsertBatchSize { get; public set; }
    public int TemporaryTableMinRecord { get; public set; }
    public bool TemporaryTableUseTableLock { get; public set; }
    public bool UseTableLock { get; public set; }
    public string TableHintSql { get; public set; }
    public string TemporaryTableSchemaName { get; public set; }
    public bool UsePermanentTable { get; public set; }
    public bool TemporaryTableUseSameName { get; public set; }
    public string TemporaryTableName { get; public set; }
    public bool TemporaryTableCreate { get; public set; }
    public bool TemporaryTablePersist { get; public set; }
    public bool TemporaryTableIsMemory { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public InternalTransactionType InternalTransaction { get; public set; }
    public Nullable`1<IsolationLevel> TransactionIsolationLevel { get; public set; }
    public int RetryCount { get; public set; }
    public TimeSpan RetryInterval { get; public set; }
    public bool UnsafeMode { get; public set; }
    public bool ValidateAllSourceMapped { get; public set; }
    public bool ValidateAllDestinationMapped { get; public set; }
    public bool UseInternalTransaction { get; public set; }
    public BulkOperation(DbConnection connection);
    internal Table ();
    public virtual void BulkDelete();
    public virtual void BulkDelete(object datasource);
    public virtual void BulkDelete(DataTable datasource, DataRowState dataRowState);
    public virtual void BulkInsert();
    public virtual void BulkInsert(object datasource);
    public virtual void BulkInsert(DataTable datasource, DataRowState dataRowState);
    public virtual void BulkMerge();
    public virtual void BulkMerge(object datasource);
    public virtual void BulkMerge(DataTable datasource, DataRowState dataRowState);
    public virtual void BulkSaveChanges(DataTable dt);
    public virtual void BulkSynchronize();
    public virtual void BulkSynchronize(object datasource);
    public virtual void BulkUpdate();
    public virtual void BulkUpdate(object datasource);
    public virtual void BulkUpdate(DataTable datasource, DataRowState dataRowState);
    public static void Cache(string key, BulkOperation operation);
    public static void RemoveFromCache(string key);
    public static BulkOperation GetFromCache(string key);
    public static T GetFromCache(string key);
    public void Recompile();
    internal void Execute();
    internal void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private List`1<string> ();
    private List`1<string> ();
    private void ();
    private List`1<string> ();
    private void ();
    private List`1<string> ();
    private void (string ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private bool (string , bool , bool , bool );
    private Column (string , bool , bool , bool );
    private string (string );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private List`1<string> ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    internal void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal static bool (MemberInfo , String& );
    internal static bool (MemberInfo , Object& );
    internal static bool (MemberInfo , Int32& );
    internal static bool (MemberInfo , Int32& );
    internal static bool (MemberInfo , String& , String& );
    internal static bool (MemberInfo , String& );
    internal static bool (MemberInfo , String& );
    private bool (MemberInfo , String& );
    private bool (MemberInfo );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<> );
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<> );
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<> );
    private bool (IEnumerable`1<> );
    internal virtual bool ();
    internal bool (BulkOperationActionType );
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal bool ();
    internal void Log_AddLogExecutingBulkCopy(object bulkCopy);
    internal void Log_AddLogExecutedBulkCopy(object bulkCopy);
    internal void (DbCommand );
    internal void (DbCommand , string );
    internal void (DbException , TimeSpan );
    internal void (DbException );
    internal void (Exception );
    internal void (DbConnection );
    internal void (DbConnection );
    internal void (string );
    internal void ( , int );
    internal bool ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal IEnumerable`1<> ();
    internal IEnumerable`1<> ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    [CompilerGeneratedAttribute]
internal CancellationToken get_();
    [CompilerGeneratedAttribute]
internal void set_(CancellationToken value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    internal bool get_();
    public List`1<AuditEntry> get_AuditEntries();
    public void set_AuditEntries(List`1<AuditEntry> value);
    public AuditModeType get_AuditMode();
    public void set_AuditMode(AuditModeType value);
    public bool get_UseAudit();
    public void set_UseAudit(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_ForceRowsAffectedValidation();
    public void set_ForceRowsAffectedValidation(bool value);
    [CompilerGeneratedAttribute]
public InternalOptions get_InternalOptions();
    [CompilerGeneratedAttribute]
public void set_InternalOptions(InternalOptions value);
    public TimeSpan get_PostgreSqlBinaryImportTimeout();
    public void set_PostgreSqlBinaryImportTimeout(TimeSpan value);
    public bool get_UsePostgreSqlInsertOnConflictDoNothing();
    public void set_UsePostgreSqlInsertOnConflictDoNothing(bool value);
    public bool get_UsePostgreSqlTimeZone();
    public void set_UsePostgreSqlTimeZone(bool value);
    public bool get_UsePostgreSqlGetInformationSchema2();
    public void set_UsePostgreSqlGetInformationSchema2(bool value);
    public bool get_UsePostgreSqlUnprepare();
    public void set_UsePostgreSqlUnprepare(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public AutoMapType get_AutoMap();
    public void set_AutoMap(AutoMapType value);
    public string get_AutoMapKeyName();
    public void set_AutoMapKeyName(string value);
    public string get_AutoMapIdentityName();
    public void set_AutoMapIdentityName(string value);
    public bool get_AutoMapOutputIdentity();
    public void set_AutoMapOutputIdentity(bool value);
    public Expression`1<Func`2<object, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<object, object>> value);
    public Func`3<string, object, object> get_AutoMapValueFactory();
    public void set_AutoMapValueFactory(Func`3<string, object, object> value);
    public Action`2<string, ColumnMapping> get_AutoMapColumnBuilder();
    public void set_AutoMapColumnBuilder(Action`2<string, ColumnMapping> value);
    public int get_BatchDelayInterval();
    public void set_BatchDelayInterval(int value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_CombineMaxCommand();
    public void set_CombineMaxCommand(int value);
    public int get_BatchTimeout();
    public void set_BatchTimeout(int value);
    public CaseSensitiveType get_CaseSensitive();
    public void set_CaseSensitive(CaseSensitiveType value);
    public List`1<string> get_ColumnInputNames();
    public void set_ColumnInputNames(List`1<string> value);
    public List`1<string> get_ColumnInputOutputNames();
    public void set_ColumnInputOutputNames(List`1<string> value);
    public List`1<string> get_ColumnOutputNames();
    public void set_ColumnOutputNames(List`1<string> value);
    public List`1<string> get_ColumnPrimaryKeyNames();
    public void set_ColumnPrimaryKeyNames(List`1<string> value);
    public List`1<string> get_ColumnSynchronizeDeleteKeySubsetNames();
    public void set_ColumnSynchronizeDeleteKeySubsetNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeInsertNames();
    public void set_IgnoreOnMergeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeUpdateNames();
    public void set_IgnoreOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeInsertNames();
    public void set_IgnoreOnSynchronizeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeUpdateNames();
    public void set_IgnoreOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnInsertNames();
    public void set_IgnoreOnInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateNames();
    public void set_IgnoreOnUpdateNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndConditionNames();
    public void set_MergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndOneNotConditionNames();
    public void set_MergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndConditionNames();
    public void set_UpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndOneNotConditionNames();
    public void set_UpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndConditionNames();
    public void set_DeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndOneNotConditionNames();
    public void set_DeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndConditionNames();
    public void set_SynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndOneNotConditionNames();
    public void set_SynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndConditionNames();
    public void set_IgnoreOnMergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndConditionNames();
    public void set_IgnoreOnDeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndOneNotConditionNames();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndConditionNames();
    public void set_IgnoreOnUpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndOneNotConditionNames();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_CoalesceOnMergeUpdateNames();
    public void set_CoalesceOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnMergeUpdateNames();
    public void set_CoalesceDestinationOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnSynchronizeUpdateNames();
    public void set_CoalesceOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnSynchronizeUpdateNames();
    public void set_CoalesceDestinationOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnUpdateNames();
    public void set_CoalesceOnUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnUpdateNames();
    public void set_CoalesceDestinationOnUpdateNames(List`1<string> value);
    public List`1<string> get_OnMergeUpdateInputNames();
    public void set_OnMergeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnMergeInsertInputNames();
    public void set_OnMergeInsertInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeUpdateInputNames();
    public void set_OnSynchronizeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeInsertInputNames();
    public void set_OnSynchronizeInsertInputNames(List`1<string> value);
    public List`1<string> get_ColumnStagingTableFormulaNames();
    public void set_ColumnStagingTableFormulaNames(List`1<string> value);
    public List`1<string> get_IgnoreColumnOutputNames();
    public void set_IgnoreColumnOutputNames(List`1<string> value);
    public LambdaExpression get_LambdaInputExpression();
    public void set_LambdaInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaInputOutputExpression();
    public void set_LambdaInputOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOutputExpression();
    public void set_LambdaOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaPrimaryKeyExpression();
    public void set_LambdaPrimaryKeyExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeDeleteKeySubsetExpression();
    public void set_LambdaSynchronizeDeleteKeySubsetExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreColumnOutputExpression();
    public void set_LambdaIgnoreColumnOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnInsertExpression();
    public void set_LambdaIgnoreOnInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnUpdateExpression();
    public void set_LambdaIgnoreOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeInsertExpression();
    public void set_LambdaIgnoreOnMergeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeUpdateExpression();
    public void set_LambdaIgnoreOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeInsertExpression();
    public void set_LambdaIgnoreOnSynchronizeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeUpdateExpression();
    public void set_LambdaIgnoreOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndConditionExpression();
    public void set_LambdaMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndConditionExpression();
    public void set_LambdaUpdateMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndOneNotConditionExpression();
    public void set_LambdaUpdateMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndConditionExpression();
    public void set_LambdaDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndConditionExpression();
    public void set_LambdaSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnMergeUpdateExpression();
    public void set_LambdaCoalesceOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnMergeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnUpdateExpression();
    public void set_LambdaCoalesceOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnUpdateExpression();
    public void set_LambdaCoalesceDestinationOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeUpdateInputExpression();
    public void set_LambdaOnMergeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeInsertInputExpression();
    public void set_LambdaOnMergeInsertInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaColumnStagingTableFormulaExpression();
    public void set_LambdaColumnStagingTableFormulaExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeUpdateInputExpression();
    public void set_LambdaOnSynchronizeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeInsertInputExpression();
    public void set_LambdaOnSynchronizeInsertInputExpression(LambdaExpression value);
    public Expression`1<Func`2<object, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<object, object>> value);
    public List`1<ColumnMapping> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping> value);
    public bool get_OnMergeUpdateUseCoalesce();
    public void set_OnMergeUpdateUseCoalesce(bool value);
    public bool get_OnMergeUpdateUseCoalesceDestination();
    public void set_OnMergeUpdateUseCoalesceDestination(bool value);
    public bool get_OnUpdateUseCoalesce();
    public void set_OnUpdateUseCoalesce(bool value);
    public bool get_OnUpdateUseCoalesceDestination();
    public void set_OnUpdateUseCoalesceDestination(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesce();
    public void set_OnSynchronizeUpdateUseCoalesce(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesceDestination();
    public void set_OnSynchronizeUpdateUseCoalesceDestination(bool value);
    public DefaultValueResolutionType get_DefaultValueResolution();
    public void set_DefaultValueResolution(DefaultValueResolutionType value);
    public bool get_MatchNamesWithUnderscores();
    public void set_MatchNamesWithUnderscores(bool value);
    public bool get_UseSmartMatchNames();
    public void set_UseSmartMatchNames(bool value);
    internal bool get_();
    public bool get_CommandParameterAddRowIndex();
    public void set_CommandParameterAddRowIndex(bool value);
    public string get_CommandParameterPrefix();
    public void set_CommandParameterPrefix(string value);
    public string get_CommandParameterSuffix();
    public void set_CommandParameterSuffix(string value);
    public bool get_UseCompile();
    public void set_UseCompile(bool value);
    public virtual DbConnection get_Connection();
    public virtual void set_Connection(DbConnection value);
    public string get_ConnectionName();
    public void set_ConnectionName(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public Func`1<DbConnection> get_ConnectionFactory();
    public void set_ConnectionFactory(Func`1<DbConnection> value);
    public CustomProvider get_CustomProvider();
    public void set_CustomProvider(CustomProvider value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public bool get_Debug1();
    public void set_Debug1(bool value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public string get_DestinationSchemaName();
    public void set_DestinationSchemaName(string value);
    public bool get_DisableDotCheckForEscapeTableName();
    public void set_DisableDotCheckForEscapeTableName(bool value);
    [CompilerGeneratedAttribute]
public bool get_InternalIsEntityFrameworkPlus();
    [CompilerGeneratedAttribute]
public void set_InternalIsEntityFrameworkPlus(bool value);
    public bool get_UseLegacyBatchOperation();
    public void set_UseLegacyBatchOperation(bool value);
    public bool get_IncludeGraph();
    public void set_IncludeGraph(bool value);
    public Action`1<BulkOperation> get_IncludeGraphOperationBuilder();
    public void set_IncludeGraphOperationBuilder(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, string> value);
    public bool get_AutoMapOutputDirection();
    public void set_AutoMapOutputDirection(bool value);
    public ErrorModeType get_ErrorMode();
    public void set_ErrorMode(ErrorModeType value);
    public List`1<BulkOperationError> get_Errors();
    public void set_Errors(List`1<BulkOperationError> value);
    public Action`1<BulkOperation> get_BulkOperationExecuting();
    public void set_BulkOperationExecuting(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_BulkOperationExecuted();
    public void set_BulkOperationExecuted(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_DeleteFromQueryExecuted();
    public void set_DeleteFromQueryExecuted(Action`1<BulkOperation> value);
    public string get_MergeStagingTableFilterFormula();
    public void set_MergeStagingTableFilterFormula(string value);
    public string get_InsertStagingTableFilterFormula();
    public void set_InsertStagingTableFilterFormula(string value);
    public string get_UpdateStagingTableFilterFormula();
    public void set_UpdateStagingTableFilterFormula(string value);
    public string get_DeleteStagingTableFilterFormula();
    public void set_DeleteStagingTableFilterFormula(string value);
    public string get_SynchronizeDeleteDestinationTableFilterFormula();
    public void set_SynchronizeDeleteDestinationTableFilterFormula(string value);
    public string get_SynchronizeSoftDeleteFormula();
    public void set_SynchronizeSoftDeleteFormula(string value);
    public string get_InsertNotMatchedAndFormula();
    public void set_InsertNotMatchedAndFormula(string value);
    public string get_MergeNotMatchedAndFormula();
    public void set_MergeNotMatchedAndFormula(string value);
    public string get_SynchronizeNotMatchedAndFormula();
    public void set_SynchronizeNotMatchedAndFormula(string value);
    public string get_MergeMatchedAndFormula();
    public void set_MergeMatchedAndFormula(string value);
    public string get_SynchronizeMatchedAndFormula();
    public void set_SynchronizeMatchedAndFormula(string value);
    public string get_UpdateMatchedAndFormula();
    public void set_UpdateMatchedAndFormula(string value);
    public string get_DeleteMatchedAndFormula();
    public void set_DeleteMatchedAndFormula(string value);
    public string get_UpdatePrimaryKeyAndFormula();
    public void set_UpdatePrimaryKeyAndFormula(string value);
    public string get_MergePrimaryKeyAndFormula();
    public void set_MergePrimaryKeyAndFormula(string value);
    public string get_InsertPrimaryKeyAndFormula();
    public void set_InsertPrimaryKeyAndFormula(string value);
    public string get_DeletePrimaryKeyAndFormula();
    public void set_DeletePrimaryKeyAndFormula(string value);
    public string get_SynchronizePrimaryKeyAndFormulaDelete();
    public void set_SynchronizePrimaryKeyAndFormulaDelete(string value);
    public string get_SynchronizePrimaryKeyAndFormulaMerge();
    public void set_SynchronizePrimaryKeyAndFormulaMerge(string value);
    public string get_ColumnSynchronizeDeleteKeySubsetFormula();
    public void set_ColumnSynchronizeDeleteKeySubsetFormula(string value);
    internal virtual IQueryable ( );
    internal virtual DbCommand ( , Type[] , LambdaExpression );
    public bool get_UseStopwatchForSqlExecutingTime();
    public void set_UseStopwatchForSqlExecutingTime(bool value);
    public Stopwatch get_StopwatchForSqlExecutingTime();
    public void set_StopwatchForSqlExecutingTime(Stopwatch value);
    public Action`1<string> get_Log();
    public void set_Log(Action`1<string> value);
    public StringBuilder get_LogDump();
    public void set_LogDump(StringBuilder value);
    public bool get_UseLogDump();
    public void set_UseLogDump(bool value);
    public Action`2<object, StringBuilder> get_AddLogExecuting();
    public void set_AddLogExecuting(Action`2<object, StringBuilder> value);
    public bool get_IgnoreOnMergeUpdate();
    public void set_IgnoreOnMergeUpdate(bool value);
    public bool get_IgnoreOnMergeInsert();
    public void set_IgnoreOnMergeInsert(bool value);
    public bool get_UseOracleGlobalSequenceIndexTable();
    public void set_UseOracleGlobalSequenceIndexTable(bool value);
    public bool get_ForceSelectOutput();
    public void set_ForceSelectOutput(bool value);
    public int get_ParallelBatchByTask();
    public void set_ParallelBatchByTask(int value);
    public int get_ParallelMinBatch();
    public void set_ParallelMinBatch(int value);
    public int get_ParallelMinRecord();
    public void set_ParallelMinRecord(int value);
    public bool get_UseParallel();
    public void set_UseParallel(bool value);
    public bool get_AllowDuplicateKeys();
    public void set_AllowDuplicateKeys(bool value);
    public bool get_AllowUpdatePrimaryKeys();
    public void set_AllowUpdatePrimaryKeys(bool value);
    public bool get_InsertIfNotExists();
    public void set_InsertIfNotExists(bool value);
    public bool get_DisablePrimaryKeyNullCheck();
    public void set_DisablePrimaryKeyNullCheck(bool value);
    public ProviderType get_Provider();
    public void set_Provider(ProviderType value);
    public Assembly get_ProviderAssembly();
    public void set_ProviderAssembly(Assembly value);
    public ResolutionType get_Resolution();
    public void set_Resolution(ResolutionType value);
    public bool get_ForceTriggerResolution();
    public void set_ForceTriggerResolution(bool value);
    public bool get_DisableInformationSchemaCache();
    public void set_DisableInformationSchemaCache(bool value);
    public ResultInfo get_ResultInfo();
    public void set_ResultInfo(ResultInfo value);
    public int get_RowsAffected();
    public void set_RowsAffected(int value);
    public bool get_UseRowsAffected();
    public void set_UseRowsAffected(bool value);
    public bool get_ValidateNoDuplicateKey();
    public void set_ValidateNoDuplicateKey(bool value);
    public bool get_DisableTemporaryTableClusteredIndex();
    public void set_DisableTemporaryTableClusteredIndex(bool value);
    public bool get_DisableSqlBulkCopyDirect();
    public void set_DisableSqlBulkCopyDirect(bool value);
    public bool get_ForceOutputFromUnmodifiedRow();
    public void set_ForceOutputFromUnmodifiedRow(bool value);
    public Nullable`1<bool> get_AutoTruncate();
    public void set_AutoTruncate(Nullable`1<bool> value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_IsCheckConstraintOnInsertDisabled();
    public void set_IsCheckConstraintOnInsertDisabled(bool value);
    public Nullable`1<int> get_SqlBulkCopyOptions();
    public void set_SqlBulkCopyOptions(Nullable`1<int> value);
    public bool get_MergeKeepIdentity();
    public void set_MergeKeepIdentity(bool value);
    public bool get_SynchronizeKeepidentity();
    public void set_SynchronizeKeepidentity(bool value);
    public bool get_InsertKeepIdentity();
    public void set_InsertKeepIdentity(bool value);
    public bool get_HasColumnEncrypted();
    public void set_HasColumnEncrypted(bool value);
    public bool get_UseTempDbForColumnEncrypted();
    public void set_UseTempDbForColumnEncrypted(bool value);
    public bool get_SynchronizeOnlyDelete();
    public void set_SynchronizeOnlyDelete(bool value);
    public bool get_SynchronizeIgnoreUpdate();
    public void set_SynchronizeIgnoreUpdate(bool value);
    public bool get_SynchronizeIgnoreInsert();
    public void set_SynchronizeIgnoreInsert(bool value);
    public string get_QueryHint();
    public void set_QueryHint(string value);
    public int get_TemporaryTableBatchByTable();
    public void set_TemporaryTableBatchByTable(int value);
    public int get_TemporaryTableInsertBatchSize();
    public void set_TemporaryTableInsertBatchSize(int value);
    public int get_TemporaryTableMinRecord();
    public void set_TemporaryTableMinRecord(int value);
    public bool get_TemporaryTableUseTableLock();
    public void set_TemporaryTableUseTableLock(bool value);
    public bool get_UseTableLock();
    public void set_UseTableLock(bool value);
    public string get_TableHintSql();
    public void set_TableHintSql(string value);
    public string get_TemporaryTableSchemaName();
    public void set_TemporaryTableSchemaName(string value);
    public bool get_UsePermanentTable();
    public void set_UsePermanentTable(bool value);
    public bool get_TemporaryTableUseSameName();
    public void set_TemporaryTableUseSameName(bool value);
    public string get_TemporaryTableName();
    public void set_TemporaryTableName(string value);
    public bool get_TemporaryTableCreate();
    public void set_TemporaryTableCreate(bool value);
    public bool get_TemporaryTablePersist();
    public void set_TemporaryTablePersist(bool value);
    public bool get_TemporaryTableIsMemory();
    public void set_TemporaryTableIsMemory(bool value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public InternalTransactionType get_InternalTransaction();
    public void set_InternalTransaction(InternalTransactionType value);
    public Nullable`1<IsolationLevel> get_TransactionIsolationLevel();
    public void set_TransactionIsolationLevel(Nullable`1<IsolationLevel> value);
    public int get_RetryCount();
    public void set_RetryCount(int value);
    public TimeSpan get_RetryInterval();
    public void set_RetryInterval(TimeSpan value);
    public bool get_UnsafeMode();
    public void set_UnsafeMode(bool value);
    public bool get_ValidateAllSourceMapped();
    public void set_ValidateAllSourceMapped(bool value);
    public bool get_ValidateAllDestinationMapped();
    public void set_ValidateAllDestinationMapped(bool value);
    public bool get_UseInternalTransaction();
    public void set_UseInternalTransaction(bool value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void ( );
    [CompilerGeneratedAttribute]
private bool ( );
    [CompilerGeneratedAttribute]
private bool ( );
}
public class Z.BulkOperations.BulkOperation`1 : BulkOperation {
    public List`1<ColumnMapping`1<TEntity>> _internalColumnMapping;
    public List`1<ColumnMapping`1<TEntity>> ColumnMappings { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapIdentityExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public BulkOperation`1(DbConnection connection);
    public virtual void BulkDelete(List`1<TEntity> datasource);
    public virtual void BulkInsert(List`1<TEntity> datasource);
    public virtual void BulkMerge(List`1<TEntity> datasource);
    public virtual void BulkSynchronize(List`1<TEntity> datasource);
    public virtual void BulkUpdate(List`1<TEntity> datasource);
    internal virtual int DeleteFromQuery(IQueryable , IQueryable );
    public virtual int DeleteFromQuery(Func`2<IQueryable`1<TEntity>, IEnumerable`1<TEntity>> query);
    internal virtual IQueryable ( );
    internal virtual DbCommand ( , Type[] , LambdaExpression );
    internal virtual int UpdateFromQuery(IQueryable , IQueryable , Expression`1<Func`2<TEntity, TEntity>> );
    public virtual int UpdateFromQuery(Func`2<IQueryable`1<TEntity>, IEnumerable`1<TEntity>> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    internal virtual bool ();
    public List`1<ColumnMapping`1<TEntity>> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping`1<TEntity>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<TEntity, object>> value);
    internal void (BulkOperation );
    internal void ();
}
internal enum Z.BulkOperations.BulkOperationActionType : Enum {
    public int value__;
    public static BulkOperationActionType Insert;
    public static BulkOperationActionType Delete;
    public static BulkOperationActionType Update;
    public static BulkOperationActionType Merge;
    public static BulkOperationActionType DeleteFromQuery;
    public static BulkOperationActionType UpdateFromQuery;
    public static BulkOperationActionType SaveChanges;
    public static BulkOperationActionType Synchronize;
}
public class Z.BulkOperations.BulkOperationError : object {
    [CompilerGeneratedAttribute]
private Exception ;
    [CompilerGeneratedAttribute]
private object ;
    public Exception Exception { get; public set; }
    public object Record { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public object get_Record();
    [CompilerGeneratedAttribute]
public void set_Record(object value);
}
public class Z.BulkOperations.BulkOperationManager : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, IBulkValueConverter> ;
    public static Action`1<BulkOperation> BulkOperationBuilder;
    public static Action`1<ColumnMapping> ColumnMappingBuilder;
    [CompilerGeneratedAttribute]
private static bool ;
    internal static List`1<string> ;
    [CompilerGeneratedAttribute]
private static ObjectCache ;
    public static bool UseOracleArray;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static CustomProvider ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static Func`3<DbException, int, bool> ;
    internal static Dictionary`2<Type, IBulkValueConverter>  { get; internal set; }
    public static bool IsCommunity { get; public set; }
    public static ObjectCache Cache { get; public set; }
    public static bool ForceExpandoAsDictionaryEntryName { get; public set; }
    public static bool ForceSelectOutput { get; public set; }
    public static CustomProvider CustomProvider { get; public set; }
    public static bool ForceTriggerResolution { get; public set; }
    public static Func`3<DbException, int, bool> TmpIsTransientError { get; public set; }
    private static BulkOperationManager();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<Type, IBulkValueConverter> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Dictionary`2<Type, IBulkValueConverter> value);
    public static void AddValueConverter(Type type, IBulkValueConverter valueConverter);
    public static void AddValueConverter(BulkValueConverter`1<T> valueConverter);
    [CompilerGeneratedAttribute]
public static bool get_IsCommunity();
    [CompilerGeneratedAttribute]
public static void set_IsCommunity(bool value);
    [CompilerGeneratedAttribute]
public static ObjectCache get_Cache();
    [CompilerGeneratedAttribute]
public static void set_Cache(ObjectCache value);
    [CompilerGeneratedAttribute]
public static bool get_ForceExpandoAsDictionaryEntryName();
    [CompilerGeneratedAttribute]
public static void set_ForceExpandoAsDictionaryEntryName(bool value);
    [CompilerGeneratedAttribute]
public static bool get_ForceSelectOutput();
    [CompilerGeneratedAttribute]
public static void set_ForceSelectOutput(bool value);
    [CompilerGeneratedAttribute]
public static CustomProvider get_CustomProvider();
    [CompilerGeneratedAttribute]
public static void set_CustomProvider(CustomProvider value);
    [CompilerGeneratedAttribute]
public static bool get_ForceTriggerResolution();
    [CompilerGeneratedAttribute]
public static void set_ForceTriggerResolution(bool value);
    [CompilerGeneratedAttribute]
public static Func`3<DbException, int, bool> get_TmpIsTransientError();
    [CompilerGeneratedAttribute]
public static void set_TmpIsTransientError(Func`3<DbException, int, bool> value);
    public static void ClearInformationTableCache();
}
public class Z.BulkOperations.BulkOperationOptions : object {
    internal bool ;
    [CompilerGeneratedAttribute]
private List`1<Action`1<BulkOperation>> ;
    internal List`1<AuditEntry> ;
    internal AuditModeType ;
    internal bool ;
    internal bool ;
    internal AutoMapType ;
    internal string ;
    internal string ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal Func`3<string, object, object> ;
    internal Action`2<string, ColumnMapping> ;
    [CompilerGeneratedAttribute]
private InternalOptions ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal List`1<> ;
    internal CaseSensitiveType ;
    internal bool ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal List`1<BasicColumnMapping> ;
    internal IEnumerable`1<> ;
    internal List`1<ColumnMapping> ;
    internal IEnumerable`1<object> ;
    internal DefaultValueResolutionType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal DbConnection ;
    internal Func`1<DbConnection> ;
    internal string ;
    internal string ;
    internal CustomProvider ;
    internal object ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Action`1<BulkOperation> ;
    internal bool ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> ;
    internal bool ;
    internal bool ;
    internal ErrorModeType ;
    internal List`1<BulkOperationError> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal object ;
    internal object ;
    internal bool ;
    internal object ;
    internal Expression ;
    internal Type ;
    internal Action`1<string> ;
    internal Action`1<string> ;
    internal StringBuilder ;
    internal bool ;
    internal Stopwatch ;
    internal Action`2<object, StringBuilder> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    private bool ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal TimeSpan ;
    [CompilerGeneratedAttribute]
private bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal ProviderType ;
    internal Assembly ;
    internal ResolutionType ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal ResultInfo ;
    internal bool ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal Nullable`1<int> ;
    internal Nullable`1<bool> ;
    internal int ;
    internal int ;
    internal int ;
    internal string ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal InternalTransactionType ;
    internal DbTransaction ;
    internal Nullable`1<IsolationLevel> ;
    internal int ;
    internal TimeSpan ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    public bool UseInternalTransaction { get; public set; }
    internal List`1<Action`1<BulkOperation>>  { get; internal set; }
    internal bool  { get; }
    public List`1<AuditEntry> AuditEntries { get; public set; }
    public AuditModeType AuditMode { get; public set; }
    public bool UseAudit { get; public set; }
    public AutoMapType AutoMap { get; public set; }
    public string AutoMapKeyName { get; public set; }
    public string AutoMapIdentityName { get; public set; }
    internal InternalOptions  { get; internal set; }
    public bool AutoMapOutputIdentity { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapIdentityExpression { get; public set; }
    public Func`3<string, object, object> AutoMapValueFactory { get; public set; }
    public Action`2<string, ColumnMapping> AutoMapColumnBuilder { get; public set; }
    public int BatchDelayInterval { get; public set; }
    public int BatchSize { get; public set; }
    public int CombineMaxCommand { get; public set; }
    public int BatchTimeout { get; public set; }
    public CaseSensitiveType CaseSensitive { get; public set; }
    public LambdaExpression LambdaInputExpression { get; public set; }
    public LambdaExpression LambdaInputOutputExpression { get; public set; }
    public LambdaExpression LambdaOutputExpression { get; public set; }
    public LambdaExpression LambdaPrimaryKeyExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeDeleteKeySubsetExpression { get; public set; }
    public LambdaExpression LambdaIgnoreColumnOutputExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaOnMergeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnMergeInsertInputExpression { get; public set; }
    public LambdaExpression LambdaColumnStagingTableFormulaExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public List`1<ColumnMapping> ColumnMappings { get; public set; }
    public bool OnMergeUpdateUseCoalesce { get; public set; }
    public bool OnMergeUpdateUseCoalesceDestination { get; public set; }
    public bool OnUpdateUseCoalesce { get; public set; }
    public bool OnUpdateUseCoalesceDestination { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesce { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesceDestination { get; public set; }
    public DefaultValueResolutionType DefaultValueResolution { get; public set; }
    public bool MatchNamesWithUnderscores { get; public set; }
    public bool UseSmartMatchNames { get; public set; }
    internal bool  { get; }
    public List`1<string> ColumnInputNames { get; public set; }
    public List`1<string> ColumnInputOutputNames { get; public set; }
    public List`1<string> ColumnOutputNames { get; public set; }
    public List`1<string> ColumnPrimaryKeyNames { get; public set; }
    public List`1<string> ColumnSynchronizeDeleteKeySubsetNames { get; public set; }
    public List`1<string> IgnoreOnMergeInsertNames { get; public set; }
    public List`1<string> IgnoreOnMergeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeInsertNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnInsertNames { get; public set; }
    public List`1<string> IgnoreOnUpdateNames { get; public set; }
    public List`1<string> MergeMatchedAndConditionNames { get; public set; }
    public List`1<string> MergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> CoalesceOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnUpdateNames { get; public set; }
    public List`1<string> OnMergeUpdateInputNames { get; public set; }
    public List`1<string> OnMergeInsertInputNames { get; public set; }
    public List`1<string> OnSynchronizeUpdateInputNames { get; public set; }
    public List`1<string> OnSynchronizeInsertInputNames { get; public set; }
    public List`1<string> ColumnStagingTableFormulaNames { get; public set; }
    public List`1<string> IgnoreColumnOutputNames { get; public set; }
    public bool CommandParameterAddRowIndex { get; public set; }
    public string CommandParameterPrefix { get; public set; }
    public string CommandParameterSuffix { get; public set; }
    public bool UseCompile { get; public set; }
    public DbConnection Connection { get; public set; }
    public string ConnectionName { get; public set; }
    public string ConnectionString { get; public set; }
    public Func`1<DbConnection> ConnectionFactory { get; public set; }
    public CustomProvider CustomProvider { get; public set; }
    public object DataSource { get; public set; }
    public bool Debug1 { get; public set; }
    public string DestinationTableName { get; public set; }
    public string DestinationSchemaName { get; public set; }
    public bool DisableDotCheckForEscapeTableName { get; public set; }
    public bool UseLegacyBatchOperation { get; public set; }
    public bool IncludeGraph { get; public set; }
    public Action`1<BulkOperation> IncludeGraphOperationBuilder { get; public set; }
    internal Dictionary`2<string, string>  { get; internal set; }
    public bool AutoMapOutputDirection { get; public set; }
    public ErrorModeType ErrorMode { get; public set; }
    public List`1<BulkOperationError> Errors { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuting { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuted { get; public set; }
    public Action`1<BulkOperation> DeleteFromQueryExecuted { get; public set; }
    internal bool  { get; internal set; }
    public bool ForceRowsAffectedValidation { get; public set; }
    public string MergeStagingTableFilterFormula { get; public set; }
    public string InsertStagingTableFilterFormula { get; public set; }
    public string UpdateStagingTableFilterFormula { get; public set; }
    public string DeleteStagingTableFilterFormula { get; public set; }
    public string SynchronizeDeleteDestinationTableFilterFormula { get; public set; }
    public string SynchronizeSoftDeleteFormula { get; public set; }
    public string InsertNotMatchedAndFormula { get; public set; }
    public string MergeNotMatchedAndFormula { get; public set; }
    public string SynchronizeNotMatchedAndFormula { get; public set; }
    public string MergeMatchedAndFormula { get; public set; }
    public string SynchronizeMatchedAndFormula { get; public set; }
    public string UpdateMatchedAndFormula { get; public set; }
    public string DeleteMatchedAndFormula { get; public set; }
    public string UpdatePrimaryKeyAndFormula { get; public set; }
    public string MergePrimaryKeyAndFormula { get; public set; }
    public string InsertPrimaryKeyAndFormula { get; public set; }
    public string DeletePrimaryKeyAndFormula { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaDelete { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaMerge { get; public set; }
    public string ColumnSynchronizeDeleteKeySubsetFormula { get; public set; }
    public bool UseStopwatchForSqlExecutingTime { get; public set; }
    public Stopwatch StopwatchForSqlExecutingTime { get; public set; }
    public Action`1<string> Log { get; public set; }
    public StringBuilder LogDump { get; public set; }
    public bool UseLogDump { get; public set; }
    public Action`2<object, StringBuilder> AddLogExecuting { get; public set; }
    public bool IgnoreOnMergeUpdate { get; public set; }
    public bool IgnoreOnMergeInsert { get; public set; }
    public bool UseOracleGlobalSequenceIndexTable { get; public set; }
    public bool ForceSelectOutput { get; public set; }
    public int ParallelBatchByTask { get; public set; }
    public int ParallelMinBatch { get; public set; }
    public int ParallelMinRecord { get; public set; }
    public bool UseParallel { get; public set; }
    public TimeSpan PostgreSqlBinaryImportTimeout { get; public set; }
    public bool UsePostgreSqlInsertOnConflictDoNothing { get; public set; }
    public bool UsePostgreSqlTimeZone { get; public set; }
    public bool UsePostgreSqlGetInformationSchema2 { get; public set; }
    public bool UsePostgreSqlUnprepare { get; public set; }
    internal bool  { get; internal set; }
    public bool AllowDuplicateKeys { get; public set; }
    public bool AllowUpdatePrimaryKeys { get; public set; }
    public bool InsertIfNotExists { get; public set; }
    public bool DisablePrimaryKeyNullCheck { get; public set; }
    public ProviderType Provider { get; public set; }
    public Assembly ProviderAssembly { get; public set; }
    public ResolutionType Resolution { get; public set; }
    public bool ForceTriggerResolution { get; public set; }
    public bool DisableInformationSchemaCache { get; public set; }
    public ResultInfo ResultInfo { get; public set; }
    public int RowsAffected { get; public set; }
    public bool UseRowsAffected { get; public set; }
    public bool ValidateNoDuplicateKey { get; public set; }
    public bool DisableTemporaryTableClusteredIndex { get; public set; }
    public bool DisableSqlBulkCopyDirect { get; public set; }
    public bool ForceOutputFromUnmodifiedRow { get; public set; }
    public Nullable`1<bool> AutoTruncate { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsCheckConstraintOnInsertDisabled { get; public set; }
    public Nullable`1<int> SqlBulkCopyOptions { get; public set; }
    public bool MergeKeepIdentity { get; public set; }
    public bool SynchronizeKeepidentity { get; public set; }
    public bool InsertKeepIdentity { get; public set; }
    public bool HasColumnEncrypted { get; public set; }
    public bool UseTempDbForColumnEncrypted { get; public set; }
    public bool SynchronizeOnlyDelete { get; public set; }
    public bool SynchronizeIgnoreUpdate { get; public set; }
    public bool SynchronizeIgnoreInsert { get; public set; }
    public string QueryHint { get; public set; }
    public int TemporaryTableBatchByTable { get; public set; }
    public int TemporaryTableInsertBatchSize { get; public set; }
    public int TemporaryTableMinRecord { get; public set; }
    public bool TemporaryTableUseTableLock { get; public set; }
    public bool UseTableLock { get; public set; }
    public string TableHintSql { get; public set; }
    public string TemporaryTableSchemaName { get; public set; }
    public bool UsePermanentTable { get; public set; }
    public bool TemporaryTableUseSameName { get; public set; }
    public string TemporaryTableName { get; public set; }
    public bool TemporaryTableCreate { get; public set; }
    public bool TemporaryTablePersist { get; public set; }
    public bool TemporaryTableIsMemory { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public InternalTransactionType InternalTransaction { get; public set; }
    public Nullable`1<IsolationLevel> TransactionIsolationLevel { get; public set; }
    public int RetryCount { get; public set; }
    public TimeSpan RetryInterval { get; public set; }
    public bool UnsafeMode { get; public set; }
    public bool ValidateAllSourceMapped { get; public set; }
    public bool ValidateAllDestinationMapped { get; public set; }
    public bool get_UseInternalTransaction();
    public void set_UseInternalTransaction(bool value);
    internal void ();
    [CompilerGeneratedAttribute]
internal List`1<Action`1<BulkOperation>> get_();
    [CompilerGeneratedAttribute]
internal void set_(List`1<Action`1<BulkOperation>> value);
    internal Action`1<BulkOperation> ();
    public sealed virtual void Dispose();
    internal void (BulkOperation );
    internal bool get_();
    public List`1<AuditEntry> get_AuditEntries();
    public void set_AuditEntries(List`1<AuditEntry> value);
    public AuditModeType get_AuditMode();
    public void set_AuditMode(AuditModeType value);
    public bool get_UseAudit();
    public void set_UseAudit(bool value);
    public AutoMapType get_AutoMap();
    public void set_AutoMap(AutoMapType value);
    public string get_AutoMapKeyName();
    public void set_AutoMapKeyName(string value);
    public string get_AutoMapIdentityName();
    public void set_AutoMapIdentityName(string value);
    [CompilerGeneratedAttribute]
internal InternalOptions get_();
    [CompilerGeneratedAttribute]
internal void set_(InternalOptions value);
    public bool get_AutoMapOutputIdentity();
    public void set_AutoMapOutputIdentity(bool value);
    public Expression`1<Func`2<object, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<object, object>> value);
    public Func`3<string, object, object> get_AutoMapValueFactory();
    public void set_AutoMapValueFactory(Func`3<string, object, object> value);
    public Action`2<string, ColumnMapping> get_AutoMapColumnBuilder();
    public void set_AutoMapColumnBuilder(Action`2<string, ColumnMapping> value);
    public int get_BatchDelayInterval();
    public void set_BatchDelayInterval(int value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_CombineMaxCommand();
    public void set_CombineMaxCommand(int value);
    public int get_BatchTimeout();
    public void set_BatchTimeout(int value);
    public CaseSensitiveType get_CaseSensitive();
    public void set_CaseSensitive(CaseSensitiveType value);
    public LambdaExpression get_LambdaInputExpression();
    public void set_LambdaInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaInputOutputExpression();
    public void set_LambdaInputOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOutputExpression();
    public void set_LambdaOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaPrimaryKeyExpression();
    public void set_LambdaPrimaryKeyExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeDeleteKeySubsetExpression();
    public void set_LambdaSynchronizeDeleteKeySubsetExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreColumnOutputExpression();
    public void set_LambdaIgnoreColumnOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnInsertExpression();
    public void set_LambdaIgnoreOnInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnUpdateExpression();
    public void set_LambdaIgnoreOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeInsertExpression();
    public void set_LambdaIgnoreOnMergeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeUpdateExpression();
    public void set_LambdaIgnoreOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeInsertExpression();
    public void set_LambdaIgnoreOnSynchronizeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeUpdateExpression();
    public void set_LambdaIgnoreOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndConditionExpression();
    public void set_LambdaMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndConditionExpression();
    public void set_LambdaUpdateMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndOneNotConditionExpression();
    public void set_LambdaUpdateMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndConditionExpression();
    public void set_LambdaDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndConditionExpression();
    public void set_LambdaSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnMergeUpdateExpression();
    public void set_LambdaCoalesceOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnMergeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnUpdateExpression();
    public void set_LambdaCoalesceOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnUpdateExpression();
    public void set_LambdaCoalesceDestinationOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeUpdateInputExpression();
    public void set_LambdaOnMergeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeInsertInputExpression();
    public void set_LambdaOnMergeInsertInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaColumnStagingTableFormulaExpression();
    public void set_LambdaColumnStagingTableFormulaExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeUpdateInputExpression();
    public void set_LambdaOnSynchronizeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeInsertInputExpression();
    public void set_LambdaOnSynchronizeInsertInputExpression(LambdaExpression value);
    public Expression`1<Func`2<object, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<object, object>> value);
    public List`1<ColumnMapping> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping> value);
    public bool get_OnMergeUpdateUseCoalesce();
    public void set_OnMergeUpdateUseCoalesce(bool value);
    public bool get_OnMergeUpdateUseCoalesceDestination();
    public void set_OnMergeUpdateUseCoalesceDestination(bool value);
    public bool get_OnUpdateUseCoalesce();
    public void set_OnUpdateUseCoalesce(bool value);
    public bool get_OnUpdateUseCoalesceDestination();
    public void set_OnUpdateUseCoalesceDestination(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesce();
    public void set_OnSynchronizeUpdateUseCoalesce(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesceDestination();
    public void set_OnSynchronizeUpdateUseCoalesceDestination(bool value);
    public DefaultValueResolutionType get_DefaultValueResolution();
    public void set_DefaultValueResolution(DefaultValueResolutionType value);
    public bool get_MatchNamesWithUnderscores();
    public void set_MatchNamesWithUnderscores(bool value);
    public bool get_UseSmartMatchNames();
    public void set_UseSmartMatchNames(bool value);
    internal bool get_();
    public List`1<string> get_ColumnInputNames();
    public void set_ColumnInputNames(List`1<string> value);
    public List`1<string> get_ColumnInputOutputNames();
    public void set_ColumnInputOutputNames(List`1<string> value);
    public List`1<string> get_ColumnOutputNames();
    public void set_ColumnOutputNames(List`1<string> value);
    public List`1<string> get_ColumnPrimaryKeyNames();
    public void set_ColumnPrimaryKeyNames(List`1<string> value);
    public List`1<string> get_ColumnSynchronizeDeleteKeySubsetNames();
    public void set_ColumnSynchronizeDeleteKeySubsetNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeInsertNames();
    public void set_IgnoreOnMergeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeUpdateNames();
    public void set_IgnoreOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeInsertNames();
    public void set_IgnoreOnSynchronizeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeUpdateNames();
    public void set_IgnoreOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnInsertNames();
    public void set_IgnoreOnInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateNames();
    public void set_IgnoreOnUpdateNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndConditionNames();
    public void set_MergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndOneNotConditionNames();
    public void set_MergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndConditionNames();
    public void set_UpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndOneNotConditionNames();
    public void set_UpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndConditionNames();
    public void set_DeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndOneNotConditionNames();
    public void set_DeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndConditionNames();
    public void set_SynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndOneNotConditionNames();
    public void set_SynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndConditionNames();
    public void set_IgnoreOnMergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndConditionNames();
    public void set_IgnoreOnDeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndOneNotConditionNames();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndConditionNames();
    public void set_IgnoreOnUpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndOneNotConditionNames();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_CoalesceOnMergeUpdateNames();
    public void set_CoalesceOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnMergeUpdateNames();
    public void set_CoalesceDestinationOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnSynchronizeUpdateNames();
    public void set_CoalesceOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnSynchronizeUpdateNames();
    public void set_CoalesceDestinationOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnUpdateNames();
    public void set_CoalesceOnUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnUpdateNames();
    public void set_CoalesceDestinationOnUpdateNames(List`1<string> value);
    public List`1<string> get_OnMergeUpdateInputNames();
    public void set_OnMergeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnMergeInsertInputNames();
    public void set_OnMergeInsertInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeUpdateInputNames();
    public void set_OnSynchronizeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeInsertInputNames();
    public void set_OnSynchronizeInsertInputNames(List`1<string> value);
    public List`1<string> get_ColumnStagingTableFormulaNames();
    public void set_ColumnStagingTableFormulaNames(List`1<string> value);
    public List`1<string> get_IgnoreColumnOutputNames();
    public void set_IgnoreColumnOutputNames(List`1<string> value);
    public bool get_CommandParameterAddRowIndex();
    public void set_CommandParameterAddRowIndex(bool value);
    public string get_CommandParameterPrefix();
    public void set_CommandParameterPrefix(string value);
    public string get_CommandParameterSuffix();
    public void set_CommandParameterSuffix(string value);
    public bool get_UseCompile();
    public void set_UseCompile(bool value);
    public virtual DbConnection get_Connection();
    public virtual void set_Connection(DbConnection value);
    public string get_ConnectionName();
    public void set_ConnectionName(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public Func`1<DbConnection> get_ConnectionFactory();
    public void set_ConnectionFactory(Func`1<DbConnection> value);
    public CustomProvider get_CustomProvider();
    public void set_CustomProvider(CustomProvider value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public bool get_Debug1();
    public void set_Debug1(bool value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public string get_DestinationSchemaName();
    public void set_DestinationSchemaName(string value);
    public bool get_DisableDotCheckForEscapeTableName();
    public void set_DisableDotCheckForEscapeTableName(bool value);
    public bool get_UseLegacyBatchOperation();
    public void set_UseLegacyBatchOperation(bool value);
    public bool get_IncludeGraph();
    public void set_IncludeGraph(bool value);
    public Action`1<BulkOperation> get_IncludeGraphOperationBuilder();
    public void set_IncludeGraphOperationBuilder(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, string> value);
    public bool get_AutoMapOutputDirection();
    public void set_AutoMapOutputDirection(bool value);
    public ErrorModeType get_ErrorMode();
    public void set_ErrorMode(ErrorModeType value);
    public List`1<BulkOperationError> get_Errors();
    public void set_Errors(List`1<BulkOperationError> value);
    public Action`1<BulkOperation> get_BulkOperationExecuting();
    public void set_BulkOperationExecuting(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_BulkOperationExecuted();
    public void set_BulkOperationExecuted(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_DeleteFromQueryExecuted();
    public void set_DeleteFromQueryExecuted(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_ForceRowsAffectedValidation();
    public void set_ForceRowsAffectedValidation(bool value);
    public string get_MergeStagingTableFilterFormula();
    public void set_MergeStagingTableFilterFormula(string value);
    public string get_InsertStagingTableFilterFormula();
    public void set_InsertStagingTableFilterFormula(string value);
    public string get_UpdateStagingTableFilterFormula();
    public void set_UpdateStagingTableFilterFormula(string value);
    public string get_DeleteStagingTableFilterFormula();
    public void set_DeleteStagingTableFilterFormula(string value);
    public string get_SynchronizeDeleteDestinationTableFilterFormula();
    public void set_SynchronizeDeleteDestinationTableFilterFormula(string value);
    public string get_SynchronizeSoftDeleteFormula();
    public void set_SynchronizeSoftDeleteFormula(string value);
    public string get_InsertNotMatchedAndFormula();
    public void set_InsertNotMatchedAndFormula(string value);
    public string get_MergeNotMatchedAndFormula();
    public void set_MergeNotMatchedAndFormula(string value);
    public string get_SynchronizeNotMatchedAndFormula();
    public void set_SynchronizeNotMatchedAndFormula(string value);
    public string get_MergeMatchedAndFormula();
    public void set_MergeMatchedAndFormula(string value);
    public string get_SynchronizeMatchedAndFormula();
    public void set_SynchronizeMatchedAndFormula(string value);
    public string get_UpdateMatchedAndFormula();
    public void set_UpdateMatchedAndFormula(string value);
    public string get_DeleteMatchedAndFormula();
    public void set_DeleteMatchedAndFormula(string value);
    public string get_UpdatePrimaryKeyAndFormula();
    public void set_UpdatePrimaryKeyAndFormula(string value);
    public string get_MergePrimaryKeyAndFormula();
    public void set_MergePrimaryKeyAndFormula(string value);
    public string get_InsertPrimaryKeyAndFormula();
    public void set_InsertPrimaryKeyAndFormula(string value);
    public string get_DeletePrimaryKeyAndFormula();
    public void set_DeletePrimaryKeyAndFormula(string value);
    public string get_SynchronizePrimaryKeyAndFormulaDelete();
    public void set_SynchronizePrimaryKeyAndFormulaDelete(string value);
    public string get_SynchronizePrimaryKeyAndFormulaMerge();
    public void set_SynchronizePrimaryKeyAndFormulaMerge(string value);
    public string get_ColumnSynchronizeDeleteKeySubsetFormula();
    public void set_ColumnSynchronizeDeleteKeySubsetFormula(string value);
    internal virtual IQueryable ( );
    internal virtual DbCommand ( , Type[] , LambdaExpression );
    public bool get_UseStopwatchForSqlExecutingTime();
    public void set_UseStopwatchForSqlExecutingTime(bool value);
    public Stopwatch get_StopwatchForSqlExecutingTime();
    public void set_StopwatchForSqlExecutingTime(Stopwatch value);
    public Action`1<string> get_Log();
    public void set_Log(Action`1<string> value);
    public StringBuilder get_LogDump();
    public void set_LogDump(StringBuilder value);
    public bool get_UseLogDump();
    public void set_UseLogDump(bool value);
    public Action`2<object, StringBuilder> get_AddLogExecuting();
    public void set_AddLogExecuting(Action`2<object, StringBuilder> value);
    public bool get_IgnoreOnMergeUpdate();
    public void set_IgnoreOnMergeUpdate(bool value);
    public bool get_IgnoreOnMergeInsert();
    public void set_IgnoreOnMergeInsert(bool value);
    public bool get_UseOracleGlobalSequenceIndexTable();
    public void set_UseOracleGlobalSequenceIndexTable(bool value);
    public bool get_ForceSelectOutput();
    public void set_ForceSelectOutput(bool value);
    public int get_ParallelBatchByTask();
    public void set_ParallelBatchByTask(int value);
    public int get_ParallelMinBatch();
    public void set_ParallelMinBatch(int value);
    public int get_ParallelMinRecord();
    public void set_ParallelMinRecord(int value);
    public bool get_UseParallel();
    public void set_UseParallel(bool value);
    public TimeSpan get_PostgreSqlBinaryImportTimeout();
    public void set_PostgreSqlBinaryImportTimeout(TimeSpan value);
    public bool get_UsePostgreSqlInsertOnConflictDoNothing();
    public void set_UsePostgreSqlInsertOnConflictDoNothing(bool value);
    public bool get_UsePostgreSqlTimeZone();
    public void set_UsePostgreSqlTimeZone(bool value);
    public bool get_UsePostgreSqlGetInformationSchema2();
    public void set_UsePostgreSqlGetInformationSchema2(bool value);
    public bool get_UsePostgreSqlUnprepare();
    public void set_UsePostgreSqlUnprepare(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_AllowDuplicateKeys();
    public void set_AllowDuplicateKeys(bool value);
    public bool get_AllowUpdatePrimaryKeys();
    public void set_AllowUpdatePrimaryKeys(bool value);
    public bool get_InsertIfNotExists();
    public void set_InsertIfNotExists(bool value);
    public bool get_DisablePrimaryKeyNullCheck();
    public void set_DisablePrimaryKeyNullCheck(bool value);
    public ProviderType get_Provider();
    public void set_Provider(ProviderType value);
    public Assembly get_ProviderAssembly();
    public void set_ProviderAssembly(Assembly value);
    public ResolutionType get_Resolution();
    public void set_Resolution(ResolutionType value);
    public bool get_ForceTriggerResolution();
    public void set_ForceTriggerResolution(bool value);
    public bool get_DisableInformationSchemaCache();
    public void set_DisableInformationSchemaCache(bool value);
    public ResultInfo get_ResultInfo();
    public void set_ResultInfo(ResultInfo value);
    public int get_RowsAffected();
    public void set_RowsAffected(int value);
    public bool get_UseRowsAffected();
    public void set_UseRowsAffected(bool value);
    public bool get_ValidateNoDuplicateKey();
    public void set_ValidateNoDuplicateKey(bool value);
    public bool get_DisableTemporaryTableClusteredIndex();
    public void set_DisableTemporaryTableClusteredIndex(bool value);
    public bool get_DisableSqlBulkCopyDirect();
    public void set_DisableSqlBulkCopyDirect(bool value);
    public bool get_ForceOutputFromUnmodifiedRow();
    public void set_ForceOutputFromUnmodifiedRow(bool value);
    public Nullable`1<bool> get_AutoTruncate();
    public void set_AutoTruncate(Nullable`1<bool> value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_IsCheckConstraintOnInsertDisabled();
    public void set_IsCheckConstraintOnInsertDisabled(bool value);
    public Nullable`1<int> get_SqlBulkCopyOptions();
    public void set_SqlBulkCopyOptions(Nullable`1<int> value);
    public bool get_MergeKeepIdentity();
    public void set_MergeKeepIdentity(bool value);
    public bool get_SynchronizeKeepidentity();
    public void set_SynchronizeKeepidentity(bool value);
    public bool get_InsertKeepIdentity();
    public void set_InsertKeepIdentity(bool value);
    public bool get_HasColumnEncrypted();
    public void set_HasColumnEncrypted(bool value);
    public bool get_UseTempDbForColumnEncrypted();
    public void set_UseTempDbForColumnEncrypted(bool value);
    public bool get_SynchronizeOnlyDelete();
    public void set_SynchronizeOnlyDelete(bool value);
    public bool get_SynchronizeIgnoreUpdate();
    public void set_SynchronizeIgnoreUpdate(bool value);
    public bool get_SynchronizeIgnoreInsert();
    public void set_SynchronizeIgnoreInsert(bool value);
    public string get_QueryHint();
    public void set_QueryHint(string value);
    public int get_TemporaryTableBatchByTable();
    public void set_TemporaryTableBatchByTable(int value);
    public int get_TemporaryTableInsertBatchSize();
    public void set_TemporaryTableInsertBatchSize(int value);
    public int get_TemporaryTableMinRecord();
    public void set_TemporaryTableMinRecord(int value);
    public bool get_TemporaryTableUseTableLock();
    public void set_TemporaryTableUseTableLock(bool value);
    public bool get_UseTableLock();
    public void set_UseTableLock(bool value);
    public string get_TableHintSql();
    public void set_TableHintSql(string value);
    public string get_TemporaryTableSchemaName();
    public void set_TemporaryTableSchemaName(string value);
    public bool get_UsePermanentTable();
    public void set_UsePermanentTable(bool value);
    public bool get_TemporaryTableUseSameName();
    public void set_TemporaryTableUseSameName(bool value);
    public string get_TemporaryTableName();
    public void set_TemporaryTableName(string value);
    public bool get_TemporaryTableCreate();
    public void set_TemporaryTableCreate(bool value);
    public bool get_TemporaryTablePersist();
    public void set_TemporaryTablePersist(bool value);
    public bool get_TemporaryTableIsMemory();
    public void set_TemporaryTableIsMemory(bool value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public InternalTransactionType get_InternalTransaction();
    public void set_InternalTransaction(InternalTransactionType value);
    public Nullable`1<IsolationLevel> get_TransactionIsolationLevel();
    public void set_TransactionIsolationLevel(Nullable`1<IsolationLevel> value);
    public int get_RetryCount();
    public void set_RetryCount(int value);
    public TimeSpan get_RetryInterval();
    public void set_RetryInterval(TimeSpan value);
    public bool get_UnsafeMode();
    public void set_UnsafeMode(bool value);
    public bool get_ValidateAllSourceMapped();
    public void set_ValidateAllSourceMapped(bool value);
    public bool get_ValidateAllDestinationMapped();
    public void set_ValidateAllDestinationMapped(bool value);
    [CompilerGeneratedAttribute]
private void (BulkOperation );
    [CompilerGeneratedAttribute]
private void (BulkOperation );
}
public class Z.BulkOperations.BulkOperationOptions`1 : BulkOperationOptions {
    internal List`1<ColumnMapping`1<TEntity>> ;
    public List`1<ColumnMapping`1<TEntity>> ColumnMappings { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapIdentityExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public List`1<ColumnMapping`1<TEntity>> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping`1<TEntity>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<TEntity, object>> value);
}
public static class Z.BulkOperations.BulkOperationReflection : object {
    public static string Get_InternalColumnMapping_DestinationColumn_TemporaryName(object internalColumnMapping);
    public static object Get_InternalColumnMapping_DestinationColumn_DbType(object internalColumnMapping);
    public static int Get_InternalColumnMapping_DestinationColumn_Size(object internalColumnMapping);
}
public class Z.BulkOperations.BulkValueConverter`1 : object {
    public virtual T ConvertFromProvider(object value);
    public virtual object ConvertToProvider(T value);
}
public enum Z.BulkOperations.CaseSensitiveType : Enum {
    public int value__;
    public static CaseSensitiveType Sensitive;
    public static CaseSensitiveType Insensitive;
    public static CaseSensitiveType SourceInsensitive;
    public static CaseSensitiveType DestinationInsensitive;
}
public class Z.BulkOperations.ColumnMapping : object {
    internal bool ;
    internal bool ;
    internal bool ;
    internal ColumnMappingAuditModeType ;
    internal ColumnMappingCaseSensitiveType ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal string ;
    internal LambdaExpression ;
    internal string ;
    internal int ;
    internal ColumnMappingDirectionType ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ColumnMappingFormulaType ;
    internal string ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal LambdaExpression ;
    internal string ;
    internal int ;
    internal object ;
    internal Func`2<object, object> ;
    internal DefaultValueResolutionType ;
    internal object ;
    internal string ;
    [CompilerGeneratedAttribute]
private bool ;
    public bool CoalesceOnMergeUpdate { get; public set; }
    public bool CoalesceDestinationOnMergeUpdate { get; public set; }
    public bool IsOptional { get; public set; }
    public ColumnMappingAuditModeType AuditMode { get; public set; }
    public ColumnMappingCaseSensitiveType CaseSensitive { get; public set; }
    public bool IsConcurrencyColumn { get; public set; }
    internal bool  { get; internal set; }
    public string DestinationAlias { get; public set; }
    public Expression`1<Func`2<object, object>> DestinationExpression { get; public set; }
    public string DestinationName { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public ColumnMappingDirectionType Direction { get; public set; }
    internal string  { get; internal set; }
    internal string  { get; internal set; }
    public string FormulaInsert { get; public set; }
    public ColumnMappingFormulaType FormulaType { get; public set; }
    public string FormulaUpdate { get; public set; }
    public string FormulaPrimaryKeyDelete { get; public set; }
    public string FormulaPrimaryKeyMerge { get; public set; }
    public string FormulaPrimaryKeySynchronize { get; public set; }
    public string FormulaPrimaryKeyUpdate { get; public set; }
    public bool IsIdentity { get; public set; }
    internal string  { get; internal set; }
    public bool IgnoreOnInsert { get; public set; }
    public bool IgnoreOnUpdate { get; public set; }
    public bool IgnoreOnMergeInsert { get; public set; }
    public bool IgnoreOnMergeUpdate { get; public set; }
    public bool IgnoreOnSynchronizeInsert { get; public set; }
    public bool IgnoreOnSynchronizeUpdate { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public string SourceName { get; public set; }
    public int SourceOrdinal { get; public set; }
    public Expression`1<Func`2<object, object>> SourceExpression { get; public set; }
    public object SourceValue { get; public set; }
    public Func`2<object, object> SourceValueFactory { get; public set; }
    public DefaultValueResolutionType DefaultValueResolution { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueSql { get; public set; }
    internal bool  { get; internal set; }
    public ColumnMapping(string columnName);
    public ColumnMapping(string columnName, bool isPrimaryKey);
    public ColumnMapping(string columnName, ColumnMappingDirectionType direction);
    public ColumnMapping(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping(string sourceName, string destinationName);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal);
    public ColumnMapping(int sourceOrdinal, string destinationName);
    public ColumnMapping(string sourceName, int destinationOrdinal);
    public ColumnMapping(string sourceName, string destinationName, bool isPrimaryKey);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public ColumnMapping(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public ColumnMapping(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public bool get_CoalesceOnMergeUpdate();
    public void set_CoalesceOnMergeUpdate(bool value);
    public bool get_CoalesceDestinationOnMergeUpdate();
    public void set_CoalesceDestinationOnMergeUpdate(bool value);
    public bool get_IsOptional();
    public void set_IsOptional(bool value);
    public ColumnMappingAuditModeType get_AuditMode();
    public void set_AuditMode(ColumnMappingAuditModeType value);
    public ColumnMappingCaseSensitiveType get_CaseSensitive();
    public void set_CaseSensitive(ColumnMappingCaseSensitiveType value);
    public bool get_IsConcurrencyColumn();
    public void set_IsConcurrencyColumn(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public string get_DestinationAlias();
    public void set_DestinationAlias(string value);
    public Expression`1<Func`2<object, object>> get_DestinationExpression();
    public void set_DestinationExpression(Expression`1<Func`2<object, object>> value);
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public ColumnMappingDirectionType get_Direction();
    public void set_Direction(ColumnMappingDirectionType value);
    [CompilerGeneratedAttribute]
internal string get_();
    [CompilerGeneratedAttribute]
internal void set_(string value);
    [CompilerGeneratedAttribute]
internal string get_();
    [CompilerGeneratedAttribute]
internal void set_(string value);
    public string get_FormulaInsert();
    public void set_FormulaInsert(string value);
    public ColumnMappingFormulaType get_FormulaType();
    public void set_FormulaType(ColumnMappingFormulaType value);
    public string get_FormulaUpdate();
    public void set_FormulaUpdate(string value);
    public string get_FormulaPrimaryKeyDelete();
    public void set_FormulaPrimaryKeyDelete(string value);
    public string get_FormulaPrimaryKeyMerge();
    public void set_FormulaPrimaryKeyMerge(string value);
    public string get_FormulaPrimaryKeySynchronize();
    public void set_FormulaPrimaryKeySynchronize(string value);
    public string get_FormulaPrimaryKeyUpdate();
    public void set_FormulaPrimaryKeyUpdate(string value);
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    internal string get_();
    internal void set_(string value);
    public bool get_IgnoreOnInsert();
    public void set_IgnoreOnInsert(bool value);
    public bool get_IgnoreOnUpdate();
    public void set_IgnoreOnUpdate(bool value);
    public bool get_IgnoreOnMergeInsert();
    public void set_IgnoreOnMergeInsert(bool value);
    public bool get_IgnoreOnMergeUpdate();
    public void set_IgnoreOnMergeUpdate(bool value);
    public bool get_IgnoreOnSynchronizeInsert();
    public void set_IgnoreOnSynchronizeInsert(bool value);
    public bool get_IgnoreOnSynchronizeUpdate();
    public void set_IgnoreOnSynchronizeUpdate(bool value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
    public Expression`1<Func`2<object, object>> get_SourceExpression();
    public void set_SourceExpression(Expression`1<Func`2<object, object>> value);
    public object get_SourceValue();
    public void set_SourceValue(object value);
    public Func`2<object, object> get_SourceValueFactory();
    public void set_SourceValueFactory(Func`2<object, object> value);
    public DefaultValueResolutionType get_DefaultValueResolution();
    public void set_DefaultValueResolution(DefaultValueResolutionType value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public string get_DefaultValueSql();
    public void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
}
public class Z.BulkOperations.ColumnMapping`1 : ColumnMapping {
    public Expression`1<Func`2<TEntity, object>> SourceExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DestinationExpression { get; public set; }
    public ColumnMapping`1(string columnName);
    public ColumnMapping`1(string columnName, bool isPrimaryKey);
    public ColumnMapping`1(string columnName, ColumnMappingDirectionType direction);
    public ColumnMapping`1(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(string sourceName, string destinationName);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal);
    public ColumnMapping`1(int sourceOrdinal, string destinationName);
    public ColumnMapping`1(string sourceName, int destinationOrdinal);
    public ColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public ColumnMapping`1(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public ColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public Expression`1<Func`2<TEntity, object>> get_SourceExpression();
    public void set_SourceExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DestinationExpression();
    public void set_DestinationExpression(Expression`1<Func`2<TEntity, object>> value);
}
public enum Z.BulkOperations.ColumnMappingAuditModeType : Enum {
    public int value__;
    public static ColumnMappingAuditModeType Inherit;
    public static ColumnMappingAuditModeType Include;
    public static ColumnMappingAuditModeType Exclude;
}
public enum Z.BulkOperations.ColumnMappingCaseSensitiveType : Enum {
    public int value__;
    public static ColumnMappingCaseSensitiveType Inherit;
    public static ColumnMappingCaseSensitiveType Sensitive;
    public static ColumnMappingCaseSensitiveType Insensitive;
    public static ColumnMappingCaseSensitiveType SourceInsensitive;
    public static ColumnMappingCaseSensitiveType DestinationInsensitive;
}
public enum Z.BulkOperations.ColumnMappingDirectionType : Enum {
    public int value__;
    public static ColumnMappingDirectionType None;
    public static ColumnMappingDirectionType Input;
    public static ColumnMappingDirectionType Output;
    public static ColumnMappingDirectionType InputOutput;
    public static ColumnMappingDirectionType Formula;
    public static ColumnMappingDirectionType FormulaOutput;
}
[ExtensionAttribute]
public static class Z.BulkOperations.ColumnMappingExtensions : object {
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
}
public enum Z.BulkOperations.ColumnMappingFormulaType : Enum {
    public int value__;
    public static ColumnMappingFormulaType None;
    public static ColumnMappingFormulaType UpdateIfNotNull;
}
public class Z.BulkOperations.CustomProvider : object {
    internal ProviderType ;
    [CompilerGeneratedAttribute]
private Action`2<DbCommand, bool> ;
    [CompilerGeneratedAttribute]
private Func`3<DbCommand, int, int> ;
    [CompilerGeneratedAttribute]
private Action`2<DbCommand, int> ;
    public Action`2<DbCommand, bool> SetBindByName { get; public set; }
    public Func`3<DbCommand, int, int> ExecuteArray { get; public set; }
    public Action`2<DbCommand, int> SetArrayBindCount { get; public set; }
    public CustomProvider(ProviderType provider);
    [CompilerGeneratedAttribute]
public Action`2<DbCommand, bool> get_SetBindByName();
    [CompilerGeneratedAttribute]
public void set_SetBindByName(Action`2<DbCommand, bool> value);
    [CompilerGeneratedAttribute]
public Func`3<DbCommand, int, int> get_ExecuteArray();
    [CompilerGeneratedAttribute]
public void set_ExecuteArray(Func`3<DbCommand, int, int> value);
    [CompilerGeneratedAttribute]
public Action`2<DbCommand, int> get_SetArrayBindCount();
    [CompilerGeneratedAttribute]
public void set_SetArrayBindCount(Action`2<DbCommand, int> value);
}
public class Z.BulkOperations.DbBulkOperationConcurrencyException : Exception {
    public IEnumerable`1<object> Entries;
    internal object ;
    internal DbBulkOperationConcurrencyException(DataTable ,  , int , int );
}
public enum Z.BulkOperations.DebugLogType : Enum {
    public int value__;
    public static DebugLogType AccessorIterator_IsEmpty_IsTrue;
    public static DebugLogType AccessorIterator_IsEmpty_IsFalse;
    public static DebugLogType AccessorIterator_IsEnumerable_IsTrue;
    public static DebugLogType AccessorIterator_IsEnumerable_IsFalse;
    public static DebugLogType AccessorIterator_IsStreaming_IsTrue;
    public static DebugLogType AccessorIterator_IsStreaming_IsFalse;
    public static DebugLogType AccessorIterator_IsStreamingAllowed_IsTrue;
    public static DebugLogType AccessorIterator_IsStreamingAllowed_IsFalse;
    public static DebugLogType AccessorIterator_ResolveEnumerableToList_IsTrue;
    public static DebugLogType AccessorIterator_ResolveEnumerableToList_IsFalse;
    public static DebugLogType AccessorIterator_ResolveToMemory_IsTrue;
    public static DebugLogType AccessorIterator_ResolveToMemory_IsFalse;
    public static DebugLogType AutoMap_HasColumnMapping_IsTrue;
    public static DebugLogType AutoMap_HasColumnMapping_IsFalse;
    public static DebugLogType AutoMap_IsByIndexerName_IsTrue;
    public static DebugLogType AutoMap_IsByIndexerName_IsFalse;
    public static DebugLogType AutoMap_IsByName_IsTrue;
    public static DebugLogType AutoMap_IsByName_IsFalse;
    public static DebugLogType AutoMap_IsByOrdinal_IsTrue;
    public static DebugLogType AutoMap_IsByOrdinal_IsFalse;
    public static DebugLogType AutoMap_ResolveSetByIndexerName_IsTrue;
    public static DebugLogType AutoMap_ResolveSetByIndexerName_IsFalse;
    public static DebugLogType AutoMap_ResolveSetByName_IsTrue;
    public static DebugLogType AutoMap_ResolveSetByName_IsFalse;
    public static DebugLogType AutoMap_ResolveSetByOrdinal_IsTrue;
    public static DebugLogType AutoMap_ResolveSetByOrdinal_IsFalse;
    public static DebugLogType Batch_ValidateIsBatchDelayIntervalInRange_IsTrue;
    public static DebugLogType Batch_ValidateIsBatchDelayIntervalInRange_IsFalse;
    public static DebugLogType Batch_ValidateIsBatchSizeInRange_IsTrue;
    public static DebugLogType Batch_ValidateIsBatchSizeInRange_IsFalse;
    public static DebugLogType Batch_ValidateIsBatchTimeoutInRange_IsTrue;
    public static DebugLogType Batch_ValidateIsBatchTimeoutInRange_IsFalse;
    public static DebugLogType ColumnExpression_HasConcurrency_IsTrue;
    public static DebugLogType ColumnExpression_HasConcurrency_IsFalse;
    public static DebugLogType ColumnExpression_HasInput_IsTrue;
    public static DebugLogType ColumnExpression_HasInput_IsFalse;
    public static DebugLogType ColumnName_HasInput_IsTrue;
    public static DebugLogType ColumnName_HasInput_IsFalse;
    public static DebugLogType ColumnExpression_HasOutput_IsTrue;
    public static DebugLogType ColumnExpression_HasOutput_IsFalse;
    public static DebugLogType ColumnName_HasOutput_IsTrue;
    public static DebugLogType ColumnName_HasOutput_IsFalse;
    public static DebugLogType ColumnExpression_HasPrimaryKey_IsTrue;
    public static DebugLogType ColumnExpression_HasPrimaryKey_IsFalse;
    public static DebugLogType ColumnName_HasPrimaryKey_IsTrue;
    public static DebugLogType ColumnName_HasPrimaryKey_IsFalse;
    public static DebugLogType ColumnExpression_HasSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnExpression_HasSynchronizeDeleteKey_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetConcurrency_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetConcurrency_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetInput_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetInput_IsFalse;
    public static DebugLogType ColumnStagingTableFormulaExpression_IsTrue;
    public static DebugLogType ColumnStagingTableFormulaExpression_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetOutput_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetOutput_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetPrimaryKey_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetPrimaryKey_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetSynchronizeDeleteKey_IsFalse;
    public static DebugLogType ColumnMapping_HasColumn_IsTrue;
    public static DebugLogType ColumnMapping_HasColumn_IsFalse;
    public static DebugLogType ColumnMapping_IsStagingColumnRequired_IsTrue;
    public static DebugLogType ColumnMapping_IsStagingColumnRequired_IsFalse;
    public static DebugLogType ColumnMapping_ResolveAddStagingColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveAddStagingColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveCombineColumnMappings_IsTrue;
    public static DebugLogType ColumnMapping_ResolveCombineColumnMappings_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetInsertColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetInsertColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetMapping_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetMapping_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetOutputDeletedColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetOutputDeletedColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetOutputInsertedColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetOutputInsertedColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetStagingColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetStagingColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetStagingPKColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetStagingPKColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetUpdateColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetUpdateColumn_IsFalse;
    public static DebugLogType ColumnMappingDestination_HasExpression_IsTrue;
    public static DebugLogType ColumnMappingDestination_HasExpression_IsFalse;
    public static DebugLogType ColumnMappingDestination_HasName_IsTrue;
    public static DebugLogType ColumnMappingDestination_HasName_IsFalse;
    public static DebugLogType ColumnMappingDestination_HasOrdinal_IsTrue;
    public static DebugLogType ColumnMappingDestination_HasOrdinal_IsFalse;
    public static DebugLogType ColumnMappingDestination_IsCaseSensitive_IsTrue;
    public static DebugLogType ColumnMappingDestination_IsCaseSensitive_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveDestination_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveDestination_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveDestinationCaseSensitive_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromExpression_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromExpression_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromName_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromName_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromOrdinal_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromOrdinal_IsFalse;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllMappingSingle_IsTrue;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllSetted_IsTrue;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllSetted_IsFalse;
    public static DebugLogType ColumnMappingDestination_ValidateIsOrdinalInRange_IsTrue;
    public static DebugLogType ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse;
    public static DebugLogType Column_HasGuidIdentity_IsTrue;
    public static DebugLogType Column_HasGuidIdentity_IsFalse;
    public static DebugLogType Column_ResolveGuidIdentity_IsTrue;
    public static DebugLogType Column_ResolveGuidIdentity_IsFalse;
    public static DebugLogType ColumnMappingSource_HasExpression_IsTrue;
    public static DebugLogType ColumnMappingSource_HasExpression_IsFalse;
    public static DebugLogType ColumnMappingSource_HasName_IsTrue;
    public static DebugLogType ColumnMappingSource_HasName_IsFalse;
    public static DebugLogType ColumnMappingSource_HasOrdinal_IsTrue;
    public static DebugLogType ColumnMappingSource_HasOrdinal_IsFalse;
    public static DebugLogType ColumnMappingSource_HasSourceValue_IsTrue;
    public static DebugLogType ColumnMappingSource_HasSourceValue_IsFalse;
    public static DebugLogType ColumnMappingSource_HasSourceValueFactory_IsTrue;
    public static DebugLogType ColumnMappingSource_HasSourceValueFactory_IsFalse;
    public static DebugLogType ColumnMappingSource_IsOrdinalImplicitSupported_IsTrue;
    public static DebugLogType ColumnMappingSource_IsOrdinalImplicitSupported_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromExpression_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromExpression_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromName_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromName_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromOrdinal_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromOrdinal_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValue_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValue_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValueFactory_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValueFactory_IsFalse;
    public static DebugLogType ColumnMappingSource_ValidateIsAllSetted_IsTrue;
    public static DebugLogType ColumnMappingSource_ValidateIsAllSetted_IsFalse;
    public static DebugLogType ColumnMappingSource_ValidateIsOrdinalInRange_IsTrue;
    public static DebugLogType ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse;
    public static DebugLogType Connection_IsConnectionString_IsTrue;
    public static DebugLogType Connection_IsConnectionString_IsFalse;
    public static DebugLogType Connection_IsDynamicRequired_IsTrue;
    public static DebugLogType Connection_IsDynamicRequired_IsFalse;
    public static DebugLogType Connection_IsInstance_IsTrue;
    public static DebugLogType Connection_IsInstance_IsFalse;
    public static DebugLogType Connection_IsNameSetted_IsTrue;
    public static DebugLogType Connection_IsNameSetted_IsFalse;
    public static DebugLogType Connection_IsProviderNameSetted_IsTrue;
    public static DebugLogType Connection_IsProviderNameSetted_IsFalse;
    public static DebugLogType Connection_IsTypeSetted_IsTrue;
    public static DebugLogType Connection_IsTypeSetted_IsFalse;
    public static DebugLogType Connection_ResolveSetConnectionStringFromKey_IsTrue;
    public static DebugLogType Connection_ResolveSetConnectionStringFromKey_IsFalse;
    public static DebugLogType Connection_ResolveSetTypeByConnection_IsTrue;
    public static DebugLogType Connection_ResolveSetTypeByConnection_IsFalse;
    public static DebugLogType Connection_ResolveSetTypeFromAssembly_IsTrue;
    public static DebugLogType Connection_ResolveSetTypeFromAssembly_IsFalse;
    public static DebugLogType Connection_TryResolveSetTypeByProviderName_IsTrue;
    public static DebugLogType Connection_TryResolveSetTypeByProviderName_IsFalse;
    public static DebugLogType Connection_ValidateIsDynamic_IsTrue;
    public static DebugLogType Connection_ValidateIsDynamic_IsFalse;
    public static DebugLogType Connection_ValidateIsExclusive_IsTrue;
    public static DebugLogType Connection_ValidateIsExclusive_IsFalse;
    public static DebugLogType Connection_ValidateIsNameExists_IsTrue;
    public static DebugLogType Connection_ValidateIsNameExists_IsFalse;
    public static DebugLogType Connection_ValidateIsSetted_IsTrue;
    public static DebugLogType Connection_ValidateIsSetted_IsFalse;
    public static DebugLogType Connection_ValidateIsStateOpen_IsTrue;
    public static DebugLogType Connection_ValidateIsStateOpen_IsFalse;
    public static DebugLogType DataSource_ResolveToAccessorIterator_IsTrue;
    public static DebugLogType DataSource_ResolveToAccessorIterator_IsFalse;
    public static DebugLogType DataSource_ValidateIsSetted_IsTrue;
    public static DebugLogType DataSource_ValidateIsSetted_IsFalse;
    public static DebugLogType DestinationTableName_IsSetted_IsTrue;
    public static DebugLogType DestinationTableName_IsSetted_IsFalse;
    public static DebugLogType DestinationTableName_TryResolveFromDataSource_IsTrue;
    public static DebugLogType DestinationTableName_TryResolveFromDataSource_IsFalse;
    public static DebugLogType DestinationTableName_ValidateIsSetted_IsTrue;
    public static DebugLogType DestinationTableName_ValidateIsSetted_IsFalse;
    public static DebugLogType InformationSchemaTable_IsInMemory_IsTrue;
    public static DebugLogType InformationSchemaTable_IsInMemory_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveAddToMemory_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveAddToMemory_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveSetFromDatabase_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveSetFromDatabase_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveSetFromMemory_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveSetFromMemory_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveSetKey_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveSetKey_IsFalse;
    public static DebugLogType Internal_ResolveSetInternal_IsTrue;
    public static DebugLogType Internal_ResolveSetInternal_IsFalse;
    public static DebugLogType Notification_ValidateIsInRange_IsTrue;
    public static DebugLogType Notification_ValidateIsInRange_IsFalse;
    public static DebugLogType Parallel_IsEnabled_IsTrue;
    public static DebugLogType Parallel_IsEnabled_IsFalse;
    public static DebugLogType Parallel_ValidateIsBatchByTaskInRange_IsTrue;
    public static DebugLogType Parallel_ValidateIsBatchByTaskInRange_IsFalse;
    public static DebugLogType Parallel_ValidateIsMinBatchInRange_IsTrue;
    public static DebugLogType Parallel_ValidateIsMinBatchInRange_IsFalse;
    public static DebugLogType Parallel_ValidateIsMinRecordInRange_IsTrue;
    public static DebugLogType Parallel_ValidateIsMinRecordInRange_IsFalse;
    public static DebugLogType PrimaryKey_IsOperationRequired_IsTrue;
    public static DebugLogType PrimaryKey_IsOperationRequired_IsFalse;
    public static DebugLogType PrimaryKey_IsRequired_IsTrue;
    public static DebugLogType PrimaryKey_IsRequired_IsFalse;
    public static DebugLogType PrimaryKey_IsSetted_IsTrue;
    public static DebugLogType PrimaryKey_IsSetted_IsFalse;
    public static DebugLogType PrimaryKey_TryResolveSetFromDatabase_IsTrue;
    public static DebugLogType PrimaryKey_TryResolveSetFromDatabase_IsFalse;
    public static DebugLogType PrimaryKey_TryResolveSetFromIdentity_IsTrue;
    public static DebugLogType PrimaryKey_TryResolveSetFromIdentity_IsFalse;
    public static DebugLogType PrimaryKey_ValidateIsSetted_IsTrue;
    public static DebugLogType PrimaryKey_ValidateIsSetted_IsFalse;
    public static DebugLogType Provider_ResolveSetProvider_IsTrue;
    public static DebugLogType Provider_ResolveSetProvider_IsFalse;
    public static DebugLogType SqlBulkCopy_HasOptions_IsTrue;
    public static DebugLogType SqlBulkCopy_HasOptions_IsFalse;
    public static DebugLogType SqlBulkCopy_ValidateIsOptionsCompatible_IsTrue;
    public static DebugLogType SqlBulkCopy_ValidateIsOptionsCompatible_IsFalse;
    public static DebugLogType TemporaryTable_ValidateIsBatchByTableInRange_IsTrue;
    public static DebugLogType TemporaryTable_ValidateIsBatchByTableInRange_IsFalse;
    public static DebugLogType TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsTrue;
    public static DebugLogType TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsFalse;
    public static DebugLogType TemporaryTable_ValidateIsMinRecordInRange_IsTrue;
    public static DebugLogType TemporaryTable_ValidateIsMinRecordInRange_IsFalse;
    public static DebugLogType Transaction_IsTypeSetted_IsTrue;
    public static DebugLogType Transaction_IsTypeSetted_IsFalse;
    public static DebugLogType Transaction_ValidateIsExclusive_IsTrue;
    public static DebugLogType Transaction_ValidateIsExclusive_IsFalse;
    public static DebugLogType Transaction_ValidateIsValid_IsTrue;
    public static DebugLogType Transaction_ValidateIsValid_IsFalse;
    public static DebugLogType Transaction_ValidateTypeIsValid_IsTrue;
    public static DebugLogType Transaction_ValidateTypeIsValid_IsFalse;
    public static DebugLogType DbActionFactory_Update_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Update_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Update_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Update_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Update_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Update_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Update_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Update_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsTrue;
    public static DebugLogType DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsFalse;
    public static DebugLogType DbActionFactory_TemporaryTable_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_TemporaryTable_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_TemporaryTable_IsLimitEnabled_IsTrue;
    public static DebugLogType DbActionFactory_TemporaryTable_IsLimitEnabled_IsFalse;
    public static DebugLogType DbActionFactory_Synchronize_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Synchronize_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Parallel_ResolveSplitByParallel_IsTrue;
    public static DebugLogType DbActionFactory_Parallel_ResolveSplitByParallel_IsFalse;
    public static DebugLogType DbActionFactory_Parallel_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Parallel_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Parallel_IsEnabled_IsTrue;
    public static DebugLogType DbActionFactory_Parallel_IsEnabled_IsFalse;
    public static DebugLogType DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Merge_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Merge_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Merge_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Merge_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Insert_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Insert_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsTrue;
    public static DebugLogType DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsFalse;
    public static DebugLogType DbActionFactory_Insert_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Insert_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_Insert_IsBulkCopyTableDirect_IsTrue;
    public static DebugLogType DbActionFactory_Insert_IsBulkCopyTableDirect_IsFalse;
    public static DebugLogType DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Delete_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Delete_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Delete_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Delete_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Delete_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Delete_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_DeleteFromQuery_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_DeleteFromQuery_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsUpdate_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsUpdate_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsSynchronize_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsSynchronize_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsMerge_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsMerge_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsInsert_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsInsert_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsDelete_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsDelete_IsFalse;
    public static DebugLogType Action_IsDeleteFromQuery_IsTrue;
    public static DebugLogType Action_IsDeleteFromQuery_IsFalse;
    public static DebugLogType DbActionFactory_Merge_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Merge_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Insert_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Insert_Resolve_IsFalse;
    public static DebugLogType SqlCe_ResolveColumnIndexOrdinal_IsTrue;
    public static DebugLogType SqlCe_ResolveColumnIndexOrdinal_IsFalse;
    public static DebugLogType SqlCe_ResolveUniqueIndex_IsTrue;
    public static DebugLogType SqlCe_ResolveUniqueIndex_IsFalse;
    public static DebugLogType SqlCe_ValidateHasAllSettingSupported_IsTrue;
    public static DebugLogType SqlCe_ValidateHasAllSettingSupported_IsFalse;
    public static DebugLogType ColumnName_ResolveSetPrimaryKey_IsTrue;
    public static DebugLogType ColumnName_ResolveSetPrimaryKey_IsFalse;
    public static DebugLogType ColumnName_ResolveSetSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnName_ResolveSetSynchronizeDeleteKey_IsFalse;
    public static DebugLogType ColumnName_HasSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnName_HasSynchronizeDeleteKey_IsFalse;
}
public enum Z.BulkOperations.DefaultValueResolutionType : Enum {
    public int value__;
    public static DefaultValueResolutionType Inherit;
    public static DefaultValueResolutionType None;
    public static DefaultValueResolutionType Null;
}
public enum Z.BulkOperations.ErrorModeType : Enum {
    public int value__;
    public static ErrorModeType ThrowException;
    public static ErrorModeType IgnoreAndContinue;
    public static ErrorModeType RetrySingleAndContinue;
}
public static class Z.BulkOperations.ExceptionMessage : object {
    internal static string ;
    internal static string ;
    public static string GeneralException;
    public static string Error13;
    public static string AccessorIterator_ResolveEnumerableToList_IsFalse;
    public static string AccessorIterator_ResolveToMemory_IsFalse;
    public static string AccessorIterator_ResolveToMemory_IsFalse_UnsupportedDataSource;
    public static string AutoMap_ResolveSetByName_IsFalse;
    public static string AutoMap_ResolveSetByOrdinal_IsFalse;
    public static string AutoMap_ResolveSetByIndexerName_IsFalse;
    public static string AutoMap_ValidateIsSourceOrdinalSupported_IsFalse;
    public static string Batch_ValidateIsBatchDelayIntervalInRange_IsFalse;
    public static string Batch_ValidateIsBatchSizeInRange_IsFalse;
    public static string Batch_ValidateIsBatchTimeoutInRange_IsFalse;
    public static string ColumnExpression_ResolveSetConcurrency_IsFalse;
    public static string ColumnExpression_ResolveSetInput_IsFalse;
    public static string ColumnExpression_ResolveSetInputOutput_IsFalse;
    public static string ColumnExpression_ResolveSetOutput_IsFalse;
    public static string ColumnExpression_ResolveSetPrimaryKey_IsFalse;
    public static string ColumnExpression_ResolveSetSynchronizeDeleteKey_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInput_step1_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInput_step2_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateOutput_step2_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateOutput_step1_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInputOutput_step1_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInputOutput_step2_IsFalse;
    public static string ColumnMapping_ResolveCombineColumnMappings_IsFalse;
    public static string ColumnMapping_ResolveSetMapping_IsFalse;
    public static string ColumnMappingDestination_ResolveDestination_IsFalse;
    public static string ColumnMappingDestination_ResolveDestination_IsFalse_Detail;
    public static string ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse;
    public static string ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse_Detail;
    public static string ColumnMappingDestination_ResolveSetFromOrdinal_IsFalse;
    public static string ColumnMappingDestination_ResolveSetFromExpression_IsFalse;
    public static string ColumnMappingDestination_ResolveSetFromName_IsFalse;
    public static string Column_ResolveGuidIdentity_IsFalse;
    public static string ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse;
    public static string ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse_Detail;
    public static string ColumnMappingDestination_ValidateIsAllSetted_IsFalse;
    public static string ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse;
    public static string ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse_Detail;
    public static string ColumnMappingSource_ResolveSetAccessor_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromExpression_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromName_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromName_IsFalse_Detail;
    public static string ColumnMappingSource_ResolveSetFromOrdinal_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromValue_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromValueFactory_IsFalse;
    public static string ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse;
    public static string ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse_Detail;
    public static string ColumnMappingSource_ValidateIsAllSetted_IsFalse;
    public static string Connection_ResolveSetTypeByConnection_IsFalse;
    public static string Connection_ResolveSetTypeFromAssembly_IsFalse;
    public static string Connection_ValidateIsDynamic_IsFalse;
    public static string Connection_ValidateIsExclusive_IsFalse;
    public static string Connection_ValidateIsNameExists_IsFalse;
    public static string Connection_ValidateIsSetted_IsFalse;
    public static string Connection_ValidateIsStateOpen_IsFalse;
    public static string DataSource_ResolveToAccessorIterator_IsFalse;
    public static string DataSource_ValidateIsSetted_IsFalse;
    public static string DestinationTableName_ValidateIsSetted_IsFalse;
    public static string InformationSchemaTable_ResolveAddToMemory_IsFalse;
    public static string InformationSchemaTable_ResolveSetFromDatabase_IsFalse;
    public static string InformationSchemaTable_ResolveSetFromMemory_IsFalse;
    public static string InformationSchemaTable_ResolveSetKey_IsFalse;
    public static string Notification_ValidateIsInRange_IsFalse;
    public static string Parallel_ValidateIsBatchByTaskInRange_IsFalse;
    public static string Parallel_ValidateIsMinBatchInRange_IsFalse;
    public static string Parallel_ValidateIsMinRecordInRange_IsFalse;
    public static string PrimaryKey_ValidateIsSetted_IsFalse;
    public static string Provider_ResolveSetProvider_IsFalse;
    public static string TemporaryTable_ValidateIsBatchByTableInRange_IsFalse;
    public static string TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsFalse;
    public static string TemporaryTable_ValidateIsMinRecordInRange_IsFalse;
    public static string Transaction_ValidateIsExclusive_IsFalse;
    public static string Transaction_ValidateIsValid_IsFalse;
    public static string Transaction_ValidateTypeIsValid_IsFalse;
    public static string SqlBulkCopy_ValidateIsOptionsCompatible_IsFalse;
    public static string SqlServer_Error_8672;
    public static string SqlServer_Error_8672_Key_Table;
    public static string SqlServer_Error_8672_Table;
    public static string SqlServer_Error_4186;
    public static string SqlServer_Error_2627;
    public static string MySQL_Error_1062;
    public static string PostgreSQL_Error_23505;
    public static string SqlCe_ResolveColumnIndexOrdinal_IsFalse;
    public static string SqlCe_ResolveUniqueIndex_IsFalse;
    public static string SqlCe_ValidateHasAllSettingSupported_IsFalse;
    public static string RetryCount_Exceeded;
    public static string LicenseKeys_TrialExpired;
    public static string SqlServer_Error_Timeout_EntityFramework;
    public static string SqlServer_Error_Timeout_EntityFramework_DeleteFromQuery;
    public static string SqlServer_Error_Timeout_EntityFramework_UpdateFromQuery;
    public static string SqlServer_Error_Timeout;
    public static string DbBulkOperationConcurrencyException;
    public static string Validator_ValidateAllSourceMapped;
    public static string Validator_ValidateAllDestinationMapped;
    public static string Type_NotSupported;
    public static string NothingToMerge;
    public static string ResolveCommandOutputToTemporaryTable_ObsoleteTriggerResolution;
    public static string Error_0013_Bulk;
    public static string Error_0013_EFE;
    public static string Error_0013_Dapper;
    public static string Error_0013_Linq;
    public static string MySql_NoOutput;
    public static string MySql_Error29;
    private static ExceptionMessage();
    public static string PleaseReportTheIssue();
    public static string PleaseReportTheIssue2();
    public static string PleaseReportTheIssue3();
    public static string PleaseReportTheIssue4();
    public static string PleaseReportTheIssue5();
    public static string PleaseReportTheIssue6();
    public static string PleaseReportTheIssue7();
    public static string PleaseReportTheIssue8();
    public static string PleaseReportTheIssue9();
    public static string PleaseReportTheIssue10();
    public static string PleaseReportTheIssue11();
    public static string PleaseReportTheIssue12();
    public static string PleaseReportTheIssue13();
    public static string PleaseReportTheIssue14();
    public static string PleaseReportTheIssue15();
    public static string PleaseReportTheIssue16();
    public static string PleaseReportTheIssue17();
    public static string PleaseReportTheIssue18();
    public static string PleaseReportTheIssue19();
    public static string PleaseReportTheIssue20();
    public static string PleaseReportTheIssue21();
    public static string PleaseReportTheIssue22();
    public static string PleaseReportTheIssue23();
    public static string PleaseReportTheIssue24();
    public static string PleaseReportTheIssue25();
    public static string PleaseReportTheIssue26();
    public static string PleaseReportTheIssue27();
    public static string PleaseReportTheIssue28();
    public static string PleaseReportTheIssue29();
    public static string PleaseReportTheIssue30();
    public static string PleaseReportTheIssue31();
    public static string PleaseReportTheIssue32();
    public static string PleaseReportTheIssue33();
    public static string PleaseReportTheIssue34();
    public static string PleaseReportTheIssue35();
    public static string PleaseReportTheIssue36();
    public static string PleaseReportTheIssue37();
    public static string PleaseReportTheIssue38();
    public static string PleaseReportTheIssue39();
    public static string PleaseReportTheIssue40();
}
public interface Z.BulkOperations.IBulkValueConverter {
    public abstract virtual object ConvertFromProvider(Type destinationType, object value);
    public abstract virtual object ConvertToProvider(object value);
}
public class Z.BulkOperations.InformationSchemaManager : object {
    internal static ConcurrentDictionary`2<string, Table> ;
    private static InformationSchemaManager();
    public static void ClearInformationSchemaTable();
    public static Table GetTable(DbConnection connection, string tableName);
}
public static class Z.BulkOperations.Internal.Accessors.AccessorHelper : object {
    public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName);
}
[ExtensionAttribute]
public static class Z.BulkOperations.Internal.CoreExtensions : object {
    [ExtensionAttribute]
internal static bool (DbConnection this);
    [ExtensionAttribute]
internal static bool (DbConnection this);
    [ExtensionAttribute]
internal static int (DbException this);
    [ExtensionAttribute]
internal static bool (DbException this);
    [ExtensionAttribute]
internal static int (DbException this);
    [ExtensionAttribute]
internal static bool (DbException this);
    [ExtensionAttribute]
internal static bool (DbException this);
    [ExtensionAttribute]
public static DataTable GetSchemaTable_Core(IDataReader reader);
    [ExtensionAttribute]
public static DataTable GetSchemaTable_Core(DbDataReader reader);
    [ExtensionAttribute]
public static bool StartsWith_InvariantCulture_Core(string s, string text);
    [ExtensionAttribute]
public static string ToLower_InvariantCulture_Core(string s);
    [ExtensionAttribute]
public static int IndexOf_InvariantCulture_Core(string s, string text);
    [ExtensionAttribute]
public static IEnumerable`1<DataRow> AsEnumerableCore(DataTable this);
    [ExtensionAttribute]
internal static int (DbException this);
    [ExtensionAttribute]
public static bool IsOfTypeName(Type this, string name);
    [ExtensionAttribute]
public static ConstructorInfo GetConstructorCore(Type this, Type[] types);
    [ExtensionAttribute]
public static PropertyInfo[] GetPropertiesCore(Type this);
    [ExtensionAttribute]
public static bool IsClassCore(Type this);
    [ExtensionAttribute]
public static Assembly GetAssemblyCore(Type this);
    [ExtensionAttribute]
public static Object[] GetCustomAttributesCore(Type this, bool inherit);
    [ExtensionAttribute]
public static FieldInfo GetFieldCore(Type this, string propertyName);
    [ExtensionAttribute]
public static FieldInfo GetFieldCore(Type this, string propertyName, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type[] GetGenericArgumentsCore(Type this);
    [ExtensionAttribute]
public static MethodInfo GetMethodCore(Type this, string propertyName);
    [ExtensionAttribute]
public static MethodInfo GetMethodCore(Type this, string propertyName, Type[] types);
    [ExtensionAttribute]
public static MethodInfo GetMethodCore(Type this, string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    [ExtensionAttribute]
public static MethodInfo[] GetMethodsCore(Type this);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyCore(Type this, string propertyName);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyCore(Type this, string propertyName, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static bool IsEnumCore(Type this);
    [ExtensionAttribute]
public static bool IsGenericTypeCore(Type this);
}
[ExtensionAttribute]
public static class Z.BulkOperations.Internal.Data.SqlClient.Extension : object {
    [ExtensionAttribute]
public static DbParameter Clone(DbParameter this, DbCommand command);
}
public class Z.BulkOperations.Internal.Data.SqlClient.SqlCommandSet : object {
    public static int MaxParameters;
    public List`1<Tuple`2<DbCommand, Action`1<DataTable>>> Commands;
    public int CommandTimeout;
    public DbConnection Connection;
    public BulkOperation LogBulkOperation;
    public BulkOperation CheckSqlServerBulkOperations;
    public bool PreserveOrder;
    public DbTransaction Transaction;
    public void Execute(bool isForceOutputFromUnmodifiedRow);
    public void Add(DbCommand command);
    public void Add(DbCommand command, Action`1<DataTable> callbackAction);
    public List`1<Tuple`2<DbCommand, List`1<Action`1<DataTable>>>> Combine();
}
public class Z.BulkOperations.Internal.InformationSchema.Column : object {
    internal string ;
    public object DbType;
    public string EscapedName;
    public bool IsIdentity;
    public bool IsPrimaryKey;
    public string Name;
    public int Ordinal;
    public int Size;
    public string UdtTypeName;
    internal bool ;
    public string DataTypeName;
    internal string ;
    public int Precision;
    public int Scale;
    internal Type ;
    public string DefaultValueSql;
    internal bool ;
}
public class Z.BulkOperations.Internal.InformationSchema.Table : object {
    public List`1<Column> Columns;
    internal Column ;
    internal Dictionary`2<string, Column> ;
    internal Dictionary`2<string, Column> ;
    internal object ;
    internal Dictionary`2<string, Column> ;
    internal Dictionary`2<string, Column> ;
    internal List`1<> ;
    internal HashSet`1<string> ;
    internal HashSet`1<string> ;
    public string Name;
    internal  ;
    public List`1<Column> PrimaryKeys;
    internal string ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal object ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal Dictionary`2<string, Column>  { get; internal set; }
    internal Dictionary`2<string, Column>  { get; internal set; }
    internal HashSet`1<string>  { get; internal set; }
    internal bool  { get; internal set; }
    public bool IsSqlAzure { get; }
    internal Dictionary`2<string, Column> get_();
    internal void set_(Dictionary`2<string, Column> value);
    internal Dictionary`2<string, Column> get_();
    internal void set_(Dictionary`2<string, Column> value);
    internal HashSet`1<string> get_();
    internal void set_(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_IsSqlAzure();
    internal void ();
}
public abstract class Z.BulkOperations.Internal.Linq.Dynamic.DynamicClassZ : object {
    public virtual string ToString();
}
public class Z.BulkOperations.InternalOptions : object {
    internal bool ;
    internal bool ;
    internal StringBuilder ;
    public bool SkipInsertForInternalFeatures { get; public set; }
    public StringBuilder ToCopyTableName { get; public set; }
    public bool get_SkipInsertForInternalFeatures();
    public void set_SkipInsertForInternalFeatures(bool value);
    public StringBuilder get_ToCopyTableName();
    public void set_ToCopyTableName(StringBuilder value);
}
public enum Z.BulkOperations.InternalTransactionType : Enum {
    public int value__;
    public static InternalTransactionType None;
    public static InternalTransactionType ByOperation;
    public static InternalTransactionType ByBatch;
    public static InternalTransactionType ByThread;
}
public class Z.BulkOperations.LicenseManager : object {
    internal static ConcurrentBag`1<Tuple`2<string, string>> ;
    private static LicenseManager();
    public static bool ValidateLicense(ProviderType provider);
    public static bool ValidateLicense(String& errorMessage, ProviderType provider);
    public static bool ValidateLicense(String& errorMessage, ProviderType provider, bool isEntityFramework, bool isDapper, bool isLinqToSql);
    public static bool IsTrialMode();
    public static bool IsTrialExpired();
    public static bool IsLicenseAdded();
    public static void AddLicense(string licenseName, string licenseKey);
    [CompilerGeneratedAttribute]
internal static void (string , & , & );
}
public class Z.BulkOperations.LogEntry : object {
}
public enum Z.BulkOperations.LogEntryActionType : Enum {
    public int value__;
}
public enum Z.BulkOperations.ProviderType : Enum {
    public int value__;
    public static ProviderType None;
    public static ProviderType SqlServer;
    public static ProviderType SqlServerCompact;
    public static ProviderType MySql;
    public static ProviderType GlimpseSqlServer;
    public static ProviderType Oracle;
    public static ProviderType OracleManaged;
    public static ProviderType OracleDevArt;
    public static ProviderType SQLite;
    public static ProviderType HibernatingRhinosAppenderSqlServer;
    public static ProviderType HibernatingRhinosAppenderOracle;
    public static ProviderType HibernatingRhinosAppenderOracleManaged;
    public static ProviderType HibernatingRhinosAppenderOracleDevArt;
    public static ProviderType PostgreSql;
    public static ProviderType Firebird;
    public static ProviderType MySqlDevArt;
    public static ProviderType PostgreSqlDevArt;
    public static ProviderType SQLiteMicrosoft;
    public static ProviderType Effort;
    public static ProviderType EFCoreInMemory;
    public static ProviderType MiniProfilerSqlServer;
    public static ProviderType MySqlConnector;
    public static ProviderType SQLiteDevArt;
}
public enum Z.BulkOperations.ResolutionType : Enum {
    public int value__;
    public static ResolutionType Smart;
    public static ResolutionType TemporaryTable;
    public static ResolutionType WorkingTable;
}
public class Z.BulkOperations.ResultInfo : object {
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ResultInfo> ;
    public int RowsAffected { get; public set; }
    public int RowsAffectedInserted { get; public set; }
    public int RowsAffectedUpdated { get; public set; }
    public int RowsAffectedDeleted { get; public set; }
    public int RowsAffectedSoftDeleted { get; public set; }
    public Type Type { get; public set; }
    public Dictionary`2<string, ResultInfo> ResultByTableName { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RowsAffected();
    [CompilerGeneratedAttribute]
public void set_RowsAffected(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedInserted();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedInserted(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedUpdated();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedUpdated(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedDeleted();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedDeleted(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedSoftDeleted();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedSoftDeleted(int value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ResultInfo> get_ResultByTableName();
    [CompilerGeneratedAttribute]
public void set_ResultByTableName(Dictionary`2<string, ResultInfo> value);
}
public enum Z.BulkOperations.TemporaryTableNameGenerationType : Enum {
    public int value__;
    public static TemporaryTableNameGenerationType Guid;
    public static TemporaryTableNameGenerationType Sequence;
    public static TemporaryTableNameGenerationType HashGuid;
}
public class Z.Dapper.Plus.BaseDapperPlusActionSet : object {
    public List`1<DapperPlusAction> Actions;
    [CompilerGeneratedAttribute]
private IDbConnection ;
    [CompilerGeneratedAttribute]
private IDbTransaction ;
    [CompilerGeneratedAttribute]
private DapperPlusContext ;
    [CompilerGeneratedAttribute]
private Action`1<BulkOperation> ;
    [CompilerGeneratedAttribute]
private bool ;
    public IDbConnection Connection { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public DapperPlusContext Context { get; public set; }
    public Action`1<BulkOperation> BulkOptionsBuilder { get; public set; }
    internal bool  { get; internal set; }
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(IDbConnection value);
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(IDbTransaction value);
    [CompilerGeneratedAttribute]
public DapperPlusContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(DapperPlusContext value);
    [CompilerGeneratedAttribute]
public Action`1<BulkOperation> get_BulkOptionsBuilder();
    [CompilerGeneratedAttribute]
public void set_BulkOptionsBuilder(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
}
public enum Z.Dapper.Plus.CreateTableType : Enum {
    public int value__;
    public static CreateTableType Permanent;
    public static CreateTableType Temporary;
    public static CreateTableType GlobalTemporary;
}
public class Z.Dapper.Plus.DapperPlusAction : object {
    [CompilerGeneratedAttribute]
private Action ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private DapperPlusActionKind ;
    [CompilerGeneratedAttribute]
private IDbConnection ;
    [CompilerGeneratedAttribute]
private Action`1<BulkOperation> ;
    [CompilerGeneratedAttribute]
private IDbTransaction ;
    [CompilerGeneratedAttribute]
private DapperPlusEntityMapper ;
    [CompilerGeneratedAttribute]
private object ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private DapperPlusContext ;
    public Action ForEachAction { get; public set; }
    public string Key { get; public set; }
    public DapperPlusActionKind Kind { get; public set; }
    public IDbConnection Connection { get; public set; }
    public Action`1<BulkOperation> BulkOptionsBuilder { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public DapperPlusEntityMapper Config { get; public set; }
    public object DataSource { get; public set; }
    public bool IsExecuted { get; public set; }
    public DapperPlusContext Context { get; public set; }
    public DapperPlusAction(BaseDapperPlusActionSet action, string key, DapperPlusActionKind kind, object dataSource);
    public DapperPlusAction(DapperPlusActionKind kind, Action forEachAction);
    [CompilerGeneratedAttribute]
public Action get_ForEachAction();
    [CompilerGeneratedAttribute]
public void set_ForEachAction(Action value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public DapperPlusActionKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(DapperPlusActionKind value);
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(IDbConnection value);
    [CompilerGeneratedAttribute]
public Action`1<BulkOperation> get_BulkOptionsBuilder();
    [CompilerGeneratedAttribute]
public void set_BulkOptionsBuilder(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(IDbTransaction value);
    [CompilerGeneratedAttribute]
public DapperPlusEntityMapper get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(DapperPlusEntityMapper value);
    [CompilerGeneratedAttribute]
public object get_DataSource();
    [CompilerGeneratedAttribute]
public void set_DataSource(object value);
    [CompilerGeneratedAttribute]
public bool get_IsExecuted();
    [CompilerGeneratedAttribute]
public void set_IsExecuted(bool value);
    [CompilerGeneratedAttribute]
public DapperPlusContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(DapperPlusContext value);
    public void ApplyConfig(BulkOperation bulkOperation, DapperPlusEntityMapper config, DapperPlusActionKind actionKind, string mapperKey);
    public void AutoMap(BulkOperation bulkOperation, DapperPlusEntityMapper entityMapper);
    public bool IsSupportedType(Type type, bool isPostgreSQL);
    public void ApplyBulkOptions(BulkOperation bulkOperation);
    public void IdentityPropagation(BulkOperation bulkOperation, DapperPlusEntityMapper config);
    public void Execute();
    public void Map(BulkOperation bulkOperation, DapperPlusEntityMapper config, string mapperKey);
    public void Remap(BulkOperation bulkOperation, DapperPlusEntityMapper config);
}
public enum Z.Dapper.Plus.DapperPlusActionKind : Enum {
    public int value__;
    public static DapperPlusActionKind Insert;
    public static DapperPlusActionKind Update;
    public static DapperPlusActionKind Delete;
    public static DapperPlusActionKind Merge;
    public static DapperPlusActionKind Synchronize;
    public static DapperPlusActionKind ForEach;
}
public class Z.Dapper.Plus.DapperPlusActionSet`1 : BaseDapperPlusActionSet {
    [CompilerGeneratedAttribute]
private CancellationToken ;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TEntity> ;
    [CompilerGeneratedAttribute]
private TEntity ;
    public CancellationToken CancellationToken { get; public set; }
    public IEnumerable`1<TEntity> Current { get; public set; }
    public TEntity CurrentItem { get; public set; }
    public DapperPlusActionSet`1(DapperPlusContext context, IDbConnection connection, CancellationToken cancellationToken);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbConnection connection, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbConnection connection, string mapperKey, DapperPlusActionKind actionKind, TEntity item, Func`2[] selectors);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbConnection connection, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items, Func`2[] selectors);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbConnection connection, Action`1<BulkOperation> bulkOptionsBuilder);
    internal DapperPlusActionSet`1(DapperPlusContext , CancellationToken );
    internal DapperPlusActionSet`1(DapperPlusContext , string , DapperPlusActionKind , IEnumerable`1<TEntity> );
    internal DapperPlusActionSet`1(DapperPlusContext , string , DapperPlusActionKind , TEntity , Func`2[] );
    internal DapperPlusActionSet`1(DapperPlusContext , string , DapperPlusActionKind , IEnumerable`1<TEntity> , Func`2[] );
    internal DapperPlusActionSet`1(DapperPlusContext , Action`1<BulkOperation> );
    public DapperPlusActionSet`1(DapperPlusContext context, IDbTransaction transaction, CancellationToken cancellationToken);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbTransaction transaction, Action`1<BulkOperation> bulkOptionsBuilder);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbTransaction transaction, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbTransaction transaction, string mapperKey, DapperPlusActionKind actionKind, TEntity item, Func`2[] selectors);
    public DapperPlusActionSet`1(DapperPlusContext context, IDbTransaction transaction, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items, Func`2[] selectors);
    public DapperPlusActionSet`1(BaseDapperPlusActionSet oldActionSet);
    public DapperPlusActionSet`1(BaseDapperPlusActionSet oldActionSet, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items);
    public DapperPlusActionSet`1(BaseDapperPlusActionSet oldActionSet, string mapperKey, DapperPlusActionKind actionKind, TEntity item, Func`2[] selectors);
    public DapperPlusActionSet`1(BaseDapperPlusActionSet oldActionSet, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items, Func`2[] selectors);
    public sealed virtual void AddAction(string mapperKey, DapperPlusActionKind actionKind, Func`2[] selectors);
    public void AddAction(string mapperKey, DapperPlusActionKind actionKind, Func`2[] selectors);
    public void AddAction(string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> item);
    public void AddAction(string mapperKey, DapperPlusActionKind actionKind, TEntity item);
    public void AddAction(string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<object> childs);
    public void AddAction(DapperPlusActionKind actionKind, TEntity entity, Action`1<TEntity> forEachAction);
    public void AddAction(DapperPlusActionKind actionKind, IEnumerable`1<TEntity> entities, Action`1<TEntity> forEachAction);
    public sealed virtual void AddAction(DapperPlusActionKind actionKind, IEnumerable`1<T> entities, Action`1<T> forEachAction);
    public DapperPlusActionSet`1<TEntity> AlsoBulkDelete(Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkDelete(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkInsert(Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkInsert(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkMerge(Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkMerge(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkSynchronize(Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkSynchronize(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkUpdate(Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> AlsoBulkUpdate(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(T[] items);
    public DapperPlusActionSet`1<T> BulkDelete(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(T[] items);
    public DapperPlusActionSet`1<T> BulkInsert(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(T[] items);
    public DapperPlusActionSet`1<T> BulkMerge(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(T[] items);
    public DapperPlusActionSet`1<T> BulkSynchronize(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(T[] items);
    public DapperPlusActionSet`1<T> BulkUpdate(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public void SingleInsert(T item);
    public void SingleInsert(string mapperKey, T item);
    public void SingleDelete(T item);
    public void SingleDelete(string mapperKey, T item);
    public void SingleUpdate(T item);
    public void SingleUpdate(string mapperKey, T item);
    public void SingleSynchronize(T item);
    public void SingleSynchronize(string mapperKey, T item);
    public void SingleMerge(T item);
    public void SingleMerge(string mapperKey, T item);
    public void DapperPlusActionSetBuilder(DapperPlusContext context, IDbConnection connection, IDbTransaction transaction, CancellationToken cancellationToken);
    public void DapperPlusActionSetBuilder(DapperPlusContext context, IDbConnection connection, IDbTransaction transaction, Action`1<BulkOperation> bulkOptionsBuilder);
    public void DapperPlusActionSetBuilder(DapperPlusContext context, IDbConnection connection, IDbTransaction transaction, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items);
    public void DapperPlusActionSetBuilder(DapperPlusContext context, IDbConnection connection, IDbTransaction transaction, string mapperKey, DapperPlusActionKind actionKind, TEntity item, Func`2[] selectors);
    public void DapperPlusActionSetBuilder(DapperPlusContext context, IDbConnection connection, IDbTransaction transaction, string mapperKey, DapperPlusActionKind actionKind, IEnumerable`1<TEntity> items, Func`2[] selectors);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TEntity> get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(IEnumerable`1<TEntity> value);
    [CompilerGeneratedAttribute]
public TEntity get_CurrentItem();
    [CompilerGeneratedAttribute]
public void set_CurrentItem(TEntity value);
    public void SetCurrentOrCurrentItem(DapperPlusActionSet`1<T> actionSet, object childs);
    public sealed virtual DapperPlusActionSet`1<T2> CreateDapperAction(string mapperKey, DapperPlusActionKind actionKind, Func`2[] selectors);
    public DapperPlusActionSet`1<T2> CreateDapperAction(string mapperKey, DapperPlusActionKind actionKind, Func`2[] selectors);
    public void ImportConfiguration(BaseDapperPlusActionSet oldActionSet);
    public DapperPlusActionSet`1<TEntity> CreateDapperActionForEach(DapperPlusActionKind actionKind, Action`1<TEntity> forEachAction);
    public sealed virtual IDapperPlusActionSet`1<IEnumerable`1<T1>> CreateDapperAction(DapperPlusActionKind actionKind, Action`1<T1> forEachAction);
    public sealed virtual IDapperPlusActionSet`1<T1> CreateDapperActionOneToOne(DapperPlusActionKind actionKind, Action`1<T1> forEachAction);
    public DapperPlusActionSet`1<TEntity> Include(Action`1<DapperPlusActionSet`1<TEntity>> includeAction);
    public DapperPlusActionSet`1<T> ThenBulkDelete(Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkDelete(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkInsert(Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkInsert(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkMerge(Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkMerge(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkSynchronize(Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkSynchronize(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkUpdate(Func`2[] selectors);
    public DapperPlusActionSet`1<T> ThenBulkUpdate(string mapperKey, Func`2[] selectors);
    public DapperPlusActionSet`1<TEntity> ThenForEach(Action`1<TEntity> forEachAction);
    [CompilerGeneratedAttribute]
private List`1<object> (Func`2<, object> );
    [CompilerGeneratedAttribute]
private List`1<object> (Func`2<, object> );
    [CompilerGeneratedAttribute]
private List`1<object> (Func`2<TEntity, object> );
    [CompilerGeneratedAttribute]
private object (Func`2<TEntity, object> );
    [CompilerGeneratedAttribute]
private object (Func`2<TEntity, object> );
    [CompilerGeneratedAttribute]
private List`1<object> (Func`2<TEntity, object> );
    [CompilerGeneratedAttribute]
private object (Func`2<TEntity, object> );
    [CompilerGeneratedAttribute]
private List`1<object> (Func`2<TEntity, object> );
    [CompilerGeneratedAttribute]
private IEnumerable`1<> (Func`2<, > );
    [CompilerGeneratedAttribute]
private List`1<> (Func`2<, > );
    [CompilerGeneratedAttribute]
private IEnumerable`1<> (Func`2<TEntity, > );
    [CompilerGeneratedAttribute]
private  (Func`2<TEntity, > );
}
public class Z.Dapper.Plus.DapperPlusActionSetRoot`1 : BaseDapperPlusActionSet {
    internal DapperPlusActionSetRoot`1(DapperPlusContext , Action`1<BulkOperation> );
    public DapperPlusActionSetRoot`1(DapperPlusContext context, IDbConnection connection, Action`1<BulkOperation> bulkOptionsBuilder);
    public DapperPlusActionSetRoot`1(DapperPlusContext context, IDbTransaction transaction, Action`1<BulkOperation> bulkOptionsBuilder);
    public DapperPlusActionSet`1<T> BulkDelete(T[] items);
    public DapperPlusActionSet`1<T> BulkDelete(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(T[] items);
    public DapperPlusActionSet`1<T> BulkInsert(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(T[] items);
    public DapperPlusActionSet`1<T> BulkMerge(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(T[] items);
    public DapperPlusActionSet`1<T> BulkSynchronize(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(T[] items);
    public DapperPlusActionSet`1<T> BulkUpdate(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public void SingleDelete(T item);
    public void SingleDelete(string mapperKey, T item);
    public void SingleInsert(T item);
    public void SingleInsert(string mapperKey, T item);
    public void SingleMerge(T item);
    public void SingleMerge(string mapperKey, T item);
    public void SingleSynchronize(T item);
    public void SingleSynchronize(string mapperKey, T item);
    public void SingleUpdate(T item);
    public void SingleUpdate(string mapperKey, T item);
    public void DapperPlusActionSetBuilder(DapperPlusContext context, IDbConnection connection, IDbTransaction transaction, Action`1<BulkOperation> bulkOptionsBuilder);
}
public class Z.Dapper.Plus.DapperPlusColumnMapping : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private object ;
    [CompilerGeneratedAttribute]
private Func`2<object, object> ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private ColumnMappingAuditModeType ;
    [CompilerGeneratedAttribute]
private DefaultValueResolutionType ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private Action`1<ColumnMapping> ;
    public string SourceName { get; public set; }
    public object SourceValue { get; public set; }
    public Func`2<object, object> SourceValueFactory { get; public set; }
    public string DestinationName { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsOptional { get; public set; }
    public bool Input { get; public set; }
    public bool Output { get; public set; }
    public bool IgnoreOnMergeInsert { get; public set; }
    public bool IgnoreOnMergeUpdate { get; public set; }
    public bool CoalesceOnMergeUpdate { get; public set; }
    public bool CoalesceDestinationOnMergeUpdate { get; public set; }
    public ColumnMappingAuditModeType AuditMode { get; public set; }
    public DefaultValueResolutionType DefaultValueResolution { get; public set; }
    public string DefaultValueSql { get; public set; }
    public Action`1<ColumnMapping> ColumnMappingOptions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public object get_SourceValue();
    [CompilerGeneratedAttribute]
public void set_SourceValue(object value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_SourceValueFactory();
    [CompilerGeneratedAttribute]
public void set_SourceValueFactory(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public string get_DestinationName();
    [CompilerGeneratedAttribute]
public void set_DestinationName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
    [CompilerGeneratedAttribute]
public bool get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(bool value);
    [CompilerGeneratedAttribute]
public bool get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreOnMergeInsert();
    [CompilerGeneratedAttribute]
public void set_IgnoreOnMergeInsert(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreOnMergeUpdate();
    [CompilerGeneratedAttribute]
public void set_IgnoreOnMergeUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_CoalesceOnMergeUpdate();
    [CompilerGeneratedAttribute]
public void set_CoalesceOnMergeUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_CoalesceDestinationOnMergeUpdate();
    [CompilerGeneratedAttribute]
public void set_CoalesceDestinationOnMergeUpdate(bool value);
    [CompilerGeneratedAttribute]
public ColumnMappingAuditModeType get_AuditMode();
    [CompilerGeneratedAttribute]
public void set_AuditMode(ColumnMappingAuditModeType value);
    [CompilerGeneratedAttribute]
public DefaultValueResolutionType get_DefaultValueResolution();
    [CompilerGeneratedAttribute]
public void set_DefaultValueResolution(DefaultValueResolutionType value);
    [CompilerGeneratedAttribute]
public string get_DefaultValueSql();
    [CompilerGeneratedAttribute]
public void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
public Action`1<ColumnMapping> get_ColumnMappingOptions();
    [CompilerGeneratedAttribute]
public void set_ColumnMappingOptions(Action`1<ColumnMapping> value);
}
public class Z.Dapper.Plus.DapperPlusContext : object {
    [CompilerGeneratedAttribute]
private IDbConnection ;
    [CompilerGeneratedAttribute]
private IDbTransaction ;
    [CompilerGeneratedAttribute]
private bool ;
    private ConcurrentDictionary`2<string, DapperPlusEntityMapper> ;
    private Action`1<DapperPlusEntityMapper> ;
    [CompilerGeneratedAttribute]
private bool ;
    public IDbConnection Connection { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public bool ThrowErrorIfNotMapped { get; public set; }
    public bool IsMapperLocked { get; public set; }
    public ConcurrentDictionary`2<string, DapperPlusEntityMapper> MapperCache { get; public set; }
    public Action`1<DapperPlusEntityMapper> MapperFactory { get; public set; }
    public DapperPlusContext(IDbConnection connection);
    public DapperPlusContext(IDbConnection connection, IDbTransaction transaction);
    public DapperPlusActionSet`1<T> BulkDelete(T[] items);
    public DapperPlusActionSet`1<T> BulkDelete(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkDelete(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(T[] items);
    public DapperPlusActionSet`1<T> BulkInsert(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkInsert(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(T[] items);
    public DapperPlusActionSet`1<T> BulkMerge(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkMerge(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(T[] items);
    public DapperPlusActionSet`1<T> BulkSynchronize(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkSynchronize(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(T[] items);
    public DapperPlusActionSet`1<T> BulkUpdate(T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(IEnumerable`1<T> items, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, T[] items);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, T item, Func`2[] selectors);
    public DapperPlusActionSet`1<T> BulkUpdate(string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    public void SingleInsert(T item);
    public void SingleInsert(string mapperKey, T item);
    public void SingleSynchronize(T item);
    public void SingleSynchronize(string mapperKey, T item);
    public void SingleUpdate(T item);
    public void SingleUpdate(string mapperKey, T item);
    public void SingleMerge(T item);
    public void SingleMerge(string mapperKey, T item);
    public void SingleDelete(T item);
    public void SingleDelete(string mapperKey, T item);
    public DapperPlusActionSetRoot`1<object> UseBulkOptions(Action`1<BulkOperation> bulkOptionsBuilder);
    public DapperPlusActionSetRoot`1<object> UseBulkOptions(BulkOperationOptions options);
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(IDbConnection value);
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(IDbTransaction value);
    [CompilerGeneratedAttribute]
public bool get_ThrowErrorIfNotMapped();
    [CompilerGeneratedAttribute]
public void set_ThrowErrorIfNotMapped(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMapperLocked();
    [CompilerGeneratedAttribute]
public void set_IsMapperLocked(bool value);
    public ConcurrentDictionary`2<string, DapperPlusEntityMapper> get_MapperCache();
    public void set_MapperCache(ConcurrentDictionary`2<string, DapperPlusEntityMapper> value);
    public Action`1<DapperPlusEntityMapper> get_MapperFactory();
    public void set_MapperFactory(Action`1<DapperPlusEntityMapper> value);
    public DapperPlusEntityMapper`1<T> Entity(string mapperKey);
    public DapperPlusEntityMapper Entity(Type type, string mapperKey);
    public bool RemoveEntity(string mapperKey);
    public bool IsMappedEntity(string mapperKey);
    public bool IsMapped();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private DapperPlusEntityMapper (string );
}
public abstract class Z.Dapper.Plus.DapperPlusEntityMapper : object {
    internal object ;
    internal bool ;
    internal DapperPlusContext ;
    internal List`1<Action`2<DapperPlusActionKind, object>> ;
    internal List`1<Action`2<DapperPlusActionKind, object>> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<DefaultValueResolutionType> ;
    internal Nullable`1<bool> ;
    internal Dictionary`2<, DefaultValueResolutionType> ;
    internal Nullable`1<bool> ;
    internal Dictionary`2<, string> ;
    internal Nullable`1<int> ;
    internal Nullable`1<int> ;
    internal Nullable`1<int> ;
    internal DapperPlusEntityMapper ;
    internal DapperPlusEntityMapper ;
    internal DapperPlusEntityMapper ;
    internal DapperPlusEntityMapper ;
    internal bool ;
    internal DapperPlusEntityMapper ;
    internal string ;
    internal Nullable`1<AuditModeType> ;
    internal Nullable`1<bool> ;
    internal Dictionary`2<, ColumnMappingAuditModeType> ;
    internal HashSet`1<string> ;
    internal List`1<DapperPlusColumnMapping> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal Nullable`1<bool> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal Nullable`1<int> ;
    internal bool ;
    internal Nullable`1<bool> ;
    internal Nullable`1<int> ;
    internal Nullable`1<int> ;
    internal Nullable`1<int> ;
    internal string ;
    internal Nullable`1<int> ;
    internal Nullable`1<int> ;
    protected DapperPlusEntityMapper(DapperPlusContext context);
    public void RaiseBeforeAction(DapperPlusActionKind actionKind, object dataSource);
    public void RaiseAfterAction(DapperPlusActionKind actionKind, object datasource);
    internal virtual void (BulkOperation );
    internal virtual bool (BulkOperation );
    internal virtual BulkOperation ();
    public bool IsMapNeeded();
    public DapperPlusEntityMapper BeforeAction(Action`2<DapperPlusActionKind, object> action);
    public DapperPlusEntityMapper AfterAction(Action`2<DapperPlusActionKind, object> action);
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string , bool );
    internal virtual DapperPlusEntityMapper (string , string , bool );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (object , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string , string );
    public Nullable`1<bool> IsUseBulkOptionsModified();
    public void IsUseBulkOptionsModified(bool value);
    public Nullable`1<DefaultValueResolutionType> DefaultValueResolution();
    internal abstract virtual Dictionary`2<, DefaultValueResolutionType> ();
    public Nullable`1<bool> IsDefaultValueResolutionModified();
    public void IsDefaultValueResolutionModified(bool value);
    internal abstract virtual Dictionary`2<, string> ();
    public Nullable`1<bool> IsDefaultValueSqlModified();
    public void IsDefaultValueSqlModified(bool value);
    public Nullable`1<AuditModeType> AuditMode();
    internal abstract virtual Dictionary`2<, ColumnMappingAuditModeType> ();
    public Nullable`1<bool> IsAuditModeModified();
    public void IsAuditModeModified(bool value);
    public Nullable`1<int> BatchDelayInterval();
    public Nullable`1<int> BatchSize();
    public Nullable`1<int> BatchTimeout();
    public DapperPlusEntityMapper BatchDelayInterval(int batchDelayInterval);
    public DapperPlusEntityMapper BatchSize(int batchSize);
    public DapperPlusEntityMapper BatchTimeout(int batchTimeout);
    public string Table();
    public DapperPlusEntityMapper Table(string name);
    public string GetTable();
    public Nullable`1<bool> IsAutoMapModified();
    public Nullable`1<bool> IsIdentityModified();
    public Nullable`1<bool> IsIgnoreModified();
    public Nullable`1<bool> IsKeyModified();
    public Nullable`1<bool> IsMapModified();
    public Nullable`1<bool> IsForeignKeyModified();
    public Nullable`1<bool> IsOutputModified();
    public Nullable`1<bool> IsIgnoreOnMergeInsertModified();
    public Nullable`1<bool> IsIgnoreOnMergeUpdateModified();
    public Nullable`1<bool> IsCoalesceOnMergeUpdateModified();
    public Nullable`1<bool> IsCoalesceDestinationOnMergeUpdateModified();
    public Nullable`1<bool> ForceRemap();
    public void IsAutoMapModified(bool value);
    public void IsIdentityModified(bool value);
    public void IsIgnoreModified(bool value);
    public void IsKeyModified(bool value);
    public void IsForeignKeyModified(bool value);
    public void IsMapModified(bool value);
    public void IsOutputModified(bool value);
    public void IsIgnoreOnMergeInsertModified(bool value);
    public void IsIgnoreOnMergeUpdateModified(bool value);
    public void IsCoalesceOnMergeUpdateModified(bool value);
    public void IsCoalesceDestinationOnMergeUpdateModified(bool value);
    internal abstract virtual bool ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    internal abstract virtual List`1<> ();
    public DapperPlusEntityMapper Identity(string name);
    public DapperPlusEntityMapper Identity(string sourceName, string destinationName);
    public DapperPlusEntityMapper Identity(string name, bool autoPropagateIdentity);
    public DapperPlusEntityMapper Identity(string sourceName, string destinationName, bool autoPropagateIdentity);
    public DapperPlusEntityMapper Ignore(string name);
    public DapperPlusEntityMapper Ignore(string sourceName, string destinationName);
    public DapperPlusEntityMapper IgnoreOnMergeInsert(string name);
    public DapperPlusEntityMapper IgnoreOnMergeInsert(string sourceName, string destinationName);
    public DapperPlusEntityMapper IgnoreOnMergeUpdate(string name);
    public DapperPlusEntityMapper IgnoreOnMergeUpdate(string sourceName, string destinationName);
    public DapperPlusEntityMapper CoalesceOnMergeUpdate(string name);
    public DapperPlusEntityMapper CoalesceOnMergeUpdate(string sourceName, string destinationName);
    public DapperPlusEntityMapper CoalesceDestinationOnMergeUpdate(string name);
    public DapperPlusEntityMapper CoalesceDestinationOnMergeUpdate(string sourceName, string destinationName);
    public DapperPlusEntityMapper Key(string name);
    public DapperPlusEntityMapper Key(string sourceName, string destinationName);
    public DapperPlusEntityMapper Map(string name);
    public DapperPlusEntityMapper Map(string sourceName, string destinationName);
    public DapperPlusEntityMapper MapValue(object value, string destinationName);
    public DapperPlusEntityMapper Output(string name);
    public DapperPlusEntityMapper Output(string sourceName, string destinationName);
    public DapperPlusEntityMapper ForeignKey(string sourceName, string destinationName);
    public Nullable`1<int> SqlBulkCopyOptions();
    public DapperPlusEntityMapper SqlBulkCopyOptions(int sqlBulkCopyOptions);
    public DapperPlusEntityMapper InsertIfNotExists(bool value);
    public DapperPlusEntityMapper KeepIdentity(bool value);
    public Nullable`1<int> TemporaryTableBatchByTable();
    public Nullable`1<int> TemporaryTableInsertBatchSize();
    public Nullable`1<int> TemporaryTableMinRecord();
    public string TemporaryTableSchemaName();
    public DapperPlusEntityMapper TemporaryTableBatchByTable(int temporaryTableBatchByTable);
    public DapperPlusEntityMapper TemporaryTableInsertBatchSize(int temporaryTableInsertBatchSize);
    public DapperPlusEntityMapper TemporaryTableMinRecord(int temporaryTableMinRecord);
    public DapperPlusEntityMapper TemporaryTableSchemaName(string temporaryTableSchemaName);
    public Nullable`1<int> RetryCount();
    public Nullable`1<int> RetryInterval();
    public DapperPlusEntityMapper RetryCount(int retryCount);
    public DapperPlusEntityMapper RetryInterval(int retryInterval);
}
public class Z.Dapper.Plus.DapperPlusEntityMapper`1 : DapperPlusEntityMapper {
    [CompilerGeneratedAttribute]
private Action`1<BulkOperation`1<T>> ;
    internal Dictionary`2<DapperPlusExpressionMapper`1<T>, DefaultValueResolutionType> ;
    internal Dictionary`2<DapperPlusExpressionMapper`1<T>, string> ;
    internal Dictionary`2<DapperPlusExpressionMapper`1<T>, ColumnMappingAuditModeType> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal List`1<DapperPlusExpressionMapper`1<T>> ;
    internal Action`1<BulkOperation`1<T>>  { get; internal set; }
    public DapperPlusEntityMapper`1(DapperPlusContext context);
    public DapperPlusEntityMapper`1(DapperPlusContext context, DapperPlusEntityMapper`1<T> master);
    internal virtual void (BulkOperation );
    internal virtual bool (BulkOperation );
    internal virtual BulkOperation ();
    [CompilerGeneratedAttribute]
internal Action`1<BulkOperation`1<T>> get_();
    [CompilerGeneratedAttribute]
internal void set_(Action`1<BulkOperation`1<T>> value);
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string , bool );
    internal virtual DapperPlusEntityMapper (string , string , bool );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (object , string );
    internal virtual DapperPlusEntityMapper (string );
    internal virtual DapperPlusEntityMapper (string , string );
    internal virtual DapperPlusEntityMapper (string , string );
    public DapperPlusEntityMapper`1<T> UseBulkOptions(Action`1<BulkOperation`1<T>> bulkOperation);
    public DapperPlusEntityMapper`1<T> UseBulkOptions(BulkOperationOptions`1<T> options);
    public DapperPlusEntityMapper`1<T> DefaultValueResolution(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> DefaultValueResolution(DefaultValueResolutionType defaultValueResolution);
    public DapperPlusEntityMapper`1<T> DefaultValueResolution(Expression`1<Func`2<T, object>> selectors, DefaultValueResolutionType defaultValueResolution);
    internal virtual Dictionary`2<, DefaultValueResolutionType> ();
    public DapperPlusEntityMapper`1<T> DefaultValueSql(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> DefaultValueSql(Expression`1<Func`2<T, object>> selectors, string defaultValueSql);
    internal virtual Dictionary`2<, string> ();
    public DapperPlusEntityMapper`1<T> AuditMode(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> AuditMode(AuditModeType auditMode);
    public DapperPlusEntityMapper`1<T> AuditMode(Expression`1<Func`2<T, object>> selectors, ColumnMappingAuditModeType columnMappingAuditMode);
    internal virtual Dictionary`2<, ColumnMappingAuditModeType> ();
    public DapperPlusEntityMapper`1<T> BatchDelayInterval(int batchDelayInterval);
    public DapperPlusEntityMapper`1<T> BatchSize(int batchSize);
    public DapperPlusEntityMapper`1<T> BatchTimeout(int batchTimeout);
    public DapperPlusEntityMapper`1<T> Delete(Action`1<DapperPlusEntityMapper`1<T>> actionConfigurationFactory);
    public DapperPlusEntityMapper`1<T> Insert(Action`1<DapperPlusEntityMapper`1<T>> actionConfigurationFactory);
    public DapperPlusEntityMapper`1<T> Merge(Action`1<DapperPlusEntityMapper`1<T>> actionConfigurationFactory);
    public DapperPlusEntityMapper`1<T> Update(Action`1<DapperPlusEntityMapper`1<T>> actionConfigurationFactory);
    public DapperPlusEntityMapper`1<T> Table(string name);
    public DapperPlusEntityMapper`1<T> BeforeAction(Action`2<DapperPlusActionKind, T> action);
    public DapperPlusEntityMapper`1<T> AfterAction(Action`2<DapperPlusActionKind, T> action);
    public DapperPlusEntityMapper`1<T> AutoMap();
    public DapperPlusEntityMapper`1<T> Identity(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> Identity(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> Identity(Expression`1<Func`2<T, object>> selector, string destinationName);
    public DapperPlusEntityMapper`1<T> Identity(string name);
    public DapperPlusEntityMapper`1<T> Identity(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> Identity(Expression`1<Func`2<T, object>> selectors, bool autoPropagateIdentity);
    public DapperPlusEntityMapper`1<T> Identity(Expression`1<Func`2<T, object>> selector, string destinationName, bool autoPropagateIdentity);
    public DapperPlusEntityMapper`1<T> Identity(string name, bool autoPropagateIdentity);
    public DapperPlusEntityMapper`1<T> Identity(string sourceName, string destinationName, bool autoPropagateIdentity);
    public DapperPlusEntityMapper`1<T> Ignore(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> Ignore(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> Ignore(string name);
    public DapperPlusEntityMapper`1<T> Ignore(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeInsert(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeInsert(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeInsert(string name);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeInsert(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeUpdate(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeUpdate(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeUpdate(string name);
    public DapperPlusEntityMapper`1<T> IgnoreOnMergeUpdate(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> CoalesceOnMergeUpdate(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> CoalesceOnMergeUpdate(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> CoalesceOnMergeUpdate(string name);
    public DapperPlusEntityMapper`1<T> CoalesceOnMergeUpdate(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> CoalesceDestinationOnMergeUpdate(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> CoalesceDestinationOnMergeUpdate(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> CoalesceDestinationOnMergeUpdate(string name);
    public DapperPlusEntityMapper`1<T> CoalesceDestinationOnMergeUpdate(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> Key(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> Key(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> Key(Expression`1<Func`2<T, object>> selector, string destinationName);
    public DapperPlusEntityMapper`1<T> Key(string name);
    public DapperPlusEntityMapper`1<T> Key(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> Map(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> Map(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> Map(Expression`1<Func`2<T, object>> selector, string destinationName);
    public DapperPlusEntityMapper`1<T> Map(string name);
    public DapperPlusEntityMapper`1<T> Map(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> MapValue(object value, string destinationName);
    public DapperPlusEntityMapper`1<T> MapWithOptions(Expression`1<Func`2<T, object>> selectors, Action`1<ColumnMapping> columnMappingOptions);
    public DapperPlusEntityMapper`1<T> MapWithOptions(Expression`1<Func`2<T, object>> selector, string destinationName, Action`1<ColumnMapping> columnMappingOptions);
    public DapperPlusEntityMapper`1<T> MapWithOptions(string sourceName, Action`1<ColumnMapping> columnMappingOptions);
    public DapperPlusEntityMapper`1<T> MapWithOptions(string sourceName, string destinationName, Action`1<ColumnMapping> columnMappingOptions);
    public DapperPlusEntityMapper`1<T> Output(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> Output(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> Output(Expression`1<Func`2<T, object>> selector, string destinationName);
    public DapperPlusEntityMapper`1<T> Output(string name);
    public DapperPlusEntityMapper`1<T> Output(string sourceName, string destinationName);
    internal virtual bool ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal virtual List`1<> ();
    internal List`1<> (List`1<DapperPlusExpressionMapper`1<T>> );
    public DapperPlusEntityMapper`1<T> ForeignKey(DapperPlusEntityMapper`1<T> copyFromConfiguration);
    public DapperPlusEntityMapper`1<T> ForeignKey(Expression`1<Func`2<T, object>> selectors);
    public DapperPlusEntityMapper`1<T> ForeignKey(Expression`1<Func`2<T, object>> selector, string destinationName);
    public DapperPlusEntityMapper`1<T> ForeignKey(string sourceName, string destinationName);
    public DapperPlusEntityMapper`1<T> SqlBulkCopyOptions(int sqlBulkCopyOptions);
    public DapperPlusEntityMapper`1<T> InsertIfNotExists(bool value);
    public DapperPlusEntityMapper`1<T> KeepIdentity(bool value);
    public DapperPlusEntityMapper`1<T> TemporaryTableBatchByTable(int temporaryTableBatchByTable);
    public DapperPlusEntityMapper`1<T> TemporaryTableInsertBatchSize(int temporaryTableInsertBatchSize);
    public DapperPlusEntityMapper`1<T> TemporaryTableMinRecord(int temporaryTableMinRecord);
    public DapperPlusEntityMapper`1<T> TemporaryTableSchemaName(string temporaryTableSchemaName);
    public DapperPlusEntityMapper`1<T> RetryCount(int retryCount);
    public DapperPlusEntityMapper`1<T> RetryInterval(int retryInterval);
}
public class Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1 : object {
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<T, object>> ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private DestinationType ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private Action`1<ColumnMapping> ;
    public Expression`1<Func`2<T, object>> SelectorFactory { get; public set; }
    public string SourceName { get; public set; }
    public string DestinationName { get; public set; }
    public DestinationType DestinationType { get; public set; }
    public bool AutoPropagateIdentity { get; public set; }
    public Action`1<ColumnMapping> ColumnMappingOptions { get; public set; }
    public DapperPlusExpressionMapper`1(Expression`1<Func`2<T, object>> selectorFactory, DestinationType destinationType);
    public DapperPlusExpressionMapper`1(Expression`1<Func`2<T, object>> selectorFactory, string destinationName, DestinationType destinationType);
    public DapperPlusExpressionMapper`1(string sourceName, string destinationName, DestinationType destinationType);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, object>> get_SelectorFactory();
    [CompilerGeneratedAttribute]
public void set_SelectorFactory(Expression`1<Func`2<T, object>> value);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationName();
    [CompilerGeneratedAttribute]
public void set_DestinationName(string value);
    [CompilerGeneratedAttribute]
public DestinationType get_DestinationType();
    [CompilerGeneratedAttribute]
public void set_DestinationType(DestinationType value);
    [CompilerGeneratedAttribute]
public bool get_AutoPropagateIdentity();
    [CompilerGeneratedAttribute]
public void set_AutoPropagateIdentity(bool value);
    [CompilerGeneratedAttribute]
public Action`1<ColumnMapping> get_ColumnMappingOptions();
    [CompilerGeneratedAttribute]
public void set_ColumnMappingOptions(Action`1<ColumnMapping> value);
}
[ExtensionAttribute]
public static class Z.Dapper.Plus.DapperPlusExtensions : object {
    [ExtensionAttribute]
public static void DropTable(IDbConnection connection, string tableName);
    internal static string CreateTable(IDbTransaction transaction, IEnumerable`1<T> items, string tableName, CreateTableType createTableType);
    [ExtensionAttribute]
public static string CreateTable(IDbTransaction transaction, string tableName);
    [ExtensionAttribute]
public static string CreateTable(IDbTransaction transaction, IEnumerable`1<T> items, string tableName);
    [ExtensionAttribute]
public static string CreateTable(IDbTransaction transaction, CreateTableType createTableType);
    [ExtensionAttribute]
public static string CreateTable(IDbTransaction transaction, IEnumerable`1<T> items, CreateTableType createTableType);
    [ExtensionAttribute]
public static void DropTable(IDbTransaction transaction, string tableName);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkDelete(IDapperPlusActionSet`1<T> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkDelete(IDapperPlusActionSet`1<T> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkDelete(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkDelete(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkInsert(IDapperPlusActionSet`1<T> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkInsert(IDapperPlusActionSet`1<T> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkInsert(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkInsert(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkMerge(IDapperPlusActionSet`1<T> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkMerge(IDapperPlusActionSet`1<T> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkMerge(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkMerge(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkSynchronize(IDapperPlusActionSet`1<T> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkSynchronize(IDapperPlusActionSet`1<T> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkSynchronize(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkSynchronize(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkUpdate(IDapperPlusActionSet`1<T> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> AlsoBulkUpdate(IDapperPlusActionSet`1<T> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkUpdate(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<T>> AlsoBulkUpdate(IDapperPlusActionSet`1<IEnumerable`1<T>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> ThenBulkDelete(IDapperPlusActionSet`1<TEntity> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> ThenBulkDelete(IDapperPlusActionSet`1<TEntity> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> ThenBulkDelete(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> ThenBulkDelete(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkInsert(IDapperPlusActionSet`1<TEntity> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkInsert(IDapperPlusActionSet`1<TEntity> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkInsert(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkInsert(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkMerge(IDapperPlusActionSet`1<TEntity> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkMerge(IDapperPlusActionSet`1<TEntity> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkMerge(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkMerge(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkSynchronize(IDapperPlusActionSet`1<TEntity> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkSynchronize(IDapperPlusActionSet`1<TEntity> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkSynchronize(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkSynchronize(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkUpdate(IDapperPlusActionSet`1<TEntity> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkUpdate(IDapperPlusActionSet`1<TEntity> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkUpdate(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<T> ThenBulkUpdate(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, string mapperKey, Func`2[] selectors);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<TEntity> ThenForEach(IDapperPlusActionSet`1<TEntity> actionSet, Action`1<TEntity> forEachAction);
    [ExtensionAttribute]
public static IDapperPlusActionSet`1<IEnumerable`1<TEntity>> ThenForEach(IDapperPlusActionSet`1<IEnumerable`1<TEntity>> actionSet, Action`1<TEntity> forEachAction);
    [ExtensionAttribute]
public static void SingleUpdate(IDbConnection connection, T item);
    [ExtensionAttribute]
public static void SingleUpdate(IDbConnection connection, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbConnection connection, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbConnection connection, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbConnection connection, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbConnection connection, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbConnection connection, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbConnection connection, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleDelete(IDbConnection connection, T item);
    [ExtensionAttribute]
public static void SingleDelete(IDbConnection connection, string mapperKey, T item);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static void SingleDelete(IDbConnection connection, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleDelete(IDbConnection connection, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbConnection connection, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbConnection connection, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleUpdate(IDbConnection connection, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleUpdate(IDbConnection connection, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbConnection connection, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbConnection connection, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbConnection connection, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbConnection connection, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbConnection connection, DapperPlusContext context, Action`1<BulkOperation> bulkOptionsBuilder);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbConnection connection, DapperPlusContext context, BulkOperationOptions options);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbConnection connection, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbConnection connection, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbConnection connection, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbConnection connection, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbConnection connection, Action`1<BulkOperation> bulkOptionsBuilder);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbConnection connection, BulkOperationOptions options);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbConnection connection, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    internal static string CreateTable(IDbConnection connection, IEnumerable`1<T> items, string tableName, CreateTableType createTableType);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, string tableName);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, IEnumerable`1<T> items, string tableName);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, CreateTableType createTableType);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, IEnumerable`1<T> items, CreateTableType createTableType);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, Type type);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, Type type, string tableName);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, Type type, CreateTableType createTableType);
    [ExtensionAttribute]
public static string CreateTable(IDbConnection connection, Type type, string tableName, CreateTableType createTableType);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static void SingleDelete(IDbTransaction transaction, T item);
    [ExtensionAttribute]
public static void SingleDelete(IDbTransaction transaction, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbTransaction transaction, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbTransaction transaction, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleUpdate(IDbTransaction transaction, T item);
    [ExtensionAttribute]
public static void SingleUpdate(IDbTransaction transaction, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbTransaction transaction, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbTransaction transaction, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbTransaction transaction, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbTransaction transaction, string mapperKey, T item);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbTransaction transaction, Action`1<BulkOperation> bulkOptionsBuilder);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbTransaction transaction, BulkOperationOptions options);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkDelete(IDbTransaction transaction, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkInsert(IDbTransaction transaction, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkMerge(IDbTransaction transaction, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkSynchronize(IDbTransaction transaction, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, DapperPlusContext context, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, DapperPlusContext context, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, DapperPlusContext context, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T[] items);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item, Func`2[] selectors);
    [ExtensionAttribute]
public static DapperPlusActionSet`1<T> BulkUpdate(IDbTransaction transaction, DapperPlusContext context, string mapperKey, IEnumerable`1<T> items, Func`2[] selectors);
    [ExtensionAttribute]
public static void SingleDelete(IDbTransaction transaction, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleDelete(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbTransaction transaction, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleInsert(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleUpdate(IDbTransaction transaction, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleUpdate(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbTransaction transaction, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbTransaction transaction, DapperPlusContext context, T item);
    [ExtensionAttribute]
public static void SingleMerge(IDbTransaction transaction, DapperPlusContext context, string mapperKey, T item);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbTransaction transaction, DapperPlusContext context, Action`1<BulkOperation> bulkOptionsBuilder);
    [ExtensionAttribute]
public static DapperPlusActionSetRoot`1<object> UseBulkOptions(IDbTransaction transaction, DapperPlusContext context, BulkOperationOptions options);
}
public class Z.Dapper.Plus.DapperPlusManager : object {
    [CompilerGeneratedAttribute]
private static HashSet`1<Type> ;
    [CompilerGeneratedAttribute]
private static HashSet`1<string> ;
    [CompilerGeneratedAttribute]
private static DapperPlusContext ;
    internal static HashSet`1<Type>  { get; internal set; }
    internal static HashSet`1<string>  { get; internal set; }
    public static DapperPlusContext DefaultContext { get; public set; }
    public static bool ThrowErrorIfNotMapped { get; public set; }
    public static bool IsMapperLocked { get; public set; }
    public static ConcurrentDictionary`2<string, DapperPlusEntityMapper> MapperCache { get; public set; }
    public static Action`1<DapperPlusEntityMapper> MapperFactory { get; public set; }
    private static DapperPlusManager();
    [CompilerGeneratedAttribute]
internal static HashSet`1<Type> get_();
    [CompilerGeneratedAttribute]
internal static void set_(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal static HashSet`1<string> get_();
    [CompilerGeneratedAttribute]
internal static void set_(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public static DapperPlusContext get_DefaultContext();
    [CompilerGeneratedAttribute]
public static void set_DefaultContext(DapperPlusContext value);
    public static bool get_ThrowErrorIfNotMapped();
    public static void set_ThrowErrorIfNotMapped(bool value);
    public static bool get_IsMapperLocked();
    public static void set_IsMapperLocked(bool value);
    public static ConcurrentDictionary`2<string, DapperPlusEntityMapper> get_MapperCache();
    public static void set_MapperCache(ConcurrentDictionary`2<string, DapperPlusEntityMapper> value);
    public static Action`1<DapperPlusEntityMapper> get_MapperFactory();
    public static void set_MapperFactory(Action`1<DapperPlusEntityMapper> value);
    public static DapperPlusEntityMapper`1<T> Entity(string mapperKey);
    public static DapperPlusEntityMapper Entity(Type type, string mapperKey);
    public static bool RemoveEntity(string mapperKey);
    public static bool IsMappedEntity(string mapperKey);
    public static bool IsMapped();
    public static void AddCustomSupportedType(string fullName);
    public static void AddCustomSupportedType(Type type);
    public static void AddValueConverter(Type type, IBulkValueConverter valueConverter);
    public static void AddValueConverter(BulkValueConverter`1<T> valueConverter);
    public static void ClearInformationTableCache();
    public static void ClearAllCache();
    public static void AddLicense(string licenseName, string licenseKey);
    public static bool ValidateLicense(DapperProviderType provider);
    public static bool ValidateLicense(String& errorMessage, DapperProviderType provider);
}
public enum Z.Dapper.Plus.DapperProviderType : Enum {
    public int value__;
    public static DapperProviderType None;
    public static DapperProviderType SqlServer;
    public static DapperProviderType SqlServerCompact;
    public static DapperProviderType MySql;
    public static DapperProviderType GlimpseSqlServer;
    public static DapperProviderType Oracle;
    public static DapperProviderType OracleManaged;
    public static DapperProviderType OracleDevArt;
    public static DapperProviderType SQLite;
    public static DapperProviderType HibernatingRhinosAppenderSqlServer;
    public static DapperProviderType HibernatingRhinosAppenderOracle;
    public static DapperProviderType HibernatingRhinosAppenderOracleManaged;
    public static DapperProviderType HibernatingRhinosAppenderOracleDevArt;
    public static DapperProviderType PostgreSql;
    public static DapperProviderType Firebird;
}
public enum Z.Dapper.Plus.DestinationType : Enum {
    public int value__;
    public static DestinationType None;
    public static DestinationType DestinationName;
    public static DestinationType Selector;
    public static DestinationType SourceName;
}
public interface Z.Dapper.Plus.IDapperPlusActionSet`1 {
    public abstract virtual void AddAction(string mapperKey, DapperPlusActionKind actionKind, Func`2[] selectors);
    public abstract virtual void AddAction(DapperPlusActionKind actionKind, IEnumerable`1<T> entities, Action`1<T> forEachAction);
    public abstract virtual DapperPlusActionSet`1<T2> CreateDapperAction(string mapperKey, DapperPlusActionKind actionKind, Func`2[] selectors);
    public abstract virtual IDapperPlusActionSet`1<IEnumerable`1<T1>> CreateDapperAction(DapperPlusActionKind actionKind, Action`1<T1> action);
    public abstract virtual IDapperPlusActionSet`1<T1> CreateDapperActionOneToOne(DapperPlusActionKind actionKind, Action`1<T1> action);
}
public class Z.Internal.CodeAnalysis.CSharp.TokenInfo : object {
    internal int ;
    public SyntaxKind Kind;
    public StringBuilder ParserText;
    internal string ;
    internal int ;
    internal SyntaxKind ;
    public string Value;
    internal TokenInfo(SyntaxKind , string , StringBuilder , int , int );
    public virtual string ToString();
}
public enum Z.Internal.CodeAnalysis.SyntaxKind : Enum {
    public int value__;
    public static SyntaxKind TildeToken;
    public static SyntaxKind ExclamationToken;
    public static SyntaxKind DollarToken;
    public static SyntaxKind PercentToken;
    public static SyntaxKind CaretToken;
    public static SyntaxKind AmpersandToken;
    public static SyntaxKind AsteriskToken;
    public static SyntaxKind OpenParenToken;
    public static SyntaxKind CloseParenToken;
    public static SyntaxKind MinusToken;
    public static SyntaxKind PlusToken;
    public static SyntaxKind EqualsToken;
    public static SyntaxKind OpenBraceToken;
    public static SyntaxKind CloseBraceToken;
    public static SyntaxKind OpenBracketToken;
    public static SyntaxKind CloseBracketToken;
    public static SyntaxKind BarToken;
    public static SyntaxKind BackslashToken;
    public static SyntaxKind ColonToken;
    public static SyntaxKind SemicolonToken;
    public static SyntaxKind DoubleQuoteToken;
    public static SyntaxKind SingleQuoteToken;
    public static SyntaxKind LessThanToken;
    public static SyntaxKind CommaToken;
    public static SyntaxKind GreaterThanToken;
    public static SyntaxKind DotToken;
    public static SyntaxKind QuestionToken;
    public static SyntaxKind HashToken;
    public static SyntaxKind SlashToken;
    public static SyntaxKind BoolKeyword;
    public static SyntaxKind ByteKeyword;
    public static SyntaxKind SByteKeyword;
    public static SyntaxKind ShortKeyword;
    public static SyntaxKind UShortKeyword;
    public static SyntaxKind IntKeyword;
    public static SyntaxKind UIntKeyword;
    public static SyntaxKind LongKeyword;
    public static SyntaxKind ULongKeyword;
    public static SyntaxKind DoubleKeyword;
    public static SyntaxKind FloatKeyword;
    public static SyntaxKind DecimalKeyword;
    public static SyntaxKind StringKeyword;
    public static SyntaxKind CharKeyword;
    public static SyntaxKind VoidKeyword;
    public static SyntaxKind ObjectKeyword;
    public static SyntaxKind TypeOfKeyword;
    public static SyntaxKind SizeOfKeyword;
    public static SyntaxKind NullKeyword;
    public static SyntaxKind TrueKeyword;
    public static SyntaxKind FalseKeyword;
    public static SyntaxKind IfKeyword;
    public static SyntaxKind ElseKeyword;
    public static SyntaxKind WhileKeyword;
    public static SyntaxKind ForKeyword;
    public static SyntaxKind ForEachKeyword;
    public static SyntaxKind DoKeyword;
    public static SyntaxKind SwitchKeyword;
    public static SyntaxKind CaseKeyword;
    public static SyntaxKind DefaultKeyword;
    public static SyntaxKind TryKeyword;
    public static SyntaxKind CatchKeyword;
    public static SyntaxKind FinallyKeyword;
    public static SyntaxKind LockKeyword;
    public static SyntaxKind GotoKeyword;
    public static SyntaxKind BreakKeyword;
    public static SyntaxKind ContinueKeyword;
    public static SyntaxKind ReturnKeyword;
    public static SyntaxKind ThrowKeyword;
    public static SyntaxKind PublicKeyword;
    public static SyntaxKind PrivateKeyword;
    public static SyntaxKind InternalKeyword;
    public static SyntaxKind ProtectedKeyword;
    public static SyntaxKind StaticKeyword;
    public static SyntaxKind ReadOnlyKeyword;
    public static SyntaxKind SealedKeyword;
    public static SyntaxKind ConstKeyword;
    public static SyntaxKind FixedKeyword;
    public static SyntaxKind StackAllocKeyword;
    public static SyntaxKind VolatileKeyword;
    public static SyntaxKind NewKeyword;
    public static SyntaxKind OverrideKeyword;
    public static SyntaxKind AbstractKeyword;
    public static SyntaxKind VirtualKeyword;
    public static SyntaxKind EventKeyword;
    public static SyntaxKind ExternKeyword;
    public static SyntaxKind RefKeyword;
    public static SyntaxKind OutKeyword;
    public static SyntaxKind InKeyword;
    public static SyntaxKind IsKeyword;
    public static SyntaxKind AsKeyword;
    public static SyntaxKind ParamsKeyword;
    public static SyntaxKind ArgListKeyword;
    public static SyntaxKind MakeRefKeyword;
    public static SyntaxKind RefTypeKeyword;
    public static SyntaxKind RefValueKeyword;
    public static SyntaxKind ThisKeyword;
    public static SyntaxKind BaseKeyword;
    public static SyntaxKind NamespaceKeyword;
    public static SyntaxKind UsingKeyword;
    public static SyntaxKind ClassKeyword;
    public static SyntaxKind StructKeyword;
    public static SyntaxKind InterfaceKeyword;
    public static SyntaxKind EnumKeyword;
    public static SyntaxKind DelegateKeyword;
    public static SyntaxKind CheckedKeyword;
    public static SyntaxKind UncheckedKeyword;
    public static SyntaxKind UnsafeKeyword;
    public static SyntaxKind OperatorKeyword;
    public static SyntaxKind ExplicitKeyword;
    public static SyntaxKind ImplicitKeyword;
    public static SyntaxKind NameofKeyword;
    public static SyntaxKind AsyncKeyword;
    public static SyntaxKind AwaitKeyword;
    public static SyntaxKind OrKeyword;
    public static SyntaxKind AndKeyword;
    public static SyntaxKind NotKeyword;
    public static SyntaxKind DefinedKeyword;
    public static SyntaxKind EndOfLineTrivia;
    public static SyntaxKind WhitespaceTrivia;
    public static SyntaxKind SingleLineCommentTrivia;
    public static SyntaxKind MultiLineCommentTrivia;
    public static SyntaxKind DocumentationCommentExteriorTrivia;
    public static SyntaxKind SingleLineDocumentationCommentTrivia;
    public static SyntaxKind MultiLineDocumentationCommentTrivia;
    public static SyntaxKind DisabledTextTrivia;
    public static SyntaxKind PreprocessingMessageTrivia;
    public static SyntaxKind IfDirectiveTrivia;
    public static SyntaxKind ElifDirectiveTrivia;
    public static SyntaxKind ElseDirectiveTrivia;
    public static SyntaxKind EndIfDirectiveTrivia;
    public static SyntaxKind RegionDirectiveTrivia;
    public static SyntaxKind EndRegionDirectiveTrivia;
    public static SyntaxKind DefineDirectiveTrivia;
    public static SyntaxKind UndefDirectiveTrivia;
    public static SyntaxKind ErrorDirectiveTrivia;
    public static SyntaxKind WarningDirectiveTrivia;
    public static SyntaxKind LineDirectiveTrivia;
    public static SyntaxKind PragmaWarningDirectiveTrivia;
    public static SyntaxKind PragmaChecksumDirectiveTrivia;
    public static SyntaxKind ReferenceDirectiveTrivia;
    public static SyntaxKind BadDirectiveTrivia;
    public static SyntaxKind SkippedTokensTrivia;
    public static SyntaxKind AddExpression;
    public static SyntaxKind SubtractExpression;
    public static SyntaxKind MultiplyExpression;
    public static SyntaxKind DivideExpression;
    public static SyntaxKind ModuloExpression;
    public static SyntaxKind LeftShiftExpression;
    public static SyntaxKind RightShiftExpression;
    public static SyntaxKind LogicalOrExpression;
    public static SyntaxKind LogicalAndExpression;
    public static SyntaxKind BitwiseOrExpression;
    public static SyntaxKind BitwiseAndExpression;
    public static SyntaxKind ExclusiveOrExpression;
    public static SyntaxKind EqualsExpression;
    public static SyntaxKind NotEqualsExpression;
    public static SyntaxKind LessThanExpression;
    public static SyntaxKind LessThanOrEqualExpression;
    public static SyntaxKind GreaterThanExpression;
    public static SyntaxKind GreaterThanOrEqualExpression;
    public static SyntaxKind IsExpression;
    public static SyntaxKind AsExpression;
    public static SyntaxKind CoalesceExpression;
    public static SyntaxKind SimpleMemberAccessExpression;
    public static SyntaxKind PointerMemberAccessExpression;
    public static SyntaxKind ConditionalAccessExpression;
    public static SyntaxKind ParenthesizedExpression;
    public static SyntaxKind ConditionalExpression;
    public static SyntaxKind InvocationExpression;
    public static SyntaxKind ElementAccessExpression;
    public static SyntaxKind ArgumentList;
    public static SyntaxKind BracketedArgumentList;
    public static SyntaxKind Argument;
    public static SyntaxKind NameColon;
    public static SyntaxKind CastExpression;
    public static SyntaxKind AnonymousMethodExpression;
    public static SyntaxKind SimpleLambdaExpression;
    public static SyntaxKind ParenthesizedLambdaExpression;
    public static SyntaxKind ObjectInitializerExpression;
    public static SyntaxKind CollectionInitializerExpression;
    public static SyntaxKind ArrayInitializerExpression;
    public static SyntaxKind AnonymousObjectMemberDeclarator;
    public static SyntaxKind ComplexElementInitializerExpression;
    public static SyntaxKind ObjectCreationExpression;
    public static SyntaxKind AnonymousObjectCreationExpression;
    public static SyntaxKind ArrayCreationExpression;
    public static SyntaxKind ImplicitArrayCreationExpression;
    public static SyntaxKind StackAllocArrayCreationExpression;
    public static SyntaxKind OmittedArraySizeExpression;
    public static SyntaxKind InterpolatedStringExpression;
    public static SyntaxKind ImplicitElementAccess;
    public static SyntaxKind SimpleAssignmentExpression;
    public static SyntaxKind AddAssignmentExpression;
    public static SyntaxKind SubtractAssignmentExpression;
    public static SyntaxKind MultiplyAssignmentExpression;
    public static SyntaxKind DivideAssignmentExpression;
    public static SyntaxKind ModuloAssignmentExpression;
    public static SyntaxKind AndAssignmentExpression;
    public static SyntaxKind ExclusiveOrAssignmentExpression;
    public static SyntaxKind OrAssignmentExpression;
    public static SyntaxKind LeftShiftAssignmentExpression;
    public static SyntaxKind RightShiftAssignmentExpression;
    public static SyntaxKind UnaryPlusExpression;
    public static SyntaxKind UnaryMinusExpression;
    public static SyntaxKind BitwiseNotExpression;
    public static SyntaxKind LogicalNotExpression;
    public static SyntaxKind PreIncrementExpression;
    public static SyntaxKind PreDecrementExpression;
    public static SyntaxKind PointerIndirectionExpression;
    public static SyntaxKind AddressOfExpression;
    public static SyntaxKind PostIncrementExpression;
    public static SyntaxKind PostDecrementExpression;
    public static SyntaxKind AwaitExpression;
    public static SyntaxKind TypeOfExpression;
    public static SyntaxKind SizeOfExpression;
    public static SyntaxKind CheckedExpression;
    public static SyntaxKind UncheckedExpression;
    public static SyntaxKind DefaultExpression;
    public static SyntaxKind MakeRefExpression;
    public static SyntaxKind RefValueExpression;
    public static SyntaxKind RefTypeExpression;
    public static SyntaxKind CheckedFactory;
    public static SyntaxKind TryFactory;
    public static SyntaxKind UncheckedFactory;
    public static SyntaxKind DateTimeExpression;
    public static SyntaxKind TimeExpression;
    public static SyntaxKind Break_All;
    public static SyntaxKind Break_Outer;
    public static SyntaxKind Checked_Null;
    public static SyntaxKind AddMethodKeyword;
    public static SyntaxKind ExclusiveOrAssignmentAlternativeExpression;
    public static SyntaxKind ExclusiveOrAlternativeExpression;
    public static SyntaxKind ExponentExpression;
    public static SyntaxKind ExponentAssignmentExpression;
    public static SyntaxKind NotEqualsAlternativeExpression;
    public static SyntaxKind Hexadecimal;
    public static SyntaxKind Literal;
    public static SyntaxKind Number;
    public static SyntaxKind Operator;
    public static SyntaxKind String;
    public static SyntaxKind Trivia;
    public static SyntaxKind Unicode;
    public static SyntaxKind Real;
    public static SyntaxKind Char;
    public static SyntaxKind Root;
    public static SyntaxKind AnonymousBodyContainer;
    public static SyntaxKind BinaryContainer;
    public static SyntaxKind BodyContainer;
    public static SyntaxKind ExpressionContainer;
    public static SyntaxKind GroupArrayContainer;
    public static SyntaxKind GroupContainer;
    public static SyntaxKind RootContainer;
    public static SyntaxKind UnaryContainer;
    public static SyntaxKind NumberU;
    public static SyntaxKind NumberL;
    public static SyntaxKind NumberUL;
    public static SyntaxKind NumberF;
    public static SyntaxKind NumberD;
    public static SyntaxKind NumberM;
    public static SyntaxKind MethodAccessExpression;
    public static SyntaxKind RegularStringSingleQuote;
    public static SyntaxKind RegularStringDoubleQuote;
    public static SyntaxKind VerbatimStringSingleQuote;
    public static SyntaxKind VerbatimStringDoubleQuote;
    public static SyntaxKind InterpolatedStringSingleQuote;
    public static SyntaxKind InterpolatedStringDoubleQuote;
    public static SyntaxKind CheckedGroupExpression;
    public static SyntaxKind CheckedBodyExpression;
    public static SyntaxKind CheckedNullExpression;
    public static SyntaxKind UncheckedGroupExpression;
    public static SyntaxKind UncheckedBodyExpression;
    public static SyntaxKind GenericTypeExpression;
    public static SyntaxKind PlusPlusToken;
    public static SyntaxKind MinusMinusToken;
    public static SyntaxKind NullableTypeExpression;
    public static SyntaxKind ConditionalExpressionOrNullableTypeExpression;
    public static SyntaxKind ColonColonToken;
    public static SyntaxKind MinusGreaterThanToken;
    public static SyntaxKind TryExpression;
    public static SyntaxKind TryCompileExpression;
    public static SyntaxKind FactorialExpression;
    public static SyntaxKind DisposeTypeOrBitwiseNotExpression;
    public static SyntaxKind BreakAllKeyword;
    public static SyntaxKind BreakOuterKeyword;
    public static SyntaxKind IIFKeyword;
    public static SyntaxKind RangeArrayExpression;
    public static SyntaxKind MemberAccessAlternativeExpression;
    public static SyntaxKind ConditionalMemberAccessExpression;
    public static SyntaxKind ConditionalMethodAccessExpression;
    public static SyntaxKind ConditionalMethodGenericAccessExpression;
    public static SyntaxKind ConditionalIndexAccessExpression;
    public static SyntaxKind IndexAccessExpression;
    public static SyntaxKind MethodExpression;
    public static SyntaxKind CommaContainer;
    public static SyntaxKind GroupParameterContainer;
    public static SyntaxKind ParameterExpression;
    public static SyntaxKind BodyExpression;
    public static SyntaxKind MethodVariableOrStaticMemberAccessExpression;
    public static SyntaxKind AnonymousBodyOrParameterExpression;
    public static SyntaxKind HashHashToken;
    public static SyntaxKind None;
    public static SyntaxKind MethodGenericAccessExpression;
    public static SyntaxKind ResolvedExpression;
    public static SyntaxKind PendingExpression;
    public static SyntaxKind IsNotKeyword;
}
public class Z.Internal.Compiler.Shared.EvalException : Exception {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private string ;
    public string OriginalCode { get; public set; }
    public string ParsedCode { get; public set; }
    public string Token { get; public set; }
    public int StartPosition { get; public set; }
    public string NearText { get; public set; }
    public EvalException(string message);
    public EvalException(string message, Exception innerException);
    public EvalException(EvalException exception, Exception innerException);
    internal static EvalException (string , EvalException );
    [CompilerGeneratedAttribute]
public string get_OriginalCode();
    [CompilerGeneratedAttribute]
public void set_OriginalCode(string value);
    [CompilerGeneratedAttribute]
public string get_ParsedCode();
    [CompilerGeneratedAttribute]
public void set_ParsedCode(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public string get_NearText();
    [CompilerGeneratedAttribute]
public void set_NearText(string value);
}
[CompilerGeneratedAttribute]
internal class `13 : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public  Name { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    public   { get; }
    [DebuggerHiddenAttribute]
public `13( ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  );
    public  get_Name();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    public  get_();
    [DebuggerHiddenAttribute]
public virtual bool Equals(object value);
    [DebuggerHiddenAttribute]
public virtual int GetHashCode();
    [DebuggerHiddenAttribute]
public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class `2 : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public   { get; }
    public   { get; }
    [DebuggerHiddenAttribute]
public `2( ,  );
    public  get_();
    public  get_();
    [DebuggerHiddenAttribute]
public virtual bool Equals(object value);
    [DebuggerHiddenAttribute]
public virtual int GetHashCode();
    [DebuggerHiddenAttribute]
public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class `1 : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public   { get; }
    [DebuggerHiddenAttribute]
public `1( );
    public  get_();
    [DebuggerHiddenAttribute]
public virtual bool Equals(object value);
    [DebuggerHiddenAttribute]
public virtual int GetHashCode();
    [DebuggerHiddenAttribute]
public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class `2 : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public   { get; }
    public   { get; }
    [DebuggerHiddenAttribute]
public `2( ,  );
    public  get_();
    public  get_();
    [DebuggerHiddenAttribute]
public virtual bool Equals(object value);
    [DebuggerHiddenAttribute]
public virtual int GetHashCode();
    [DebuggerHiddenAttribute]
public virtual string ToString();
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static bool (PropertyInfo this, string );
    [ExtensionAttribute]
public static bool (MemberInfo this, string );
    [ExtensionAttribute]
public static bool (PropertyInfo this, string , string , Object& );
    [ExtensionAttribute]
internal static Action`1<BulkOperation`1<>> (Action`1<BulkOperation`1<>> this);
    [ExtensionAttribute]
internal static Action`1<BulkOperation> (Action`1<BulkOperation> this);
    [ExtensionAttribute]
internal static Action`1<BulkOperation`1<>> (Action`1<BulkOperation`1<>> this);
    [ExtensionAttribute]
internal static Action`1<BulkOperation> (Action`1<BulkOperation> this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static Expression (Expression , Func`2<, Expression> );
    [ExtensionAttribute]
public static  ( , Func`2<, Expression> );
    [ExtensionAttribute]
public static Expression`1<> (Expression`1<> , Func`2<, Expression> );
}
internal class `1 : ExpressionVisitor {
    private Func`2<, Expression> ;
    public `1(Func`2<, Expression> );
    public virtual Expression Visit(Expression );
    public static Expression (Expression , Func`2<, Expression> );
    public static Expression`1<> (Expression`1<> , Func`2<, Expression> );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static IEnumerable`1<DataRow> (DataTable this, DataRowState );
    [ExtensionAttribute]
public static SqlDbType (int this);
    [ExtensionAttribute]
public static SqlDbType (string this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static  (LambdaExpression this);
    [ExtensionAttribute]
internal static IEnumerable`1<> (LambdaExpression this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static object (object this, string );
    [ExtensionAttribute]
internal static object (object this, string );
    [ExtensionAttribute]
internal static  (object this, string );
    [ExtensionAttribute]
internal static object (object this, string );
    [ExtensionAttribute]
internal static  (object this, string );
    [ExtensionAttribute]
internal static bool (Type this);
    [ExtensionAttribute]
internal static bool (object this);
    [ExtensionAttribute]
internal static object (object this, string , Object[] );
    [ExtensionAttribute]
internal static object (object this, int );
    [ExtensionAttribute]
internal static bool (object this, string );
    [ExtensionAttribute]
internal static bool (object this, string );
    [ExtensionAttribute]
internal static PropertyInfo (object this, string );
    [ExtensionAttribute]
internal static FieldInfo (object this, string );
}
internal static class  : object {
    public static List`1<Type> (IEnumerable`1<Assembly> );
}
internal static class  : object {
    internal static int (int , int );
    internal static int (int , int , int );
    internal static int (int , int , int , int );
    internal static int (int , int , int , int , int );
    internal static int (int , int , int , int , int , int );
    internal static int (int , int , int , int , int , int , int );
    internal static int (int , int , int , int , int , int , int , int );
    internal static int (List`1<int> );
    internal static int (object );
    internal static int (object , object );
    internal static int (object , object , object );
    internal static int (object , object , object , object );
    internal static int (object , object , object , object , object );
    internal static int (object , object , object , object , object , object );
    internal static int (object , object , object , object , object , object , object );
    internal static int (object , object , object , object , object , object , object , object );
    internal static int (List`1<object> );
}
internal class  : object {
    public static List`1<TokenInfo> (List`1<TokenInfo> , string );
    public static string (List`1<TokenInfo> , string );
    public static int (List`1<TokenInfo> , string );
}
internal static class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static EvalException (string , string , TokenInfo );
    internal static EvalException (string , TokenInfo );
    internal static EvalException (string , TokenInfo , string );
    internal static EvalException (string , Exception , TokenInfo );
    internal static EvalException (string , StringBuilder , int );
    internal static EvalException (string , StringBuilder , string , int , Exception );
}
internal class  : object {
    internal static Dictionary`2<string, SyntaxKind> ;
    private static ();
    internal static List`1<TokenInfo> (string );
    internal static IEnumerable`1<TokenInfo> (StringBuilder , bool );
}
[ExtensionAttribute]
internal static class  : object {
    internal static Dictionary`2<string, string> ;
    private static ();
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , bool );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (TokenInfo );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
}
internal static class  : object {
    [CompilerGeneratedAttribute]
private static RegexOptions ;
    public static RegexOptions  { get; }
    private static ();
    [CompilerGeneratedAttribute]
public static RegexOptions get_();
}
internal static class  : object {
    private static Lazy`1<> ;
    public static   { get; }
    private static ();
    public static  get_();
    private static  ();
}
internal class  : object {
    private List`1<> ;
    private List`1<> ;
    private List`1<string> ;
    private Regex ;
    public void (string , string , bool );
    public void (string );
    public void (string , string );
    public void (string , string );
    public string (string , bool );
    public string (string , bool , bool );
    private string (IList`1<> , string , bool );
    private bool (string );
    private string (string , string );
    private string (string );
}
internal interface  {
    public object InternalAdvanced { get; }
    public abstract virtual object get_InternalAdvanced();
}
internal class  : DataContext {
    internal (DbConnection , MappingSource );
}
internal class `1 : object {
    [CompilerGeneratedAttribute]
private BulkValueConverter`1<> ;
    public BulkValueConverter`1<>  { get; public set; }
    [CompilerGeneratedAttribute]
public BulkValueConverter`1<> get_();
    [CompilerGeneratedAttribute]
public void set_(BulkValueConverter`1<> value);
    public sealed virtual object ConvertFromProvider(Type destinationType, object value);
    public sealed virtual object ConvertToProvider(object value);
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  : object {
    internal static bool ;
    private static ();
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void (DataTable );
    public virtual void ( );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public List`1<Tuple`3<DbCommand, Action`1<DataTable>, int>> (DbConnection , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction ,  , Tuple`3<DbCommand, Action`1<DataTable>, int> );
    public void (DbConnection , DbTransaction ,  , List`1<Tuple`3<DbCommand, Action`1<DataTable>, int>> , bool );
    public void (DbConnection , DbTransaction ,  , List`1<DbCommand> );
    public void (BulkOperation );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( );
    public void ( , BulkOperation );
    public bool (List`1<> );
    public bool (List`1<> );
    public Dictionary`2<string, object> (BulkOperation );
    public void (Dictionary`2<string, object> , Type , MemberInitExpression , string );
    public void Execute(List`1<> actions);
    public virtual  ( );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public List`1<Tuple`2<DbCommand, Action`1<DataTable>>> (DbConnection , List`1<> );
    public List`1<Tuple`2<DbCommand, Action`1<DataTable>>> (DbConnection , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public List`1<DbCommand> (List`1<> , DbConnection );
    [CompilerGeneratedAttribute]
private void ( );
    [CompilerGeneratedAttribute]
private void ( );
}
internal class  :  {
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
    public virtual void ( );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
}
internal class  :  {
}
internal class  :  {
    public virtual void ( );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
}
internal class  :  {
    internal  ;
    public virtual void ( );
    public void (BulkOperation , DataSet );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
    internal void ( , DataSet );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  :  {
    public virtual void ( );
    public void ( , DbConnection , DbTransaction );
    public virtual void ( );
    public bool ( , DbConnection , DbTransaction , int );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation , int );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
}
internal class  :  {
    internal  ;
    internal void ( , DataTable , DataTable );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    public virtual void ( );
    public void ( , DbConnection , DbTransaction );
    public virtual DataSet (DbCommand , BulkOperation , int );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
    public bool ( , DbConnection , DbTransaction , int );
    internal void ( , DataTable );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public string ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public virtual string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , bool , bool );
    public string ( );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
    internal static string (Column , string );
    public string ( );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ( );
    public void ( , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public  ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
}
internal class  :  {
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
}
internal class  :  {
}
internal class  :  {
    internal  ;
    public virtual void ( );
    public virtual void ( );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataSet , string );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    internal void ( , DataSet , string , bool );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public List`1<> ( );
    public List`1<> ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
}
internal class  :  {
    private  ;
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void (DataTable );
    public virtual void ( );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    public virtual void ( );
    public void ( , DbConnection , DbTransaction );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public DataTable (DbCommand , BulkOperation , int );
    public DataTable (DataSet , DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public int (DbCommand , BulkOperation , int );
    public virtual void ( );
    public bool ( , DbConnection , DbTransaction , int );
    internal void ( , DataTable );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , string , bool , bool , bool );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public  ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , bool , bool );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    internal static bool (BulkOperation , List`1<> );
    public DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    public static  (BulkOperation , int , DbException , Func`2<int, > );
    internal virtual string (string );
    internal static string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal void (Table , DbDataReader );
    internal string (DbCommand , String[] );
    internal string (DbCommand , String[] );
    internal void (string , Dictionary`2<string, Table> , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal string (string );
    internal virtual string (string , string );
}
internal class  : object {
    public static bool ( );
    internal static int (int );
}
internal class  :  {
    public virtual void ( );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
}
internal class  :  {
}
internal class  :  {
}
internal class  : object {
    internal static string (string , string , string );
    internal static int (int );
}
internal class  : object {
    protected bool ;
    [CompilerGeneratedAttribute]
private DbConnection ;
    public DbConnection  { get; public set; }
    [CompilerGeneratedAttribute]
public DbConnection get_();
    [CompilerGeneratedAttribute]
public void set_(DbConnection value);
    public virtual void Dispose();
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public DbConnection  { get; }
    public (BulkOperation );
    public DbConnection get_();
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  : object {
    public static int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal BulkOperation ;
    internal TemporaryTableNameGenerationType ;
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public List`1<> Execute();
    public List`1<> (List`1<> );
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public bool ();
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<List`1<>> (List`1<List`1<>> );
    public List`1<List`1<>> (List`1<List`1<>> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<List`1<>> (List`1<List`1<>> );
    public string (BulkOperation );
    public List`1<List`1<>> (List`1<List`1<>> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
}
internal abstract class  : object {
    internal static string ;
    internal BulkOperation ;
    internal   { get; }
    private static ();
    internal abstract virtual  get_();
    internal abstract virtual Table ();
    internal abstract virtual string ();
    internal abstract virtual List`1<> ();
    internal abstract virtual void (List`1<> );
    internal abstract virtual string (string );
    internal abstract virtual string (string );
    internal abstract virtual void ();
    internal abstract virtual string (string , string );
}
internal class  :  {
    public static MethodInfo ;
    private static ();
    public static object ConvertValueReverse( action, object value, Type type);
    public static object ( , object , Type );
    public static List`1<object> GetAllByPrimaryKeys( action, object effortTable, Type genericType, object transaction);
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal  ( );
    internal void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand , List`1<> );
    public string ( , DbCommand , List`1<> , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public  ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
}
internal class  :  {
    public virtual void ( );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
}
internal class  :  {
}
internal class  :  {
}
internal static class  : object {
    public static DbConnection (DbConnection );
}
internal class  :  {
    internal static int (int );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual void ( );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
}
internal class  :  {
}
internal class  :  {
}
internal static class  : object {
    public static DbConnection (DbConnection );
}
internal class  :  {
    private  ;
    public void (BulkOperation , DbCommand );
    public void (BulkOperation , DbCommand , DataTable );
    public void (BulkOperation , DataTable );
    public void (BulkOperation , DataSet );
    public virtual  ( );
    public DataSet (DbCommand , BulkOperation );
    public DataTable (DbCommand , BulkOperation );
    public int (DbCommand , BulkOperation );
    internal void ( , DbCommand );
    internal void ( , DataSet );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual string (string );
    internal virtual string (string );
    internal virtual Table ();
    internal virtual string ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string (string , string );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
}
internal class  :  {
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    public static Dictionary`2<string, int> ;
    internal  ;
    internal  ;
    internal   { get; }
    private static ();
    internal virtual string (string );
    internal virtual string (string );
    public static int (string );
    internal virtual Table ();
    internal void ( , Table , bool );
    internal virtual string ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string (string , string );
}
internal class  :  {
    internal  ;
    public virtual  ( );
    public DbCommand (DbCommand );
    public virtual int (DbCommand , BulkOperation , int );
    internal void ( , DataTable );
    internal void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal virtual string (string );
    internal static string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    internal string (string );
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual void ();
    internal virtual string ();
    internal virtual string (string );
    internal virtual string (string , string );
    public void (Table );
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public int ;
    public string ;
    public string ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand , List`1<> );
    public void ( , DbCommand , bool );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand , List`1<> );
    public void ( , DbCommand , bool );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , bool );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , string );
    public string ( );
    [CompilerGeneratedAttribute]
private string ( , int );
    [CompilerGeneratedAttribute]
private string ( , int );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    public virtual int (DbCommand , BulkOperation , int );
    public virtual  ( );
}
internal class  :  {
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual void ( );
    public virtual void ( , DbConnection , DbTransaction );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
    public virtual bool ( , DbConnection , DbTransaction , int );
    public virtual  ( );
}
internal class  :  {
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual int (DbCommand , BulkOperation , int );
    public virtual  ( );
}
internal class  :  {
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    internal  ;
    public DataTable ( , DbCommand );
    public void ( , DbCommand , string );
    public void ( , DbCommand , string );
    public void ( , DbCommand );
    public DataTable ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public DataTable ( , DbCommand );
    public void ( , DbCommand );
    public DataTable ( , DbCommand );
    public DataTable ( , DbCommand );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public void (BulkOperation , DataSet );
    public virtual  ( );
    public DbCommand (DbCommand );
    public virtual void ( );
    public virtual void ( , DbConnection , DbTransaction );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
    public virtual bool ( , DbConnection , DbTransaction , int );
    internal void ( , DataTable );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DataTable , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DataTable , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    public static  (BulkOperation , int , DbException , Func`2<int, > );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    internal virtual void ();
    internal string (string );
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal virtual string (string );
    internal virtual string (string , string );
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public int ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand , string );
    public void ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , string , bool , bool );
    public string ( , DbCommand , string , bool );
    public string ( , DbCommand , string , bool );
    public string ( , DbCommand , string , bool );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public  ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , bool , bool );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
    internal static int (int );
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal List`1<Table> ( , Exception , String[] );
    internal virtual Table ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  :  {
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    public static  (BulkOperation , int , DbException , Func`2<int, > );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal static void (Table );
    internal int (string );
    internal void (string , Column );
    internal List`1<Table> ( , Exception , List`1<string> , Table , String[] );
    internal virtual Table ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal string (string );
    internal virtual string (string , string );
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    internal static Dictionary`2<string, DbType> ;
    private  ;
    private  ;
    internal   { get; }
    private static ();
    public static DbType (string );
    internal virtual Table ();
    internal static Table (bool , BulkOperation );
    internal static  (bool , BulkOperation );
    private static bool ( , string );
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
}
internal class  :  {
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal string (String[] );
    internal virtual Table ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal string (string );
    internal virtual string (string , string );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string (string );
    internal virtual string (string );
    internal static string (string );
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal virtual string (string , string );
}
internal class  :  {
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal  ( );
    internal void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string (string );
    internal virtual string (string );
    internal static string (string );
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal virtual string (string , string );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  : object {
    public  ;
    public  ;
    public List`1<> ;
    public int BatchSize;
    public BulkOperation ;
    public  ;
    public  ;
    public int ;
    public int ;
    public Lazy`1<List`1<string>> ;
    public bool ;
    public bool ;
    public DataTable ;
    public object ;
    public object ;
    public string ;
    public DbTransaction ;
    public object ;
    public object ;
    public object ;
    public Nullable`1<bool> ;
    public bool ;
    public string  { get; }
    public string get_();
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static bool (Type this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static string (DbConnection );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static DbTransaction (DbConnection , Nullable`1<IsolationLevel> );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static List`1<object> (IEnumerable this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingAttr, bool removeHidden);
    [ExtensionAttribute]
internal static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr, bool removeHidden);
}
internal enum  : Enum {
    public int value__;
    public static  ;
}
internal class  : object {
    internal DateTime ;
    internal bool ;
    internal DateTime ;
    internal  ;
    public bool  { get; public set; }
    public   { get; public set; }
    public DateTime  { get; public set; }
    public DateTime  { get; public set; }
    public bool get_();
    public void set_(bool value);
    public  get_();
    public void set_( value);
    public DateTime get_();
    public void set_(DateTime value);
    public DateTime get_();
    public void set_(DateTime value);
}
internal class `1 :  {
    internal  ;
    internal  ;
    public   { get; public set; }
    public   { get; public set; }
    public  get_();
    public void set_( value);
    public  get_();
    public void set_( value);
}
internal class  : object {
    public static bool (ProviderType );
    internal static int (int );
}
internal class  : object {
    internal static Dictionary`2<string, string> ;
    internal static Dictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    internal static bool  { get; internal set; }
    internal static bool  { get; internal set; }
    internal static Dictionary`2<string, string>  { get; internal set; }
    internal static ConcurrentDictionary`2<string, string>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    private static ();
    [CompilerGeneratedAttribute]
internal static bool get_();
    [CompilerGeneratedAttribute]
internal static void set_(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_();
    [CompilerGeneratedAttribute]
internal static void set_(bool value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal static ConcurrentDictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal static void set_(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    internal static Nullable`1<bool> (ProviderType , bool , bool , bool , bool );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static bool (string , string , Int32& , bool );
    internal static void (int , bool );
    internal static DateTime ();
    internal static bool ();
    internal static void (bool );
    internal static bool (ProviderType , bool , bool , bool , bool );
    internal static string (bool );
    internal static string (ProviderType , bool , bool , bool );
    internal static void ();
    internal static string (string );
    internal static bool (String& , ProviderType , Nullable`1<bool> , Nullable`1<bool> , Nullable`1<bool> , bool );
    internal static bool (String& , ProviderType , bool , bool , bool , bool );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static bool (DbException );
}
internal class  : object {
    internal ColumnMapping ;
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal Column ;
    internal string ;
    internal string ;
    internal ColumnMappingDirectionType ;
    public int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
}
internal class  : object {
    internal bool ;
    internal List`1<Column> ;
    internal int ;
    internal List`1<> ;
    internal List`1<> ;
    internal  ;
    internal int ;
    internal int ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<ColumnMapping> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<DataColumn> ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal  ;
    internal bool ;
    internal Table ;
    internal string ;
    internal bool ;
    internal int ;
    internal ConcurrentDictionary`2<string, string> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string  { get; internal set; }
    internal string get_();
    internal void set_(string value);
    internal bool (BulkOperation );
}
internal static class  : object {
    internal static object ;
    internal static object ;
    private static ();
    internal static void (List`1<> , List`1<MemberInfo> , List`1<Expression> );
    internal static Expression`1<Func`2<, object>> (Expression`1<Func`2<, object>> );
    internal static Expression`1<Func`2<, object>> (Expression`1<Func`2<, object>> );
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    public Int32[] ;
    public DataTable ;
    public  ;
    public int ;
    public List`1<object> ;
    public List`1<object> ;
    public bool ;
    public [] ;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ( , List`1<> );
    public sealed virtual object GetValue(int i);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int );
    public sealed virtual byte GetByte(int );
    public sealed virtual long GetBytes(int , long , Byte[] , int , int );
    public sealed virtual char GetChar(int );
    public sealed virtual long GetChars(int , long , Char[] , int , int );
    public sealed virtual IDataReader GetData(int );
    public sealed virtual string GetDataTypeName(int );
    public sealed virtual DateTime GetDateTime(int );
    public sealed virtual decimal GetDecimal(int );
    public sealed virtual double GetDouble(int );
    public sealed virtual Type GetFieldType(int );
    public sealed virtual float GetFloat(int );
    public sealed virtual Guid GetGuid(int );
    public sealed virtual short GetInt16(int );
    public sealed virtual int GetInt32(int );
    public sealed virtual long GetInt64(int );
    public sealed virtual string GetName(int );
    public sealed virtual int GetOrdinal(string );
    public sealed virtual string GetString(int );
    public sealed virtual int GetValues(Object[] );
    public sealed virtual bool IsDBNull(int );
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
}
internal class  : object {
    internal List`1<> ;
    internal List`1<> ;
    public List`1<>  { get; public set; }
    public List`1<>  { get; public set; }
    public (Type , string );
    public List`1<> get_();
    public void set_(List`1<> value);
    public List`1<> get_();
    public void set_(List`1<> value);
    internal static int (int );
}
internal class  : object {
    internal List`1<string> ;
    internal List`1<> ;
    internal List`1<> ;
    internal string ;
    internal List`1<> ;
    internal  ;
    public List`1<string>  { get; public set; }
    public List`1<>  { get; public set; }
    public List`1<>  { get; public set; }
    public string Name { get; public set; }
    public List`1<>  { get; public set; }
    public   { get; public set; }
    public List`1<string> get_();
    public void set_(List`1<string> value);
    public List`1<> get_();
    public void set_(List`1<> value);
    public List`1<> get_();
    public void set_(List`1<> value);
    public string get_Name();
    public void set_Name(string value);
    public List`1<> get_();
    public void set_(List`1<> value);
    public  get_();
    public void set_( value);
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
}
internal class  : object {
    internal bool ;
    internal  ;
    public bool  { get; public set; }
    public   { get; public set; }
    public bool get_();
    public void set_(bool value);
    public  get_();
    public void set_( value);
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
}
internal class  : object {
    internal string ;
    internal string ;
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
}
internal static class  : object {
    public static Func`2<object, object> (Type ,  );
    public static Func`2<object, object> (Type , MemberInfo[] );
    public static Func`2<object, > (Type ,  );
    public static Func`2<object, > (Type , MemberInfo[] );
    public static Action`2<object, object> (Type ,  );
    public static Action`2<object, object> (Type , MemberInfo[] );
    public static Action`2<object, > (Type ,  );
    public static Action`2<object, > (Type , MemberInfo[] );
    public static Func`3<object, Object[], > (Type , string , Type[] );
    public static Action`2<object, object> (Type , string );
    public static Expression (Expression ,  );
    public static Expression (Expression , String[] );
}
internal class  :  {
    public ( );
    public ( , IEnumerable`1<> );
    public virtual object GetValue(int i);
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    public [] ;
    public  ;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ( );
    public ( , IEnumerable`1<> );
    public virtual object GetValue(int i);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int );
    public sealed virtual byte GetByte(int );
    public sealed virtual long GetBytes(int , long , Byte[] , int , int );
    public sealed virtual char GetChar(int );
    public sealed virtual long GetChars(int , long , Char[] , int , int );
    public sealed virtual IDataReader GetData(int );
    public sealed virtual string GetDataTypeName(int );
    public sealed virtual DateTime GetDateTime(int );
    public sealed virtual decimal GetDecimal(int );
    public sealed virtual double GetDouble(int );
    public sealed virtual Type GetFieldType(int );
    public sealed virtual float GetFloat(int );
    public sealed virtual Guid GetGuid(int );
    public sealed virtual short GetInt16(int );
    public sealed virtual int GetInt32(int );
    public sealed virtual long GetInt64(int );
    public sealed virtual string GetName(int );
    public sealed virtual int GetOrdinal(string );
    public sealed virtual string GetString(int );
    public sealed virtual int GetValues(Object[] );
    public sealed virtual bool IsDBNull(int );
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    public Int32[] ;
    public IDataReader ;
    public  ;
    public int ;
    public bool ;
    public List`1<object> ;
    public List`1<object> ;
    public [] ;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ( , List`1<> );
    public sealed virtual object GetValue(int i);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int );
    public sealed virtual byte GetByte(int );
    public sealed virtual long GetBytes(int , long , Byte[] , int , int );
    public sealed virtual char GetChar(int );
    public sealed virtual long GetChars(int , long , Char[] , int , int );
    public sealed virtual IDataReader GetData(int );
    public sealed virtual string GetDataTypeName(int );
    public sealed virtual DateTime GetDateTime(int );
    public sealed virtual decimal GetDecimal(int );
    public sealed virtual double GetDouble(int );
    public sealed virtual Type GetFieldType(int );
    public sealed virtual float GetFloat(int );
    public sealed virtual Guid GetGuid(int );
    public sealed virtual short GetInt16(int );
    public sealed virtual int GetInt32(int );
    public sealed virtual long GetInt64(int );
    public sealed virtual string GetName(int );
    public sealed virtual int GetOrdinal(string );
    public sealed virtual string GetString(int );
    public sealed virtual int GetValues(Object[] );
    public sealed virtual bool IsDBNull(int );
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
}
internal class  : object {
    internal int ;
    internal object ;
    internal IEnumerator ;
    internal bool ;
    internal bool ;
    internal int ;
    internal object ;
    internal IList ;
    internal bool ;
    public object  { get; }
    public bool  { get; }
    public bool  { get; }
    public int Count { get; }
    public int  { get; public set; }
    public (IList );
    public static  (object );
    public static  (List`1<DataRow> );
    public static  (IList`1<> );
    public static  (IEnumerable`1<> );
    public static  (DataTable );
    public virtual  (string );
    public virtual  (MemberInfo[] );
    public virtual  ( );
    public virtual  (int );
    public virtual  (string );
    public virtual object GetValue( accessor);
    public virtual Type ( );
    public virtual void SetValue( accessor, object value);
    public virtual void SetValue(int position,  accessor, object value);
    public virtual IDataReader ();
    public virtual IDataReader (IEnumerable`1<> );
    public virtual IDataReader (IEnumerable`1<> , bool );
    public virtual object get_();
    public virtual bool ();
    public virtual bool ();
    public virtual bool (int );
    public virtual void Dispose();
    public virtual bool get_();
    public virtual bool get_();
    public virtual int get_Count();
    public virtual int get_();
    public virtual void set_(int value);
    public virtual  (int );
    public virtual object (int );
}
internal class `1 :  {
    internal IEnumerator`1<> ;
    internal IEnumerable`1<> ;
    internal IList`1<> ;
    public `1(IList`1<> );
    public `1(IEnumerable`1<> );
    public `1(IEnumerator`1<> );
    public virtual void SetValue(int position,  accessor, object value);
    public virtual bool ();
    public virtual bool ();
    public virtual bool (int );
    public virtual void Dispose();
}
internal class  :  {
    public bool ;
    public int ;
    public int ;
    public bool ;
    public IDataReader ;
    public  ;
    public (IDataReader );
    public virtual object GetValue( accessor);
    public object GetValue(int i);
    public virtual  (string );
    public virtual  (int );
    public virtual  ( );
    public virtual  (string );
    public virtual bool ();
    public virtual  (int );
    public  (int );
    public virtual IDataReader (IEnumerable`1<> );
    public virtual void SetValue( accessor, object value);
    public virtual void SetValue(int position,  accessor, object value);
    public virtual object (int );
}
internal interface  {
    public abstract virtual void SetValue(int position,  accessor, object value);
    public abstract virtual object GetValue( accessor);
    public abstract virtual void (List`1<> );
    public abstract virtual object (int );
}
internal class  : `1<DataRow> {
    public IEnumerable`1<DataRow> ;
    public (IList`1<DataRow> );
    public (IEnumerable`1<DataRow> );
    public virtual object GetValue( accessor);
    public virtual  (string );
    public virtual  (int );
    public virtual  ( );
    public virtual  (string );
}
internal class  : `1<DataRow> {
    internal DataTable ;
    public (DataTable );
    public virtual  (string );
    public virtual  (int );
    public virtual  (string );
    public virtual  ( );
    public virtual IDataReader (IEnumerable`1<> );
    public virtual object (int );
    public virtual object GetValue( accessor);
}
internal interface  {
    public bool  { get; }
    public bool  { get; }
    public int Count { get; }
    public int  { get; public set; }
    public object  { get; }
    public abstract virtual bool get_();
    public abstract virtual bool get_();
    public abstract virtual int get_Count();
    public abstract virtual int get_();
    public abstract virtual void set_(int value);
    public abstract virtual object get_();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool (int );
    public abstract virtual  (int );
    public abstract virtual object (int );
    public abstract virtual IDataReader ();
    public abstract virtual IDataReader (IEnumerable`1<> );
    public abstract virtual IDataReader (IEnumerable`1<> , bool );
    public abstract virtual  (string );
    public abstract virtual  (MemberInfo[] );
    public abstract virtual  ( );
    public abstract virtual  (int );
    public abstract virtual  (string );
    public abstract virtual object GetValue( accessor);
    public abstract virtual Type ( );
    public abstract virtual void SetValue( accessor, object value);
    public abstract virtual void SetValue(int position,  accessor, object value);
}
internal interface `1 {
}
internal class  : object {
    public static ConcurrentDictionary`2<string, Func`2<object, object>> ;
    public static ConcurrentDictionary`2<string, Func`3<object, IEnumerable`1<object>, object>> ;
    public static ConcurrentDictionary`2<string, Func`1<object>> ;
    public static ConcurrentDictionary`2<string, Func`2<IEnumerable`1<object>, object>> ;
    public static ConcurrentDictionary`2<string, Action`2<object, object>> ;
    public static ConcurrentDictionary`2<string, Action`3<object, object, IEnumerable`1<object>>> ;
    public static ConcurrentDictionary`2<string, Action`1<object>> ;
    public static ConcurrentDictionary`2<string, Action`2<object, IEnumerable`1<object>>> ;
    private static ();
    public static void ();
}
internal class  : object {
    internal  ;
    internal string ;
    internal Type[] ;
    internal bool ;
    internal Dictionary`2<Type, string> ;
    internal LambdaExpression ;
    internal MemberInfo[] ;
    internal string ;
    internal Func`2<object, object> ;
    internal Func`3<object, IEnumerable`1<object>, object> ;
    internal Type ;
    internal Action`2<object, object> ;
    internal Action`3<object, object, IEnumerable`1<object>> ;
    internal Type ;
    internal Func`1<object> ;
    internal Func`2<IEnumerable`1<object>, object> ;
    internal Action`1<object> ;
    internal Action`2<object, IEnumerable`1<object>> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private bool ;
    public bool  { get; public set; }
    public int  { get; public set; }
    public bool IsGeography { get; public set; }
    public bool  { get; }
    public (string );
    public (string , IEnumerable`1<Type> );
    public (string , Type[] );
    public (LambdaExpression );
    public (MemberInfo[] );
    public (IEnumerable`1<MemberInfo> );
    public virtual void (object );
    public virtual object GetValue();
    public virtual object GetValue(IEnumerable`1<object> parameterValues);
    public virtual object GetValue(Object[] parameterValues);
    public virtual object GetValue(object obj);
    public virtual object GetValue(object obj, IEnumerable`1<object> parameterValues);
    public virtual object GetValue(object obj, Object[] parameterValues);
    public virtual Type (object );
    public virtual void SetValue(object value);
    public virtual void SetValue(object value, IEnumerable`1<object> parameterValues);
    public virtual void SetValue(object value, Object[] parameterValues);
    public virtual void SetValue(object obj, object value);
    public virtual void SetValue(object obj, object value, IEnumerable`1<object> parameterValues);
    public virtual void SetValue(object obj, object value, Object[] parameterValues);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_();
    [CompilerGeneratedAttribute]
public sealed virtual void set_(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_();
    [CompilerGeneratedAttribute]
public sealed virtual void set_(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsGeography();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsGeography(bool value);
    public sealed virtual bool get_();
    public string (Type );
    public string ();
    public Func`2<object, object> (Type , string );
    internal Action`2<object, object> (Type );
    public virtual string ToString();
}
internal class `1 :  {
    public `1(string );
    public `1(string , IEnumerable`1<Type> );
    public `1(string , Type[] );
    public `1(LambdaExpression );
    public `1(MemberInfo );
    public `1(MemberInfo[] );
    public `1(IEnumerable`1<MemberInfo> );
    public sealed virtual  GetValue();
    public sealed virtual  GetValue(Object[] parameterValues);
    public sealed virtual  GetValue(IEnumerable`1<object> parameterValues);
    public sealed virtual  GetValue(object obj);
    public sealed virtual  GetValue(object obj, Object[] parameterValues);
    public sealed virtual  GetValue(object obj, IEnumerable`1<object> parameterValues);
    public void SetValue( value);
    public void SetValue( value, Object[] parameterValues);
    public void SetValue( value, IEnumerable`1<object> parameterValues);
    public void SetValue(object obj,  value);
    public void SetValue(object obj,  value, Object[] parameterValues);
    public void SetValue(object obj,  value, IEnumerable`1<object> parameterValues);
}
internal class  :  {
    internal object ;
    public (object );
    public virtual object GetValue(object sender);
    public virtual void SetValue(object obj, object value);
}
internal class  :  {
    internal IDataReader ;
    internal string ;
    internal int ;
    internal bool ;
    public (string );
    public (int );
    public object GetValue(IDataReader reader);
    public int (IDataReader );
    public virtual string ToString();
}
internal class  :  {
    internal IDataReader ;
    internal DataTable ;
    internal string ;
    internal int ;
    internal bool ;
    public (int );
    public (string );
    public virtual object GetValue(object sender);
    public virtual void SetValue(object obj, object value);
    public object GetValue(DataRow dr);
    public int (IDataReader );
    public int (DataTable );
    public object GetValue(IDataReader dr);
    public void SetValue(DataRow dr, object value);
    public virtual string ToString();
}
internal class  :  {
    private Func`2<object, object> ;
    private Func`3<string, object, object> ;
    public string ;
    public  ;
    public (Func`2<object, object> );
    public (string , Func`3<string, object, object> ,  );
    public virtual object GetValue(object sender);
    public virtual void SetValue(object obj, object value);
}
internal interface  {
    public bool  { get; public set; }
    public int  { get; public set; }
    public bool  { get; }
    public bool IsGeography { get; public set; }
    public abstract virtual bool get_();
    public abstract virtual void set_(bool value);
    public abstract virtual int get_();
    public abstract virtual void set_(int value);
    public abstract virtual bool get_();
    public abstract virtual bool get_IsGeography();
    public abstract virtual void set_IsGeography(bool value);
    public abstract virtual Type (object );
    public abstract virtual object GetValue();
    public abstract virtual object GetValue(IEnumerable`1<object> parameterValues);
    public abstract virtual object GetValue(Object[] parameterValues);
    public abstract virtual object GetValue(object obj);
    public abstract virtual object GetValue(object obj, IEnumerable`1<object> parameterValues);
    public abstract virtual object GetValue(object obj, Object[] parameterValues);
    public abstract virtual void SetValue(object value);
    public abstract virtual void SetValue(object value, IEnumerable`1<object> parameterValues);
    public abstract virtual void SetValue(object value, Object[] parameterValues);
    public abstract virtual void SetValue(object obj, object value);
    public abstract virtual void SetValue(object obj, object value, IEnumerable`1<object> parameterValues);
    public abstract virtual void SetValue(object obj, object value, Object[] parameterValues);
}
internal interface `1 {
    public abstract virtual  GetValue();
    public abstract virtual  GetValue(IEnumerable`1<object> parameterValues);
    public abstract virtual  GetValue(Object[] parameterValues);
    public abstract virtual  GetValue(object obj);
    public abstract virtual  GetValue(object obj, IEnumerable`1<object> parameterValues);
    public abstract virtual  GetValue(object obj, Object[] parameterValues);
}
internal class  :  {
}
internal class  : object {
    public List`1<string> ;
    public bool ;
    public bool ;
    public string ;
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static Expression (Expression this);
    [ExtensionAttribute]
internal static MemberInfo (Expression this, ParameterExpression );
    [ExtensionAttribute]
internal static IEnumerable`1<MemberInfo> (Expression this, ParameterExpression );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static IQueryable Select(IQueryable source, string selector, Object[] values);
    [ExtensionAttribute]
public static IQueryable Take(IQueryable source, int count);
}
internal class  : object {
    private string ;
    private Type ;
    public string Name { get; }
    public Type  { get; }
    public (string , Type );
    public string get_Name();
    public Type get_();
}
internal static class  : object {
    public static Expression (Type , string , Object[] );
    public static LambdaExpression (Type , Type , string , Object[] );
    public static LambdaExpression (ParameterExpression[] , Type , string , Object[] );
    public static Expression`1<Func`2<, >> (string , Object[] );
    public static Type ([] );
    public static Type (IEnumerable`1<> );
}
internal class  : object {
    public bool ;
    public Expression ;
}
internal class  : object {
    public int ;
    public [] ;
    public (IEnumerable`1<> );
    public sealed virtual bool Equals( other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class  : object {
    public static  ;
    private ConcurrentDictionary`2<, Type> ;
    private ModuleBuilder ;
    private ReaderWriterLock ;
    private int ;
    private static ();
    public Type (IEnumerable`1<> );
    private Type ([] );
    private FieldInfo[] (TypeBuilder , [] );
    private void (TypeBuilder , FieldInfo[] );
    private void (TypeBuilder , FieldInfo[] );
}
internal class  : Exception {
    private int ;
    public int  { get; }
    public (string , int );
    public int get_();
    public virtual string ToString();
}
internal class  : object {
    private static Type[] ;
    private static Expression ;
    private static Expression ;
    private static Expression ;
    private static string ;
    private static string ;
    private static string ;
    private static Dictionary`2<string, object> ;
    private Dictionary`2<string, object> ;
    private IDictionary`2<string, object> ;
    private Dictionary`2<Expression, string> ;
    private ParameterExpression ;
    private string ;
    private int ;
    private int ;
    private char ;
    private  ;
    public (ParameterExpression[] , string , Object[] );
    private static ();
    private void (ParameterExpression[] );
    private void (Object[] );
    private void (string , object );
    public Expression (Type );
    public IEnumerable`1<> ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression (object , string );
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression (Expression , Expression , Expression , int );
    private Expression ();
    private Expression (LambdaExpression );
    private Expression (Type );
    private Expression (Expression , Type , int );
    private Expression (Type , Expression );
    private static Type (Type , Type );
    private Expression (Expression , Type , string , int );
    private Expression[] ();
    private Expression[] ();
    private Expression (Expression );
    private static bool (Type );
    private static bool (Type );
    private static Type (Type );
    private static string (Type );
    private static bool (Type );
    private static bool (Type );
    private static bool (Type );
    private static int (Type );
    private static bool (Type );
    private void (Type , string , Expression& , int );
    private void (Type , string , Expression& , Expression& , int );
    private Exception (string , Expression , Expression , int );
    private MemberInfo (Type , string , bool );
    private int (Type , string , bool , Expression[] , MethodBase& );
    private int (Type , Expression[] , MethodBase& );
    private static IEnumerable`1<Type> (Type );
    private static IEnumerable`1<Type> (Type );
    private static void (List`1<Type> , Type );
    private int (IEnumerable`1<MethodBase> , Expression[] , MethodBase& );
    private bool ( , Expression[] );
    private Expression (Expression , Type , bool );
    private static object (string , Type );
    private static object (string , Type );
    private static bool (Type , Type );
    private static bool (Expression[] ,  ,  );
    private static int (Type , Type , Type );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private MethodInfo (string , Expression , Expression );
    private Expression (string , Expression , Expression );
    private void (int );
    private void ();
    private void ();
    private bool (string );
    private string ();
    private void ();
    private void ( , string );
    private void ( );
    private Exception (string , Object[] );
    private Exception (int , string , Object[] );
    private static Dictionary`2<string, object> ();
}
internal static class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
}
[FlagsAttribute]
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
}
internal class  : object {
    public static Assembly ;
    public static Assembly ();
    public static Byte[] (object , bool );
}
internal class  : object {
    public static void (DbDataReader , DataSet );
    public static void (DbDataReader , DataTable );
}
internal class  : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`4<DbConnection, int, DbTransaction, object> ;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`4<DbConnection, int, DbTransaction, object> ;
    private static Action`4<DbConnection, string, [], IDataReader> ;
    private static Func`5<DbConnection, string, [], IDataReader, object> ;
    private static Action`3<object, string, object> ;
    private static Action`1<object> ;
    private static Func`5<DbConnection, string, [], IDataReader, object> ;
    private static Action`3<object, string, object> ;
    private static Action`1<object> ;
    public static object (BulkOperation , DbConnection , int , DbTransaction );
    public static void (DbConnection , string , [] ,  );
    public static void (DbConnection , string , [] , IDataReader );
    public static void (DbConnection , string , [] , IDataReader , bool );
}
internal class  : object {
    private static Action`2<DbCommand, string> ;
    private static Func`3<DbCommand, int, DbDataReader> ;
    private static Func`2<DbCommand, DbCommand> ;
    public static DbCommand (DbCommand );
    public static void (DbCommand , string );
    public static DbDataReader (DbCommand , int );
}
internal class  : object {
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`2<DbConnection, DbConnection> ;
    private static Func`2<DbConnection, DbConnection> ;
    private static Func`2<DbConnection, DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    public static DbConnection (BulkOperation );
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection (DbConnection );
    public static DbConnection (DbConnection );
    public static DbConnection (DbConnection );
    public static DbConnection (DbConnection );
}
internal class  : object {
    private static Func`2<DbCommand, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`2<DbCommand, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`2<DbCommand, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`2<DbDataAdapter, DbDataAdapter> ;
    private static Func`3<DbDataAdapter, object, DbDataAdapter> ;
    private static Func`2<DbDataAdapter, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    public static DbDataAdapter (BulkOperation , DbCommand );
    public static DbDataAdapter (BulkOperation );
    public static DbDataAdapter ();
    public static DbDataAdapter (DbCommand );
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter (DbDataAdapter , object );
    public static DbDataAdapter (DbDataAdapter );
    public static DbDataAdapter (DbDataAdapter );
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
}
internal class  : object {
    private static Func`4<DbDataReader, int, Object[], bool> ;
    private static Action`1<DbDataReader> ;
    private static Action`1<DbDataReader> ;
    private static Func`2<DbDataReader, IDataRecord> ;
    private static Action`3<DbDataReader, IDataRecord, int> ;
    private static Action`3<DbDataReader, int, object> ;
    public static bool (DbDataReader , int , Object[] );
    public static void (DbDataReader );
    public static void (DbDataReader );
    public static IDataRecord (DbDataReader );
    public static void (DbDataReader , IDataRecord , int );
    public static void (DbDataReader , int , object );
}
internal class  : object {
    private static Action`3<IDataRecord, int, object> ;
    public static void (IDataRecord , int , object );
}
internal class  : object {
    private static Action`3<DbParameter, byte, byte> ;
    private static Action`3<DbParameter, byte, byte> ;
    private static Action`2<DbParameter, string> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, string> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, string> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    public static void (BulkOperation , DbParameter , byte , byte );
    public static void (BulkOperation , DbParameter , string );
    public static void (BulkOperation , DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , string );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
}
internal class  : object {
    private static Func`1<bool> ;
    private static Action`1<DbCommand> ;
    private static Action`1<DbCommand> ;
    public static bool ();
    public static void ();
    public static void (DbCommand );
    public static void (DbCommand );
    public static void (DbCommand );
    internal static int (int );
}
internal class  : object {
    private static Assembly ;
    private static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static void (BulkOperation , Assembly );
    public static Assembly (BulkOperation );
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    internal static int (int );
}
internal class  : object {
    private static Func`2<DbTransaction, DbTransaction> ;
    private static Func`2<DbTransaction, DbTransaction> ;
    public static DbTransaction (DbTransaction );
    public static DbTransaction (DbTransaction );
    public static DbTransaction (DbTransaction );
    internal static int (int );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static List`1<string> ;
    internal static List`1<string> ;
    private static ();
    internal static Dictionary`2<string, string> CreateTable(IDbConnection connection, string tableName, IDbTransaction transaction, CreateTableType createTableNameType);
    public static string (IDbConnection , IEnumerable`1<> , string , CreateTableType , IDbTransaction );
}
internal class  : object {
    internal static string ;
    private static ();
    internal static void (IDbConnection , string , IDbTransaction );
}
internal class  : object {
    internal static Dictionary`2<Type, string> ;
    internal static Dictionary`2<string, string> ;
    internal static List`1<string> ;
    private static ();
}
internal static class  : object {
    internal static string ;
}
internal class  : object {
    public static Type (Type );
    public static string (string );
    public static string (Type , string );
}
internal class  : object {
    public IDbConnection ;
    public bool ;
    public (IDbConnection );
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static Expression (Expression );
    [ExtensionAttribute]
internal static  (Expression , ParameterExpression , MemberInfo );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static [] (LambdaExpression );
}
internal class  : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private object ;
    [CompilerGeneratedAttribute]
private Func`2<object, object> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<MemberInfo> ;
    [CompilerGeneratedAttribute]
private MemberInfo ;
    [CompilerGeneratedAttribute]
private DestinationType ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private Action`1<ColumnMapping> ;
    public string  { get; public set; }
    public string  { get; public set; }
    public bool  { get; public set; }
    public bool  { get; public set; }
    public object  { get; public set; }
    public Func`2<object, object>  { get; public set; }
    public bool  { get; public set; }
    public ReadOnlyCollection`1<MemberInfo>  { get; internal set; }
    public MemberInfo  { get; public set; }
    public DestinationType  { get; public set; }
    public bool  { get; public set; }
    internal Action`1<ColumnMapping>  { get; internal set; }
    public (bool , bool , DestinationType );
    public (string , string , DestinationType );
    public (ReadOnlyCollection`1<MemberInfo> , DestinationType );
    public (MemberInfo , DestinationType );
    [CompilerGeneratedAttribute]
public string get_();
    [CompilerGeneratedAttribute]
public void set_(string value);
    [CompilerGeneratedAttribute]
public string get_();
    [CompilerGeneratedAttribute]
public void set_(string value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    [CompilerGeneratedAttribute]
public object get_();
    [CompilerGeneratedAttribute]
public void set_(object value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_();
    [CompilerGeneratedAttribute]
public void set_(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<MemberInfo> get_();
    [CompilerGeneratedAttribute]
internal void set_(ReadOnlyCollection`1<MemberInfo> value);
    [CompilerGeneratedAttribute]
public MemberInfo get_();
    [CompilerGeneratedAttribute]
public void set_(MemberInfo value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public DestinationType get_();
    [CompilerGeneratedAttribute]
public void set_(DestinationType value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    [CompilerGeneratedAttribute]
internal Action`1<ColumnMapping> get_();
    [CompilerGeneratedAttribute]
internal void set_(Action`1<ColumnMapping> value);
}
