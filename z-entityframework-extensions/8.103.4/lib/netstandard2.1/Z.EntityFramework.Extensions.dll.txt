[ExtensionAttribute]
public static class BulkReadAsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<List`1<T>> BulkReadAsync(IQueryable`1<T> query, IEnumerable list, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> BulkReadAsync(IQueryable`1<T> query, IEnumerable list, Expression`1<Func`2<T, object>> keyExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> BulkReadAsync(IQueryable`1<T> query, IEnumerable list, List`1<string> keyNames, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> BulkReadAsync(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> selector, IEnumerable list, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> BulkReadAsync(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> selector, IEnumerable list, Expression`1<Func`2<TChild, object>> keyExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> BulkReadAsync(IQueryable`1<T> query, Expression`1<Func`2<T, IEnumerable`1<TChild>>> selector, IEnumerable list, Expression`1<Func`2<TChild, object>> keyExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> BulkReadAsync(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> selector, IEnumerable list, List`1<string> keyNames, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class BulkReadExtensions : object {
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, IEnumerable list);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, IEnumerable list, Expression`1<Func`2<T, object>> keyExpression);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, IEnumerable list, List`1<string> keyNames);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, IEnumerable list, String[] keyNames);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> selector, IEnumerable list);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> selector, IEnumerable list, Expression`1<Func`2<TChild, object>> keyExpression);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, Expression`1<Func`2<T, IEnumerable`1<TChild>>> selector, IEnumerable list, Expression`1<Func`2<TChild, object>> keyExpression);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> selector, IEnumerable list, List`1<string> keyNames);
    [ExtensionAttribute]
public static List`1<T> BulkRead(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> selector, IEnumerable list, String[] keyNames);
}
[ExtensionAttribute]
public static class DatabaseExtensions : object {
    [ExtensionAttribute]
public static MySqlDatabase MySqlDatabase(Database this);
    [ExtensionAttribute]
public static OracleDevArtDatabase OracleDevArtDatabase(Database this);
    [ExtensionAttribute]
public static SqlCeDatabase SqlCeDatabase(Database this);
    [ExtensionAttribute]
public static SqlDatabase SqlDatabase(Database this);
    [ExtensionAttribute]
public static SQLiteDatabase SQLiteDatabase(Database this);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataSet> ExecuteDataSetAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DataTable> ExecuteDataTableAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteEntitiesWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteEntityWithMappingAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteExpandoObjectAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> ExecuteExpandoObjectsAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, Action`1<DbCommand> commandFactory, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, DbTransaction transaction, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, CommandType commandType, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, DbParameter[] parameters, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteReaderAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, Func`2<DbDataReader, Task> readerAction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarToAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DatabaseExtensions/")]
[ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, Action`1<DbCommand> commandFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, CommandType commandType, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, DbParameter[] parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<XmlReader> ExecuteXmlReaderAsync(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static DataSet ExecuteDataSet(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static DataTable ExecuteDataTable(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntities(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteEntitiesWithMapping(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntity(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteEntityWithMapping(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteExpandoObject(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static IEnumerable`1<object> ExecuteExpandoObjects(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static int ExecuteNonQuery(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, Action`1<DbCommand> commandFactory, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, DbTransaction transaction, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, CommandType commandType, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, CommandType commandType, DbTransaction transaction, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, DbParameter[] parameters, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static void ExecuteReader(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, Action`1<DbDataReader> readerAction);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static object ExecuteScalar(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarAs(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static T ExecuteScalarTo(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, Action`1<DbCommand> commandFactory);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText, DbParameter[] parameters, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText, DbTransaction transaction);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText, CommandType commandType);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText, CommandType commandType, DbTransaction transaction);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText, DbParameter[] parameters);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText, DbParameter[] parameters, DbTransaction transaction);
    [ExtensionAttribute]
public static XmlReader ExecuteXmlReader(Database this, string cmdText, DbParameter[] parameters, CommandType commandType);
    [ExtensionAttribute]
public static T GetConnection(Database this);
    [ExtensionAttribute]
public static T GetContext(Database this);
    [ExtensionAttribute]
public static DbContext GetDbContext(Database this);
    [ExtensionAttribute]
public static DbTransaction GetDbTransaction(Database this);
    [ExtensionAttribute]
public static DbTransaction GetDbTransaction(EntityTransaction this);
    [ExtensionAttribute]
public static EntityConnection GetEntityConnection(Database this);
    [ExtensionAttribute]
public static EntityTransaction GetEntityTransaction(Database this);
    [ExtensionAttribute]
public static TTransaction GetTransaction(Database this);
    [ExtensionAttribute]
public static TTransaction GetTransaction(EntityTransaction this);
    [ExtensionAttribute]
internal static DbContextTransaction (Database this, Nullable`1<IsolationLevel> );
    [ExtensionAttribute]
internal static string (EntityKey this);
}
[ExtensionAttribute]
public static class DbContextExtensions : object {
    [ExtensionAttribute]
public static int BatchSaveChanges(DbContext this);
    [ExtensionAttribute]
internal static int (DbContext this, SaveOptions );
    [ExtensionAttribute]
public static int BatchSaveChanges(DbContext this, Action`1<BatchSaveChangesOptions> batchSaveChangesOptionsFactory);
    [ExtensionAttribute]
internal static int (DbContext this, SaveOptions , Action`1<BatchSaveChangesOptions> );
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(DbContext this);
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(DbContext this, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<int> (DbContext this, SaveOptions , CancellationToken );
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(DbContext this, Action`1<BatchSaveChangesOptions> batchSaveChangesOptionsFactory);
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(DbContext this, Action`1<BatchSaveChangesOptions> batchSaveChangesOptionsFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<int> (DbContext this, SaveOptions , Action`1<BatchSaveChangesOptions> , CancellationToken );
    [ExtensionAttribute]
internal static void (EntityBulkOperation`1<> , DbContext this, IEnumerable`1<> , Action`1<EntityBulkOperation`1<>> , Action`3<DbContext, IEnumerable`1<>, Action`1<EntityBulkOperation`1<>>> );
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, Type type, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, Type type, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, Type type, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, Type type, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<object> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, Type type, IEnumerable`1<object> entities);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, Type type, IEnumerable`1<object> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, Type type, IEnumerable`1<object> entities, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, Type type, IEnumerable`1<object> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, object entity);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, object entity);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, object entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, Type type, object entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, Type type, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, object entity);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, object entity);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, object entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, Type type, object entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, Type type, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, object entity);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, object entity);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, object entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, Type type, object entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, Type type, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, object entity);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, object entity);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, object entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, Type type, object entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, Type type, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, object entity);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, object entity);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, object entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, object entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, Type type, object entity);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, Type type, object entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, Type type, object entity, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, Type type, object entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, Type type, object entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkDelete(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static void BulkInsert(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, List`1<object> entitiesToUpdate);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
internal static void BulkInsert(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options, List`1<object> entitiesToUpdate);
    [ExtensionAttribute]
public static void BulkInsert(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkInsertAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkMerge(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkMergeAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkSynchronize(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkUpdate(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(DbContext this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int DeleteFromQuery(IQueryable`1<TEntity> query);
    [ExtensionAttribute]
public static int DeleteFromQuery(IQueryable`1<TEntity> query, Action`1<BulkOperation> bulkOperationFactory);
    private static int (IQueryable`1<> , Action`1<BulkOperation> , CancellationToken );
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> DeleteFromQueryAsync(IQueryable`1<TEntity> query);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> DeleteFromQueryAsync(IQueryable`1<TEntity> query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> DeleteFromQueryAsync(IQueryable`1<TEntity> query, Action`1<BulkOperation> bulkOperationFactory);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> DeleteFromQueryAsync(IQueryable`1<TEntity> query, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
internal static int (IQueryable`1<> , Expression`1<Func`2<, >> , Action`1<BulkOperation> , bool );
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, ExpandoObject expandoObject);
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, ExpandoObject expandoObject, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, IDictionary`2<string, object> dictionary);
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, IDictionary`2<string, object> dictionary, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> updateExpression);
    [ExtensionAttribute]
public static int UpdateFromQuery(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> updateExpression, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
internal static int (IQueryable`1<> , Expression`1<Func`2<, object>> , Action`1<BulkOperation> , bool );
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression, Action`1<BulkOperation> bulkOperationFactory);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, TEntity>> updateExpression, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, ExpandoObject expandoObject);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, ExpandoObject expandoObject, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, ExpandoObject expandoObject, Action`1<BulkOperation> bulkOperationFactory);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, ExpandoObject expandoObject, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, IDictionary`2<string, object> dictionary);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, IDictionary`2<string, object> dictionary, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, IDictionary`2<string, object> dictionary, Action`1<BulkOperation> bulkOperationFactory);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, IDictionary`2<string, object> dictionary, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> updateExpression);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> updateExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> updateExpression, Action`1<BulkOperation> bulkOperationFactory);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> updateExpression, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> selectExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, string tableName, Expression`1<Func`2<TEntity, object>> selectExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, Type tableType, Expression`1<Func`2<TEntity, object>> selectExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, string schemaName, string tableName, Expression`1<Func`2<TEntity, object>> selectExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, string schemaName, Type tableType, Expression`1<Func`2<TEntity, object>> selectExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, string databaseName, string schemaName, string tableName, Expression`1<Func`2<TEntity, object>> selectExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, string databaseName, string schemaName, Type tableType, Expression`1<Func`2<TEntity, object>> selectExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> InsertFromQueryAsync(IQueryable`1<TEntity> query, Action`1<BatchInsert`1<TEntity>> batchInsertBuilder, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<int> (IQueryable`1<> , string , string , string , Type , Expression`1<Func`2<, object>> , CancellationToken );
    [ExtensionAttribute]
internal static Task`1<int> (IQueryable`1<> , Action`1<BatchInsert`1<>> , CancellationToken );
    [ExtensionAttribute]
internal static Action`1<EntityBulkOperation`1<>> (Action`1<EntityBulkOperation`1<>> this);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, T entity);
    [ExtensionAttribute]
public static void SingleDelete(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, T entity);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, T entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(DbContext this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, T entity);
    [ExtensionAttribute]
public static void SingleInsert(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, T entity);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, T entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleInsertAsync(DbContext this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, T entity);
    [ExtensionAttribute]
public static void SingleMerge(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, T entity);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, T entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleMergeAsync(DbContext this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, T entity);
    [ExtensionAttribute]
public static void SingleSynchronize(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, T entity);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, T entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(DbContext this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, T entity);
    [ExtensionAttribute]
public static void SingleUpdate(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, T entity);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, T entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/`1")]
[ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(DbContext this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkSaveChanges(DbContext this);
    [ExtensionAttribute]
public static void BulkSaveChanges(DbContext this, bool useEntityFrameworkPropagation);
    [ExtensionAttribute]
public static void BulkSaveChanges(DbContext this, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSaveChanges(DbContext this, BulkOperationOptions options);
    [ExtensionAttribute]
public static void BulkSaveChanges(DbContext this, bool useEntityFrameworkPropagation, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSaveChanges(DbContext this, bool useEntityFrameworkPropagation, BulkOperationOptions options);
    [ExtensionAttribute]
internal static void (DbContext this, bool , Action`1<BulkOperation> , bool );
    internal static void (DbContext this);
    internal static void (DbContext this);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, bool useEntityFrameworkPropagation);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, bool useEntityFrameworkPropagation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, Action`1<BulkOperation> bulkOperationFactory);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, bool useEntityFrameworkPropagation, Action`1<BulkOperation> bulkOperationFactory);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, bool useEntityFrameworkPropagation, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, BulkOperationOptions options);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, BulkOperationOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, bool useEntityFrameworkPropagation, BulkOperationOptions options);
    [AsyncStateMachineAttribute("DbContextExtensions/")]
[ExtensionAttribute]
public static Task BulkSaveChangesAsync(DbContext this, bool useEntityFrameworkPropagation, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static MySqlDatabase MySqlDatabase(DbContext this);
    [ExtensionAttribute]
public static OracleDevArtDatabase OracleDevArtDatabase(DbContext this);
    [ExtensionAttribute]
public static SqlCeDatabase SqlCeDatabase(DbContext this);
    [ExtensionAttribute]
public static SqlDatabase SqlDatabase(DbContext this);
    [ExtensionAttribute]
public static SQLiteDatabase SQLiteDatabase(DbContext this);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, Expression`1<Func`2<TEntity, object>> selectExpression);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, string tableName, Expression`1<Func`2<TEntity, object>> selectExpression);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, Type tableType, Expression`1<Func`2<TEntity, object>> selectExpression);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, string schemaName, string tableName, Expression`1<Func`2<TEntity, object>> selectExpression);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, string schemaName, Type tableType, Expression`1<Func`2<TEntity, object>> selectExpression);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, string databaseName, string schemaName, string tableName, Expression`1<Func`2<TEntity, object>> selectExpression);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, string databaseName, string schemaName, Type tableType, Expression`1<Func`2<TEntity, object>> selectExpression);
    [ExtensionAttribute]
public static int InsertFromQuery(IQueryable`1<TEntity> query, Action`1<BatchInsert`1<TEntity>> batchInsertBuilder);
    [ExtensionAttribute]
internal static int (IQueryable`1<> , string , string , string , Type , Expression`1<Func`2<, object>> );
    [ExtensionAttribute]
internal static int (IQueryable`1<> , Action`1<BatchInsert`1<>> );
    [ExtensionAttribute]
public static DbModel GetModel(DbContext this);
    [ExtensionAttribute]
public static ObjectContext GetObjectContext(DbContext this);
    [ExtensionAttribute]
public static IDataReader ToDataReader(DbContext this, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static IDataReader ToDataReader(DbContext this, IEnumerable`1<T> list, Type type, bool keyOnly, bool addEntityColumn);
    [ExtensionAttribute]
public static IDataReader ToDataReader(DbContext this, IEnumerable`1<T> list, string typeName, bool keyOnly, bool addEntityColumn);
    [ExtensionAttribute]
internal static IDataReader (DbContext this, IEnumerable`1<> , List`1<object> , bool );
    [ExtensionAttribute]
internal static IDataReader (DbContext this, IEnumerable`1<> , Type , List`1<object> , bool , bool , List`1<string> , bool );
    [ExtensionAttribute]
internal static IDataReader (DbContext this, IEnumerable`1<> , string , List`1<object> , bool , bool , List`1<string> , bool );
    internal static void ( , DbContext );
    [ExtensionAttribute]
public static DataSet ToDataSet(DbContext this, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static DataSet ToDataSet(DbContext this, IEnumerable`1<T> list, bool includeInheritance);
    [ExtensionAttribute]
public static DataSet ToDataSet(DbContext this, IEnumerable`1<T> items, Type type, bool includeInheritance);
    [ExtensionAttribute]
public static DataTable ToDataTable(DbContext this, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static DataTable ToDataTable(DbContext this, IEnumerable`1<T> list, Type type, bool keyOnly, bool addEntityColumn);
    [ExtensionAttribute]
public static DataTable ToDataTable(DbContext this, IEnumerable`1<T> list, string typeName, bool keyOnly, bool addEntityColumn);
    [ExtensionAttribute]
internal static DataTable (DbContext this, IEnumerable`1<> , List`1<object> , bool );
    [ExtensionAttribute]
internal static DataTable (DbContext this, IEnumerable`1<> , Type , List`1<object> , bool , bool );
    [ExtensionAttribute]
internal static DataTable (DbContext this, IEnumerable`1<> , string , List`1<object> , bool , bool );
    internal static void (DataTable );
    [ExtensionAttribute]
public static DbContext GetContext(IQueryable`1<TEntity> query);
    [ExtensionAttribute]
public static DbContext GetDbContext(ObjectContext this);
    [ExtensionAttribute]
internal static bool (ObjectContext this, DbContext& );
    [ExtensionAttribute]
public static void ExecuteFutureAction(T this, bool useTransaction);
    [ExtensionAttribute]
public static void ExecuteFutureAction(T this, Action`1<ExecuteFutureOption> executeFutureActionOption);
    [ExtensionAttribute]
public static void FutureAction(T this, Action`1<T> action);
    [ExtensionAttribute]
public static void BulkDelete(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkDelete(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(ObjectContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkInsert(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkInsert(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkInsertAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkInsertAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkInsertAsync(ObjectContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkMerge(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkMerge(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkMergeAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkMergeAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkMergeAsync(ObjectContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int BatchSaveChanges(ObjectContext this);
    [ExtensionAttribute]
public static int BatchSaveChanges(ObjectContext this, SaveOptions saveOptions);
    [ExtensionAttribute]
public static void BulkSaveChanges(ObjectContext this);
    [ExtensionAttribute]
public static void BulkSaveChanges(ObjectContext this, bool useEntityFrameworkPropagation);
    [ExtensionAttribute]
public static void BulkSaveChanges(ObjectContext this, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSaveChanges(ObjectContext this, bool useEntityFrameworkPropagation, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(ObjectContext this);
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(ObjectContext this, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(ObjectContext this, SaveOptions saveOptions);
    [ExtensionAttribute]
public static Task`1<int> BatchSaveChangesAsync(ObjectContext this, SaveOptions saveOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this, bool useEntityFrameworkPropagation);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this, bool useEntityFrameworkPropagation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this, bool useEntityFrameworkPropagation, Action`1<BulkOperation> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkSaveChangesAsync(ObjectContext this, bool useEntityFrameworkPropagation, Action`1<BulkOperation> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkSynchronize(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSynchronize(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(ObjectContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkUpdate(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkUpdate(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(ObjectContext this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(ObjectContext this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(ObjectContext this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Add(List`1<SelfHierarchyListColumnMapping> columnMappings, string columnName, string recursiveColumnName);
    [ExtensionAttribute]
public static List`1<T> ToSelfHierarchyList(IQueryable`1<T> query, Expression`1<Func`2<T, object>> joinExpression, Action`1<SelfHierarchyListOptions`1<T>> options);
    [ExtensionAttribute]
internal static void (DbConnection this, DbContext );
    [ExtensionAttribute]
internal static void (DbConnection this, DbContext );
    [ExtensionAttribute]
internal static Task (DbConnection this, DbContext , CancellationToken );
    [ExtensionAttribute]
internal static void (BulkOperation this, DbContext );
    [ExtensionAttribute]
internal static EntityBulkOperation`1<> (DbContext );
    [ExtensionAttribute]
internal static EntityBulkOperation`1<> (DbContext , Action`1<EntityBulkOperation`1<>> );
    [ExtensionAttribute]
internal static EntityBulkOperation`1<> (DbContext , IEnumerable`1<> );
    [ExtensionAttribute]
internal static EntityBulkOperation`1<> (DbContext , Action`1<BulkOperation`1<>> , IEnumerable`1<> );
    [ExtensionAttribute]
internal static string (DbContext );
    [ExtensionAttribute]
public static void RefreshModel(DbContext this);
    [ExtensionAttribute]
public static DbContext GetOrCreateDbContext(ObjectContext this);
    [ExtensionAttribute]
public static Type GetRealType(ObjectContext this);
}
[ExtensionAttribute]
public static class DbSetExtensions : object {
    [ExtensionAttribute]
public static Task`1<int> DeleteByKeyAsync(DbSet`1<TEntity> dbSet, T entityOrKeyValue);
    [ExtensionAttribute]
public static Task`1<int> DeleteByKeyAsync(DbSet`1<TEntity> dbSet, Object[] keyValues);
    [ExtensionAttribute]
public static Task`1<int> DeleteByKeyAsync(DbSet`1<TEntity> dbSet, CancellationToken cancellationToken, T entityOrKeyValue);
    [ExtensionAttribute]
public static Task`1<int> DeleteByKeyAsync(DbSet`1<TEntity> dbSet, CancellationToken cancellationToken, Object[] keyValues);
    [ExtensionAttribute]
public static Task`1<int> DeleteRangeByKeyAsync(DbSet`1<TEntity> dbSet, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task`1<int> DeleteRangeByKeyAsync(DbSet`1<TEntity> dbSet, CancellationToken cancellationToken, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static int DeleteRangeByKey(DbSet`1<TEntity> dbSet, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static int DeleteByKey(DbSet`1<TEntity> dbSet, T entityOrKeyValue);
    [ExtensionAttribute]
public static int DeleteByKey(DbSet`1<TEntity> dbSet, Object[] keyValues);
}
[ExtensionAttribute]
public static class IDbSetExtensions : object {
    [ExtensionAttribute]
public static void BulkDelete(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkDelete(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkDelete(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkDeleteAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkInsert(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkInsert(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkInsert(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkInsertAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkInsertAsync(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkInsertAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkInsertAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkInsertAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkMerge(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkMerge(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkMerge(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkMergeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkMergeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkMergeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkMergeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkMergeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkSynchronize(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkSynchronize(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkSynchronize(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkSynchronizeAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void BulkUpdate(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void BulkUpdate(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static void BulkUpdate(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(IDbSet`1<T> this, IEnumerable`1<T> entities);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task BulkUpdateAsync(IDbSet`1<T> this, IEnumerable`1<T> entities, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleDelete(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleDelete(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static void SingleDelete(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(IDbSet`1<T> this, T entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleDeleteAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleInsert(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleInsert(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static void SingleInsert(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleInsertAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleInsertAsync(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static Task SingleInsertAsync(IDbSet`1<T> this, T entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleInsertAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleInsertAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleInsertAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleMerge(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleMerge(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static void SingleMerge(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleMergeAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleMergeAsync(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static Task SingleMergeAsync(IDbSet`1<T> this, T entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleMergeAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleMergeAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleMergeAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static void SingleSynchronize(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(IDbSet`1<T> this, T entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleSynchronizeAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SingleUpdate(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static void SingleUpdate(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static void SingleUpdate(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(IDbSet`1<T> this, T entity);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(IDbSet`1<T> this, T entity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(IDbSet`1<T> this, T entity, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options);
    [ExtensionAttribute]
public static Task SingleUpdateAsync(IDbSet`1<T> this, T entity, BulkOperationOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static EntityBulkOperationOptions`1<T> CreateBulkOptions(DbContext this);
    [ExtensionAttribute]
public static BulkOperationOptions CreateBulkOptions(DbContext this);
    [ExtensionAttribute]
public static EntityBulkOperationOptions`1<T> CreateBulkOptions(DbSet`1<T> this);
    [ExtensionAttribute]
public static IEnumerable`1<TEntity> DetachRange(IDbSet`1<TEntity> set, IEnumerable`1<TEntity> entities);
    [ExtensionAttribute]
public static void AddOrUpdateExtension(IDbSet`1<TEntity> set, List`1<TEntity> entities);
    [ExtensionAttribute]
public static void AddOrUpdateExtension(IDbSet`1<TEntity> set, Expression`1<Func`2<TEntity, object>> identifierExpression, List`1<TEntity> entities);
    [ExtensionAttribute]
public static void AddOrUpdateExtension(IDbSet`1<TEntity> set, TEntity[] entities);
    [ExtensionAttribute]
public static void AddOrUpdateExtension(IDbSet`1<TEntity> set, Expression`1<Func`2<TEntity, object>> identifierExpression, TEntity[] entities);
    [ExtensionAttribute]
public static TEntity Attach(IDbSet`1<TEntity> set, TEntity entity, EntityState state);
    [ExtensionAttribute]
public static IEnumerable`1<TEntity> AttachRange(IDbSet`1<TEntity> set, IEnumerable`1<TEntity> entities);
    [ExtensionAttribute]
public static IEnumerable`1<TEntity> AttachRange(IDbSet`1<TEntity> set, IEnumerable`1<TEntity> entities, EntityState state);
}
[ExtensionAttribute]
public static class QueryHookExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> HookExecuting(IQueryable`1<T> this, Action`2<DbCommand, DbContext> action);
    [ExtensionAttribute]
public static IQueryable`1<T> Hook(IQueryable`1<T> this, IQueryHook hook);
}
[ExtensionAttribute]
public static class System.Linq.ToExpandoListForBulkExtensions : object {
    [ExtensionAttribute]
public static List`1<ExpandoObject> ToExpandoListForBulk(IEnumerable`1<Dictionary`2<string, T>> source);
}
[ExtensionAttribute]
public static class WhereBulkContainsExtensions : object {
    internal static MethodInfo ;
    internal static MethodInfo  { get; }
    internal static MethodInfo get_();
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, IEnumerable isInList);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, IEnumerable isInList, List`1<string> keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, IEnumerable isInList, String[] keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, IEnumerable isInList, Expression`1<Func`2<T, object>> keyExpression);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList, List`1<string> keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList, String[] keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, Expression`1<Func`2<T, IEnumerable`1<TChild>>> selector, IEnumerable isInList, Expression`1<Func`2<TChild, object>> keyExpression);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList, Expression`1<Func`2<TChild, object>> keyExpression);
    public static IQueryable`1<T> WhereBulkContainsInternal(IQueryable`1<T> this, IEnumerable entities, Expression`1<Func`2<TChild, object>> keyExpression, List`1<string> keyNames, bool killMeAfterUse);
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable`1<> , Expression`1<Func`2<, object>> , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , Expression`1<Func`2<, object>> , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable`1<> , Expression`1<Func`2<, object>> , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , Expression`1<Func`2<, object>> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, Expression`1<Func`2<, >> , IEnumerable , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, Expression`1<Func`2<, >> , IEnumerable , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, Expression`1<Func`2<, IEnumerable`1<>>> , IEnumerable , Expression`1<Func`2<, object>> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, Expression`1<Func`2<, >> , IEnumerable , Expression`1<Func`2<, object>> , bool );
}
[ExtensionAttribute]
public static class WhereBulkNotContainsExtensions : object {
    internal static MethodInfo ;
    internal static MethodInfo  { get; }
    internal static MethodInfo get_();
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, IEnumerable isInList);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, IEnumerable isInList, List`1<string> keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, IEnumerable isInList, String[] keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, IEnumerable isInList, Expression`1<Func`2<T, object>> keyExpression);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList, List`1<string> keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList, String[] keyNames);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, Expression`1<Func`2<T, IEnumerable`1<TChild>>> selector, IEnumerable isInList, Expression`1<Func`2<TChild, object>> keyExpression);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereBulkNotContains(IQueryable`1<T> this, Expression`1<Func`2<T, TChild>> selector, IEnumerable isInList, Expression`1<Func`2<TChild, object>> keyExpression);
    public static IQueryable`1<T> WhereBulkNotContainsInternal(IQueryable`1<T> this, IEnumerable entities, Expression`1<Func`2<TChild, object>> keyExpression, List`1<string> keyNames, bool killMeAfterUse);
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable`1<> , Expression`1<Func`2<, object>> , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , Expression`1<Func`2<, object>> , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable`1<> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable`1<> , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable`1<> , Expression`1<Func`2<, object>> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable`1<> , Expression`1<Func`2<, object>> , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , List`1<string> , bool );
    [ExtensionAttribute]
internal static IQueryable`1<> (IQueryable`1<> this, IEnumerable , Expression`1<Func`2<, object>> , bool );
}
public enum Z.BulkOperations.AuditActionType : Enum {
    public int value__;
    public static AuditActionType Delete;
    public static AuditActionType Insert;
    public static AuditActionType Update;
    public static AuditActionType SoftDelete;
}
public class Z.BulkOperations.AuditEntry : object {
    internal AuditActionType ;
    internal DateTime ;
    internal Dictionary`2<object, object> ;
    internal string ;
    internal List`1<AuditEntryItem> ;
    public AuditActionType Action { get; public set; }
    public DateTime Date { get; public set; }
    public Dictionary`2<object, object> Metas { get; public set; }
    public string TableName { get; public set; }
    public List`1<AuditEntryItem> Values { get; public set; }
    public AuditActionType get_Action();
    public void set_Action(AuditActionType value);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public Dictionary`2<object, object> get_Metas();
    public void set_Metas(Dictionary`2<object, object> value);
    public string get_TableName();
    public void set_TableName(string value);
    public List`1<AuditEntryItem> get_Values();
    public void set_Values(List`1<AuditEntryItem> value);
}
public class Z.BulkOperations.AuditEntryItem : object {
    internal string ;
    internal object ;
    internal object ;
    public string ColumnName { get; public set; }
    public object NewValue { get; public set; }
    public object OldValue { get; public set; }
    public string get_ColumnName();
    public void set_ColumnName(string value);
    public object get_NewValue();
    public void set_NewValue(object value);
    public object get_OldValue();
    public void set_OldValue(object value);
}
public enum Z.BulkOperations.AuditModeType : Enum {
    public int value__;
    public static AuditModeType IncludeAll;
    public static AuditModeType ExcludeAll;
}
public enum Z.BulkOperations.AutoMapType : Enum {
    public int value__;
    public static AutoMapType ByName;
    public static AutoMapType ByOrdinal;
    public static AutoMapType ByIndexerName;
}
[ObsoleteAttribute("Use BulkOperation class instead. This class will be removed at the start of 2019.")]
public class Z.BulkOperations.BasicBulkOperation : object {
    internal BulkOperation ;
    public BulkOperation Advanced { get; }
    public int BatchSize { get; public set; }
    public List`1<BasicColumnMapping> ColumnMappings { get; public set; }
    public DbConnection Connection { get; public set; }
    public object DataSource { get; public set; }
    public string DestinationTableName { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public void BulkDelete();
    public void BulkDelete(object datasource);
    public void BulkDelete(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkDeleteAsync(CancellationToken cancellationToken);
    public virtual Task BulkDeleteAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkDeleteAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public void BulkInsert();
    public void BulkInsert(object datasource);
    public void BulkInsert(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkInsertAsync(CancellationToken cancellationToken);
    public virtual Task BulkInsertAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkInsertAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public void BulkMerge();
    public void BulkMerge(object datasource);
    public void BulkMerge(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkMergeAsync(CancellationToken cancellationToken);
    public virtual Task BulkMergeAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkMergeAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public virtual void BulkSaveChanges(DataTable dt);
    public virtual Task BulkSaveChangesAsync(DataTable dt, CancellationToken cancellationToken);
    public virtual void BulkSynchronize();
    public virtual void BulkSynchronize(object datasource);
    public virtual Task BulkSynchronizeAsync(CancellationToken cancellationToken);
    public virtual Task BulkSynchronizeAsync(object datasource, CancellationToken cancellationToken);
    public void BulkUpdate();
    public void BulkUpdate(object datasource);
    public void BulkUpdate(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkUpdateAsync(CancellationToken cancellationToken);
    public virtual Task BulkUpdateAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkUpdateAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public BulkOperation get_Advanced();
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public List`1<BasicColumnMapping> get_ColumnMappings();
    public void set_ColumnMappings(List`1<BasicColumnMapping> value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
}
[ObsoleteAttribute("Use BulkOperation class instead. This class will be removed at the start of 2019.")]
public class Z.BulkOperations.BasicBulkOperation`1 : object {
    internal BulkOperation`1<TEntity> ;
    internal List`1<BasicColumnMapping`1<TEntity>> ;
    public BulkOperation`1<TEntity> Advanced { get; }
    public int BatchSize { get; public set; }
    public List`1<BasicColumnMapping`1<TEntity>> ColumnMappings { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnPrimaryKeyExpression { get; public set; }
    public DbConnection Connection { get; public set; }
    public object DataSource { get; public set; }
    public string DestinationTableName { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public void BulkDelete();
    public void BulkDelete(List`1<TEntity> datasource);
    public virtual Task BulkDeleteAsync(CancellationToken cancellationToken);
    public virtual Task BulkDeleteAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public void BulkInsert();
    public void BulkInsert(List`1<TEntity> datasource);
    public virtual Task BulkInsertAsync(CancellationToken cancellationToken);
    public virtual Task BulkInsertAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public void BulkMerge();
    public void BulkMerge(List`1<TEntity> datasource);
    public virtual Task BulkMergeAsync(CancellationToken cancellationToken);
    public virtual Task BulkMergeAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public virtual void BulkSynchronize();
    public virtual void BulkSynchronize(List`1<TEntity> datasource);
    public virtual Task BulkSynchronizeAsync(CancellationToken cancellationToken);
    public virtual Task BulkSynchronizeAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public void BulkUpdate();
    public void BulkUpdate(List`1<TEntity> datasource);
    public virtual Task BulkUpdateAsync(CancellationToken cancellationToken);
    public virtual Task BulkUpdateAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public BulkOperation`1<TEntity> get_Advanced();
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public List`1<BasicColumnMapping`1<TEntity>> get_ColumnMappings();
    public void set_ColumnMappings(List`1<BasicColumnMapping`1<TEntity>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
}
public class Z.BulkOperations.BasicColumnMapping : object {
    internal ColumnMapping ;
    public ColumnMapping Advanced { get; }
    public string DestinationName { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public ColumnMappingDirectionType Direction { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public string SourceName { get; public set; }
    public int SourceOrdinal { get; public set; }
    public BasicColumnMapping(string columnName);
    public BasicColumnMapping(string columnName, bool isPrimaryKey);
    public BasicColumnMapping(string columnName, ColumnMappingDirectionType direction);
    public BasicColumnMapping(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping(string sourceName, string destinationName);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal);
    public BasicColumnMapping(int sourceOrdinal, string destinationName);
    public BasicColumnMapping(string sourceName, int destinationOrdinal);
    public BasicColumnMapping(string sourceName, string destinationName, bool isPrimaryKey);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public BasicColumnMapping(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public BasicColumnMapping(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping get_Advanced();
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public ColumnMappingDirectionType get_Direction();
    public void set_Direction(ColumnMappingDirectionType value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
public class Z.BulkOperations.BasicColumnMapping`1 : object {
    internal ColumnMapping`1<TEntity> ;
    public ColumnMapping`1<TEntity> Advanced { get; }
    public Expression`1<Func`2<TEntity, object>> DestinationExpression { get; public set; }
    public string DestinationName { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public ColumnMappingDirectionType Direction { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SourceExpression { get; public set; }
    public string SourceName { get; public set; }
    public int SourceOrdinal { get; public set; }
    public object InternalAdvanced { get; }
    public BasicColumnMapping`1(string columnName);
    public BasicColumnMapping`1(string columnName, bool isPrimaryKey);
    public BasicColumnMapping`1(string columnName, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(string sourceName, string destinationName);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal);
    public BasicColumnMapping`1(int sourceOrdinal, string destinationName);
    public BasicColumnMapping`1(string sourceName, int destinationOrdinal);
    public BasicColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public BasicColumnMapping`1(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    public BasicColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1<TEntity> get_Advanced();
    public Expression`1<Func`2<TEntity, object>> get_DestinationExpression();
    public void set_DestinationExpression(Expression`1<Func`2<TEntity, object>> value);
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public ColumnMappingDirectionType get_Direction();
    public void set_Direction(ColumnMappingDirectionType value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public Expression`1<Func`2<TEntity, object>> get_SourceExpression();
    public void set_SourceExpression(Expression`1<Func`2<TEntity, object>> value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
    public sealed virtual object get_InternalAdvanced();
}
public class Z.BulkOperations.BulkOperation : object {
    [CompilerGeneratedAttribute]
private CancellationToken ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal List`1<AuditEntry> ;
    internal AuditModeType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private InternalOptions ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal TimeSpan ;
    internal bool ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal AutoMapType ;
    internal string ;
    internal string ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal Func`3<string, object, object> ;
    internal Action`2<string, ColumnMapping> ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal List`1<> ;
    internal CaseSensitiveType ;
    internal bool ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal bool ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal List`1<BasicColumnMapping> ;
    internal IEnumerable`1<> ;
    internal List`1<ColumnMapping> ;
    internal IEnumerable`1<object> ;
    internal DefaultValueResolutionType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal DbConnection ;
    internal Func`1<DbConnection> ;
    internal string ;
    internal string ;
    internal CustomProvider ;
    internal object ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    public bool _isDapperPlus;
    public bool _isLinqToSql;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal bool ;
    internal Action`1<BulkOperation> ;
    internal bool ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Action`1<BatchDelete> ;
    internal Action`1<BatchUpdate> ;
    internal Func`2<DbContext, DbContext> ;
    public object _postConfiguration;
    internal bool ;
    internal bool ;
    internal Nullable`1<bool> ;
    public int _StreamSize;
    private Type ;
    internal bool ;
    internal ErrorModeType ;
    internal List`1<BulkOperationError> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal Type ;
    internal Action`1<string> ;
    internal Action`1<string> ;
    internal StringBuilder ;
    internal bool ;
    internal Stopwatch ;
    internal Action`2<object, StringBuilder> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal ProviderType ;
    internal Assembly ;
    internal ResolutionType ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal ResultInfo ;
    internal bool ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal Nullable`1<int> ;
    internal Nullable`1<bool> ;
    internal int ;
    internal int ;
    internal int ;
    internal string ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal InternalTransactionType ;
    internal DbTransaction ;
    internal Nullable`1<IsolationLevel> ;
    internal int ;
    internal TimeSpan ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal BulkOperationActionType ;
    internal ConcurrentBag`1<AuditEntry> ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
    internal CancellationToken  { get; internal set; }
    internal bool  { get; internal set; }
    internal bool  { get; internal set; }
    internal bool  { get; }
    public List`1<AuditEntry> AuditEntries { get; public set; }
    public AuditModeType AuditMode { get; public set; }
    public bool UseAudit { get; public set; }
    public bool TestExecuteAsync { get; public set; }
    internal bool  { get; internal set; }
    public bool ForceRowsAffectedValidation { get; public set; }
    public InternalOptions InternalOptions { get; public set; }
    public bool UsePostgreSqlInsertOverridingSystemValue { get; public set; }
    public bool UsePostgreSqlInsertOverridingUserValue { get; public set; }
    public TimeSpan PostgreSqlBinaryImportTimeout { get; public set; }
    public bool UsePostgreSqlInsertOnConflictDoNothing { get; public set; }
    public bool UsePostgreSqlTimeZone { get; public set; }
    public bool UsePostgreSqlGetInformationSchema2 { get; public set; }
    public bool UsePostgreSqlUnprepare { get; public set; }
    internal bool  { get; internal set; }
    public AutoMapType AutoMap { get; public set; }
    public string AutoMapKeyName { get; public set; }
    public string AutoMapIdentityName { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapIdentityExpression { get; public set; }
    public Func`3<string, object, object> AutoMapValueFactory { get; public set; }
    public Action`2<string, ColumnMapping> AutoMapColumnBuilder { get; public set; }
    public int BatchDelayInterval { get; public set; }
    public int BatchSize { get; public set; }
    public int CombineMaxCommand { get; public set; }
    public int BatchTimeout { get; public set; }
    public CaseSensitiveType CaseSensitive { get; public set; }
    public List`1<string> ColumnInputNames { get; public set; }
    public List`1<string> ColumnInputOutputNames { get; public set; }
    public List`1<string> ColumnOutputNames { get; public set; }
    public List`1<string> ColumnPrimaryKeyNames { get; public set; }
    public List`1<string> ColumnSynchronizeDeleteKeySubsetNames { get; public set; }
    public List`1<string> IgnoreOnMergeInsertNames { get; public set; }
    public List`1<string> IgnoreOnMergeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeInsertNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnInsertNames { get; public set; }
    public List`1<string> IgnoreOnUpdateNames { get; public set; }
    public List`1<string> MergeMatchedAndConditionNames { get; public set; }
    public List`1<string> MergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> CoalesceOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnUpdateNames { get; public set; }
    public List`1<string> OnMergeUpdateInputNames { get; public set; }
    public List`1<string> OnMergeInsertInputNames { get; public set; }
    public List`1<string> OnSynchronizeUpdateInputNames { get; public set; }
    public List`1<string> OnSynchronizeInsertInputNames { get; public set; }
    public List`1<string> ColumnStagingTableFormulaNames { get; public set; }
    public List`1<string> IgnoreColumnOutputNames { get; public set; }
    public LambdaExpression LambdaInputExpression { get; public set; }
    public LambdaExpression LambdaInputOutputExpression { get; public set; }
    public LambdaExpression LambdaOutputExpression { get; public set; }
    public LambdaExpression LambdaPrimaryKeyExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeDeleteKeySubsetExpression { get; public set; }
    public LambdaExpression LambdaIgnoreColumnOutputExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaOnMergeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnMergeInsertInputExpression { get; public set; }
    public LambdaExpression LambdaColumnStagingTableFormulaExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public List`1<ColumnMapping> ColumnMappings { get; public set; }
    public bool OnMergeUpdateUseCoalesce { get; public set; }
    public bool OnMergeUpdateUseCoalesceDestination { get; public set; }
    public bool OnUpdateUseCoalesce { get; public set; }
    public bool OnUpdateUseCoalesceDestination { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesce { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesceDestination { get; public set; }
    public DefaultValueResolutionType DefaultValueResolution { get; public set; }
    public bool MatchNamesWithUnderscores { get; public set; }
    public bool UseSmartMatchNames { get; public set; }
    internal bool  { get; }
    public bool CommandParameterAddRowIndex { get; public set; }
    public string CommandParameterPrefix { get; public set; }
    public string CommandParameterSuffix { get; public set; }
    public bool UseCompile { get; public set; }
    public DbConnection Connection { get; public set; }
    public string ConnectionName { get; public set; }
    public string ConnectionString { get; public set; }
    public Func`1<DbConnection> ConnectionFactory { get; public set; }
    public CustomProvider CustomProvider { get; public set; }
    public object DataSource { get; public set; }
    public bool Debug1 { get; public set; }
    public string DestinationTableName { get; public set; }
    public string DestinationSchemaName { get; public set; }
    public bool DisableDotCheckForEscapeTableName { get; public set; }
    public bool InternalIsEntityFrameworkPlus { get; public set; }
    public bool UseLegacyBatchOperation { get; public set; }
    public bool IncludeGraph { get; public set; }
    public Action`1<BulkOperation> IncludeGraphOperationBuilder { get; public set; }
    internal Dictionary`2<string, string>  { get; internal set; }
    public bool AutoMapOutputDirection { get; public set; }
    public Action`1<BatchDelete> BatchDeleteBuilder { get; public set; }
    public Action`1<BatchUpdate> BatchUpdateBuilder { get; public set; }
    public Func`2<DbContext, DbContext> ContextFactory { get; public set; }
    public Action`1<BulkOperation> PostConfiguration { get; public set; }
    public bool AllowConcurrency { get; public set; }
    public bool DisableStoredProcedure { get; public set; }
    public bool IncludeJunctionTable { get; public set; }
    public Nullable`1<bool> ForceUpdateUnmodifiedValues { get; public set; }
    public Type EntityType { get; public set; }
    public bool SkipPropagationAndAcceptChanges { get; public set; }
    public int StreamSize { get; public set; }
    public ErrorModeType ErrorMode { get; public set; }
    public List`1<BulkOperationError> Errors { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuting { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuted { get; public set; }
    public Action`1<BulkOperation> DeleteFromQueryExecuted { get; public set; }
    public string MergeStagingTableFilterFormula { get; public set; }
    public string InsertStagingTableFilterFormula { get; public set; }
    public string UpdateStagingTableFilterFormula { get; public set; }
    public string DeleteStagingTableFilterFormula { get; public set; }
    public string SynchronizeDeleteDestinationTableFilterFormula { get; public set; }
    public string SynchronizeSoftDeleteFormula { get; public set; }
    public string InsertNotMatchedAndFormula { get; public set; }
    public string MergeNotMatchedAndFormula { get; public set; }
    public string SynchronizeNotMatchedAndFormula { get; public set; }
    public string MergeMatchedAndFormula { get; public set; }
    public string SynchronizeMatchedAndFormula { get; public set; }
    public string UpdateMatchedAndFormula { get; public set; }
    public string DeleteMatchedAndFormula { get; public set; }
    public string UpdatePrimaryKeyAndFormula { get; public set; }
    public string MergePrimaryKeyAndFormula { get; public set; }
    public string InsertPrimaryKeyAndFormula { get; public set; }
    public string DeletePrimaryKeyAndFormula { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaDelete { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaMerge { get; public set; }
    public string ColumnSynchronizeDeleteKeySubsetFormula { get; public set; }
    public bool UseStopwatchForSqlExecutingTime { get; public set; }
    public Stopwatch StopwatchForSqlExecutingTime { get; public set; }
    public Action`1<string> Log { get; public set; }
    public StringBuilder LogDump { get; public set; }
    public bool UseLogDump { get; public set; }
    public Action`2<object, StringBuilder> AddLogExecuting { get; public set; }
    public bool IgnoreOnMergeUpdate { get; public set; }
    public bool IgnoreOnMergeInsert { get; public set; }
    public bool UseOracleGlobalSequenceIndexTable { get; public set; }
    public bool ForceSelectOutput { get; public set; }
    public int ParallelBatchByTask { get; public set; }
    public int ParallelMinBatch { get; public set; }
    public int ParallelMinRecord { get; public set; }
    public bool UseParallel { get; public set; }
    public bool AllowDuplicateKeys { get; public set; }
    public bool AllowUpdatePrimaryKeys { get; public set; }
    public bool InsertIfNotExists { get; public set; }
    public bool DisablePrimaryKeyNullCheck { get; public set; }
    public ProviderType Provider { get; public set; }
    public Assembly ProviderAssembly { get; public set; }
    public ResolutionType Resolution { get; public set; }
    public bool ForceTriggerResolution { get; public set; }
    public bool DisableInformationSchemaCache { get; public set; }
    public ResultInfo ResultInfo { get; public set; }
    public int RowsAffected { get; public set; }
    public bool UseRowsAffected { get; public set; }
    public bool ValidateNoDuplicateKey { get; public set; }
    public bool DisableTemporaryTableClusteredIndex { get; public set; }
    public bool DisableSqlBulkCopyDirect { get; public set; }
    public bool ForceOutputFromUnmodifiedRow { get; public set; }
    public Nullable`1<bool> AutoTruncate { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsCheckConstraintOnInsertDisabled { get; public set; }
    public Nullable`1<int> SqlBulkCopyOptions { get; public set; }
    public bool MergeKeepIdentity { get; public set; }
    public bool SynchronizeKeepidentity { get; public set; }
    public bool InsertKeepIdentity { get; public set; }
    public bool HasColumnEncrypted { get; public set; }
    public bool UseTempDbForColumnEncrypted { get; public set; }
    public bool SynchronizeOnlyDelete { get; public set; }
    public bool SynchronizeIgnoreUpdate { get; public set; }
    public bool SynchronizeIgnoreInsert { get; public set; }
    public string QueryHint { get; public set; }
    public int TemporaryTableBatchByTable { get; public set; }
    public int TemporaryTableInsertBatchSize { get; public set; }
    public int TemporaryTableMinRecord { get; public set; }
    public bool TemporaryTableUseTableLock { get; public set; }
    public bool UseTableLock { get; public set; }
    public string TableHintSql { get; public set; }
    public string TemporaryTableSchemaName { get; public set; }
    public bool UsePermanentTable { get; public set; }
    public bool TemporaryTableUseSameName { get; public set; }
    public string TemporaryTableName { get; public set; }
    public bool TemporaryTableCreate { get; public set; }
    public bool TemporaryTablePersist { get; public set; }
    public bool TemporaryTableIsMemory { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public InternalTransactionType InternalTransaction { get; public set; }
    public Nullable`1<IsolationLevel> TransactionIsolationLevel { get; public set; }
    public int RetryCount { get; public set; }
    public TimeSpan RetryInterval { get; public set; }
    public bool UnsafeMode { get; public set; }
    public bool ValidateAllSourceMapped { get; public set; }
    public bool ValidateAllDestinationMapped { get; public set; }
    public bool UseInternalTransaction { get; public set; }
    public BulkOperation(DbConnection connection);
    internal Table ();
    public virtual void BulkDelete();
    public virtual void BulkDelete(object datasource);
    public virtual void BulkDelete(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkDeleteAsync(CancellationToken cancellationToken);
    public virtual Task BulkDeleteAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkDeleteAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public virtual void BulkInsert();
    public virtual void BulkInsert(object datasource);
    public virtual void BulkInsert(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkInsertAsync(CancellationToken cancellationToken);
    public virtual Task BulkInsertAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkInsertAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public virtual void BulkMerge();
    public virtual void BulkMerge(object datasource);
    public virtual void BulkMerge(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkMergeAsync(CancellationToken cancellationToken);
    public virtual Task BulkMergeAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkMergeAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public virtual void BulkSaveChanges(DataTable dt);
    public virtual Task BulkSaveChangesAsync(DataTable dt, CancellationToken cancellationToken);
    public virtual void BulkSynchronize();
    public virtual void BulkSynchronize(object datasource);
    public virtual Task BulkSynchronizeAsync(CancellationToken cancellationToken);
    public virtual Task BulkSynchronizeAsync(object datasource, CancellationToken cancellationToken);
    public virtual void BulkUpdate();
    public virtual void BulkUpdate(object datasource);
    public virtual void BulkUpdate(DataTable datasource, DataRowState dataRowState);
    public virtual Task BulkUpdateAsync(CancellationToken cancellationToken);
    public virtual Task BulkUpdateAsync(object datasource, CancellationToken cancellationToken);
    public virtual Task BulkUpdateAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken);
    public static void Cache(string key, BulkOperation operation);
    public static void RemoveFromCache(string key);
    public static BulkOperation GetFromCache(string key);
    public static T GetFromCache(string key);
    public void Recompile();
    internal void Execute();
    internal void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private List`1<string> ();
    private List`1<string> ();
    private void ();
    private List`1<string> ();
    private void ();
    private List`1<string> ();
    private void (string ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private bool (string , bool , bool , bool );
    private Column (string , bool , bool , bool );
    private string (string );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private List`1<string> ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private bool ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    internal void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal static bool (MemberInfo , String& );
    internal static bool (MemberInfo , Object& );
    internal static bool (MemberInfo , Int32& );
    internal static bool (MemberInfo , Int32& );
    internal static bool (MemberInfo , String& , String& );
    internal static bool (MemberInfo , String& );
    internal static bool (MemberInfo , String& );
    private bool (MemberInfo , String& );
    private bool (MemberInfo );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<> );
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<> );
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<string> );
    private bool (IEnumerable`1<> );
    private bool (IEnumerable`1<> );
    internal virtual bool ();
    internal bool (BulkOperationActionType );
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal bool ();
    internal void Log_AddLogExecutingBulkCopy(object bulkCopy);
    internal void Log_AddLogExecutedBulkCopy(object bulkCopy);
    internal void (DbCommand );
    internal void (DbCommand , string );
    internal void (DbException , TimeSpan );
    internal void (DbException );
    internal void (Exception );
    internal void (DbConnection );
    internal void (DbConnection );
    internal void (string );
    internal void (object );
    internal void ();
    internal void ( , int );
    internal bool ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal IEnumerable`1<> ();
    internal IEnumerable`1<> ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    [CompilerGeneratedAttribute]
internal CancellationToken get_();
    [CompilerGeneratedAttribute]
internal void set_(CancellationToken value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    internal bool get_();
    public List`1<AuditEntry> get_AuditEntries();
    public void set_AuditEntries(List`1<AuditEntry> value);
    public AuditModeType get_AuditMode();
    public void set_AuditMode(AuditModeType value);
    public bool get_UseAudit();
    public void set_UseAudit(bool value);
    public bool get_TestExecuteAsync();
    public void set_TestExecuteAsync(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_ForceRowsAffectedValidation();
    public void set_ForceRowsAffectedValidation(bool value);
    [CompilerGeneratedAttribute]
public InternalOptions get_InternalOptions();
    [CompilerGeneratedAttribute]
public void set_InternalOptions(InternalOptions value);
    public bool get_UsePostgreSqlInsertOverridingSystemValue();
    public void set_UsePostgreSqlInsertOverridingSystemValue(bool value);
    public bool get_UsePostgreSqlInsertOverridingUserValue();
    public void set_UsePostgreSqlInsertOverridingUserValue(bool value);
    public TimeSpan get_PostgreSqlBinaryImportTimeout();
    public void set_PostgreSqlBinaryImportTimeout(TimeSpan value);
    public bool get_UsePostgreSqlInsertOnConflictDoNothing();
    public void set_UsePostgreSqlInsertOnConflictDoNothing(bool value);
    public bool get_UsePostgreSqlTimeZone();
    public void set_UsePostgreSqlTimeZone(bool value);
    public bool get_UsePostgreSqlGetInformationSchema2();
    public void set_UsePostgreSqlGetInformationSchema2(bool value);
    public bool get_UsePostgreSqlUnprepare();
    public void set_UsePostgreSqlUnprepare(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public AutoMapType get_AutoMap();
    public void set_AutoMap(AutoMapType value);
    public string get_AutoMapKeyName();
    public void set_AutoMapKeyName(string value);
    public string get_AutoMapIdentityName();
    public void set_AutoMapIdentityName(string value);
    public Expression`1<Func`2<object, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<object, object>> value);
    public Func`3<string, object, object> get_AutoMapValueFactory();
    public void set_AutoMapValueFactory(Func`3<string, object, object> value);
    public Action`2<string, ColumnMapping> get_AutoMapColumnBuilder();
    public void set_AutoMapColumnBuilder(Action`2<string, ColumnMapping> value);
    public int get_BatchDelayInterval();
    public void set_BatchDelayInterval(int value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_CombineMaxCommand();
    public void set_CombineMaxCommand(int value);
    public int get_BatchTimeout();
    public void set_BatchTimeout(int value);
    public CaseSensitiveType get_CaseSensitive();
    public void set_CaseSensitive(CaseSensitiveType value);
    public List`1<string> get_ColumnInputNames();
    public void set_ColumnInputNames(List`1<string> value);
    public List`1<string> get_ColumnInputOutputNames();
    public void set_ColumnInputOutputNames(List`1<string> value);
    public List`1<string> get_ColumnOutputNames();
    public void set_ColumnOutputNames(List`1<string> value);
    public List`1<string> get_ColumnPrimaryKeyNames();
    public void set_ColumnPrimaryKeyNames(List`1<string> value);
    public List`1<string> get_ColumnSynchronizeDeleteKeySubsetNames();
    public void set_ColumnSynchronizeDeleteKeySubsetNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeInsertNames();
    public void set_IgnoreOnMergeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeUpdateNames();
    public void set_IgnoreOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeInsertNames();
    public void set_IgnoreOnSynchronizeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeUpdateNames();
    public void set_IgnoreOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnInsertNames();
    public void set_IgnoreOnInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateNames();
    public void set_IgnoreOnUpdateNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndConditionNames();
    public void set_MergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndOneNotConditionNames();
    public void set_MergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndConditionNames();
    public void set_UpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndOneNotConditionNames();
    public void set_UpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndConditionNames();
    public void set_DeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndOneNotConditionNames();
    public void set_DeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndConditionNames();
    public void set_SynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndOneNotConditionNames();
    public void set_SynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndConditionNames();
    public void set_IgnoreOnMergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndConditionNames();
    public void set_IgnoreOnDeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndOneNotConditionNames();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndConditionNames();
    public void set_IgnoreOnUpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndOneNotConditionNames();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_CoalesceOnMergeUpdateNames();
    public void set_CoalesceOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnMergeUpdateNames();
    public void set_CoalesceDestinationOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnSynchronizeUpdateNames();
    public void set_CoalesceOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnSynchronizeUpdateNames();
    public void set_CoalesceDestinationOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnUpdateNames();
    public void set_CoalesceOnUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnUpdateNames();
    public void set_CoalesceDestinationOnUpdateNames(List`1<string> value);
    public List`1<string> get_OnMergeUpdateInputNames();
    public void set_OnMergeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnMergeInsertInputNames();
    public void set_OnMergeInsertInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeUpdateInputNames();
    public void set_OnSynchronizeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeInsertInputNames();
    public void set_OnSynchronizeInsertInputNames(List`1<string> value);
    public List`1<string> get_ColumnStagingTableFormulaNames();
    public void set_ColumnStagingTableFormulaNames(List`1<string> value);
    public List`1<string> get_IgnoreColumnOutputNames();
    public void set_IgnoreColumnOutputNames(List`1<string> value);
    public LambdaExpression get_LambdaInputExpression();
    public void set_LambdaInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaInputOutputExpression();
    public void set_LambdaInputOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOutputExpression();
    public void set_LambdaOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaPrimaryKeyExpression();
    public void set_LambdaPrimaryKeyExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeDeleteKeySubsetExpression();
    public void set_LambdaSynchronizeDeleteKeySubsetExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreColumnOutputExpression();
    public void set_LambdaIgnoreColumnOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnInsertExpression();
    public void set_LambdaIgnoreOnInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnUpdateExpression();
    public void set_LambdaIgnoreOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeInsertExpression();
    public void set_LambdaIgnoreOnMergeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeUpdateExpression();
    public void set_LambdaIgnoreOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeInsertExpression();
    public void set_LambdaIgnoreOnSynchronizeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeUpdateExpression();
    public void set_LambdaIgnoreOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndConditionExpression();
    public void set_LambdaMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndConditionExpression();
    public void set_LambdaUpdateMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndOneNotConditionExpression();
    public void set_LambdaUpdateMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndConditionExpression();
    public void set_LambdaDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndConditionExpression();
    public void set_LambdaSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnMergeUpdateExpression();
    public void set_LambdaCoalesceOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnMergeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnUpdateExpression();
    public void set_LambdaCoalesceOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnUpdateExpression();
    public void set_LambdaCoalesceDestinationOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeUpdateInputExpression();
    public void set_LambdaOnMergeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeInsertInputExpression();
    public void set_LambdaOnMergeInsertInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaColumnStagingTableFormulaExpression();
    public void set_LambdaColumnStagingTableFormulaExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeUpdateInputExpression();
    public void set_LambdaOnSynchronizeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeInsertInputExpression();
    public void set_LambdaOnSynchronizeInsertInputExpression(LambdaExpression value);
    public Expression`1<Func`2<object, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<object, object>> value);
    public List`1<ColumnMapping> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping> value);
    public bool get_OnMergeUpdateUseCoalesce();
    public void set_OnMergeUpdateUseCoalesce(bool value);
    public bool get_OnMergeUpdateUseCoalesceDestination();
    public void set_OnMergeUpdateUseCoalesceDestination(bool value);
    public bool get_OnUpdateUseCoalesce();
    public void set_OnUpdateUseCoalesce(bool value);
    public bool get_OnUpdateUseCoalesceDestination();
    public void set_OnUpdateUseCoalesceDestination(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesce();
    public void set_OnSynchronizeUpdateUseCoalesce(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesceDestination();
    public void set_OnSynchronizeUpdateUseCoalesceDestination(bool value);
    public DefaultValueResolutionType get_DefaultValueResolution();
    public void set_DefaultValueResolution(DefaultValueResolutionType value);
    public bool get_MatchNamesWithUnderscores();
    public void set_MatchNamesWithUnderscores(bool value);
    public bool get_UseSmartMatchNames();
    public void set_UseSmartMatchNames(bool value);
    internal bool get_();
    public bool get_CommandParameterAddRowIndex();
    public void set_CommandParameterAddRowIndex(bool value);
    public string get_CommandParameterPrefix();
    public void set_CommandParameterPrefix(string value);
    public string get_CommandParameterSuffix();
    public void set_CommandParameterSuffix(string value);
    public bool get_UseCompile();
    public void set_UseCompile(bool value);
    public virtual DbConnection get_Connection();
    public virtual void set_Connection(DbConnection value);
    public string get_ConnectionName();
    public void set_ConnectionName(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public Func`1<DbConnection> get_ConnectionFactory();
    public void set_ConnectionFactory(Func`1<DbConnection> value);
    public CustomProvider get_CustomProvider();
    public void set_CustomProvider(CustomProvider value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public bool get_Debug1();
    public void set_Debug1(bool value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public string get_DestinationSchemaName();
    public void set_DestinationSchemaName(string value);
    public bool get_DisableDotCheckForEscapeTableName();
    public void set_DisableDotCheckForEscapeTableName(bool value);
    [CompilerGeneratedAttribute]
public bool get_InternalIsEntityFrameworkPlus();
    [CompilerGeneratedAttribute]
public void set_InternalIsEntityFrameworkPlus(bool value);
    public bool get_UseLegacyBatchOperation();
    public void set_UseLegacyBatchOperation(bool value);
    public bool get_IncludeGraph();
    public void set_IncludeGraph(bool value);
    public Action`1<BulkOperation> get_IncludeGraphOperationBuilder();
    public void set_IncludeGraphOperationBuilder(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, string> value);
    public bool get_AutoMapOutputDirection();
    public void set_AutoMapOutputDirection(bool value);
    public Action`1<BatchDelete> get_BatchDeleteBuilder();
    public void set_BatchDeleteBuilder(Action`1<BatchDelete> value);
    public Action`1<BatchUpdate> get_BatchUpdateBuilder();
    public void set_BatchUpdateBuilder(Action`1<BatchUpdate> value);
    public Func`2<DbContext, DbContext> get_ContextFactory();
    public void set_ContextFactory(Func`2<DbContext, DbContext> value);
    public Action`1<BulkOperation> get_PostConfiguration();
    public void set_PostConfiguration(Action`1<BulkOperation> value);
    public bool get_AllowConcurrency();
    public void set_AllowConcurrency(bool value);
    public bool get_DisableStoredProcedure();
    public void set_DisableStoredProcedure(bool value);
    public bool get_IncludeJunctionTable();
    public void set_IncludeJunctionTable(bool value);
    public Nullable`1<bool> get_ForceUpdateUnmodifiedValues();
    public void set_ForceUpdateUnmodifiedValues(Nullable`1<bool> value);
    public Type get_EntityType();
    public void set_EntityType(Type value);
    public bool get_SkipPropagationAndAcceptChanges();
    public void set_SkipPropagationAndAcceptChanges(bool value);
    public int get_StreamSize();
    public void set_StreamSize(int value);
    public ErrorModeType get_ErrorMode();
    public void set_ErrorMode(ErrorModeType value);
    public List`1<BulkOperationError> get_Errors();
    public void set_Errors(List`1<BulkOperationError> value);
    public Action`1<BulkOperation> get_BulkOperationExecuting();
    public void set_BulkOperationExecuting(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_BulkOperationExecuted();
    public void set_BulkOperationExecuted(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_DeleteFromQueryExecuted();
    public void set_DeleteFromQueryExecuted(Action`1<BulkOperation> value);
    public string get_MergeStagingTableFilterFormula();
    public void set_MergeStagingTableFilterFormula(string value);
    public string get_InsertStagingTableFilterFormula();
    public void set_InsertStagingTableFilterFormula(string value);
    public string get_UpdateStagingTableFilterFormula();
    public void set_UpdateStagingTableFilterFormula(string value);
    public string get_DeleteStagingTableFilterFormula();
    public void set_DeleteStagingTableFilterFormula(string value);
    public string get_SynchronizeDeleteDestinationTableFilterFormula();
    public void set_SynchronizeDeleteDestinationTableFilterFormula(string value);
    public string get_SynchronizeSoftDeleteFormula();
    public void set_SynchronizeSoftDeleteFormula(string value);
    public string get_InsertNotMatchedAndFormula();
    public void set_InsertNotMatchedAndFormula(string value);
    public string get_MergeNotMatchedAndFormula();
    public void set_MergeNotMatchedAndFormula(string value);
    public string get_SynchronizeNotMatchedAndFormula();
    public void set_SynchronizeNotMatchedAndFormula(string value);
    public string get_MergeMatchedAndFormula();
    public void set_MergeMatchedAndFormula(string value);
    public string get_SynchronizeMatchedAndFormula();
    public void set_SynchronizeMatchedAndFormula(string value);
    public string get_UpdateMatchedAndFormula();
    public void set_UpdateMatchedAndFormula(string value);
    public string get_DeleteMatchedAndFormula();
    public void set_DeleteMatchedAndFormula(string value);
    public string get_UpdatePrimaryKeyAndFormula();
    public void set_UpdatePrimaryKeyAndFormula(string value);
    public string get_MergePrimaryKeyAndFormula();
    public void set_MergePrimaryKeyAndFormula(string value);
    public string get_InsertPrimaryKeyAndFormula();
    public void set_InsertPrimaryKeyAndFormula(string value);
    public string get_DeletePrimaryKeyAndFormula();
    public void set_DeletePrimaryKeyAndFormula(string value);
    public string get_SynchronizePrimaryKeyAndFormulaDelete();
    public void set_SynchronizePrimaryKeyAndFormulaDelete(string value);
    public string get_SynchronizePrimaryKeyAndFormulaMerge();
    public void set_SynchronizePrimaryKeyAndFormulaMerge(string value);
    public string get_ColumnSynchronizeDeleteKeySubsetFormula();
    public void set_ColumnSynchronizeDeleteKeySubsetFormula(string value);
    public bool get_UseStopwatchForSqlExecutingTime();
    public void set_UseStopwatchForSqlExecutingTime(bool value);
    public Stopwatch get_StopwatchForSqlExecutingTime();
    public void set_StopwatchForSqlExecutingTime(Stopwatch value);
    public Action`1<string> get_Log();
    public void set_Log(Action`1<string> value);
    public StringBuilder get_LogDump();
    public void set_LogDump(StringBuilder value);
    public bool get_UseLogDump();
    public void set_UseLogDump(bool value);
    public Action`2<object, StringBuilder> get_AddLogExecuting();
    public void set_AddLogExecuting(Action`2<object, StringBuilder> value);
    public bool get_IgnoreOnMergeUpdate();
    public void set_IgnoreOnMergeUpdate(bool value);
    public bool get_IgnoreOnMergeInsert();
    public void set_IgnoreOnMergeInsert(bool value);
    public bool get_UseOracleGlobalSequenceIndexTable();
    public void set_UseOracleGlobalSequenceIndexTable(bool value);
    public bool get_ForceSelectOutput();
    public void set_ForceSelectOutput(bool value);
    public int get_ParallelBatchByTask();
    public void set_ParallelBatchByTask(int value);
    public int get_ParallelMinBatch();
    public void set_ParallelMinBatch(int value);
    public int get_ParallelMinRecord();
    public void set_ParallelMinRecord(int value);
    public bool get_UseParallel();
    public void set_UseParallel(bool value);
    public bool get_AllowDuplicateKeys();
    public void set_AllowDuplicateKeys(bool value);
    public bool get_AllowUpdatePrimaryKeys();
    public void set_AllowUpdatePrimaryKeys(bool value);
    public bool get_InsertIfNotExists();
    public void set_InsertIfNotExists(bool value);
    public bool get_DisablePrimaryKeyNullCheck();
    public void set_DisablePrimaryKeyNullCheck(bool value);
    public ProviderType get_Provider();
    public void set_Provider(ProviderType value);
    public Assembly get_ProviderAssembly();
    public void set_ProviderAssembly(Assembly value);
    public ResolutionType get_Resolution();
    public void set_Resolution(ResolutionType value);
    public bool get_ForceTriggerResolution();
    public void set_ForceTriggerResolution(bool value);
    public bool get_DisableInformationSchemaCache();
    public void set_DisableInformationSchemaCache(bool value);
    public ResultInfo get_ResultInfo();
    public void set_ResultInfo(ResultInfo value);
    public int get_RowsAffected();
    public void set_RowsAffected(int value);
    public bool get_UseRowsAffected();
    public void set_UseRowsAffected(bool value);
    public bool get_ValidateNoDuplicateKey();
    public void set_ValidateNoDuplicateKey(bool value);
    public bool get_DisableTemporaryTableClusteredIndex();
    public void set_DisableTemporaryTableClusteredIndex(bool value);
    public bool get_DisableSqlBulkCopyDirect();
    public void set_DisableSqlBulkCopyDirect(bool value);
    public bool get_ForceOutputFromUnmodifiedRow();
    public void set_ForceOutputFromUnmodifiedRow(bool value);
    public Nullable`1<bool> get_AutoTruncate();
    public void set_AutoTruncate(Nullable`1<bool> value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_IsCheckConstraintOnInsertDisabled();
    public void set_IsCheckConstraintOnInsertDisabled(bool value);
    public Nullable`1<int> get_SqlBulkCopyOptions();
    public void set_SqlBulkCopyOptions(Nullable`1<int> value);
    public bool get_MergeKeepIdentity();
    public void set_MergeKeepIdentity(bool value);
    public bool get_SynchronizeKeepidentity();
    public void set_SynchronizeKeepidentity(bool value);
    public bool get_InsertKeepIdentity();
    public void set_InsertKeepIdentity(bool value);
    public bool get_HasColumnEncrypted();
    public void set_HasColumnEncrypted(bool value);
    public bool get_UseTempDbForColumnEncrypted();
    public void set_UseTempDbForColumnEncrypted(bool value);
    public bool get_SynchronizeOnlyDelete();
    public void set_SynchronizeOnlyDelete(bool value);
    public bool get_SynchronizeIgnoreUpdate();
    public void set_SynchronizeIgnoreUpdate(bool value);
    public bool get_SynchronizeIgnoreInsert();
    public void set_SynchronizeIgnoreInsert(bool value);
    public string get_QueryHint();
    public void set_QueryHint(string value);
    public int get_TemporaryTableBatchByTable();
    public void set_TemporaryTableBatchByTable(int value);
    public int get_TemporaryTableInsertBatchSize();
    public void set_TemporaryTableInsertBatchSize(int value);
    public int get_TemporaryTableMinRecord();
    public void set_TemporaryTableMinRecord(int value);
    public bool get_TemporaryTableUseTableLock();
    public void set_TemporaryTableUseTableLock(bool value);
    public bool get_UseTableLock();
    public void set_UseTableLock(bool value);
    public string get_TableHintSql();
    public void set_TableHintSql(string value);
    public string get_TemporaryTableSchemaName();
    public void set_TemporaryTableSchemaName(string value);
    public bool get_UsePermanentTable();
    public void set_UsePermanentTable(bool value);
    public bool get_TemporaryTableUseSameName();
    public void set_TemporaryTableUseSameName(bool value);
    public string get_TemporaryTableName();
    public void set_TemporaryTableName(string value);
    public bool get_TemporaryTableCreate();
    public void set_TemporaryTableCreate(bool value);
    public bool get_TemporaryTablePersist();
    public void set_TemporaryTablePersist(bool value);
    public bool get_TemporaryTableIsMemory();
    public void set_TemporaryTableIsMemory(bool value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public InternalTransactionType get_InternalTransaction();
    public void set_InternalTransaction(InternalTransactionType value);
    public Nullable`1<IsolationLevel> get_TransactionIsolationLevel();
    public void set_TransactionIsolationLevel(Nullable`1<IsolationLevel> value);
    public int get_RetryCount();
    public void set_RetryCount(int value);
    public TimeSpan get_RetryInterval();
    public void set_RetryInterval(TimeSpan value);
    public bool get_UnsafeMode();
    public void set_UnsafeMode(bool value);
    public bool get_ValidateAllSourceMapped();
    public void set_ValidateAllSourceMapped(bool value);
    public bool get_ValidateAllDestinationMapped();
    public void set_ValidateAllDestinationMapped(bool value);
    public bool get_UseInternalTransaction();
    public void set_UseInternalTransaction(bool value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ();
    [CompilerGeneratedAttribute]
private void ( );
    [CompilerGeneratedAttribute]
private bool ( );
    [CompilerGeneratedAttribute]
private bool ( );
}
public class Z.BulkOperations.BulkOperation`1 : BulkOperation {
    public List`1<ColumnMapping`1<TEntity>> _internalColumnMapping;
    public List`1<ColumnMapping`1<TEntity>> ColumnMappings { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapIdentityExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public Action`1<BulkOperation`1<TEntity>> PostConfiguration { get; public set; }
    public BulkOperation`1(DbConnection connection);
    public virtual void BulkDelete(List`1<TEntity> datasource);
    public virtual Task BulkDeleteAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public virtual void BulkInsert(List`1<TEntity> datasource);
    public virtual Task BulkInsertAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public virtual void BulkMerge(List`1<TEntity> datasource);
    public virtual Task BulkMergeAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public virtual void BulkSynchronize(List`1<TEntity> datasource);
    public virtual Task BulkSynchronizeAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    public virtual void BulkUpdate(List`1<TEntity> datasource);
    public virtual Task BulkUpdateAsync(List`1<TEntity> datasource, CancellationToken cancellationToken);
    internal virtual bool ();
    public List`1<ColumnMapping`1<TEntity>> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping`1<TEntity>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<TEntity, object>> value);
    public Action`1<BulkOperation`1<TEntity>> get_PostConfiguration();
    public void set_PostConfiguration(Action`1<BulkOperation`1<TEntity>> value);
    internal void (BulkOperation );
    internal void ();
}
internal enum Z.BulkOperations.BulkOperationActionType : Enum {
    public int value__;
    public static BulkOperationActionType Insert;
    public static BulkOperationActionType Delete;
    public static BulkOperationActionType Update;
    public static BulkOperationActionType Merge;
    public static BulkOperationActionType DeleteFromQuery;
    public static BulkOperationActionType UpdateFromQuery;
    public static BulkOperationActionType SaveChanges;
    public static BulkOperationActionType Synchronize;
}
public class Z.BulkOperations.BulkOperationError : object {
    [CompilerGeneratedAttribute]
private Exception ;
    [CompilerGeneratedAttribute]
private object ;
    public Exception Exception { get; public set; }
    public object Record { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public object get_Record();
    [CompilerGeneratedAttribute]
public void set_Record(object value);
}
public class Z.BulkOperations.BulkOperationManager : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, IBulkValueConverter> ;
    public static Action`1<BulkOperation> BulkOperationBuilder;
    public static Action`1<ColumnMapping> ColumnMappingBuilder;
    [CompilerGeneratedAttribute]
private static bool ;
    internal static List`1<string> ;
    [CompilerGeneratedAttribute]
private static ObjectCache ;
    public static bool UseOracleArray;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static CustomProvider ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static Func`3<DbException, int, bool> ;
    internal static Dictionary`2<Type, IBulkValueConverter>  { get; internal set; }
    public static bool IsCommunity { get; public set; }
    public static ObjectCache Cache { get; public set; }
    public static bool ForceExpandoAsDictionaryEntryName { get; public set; }
    public static bool ForceSelectOutput { get; public set; }
    public static CustomProvider CustomProvider { get; public set; }
    public static bool ForceTriggerResolution { get; public set; }
    public static Func`3<DbException, int, bool> TmpIsTransientError { get; public set; }
    private static BulkOperationManager();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<Type, IBulkValueConverter> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Dictionary`2<Type, IBulkValueConverter> value);
    public static void AddValueConverter(Type type, IBulkValueConverter valueConverter);
    public static void AddValueConverter(BulkValueConverter`1<T> valueConverter);
    [CompilerGeneratedAttribute]
public static bool get_IsCommunity();
    [CompilerGeneratedAttribute]
public static void set_IsCommunity(bool value);
    [CompilerGeneratedAttribute]
public static ObjectCache get_Cache();
    [CompilerGeneratedAttribute]
public static void set_Cache(ObjectCache value);
    [CompilerGeneratedAttribute]
public static bool get_ForceExpandoAsDictionaryEntryName();
    [CompilerGeneratedAttribute]
public static void set_ForceExpandoAsDictionaryEntryName(bool value);
    [CompilerGeneratedAttribute]
public static bool get_ForceSelectOutput();
    [CompilerGeneratedAttribute]
public static void set_ForceSelectOutput(bool value);
    [CompilerGeneratedAttribute]
public static CustomProvider get_CustomProvider();
    [CompilerGeneratedAttribute]
public static void set_CustomProvider(CustomProvider value);
    [CompilerGeneratedAttribute]
public static bool get_ForceTriggerResolution();
    [CompilerGeneratedAttribute]
public static void set_ForceTriggerResolution(bool value);
    [CompilerGeneratedAttribute]
public static Func`3<DbException, int, bool> get_TmpIsTransientError();
    [CompilerGeneratedAttribute]
public static void set_TmpIsTransientError(Func`3<DbException, int, bool> value);
    public static void ClearInformationTableCache();
}
public class Z.BulkOperations.BulkOperationOptions : object {
    internal bool ;
    [CompilerGeneratedAttribute]
private List`1<Action`1<BulkOperation>> ;
    internal List`1<AuditEntry> ;
    internal AuditModeType ;
    internal bool ;
    internal bool ;
    internal AutoMapType ;
    internal string ;
    internal string ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal Func`3<string, object, object> ;
    internal Action`2<string, ColumnMapping> ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal List`1<> ;
    internal CaseSensitiveType ;
    internal bool ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal LambdaExpression ;
    internal List`1<BasicColumnMapping> ;
    internal IEnumerable`1<> ;
    internal List`1<ColumnMapping> ;
    internal IEnumerable`1<object> ;
    internal DefaultValueResolutionType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal List`1<string> ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal DbConnection ;
    internal Func`1<DbConnection> ;
    internal string ;
    internal string ;
    internal CustomProvider ;
    internal object ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Action`1<BulkOperation> ;
    internal bool ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> ;
    internal bool ;
    internal bool ;
    internal Action`1<BatchDelete> ;
    internal Action`1<BatchUpdate> ;
    internal Func`2<DbContext, DbContext> ;
    internal object ;
    internal bool ;
    internal bool ;
    internal Nullable`1<bool> ;
    internal int ;
    internal Type ;
    internal bool ;
    internal ErrorModeType ;
    internal List`1<BulkOperationError> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal Action`1<BulkOperation> ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal Type ;
    internal Action`1<string> ;
    internal Action`1<string> ;
    internal StringBuilder ;
    internal bool ;
    internal Stopwatch ;
    internal Action`2<object, StringBuilder> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    private bool ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal TimeSpan ;
    internal bool ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal ProviderType ;
    internal Assembly ;
    internal ResolutionType ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal ResultInfo ;
    internal bool ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal Nullable`1<int> ;
    internal Nullable`1<bool> ;
    internal int ;
    internal int ;
    internal int ;
    internal string ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal InternalTransactionType ;
    internal DbTransaction ;
    internal Nullable`1<IsolationLevel> ;
    internal int ;
    internal TimeSpan ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    public bool UseInternalTransaction { get; public set; }
    internal List`1<Action`1<BulkOperation>>  { get; internal set; }
    internal bool  { get; }
    public List`1<AuditEntry> AuditEntries { get; public set; }
    public AuditModeType AuditMode { get; public set; }
    public bool UseAudit { get; public set; }
    public AutoMapType AutoMap { get; public set; }
    public string AutoMapKeyName { get; public set; }
    public string AutoMapIdentityName { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> AutoMapIdentityExpression { get; public set; }
    public Func`3<string, object, object> AutoMapValueFactory { get; public set; }
    public Action`2<string, ColumnMapping> AutoMapColumnBuilder { get; public set; }
    public int BatchDelayInterval { get; public set; }
    public int BatchSize { get; public set; }
    public int CombineMaxCommand { get; public set; }
    public int BatchTimeout { get; public set; }
    public CaseSensitiveType CaseSensitive { get; public set; }
    public LambdaExpression LambdaInputExpression { get; public set; }
    public LambdaExpression LambdaInputOutputExpression { get; public set; }
    public LambdaExpression LambdaOutputExpression { get; public set; }
    public LambdaExpression LambdaPrimaryKeyExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeDeleteKeySubsetExpression { get; public set; }
    public LambdaExpression LambdaIgnoreColumnOutputExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeInsertExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaCoalesceDestinationOnUpdateExpression { get; public set; }
    public LambdaExpression LambdaOnMergeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnMergeInsertInputExpression { get; public set; }
    public LambdaExpression LambdaColumnStagingTableFormulaExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeUpdateInputExpression { get; public set; }
    public LambdaExpression LambdaOnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<object, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public List`1<ColumnMapping> ColumnMappings { get; public set; }
    public bool OnMergeUpdateUseCoalesce { get; public set; }
    public bool OnMergeUpdateUseCoalesceDestination { get; public set; }
    public bool OnUpdateUseCoalesce { get; public set; }
    public bool OnUpdateUseCoalesceDestination { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesce { get; public set; }
    public bool OnSynchronizeUpdateUseCoalesceDestination { get; public set; }
    public DefaultValueResolutionType DefaultValueResolution { get; public set; }
    public bool MatchNamesWithUnderscores { get; public set; }
    public bool UseSmartMatchNames { get; public set; }
    internal bool  { get; }
    public List`1<string> ColumnInputNames { get; public set; }
    public List`1<string> ColumnInputOutputNames { get; public set; }
    public List`1<string> ColumnOutputNames { get; public set; }
    public List`1<string> ColumnPrimaryKeyNames { get; public set; }
    public List`1<string> ColumnSynchronizeDeleteKeySubsetNames { get; public set; }
    public List`1<string> IgnoreOnMergeInsertNames { get; public set; }
    public List`1<string> IgnoreOnMergeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeInsertNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> IgnoreOnInsertNames { get; public set; }
    public List`1<string> IgnoreOnUpdateNames { get; public set; }
    public List`1<string> MergeMatchedAndConditionNames { get; public set; }
    public List`1<string> MergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> UpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> DeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> SynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnMergeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnDeleteMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnUpdateMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndConditionNames { get; public set; }
    public List`1<string> IgnoreOnSynchronizeMatchedAndOneNotConditionNames { get; public set; }
    public List`1<string> CoalesceOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnMergeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnSynchronizeUpdateNames { get; public set; }
    public List`1<string> CoalesceOnUpdateNames { get; public set; }
    public List`1<string> CoalesceDestinationOnUpdateNames { get; public set; }
    public List`1<string> OnMergeUpdateInputNames { get; public set; }
    public List`1<string> OnMergeInsertInputNames { get; public set; }
    public List`1<string> OnSynchronizeUpdateInputNames { get; public set; }
    public List`1<string> OnSynchronizeInsertInputNames { get; public set; }
    public List`1<string> ColumnStagingTableFormulaNames { get; public set; }
    public List`1<string> IgnoreColumnOutputNames { get; public set; }
    public bool CommandParameterAddRowIndex { get; public set; }
    public string CommandParameterPrefix { get; public set; }
    public string CommandParameterSuffix { get; public set; }
    public bool UseCompile { get; public set; }
    public DbConnection Connection { get; public set; }
    public string ConnectionName { get; public set; }
    public string ConnectionString { get; public set; }
    public Func`1<DbConnection> ConnectionFactory { get; public set; }
    public CustomProvider CustomProvider { get; public set; }
    public object DataSource { get; public set; }
    public bool Debug1 { get; public set; }
    public string DestinationTableName { get; public set; }
    public string DestinationSchemaName { get; public set; }
    public bool DisableDotCheckForEscapeTableName { get; public set; }
    public bool UseLegacyBatchOperation { get; public set; }
    public bool IncludeGraph { get; public set; }
    public Action`1<BulkOperation> IncludeGraphOperationBuilder { get; public set; }
    internal Dictionary`2<string, string>  { get; internal set; }
    public bool AutoMapOutputDirection { get; public set; }
    public Action`1<BatchDelete> BatchDeleteBuilder { get; public set; }
    public Action`1<BatchUpdate> BatchUpdateBuilder { get; public set; }
    public Func`2<DbContext, DbContext> ContextFactory { get; public set; }
    public Action`1<BulkOperation> PostConfiguration { get; public set; }
    public bool AllowConcurrency { get; public set; }
    public bool DisableStoredProcedure { get; public set; }
    public bool IncludeJunctionTable { get; public set; }
    public Nullable`1<bool> ForceUpdateUnmodifiedValues { get; public set; }
    public Type EntityType { get; public set; }
    public bool SkipPropagationAndAcceptChanges { get; public set; }
    public int StreamSize { get; public set; }
    public ErrorModeType ErrorMode { get; public set; }
    public List`1<BulkOperationError> Errors { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuting { get; public set; }
    public Action`1<BulkOperation> BulkOperationExecuted { get; public set; }
    public Action`1<BulkOperation> DeleteFromQueryExecuted { get; public set; }
    internal bool  { get; internal set; }
    public bool ForceRowsAffectedValidation { get; public set; }
    public string MergeStagingTableFilterFormula { get; public set; }
    public string InsertStagingTableFilterFormula { get; public set; }
    public string UpdateStagingTableFilterFormula { get; public set; }
    public string DeleteStagingTableFilterFormula { get; public set; }
    public string SynchronizeDeleteDestinationTableFilterFormula { get; public set; }
    public string SynchronizeSoftDeleteFormula { get; public set; }
    public string InsertNotMatchedAndFormula { get; public set; }
    public string MergeNotMatchedAndFormula { get; public set; }
    public string SynchronizeNotMatchedAndFormula { get; public set; }
    public string MergeMatchedAndFormula { get; public set; }
    public string SynchronizeMatchedAndFormula { get; public set; }
    public string UpdateMatchedAndFormula { get; public set; }
    public string DeleteMatchedAndFormula { get; public set; }
    public string UpdatePrimaryKeyAndFormula { get; public set; }
    public string MergePrimaryKeyAndFormula { get; public set; }
    public string InsertPrimaryKeyAndFormula { get; public set; }
    public string DeletePrimaryKeyAndFormula { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaDelete { get; public set; }
    public string SynchronizePrimaryKeyAndFormulaMerge { get; public set; }
    public string ColumnSynchronizeDeleteKeySubsetFormula { get; public set; }
    public bool UseStopwatchForSqlExecutingTime { get; public set; }
    public Stopwatch StopwatchForSqlExecutingTime { get; public set; }
    public Action`1<string> Log { get; public set; }
    public StringBuilder LogDump { get; public set; }
    public bool UseLogDump { get; public set; }
    public Action`2<object, StringBuilder> AddLogExecuting { get; public set; }
    public bool IgnoreOnMergeUpdate { get; public set; }
    public bool IgnoreOnMergeInsert { get; public set; }
    public bool TestExecuteAsync { get; public set; }
    public bool UseOracleGlobalSequenceIndexTable { get; public set; }
    public bool ForceSelectOutput { get; public set; }
    public int ParallelBatchByTask { get; public set; }
    public int ParallelMinBatch { get; public set; }
    public int ParallelMinRecord { get; public set; }
    public bool UseParallel { get; public set; }
    public bool UsePostgreSqlInsertOverridingSystemValue { get; public set; }
    public bool UsePostgreSqlInsertOverridingUserValue { get; public set; }
    public TimeSpan PostgreSqlBinaryImportTimeout { get; public set; }
    public bool UsePostgreSqlInsertOnConflictDoNothing { get; public set; }
    public bool UsePostgreSqlTimeZone { get; public set; }
    public bool UsePostgreSqlGetInformationSchema2 { get; public set; }
    public bool UsePostgreSqlUnprepare { get; public set; }
    internal bool  { get; internal set; }
    public bool AllowDuplicateKeys { get; public set; }
    public bool AllowUpdatePrimaryKeys { get; public set; }
    public bool InsertIfNotExists { get; public set; }
    public bool DisablePrimaryKeyNullCheck { get; public set; }
    public ProviderType Provider { get; public set; }
    public Assembly ProviderAssembly { get; public set; }
    public ResolutionType Resolution { get; public set; }
    public bool ForceTriggerResolution { get; public set; }
    public bool DisableInformationSchemaCache { get; public set; }
    public ResultInfo ResultInfo { get; public set; }
    public int RowsAffected { get; public set; }
    public bool UseRowsAffected { get; public set; }
    public bool ValidateNoDuplicateKey { get; public set; }
    public bool DisableTemporaryTableClusteredIndex { get; public set; }
    public bool DisableSqlBulkCopyDirect { get; public set; }
    public bool ForceOutputFromUnmodifiedRow { get; public set; }
    public Nullable`1<bool> AutoTruncate { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsCheckConstraintOnInsertDisabled { get; public set; }
    public Nullable`1<int> SqlBulkCopyOptions { get; public set; }
    public bool MergeKeepIdentity { get; public set; }
    public bool SynchronizeKeepidentity { get; public set; }
    public bool InsertKeepIdentity { get; public set; }
    public bool HasColumnEncrypted { get; public set; }
    public bool UseTempDbForColumnEncrypted { get; public set; }
    public bool SynchronizeOnlyDelete { get; public set; }
    public bool SynchronizeIgnoreUpdate { get; public set; }
    public bool SynchronizeIgnoreInsert { get; public set; }
    public string QueryHint { get; public set; }
    public int TemporaryTableBatchByTable { get; public set; }
    public int TemporaryTableInsertBatchSize { get; public set; }
    public int TemporaryTableMinRecord { get; public set; }
    public bool TemporaryTableUseTableLock { get; public set; }
    public bool UseTableLock { get; public set; }
    public string TableHintSql { get; public set; }
    public string TemporaryTableSchemaName { get; public set; }
    public bool UsePermanentTable { get; public set; }
    public bool TemporaryTableUseSameName { get; public set; }
    public string TemporaryTableName { get; public set; }
    public bool TemporaryTableCreate { get; public set; }
    public bool TemporaryTablePersist { get; public set; }
    public bool TemporaryTableIsMemory { get; public set; }
    public DbTransaction Transaction { get; public set; }
    public InternalTransactionType InternalTransaction { get; public set; }
    public Nullable`1<IsolationLevel> TransactionIsolationLevel { get; public set; }
    public int RetryCount { get; public set; }
    public TimeSpan RetryInterval { get; public set; }
    public bool UnsafeMode { get; public set; }
    public bool ValidateAllSourceMapped { get; public set; }
    public bool ValidateAllDestinationMapped { get; public set; }
    public bool get_UseInternalTransaction();
    public void set_UseInternalTransaction(bool value);
    internal void ();
    [CompilerGeneratedAttribute]
internal List`1<Action`1<BulkOperation>> get_();
    [CompilerGeneratedAttribute]
internal void set_(List`1<Action`1<BulkOperation>> value);
    internal Action`1<BulkOperation> ();
    public sealed virtual void Dispose();
    internal void (BulkOperation );
    internal bool get_();
    public List`1<AuditEntry> get_AuditEntries();
    public void set_AuditEntries(List`1<AuditEntry> value);
    public AuditModeType get_AuditMode();
    public void set_AuditMode(AuditModeType value);
    public bool get_UseAudit();
    public void set_UseAudit(bool value);
    public AutoMapType get_AutoMap();
    public void set_AutoMap(AutoMapType value);
    public string get_AutoMapKeyName();
    public void set_AutoMapKeyName(string value);
    public string get_AutoMapIdentityName();
    public void set_AutoMapIdentityName(string value);
    public Expression`1<Func`2<object, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<object, object>> value);
    public Func`3<string, object, object> get_AutoMapValueFactory();
    public void set_AutoMapValueFactory(Func`3<string, object, object> value);
    public Action`2<string, ColumnMapping> get_AutoMapColumnBuilder();
    public void set_AutoMapColumnBuilder(Action`2<string, ColumnMapping> value);
    public int get_BatchDelayInterval();
    public void set_BatchDelayInterval(int value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_CombineMaxCommand();
    public void set_CombineMaxCommand(int value);
    public int get_BatchTimeout();
    public void set_BatchTimeout(int value);
    public CaseSensitiveType get_CaseSensitive();
    public void set_CaseSensitive(CaseSensitiveType value);
    public LambdaExpression get_LambdaInputExpression();
    public void set_LambdaInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaInputOutputExpression();
    public void set_LambdaInputOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOutputExpression();
    public void set_LambdaOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaPrimaryKeyExpression();
    public void set_LambdaPrimaryKeyExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeDeleteKeySubsetExpression();
    public void set_LambdaSynchronizeDeleteKeySubsetExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreColumnOutputExpression();
    public void set_LambdaIgnoreColumnOutputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnInsertExpression();
    public void set_LambdaIgnoreOnInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnUpdateExpression();
    public void set_LambdaIgnoreOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeInsertExpression();
    public void set_LambdaIgnoreOnMergeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeUpdateExpression();
    public void set_LambdaIgnoreOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeInsertExpression();
    public void set_LambdaIgnoreOnSynchronizeInsertExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeUpdateExpression();
    public void set_LambdaIgnoreOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndConditionExpression();
    public void set_LambdaMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndConditionExpression();
    public void set_LambdaUpdateMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaUpdateMatchedAndOneNotConditionExpression();
    public void set_LambdaUpdateMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndConditionExpression();
    public void set_LambdaDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndConditionExpression();
    public void set_LambdaSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnMergeUpdateExpression();
    public void set_LambdaCoalesceOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnMergeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnMergeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_LambdaCoalesceDestinationOnSynchronizeUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceOnUpdateExpression();
    public void set_LambdaCoalesceOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaCoalesceDestinationOnUpdateExpression();
    public void set_LambdaCoalesceDestinationOnUpdateExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeUpdateInputExpression();
    public void set_LambdaOnMergeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnMergeInsertInputExpression();
    public void set_LambdaOnMergeInsertInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaColumnStagingTableFormulaExpression();
    public void set_LambdaColumnStagingTableFormulaExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeUpdateInputExpression();
    public void set_LambdaOnSynchronizeUpdateInputExpression(LambdaExpression value);
    public LambdaExpression get_LambdaOnSynchronizeInsertInputExpression();
    public void set_LambdaOnSynchronizeInsertInputExpression(LambdaExpression value);
    public Expression`1<Func`2<object, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<object, object>> value);
    public Expression`1<Func`2<object, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<object, object>> value);
    public List`1<ColumnMapping> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping> value);
    public bool get_OnMergeUpdateUseCoalesce();
    public void set_OnMergeUpdateUseCoalesce(bool value);
    public bool get_OnMergeUpdateUseCoalesceDestination();
    public void set_OnMergeUpdateUseCoalesceDestination(bool value);
    public bool get_OnUpdateUseCoalesce();
    public void set_OnUpdateUseCoalesce(bool value);
    public bool get_OnUpdateUseCoalesceDestination();
    public void set_OnUpdateUseCoalesceDestination(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesce();
    public void set_OnSynchronizeUpdateUseCoalesce(bool value);
    public bool get_OnSynchronizeUpdateUseCoalesceDestination();
    public void set_OnSynchronizeUpdateUseCoalesceDestination(bool value);
    public DefaultValueResolutionType get_DefaultValueResolution();
    public void set_DefaultValueResolution(DefaultValueResolutionType value);
    public bool get_MatchNamesWithUnderscores();
    public void set_MatchNamesWithUnderscores(bool value);
    public bool get_UseSmartMatchNames();
    public void set_UseSmartMatchNames(bool value);
    internal bool get_();
    public List`1<string> get_ColumnInputNames();
    public void set_ColumnInputNames(List`1<string> value);
    public List`1<string> get_ColumnInputOutputNames();
    public void set_ColumnInputOutputNames(List`1<string> value);
    public List`1<string> get_ColumnOutputNames();
    public void set_ColumnOutputNames(List`1<string> value);
    public List`1<string> get_ColumnPrimaryKeyNames();
    public void set_ColumnPrimaryKeyNames(List`1<string> value);
    public List`1<string> get_ColumnSynchronizeDeleteKeySubsetNames();
    public void set_ColumnSynchronizeDeleteKeySubsetNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeInsertNames();
    public void set_IgnoreOnMergeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeUpdateNames();
    public void set_IgnoreOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeInsertNames();
    public void set_IgnoreOnSynchronizeInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeUpdateNames();
    public void set_IgnoreOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_IgnoreOnInsertNames();
    public void set_IgnoreOnInsertNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateNames();
    public void set_IgnoreOnUpdateNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndConditionNames();
    public void set_MergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_MergeMatchedAndOneNotConditionNames();
    public void set_MergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndConditionNames();
    public void set_UpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_UpdateMatchedAndOneNotConditionNames();
    public void set_UpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndConditionNames();
    public void set_DeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_DeleteMatchedAndOneNotConditionNames();
    public void set_DeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndConditionNames();
    public void set_SynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_SynchronizeMatchedAndOneNotConditionNames();
    public void set_SynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndConditionNames();
    public void set_IgnoreOnMergeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnMergeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndConditionNames();
    public void set_IgnoreOnDeleteMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnDeleteMatchedAndOneNotConditionNames();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndConditionNames();
    public void set_IgnoreOnUpdateMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnUpdateMatchedAndOneNotConditionNames();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndConditionNames(List`1<string> value);
    public List`1<string> get_IgnoreOnSynchronizeMatchedAndOneNotConditionNames();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionNames(List`1<string> value);
    public List`1<string> get_CoalesceOnMergeUpdateNames();
    public void set_CoalesceOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnMergeUpdateNames();
    public void set_CoalesceDestinationOnMergeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnSynchronizeUpdateNames();
    public void set_CoalesceOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnSynchronizeUpdateNames();
    public void set_CoalesceDestinationOnSynchronizeUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceOnUpdateNames();
    public void set_CoalesceOnUpdateNames(List`1<string> value);
    public List`1<string> get_CoalesceDestinationOnUpdateNames();
    public void set_CoalesceDestinationOnUpdateNames(List`1<string> value);
    public List`1<string> get_OnMergeUpdateInputNames();
    public void set_OnMergeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnMergeInsertInputNames();
    public void set_OnMergeInsertInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeUpdateInputNames();
    public void set_OnSynchronizeUpdateInputNames(List`1<string> value);
    public List`1<string> get_OnSynchronizeInsertInputNames();
    public void set_OnSynchronizeInsertInputNames(List`1<string> value);
    public List`1<string> get_ColumnStagingTableFormulaNames();
    public void set_ColumnStagingTableFormulaNames(List`1<string> value);
    public List`1<string> get_IgnoreColumnOutputNames();
    public void set_IgnoreColumnOutputNames(List`1<string> value);
    public bool get_CommandParameterAddRowIndex();
    public void set_CommandParameterAddRowIndex(bool value);
    public string get_CommandParameterPrefix();
    public void set_CommandParameterPrefix(string value);
    public string get_CommandParameterSuffix();
    public void set_CommandParameterSuffix(string value);
    public bool get_UseCompile();
    public void set_UseCompile(bool value);
    public virtual DbConnection get_Connection();
    public virtual void set_Connection(DbConnection value);
    public string get_ConnectionName();
    public void set_ConnectionName(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public Func`1<DbConnection> get_ConnectionFactory();
    public void set_ConnectionFactory(Func`1<DbConnection> value);
    public CustomProvider get_CustomProvider();
    public void set_CustomProvider(CustomProvider value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public bool get_Debug1();
    public void set_Debug1(bool value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public string get_DestinationSchemaName();
    public void set_DestinationSchemaName(string value);
    public bool get_DisableDotCheckForEscapeTableName();
    public void set_DisableDotCheckForEscapeTableName(bool value);
    public bool get_UseLegacyBatchOperation();
    public void set_UseLegacyBatchOperation(bool value);
    public bool get_IncludeGraph();
    public void set_IncludeGraph(bool value);
    public Action`1<BulkOperation> get_IncludeGraphOperationBuilder();
    public void set_IncludeGraphOperationBuilder(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, string> value);
    public bool get_AutoMapOutputDirection();
    public void set_AutoMapOutputDirection(bool value);
    public Action`1<BatchDelete> get_BatchDeleteBuilder();
    public void set_BatchDeleteBuilder(Action`1<BatchDelete> value);
    public Action`1<BatchUpdate> get_BatchUpdateBuilder();
    public void set_BatchUpdateBuilder(Action`1<BatchUpdate> value);
    public Func`2<DbContext, DbContext> get_ContextFactory();
    public void set_ContextFactory(Func`2<DbContext, DbContext> value);
    public Action`1<BulkOperation> get_PostConfiguration();
    public void set_PostConfiguration(Action`1<BulkOperation> value);
    public bool get_AllowConcurrency();
    public void set_AllowConcurrency(bool value);
    public bool get_DisableStoredProcedure();
    public void set_DisableStoredProcedure(bool value);
    public bool get_IncludeJunctionTable();
    public void set_IncludeJunctionTable(bool value);
    public Nullable`1<bool> get_ForceUpdateUnmodifiedValues();
    public void set_ForceUpdateUnmodifiedValues(Nullable`1<bool> value);
    public Type get_EntityType();
    public void set_EntityType(Type value);
    public bool get_SkipPropagationAndAcceptChanges();
    public void set_SkipPropagationAndAcceptChanges(bool value);
    public int get_StreamSize();
    public void set_StreamSize(int value);
    public ErrorModeType get_ErrorMode();
    public void set_ErrorMode(ErrorModeType value);
    public List`1<BulkOperationError> get_Errors();
    public void set_Errors(List`1<BulkOperationError> value);
    public Action`1<BulkOperation> get_BulkOperationExecuting();
    public void set_BulkOperationExecuting(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_BulkOperationExecuted();
    public void set_BulkOperationExecuted(Action`1<BulkOperation> value);
    public Action`1<BulkOperation> get_DeleteFromQueryExecuted();
    public void set_DeleteFromQueryExecuted(Action`1<BulkOperation> value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_ForceRowsAffectedValidation();
    public void set_ForceRowsAffectedValidation(bool value);
    public string get_MergeStagingTableFilterFormula();
    public void set_MergeStagingTableFilterFormula(string value);
    public string get_InsertStagingTableFilterFormula();
    public void set_InsertStagingTableFilterFormula(string value);
    public string get_UpdateStagingTableFilterFormula();
    public void set_UpdateStagingTableFilterFormula(string value);
    public string get_DeleteStagingTableFilterFormula();
    public void set_DeleteStagingTableFilterFormula(string value);
    public string get_SynchronizeDeleteDestinationTableFilterFormula();
    public void set_SynchronizeDeleteDestinationTableFilterFormula(string value);
    public string get_SynchronizeSoftDeleteFormula();
    public void set_SynchronizeSoftDeleteFormula(string value);
    public string get_InsertNotMatchedAndFormula();
    public void set_InsertNotMatchedAndFormula(string value);
    public string get_MergeNotMatchedAndFormula();
    public void set_MergeNotMatchedAndFormula(string value);
    public string get_SynchronizeNotMatchedAndFormula();
    public void set_SynchronizeNotMatchedAndFormula(string value);
    public string get_MergeMatchedAndFormula();
    public void set_MergeMatchedAndFormula(string value);
    public string get_SynchronizeMatchedAndFormula();
    public void set_SynchronizeMatchedAndFormula(string value);
    public string get_UpdateMatchedAndFormula();
    public void set_UpdateMatchedAndFormula(string value);
    public string get_DeleteMatchedAndFormula();
    public void set_DeleteMatchedAndFormula(string value);
    public string get_UpdatePrimaryKeyAndFormula();
    public void set_UpdatePrimaryKeyAndFormula(string value);
    public string get_MergePrimaryKeyAndFormula();
    public void set_MergePrimaryKeyAndFormula(string value);
    public string get_InsertPrimaryKeyAndFormula();
    public void set_InsertPrimaryKeyAndFormula(string value);
    public string get_DeletePrimaryKeyAndFormula();
    public void set_DeletePrimaryKeyAndFormula(string value);
    public string get_SynchronizePrimaryKeyAndFormulaDelete();
    public void set_SynchronizePrimaryKeyAndFormulaDelete(string value);
    public string get_SynchronizePrimaryKeyAndFormulaMerge();
    public void set_SynchronizePrimaryKeyAndFormulaMerge(string value);
    public string get_ColumnSynchronizeDeleteKeySubsetFormula();
    public void set_ColumnSynchronizeDeleteKeySubsetFormula(string value);
    public bool get_UseStopwatchForSqlExecutingTime();
    public void set_UseStopwatchForSqlExecutingTime(bool value);
    public Stopwatch get_StopwatchForSqlExecutingTime();
    public void set_StopwatchForSqlExecutingTime(Stopwatch value);
    public Action`1<string> get_Log();
    public void set_Log(Action`1<string> value);
    public StringBuilder get_LogDump();
    public void set_LogDump(StringBuilder value);
    public bool get_UseLogDump();
    public void set_UseLogDump(bool value);
    public Action`2<object, StringBuilder> get_AddLogExecuting();
    public void set_AddLogExecuting(Action`2<object, StringBuilder> value);
    public bool get_IgnoreOnMergeUpdate();
    public void set_IgnoreOnMergeUpdate(bool value);
    public bool get_IgnoreOnMergeInsert();
    public void set_IgnoreOnMergeInsert(bool value);
    public bool get_TestExecuteAsync();
    public void set_TestExecuteAsync(bool value);
    public bool get_UseOracleGlobalSequenceIndexTable();
    public void set_UseOracleGlobalSequenceIndexTable(bool value);
    public bool get_ForceSelectOutput();
    public void set_ForceSelectOutput(bool value);
    public int get_ParallelBatchByTask();
    public void set_ParallelBatchByTask(int value);
    public int get_ParallelMinBatch();
    public void set_ParallelMinBatch(int value);
    public int get_ParallelMinRecord();
    public void set_ParallelMinRecord(int value);
    public bool get_UseParallel();
    public void set_UseParallel(bool value);
    public bool get_UsePostgreSqlInsertOverridingSystemValue();
    public void set_UsePostgreSqlInsertOverridingSystemValue(bool value);
    public bool get_UsePostgreSqlInsertOverridingUserValue();
    public void set_UsePostgreSqlInsertOverridingUserValue(bool value);
    public TimeSpan get_PostgreSqlBinaryImportTimeout();
    public void set_PostgreSqlBinaryImportTimeout(TimeSpan value);
    public bool get_UsePostgreSqlInsertOnConflictDoNothing();
    public void set_UsePostgreSqlInsertOnConflictDoNothing(bool value);
    public bool get_UsePostgreSqlTimeZone();
    public void set_UsePostgreSqlTimeZone(bool value);
    public bool get_UsePostgreSqlGetInformationSchema2();
    public void set_UsePostgreSqlGetInformationSchema2(bool value);
    public bool get_UsePostgreSqlUnprepare();
    public void set_UsePostgreSqlUnprepare(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_AllowDuplicateKeys();
    public void set_AllowDuplicateKeys(bool value);
    public bool get_AllowUpdatePrimaryKeys();
    public void set_AllowUpdatePrimaryKeys(bool value);
    public bool get_InsertIfNotExists();
    public void set_InsertIfNotExists(bool value);
    public bool get_DisablePrimaryKeyNullCheck();
    public void set_DisablePrimaryKeyNullCheck(bool value);
    public ProviderType get_Provider();
    public void set_Provider(ProviderType value);
    public Assembly get_ProviderAssembly();
    public void set_ProviderAssembly(Assembly value);
    public ResolutionType get_Resolution();
    public void set_Resolution(ResolutionType value);
    public bool get_ForceTriggerResolution();
    public void set_ForceTriggerResolution(bool value);
    public bool get_DisableInformationSchemaCache();
    public void set_DisableInformationSchemaCache(bool value);
    public ResultInfo get_ResultInfo();
    public void set_ResultInfo(ResultInfo value);
    public int get_RowsAffected();
    public void set_RowsAffected(int value);
    public bool get_UseRowsAffected();
    public void set_UseRowsAffected(bool value);
    public bool get_ValidateNoDuplicateKey();
    public void set_ValidateNoDuplicateKey(bool value);
    public bool get_DisableTemporaryTableClusteredIndex();
    public void set_DisableTemporaryTableClusteredIndex(bool value);
    public bool get_DisableSqlBulkCopyDirect();
    public void set_DisableSqlBulkCopyDirect(bool value);
    public bool get_ForceOutputFromUnmodifiedRow();
    public void set_ForceOutputFromUnmodifiedRow(bool value);
    public Nullable`1<bool> get_AutoTruncate();
    public void set_AutoTruncate(Nullable`1<bool> value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_IsCheckConstraintOnInsertDisabled();
    public void set_IsCheckConstraintOnInsertDisabled(bool value);
    public Nullable`1<int> get_SqlBulkCopyOptions();
    public void set_SqlBulkCopyOptions(Nullable`1<int> value);
    public bool get_MergeKeepIdentity();
    public void set_MergeKeepIdentity(bool value);
    public bool get_SynchronizeKeepidentity();
    public void set_SynchronizeKeepidentity(bool value);
    public bool get_InsertKeepIdentity();
    public void set_InsertKeepIdentity(bool value);
    public bool get_HasColumnEncrypted();
    public void set_HasColumnEncrypted(bool value);
    public bool get_UseTempDbForColumnEncrypted();
    public void set_UseTempDbForColumnEncrypted(bool value);
    public bool get_SynchronizeOnlyDelete();
    public void set_SynchronizeOnlyDelete(bool value);
    public bool get_SynchronizeIgnoreUpdate();
    public void set_SynchronizeIgnoreUpdate(bool value);
    public bool get_SynchronizeIgnoreInsert();
    public void set_SynchronizeIgnoreInsert(bool value);
    public string get_QueryHint();
    public void set_QueryHint(string value);
    public int get_TemporaryTableBatchByTable();
    public void set_TemporaryTableBatchByTable(int value);
    public int get_TemporaryTableInsertBatchSize();
    public void set_TemporaryTableInsertBatchSize(int value);
    public int get_TemporaryTableMinRecord();
    public void set_TemporaryTableMinRecord(int value);
    public bool get_TemporaryTableUseTableLock();
    public void set_TemporaryTableUseTableLock(bool value);
    public bool get_UseTableLock();
    public void set_UseTableLock(bool value);
    public string get_TableHintSql();
    public void set_TableHintSql(string value);
    public string get_TemporaryTableSchemaName();
    public void set_TemporaryTableSchemaName(string value);
    public bool get_UsePermanentTable();
    public void set_UsePermanentTable(bool value);
    public bool get_TemporaryTableUseSameName();
    public void set_TemporaryTableUseSameName(bool value);
    public string get_TemporaryTableName();
    public void set_TemporaryTableName(string value);
    public bool get_TemporaryTableCreate();
    public void set_TemporaryTableCreate(bool value);
    public bool get_TemporaryTablePersist();
    public void set_TemporaryTablePersist(bool value);
    public bool get_TemporaryTableIsMemory();
    public void set_TemporaryTableIsMemory(bool value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public InternalTransactionType get_InternalTransaction();
    public void set_InternalTransaction(InternalTransactionType value);
    public Nullable`1<IsolationLevel> get_TransactionIsolationLevel();
    public void set_TransactionIsolationLevel(Nullable`1<IsolationLevel> value);
    public int get_RetryCount();
    public void set_RetryCount(int value);
    public TimeSpan get_RetryInterval();
    public void set_RetryInterval(TimeSpan value);
    public bool get_UnsafeMode();
    public void set_UnsafeMode(bool value);
    public bool get_ValidateAllSourceMapped();
    public void set_ValidateAllSourceMapped(bool value);
    public bool get_ValidateAllDestinationMapped();
    public void set_ValidateAllDestinationMapped(bool value);
    [CompilerGeneratedAttribute]
private void (BulkOperation );
    [CompilerGeneratedAttribute]
private void (BulkOperation );
}
public class Z.BulkOperations.BulkOperationOptions`1 : BulkOperationOptions {
    internal List`1<ColumnMapping`1<TEntity>> ;
    public List`1<ColumnMapping`1<TEntity>> ColumnMappings { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnInputOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> AutoMapIdentityExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnPrimaryKeyExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnSynchronizeDeleteKeySubsetExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreColumnOutputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeInsertExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> MergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> UpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnMergeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnDeleteMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnUpdateMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> IgnoreOnSynchronizeMatchedAndOneNotConditionExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnMergeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnSynchronizeUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> CoalesceDestinationOnUpdateExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnMergeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeUpdateInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> OnSynchronizeInsertInputExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> ColumnStagingTableFormulaExpression { get; public set; }
    public Action`1<BulkOperation`1<TEntity>> PostConfiguration { get; public set; }
    public List`1<ColumnMapping`1<TEntity>> get_ColumnMappings();
    public void set_ColumnMappings(List`1<ColumnMapping`1<TEntity>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputExpression();
    public void set_ColumnInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnInputOutputExpression();
    public void set_ColumnInputOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnOutputExpression();
    public void set_ColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapKeyExpression();
    public void set_AutoMapKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_AutoMapIdentityExpression();
    public void set_AutoMapIdentityExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnPrimaryKeyExpression();
    public void set_ColumnPrimaryKeyExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnSynchronizeDeleteKeySubsetExpression();
    public void set_ColumnSynchronizeDeleteKeySubsetExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnInsertExpression();
    public void set_IgnoreOnInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreColumnOutputExpression();
    public void set_IgnoreColumnOutputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateExpression();
    public void set_IgnoreOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeInsertExpression();
    public void set_IgnoreOnMergeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeUpdateExpression();
    public void set_IgnoreOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeInsertExpression();
    public void set_IgnoreOnSynchronizeInsertExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeUpdateExpression();
    public void set_IgnoreOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndConditionExpression();
    public void set_MergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_MergeMatchedAndOneNotConditionExpression();
    public void set_MergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndConditionExpression();
    public void set_UpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_UpdateMatchedAndOneNotConditionExpression();
    public void set_UpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndConditionExpression();
    public void set_DeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DeleteMatchedAndOneNotConditionExpression();
    public void set_DeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndConditionExpression();
    public void set_SynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_SynchronizeMatchedAndOneNotConditionExpression();
    public void set_SynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndConditionExpression();
    public void set_IgnoreOnMergeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnMergeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnMergeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnDeleteMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnDeleteMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnUpdateMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnUpdateMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression();
    public void set_IgnoreOnSynchronizeMatchedAndOneNotConditionExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnMergeUpdateExpression();
    public void set_CoalesceOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnMergeUpdateExpression();
    public void set_CoalesceDestinationOnMergeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnSynchronizeUpdateExpression();
    public void set_CoalesceOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnSynchronizeUpdateExpression();
    public void set_CoalesceDestinationOnSynchronizeUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceOnUpdateExpression();
    public void set_CoalesceOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_CoalesceDestinationOnUpdateExpression();
    public void set_CoalesceDestinationOnUpdateExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeUpdateInputExpression();
    public void set_OnMergeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnMergeInsertInputExpression();
    public void set_OnMergeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeUpdateInputExpression();
    public void set_OnSynchronizeUpdateInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_OnSynchronizeInsertInputExpression();
    public void set_OnSynchronizeInsertInputExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_ColumnStagingTableFormulaExpression();
    public void set_ColumnStagingTableFormulaExpression(Expression`1<Func`2<TEntity, object>> value);
    public Action`1<BulkOperation`1<TEntity>> get_PostConfiguration();
    public void set_PostConfiguration(Action`1<BulkOperation`1<TEntity>> value);
}
public static class Z.BulkOperations.BulkOperationReflection : object {
    public static string Get_InternalColumnMapping_DestinationColumn_TemporaryName(object internalColumnMapping);
    public static object Get_InternalColumnMapping_DestinationColumn_DbType(object internalColumnMapping);
    public static int Get_InternalColumnMapping_DestinationColumn_Size(object internalColumnMapping);
}
public class Z.BulkOperations.BulkValueConverter`1 : object {
    public virtual T ConvertFromProvider(object value);
    public virtual object ConvertToProvider(T value);
}
public enum Z.BulkOperations.CaseSensitiveType : Enum {
    public int value__;
    public static CaseSensitiveType Sensitive;
    public static CaseSensitiveType Insensitive;
    public static CaseSensitiveType SourceInsensitive;
    public static CaseSensitiveType DestinationInsensitive;
}
public class Z.BulkOperations.ColumnMapping : object {
    internal bool ;
    internal bool ;
    internal bool ;
    internal ColumnMappingAuditModeType ;
    internal ColumnMappingCaseSensitiveType ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal string ;
    internal LambdaExpression ;
    internal string ;
    internal int ;
    internal ColumnMappingDirectionType ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ColumnMappingFormulaType ;
    internal string ;
    internal bool ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal LambdaExpression ;
    internal string ;
    internal int ;
    internal object ;
    internal Func`2<object, object> ;
    internal DefaultValueResolutionType ;
    internal object ;
    internal string ;
    [CompilerGeneratedAttribute]
private bool ;
    public bool CoalesceOnMergeUpdate { get; public set; }
    public bool CoalesceDestinationOnMergeUpdate { get; public set; }
    public bool IsOptional { get; public set; }
    public ColumnMappingAuditModeType AuditMode { get; public set; }
    public ColumnMappingCaseSensitiveType CaseSensitive { get; public set; }
    public bool IsConcurrencyColumn { get; public set; }
    internal bool  { get; internal set; }
    public string DestinationAlias { get; public set; }
    public Expression`1<Func`2<object, object>> DestinationExpression { get; public set; }
    public string DestinationName { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public ColumnMappingDirectionType Direction { get; public set; }
    internal string  { get; internal set; }
    internal string  { get; internal set; }
    public string FormulaInsert { get; public set; }
    public ColumnMappingFormulaType FormulaType { get; public set; }
    public string FormulaUpdate { get; public set; }
    public string FormulaPrimaryKeyDelete { get; public set; }
    public string FormulaPrimaryKeyMerge { get; public set; }
    public string FormulaPrimaryKeySynchronize { get; public set; }
    public string FormulaPrimaryKeyUpdate { get; public set; }
    public bool IsIdentity { get; public set; }
    internal string  { get; internal set; }
    public bool IgnoreOnInsert { get; public set; }
    public bool IgnoreOnUpdate { get; public set; }
    public bool IgnoreOnMergeInsert { get; public set; }
    public bool IgnoreOnMergeUpdate { get; public set; }
    public bool IgnoreOnSynchronizeInsert { get; public set; }
    public bool IgnoreOnSynchronizeUpdate { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public string SourceName { get; public set; }
    public int SourceOrdinal { get; public set; }
    public Expression`1<Func`2<object, object>> SourceExpression { get; public set; }
    public object SourceValue { get; public set; }
    public Func`2<object, object> SourceValueFactory { get; public set; }
    public DefaultValueResolutionType DefaultValueResolution { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueSql { get; public set; }
    internal bool  { get; internal set; }
    public ColumnMapping(string columnName);
    public ColumnMapping(string columnName, bool isPrimaryKey);
    public ColumnMapping(string columnName, ColumnMappingDirectionType direction);
    public ColumnMapping(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping(string sourceName, string destinationName);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal);
    public ColumnMapping(int sourceOrdinal, string destinationName);
    public ColumnMapping(string sourceName, int destinationOrdinal);
    public ColumnMapping(string sourceName, string destinationName, bool isPrimaryKey);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public ColumnMapping(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public ColumnMapping(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public bool get_CoalesceOnMergeUpdate();
    public void set_CoalesceOnMergeUpdate(bool value);
    public bool get_CoalesceDestinationOnMergeUpdate();
    public void set_CoalesceDestinationOnMergeUpdate(bool value);
    public bool get_IsOptional();
    public void set_IsOptional(bool value);
    public ColumnMappingAuditModeType get_AuditMode();
    public void set_AuditMode(ColumnMappingAuditModeType value);
    public ColumnMappingCaseSensitiveType get_CaseSensitive();
    public void set_CaseSensitive(ColumnMappingCaseSensitiveType value);
    public bool get_IsConcurrencyColumn();
    public void set_IsConcurrencyColumn(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public string get_DestinationAlias();
    public void set_DestinationAlias(string value);
    public Expression`1<Func`2<object, object>> get_DestinationExpression();
    public void set_DestinationExpression(Expression`1<Func`2<object, object>> value);
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public ColumnMappingDirectionType get_Direction();
    public void set_Direction(ColumnMappingDirectionType value);
    [CompilerGeneratedAttribute]
internal string get_();
    [CompilerGeneratedAttribute]
internal void set_(string value);
    [CompilerGeneratedAttribute]
internal string get_();
    [CompilerGeneratedAttribute]
internal void set_(string value);
    public string get_FormulaInsert();
    public void set_FormulaInsert(string value);
    public ColumnMappingFormulaType get_FormulaType();
    public void set_FormulaType(ColumnMappingFormulaType value);
    public string get_FormulaUpdate();
    public void set_FormulaUpdate(string value);
    public string get_FormulaPrimaryKeyDelete();
    public void set_FormulaPrimaryKeyDelete(string value);
    public string get_FormulaPrimaryKeyMerge();
    public void set_FormulaPrimaryKeyMerge(string value);
    public string get_FormulaPrimaryKeySynchronize();
    public void set_FormulaPrimaryKeySynchronize(string value);
    public string get_FormulaPrimaryKeyUpdate();
    public void set_FormulaPrimaryKeyUpdate(string value);
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    internal string get_();
    internal void set_(string value);
    public bool get_IgnoreOnInsert();
    public void set_IgnoreOnInsert(bool value);
    public bool get_IgnoreOnUpdate();
    public void set_IgnoreOnUpdate(bool value);
    public bool get_IgnoreOnMergeInsert();
    public void set_IgnoreOnMergeInsert(bool value);
    public bool get_IgnoreOnMergeUpdate();
    public void set_IgnoreOnMergeUpdate(bool value);
    public bool get_IgnoreOnSynchronizeInsert();
    public void set_IgnoreOnSynchronizeInsert(bool value);
    public bool get_IgnoreOnSynchronizeUpdate();
    public void set_IgnoreOnSynchronizeUpdate(bool value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
    public Expression`1<Func`2<object, object>> get_SourceExpression();
    public void set_SourceExpression(Expression`1<Func`2<object, object>> value);
    public object get_SourceValue();
    public void set_SourceValue(object value);
    public Func`2<object, object> get_SourceValueFactory();
    public void set_SourceValueFactory(Func`2<object, object> value);
    public DefaultValueResolutionType get_DefaultValueResolution();
    public void set_DefaultValueResolution(DefaultValueResolutionType value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public string get_DefaultValueSql();
    public void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
}
public class Z.BulkOperations.ColumnMapping`1 : ColumnMapping {
    public Expression`1<Func`2<TEntity, object>> SourceExpression { get; public set; }
    public Expression`1<Func`2<TEntity, object>> DestinationExpression { get; public set; }
    public ColumnMapping`1(string columnName);
    public ColumnMapping`1(string columnName, bool isPrimaryKey);
    public ColumnMapping`1(string columnName, ColumnMappingDirectionType direction);
    public ColumnMapping`1(string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(string sourceName, string destinationName);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal);
    public ColumnMapping`1(int sourceOrdinal, string destinationName);
    public ColumnMapping`1(string sourceName, int destinationOrdinal);
    public ColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    public ColumnMapping`1(string sourceName, string destinationName, ColumnMappingDirectionType direction);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    public ColumnMapping`1(string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    public ColumnMapping`1(Expression`1<Func`2<TEntity, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    public Expression`1<Func`2<TEntity, object>> get_SourceExpression();
    public void set_SourceExpression(Expression`1<Func`2<TEntity, object>> value);
    public Expression`1<Func`2<TEntity, object>> get_DestinationExpression();
    public void set_DestinationExpression(Expression`1<Func`2<TEntity, object>> value);
}
public enum Z.BulkOperations.ColumnMappingAuditModeType : Enum {
    public int value__;
    public static ColumnMappingAuditModeType Inherit;
    public static ColumnMappingAuditModeType Include;
    public static ColumnMappingAuditModeType Exclude;
}
public enum Z.BulkOperations.ColumnMappingCaseSensitiveType : Enum {
    public int value__;
    public static ColumnMappingCaseSensitiveType Inherit;
    public static ColumnMappingCaseSensitiveType Sensitive;
    public static ColumnMappingCaseSensitiveType Insensitive;
    public static ColumnMappingCaseSensitiveType SourceInsensitive;
    public static ColumnMappingCaseSensitiveType DestinationInsensitive;
}
public enum Z.BulkOperations.ColumnMappingDirectionType : Enum {
    public int value__;
    public static ColumnMappingDirectionType None;
    public static ColumnMappingDirectionType Input;
    public static ColumnMappingDirectionType Output;
    public static ColumnMappingDirectionType InputOutput;
    public static ColumnMappingDirectionType Formula;
    public static ColumnMappingDirectionType FormulaOutput;
}
[ExtensionAttribute]
public static class Z.BulkOperations.ColumnMappingExtensions : object {
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<BasicColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string columnName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, string sourceName, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, int sourceOrdinal, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> columnExpression, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, int destinationOrdinal, bool isPrimaryKey, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, ColumnMappingDirectionType direction);
    [ExtensionAttribute]
public static void Add(List`1<ColumnMapping`1<T>> list, Expression`1<Func`2<T, object>> sourceExpression, string destinationName, bool isPrimaryKey, ColumnMappingDirectionType direction);
}
public enum Z.BulkOperations.ColumnMappingFormulaType : Enum {
    public int value__;
    public static ColumnMappingFormulaType None;
    public static ColumnMappingFormulaType UpdateIfNotNull;
}
public class Z.BulkOperations.CustomProvider : object {
    internal ProviderType ;
    [CompilerGeneratedAttribute]
private Action`2<DbCommand, bool> ;
    [CompilerGeneratedAttribute]
private Func`3<DbCommand, int, int> ;
    [CompilerGeneratedAttribute]
private Action`2<DbCommand, int> ;
    public Action`2<DbCommand, bool> SetBindByName { get; public set; }
    public Func`3<DbCommand, int, int> ExecuteArray { get; public set; }
    public Action`2<DbCommand, int> SetArrayBindCount { get; public set; }
    public CustomProvider(ProviderType provider);
    [CompilerGeneratedAttribute]
public Action`2<DbCommand, bool> get_SetBindByName();
    [CompilerGeneratedAttribute]
public void set_SetBindByName(Action`2<DbCommand, bool> value);
    [CompilerGeneratedAttribute]
public Func`3<DbCommand, int, int> get_ExecuteArray();
    [CompilerGeneratedAttribute]
public void set_ExecuteArray(Func`3<DbCommand, int, int> value);
    [CompilerGeneratedAttribute]
public Action`2<DbCommand, int> get_SetArrayBindCount();
    [CompilerGeneratedAttribute]
public void set_SetArrayBindCount(Action`2<DbCommand, int> value);
    internal static int (int );
}
public class Z.BulkOperations.DbBulkOperationConcurrencyException : Exception {
    public IEnumerable`1<object> Entries;
    internal object ;
    internal DbBulkOperationConcurrencyException(DataTable ,  , int , int );
}
public enum Z.BulkOperations.DebugLogType : Enum {
    public int value__;
    public static DebugLogType AccessorIterator_IsEmpty_IsTrue;
    public static DebugLogType AccessorIterator_IsEmpty_IsFalse;
    public static DebugLogType AccessorIterator_IsEnumerable_IsTrue;
    public static DebugLogType AccessorIterator_IsEnumerable_IsFalse;
    public static DebugLogType AccessorIterator_IsStreaming_IsTrue;
    public static DebugLogType AccessorIterator_IsStreaming_IsFalse;
    public static DebugLogType AccessorIterator_IsStreamingAllowed_IsTrue;
    public static DebugLogType AccessorIterator_IsStreamingAllowed_IsFalse;
    public static DebugLogType AccessorIterator_ResolveEnumerableToList_IsTrue;
    public static DebugLogType AccessorIterator_ResolveEnumerableToList_IsFalse;
    public static DebugLogType AccessorIterator_ResolveToMemory_IsTrue;
    public static DebugLogType AccessorIterator_ResolveToMemory_IsFalse;
    public static DebugLogType AutoMap_HasColumnMapping_IsTrue;
    public static DebugLogType AutoMap_HasColumnMapping_IsFalse;
    public static DebugLogType AutoMap_IsByIndexerName_IsTrue;
    public static DebugLogType AutoMap_IsByIndexerName_IsFalse;
    public static DebugLogType AutoMap_IsByName_IsTrue;
    public static DebugLogType AutoMap_IsByName_IsFalse;
    public static DebugLogType AutoMap_IsByOrdinal_IsTrue;
    public static DebugLogType AutoMap_IsByOrdinal_IsFalse;
    public static DebugLogType AutoMap_ResolveSetByIndexerName_IsTrue;
    public static DebugLogType AutoMap_ResolveSetByIndexerName_IsFalse;
    public static DebugLogType AutoMap_ResolveSetByName_IsTrue;
    public static DebugLogType AutoMap_ResolveSetByName_IsFalse;
    public static DebugLogType AutoMap_ResolveSetByOrdinal_IsTrue;
    public static DebugLogType AutoMap_ResolveSetByOrdinal_IsFalse;
    public static DebugLogType Batch_ValidateIsBatchDelayIntervalInRange_IsTrue;
    public static DebugLogType Batch_ValidateIsBatchDelayIntervalInRange_IsFalse;
    public static DebugLogType Batch_ValidateIsBatchSizeInRange_IsTrue;
    public static DebugLogType Batch_ValidateIsBatchSizeInRange_IsFalse;
    public static DebugLogType Batch_ValidateIsBatchTimeoutInRange_IsTrue;
    public static DebugLogType Batch_ValidateIsBatchTimeoutInRange_IsFalse;
    public static DebugLogType ColumnExpression_HasConcurrency_IsTrue;
    public static DebugLogType ColumnExpression_HasConcurrency_IsFalse;
    public static DebugLogType ColumnExpression_HasInput_IsTrue;
    public static DebugLogType ColumnExpression_HasInput_IsFalse;
    public static DebugLogType ColumnName_HasInput_IsTrue;
    public static DebugLogType ColumnName_HasInput_IsFalse;
    public static DebugLogType ColumnExpression_HasOutput_IsTrue;
    public static DebugLogType ColumnExpression_HasOutput_IsFalse;
    public static DebugLogType ColumnName_HasOutput_IsTrue;
    public static DebugLogType ColumnName_HasOutput_IsFalse;
    public static DebugLogType ColumnExpression_HasPrimaryKey_IsTrue;
    public static DebugLogType ColumnExpression_HasPrimaryKey_IsFalse;
    public static DebugLogType ColumnName_HasPrimaryKey_IsTrue;
    public static DebugLogType ColumnName_HasPrimaryKey_IsFalse;
    public static DebugLogType ColumnExpression_HasSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnExpression_HasSynchronizeDeleteKey_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetConcurrency_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetConcurrency_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetInput_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetInput_IsFalse;
    public static DebugLogType ColumnStagingTableFormulaExpression_IsTrue;
    public static DebugLogType ColumnStagingTableFormulaExpression_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetOutput_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetOutput_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetPrimaryKey_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetPrimaryKey_IsFalse;
    public static DebugLogType ColumnExpression_ResolveSetSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnExpression_ResolveSetSynchronizeDeleteKey_IsFalse;
    public static DebugLogType ColumnMapping_HasColumn_IsTrue;
    public static DebugLogType ColumnMapping_HasColumn_IsFalse;
    public static DebugLogType ColumnMapping_IsStagingColumnRequired_IsTrue;
    public static DebugLogType ColumnMapping_IsStagingColumnRequired_IsFalse;
    public static DebugLogType ColumnMapping_ResolveAddStagingColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveAddStagingColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveCombineColumnMappings_IsTrue;
    public static DebugLogType ColumnMapping_ResolveCombineColumnMappings_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetInsertColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetInsertColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetMapping_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetMapping_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetOutputDeletedColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetOutputDeletedColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetOutputInsertedColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetOutputInsertedColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetStagingColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetStagingColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetStagingPKColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetStagingPKColumn_IsFalse;
    public static DebugLogType ColumnMapping_ResolveSetUpdateColumn_IsTrue;
    public static DebugLogType ColumnMapping_ResolveSetUpdateColumn_IsFalse;
    public static DebugLogType ColumnMappingDestination_HasExpression_IsTrue;
    public static DebugLogType ColumnMappingDestination_HasExpression_IsFalse;
    public static DebugLogType ColumnMappingDestination_HasName_IsTrue;
    public static DebugLogType ColumnMappingDestination_HasName_IsFalse;
    public static DebugLogType ColumnMappingDestination_HasOrdinal_IsTrue;
    public static DebugLogType ColumnMappingDestination_HasOrdinal_IsFalse;
    public static DebugLogType ColumnMappingDestination_IsCaseSensitive_IsTrue;
    public static DebugLogType ColumnMappingDestination_IsCaseSensitive_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveDestination_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveDestination_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveDestinationCaseSensitive_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromExpression_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromExpression_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromName_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromName_IsFalse;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromOrdinal_IsTrue;
    public static DebugLogType ColumnMappingDestination_ResolveSetFromOrdinal_IsFalse;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllMappingSingle_IsTrue;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllSetted_IsTrue;
    public static DebugLogType ColumnMappingDestination_ValidateIsAllSetted_IsFalse;
    public static DebugLogType ColumnMappingDestination_ValidateIsOrdinalInRange_IsTrue;
    public static DebugLogType ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse;
    public static DebugLogType Column_HasGuidIdentity_IsTrue;
    public static DebugLogType Column_HasGuidIdentity_IsFalse;
    public static DebugLogType Column_ResolveGuidIdentity_IsTrue;
    public static DebugLogType Column_ResolveGuidIdentity_IsFalse;
    public static DebugLogType ColumnMappingSource_HasExpression_IsTrue;
    public static DebugLogType ColumnMappingSource_HasExpression_IsFalse;
    public static DebugLogType ColumnMappingSource_HasName_IsTrue;
    public static DebugLogType ColumnMappingSource_HasName_IsFalse;
    public static DebugLogType ColumnMappingSource_HasOrdinal_IsTrue;
    public static DebugLogType ColumnMappingSource_HasOrdinal_IsFalse;
    public static DebugLogType ColumnMappingSource_HasSourceValue_IsTrue;
    public static DebugLogType ColumnMappingSource_HasSourceValue_IsFalse;
    public static DebugLogType ColumnMappingSource_HasSourceValueFactory_IsTrue;
    public static DebugLogType ColumnMappingSource_HasSourceValueFactory_IsFalse;
    public static DebugLogType ColumnMappingSource_IsOrdinalImplicitSupported_IsTrue;
    public static DebugLogType ColumnMappingSource_IsOrdinalImplicitSupported_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromExpression_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromExpression_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromName_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromName_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromOrdinal_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromOrdinal_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValue_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValue_IsFalse;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValueFactory_IsTrue;
    public static DebugLogType ColumnMappingSource_ResolveSetFromValueFactory_IsFalse;
    public static DebugLogType ColumnMappingSource_ValidateIsAllSetted_IsTrue;
    public static DebugLogType ColumnMappingSource_ValidateIsAllSetted_IsFalse;
    public static DebugLogType ColumnMappingSource_ValidateIsOrdinalInRange_IsTrue;
    public static DebugLogType ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse;
    public static DebugLogType Connection_IsConnectionString_IsTrue;
    public static DebugLogType Connection_IsConnectionString_IsFalse;
    public static DebugLogType Connection_IsDynamicRequired_IsTrue;
    public static DebugLogType Connection_IsDynamicRequired_IsFalse;
    public static DebugLogType Connection_IsInstance_IsTrue;
    public static DebugLogType Connection_IsInstance_IsFalse;
    public static DebugLogType Connection_IsNameSetted_IsTrue;
    public static DebugLogType Connection_IsNameSetted_IsFalse;
    public static DebugLogType Connection_IsProviderNameSetted_IsTrue;
    public static DebugLogType Connection_IsProviderNameSetted_IsFalse;
    public static DebugLogType Connection_IsTypeSetted_IsTrue;
    public static DebugLogType Connection_IsTypeSetted_IsFalse;
    public static DebugLogType Connection_ResolveSetConnectionStringFromKey_IsTrue;
    public static DebugLogType Connection_ResolveSetConnectionStringFromKey_IsFalse;
    public static DebugLogType Connection_ResolveSetTypeByConnection_IsTrue;
    public static DebugLogType Connection_ResolveSetTypeByConnection_IsFalse;
    public static DebugLogType Connection_ResolveSetTypeFromAssembly_IsTrue;
    public static DebugLogType Connection_ResolveSetTypeFromAssembly_IsFalse;
    public static DebugLogType Connection_TryResolveSetTypeByProviderName_IsTrue;
    public static DebugLogType Connection_TryResolveSetTypeByProviderName_IsFalse;
    public static DebugLogType Connection_ValidateIsDynamic_IsTrue;
    public static DebugLogType Connection_ValidateIsDynamic_IsFalse;
    public static DebugLogType Connection_ValidateIsExclusive_IsTrue;
    public static DebugLogType Connection_ValidateIsExclusive_IsFalse;
    public static DebugLogType Connection_ValidateIsNameExists_IsTrue;
    public static DebugLogType Connection_ValidateIsNameExists_IsFalse;
    public static DebugLogType Connection_ValidateIsSetted_IsTrue;
    public static DebugLogType Connection_ValidateIsSetted_IsFalse;
    public static DebugLogType Connection_ValidateIsStateOpen_IsTrue;
    public static DebugLogType Connection_ValidateIsStateOpen_IsFalse;
    public static DebugLogType DataSource_ResolveToAccessorIterator_IsTrue;
    public static DebugLogType DataSource_ResolveToAccessorIterator_IsFalse;
    public static DebugLogType DataSource_ValidateIsSetted_IsTrue;
    public static DebugLogType DataSource_ValidateIsSetted_IsFalse;
    public static DebugLogType DestinationTableName_IsSetted_IsTrue;
    public static DebugLogType DestinationTableName_IsSetted_IsFalse;
    public static DebugLogType DestinationTableName_TryResolveFromDataSource_IsTrue;
    public static DebugLogType DestinationTableName_TryResolveFromDataSource_IsFalse;
    public static DebugLogType DestinationTableName_ValidateIsSetted_IsTrue;
    public static DebugLogType DestinationTableName_ValidateIsSetted_IsFalse;
    public static DebugLogType InformationSchemaTable_IsInMemory_IsTrue;
    public static DebugLogType InformationSchemaTable_IsInMemory_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveAddToMemory_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveAddToMemory_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveSetFromDatabase_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveSetFromDatabase_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveSetFromMemory_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveSetFromMemory_IsFalse;
    public static DebugLogType InformationSchemaTable_ResolveSetKey_IsTrue;
    public static DebugLogType InformationSchemaTable_ResolveSetKey_IsFalse;
    public static DebugLogType Internal_ResolveSetInternal_IsTrue;
    public static DebugLogType Internal_ResolveSetInternal_IsFalse;
    public static DebugLogType Notification_ValidateIsInRange_IsTrue;
    public static DebugLogType Notification_ValidateIsInRange_IsFalse;
    public static DebugLogType Parallel_IsEnabled_IsTrue;
    public static DebugLogType Parallel_IsEnabled_IsFalse;
    public static DebugLogType Parallel_ValidateIsBatchByTaskInRange_IsTrue;
    public static DebugLogType Parallel_ValidateIsBatchByTaskInRange_IsFalse;
    public static DebugLogType Parallel_ValidateIsMinBatchInRange_IsTrue;
    public static DebugLogType Parallel_ValidateIsMinBatchInRange_IsFalse;
    public static DebugLogType Parallel_ValidateIsMinRecordInRange_IsTrue;
    public static DebugLogType Parallel_ValidateIsMinRecordInRange_IsFalse;
    public static DebugLogType PrimaryKey_IsOperationRequired_IsTrue;
    public static DebugLogType PrimaryKey_IsOperationRequired_IsFalse;
    public static DebugLogType PrimaryKey_IsRequired_IsTrue;
    public static DebugLogType PrimaryKey_IsRequired_IsFalse;
    public static DebugLogType PrimaryKey_IsSetted_IsTrue;
    public static DebugLogType PrimaryKey_IsSetted_IsFalse;
    public static DebugLogType PrimaryKey_TryResolveSetFromDatabase_IsTrue;
    public static DebugLogType PrimaryKey_TryResolveSetFromDatabase_IsFalse;
    public static DebugLogType PrimaryKey_TryResolveSetFromIdentity_IsTrue;
    public static DebugLogType PrimaryKey_TryResolveSetFromIdentity_IsFalse;
    public static DebugLogType PrimaryKey_ValidateIsSetted_IsTrue;
    public static DebugLogType PrimaryKey_ValidateIsSetted_IsFalse;
    public static DebugLogType Provider_ResolveSetProvider_IsTrue;
    public static DebugLogType Provider_ResolveSetProvider_IsFalse;
    public static DebugLogType SqlBulkCopy_HasOptions_IsTrue;
    public static DebugLogType SqlBulkCopy_HasOptions_IsFalse;
    public static DebugLogType SqlBulkCopy_ValidateIsOptionsCompatible_IsTrue;
    public static DebugLogType SqlBulkCopy_ValidateIsOptionsCompatible_IsFalse;
    public static DebugLogType TemporaryTable_ValidateIsBatchByTableInRange_IsTrue;
    public static DebugLogType TemporaryTable_ValidateIsBatchByTableInRange_IsFalse;
    public static DebugLogType TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsTrue;
    public static DebugLogType TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsFalse;
    public static DebugLogType TemporaryTable_ValidateIsMinRecordInRange_IsTrue;
    public static DebugLogType TemporaryTable_ValidateIsMinRecordInRange_IsFalse;
    public static DebugLogType Transaction_IsTypeSetted_IsTrue;
    public static DebugLogType Transaction_IsTypeSetted_IsFalse;
    public static DebugLogType Transaction_ValidateIsExclusive_IsTrue;
    public static DebugLogType Transaction_ValidateIsExclusive_IsFalse;
    public static DebugLogType Transaction_ValidateIsValid_IsTrue;
    public static DebugLogType Transaction_ValidateIsValid_IsFalse;
    public static DebugLogType Transaction_ValidateTypeIsValid_IsTrue;
    public static DebugLogType Transaction_ValidateTypeIsValid_IsFalse;
    public static DebugLogType DbActionFactory_Update_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Update_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Update_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Update_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Update_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Update_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Update_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Update_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsTrue;
    public static DebugLogType DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsFalse;
    public static DebugLogType DbActionFactory_TemporaryTable_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_TemporaryTable_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_TemporaryTable_IsLimitEnabled_IsTrue;
    public static DebugLogType DbActionFactory_TemporaryTable_IsLimitEnabled_IsFalse;
    public static DebugLogType DbActionFactory_Synchronize_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Synchronize_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Parallel_ResolveSplitByParallel_IsTrue;
    public static DebugLogType DbActionFactory_Parallel_ResolveSplitByParallel_IsFalse;
    public static DebugLogType DbActionFactory_Parallel_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Parallel_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Parallel_IsEnabled_IsTrue;
    public static DebugLogType DbActionFactory_Parallel_IsEnabled_IsFalse;
    public static DebugLogType DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Merge_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Merge_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Merge_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Merge_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Insert_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Insert_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsTrue;
    public static DebugLogType DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsFalse;
    public static DebugLogType DbActionFactory_Insert_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Insert_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_Insert_IsBulkCopyTableDirect_IsTrue;
    public static DebugLogType DbActionFactory_Insert_IsBulkCopyTableDirect_IsFalse;
    public static DebugLogType DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsTrue;
    public static DebugLogType DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsFalse;
    public static DebugLogType DbActionFactory_Delete_ResolveSetSqlStatementActions_IsTrue;
    public static DebugLogType DbActionFactory_Delete_ResolveSetSqlStatementActions_IsFalse;
    public static DebugLogType DbActionFactory_Delete_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Delete_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Delete_IsSqlStatement_IsTrue;
    public static DebugLogType DbActionFactory_Delete_IsSqlStatement_IsFalse;
    public static DebugLogType DbActionFactory_DeleteFromQuery_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_DeleteFromQuery_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsUpdate_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsUpdate_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsSynchronize_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsSynchronize_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsMerge_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsMerge_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsInsert_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsInsert_IsFalse;
    public static DebugLogType DbActionFactory_Action_IsDelete_IsTrue;
    public static DebugLogType DbActionFactory_Action_IsDelete_IsFalse;
    public static DebugLogType Action_IsDeleteFromQuery_IsTrue;
    public static DebugLogType Action_IsDeleteFromQuery_IsFalse;
    public static DebugLogType DbActionFactory_Merge_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Merge_Resolve_IsFalse;
    public static DebugLogType DbActionFactory_Insert_Resolve_IsTrue;
    public static DebugLogType DbActionFactory_Insert_Resolve_IsFalse;
    public static DebugLogType SqlCe_ResolveColumnIndexOrdinal_IsTrue;
    public static DebugLogType SqlCe_ResolveColumnIndexOrdinal_IsFalse;
    public static DebugLogType SqlCe_ResolveUniqueIndex_IsTrue;
    public static DebugLogType SqlCe_ResolveUniqueIndex_IsFalse;
    public static DebugLogType SqlCe_ValidateHasAllSettingSupported_IsTrue;
    public static DebugLogType SqlCe_ValidateHasAllSettingSupported_IsFalse;
    public static DebugLogType ColumnName_ResolveSetPrimaryKey_IsTrue;
    public static DebugLogType ColumnName_ResolveSetPrimaryKey_IsFalse;
    public static DebugLogType ColumnName_ResolveSetSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnName_ResolveSetSynchronizeDeleteKey_IsFalse;
    public static DebugLogType ColumnName_HasSynchronizeDeleteKey_IsTrue;
    public static DebugLogType ColumnName_HasSynchronizeDeleteKey_IsFalse;
}
public enum Z.BulkOperations.DefaultValueResolutionType : Enum {
    public int value__;
    public static DefaultValueResolutionType Inherit;
    public static DefaultValueResolutionType None;
    public static DefaultValueResolutionType Null;
}
public enum Z.BulkOperations.ErrorModeType : Enum {
    public int value__;
    public static ErrorModeType ThrowException;
    public static ErrorModeType IgnoreAndContinue;
    public static ErrorModeType RetrySingleAndContinue;
}
public static class Z.BulkOperations.ExceptionMessage : object {
    internal static string ;
    internal static string ;
    public static string GeneralException;
    public static string Error13;
    public static string AccessorIterator_ResolveEnumerableToList_IsFalse;
    public static string AccessorIterator_ResolveToMemory_IsFalse;
    public static string AccessorIterator_ResolveToMemory_IsFalse_UnsupportedDataSource;
    public static string AutoMap_ResolveSetByName_IsFalse;
    public static string AutoMap_ResolveSetByOrdinal_IsFalse;
    public static string AutoMap_ResolveSetByIndexerName_IsFalse;
    public static string AutoMap_ValidateIsSourceOrdinalSupported_IsFalse;
    public static string Batch_ValidateIsBatchDelayIntervalInRange_IsFalse;
    public static string Batch_ValidateIsBatchSizeInRange_IsFalse;
    public static string Batch_ValidateIsBatchTimeoutInRange_IsFalse;
    public static string ColumnExpression_ResolveSetConcurrency_IsFalse;
    public static string ColumnExpression_ResolveSetInput_IsFalse;
    public static string ColumnExpression_ResolveSetInputOutput_IsFalse;
    public static string ColumnExpression_ResolveSetOutput_IsFalse;
    public static string ColumnExpression_ResolveSetPrimaryKey_IsFalse;
    public static string ColumnExpression_ResolveSetSynchronizeDeleteKey_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInput_step1_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInput_step2_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateOutput_step2_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateOutput_step1_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInputOutput_step1_IsFalse;
    public static string ColumnExpression_ResolveColumnAddOrUpdateInputOutput_step2_IsFalse;
    public static string ColumnMapping_ResolveCombineColumnMappings_IsFalse;
    public static string ColumnMapping_ResolveSetMapping_IsFalse;
    public static string ColumnMappingDestination_ResolveDestination_IsFalse;
    public static string ColumnMappingDestination_ResolveDestination_IsFalse_Detail;
    public static string ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse;
    public static string ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse_Detail;
    public static string ColumnMappingDestination_ResolveSetFromOrdinal_IsFalse;
    public static string ColumnMappingDestination_ResolveSetFromExpression_IsFalse;
    public static string ColumnMappingDestination_ResolveSetFromName_IsFalse;
    public static string Column_ResolveGuidIdentity_IsFalse;
    public static string ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse;
    public static string ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse_Detail;
    public static string ColumnMappingDestination_ValidateIsAllSetted_IsFalse;
    public static string ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse;
    public static string ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse_Detail;
    public static string ColumnMappingSource_ResolveSetAccessor_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromExpression_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromName_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromName_IsFalse_Detail;
    public static string ColumnMappingSource_ResolveSetFromOrdinal_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromValue_IsFalse;
    public static string ColumnMappingSource_ResolveSetFromValueFactory_IsFalse;
    public static string ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse;
    public static string ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse_Detail;
    public static string ColumnMappingSource_ValidateIsAllSetted_IsFalse;
    public static string Connection_ResolveSetTypeByConnection_IsFalse;
    public static string Connection_ResolveSetTypeFromAssembly_IsFalse;
    public static string Connection_ValidateIsDynamic_IsFalse;
    public static string Connection_ValidateIsExclusive_IsFalse;
    public static string Connection_ValidateIsNameExists_IsFalse;
    public static string Connection_ValidateIsSetted_IsFalse;
    public static string Connection_ValidateIsStateOpen_IsFalse;
    public static string DataSource_ResolveToAccessorIterator_IsFalse;
    public static string DataSource_ValidateIsSetted_IsFalse;
    public static string DestinationTableName_ValidateIsSetted_IsFalse;
    public static string InformationSchemaTable_ResolveAddToMemory_IsFalse;
    public static string InformationSchemaTable_ResolveSetFromDatabase_IsFalse;
    public static string InformationSchemaTable_ResolveSetFromMemory_IsFalse;
    public static string InformationSchemaTable_ResolveSetKey_IsFalse;
    public static string Notification_ValidateIsInRange_IsFalse;
    public static string Parallel_ValidateIsBatchByTaskInRange_IsFalse;
    public static string Parallel_ValidateIsMinBatchInRange_IsFalse;
    public static string Parallel_ValidateIsMinRecordInRange_IsFalse;
    public static string PrimaryKey_ValidateIsSetted_IsFalse;
    public static string Provider_ResolveSetProvider_IsFalse;
    public static string TemporaryTable_ValidateIsBatchByTableInRange_IsFalse;
    public static string TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsFalse;
    public static string TemporaryTable_ValidateIsMinRecordInRange_IsFalse;
    public static string Transaction_ValidateIsExclusive_IsFalse;
    public static string Transaction_ValidateIsValid_IsFalse;
    public static string Transaction_ValidateTypeIsValid_IsFalse;
    public static string SqlBulkCopy_ValidateIsOptionsCompatible_IsFalse;
    public static string SqlServer_Error_8672;
    public static string SqlServer_Error_8672_Key_Table;
    public static string SqlServer_Error_8672_Table;
    public static string SqlServer_Error_4186;
    public static string SqlServer_Error_2627;
    public static string MySQL_Error_1062;
    public static string PostgreSQL_Error_23505;
    public static string SqlCe_ResolveColumnIndexOrdinal_IsFalse;
    public static string SqlCe_ResolveUniqueIndex_IsFalse;
    public static string SqlCe_ValidateHasAllSettingSupported_IsFalse;
    public static string RetryCount_Exceeded;
    public static string LicenseKeys_TrialExpired;
    public static string SqlServer_Error_Timeout_EntityFramework;
    public static string SqlServer_Error_Timeout_EntityFramework_DeleteFromQuery;
    public static string SqlServer_Error_Timeout_EntityFramework_UpdateFromQuery;
    public static string SqlServer_Error_Timeout;
    public static string DbBulkOperationConcurrencyException;
    public static string Validator_ValidateAllSourceMapped;
    public static string Validator_ValidateAllDestinationMapped;
    public static string Type_NotSupported;
    public static string NothingToMerge;
    public static string ResolveCommandOutputToTemporaryTable_ObsoleteTriggerResolution;
    public static string Error_0013_Bulk;
    public static string Error_0013_EFE;
    public static string Error_0013_Dapper;
    public static string Error_0013_Linq;
    public static string MySql_NoOutput;
    public static string MySql_Error29;
    private static ExceptionMessage();
    public static string PleaseReportTheIssue();
    public static string PleaseReportTheIssue2();
    public static string PleaseReportTheIssue3();
    public static string PleaseReportTheIssue4();
    public static string PleaseReportTheIssue5();
    public static string PleaseReportTheIssue6();
    public static string PleaseReportTheIssue7();
    public static string PleaseReportTheIssue8();
    public static string PleaseReportTheIssue9();
    public static string PleaseReportTheIssue10();
    public static string PleaseReportTheIssue11();
    public static string PleaseReportTheIssue12();
    public static string PleaseReportTheIssue13();
    public static string PleaseReportTheIssue14();
    public static string PleaseReportTheIssue15();
    public static string PleaseReportTheIssue16();
    public static string PleaseReportTheIssue17();
    public static string PleaseReportTheIssue18();
    public static string PleaseReportTheIssue19();
    public static string PleaseReportTheIssue20();
    public static string PleaseReportTheIssue21();
    public static string PleaseReportTheIssue22();
    public static string PleaseReportTheIssue23();
    public static string PleaseReportTheIssue24();
    public static string PleaseReportTheIssue25();
    public static string PleaseReportTheIssue26();
    public static string PleaseReportTheIssue27();
    public static string PleaseReportTheIssue28();
    public static string PleaseReportTheIssue29();
    public static string PleaseReportTheIssue30();
    public static string PleaseReportTheIssue31();
    public static string PleaseReportTheIssue32();
    public static string PleaseReportTheIssue33();
    public static string PleaseReportTheIssue34();
    public static string PleaseReportTheIssue35();
    public static string PleaseReportTheIssue36();
    public static string PleaseReportTheIssue37();
    public static string PleaseReportTheIssue38();
    public static string PleaseReportTheIssue39();
    public static string PleaseReportTheIssue40();
}
public interface Z.BulkOperations.IBulkValueConverter {
    public abstract virtual object ConvertFromProvider(Type destinationType, object value);
    public abstract virtual object ConvertToProvider(object value);
}
public class Z.BulkOperations.InformationSchemaManager : object {
    internal static ConcurrentDictionary`2<string, Table> ;
    private static InformationSchemaManager();
    public static void ClearInformationSchemaTable();
    public static Table GetTable(DbConnection connection, string tableName);
}
public static class Z.BulkOperations.Internal.Accessors.AccessorHelper : object {
    public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName);
}
[ExtensionAttribute]
public static class Z.BulkOperations.Internal.CoreExtensions : object {
    [ExtensionAttribute]
internal static bool (DbConnection this);
    [ExtensionAttribute]
internal static bool (DbConnection this);
    [ExtensionAttribute]
internal static int (DbException this);
    [ExtensionAttribute]
internal static bool (DbException this);
    [ExtensionAttribute]
internal static int (DbException this);
    [ExtensionAttribute]
internal static bool (DbException this);
    [ExtensionAttribute]
internal static bool (DbException this);
    [ExtensionAttribute]
public static DataTable GetSchemaTable_Core(IDataReader reader);
    [ExtensionAttribute]
public static DataTable GetSchemaTable_Core(DbDataReader reader);
    [ExtensionAttribute]
public static bool StartsWith_InvariantCulture_Core(string s, string text);
    [ExtensionAttribute]
public static string ToLower_InvariantCulture_Core(string s);
    [ExtensionAttribute]
public static int IndexOf_InvariantCulture_Core(string s, string text);
    [ExtensionAttribute]
public static IEnumerable`1<DataRow> AsEnumerableCore(DataTable this);
    [ExtensionAttribute]
internal static int (DbException this);
    [ExtensionAttribute]
public static bool IsOfTypeName(Type this, string name);
    [ExtensionAttribute]
public static ConstructorInfo GetConstructorCore(Type this, Type[] types);
    [ExtensionAttribute]
public static PropertyInfo[] GetPropertiesCore(Type this);
    [ExtensionAttribute]
public static bool IsClassCore(Type this);
    [ExtensionAttribute]
public static Assembly GetAssemblyCore(Type this);
    [ExtensionAttribute]
public static Object[] GetCustomAttributesCore(Type this, bool inherit);
    [ExtensionAttribute]
public static FieldInfo GetFieldCore(Type this, string propertyName);
    [ExtensionAttribute]
public static FieldInfo GetFieldCore(Type this, string propertyName, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type[] GetGenericArgumentsCore(Type this);
    [ExtensionAttribute]
public static MethodInfo GetMethodCore(Type this, string propertyName);
    [ExtensionAttribute]
public static MethodInfo GetMethodCore(Type this, string propertyName, Type[] types);
    [ExtensionAttribute]
public static MethodInfo GetMethodCore(Type this, string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    [ExtensionAttribute]
public static MethodInfo[] GetMethodsCore(Type this);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyCore(Type this, string propertyName);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyCore(Type this, string propertyName, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static bool IsEnumCore(Type this);
    [ExtensionAttribute]
public static bool IsGenericTypeCore(Type this);
}
[ExtensionAttribute]
public static class Z.BulkOperations.Internal.Data.SqlClient.Extension : object {
    [ExtensionAttribute]
public static DbParameter Clone(DbParameter this, DbCommand command);
}
public class Z.BulkOperations.Internal.Data.SqlClient.SqlCommandSet : object {
    public static int MaxParameters;
    public List`1<Tuple`2<DbCommand, Action`1<DataTable>>> Commands;
    public int CommandTimeout;
    public DbConnection Connection;
    public BulkOperation LogBulkOperation;
    public BulkOperation CheckSqlServerBulkOperations;
    public bool PreserveOrder;
    public DbTransaction Transaction;
    public void Execute(bool isForceOutputFromUnmodifiedRow);
    public void Add(DbCommand command);
    public void Add(DbCommand command, Action`1<DataTable> callbackAction);
    public List`1<Tuple`2<DbCommand, List`1<Action`1<DataTable>>>> Combine();
}
public class Z.BulkOperations.Internal.InformationSchema.Column : object {
    internal string ;
    public object DbType;
    public string EscapedName;
    public bool IsIdentity;
    public bool IsPrimaryKey;
    public string Name;
    public int Ordinal;
    public int Size;
    public string UdtTypeName;
    internal bool ;
    public string DataTypeName;
    internal string ;
    public int Precision;
    public int Scale;
    internal Type ;
    public string DefaultValueSql;
    internal bool ;
    internal static int (int );
}
public class Z.BulkOperations.Internal.InformationSchema.Table : object {
    public List`1<Column> Columns;
    internal Column ;
    internal Dictionary`2<string, Column> ;
    internal Dictionary`2<string, Column> ;
    internal object ;
    internal Dictionary`2<string, Column> ;
    internal Dictionary`2<string, Column> ;
    internal List`1<> ;
    internal HashSet`1<string> ;
    internal HashSet`1<string> ;
    public string Name;
    internal  ;
    public List`1<Column> PrimaryKeys;
    internal string ;
    internal Nullable`1<bool> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal object ;
    internal bool ;
    [CompilerGeneratedAttribute]
private bool ;
    internal Dictionary`2<string, Column>  { get; internal set; }
    internal Dictionary`2<string, Column>  { get; internal set; }
    internal HashSet`1<string>  { get; internal set; }
    internal bool  { get; internal set; }
    public bool IsSqlAzure { get; }
    internal Dictionary`2<string, Column> get_();
    internal void set_(Dictionary`2<string, Column> value);
    internal Dictionary`2<string, Column> get_();
    internal void set_(Dictionary`2<string, Column> value);
    internal HashSet`1<string> get_();
    internal void set_(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public bool get_IsSqlAzure();
    internal void ();
}
public abstract class Z.BulkOperations.Internal.Linq.Dynamic.DynamicClassZ : object {
    public virtual string ToString();
}
public class Z.BulkOperations.InternalOptions : object {
    internal bool ;
    internal bool ;
    internal StringBuilder ;
    public bool SkipInsertForInternalFeatures { get; public set; }
    public StringBuilder ToCopyTableName { get; public set; }
    public bool AutoMapOutputIdentity { get; public set; }
    public bool get_SkipInsertForInternalFeatures();
    public void set_SkipInsertForInternalFeatures(bool value);
    public StringBuilder get_ToCopyTableName();
    public void set_ToCopyTableName(StringBuilder value);
    public bool get_AutoMapOutputIdentity();
    public void set_AutoMapOutputIdentity(bool value);
}
public enum Z.BulkOperations.InternalTransactionType : Enum {
    public int value__;
    public static InternalTransactionType None;
    public static InternalTransactionType ByOperation;
    public static InternalTransactionType ByBatch;
    public static InternalTransactionType ByThread;
}
public class Z.BulkOperations.LicenseManager : object {
    internal static ConcurrentBag`1<Tuple`2<string, string>> ;
    private static LicenseManager();
    public static bool ValidateLicense(ProviderType provider);
    public static bool ValidateLicense(String& errorMessage, ProviderType provider);
    public static bool ValidateLicense(String& errorMessage, ProviderType provider, bool isEntityFramework, bool isDapper, bool isLinqToSql);
    public static bool IsTrialMode();
    public static bool IsTrialExpired();
    public static bool IsLicenseAdded();
    public static void AddLicense(string licenseName, string licenseKey);
    [CompilerGeneratedAttribute]
internal static void (string , & , & );
}
public class Z.BulkOperations.LogEntry : object {
    internal static int (int );
}
public enum Z.BulkOperations.LogEntryActionType : Enum {
    public int value__;
}
public class Z.BulkOperations.MySqlDataAdapter : object {
    public static void Fill(DbDataReader reader, DataSet ds);
    public static void Fill(DbDataReader reader, DataTable dt);
}
public enum Z.BulkOperations.ProviderType : Enum {
    public int value__;
    public static ProviderType None;
    public static ProviderType SqlServer;
    public static ProviderType SqlServerCompact;
    public static ProviderType MySql;
    public static ProviderType GlimpseSqlServer;
    public static ProviderType Oracle;
    public static ProviderType OracleManaged;
    public static ProviderType OracleDevArt;
    public static ProviderType SQLite;
    public static ProviderType HibernatingRhinosAppenderSqlServer;
    public static ProviderType HibernatingRhinosAppenderOracle;
    public static ProviderType HibernatingRhinosAppenderOracleManaged;
    public static ProviderType HibernatingRhinosAppenderOracleDevArt;
    public static ProviderType PostgreSql;
    public static ProviderType Firebird;
    public static ProviderType MySqlDevArt;
    public static ProviderType PostgreSqlDevArt;
    public static ProviderType SQLiteMicrosoft;
    public static ProviderType Effort;
    public static ProviderType EFCoreInMemory;
    public static ProviderType MiniProfilerSqlServer;
    public static ProviderType MySqlConnector;
    public static ProviderType SQLiteDevArt;
}
public enum Z.BulkOperations.ResolutionType : Enum {
    public int value__;
    public static ResolutionType Smart;
    public static ResolutionType TemporaryTable;
    public static ResolutionType WorkingTable;
}
public class Z.BulkOperations.ResultInfo : object {
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ResultInfo> ;
    public int RowsAffected { get; public set; }
    public int RowsAffectedInserted { get; public set; }
    public int RowsAffectedUpdated { get; public set; }
    public int RowsAffectedDeleted { get; public set; }
    public int RowsAffectedSoftDeleted { get; public set; }
    public Type Type { get; public set; }
    public Dictionary`2<string, ResultInfo> ResultByTableName { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RowsAffected();
    [CompilerGeneratedAttribute]
public void set_RowsAffected(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedInserted();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedInserted(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedUpdated();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedUpdated(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedDeleted();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedDeleted(int value);
    [CompilerGeneratedAttribute]
public int get_RowsAffectedSoftDeleted();
    [CompilerGeneratedAttribute]
public void set_RowsAffectedSoftDeleted(int value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ResultInfo> get_ResultByTableName();
    [CompilerGeneratedAttribute]
public void set_ResultByTableName(Dictionary`2<string, ResultInfo> value);
}
public enum Z.BulkOperations.TemporaryTableNameGenerationType : Enum {
    public int value__;
    public static TemporaryTableNameGenerationType Guid;
    public static TemporaryTableNameGenerationType Sequence;
    public static TemporaryTableNameGenerationType HashGuid;
}
public class Z.EntityFramework.Extensions.BatchDelete : object {
    internal BulkOperation ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private Action`1<DbCommand> ;
    public Func`3<DbCommand, DbCommandInterceptionContext, int> CommandExecuteAction;
    public int BatchSize { get; public set; }
    public int BatchDelayInterval { get; public set; }
    public bool UseTableLock { get; public set; }
    public Action`1<DbCommand> Executing { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BatchSize();
    [CompilerGeneratedAttribute]
public void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
public int get_BatchDelayInterval();
    [CompilerGeneratedAttribute]
public void set_BatchDelayInterval(int value);
    [CompilerGeneratedAttribute]
public bool get_UseTableLock();
    [CompilerGeneratedAttribute]
public void set_UseTableLock(bool value);
    [CompilerGeneratedAttribute]
public Action`1<DbCommand> get_Executing();
    [CompilerGeneratedAttribute]
public void set_Executing(Action`1<DbCommand> value);
    public int Execute(IQueryable`1<T> query);
    internal void (DbContext , DbModel , ObjectQuery , SchemaEntityType`1<> );
    internal DbCommand CreateCommand(ObjectQuery query, SchemaEntityType`1<T> entity, bool hasZZZQueryHook);
    public string EscapeName(string name, bool isMySql, bool isOracle, bool isHana);
}
public class Z.EntityFramework.Extensions.BatchDeleteManager : object {
    [CompilerGeneratedAttribute]
private static Action`1<BatchDelete> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    public static Action`1<BatchDelete> BatchDeleteBuilder { get; public set; }
    public static bool UseMySqlSchema { get; public set; }
    public static bool IsInMemoryQuery { get; public set; }
    private static BatchDeleteManager();
    [CompilerGeneratedAttribute]
public static Action`1<BatchDelete> get_BatchDeleteBuilder();
    [CompilerGeneratedAttribute]
public static void set_BatchDeleteBuilder(Action`1<BatchDelete> value);
    [CompilerGeneratedAttribute]
public static bool get_UseMySqlSchema();
    [CompilerGeneratedAttribute]
public static void set_UseMySqlSchema(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsInMemoryQuery();
    [CompilerGeneratedAttribute]
public static void set_IsInMemoryQuery(bool value);
}
public class Z.EntityFramework.Extensions.BatchInsert`1 : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<TEntity, object>> ;
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private Action`1<DbCommand> ;
    public string DatabaseName { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public Expression`1<Func`2<TEntity, object>> SelectExpression { get; public set; }
    public Type TableType { get; public set; }
    public Action`1<DbCommand> Executing { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<TEntity, object>> get_SelectExpression();
    [CompilerGeneratedAttribute]
public void set_SelectExpression(Expression`1<Func`2<TEntity, object>> value);
    [CompilerGeneratedAttribute]
public Type get_TableType();
    [CompilerGeneratedAttribute]
public void set_TableType(Type value);
    [CompilerGeneratedAttribute]
public Action`1<DbCommand> get_Executing();
    [CompilerGeneratedAttribute]
public void set_Executing(Action`1<DbCommand> value);
}
public class Z.EntityFramework.Extensions.BatchUpdate : object {
    internal BulkOperation ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    [CompilerGeneratedAttribute]
private Nullable`1<int> ;
    [CompilerGeneratedAttribute]
private Action`1<DbCommand> ;
    public Func`4<DbCommand, DbCommandInterceptionContext, Nullable`1<int>, int> CommandExecuteAction;
    [CompilerGeneratedAttribute]
private bool ;
    public Nullable`1<int> BatchSize { get; public set; }
    public Action`1<DbCommand> Executing { get; public set; }
    public bool UseTableLock { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BatchSize();
    [CompilerGeneratedAttribute]
public void set_BatchSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Action`1<DbCommand> get_Executing();
    [CompilerGeneratedAttribute]
public void set_Executing(Action`1<DbCommand> value);
    [CompilerGeneratedAttribute]
public bool get_UseTableLock();
    [CompilerGeneratedAttribute]
public void set_UseTableLock(bool value);
    internal Expression`1<Func`2<, >> (Expression`1<Func`2<, >> );
    public int Execute(IQueryable`1<T> query, Expression`1<Func`2<T, T>> updateFactory);
    internal DbCommand CreateCommand(ObjectQuery query, SchemaEntityType`1<T> entity, List`1<Tuple`2<string, object>> values, bool hasZZZQueryHook);
    internal List`1<Tuple`2<string, object>> (IQueryable`1<> , Expression`1<Func`2<, >> , SchemaEntityType`1<> );
    public ScalarPropertyMapping FindScalarPropertyMappingByName(MappingFragment mapping, string name);
    public ScalarPropertyMapping FindScalarPropertyMappingByName(ComplexPropertyMapping mapping, string name, string prefix);
    public string EscapeName(string name, bool isMySql, bool isOracle, bool isPostgreSQL, bool isHana);
    public Dictionary`2<string, object> ResolveUpdateFromQueryDictValues(Expression`1<Func`2<T, T>> updateFactory, List`1<Type> listComplexeType);
    public void ResolveUpdateFromQueryDictValuesMemberInit(Dictionary`2<string, object> dictValues, Type entityType, MemberInitExpression memberInitExpression, List`1<Type> listComplexeType, string prefix);
}
public class Z.EntityFramework.Extensions.BatchUpdateManager : object {
    [CompilerGeneratedAttribute]
private static Action`1<BatchUpdate> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    public static List`1<Tuple`2<Type, Expression>> InternalHooks;
    public static Action`1<BatchUpdate> BatchUpdateBuilder { get; public set; }
    public static bool UseMySqlSchema { get; public set; }
    public static bool IsInMemoryQuery { get; public set; }
    private static BatchUpdateManager();
    [CompilerGeneratedAttribute]
public static Action`1<BatchUpdate> get_BatchUpdateBuilder();
    [CompilerGeneratedAttribute]
public static void set_BatchUpdateBuilder(Action`1<BatchUpdate> value);
    [CompilerGeneratedAttribute]
public static bool get_UseMySqlSchema();
    [CompilerGeneratedAttribute]
public static void set_UseMySqlSchema(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsInMemoryQuery();
    [CompilerGeneratedAttribute]
public static void set_IsInMemoryQuery(bool value);
    public static void Hook(Expression`1<Func`2<T, T>> hook);
    public static void Hook(Expression`1<Func`1<object>> hook);
}
public class Z.EntityFramework.Extensions.Core.Infrastructure.DbModel : object {
    internal  ;
    [CompilerGeneratedAttribute]
private Schema ;
    [CompilerGeneratedAttribute]
private Schema ;
    [CompilerGeneratedAttribute]
private SchemaMapping ;
    public Schema ConceptualModel { get; public set; }
    public Schema StoreModel { get; public set; }
    public SchemaMapping MappingModel { get; public set; }
    internal   { get; internal set; }
    [CompilerGeneratedAttribute]
public Schema get_ConceptualModel();
    [CompilerGeneratedAttribute]
public void set_ConceptualModel(Schema value);
    [CompilerGeneratedAttribute]
public Schema get_StoreModel();
    [CompilerGeneratedAttribute]
public void set_StoreModel(Schema value);
    [CompilerGeneratedAttribute]
public SchemaMapping get_MappingModel();
    [CompilerGeneratedAttribute]
public void set_MappingModel(SchemaMapping value);
    internal  get_();
    internal void set_( value);
    public SchemaEntityType`1<T> Entity();
}
public class Z.EntityFramework.Extensions.Core.Mapping.AssociationSetMapping : object {
    [CompilerGeneratedAttribute]
private EntityContainerAssociationSet ;
    [CompilerGeneratedAttribute]
private EntityContainerEntitySet ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<EndPropertyMapping> ;
    [XmlIgnoreAttribute]
public EntityContainerAssociationSet ConceptualAssociationSet { get; public set; }
    [XmlIgnoreAttribute]
public EntityContainerEntitySet StoreEntitySet { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("TypeName")]
public string TypeName { get; public set; }
    [XmlAttributeAttribute("StoreEntitySet")]
public string StoreEntitySetName { get; public set; }
    [XmlElementAttribute("EndProperty")]
public List`1<EndPropertyMapping> EndProperties { get; public set; }
    [CompilerGeneratedAttribute]
public EntityContainerAssociationSet get_ConceptualAssociationSet();
    [CompilerGeneratedAttribute]
public void set_ConceptualAssociationSet(EntityContainerAssociationSet value);
    [CompilerGeneratedAttribute]
public EntityContainerEntitySet get_StoreEntitySet();
    [CompilerGeneratedAttribute]
public void set_StoreEntitySet(EntityContainerEntitySet value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_StoreEntitySetName();
    [CompilerGeneratedAttribute]
public void set_StoreEntitySetName(string value);
    [CompilerGeneratedAttribute]
public List`1<EndPropertyMapping> get_EndProperties();
    [CompilerGeneratedAttribute]
public void set_EndProperties(List`1<EndPropertyMapping> value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.ComplexPropertyMapping : object {
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<ScalarPropertyMapping> ;
    [CompilerGeneratedAttribute]
private List`1<ComplexPropertyMapping> ;
    [XmlIgnoreAttribute]
public SchemaEntityType ComplexEntityType { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("TypeName")]
public string TypeName { get; public set; }
    [XmlElementAttribute("ScalarProperty")]
public List`1<ScalarPropertyMapping> ScalarProperties { get; public set; }
    [XmlElementAttribute("ComplexProperty")]
public List`1<ComplexPropertyMapping> ComplexProperties { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaEntityType get_ComplexEntityType();
    [CompilerGeneratedAttribute]
public void set_ComplexEntityType(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public List`1<ScalarPropertyMapping> get_ScalarProperties();
    [CompilerGeneratedAttribute]
public void set_ScalarProperties(List`1<ScalarPropertyMapping> value);
    [CompilerGeneratedAttribute]
public List`1<ComplexPropertyMapping> get_ComplexProperties();
    [CompilerGeneratedAttribute]
public void set_ComplexProperties(List`1<ComplexPropertyMapping> value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.ConditionPropertyMapping : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlAttributeAttribute("Value")]
public string Value { get; public set; }
    [XmlAttributeAttribute("ColumnName")]
public string ColumnName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.EndPropertyMapping : object {
    [CompilerGeneratedAttribute]
private EntityContainerAssociationSetEnd ;
    [CompilerGeneratedAttribute]
private List`1<ScalarAccessorMapping> ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<ScalarPropertyMapping> ;
    [XmlIgnoreAttribute]
public EntityContainerAssociationSetEnd ConceptualAssociationSetEnd { get; public set; }
    [XmlIgnoreAttribute]
public List`1<ScalarAccessorMapping> ScalarAccessors { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlElementAttribute("ScalarProperty")]
public List`1<ScalarPropertyMapping> ScalarProperties { get; public set; }
    [CompilerGeneratedAttribute]
public EntityContainerAssociationSetEnd get_ConceptualAssociationSetEnd();
    [CompilerGeneratedAttribute]
public void set_ConceptualAssociationSetEnd(EntityContainerAssociationSetEnd value);
    [CompilerGeneratedAttribute]
public List`1<ScalarAccessorMapping> get_ScalarAccessors();
    [CompilerGeneratedAttribute]
public void set_ScalarAccessors(List`1<ScalarAccessorMapping> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<ScalarPropertyMapping> get_ScalarProperties();
    [CompilerGeneratedAttribute]
public void set_ScalarProperties(List`1<ScalarPropertyMapping> value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.EntityContainerMapping : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<EntitySetMapping> ;
    [CompilerGeneratedAttribute]
private List`1<AssociationSetMapping> ;
    [XmlAttributeAttribute("StorageEntityContainer")]
public string StorageEntityContainer { get; public set; }
    [XmlAttributeAttribute("CdmEntityContainer")]
public string CdmEntityContainer { get; public set; }
    [XmlElementAttribute("EntitySetMapping")]
public List`1<EntitySetMapping> EntitySetMappings { get; public set; }
    [XmlElementAttribute("AssociationSetMapping")]
public List`1<AssociationSetMapping> AssociationSetMappings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StorageEntityContainer();
    [CompilerGeneratedAttribute]
public void set_StorageEntityContainer(string value);
    [CompilerGeneratedAttribute]
public string get_CdmEntityContainer();
    [CompilerGeneratedAttribute]
public void set_CdmEntityContainer(string value);
    [CompilerGeneratedAttribute]
public List`1<EntitySetMapping> get_EntitySetMappings();
    [CompilerGeneratedAttribute]
public void set_EntitySetMappings(List`1<EntitySetMapping> value);
    [CompilerGeneratedAttribute]
public List`1<AssociationSetMapping> get_AssociationSetMappings();
    [CompilerGeneratedAttribute]
public void set_AssociationSetMappings(List`1<AssociationSetMapping> value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.EntitySetMapping : object {
    [CompilerGeneratedAttribute]
private List`1<SchemaEntityType> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private EntityContainerEntitySet ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<EntityTypeMapping> ;
    [XmlIgnoreAttribute]
internal List`1<SchemaEntityType>  { get; internal set; }
    [XmlIgnoreAttribute]
internal bool  { get; internal set; }
    [XmlIgnoreAttribute]
public EntityContainerEntitySet ConceptualSet { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlElementAttribute("EntityTypeMapping")]
public List`1<EntityTypeMapping> EntityTypeMappings { get; public set; }
    [CompilerGeneratedAttribute]
internal List`1<SchemaEntityType> get_();
    [CompilerGeneratedAttribute]
internal void set_(List`1<SchemaEntityType> value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
public EntityContainerEntitySet get_ConceptualSet();
    [CompilerGeneratedAttribute]
public void set_ConceptualSet(EntityContainerEntitySet value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<EntityTypeMapping> get_EntityTypeMappings();
    [CompilerGeneratedAttribute]
public void set_EntityTypeMappings(List`1<EntityTypeMapping> value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.EntityTypeMapping : object {
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private MappingFragment ;
    [CompilerGeneratedAttribute]
private ModificationFunctionMapping ;
    [XmlIgnoreAttribute]
public SchemaEntityType EntityType { get; public set; }
    [XmlAttributeAttribute("TypeName")]
public string TypeName { get; public set; }
    [XmlElementAttribute("MappingFragment")]
public MappingFragment MappingFragment { get; public set; }
    [XmlElementAttribute("ModificationFunctionMapping")]
public ModificationFunctionMapping ModificationFunctionMapping { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public MappingFragment get_MappingFragment();
    [CompilerGeneratedAttribute]
public void set_MappingFragment(MappingFragment value);
    [CompilerGeneratedAttribute]
public ModificationFunctionMapping get_ModificationFunctionMapping();
    [CompilerGeneratedAttribute]
public void set_ModificationFunctionMapping(ModificationFunctionMapping value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.FunctionMapping : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<ScalarPropertyMapping> ;
    [XmlAttributeAttribute("FunctionName")]
public string FunctionName { get; public set; }
    [XmlElementAttribute("ScalarProperty")]
public List`1<ScalarPropertyMapping> ScalarProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public List`1<ScalarPropertyMapping> get_ScalarProperties();
    [CompilerGeneratedAttribute]
public void set_ScalarProperties(List`1<ScalarPropertyMapping> value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.MappingFragment : object {
    [CompilerGeneratedAttribute]
private EntityContainerEntitySet ;
    [CompilerGeneratedAttribute]
private List`1<ScalarAccessorMapping> ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<ScalarPropertyMapping> ;
    [CompilerGeneratedAttribute]
private List`1<ComplexPropertyMapping> ;
    [CompilerGeneratedAttribute]
private List`1<ConditionPropertyMapping> ;
    [XmlIgnoreAttribute]
public EntityContainerEntitySet StoreEntitySet { get; public set; }
    [XmlIgnoreAttribute]
public List`1<ScalarAccessorMapping> ScalarAccessors { get; public set; }
    [XmlAttributeAttribute("StoreEntitySet")]
public string StoreEntitySetName { get; public set; }
    [XmlElementAttribute("ScalarProperty")]
public List`1<ScalarPropertyMapping> ScalarProperties { get; public set; }
    [XmlElementAttribute("ComplexProperty")]
public List`1<ComplexPropertyMapping> ComplexProperties { get; public set; }
    [XmlElementAttribute("Condition")]
public List`1<ConditionPropertyMapping> Conditions { get; public set; }
    [CompilerGeneratedAttribute]
public EntityContainerEntitySet get_StoreEntitySet();
    [CompilerGeneratedAttribute]
public void set_StoreEntitySet(EntityContainerEntitySet value);
    [CompilerGeneratedAttribute]
public List`1<ScalarAccessorMapping> get_ScalarAccessors();
    [CompilerGeneratedAttribute]
public void set_ScalarAccessors(List`1<ScalarAccessorMapping> value);
    [CompilerGeneratedAttribute]
public string get_StoreEntitySetName();
    [CompilerGeneratedAttribute]
public void set_StoreEntitySetName(string value);
    [CompilerGeneratedAttribute]
public List`1<ScalarPropertyMapping> get_ScalarProperties();
    [CompilerGeneratedAttribute]
public void set_ScalarProperties(List`1<ScalarPropertyMapping> value);
    [CompilerGeneratedAttribute]
public List`1<ComplexPropertyMapping> get_ComplexProperties();
    [CompilerGeneratedAttribute]
public void set_ComplexProperties(List`1<ComplexPropertyMapping> value);
    [CompilerGeneratedAttribute]
public List`1<ConditionPropertyMapping> get_Conditions();
    [CompilerGeneratedAttribute]
public void set_Conditions(List`1<ConditionPropertyMapping> value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.ModificationFunctionMapping : object {
    [CompilerGeneratedAttribute]
private Function ;
    [CompilerGeneratedAttribute]
private Function ;
    [CompilerGeneratedAttribute]
private Function ;
    [CompilerGeneratedAttribute]
private FunctionMapping ;
    [CompilerGeneratedAttribute]
private FunctionMapping ;
    [CompilerGeneratedAttribute]
private FunctionMapping ;
    [XmlIgnoreAttribute]
public Function Insert { get; public set; }
    public Function Update { get; public set; }
    public Function Delete { get; public set; }
    [XmlElementAttribute("InsertFunction")]
public FunctionMapping InsertFunction { get; public set; }
    [XmlElementAttribute("UpdateFunction")]
public FunctionMapping UpdateFunction { get; public set; }
    [XmlElementAttribute("DeleteFunction")]
public FunctionMapping DeleteFunction { get; public set; }
    [CompilerGeneratedAttribute]
public Function get_Insert();
    [CompilerGeneratedAttribute]
public void set_Insert(Function value);
    [CompilerGeneratedAttribute]
public Function get_Update();
    [CompilerGeneratedAttribute]
public void set_Update(Function value);
    [CompilerGeneratedAttribute]
public Function get_Delete();
    [CompilerGeneratedAttribute]
public void set_Delete(Function value);
    [CompilerGeneratedAttribute]
public FunctionMapping get_InsertFunction();
    [CompilerGeneratedAttribute]
public void set_InsertFunction(FunctionMapping value);
    [CompilerGeneratedAttribute]
public FunctionMapping get_UpdateFunction();
    [CompilerGeneratedAttribute]
public void set_UpdateFunction(FunctionMapping value);
    [CompilerGeneratedAttribute]
public FunctionMapping get_DeleteFunction();
    [CompilerGeneratedAttribute]
public void set_DeleteFunction(FunctionMapping value);
}
public class Z.EntityFramework.Extensions.Core.Mapping.ScalarAccessorMapping : object {
    internal Lazy`1<ConcurrentDictionary`2<Type, Func`2<object, object>>> ;
    internal Lazy`1<ConcurrentDictionary`2<Type, Func`2<object, bool>>> ;
    internal string ;
    internal Lazy`1<ConcurrentDictionary`2<Type, Action`2<object, object>>> ;
    internal string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private int ;
    internal bool  { get; internal set; }
    internal bool  { get; internal set; }
    internal bool  { get; internal set; }
    public bool IsComputed { get; public set; }
    public bool UseIsNullColumn { get; public set; }
    public string AccessorPath { get; public set; }
    public string ColumnName { get; public set; }
    public Type Type { get; public set; }
    public bool IsStorageMapped { get; public set; }
    public bool IsKey { get; public set; }
    public bool IsExternalKey { get; public set; }
    public string ConstantValue { get; public set; }
    internal int  { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsComputed();
    [CompilerGeneratedAttribute]
public void set_IsComputed(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseIsNullColumn();
    [CompilerGeneratedAttribute]
public void set_UseIsNullColumn(bool value);
    [CompilerGeneratedAttribute]
public string get_AccessorPath();
    [CompilerGeneratedAttribute]
public void set_AccessorPath(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsStorageMapped();
    [CompilerGeneratedAttribute]
public void set_IsStorageMapped(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsKey();
    [CompilerGeneratedAttribute]
public void set_IsKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExternalKey();
    [CompilerGeneratedAttribute]
public void set_IsExternalKey(bool value);
    [CompilerGeneratedAttribute]
public string get_ConstantValue();
    [CompilerGeneratedAttribute]
public void set_ConstantValue(string value);
    [CompilerGeneratedAttribute]
internal int get_();
    [CompilerGeneratedAttribute]
internal void set_(int value);
    internal object GetValue(object obj);
    internal bool (object );
    internal void SetValue(object obj, object valueItem);
    internal object (object );
    internal bool (object );
    internal void (object , object );
}
public class Z.EntityFramework.Extensions.Core.Mapping.ScalarPropertyMapping : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("ColumnName")]
public string ColumnName { get; public set; }
    [XmlAttributeAttribute("ParameterName")]
public string ParameterName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
}
[XmlRootAttribute("Mapping")]
public class Z.EntityFramework.Extensions.Core.Mapping.SchemaMapping : object {
    [CompilerGeneratedAttribute]
private EntityContainerMapping ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<EntityContainerMapping> ;
    [XmlIgnoreAttribute]
public EntityContainerMapping EntityContainerMapping { get; public set; }
    [XmlAttributeAttribute("Space")]
public string Space { get; public set; }
    [XmlElementAttribute("EntityContainerMapping")]
public List`1<EntityContainerMapping> EntityContainerMappings { get; public set; }
    [CompilerGeneratedAttribute]
public EntityContainerMapping get_EntityContainerMapping();
    [CompilerGeneratedAttribute]
public void set_EntityContainerMapping(EntityContainerMapping value);
    [CompilerGeneratedAttribute]
public string get_Space();
    [CompilerGeneratedAttribute]
public void set_Space(string value);
    [CompilerGeneratedAttribute]
public List`1<EntityContainerMapping> get_EntityContainerMappings();
    [CompilerGeneratedAttribute]
public void set_EntityContainerMappings(List`1<EntityContainerMapping> value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.EntityContainer : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, EntityContainerEntitySet> ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, EntityContainerAssociationSet> ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, EntityContainerAssociationSet> ;
    [XmlAttributeAttribute("Name")]
public string Name;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private List`1<EntityContainerEntitySet> ;
    [CompilerGeneratedAttribute]
private List`1<EntityContainerAssociationSet> ;
    [XmlIgnoreAttribute]
internal Dictionary`2<string, EntityContainerEntitySet>  { get; internal set; }
    [XmlIgnoreAttribute]
internal Dictionary`2<string, EntityContainerAssociationSet>  { get; internal set; }
    [XmlIgnoreAttribute]
internal Dictionary`2<string, EntityContainerAssociationSet>  { get; internal set; }
    [XmlAttributeAttribute("LazyLoadingEnabled")]
public bool LazyLoadingEnabled { get; public set; }
    [XmlElementAttribute("EntitySet")]
public List`1<EntityContainerEntitySet> EntitySets { get; public set; }
    [XmlElementAttribute("AssociationSet")]
public List`1<EntityContainerAssociationSet> AssociationSets { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, EntityContainerEntitySet> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, EntityContainerEntitySet> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, EntityContainerAssociationSet> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, EntityContainerAssociationSet> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, EntityContainerAssociationSet> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, EntityContainerAssociationSet> value);
    [CompilerGeneratedAttribute]
public bool get_LazyLoadingEnabled();
    [CompilerGeneratedAttribute]
public void set_LazyLoadingEnabled(bool value);
    [CompilerGeneratedAttribute]
public List`1<EntityContainerEntitySet> get_EntitySets();
    [CompilerGeneratedAttribute]
public void set_EntitySets(List`1<EntityContainerEntitySet> value);
    [CompilerGeneratedAttribute]
public List`1<EntityContainerAssociationSet> get_AssociationSets();
    [CompilerGeneratedAttribute]
public void set_AssociationSets(List`1<EntityContainerAssociationSet> value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.EntityContainerAssociationSet : object {
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private AssociationSetMapping ;
    [CompilerGeneratedAttribute]
private Relationship ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<EntityContainerAssociationSetEnd> ;
    [XmlIgnoreAttribute]
internal bool  { get; internal set; }
    [XmlIgnoreAttribute]
internal bool  { get; internal set; }
    [XmlIgnoreAttribute]
internal bool  { get; internal set; }
    [XmlIgnoreAttribute]
internal bool  { get; internal set; }
    [XmlIgnoreAttribute]
internal bool  { get; internal set; }
    [XmlIgnoreAttribute]
internal bool  { get; internal set; }
    [XmlIgnoreAttribute]
public AssociationSetMapping AssociationSetMapping { get; public set; }
    [XmlIgnoreAttribute]
public Relationship Association { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("Association")]
public string AssociationName { get; public set; }
    [XmlElementAttribute("End")]
public List`1<EntityContainerAssociationSetEnd> Ends { get; public set; }
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
public AssociationSetMapping get_AssociationSetMapping();
    [CompilerGeneratedAttribute]
public void set_AssociationSetMapping(AssociationSetMapping value);
    [CompilerGeneratedAttribute]
public Relationship get_Association();
    [CompilerGeneratedAttribute]
public void set_Association(Relationship value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AssociationName();
    [CompilerGeneratedAttribute]
public void set_AssociationName(string value);
    [CompilerGeneratedAttribute]
public List`1<EntityContainerAssociationSetEnd> get_Ends();
    [CompilerGeneratedAttribute]
public void set_Ends(List`1<EntityContainerAssociationSetEnd> value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.EntityContainerAssociationSetEnd : object {
    [CompilerGeneratedAttribute]
private EntityContainerEntitySet ;
    [CompilerGeneratedAttribute]
private RelationshipEnd ;
    [CompilerGeneratedAttribute]
private EndPropertyMapping ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlIgnoreAttribute]
public EntityContainerEntitySet EntitySet { get; public set; }
    [XmlIgnoreAttribute]
public RelationshipEnd AssociationEnd { get; public set; }
    [XmlIgnoreAttribute]
public EndPropertyMapping AssociationEndMapping { get; public set; }
    [XmlAttributeAttribute("Role")]
public string Role { get; public set; }
    [XmlAttributeAttribute("EntitySet")]
public string EntitySetName { get; public set; }
    [CompilerGeneratedAttribute]
public EntityContainerEntitySet get_EntitySet();
    [CompilerGeneratedAttribute]
public void set_EntitySet(EntityContainerEntitySet value);
    [CompilerGeneratedAttribute]
public RelationshipEnd get_AssociationEnd();
    [CompilerGeneratedAttribute]
public void set_AssociationEnd(RelationshipEnd value);
    [CompilerGeneratedAttribute]
public EndPropertyMapping get_AssociationEndMapping();
    [CompilerGeneratedAttribute]
public void set_AssociationEndMapping(EndPropertyMapping value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public string get_EntitySetName();
    [CompilerGeneratedAttribute]
public void set_EntitySetName(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.EntityContainerEntitySet : object {
    [CompilerGeneratedAttribute]
private List`1<Relationship> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private EntitySetMapping ;
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private List`1<EntityContainerAssociationSetEnd> ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlIgnoreAttribute]
internal List`1<Relationship>  { get; internal set; }
    [XmlIgnoreAttribute]
public bool IsTPC { get; public set; }
    [XmlIgnoreAttribute]
public bool IsTPH { get; public set; }
    [XmlIgnoreAttribute]
public bool IsTPT { get; public set; }
    [XmlIgnoreAttribute]
public EntitySetMapping EntitySetMapping { get; public set; }
    [XmlIgnoreAttribute]
public SchemaEntityType EntityType { get; public set; }
    [XmlIgnoreAttribute]
public List`1<EntityContainerAssociationSetEnd> AssociationSetEnds { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("EntityType")]
public string EntityTypeName { get; public set; }
    [XmlAttributeAttribute("Schema")]
public string Schema { get; public set; }
    [XmlAttributeAttribute("Type")]
public string Type { get; public set; }
    [XmlAttributeAttribute("Table")]
public string Table { get; public set; }
    public string GetDestinationTableName(DbContext context, string databaseName, string schemaName);
    [CompilerGeneratedAttribute]
internal List`1<Relationship> get_();
    [CompilerGeneratedAttribute]
internal void set_(List`1<Relationship> value);
    [CompilerGeneratedAttribute]
public bool get_IsTPC();
    [CompilerGeneratedAttribute]
public void set_IsTPC(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTPH();
    [CompilerGeneratedAttribute]
public void set_IsTPH(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTPT();
    [CompilerGeneratedAttribute]
public void set_IsTPT(bool value);
    [CompilerGeneratedAttribute]
public EntitySetMapping get_EntitySetMapping();
    [CompilerGeneratedAttribute]
public void set_EntitySetMapping(EntitySetMapping value);
    [CompilerGeneratedAttribute]
public SchemaEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public List`1<EntityContainerAssociationSetEnd> get_AssociationSetEnds();
    [CompilerGeneratedAttribute]
public void set_AssociationSetEnds(List`1<EntityContainerAssociationSetEnd> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_EntityTypeName();
    [CompilerGeneratedAttribute]
public void set_EntityTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.EntityKeyElement : object {
    [CompilerGeneratedAttribute]
private List`1<PropertyRefElement> ;
    [XmlElementAttribute("PropertyRef")]
public List`1<PropertyRefElement> PropertyRefs { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<PropertyRefElement> get_PropertyRefs();
    [CompilerGeneratedAttribute]
public void set_PropertyRefs(List`1<PropertyRefElement> value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.Function : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("StoreFunctionName")]
public string StoreFunctionName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_StoreFunctionName();
    [CompilerGeneratedAttribute]
public void set_StoreFunctionName(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.NavigationProperty : object {
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private Relationship ;
    [CompilerGeneratedAttribute]
private RelationshipEnd ;
    [CompilerGeneratedAttribute]
private RelationshipEnd ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlIgnoreAttribute]
public SchemaEntityType ParentEntity { get; public set; }
    [XmlIgnoreAttribute]
public Relationship Association { get; public set; }
    [XmlIgnoreAttribute]
public RelationshipEnd FromRoleEnd { get; public set; }
    [XmlIgnoreAttribute]
public RelationshipEnd ToRoleEnd { get; public set; }
    [XmlIgnoreAttribute]
public bool IsForeignKey { get; public set; }
    [XmlAttributeAttribute("FromRole")]
public string FromRole { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("Relationship")]
public string Relationship { get; public set; }
    [XmlAttributeAttribute("ToRole")]
public string ToRole { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaEntityType get_ParentEntity();
    [CompilerGeneratedAttribute]
public void set_ParentEntity(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public Relationship get_Association();
    [CompilerGeneratedAttribute]
public void set_Association(Relationship value);
    [CompilerGeneratedAttribute]
public RelationshipEnd get_FromRoleEnd();
    [CompilerGeneratedAttribute]
public void set_FromRoleEnd(RelationshipEnd value);
    [CompilerGeneratedAttribute]
public RelationshipEnd get_ToRoleEnd();
    [CompilerGeneratedAttribute]
public void set_ToRoleEnd(RelationshipEnd value);
    [CompilerGeneratedAttribute]
public bool get_IsForeignKey();
    [CompilerGeneratedAttribute]
public void set_IsForeignKey(bool value);
    [CompilerGeneratedAttribute]
public string get_FromRole();
    [CompilerGeneratedAttribute]
public void set_FromRole(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Relationship();
    [CompilerGeneratedAttribute]
public void set_Relationship(string value);
    [CompilerGeneratedAttribute]
public string get_ToRole();
    [CompilerGeneratedAttribute]
public void set_ToRole(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.OnOperation : object {
    [CompilerGeneratedAttribute]
private string ;
    [XmlAttributeAttribute("Action")]
public string Action { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.Property : object {
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private SchemaEnumType ;
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlIgnoreAttribute]
public SchemaEntityType ParentEntity { get; public set; }
    [XmlIgnoreAttribute]
public bool IsConcurrency { get; public set; }
    [XmlIgnoreAttribute]
public bool IsComplex { get; public set; }
    [XmlIgnoreAttribute]
public SchemaEntityType ComplexType { get; public set; }
    [XmlIgnoreAttribute]
public bool IsEnum { get; public set; }
    [XmlIgnoreAttribute]
public SchemaEnumType EnumType { get; public set; }
    [XmlIgnoreAttribute]
public Type Type { get; public set; }
    [XmlIgnoreAttribute]
public bool IsPrimaryKey { get; public set; }
    [XmlIgnoreAttribute]
public bool IsComputed { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute("Type")]
public string TypeName { get; public set; }
    [XmlAttributeAttribute("Nullable")]
public bool Nullable { get; public set; }
    [XmlAttributeAttribute("StoreGeneratedPattern")]
public string StoreGeneratedPattern { get; public set; }
    [XmlAttributeAttribute("Unicode")]
public bool Unicode { get; public set; }
    [XmlAttributeAttribute("FixedLength")]
public bool FixedLength { get; public set; }
    [XmlAttributeAttribute("MaxLength")]
public string MaxLength { get; public set; }
    [XmlAttributeAttribute("Precision")]
public int Precision { get; public set; }
    [XmlAttributeAttribute("Scale")]
public int Scale { get; public set; }
    [XmlAttributeAttribute("ConcurrencyMode")]
public string ConcurrencyMode { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaEntityType get_ParentEntity();
    [CompilerGeneratedAttribute]
public void set_ParentEntity(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public bool get_IsConcurrency();
    [CompilerGeneratedAttribute]
public void set_IsConcurrency(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsComplex();
    [CompilerGeneratedAttribute]
public void set_IsComplex(bool value);
    [CompilerGeneratedAttribute]
public SchemaEntityType get_ComplexType();
    [CompilerGeneratedAttribute]
public void set_ComplexType(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
public void set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public SchemaEnumType get_EnumType();
    [CompilerGeneratedAttribute]
public void set_EnumType(SchemaEnumType value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsComputed();
    [CompilerGeneratedAttribute]
public void set_IsComputed(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public string get_StoreGeneratedPattern();
    [CompilerGeneratedAttribute]
public void set_StoreGeneratedPattern(string value);
    [CompilerGeneratedAttribute]
public bool get_Unicode();
    [CompilerGeneratedAttribute]
public void set_Unicode(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixedLength();
    [CompilerGeneratedAttribute]
public void set_FixedLength(bool value);
    [CompilerGeneratedAttribute]
public string get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(string value);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(int value);
    [CompilerGeneratedAttribute]
public string get_ConcurrencyMode();
    [CompilerGeneratedAttribute]
public void set_ConcurrencyMode(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.PropertyRefElement : object {
    [CompilerGeneratedAttribute]
private Property ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlIgnoreAttribute]
public Property Property { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public Property get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(Property value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.ReferencialConstraintRoleElement : object {
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<PropertyRefElement> ;
    [XmlIgnoreAttribute]
public SchemaEntityType EntityType { get; public set; }
    [XmlAttributeAttribute("Role")]
public string Role { get; public set; }
    [XmlElementAttribute("PropertyRef")]
public List`1<PropertyRefElement> PropertyRefs { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public List`1<PropertyRefElement> get_PropertyRefs();
    [CompilerGeneratedAttribute]
public void set_PropertyRefs(List`1<PropertyRefElement> value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.ReferentialConstraint : object {
    [CompilerGeneratedAttribute]
private ReferencialConstraintRoleElement ;
    [CompilerGeneratedAttribute]
private ReferencialConstraintRoleElement ;
    [XmlElementAttribute("Principal")]
public ReferencialConstraintRoleElement Principal { get; public set; }
    [XmlElementAttribute("Dependent")]
public ReferencialConstraintRoleElement Dependent { get; public set; }
    [CompilerGeneratedAttribute]
public ReferencialConstraintRoleElement get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(ReferencialConstraintRoleElement value);
    [CompilerGeneratedAttribute]
public ReferencialConstraintRoleElement get_Dependent();
    [CompilerGeneratedAttribute]
public void set_Dependent(ReferencialConstraintRoleElement value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.Relationship : object {
    [CompilerGeneratedAttribute]
private EntityContainerAssociationSet ;
    [CompilerGeneratedAttribute]
private List`1<SchemaEntityType> ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<RelationshipEnd> ;
    [CompilerGeneratedAttribute]
private ReferentialConstraint ;
    [XmlIgnoreAttribute]
public EntityContainerAssociationSet AssociationSet { get; public set; }
    [XmlIgnoreAttribute]
public List`1<SchemaEntityType> EntityTypes { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlElementAttribute("End")]
public List`1<RelationshipEnd> Ends { get; public set; }
    [XmlElementAttribute("ReferentialConstraint")]
public ReferentialConstraint ReferentialConstraint { get; public set; }
    [CompilerGeneratedAttribute]
public EntityContainerAssociationSet get_AssociationSet();
    [CompilerGeneratedAttribute]
public void set_AssociationSet(EntityContainerAssociationSet value);
    [CompilerGeneratedAttribute]
public List`1<SchemaEntityType> get_EntityTypes();
    [CompilerGeneratedAttribute]
public void set_EntityTypes(List`1<SchemaEntityType> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<RelationshipEnd> get_Ends();
    [CompilerGeneratedAttribute]
public void set_Ends(List`1<RelationshipEnd> value);
    [CompilerGeneratedAttribute]
public ReferentialConstraint get_ReferentialConstraint();
    [CompilerGeneratedAttribute]
public void set_ReferentialConstraint(ReferentialConstraint value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.RelationshipEnd : object {
    [CompilerGeneratedAttribute]
private EntityContainerAssociationSetEnd ;
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private Relationship ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private OnOperation ;
    [XmlIgnoreAttribute]
public EntityContainerAssociationSetEnd AssociationSetEnd { get; public set; }
    [XmlIgnoreAttribute]
public SchemaEntityType EntityType { get; public set; }
    public Relationship ParentRelationship { get; public set; }
    [XmlAttributeAttribute("Multiplicity")]
public string Multiplicity { get; public set; }
    [XmlAttributeAttribute("Role")]
public string Role { get; public set; }
    [XmlAttributeAttribute("Type")]
public string Type { get; public set; }
    [XmlElementAttribute("OnDelete")]
public OnOperation OnDelete { get; public set; }
    [CompilerGeneratedAttribute]
public EntityContainerAssociationSetEnd get_AssociationSetEnd();
    [CompilerGeneratedAttribute]
public void set_AssociationSetEnd(EntityContainerAssociationSetEnd value);
    [CompilerGeneratedAttribute]
public SchemaEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public Relationship get_ParentRelationship();
    [CompilerGeneratedAttribute]
public void set_ParentRelationship(Relationship value);
    [CompilerGeneratedAttribute]
public string get_Multiplicity();
    [CompilerGeneratedAttribute]
public void set_Multiplicity(string value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public OnOperation get_OnDelete();
    [CompilerGeneratedAttribute]
public void set_OnDelete(OnOperation value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.Schema : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Relationship> ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SchemaEntityType> ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SchemaEntityType> ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SchemaEnumType> ;
    [CompilerGeneratedAttribute]
private EntityContainer ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<SchemaEntityType> ;
    [CompilerGeneratedAttribute]
private List`1<Relationship> ;
    [CompilerGeneratedAttribute]
private List`1<SchemaEntityType> ;
    [CompilerGeneratedAttribute]
private List`1<SchemaEnumType> ;
    [CompilerGeneratedAttribute]
private List`1<EntityContainer> ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<Function> ;
    [XmlIgnoreAttribute]
internal Dictionary`2<string, Relationship>  { get; internal set; }
    [XmlIgnoreAttribute]
internal Dictionary`2<string, SchemaEntityType>  { get; internal set; }
    [XmlIgnoreAttribute]
internal Dictionary`2<string, SchemaEntityType>  { get; internal set; }
    [XmlIgnoreAttribute]
internal Dictionary`2<string, SchemaEnumType>  { get; internal set; }
    [XmlIgnoreAttribute]
internal EntityContainer  { get; internal set; }
    [XmlAttributeAttribute("Alias")]
public string Alias { get; public set; }
    [XmlAttributeAttribute("Namespace")]
public string Namespace { get; public set; }
    [XmlElementAttribute("EntityType")]
public List`1<SchemaEntityType> EntityTypes { get; public set; }
    [XmlElementAttribute("Association")]
public List`1<Relationship> Associations { get; public set; }
    [XmlElementAttribute("ComplexType")]
public List`1<SchemaEntityType> ComplexTypes { get; public set; }
    [XmlElementAttribute("EnumType")]
public List`1<SchemaEnumType> EnumTypes { get; public set; }
    [XmlElementAttribute("EntityContainer")]
public List`1<EntityContainer> EntityContainers { get; public set; }
    [XmlAttributeAttribute("Provider")]
public string Provider { get; public set; }
    [XmlAttributeAttribute("ProviderManifestToken")]
public string ProviderManifestToken { get; public set; }
    [XmlElementAttribute("Function")]
public List`1<Function> Functions { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Relationship> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, Relationship> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, SchemaEntityType> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, SchemaEntityType> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, SchemaEntityType> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, SchemaEntityType> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, SchemaEnumType> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, SchemaEnumType> value);
    [CompilerGeneratedAttribute]
internal EntityContainer get_();
    [CompilerGeneratedAttribute]
internal void set_(EntityContainer value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public List`1<SchemaEntityType> get_EntityTypes();
    [CompilerGeneratedAttribute]
public void set_EntityTypes(List`1<SchemaEntityType> value);
    [CompilerGeneratedAttribute]
public List`1<Relationship> get_Associations();
    [CompilerGeneratedAttribute]
public void set_Associations(List`1<Relationship> value);
    [CompilerGeneratedAttribute]
public List`1<SchemaEntityType> get_ComplexTypes();
    [CompilerGeneratedAttribute]
public void set_ComplexTypes(List`1<SchemaEntityType> value);
    [CompilerGeneratedAttribute]
public List`1<SchemaEnumType> get_EnumTypes();
    [CompilerGeneratedAttribute]
public void set_EnumTypes(List`1<SchemaEnumType> value);
    [CompilerGeneratedAttribute]
public List`1<EntityContainer> get_EntityContainers();
    [CompilerGeneratedAttribute]
public void set_EntityContainers(List`1<EntityContainer> value);
    [CompilerGeneratedAttribute]
public string get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderManifestToken();
    [CompilerGeneratedAttribute]
public void set_ProviderManifestToken(string value);
    [CompilerGeneratedAttribute]
public List`1<Function> get_Functions();
    [CompilerGeneratedAttribute]
public void set_Functions(List`1<Function> value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.SchemaEntityType : object {
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private List`1<SchemaEntityType> ;
    [CompilerGeneratedAttribute]
private ModificationFunctionMapping ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, NavigationProperty> ;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Property> ;
    [CompilerGeneratedAttribute]
private EntityTypeMapping ;
    [CompilerGeneratedAttribute]
private EntityContainerEntitySet ;
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    [CompilerGeneratedAttribute]
private EntityTypeMapping ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private EntityKeyElement ;
    [CompilerGeneratedAttribute]
private List`1<Property> ;
    [CompilerGeneratedAttribute]
private List`1<NavigationProperty> ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlIgnoreAttribute]
public bool IsTPC { get; public set; }
    [XmlIgnoreAttribute]
public bool IsTPT { get; public set; }
    [XmlIgnoreAttribute]
public bool IsTPH { get; public set; }
    [XmlIgnoreAttribute]
public bool IsManyHierachy { get; public set; }
    [XmlIgnoreAttribute]
public List`1<SchemaEntityType> SavingStategyTPT { get; public set; }
    [XmlIgnoreAttribute]
public ModificationFunctionMapping FunctionMapping { get; public set; }
    [XmlIgnoreAttribute]
internal Dictionary`2<string, NavigationProperty>  { get; internal set; }
    [XmlIgnoreAttribute]
internal Dictionary`2<string, Property>  { get; internal set; }
    [XmlIgnoreAttribute]
public EntityTypeMapping EntityTypeMapping { get; public set; }
    [XmlIgnoreAttribute]
public EntityContainerEntitySet EntitySet { get; public set; }
    [XmlIgnoreAttribute]
public SchemaEntityType BaseType { get; public set; }
    [XmlIgnoreAttribute]
public EntityTypeMapping GenericEntitySetMapping { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlElementAttribute("Key")]
public EntityKeyElement Key { get; public set; }
    [XmlElementAttribute("Property")]
public List`1<Property> Properties { get; public set; }
    [XmlElementAttribute("NavigationProperty")]
public List`1<NavigationProperty> NavigationProperties { get; public set; }
    [XmlAttributeAttribute("BaseType")]
public string BaseTypeName { get; public set; }
    public Type GetClrType(Assembly assembly);
    [CompilerGeneratedAttribute]
public bool get_IsTPC();
    [CompilerGeneratedAttribute]
public void set_IsTPC(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTPT();
    [CompilerGeneratedAttribute]
public void set_IsTPT(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTPH();
    [CompilerGeneratedAttribute]
public void set_IsTPH(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsManyHierachy();
    [CompilerGeneratedAttribute]
public void set_IsManyHierachy(bool value);
    [CompilerGeneratedAttribute]
public List`1<SchemaEntityType> get_SavingStategyTPT();
    [CompilerGeneratedAttribute]
public void set_SavingStategyTPT(List`1<SchemaEntityType> value);
    [CompilerGeneratedAttribute]
public ModificationFunctionMapping get_FunctionMapping();
    [CompilerGeneratedAttribute]
public void set_FunctionMapping(ModificationFunctionMapping value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, NavigationProperty> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, NavigationProperty> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Property> get_();
    [CompilerGeneratedAttribute]
internal void set_(Dictionary`2<string, Property> value);
    [CompilerGeneratedAttribute]
public EntityTypeMapping get_EntityTypeMapping();
    [CompilerGeneratedAttribute]
public void set_EntityTypeMapping(EntityTypeMapping value);
    [CompilerGeneratedAttribute]
public EntityContainerEntitySet get_EntitySet();
    [CompilerGeneratedAttribute]
public void set_EntitySet(EntityContainerEntitySet value);
    [CompilerGeneratedAttribute]
public SchemaEntityType get_BaseType();
    [CompilerGeneratedAttribute]
public void set_BaseType(SchemaEntityType value);
    [CompilerGeneratedAttribute]
public EntityTypeMapping get_GenericEntitySetMapping();
    [CompilerGeneratedAttribute]
public void set_GenericEntitySetMapping(EntityTypeMapping value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public EntityKeyElement get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(EntityKeyElement value);
    [CompilerGeneratedAttribute]
public List`1<Property> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<Property> value);
    [CompilerGeneratedAttribute]
public List`1<NavigationProperty> get_NavigationProperties();
    [CompilerGeneratedAttribute]
public void set_NavigationProperties(List`1<NavigationProperty> value);
    [CompilerGeneratedAttribute]
public string get_BaseTypeName();
    [CompilerGeneratedAttribute]
public void set_BaseTypeName(string value);
    [CompilerGeneratedAttribute]
private bool (Type );
    [CompilerGeneratedAttribute]
private bool (Type );
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.SchemaEntityType`1 : object {
    [CompilerGeneratedAttribute]
private SchemaEntityType ;
    public SchemaEntityType Info { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaEntityType get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(SchemaEntityType value);
    public Property Property(Expression`1<Func`2<T, object>> propertyExpression);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.SchemaEnumMember : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("Value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Z.EntityFramework.Extensions.Core.SchemaObjectModel.SchemaEnumType : object {
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private List`1<SchemaEnumMember> ;
    [XmlIgnoreAttribute]
public Type Type { get; public set; }
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("IsFlags")]
public bool IsFlags { get; public set; }
    [XmlAttributeAttribute("UnderlyingType")]
public string UnderlyingTypeName { get; public set; }
    [XmlElementAttribute("Member")]
public List`1<SchemaEnumMember> Members { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFlags();
    [CompilerGeneratedAttribute]
public void set_IsFlags(bool value);
    [CompilerGeneratedAttribute]
public string get_UnderlyingTypeName();
    [CompilerGeneratedAttribute]
public void set_UnderlyingTypeName(string value);
    [CompilerGeneratedAttribute]
public List`1<SchemaEnumMember> get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(List`1<SchemaEnumMember> value);
}
public class Z.EntityFramework.Extensions.DeleteByKeyExecutor`1 : object {
    internal static string ;
    internal static string ;
    internal static string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private SqlBulkCopy ;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object ;
    [CompilerGeneratedAttribute]
private DbCommand ;
    [CompilerGeneratedAttribute]
private DbCommand ;
    [CompilerGeneratedAttribute]
private DataTable ;
    [CompilerGeneratedAttribute]
private DbSet`1<TEntity> ;
    [CompilerGeneratedAttribute]
private DbContext ;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> ;
    [CompilerGeneratedAttribute]
private List`1<object> ;
    internal bool  { get; internal set; }
    internal SqlBulkCopy  { get; internal set; }
    [DynamicAttribute]
internal object  { get; internal set; }
    internal DbCommand  { get; internal set; }
    internal DbCommand  { get; internal set; }
    internal DataTable  { get; internal set; }
    internal DbSet`1<TEntity>  { get; internal set; }
    internal DbContext  { get; internal set; }
    internal IEnumerable`1<object>  { get; internal set; }
    internal List`1<object>  { get; internal set; }
    public DeleteByKeyExecutor`1(DbSet`1<TEntity> dbSet, IEnumerable`1<object> entitiesEnumerable);
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    [CompilerGeneratedAttribute]
internal SqlBulkCopy get_();
    [CompilerGeneratedAttribute]
internal void set_(SqlBulkCopy value);
    [CompilerGeneratedAttribute]
internal object get_();
    [CompilerGeneratedAttribute]
internal void set_(object value);
    [CompilerGeneratedAttribute]
internal DbCommand get_();
    [CompilerGeneratedAttribute]
internal void set_(DbCommand value);
    [CompilerGeneratedAttribute]
internal DbCommand get_();
    [CompilerGeneratedAttribute]
internal void set_(DbCommand value);
    [CompilerGeneratedAttribute]
internal DataTable get_();
    [CompilerGeneratedAttribute]
internal void set_(DataTable value);
    [CompilerGeneratedAttribute]
internal DbSet`1<TEntity> get_();
    [CompilerGeneratedAttribute]
internal void set_(DbSet`1<TEntity> value);
    [CompilerGeneratedAttribute]
internal DbContext get_();
    [CompilerGeneratedAttribute]
internal void set_(DbContext value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<object> get_();
    [CompilerGeneratedAttribute]
internal void set_(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
internal List`1<object> get_();
    [CompilerGeneratedAttribute]
internal void set_(List`1<object> value);
    public void Prepare();
    public int Execute();
    [AsyncStateMachineAttribute("Z.EntityFramework.Extensions.DeleteByKeyExecutor`1/")]
public Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    internal static object (SchemaEntityType`1<TEntity> , object );
    internal static void (List`1<EntityTypeMapping> , List`1<EntityTypeMapping> , SchemaEntityType );
    internal static bool (SchemaEntityType , SchemaEntityType );
}
public static class Z.EntityFramework.Extensions.DeleteByKeyManager : object {
    internal static int (DbSet`1<> , Object[] );
    internal static int (DbSet`1<> , IEnumerable`1<object> );
    internal static Task`1<int> (DbSet`1<> , CancellationToken , Object[] );
    internal static Task`1<int> (DbSet`1<> , CancellationToken , IEnumerable`1<object> );
}
public static class Z.EntityFramework.Extensions.EF6Config : object {
    [CompilerGeneratedAttribute]
private static string ;
    [CompilerGeneratedAttribute]
private static Func`2<DbContext, string> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static Action`1<BatchSaveChangesOptions> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static Func`2<DataTable, object> ;
    [CompilerGeneratedAttribute]
private static Func`2<DataTable, object> ;
    [CompilerGeneratedAttribute]
private static Func`2<DataTable, object> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static string ;
    [CompilerGeneratedAttribute]
private static Func`2<DbContext, XDocument> ;
    [CompilerGeneratedAttribute]
private static Func`2<DbContext, DbContext> ;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> ;
    [CompilerGeneratedAttribute]
private static Action`1<DbContext> ;
    [CompilerGeneratedAttribute]
private static Action`1<DbContext> ;
    [CompilerGeneratedAttribute]
private static Action`2<DbContext, object> ;
    [CompilerGeneratedAttribute]
private static Action`2<DbContext, object> ;
    [CompilerGeneratedAttribute]
private static Action`2<DbContext, object> ;
    [CompilerGeneratedAttribute]
private static Action`2<DbContext, object> ;
    [CompilerGeneratedAttribute]
private static Action`2<DbContext, object> ;
    [CompilerGeneratedAttribute]
private static Action`1<string> ;
    [CompilerGeneratedAttribute]
private static Action`1<Dictionary`2<string, Type>> ;
    [CompilerGeneratedAttribute]
private static string ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    public static string ModelName { get; public set; }
    public static Func`2<DbContext, string> ModelNameFactory { get; public set; }
    public static bool IsCommunity { get; public set; }
    public static bool IsEntityFrameworkPlus { get; public set; }
    public static Action`1<BulkOperation> BulkOperationBuilder { get; public set; }
    public static Action`1<BatchSaveChangesOptions> BatchSaveChangesOptionsFactory { get; public set; }
    public static bool UseOldBulkSaveChanges { get; public set; }
    public static ObjectCache Cache { get; public set; }
    public static Func`3<DbException, int, bool> TmpIsTransientError { get; public set; }
    public static CustomProvider CustomProvider { get; public set; }
    public static bool ForceDatabaseFirst { get; public set; }
    public static bool UseToListMemoryOptimized { get; public set; }
    public static bool ForceSelectOutput { get; public set; }
    public static Func`2<DataTable, object> SetDataSourceAddedAction { get; public set; }
    public static Func`2<DataTable, object> SetDataSourceModifiedAction { get; public set; }
    public static Func`2<DataTable, object> SetDataSourceDeletedAction { get; public set; }
    public static bool TmpForceDatabaseFirstSingleModel { get; public set; }
    public static bool PreserveTopologicalSortOrder { get; public set; }
    public static bool PreserveCommandOrder { get; public set; }
    public static bool DisableBulkCommandBatch { get; public set; }
    public static bool TmpStoredModelEdmx { get; public set; }
    public static string TmpModelEdmx { get; public set; }
    public static Func`2<DbContext, XDocument> ModelEdmxFactory { get; public set; }
    public static Func`2<DbContext, DbContext> ContextFactory { get; public set; }
    public static Func`2<object, object> SetDataSourceBulkInsertAction { get; public set; }
    public static Action`1<DbContext> PreBatchSaveChanges { get; public set; }
    public static Action`1<DbContext> PreBulkSaveChanges { get; public set; }
    public static Action`2<DbContext, object> PreBulkInsert { get; public set; }
    public static Action`2<DbContext, object> PreBulkUpdate { get; public set; }
    public static Action`2<DbContext, object> PreBulkMerge { get; public set; }
    public static Action`2<DbContext, object> PreBulkDelete { get; public set; }
    public static Action`2<DbContext, object> PreBulkSynchronize { get; public set; }
    public static Action`1<string> LogUniqueIndexIssue { get; public set; }
    public static bool ForceTriggerResolution { get; public set; }
    public static Action`1<Dictionary`2<string, Type>> TemporaryStringToTypeAction { get; public set; }
    public static string TemporaryFix_ModelName { get; public set; }
    public static bool DefaultEntityFrameworkPropagationValue { get; public set; }
    public static bool UseMySqlEntityFrameworkPropagation { get; public set; }
    private static EF6Config();
    [CompilerGeneratedAttribute]
public static string get_ModelName();
    [CompilerGeneratedAttribute]
public static void set_ModelName(string value);
    [CompilerGeneratedAttribute]
public static Func`2<DbContext, string> get_ModelNameFactory();
    [CompilerGeneratedAttribute]
public static void set_ModelNameFactory(Func`2<DbContext, string> value);
    public static bool get_IsCommunity();
    public static void set_IsCommunity(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsEntityFrameworkPlus();
    [CompilerGeneratedAttribute]
public static void set_IsEntityFrameworkPlus(bool value);
    public static Action`1<BulkOperation> get_BulkOperationBuilder();
    public static void set_BulkOperationBuilder(Action`1<BulkOperation> value);
    public static void AddLicense(string licenseName, string licenseKey);
    public static bool ValidateLicense(ProviderType provider);
    public static bool ValidateLicense(String& errorMessage, ProviderType provider);
    [CompilerGeneratedAttribute]
public static Action`1<BatchSaveChangesOptions> get_BatchSaveChangesOptionsFactory();
    [CompilerGeneratedAttribute]
public static void set_BatchSaveChangesOptionsFactory(Action`1<BatchSaveChangesOptions> value);
    [CompilerGeneratedAttribute]
public static bool get_UseOldBulkSaveChanges();
    [CompilerGeneratedAttribute]
public static void set_UseOldBulkSaveChanges(bool value);
    public static ObjectCache get_Cache();
    public static void set_Cache(ObjectCache value);
    public static Func`3<DbException, int, bool> get_TmpIsTransientError();
    public static void set_TmpIsTransientError(Func`3<DbException, int, bool> value);
    public static CustomProvider get_CustomProvider();
    public static void set_CustomProvider(CustomProvider value);
    [CompilerGeneratedAttribute]
public static bool get_ForceDatabaseFirst();
    [CompilerGeneratedAttribute]
public static void set_ForceDatabaseFirst(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseToListMemoryOptimized();
    [CompilerGeneratedAttribute]
public static void set_UseToListMemoryOptimized(bool value);
    public static bool get_ForceSelectOutput();
    public static void set_ForceSelectOutput(bool value);
    [CompilerGeneratedAttribute]
public static Func`2<DataTable, object> get_SetDataSourceAddedAction();
    [CompilerGeneratedAttribute]
public static void set_SetDataSourceAddedAction(Func`2<DataTable, object> value);
    [CompilerGeneratedAttribute]
public static Func`2<DataTable, object> get_SetDataSourceModifiedAction();
    [CompilerGeneratedAttribute]
public static void set_SetDataSourceModifiedAction(Func`2<DataTable, object> value);
    [CompilerGeneratedAttribute]
public static Func`2<DataTable, object> get_SetDataSourceDeletedAction();
    [CompilerGeneratedAttribute]
public static void set_SetDataSourceDeletedAction(Func`2<DataTable, object> value);
    [CompilerGeneratedAttribute]
public static bool get_TmpForceDatabaseFirstSingleModel();
    [CompilerGeneratedAttribute]
public static void set_TmpForceDatabaseFirstSingleModel(bool value);
    [CompilerGeneratedAttribute]
public static bool get_PreserveTopologicalSortOrder();
    [CompilerGeneratedAttribute]
public static void set_PreserveTopologicalSortOrder(bool value);
    [CompilerGeneratedAttribute]
public static bool get_PreserveCommandOrder();
    [CompilerGeneratedAttribute]
public static void set_PreserveCommandOrder(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DisableBulkCommandBatch();
    [CompilerGeneratedAttribute]
public static void set_DisableBulkCommandBatch(bool value);
    public static void UseFiddleSqlCompact(object sqlCeProviderServicesInstance, object sqlCeProviderFactoryInstance);
    [CompilerGeneratedAttribute]
public static bool get_TmpStoredModelEdmx();
    [CompilerGeneratedAttribute]
public static void set_TmpStoredModelEdmx(bool value);
    [CompilerGeneratedAttribute]
public static string get_TmpModelEdmx();
    [CompilerGeneratedAttribute]
public static void set_TmpModelEdmx(string value);
    [CompilerGeneratedAttribute]
public static Func`2<DbContext, XDocument> get_ModelEdmxFactory();
    [CompilerGeneratedAttribute]
public static void set_ModelEdmxFactory(Func`2<DbContext, XDocument> value);
    [CompilerGeneratedAttribute]
public static Func`2<DbContext, DbContext> get_ContextFactory();
    [CompilerGeneratedAttribute]
public static void set_ContextFactory(Func`2<DbContext, DbContext> value);
    [CompilerGeneratedAttribute]
public static Func`2<object, object> get_SetDataSourceBulkInsertAction();
    [CompilerGeneratedAttribute]
public static void set_SetDataSourceBulkInsertAction(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public static Action`1<DbContext> get_PreBatchSaveChanges();
    [CompilerGeneratedAttribute]
public static void set_PreBatchSaveChanges(Action`1<DbContext> value);
    [CompilerGeneratedAttribute]
public static Action`1<DbContext> get_PreBulkSaveChanges();
    [CompilerGeneratedAttribute]
public static void set_PreBulkSaveChanges(Action`1<DbContext> value);
    [CompilerGeneratedAttribute]
public static Action`2<DbContext, object> get_PreBulkInsert();
    [CompilerGeneratedAttribute]
public static void set_PreBulkInsert(Action`2<DbContext, object> value);
    [CompilerGeneratedAttribute]
public static Action`2<DbContext, object> get_PreBulkUpdate();
    [CompilerGeneratedAttribute]
public static void set_PreBulkUpdate(Action`2<DbContext, object> value);
    [CompilerGeneratedAttribute]
public static Action`2<DbContext, object> get_PreBulkMerge();
    [CompilerGeneratedAttribute]
public static void set_PreBulkMerge(Action`2<DbContext, object> value);
    [CompilerGeneratedAttribute]
public static Action`2<DbContext, object> get_PreBulkDelete();
    [CompilerGeneratedAttribute]
public static void set_PreBulkDelete(Action`2<DbContext, object> value);
    [CompilerGeneratedAttribute]
public static Action`2<DbContext, object> get_PreBulkSynchronize();
    [CompilerGeneratedAttribute]
public static void set_PreBulkSynchronize(Action`2<DbContext, object> value);
    [CompilerGeneratedAttribute]
public static Action`1<string> get_LogUniqueIndexIssue();
    [CompilerGeneratedAttribute]
public static void set_LogUniqueIndexIssue(Action`1<string> value);
    public static bool get_ForceTriggerResolution();
    public static void set_ForceTriggerResolution(bool value);
    [CompilerGeneratedAttribute]
public static Action`1<Dictionary`2<string, Type>> get_TemporaryStringToTypeAction();
    [CompilerGeneratedAttribute]
public static void set_TemporaryStringToTypeAction(Action`1<Dictionary`2<string, Type>> value);
    [CompilerGeneratedAttribute]
public static string get_TemporaryFix_ModelName();
    [CompilerGeneratedAttribute]
public static void set_TemporaryFix_ModelName(string value);
    [CompilerGeneratedAttribute]
public static bool get_DefaultEntityFrameworkPropagationValue();
    [CompilerGeneratedAttribute]
public static void set_DefaultEntityFrameworkPropagationValue(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseMySqlEntityFrameworkPropagation();
    [CompilerGeneratedAttribute]
public static void set_UseMySqlEntityFrameworkPropagation(bool value);
    public static object TryTopologicalSort(object orderer);
    public static object TryBatchTopologicalSort(object orderer);
    public static void LoadSqlTypeAssembly();
}
public class Z.EntityFramework.Extensions.EffortPolyProvider : object {
    [CompilerGeneratedAttribute]
private int ;
    public bool AllowMultipleStatement { get; }
    public int MaximumParameter { get; }
    public sealed virtual bool get_AllowMultipleStatement();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaximumParameter();
    public sealed virtual string EscapeTableName(string tableName);
    public sealed virtual string EscapeColumnName(string columnName);
}
public class Z.EntityFramework.Extensions.EFPlusDependency : object {
    public static int TmpUpdateFromQuery(IQueryable`1<T> query, Expression`1<Func`2<T, T>> updateFactory);
    public static int TmpUpdateFromQuery(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateFactory);
    public static Task`1<int> TmpUpdateFromQueryAsync(IQueryable`1<T> query, Expression`1<Func`2<T, T>> updateFactory, CancellationToken cancellationToken);
    public static Task`1<int> TmpUpdateFromQueryAsync(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateFactory, CancellationToken cancellationToken);
}
public class Z.EntityFramework.Extensions.EntityBulkOperation : BulkOperation {
    internal EntityBulkOperation(DbConnection );
}
public class Z.EntityFramework.Extensions.EntityBulkOperation`1 : BulkOperation`1<T> {
    internal int ;
    internal DbContext ;
    internal bool ;
    public int DataTableBatchSize { get; public set; }
    internal EntityBulkOperation`1(DbContext );
    internal EntityBulkOperation`1(DbContext , Action`1<EntityBulkOperation`1<T>> );
    internal EntityBulkOperation`1(DbContext , IEnumerable`1<T> );
    internal EntityBulkOperation`1(DbContext , Action`1<EntityBulkOperation`1<T>> , IEnumerable`1<T> );
    public int get_DataTableBatchSize();
    public void set_DataTableBatchSize(int value);
    public sealed virtual void Dispose();
    internal void (Action`1<EntityBulkOperation`1<T>> );
    public virtual void BulkDelete();
    public void BulkDelete(IEnumerable`1<T> entities);
    public virtual void BulkInsert();
    public void BulkInsert(IEnumerable`1<T> entities);
    public virtual void BulkUpdate();
    public void BulkUpdate(IEnumerable`1<T> entities);
    public virtual void BulkMerge();
    public void BulkMerge(IEnumerable`1<T> entities);
    internal void (BulkOperation );
}
public class Z.EntityFramework.Extensions.EntityBulkOperationOptions`1 : BulkOperationOptions`1<T> {
    internal int ;
    public int DataTableBatchSize { get; public set; }
    public int get_DataTableBatchSize();
    public void set_DataTableBatchSize(int value);
}
public class Z.EntityFramework.Extensions.EntityConnectionContainer : object {
    internal bool ;
    [CompilerGeneratedAttribute]
private DbContext ;
    [CompilerGeneratedAttribute]
private DbConnection ;
    [CompilerGeneratedAttribute]
private DbTransaction ;
    public DbContext Context { get; internal set; }
    public DbConnection Connection { get; internal set; }
    public DbTransaction Transaction { get; internal set; }
    public ConnectionState State { get; }
    public EntityConnectionContainer(DbContext context);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(DbContext value);
    [CompilerGeneratedAttribute]
public DbConnection get_Connection();
    [CompilerGeneratedAttribute]
internal void set_Connection(DbConnection value);
    [CompilerGeneratedAttribute]
public DbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
internal void set_Transaction(DbTransaction value);
    public ConnectionState get_State();
    public sealed virtual void Dispose();
    public void Open();
    public Task OpenAsync(CancellationToken cancellationToken);
    public DbCommand CreateCommand();
}
public class Z.EntityFramework.Extensions.EntityDatabase : object {
    [CompilerGeneratedAttribute]
private DbContext ;
    public DbContext Context { get; internal set; }
    public void BulkDelete(IEnumerable`1<T> entities);
    public void BulkDelete(IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    public void BulkDelete(IEnumerable`1<T> entities, BulkOperationOptions options);
    public void BulkInsert(IEnumerable`1<T> entities);
    public void BulkInsert(IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    public void BulkInsert(IEnumerable`1<T> entities, BulkOperationOptions options);
    public void BulkMerge(IEnumerable`1<T> entities);
    public void BulkMerge(IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    public void BulkMerge(IEnumerable`1<T> entities, BulkOperationOptions options);
    public void BulkSynchronize(IEnumerable`1<T> entities);
    public void BulkSynchronize(IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    public void BulkSynchronize(IEnumerable`1<T> entities, BulkOperationOptions options);
    public void BulkUpdate(IEnumerable`1<T> entities);
    public void BulkUpdate(IEnumerable`1<T> entities, Action`1<EntityBulkOperation`1<T>> bulkOperationFactory);
    public void BulkUpdate(IEnumerable`1<T> entities, BulkOperationOptions options);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(DbContext value);
    internal EntityBulkOperation`1<> ();
    internal EntityBulkOperation`1<> (Action`1<BulkOperation`1<>> );
    internal EntityBulkOperation`1<> (IEnumerable`1<> );
    internal EntityBulkOperation`1<> (Action`1<BulkOperation`1<>> , IEnumerable`1<> );
}
public class Z.EntityFramework.Extensions.EntityFrameworkManager : object {
    internal static int ;
    internal static Nullable`1<bool> ;
    internal static Func`2<DbGeography, object> ;
    internal static Func`2<DbGeometry, object> ;
    internal static Func`2<object, object> ;
    internal static Lazy`1<Type> ;
    internal static Lazy`1<Func`2<object, object>> ;
    public static string ModelName { get; public set; }
    public static Func`2<DbContext, string> ModelNameFactory { get; public set; }
    public static bool IsCommunity { get; public set; }
    public static bool IsEntityFrameworkPlus { get; public set; }
    public static Action`1<BulkOperation> BulkOperationBuilder { get; public set; }
    public static Action`1<BatchSaveChangesOptions> BatchSaveChangesOptionsFactory { get; public set; }
    public static bool UseOldBulkSaveChanges { get; public set; }
    public static ObjectCache Cache { get; public set; }
    public static Func`3<DbException, int, bool> TmpIsTransientError { get; public set; }
    public static CustomProvider CustomProvider { get; public set; }
    public static bool ForceDatabaseFirst { get; public set; }
    public static bool UseToListMemoryOptimized { get; public set; }
    public static bool ForceSelectOutput { get; public set; }
    public static Func`2<DataTable, object> SetDataSourceAddedAction { get; public set; }
    public static Func`2<DataTable, object> SetDataSourceModifiedAction { get; public set; }
    public static Func`2<DataTable, object> SetDataSourceDeletedAction { get; public set; }
    public static bool TmpForceDatabaseFirstSingleModel { get; public set; }
    public static bool PreserveTopologicalSortOrder { get; public set; }
    public static bool PreserveCommandOrder { get; public set; }
    public static bool DisableBulkCommandBatch { get; public set; }
    public static bool TmpStoredModelEdmx { get; public set; }
    public static string TmpModelEdmx { get; public set; }
    public static Func`2<DbContext, XDocument> ModelEdmxFactory { get; public set; }
    public static Func`2<DbContext, DbContext> ContextFactory { get; public set; }
    public static Func`2<object, object> SetDataSourceBulkInsertAction { get; public set; }
    public static Action`1<DbContext> PreBatchSaveChanges { get; public set; }
    public static Action`1<DbContext> PreBulkSaveChanges { get; public set; }
    public static Action`2<DbContext, object> PreBulkInsert { get; public set; }
    public static Action`2<DbContext, object> PreBulkUpdate { get; public set; }
    public static Action`2<DbContext, object> PreBulkMerge { get; public set; }
    public static Action`2<DbContext, object> PreBulkDelete { get; public set; }
    public static Action`2<DbContext, object> PreBulkSynchronize { get; public set; }
    public static Action`1<string> LogUniqueIndexIssue { get; public set; }
    public static bool ForceTriggerResolution { get; public set; }
    public static Action`1<Dictionary`2<string, Type>> TemporaryStringToTypeAction { get; public set; }
    public static string TemporaryFix_ModelName { get; public set; }
    public static bool DefaultEntityFrameworkPropagationValue { get; public set; }
    internal static bool  { get; }
    public static bool UseMySqlEntityFrameworkPropagation { get; public set; }
    private static EntityFrameworkManager();
    public static string get_ModelName();
    public static void set_ModelName(string value);
    public static Func`2<DbContext, string> get_ModelNameFactory();
    public static void set_ModelNameFactory(Func`2<DbContext, string> value);
    public static bool get_IsCommunity();
    public static void set_IsCommunity(bool value);
    public static bool get_IsEntityFrameworkPlus();
    public static void set_IsEntityFrameworkPlus(bool value);
    public static Action`1<BulkOperation> get_BulkOperationBuilder();
    public static void set_BulkOperationBuilder(Action`1<BulkOperation> value);
    public static Action`1<BatchSaveChangesOptions> get_BatchSaveChangesOptionsFactory();
    public static void set_BatchSaveChangesOptionsFactory(Action`1<BatchSaveChangesOptions> value);
    public static bool get_UseOldBulkSaveChanges();
    public static void set_UseOldBulkSaveChanges(bool value);
    public static ObjectCache get_Cache();
    public static void set_Cache(ObjectCache value);
    public static Func`3<DbException, int, bool> get_TmpIsTransientError();
    public static void set_TmpIsTransientError(Func`3<DbException, int, bool> value);
    public static CustomProvider get_CustomProvider();
    public static void set_CustomProvider(CustomProvider value);
    public static bool get_ForceDatabaseFirst();
    public static void set_ForceDatabaseFirst(bool value);
    public static bool get_UseToListMemoryOptimized();
    public static void set_UseToListMemoryOptimized(bool value);
    public static bool get_ForceSelectOutput();
    public static void set_ForceSelectOutput(bool value);
    public static Func`2<DataTable, object> get_SetDataSourceAddedAction();
    public static void set_SetDataSourceAddedAction(Func`2<DataTable, object> value);
    public static Func`2<DataTable, object> get_SetDataSourceModifiedAction();
    public static void set_SetDataSourceModifiedAction(Func`2<DataTable, object> value);
    public static Func`2<DataTable, object> get_SetDataSourceDeletedAction();
    public static void set_SetDataSourceDeletedAction(Func`2<DataTable, object> value);
    public static bool get_TmpForceDatabaseFirstSingleModel();
    public static void set_TmpForceDatabaseFirstSingleModel(bool value);
    public static bool get_PreserveTopologicalSortOrder();
    public static void set_PreserveTopologicalSortOrder(bool value);
    public static bool get_PreserveCommandOrder();
    public static void set_PreserveCommandOrder(bool value);
    public static bool get_DisableBulkCommandBatch();
    public static void set_DisableBulkCommandBatch(bool value);
    public static void UseFiddleSqlCompact(object sqlCeProviderServicesInstance, object sqlCeProviderFactoryInstance);
    public static bool get_TmpStoredModelEdmx();
    public static void set_TmpStoredModelEdmx(bool value);
    public static string get_TmpModelEdmx();
    public static void set_TmpModelEdmx(string value);
    public static Func`2<DbContext, XDocument> get_ModelEdmxFactory();
    public static void set_ModelEdmxFactory(Func`2<DbContext, XDocument> value);
    public static Func`2<DbContext, DbContext> get_ContextFactory();
    public static void set_ContextFactory(Func`2<DbContext, DbContext> value);
    internal static DbContext (DbContext , BulkOperation );
    internal static DbContext (DbContext , BulkOperation , IEnumerable`1<> , bool , Boolean& );
    internal static void (DbContext , DbContext );
    public static Func`2<object, object> get_SetDataSourceBulkInsertAction();
    public static void set_SetDataSourceBulkInsertAction(Func`2<object, object> value);
    public static Action`1<DbContext> get_PreBatchSaveChanges();
    public static void set_PreBatchSaveChanges(Action`1<DbContext> value);
    public static Action`1<DbContext> get_PreBulkSaveChanges();
    public static void set_PreBulkSaveChanges(Action`1<DbContext> value);
    public static Action`2<DbContext, object> get_PreBulkInsert();
    public static void set_PreBulkInsert(Action`2<DbContext, object> value);
    public static Action`2<DbContext, object> get_PreBulkUpdate();
    public static void set_PreBulkUpdate(Action`2<DbContext, object> value);
    public static Action`2<DbContext, object> get_PreBulkMerge();
    public static void set_PreBulkMerge(Action`2<DbContext, object> value);
    public static Action`2<DbContext, object> get_PreBulkDelete();
    public static void set_PreBulkDelete(Action`2<DbContext, object> value);
    public static Action`2<DbContext, object> get_PreBulkSynchronize();
    public static void set_PreBulkSynchronize(Action`2<DbContext, object> value);
    public static Action`1<string> get_LogUniqueIndexIssue();
    public static void set_LogUniqueIndexIssue(Action`1<string> value);
    public static bool get_ForceTriggerResolution();
    public static void set_ForceTriggerResolution(bool value);
    public static Action`1<Dictionary`2<string, Type>> get_TemporaryStringToTypeAction();
    public static void set_TemporaryStringToTypeAction(Action`1<Dictionary`2<string, Type>> value);
    public static string get_TemporaryFix_ModelName();
    public static void set_TemporaryFix_ModelName(string value);
    public static bool get_DefaultEntityFrameworkPropagationValue();
    public static void set_DefaultEntityFrameworkPropagationValue(bool value);
    internal static bool get_();
    public static bool get_UseMySqlEntityFrameworkPropagation();
    public static void set_UseMySqlEntityFrameworkPropagation(bool value);
    public static object TryTopologicalSort(object orderer);
    public static object TryBatchTopologicalSort(object orderer);
    public static void LoadSqlTypeAssembly();
}
public class Z.EntityFramework.Extensions.ExecuteFutureOption : object {
    [CompilerGeneratedAttribute]
private bool ;
    public bool UseTransaction { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseTransaction();
    [CompilerGeneratedAttribute]
public void set_UseTransaction(bool value);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Extensions.Internal.StringExtensionMethods : object {
    [ExtensionAttribute]
public static string ReplaceFirst(string text, string search, string replace);
}
public interface Z.EntityFramework.Extensions.IPolyProvider {
    public bool AllowMultipleStatement { get; }
    public int MaximumParameter { get; }
    public abstract virtual bool get_AllowMultipleStatement();
    public abstract virtual int get_MaximumParameter();
    public abstract virtual string EscapeTableName(string tableName);
    public abstract virtual string EscapeColumnName(string columnName);
}
public interface Z.EntityFramework.Extensions.IQueryHook {
    public abstract virtual void Execute(DbCommand command, DbContext dbContext);
}
public class Z.EntityFramework.Extensions.LicenseManager : object {
    public static void AddLicense(string licenseName, string licenseKey);
    public static bool ValidateLicense(ProviderType provider);
    public static bool ValidateLicense(String& errorMessage, ProviderType provider);
    public static bool IsTrialMode();
    public static bool IsTrialExpired();
    public static bool IsLicenseAdded();
}
public class Z.EntityFramework.Extensions.MySqlDatabase : EntityDatabase {
    public MySqlDatabase(DbContext context);
    public EntityConnectionContainer CreateConnectionContainer();
}
public class Z.EntityFramework.Extensions.OracleDevArtDatabase : EntityDatabase {
    public OracleDevArtDatabase(DbContext context);
    public EntityConnectionContainer CreateConnectionContainer();
}
public class Z.EntityFramework.Extensions.PolyCommandSet : object {
    public List`1<Tuple`2<DbCommand, PolyCommandSetCallbackAction>> Commands;
    public Nullable`1<int> CommandTimeout;
    public DbConnection Connection;
    public IPolyProvider ProviderInfo;
    public bool PreserveOrder;
    public bool AllowUseExecute;
    internal DbCommand ;
    public DbTransaction Transaction;
    internal Nullable`1<int> ;
    public int BatchSize { get; public set; }
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public void Execute();
    [AsyncStateMachineAttribute("Z.EntityFramework.Extensions.PolyCommandSet/")]
public Task ExecuteAsync(CancellationToken cancellationToken);
    public void Add(DbCommand command);
    public void Add(DbCommand command, Action`1<DbDataReader> callbackAction);
    public void Add(DbCommand command, Func`2<DbDataReader, Task> callbackActionAsync);
    public List`1<Tuple`2<DbCommand, List`1<PolyCommandSetCallbackAction>>> Combine();
    public void SetInfo(DbConnection connection, DbTransaction transaction);
    public DbCommand GetBaseCommand(DbCommand command);
}
public class Z.EntityFramework.Extensions.PolyCommandSetCallbackAction : object {
    public Action`1<DbDataReader> Action;
    public Func`2<DbDataReader, Task> ActionAsync;
}
public class Z.EntityFramework.Extensions.PolyProvider : object {
    public static IPolyProvider GetBaseProvider(DbConnection connection);
}
public class Z.EntityFramework.Extensions.PostgreSQLDatabase : EntityDatabase {
    public PostgreSQLDatabase(DbContext context);
    public EntityConnectionContainer CreateConnectionContainer();
}
public class Z.EntityFramework.Extensions.PublicInternalBulkOperationManager : object {
    public static void BulkInsertCast(BulkOperation`1<object> this, DbContext context, List`1<object> list, bool isManager, List`1<object> entitiesToUpdate, Type type, string typeName);
    public static void BulkMergeCast(BulkOperation`1<object> this, DbContext context, List`1<object> list, bool isManager, Type type, string typeName);
    public static void BulkUpdateCast(BulkOperation`1<object> this, DbContext context, List`1<object> list, bool isManager, Type type, string typeName);
    public static Action`1<EntityBulkOperation`1<T>> CreateAction(Action`1<BulkOperation> action);
}
public class Z.EntityFramework.Extensions.QueryHookCommandInterceptor : object {
    public sealed virtual void NonQueryExecuting(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public sealed virtual void NonQueryExecuted(DbCommand command, DbCommandInterceptionContext`1<int> interceptionContext);
    public sealed virtual void ReaderExecuting(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public sealed virtual void ReaderExecuted(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public sealed virtual void ScalarExecuting(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
    public sealed virtual void ScalarExecuted(DbCommand command, DbCommandInterceptionContext`1<object> interceptionContext);
    public void HookExecuting(DbCommand command, DbContext dbContext);
}
public class Z.EntityFramework.Extensions.QueryHookExecuting : object {
    [CompilerGeneratedAttribute]
private DbContext ;
    public Action`2<DbCommand, DbContext> Action;
    public DbContext DbContext { get; public set; }
    public QueryHookExecuting(Action`2<DbCommand, DbContext> action);
    [CompilerGeneratedAttribute]
public DbContext get_DbContext();
    [CompilerGeneratedAttribute]
public void set_DbContext(DbContext value);
    public sealed virtual void Execute(DbCommand command, DbContext dbContext);
}
public static class Z.EntityFramework.Extensions.QueryHookManager : object {
    internal static string ;
    internal static ConditionalWeakTable`2<string, List`1<IQueryHook>> ;
    private static QueryHookManager();
    public static IQueryable`1<T> AddOrAppendHook(IQueryable`1<T> this, IQueryHook hook);
}
public class Z.EntityFramework.Extensions.SelfHierarchyListColumnMapping : object {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    public string ColumnName { get; public set; }
    public string RecursiveColumnName { get; public set; }
    public SelfHierarchyListColumnMapping(string columnName, string recursiveColumnName);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_RecursiveColumnName();
    [CompilerGeneratedAttribute]
public void set_RecursiveColumnName(string value);
}
public class Z.EntityFramework.Extensions.SelfHierarchyListIncludeVisitor : ExpressionVisitor {
    public List`1<string> Navigations;
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
}
public class Z.EntityFramework.Extensions.SelfHierarchyListOptions`1 : object {
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private Func`2<IQueryable`1<T>, IQueryable`1<T>> ;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<T, object>> ;
    [CompilerGeneratedAttribute]
private List`1<SelfHierarchyListColumnMapping> ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private bool ;
    public int MaxRecursion { get; public set; }
    public Func`2<IQueryable`1<T>, IQueryable`1<T>> SelfHierarchyQuery { get; public set; }
    public Expression`1<Func`2<T, object>> JoinExpression { get; public set; }
    public List`1<SelfHierarchyListColumnMapping> ColumnMappings { get; public set; }
    public int FlatListRecursionLevel { get; public set; }
    public bool InverseMapping { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxRecursion();
    [CompilerGeneratedAttribute]
public void set_MaxRecursion(int value);
    [CompilerGeneratedAttribute]
public Func`2<IQueryable`1<T>, IQueryable`1<T>> get_SelfHierarchyQuery();
    [CompilerGeneratedAttribute]
public void set_SelfHierarchyQuery(Func`2<IQueryable`1<T>, IQueryable`1<T>> value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, object>> get_JoinExpression();
    [CompilerGeneratedAttribute]
public void set_JoinExpression(Expression`1<Func`2<T, object>> value);
    [CompilerGeneratedAttribute]
public List`1<SelfHierarchyListColumnMapping> get_ColumnMappings();
    [CompilerGeneratedAttribute]
public void set_ColumnMappings(List`1<SelfHierarchyListColumnMapping> value);
    [CompilerGeneratedAttribute]
public int get_FlatListRecursionLevel();
    [CompilerGeneratedAttribute]
public void set_FlatListRecursionLevel(int value);
    [CompilerGeneratedAttribute]
public bool get_InverseMapping();
    [CompilerGeneratedAttribute]
public void set_InverseMapping(bool value);
}
public class Z.EntityFramework.Extensions.Shared.BatchSaveChanges.BatchSaveChangesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> ;
    internal Nullable`1<IsolationLevel> ;
    internal Nullable`1<int>  { get; internal set; }
    public int BatchSize { get; public set; }
    public Nullable`1<IsolationLevel> TransactionIsolationLevel { get; public set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_();
    [CompilerGeneratedAttribute]
internal void set_(Nullable`1<int> value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public Nullable`1<IsolationLevel> get_TransactionIsolationLevel();
    public void set_TransactionIsolationLevel(Nullable`1<IsolationLevel> value);
}
public class Z.EntityFramework.Extensions.SqlCeDatabase : EntityDatabase {
    public SqlCeDatabase(DbContext context);
    public EntityConnectionContainer CreateConnectionContainer();
}
public class Z.EntityFramework.Extensions.SqlDatabase : EntityDatabase {
    public SqlConnection Connection { get; }
    public SqlTransaction Transaction { get; }
    public SqlDatabase(DbContext context);
    public SqlConnection get_Connection();
    public SqlTransaction get_Transaction();
    public EntityConnectionContainer CreateConnectionContainer();
}
public class Z.EntityFramework.Extensions.SQLiteDatabase : EntityDatabase {
    public SQLiteDatabase(DbContext context);
    public EntityConnectionContainer CreateConnectionContainer();
}
public class Z.EntityFramework.Extensions.SqlPolyProvider : object {
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private int ;
    public static Action`2<SqlParameter, SqlParameter> Call_SqlParameter_Clone;
    public static Action`2<DbParameter, DbParameter> Call_SqlParameter_Clone2;
    internal bool  { get; internal set; }
    public bool AllowMultipleStatement { get; }
    public int MaximumParameter { get; }
    [CompilerGeneratedAttribute]
internal bool get_();
    [CompilerGeneratedAttribute]
internal void set_(bool value);
    public sealed virtual bool get_AllowMultipleStatement();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaximumParameter();
    public static DbParameter Clone(DbParameter this, string newName, IPolyProvider providerInfo);
    public sealed virtual string EscapeTableName(string tableName);
    public sealed virtual string EscapeColumnName(string columnName);
}
public class Z.EntityFramework.Extensions.SqlServerCePolyProvider : object {
    [CompilerGeneratedAttribute]
private int ;
    public bool AllowMultipleStatement { get; }
    public int MaximumParameter { get; }
    public sealed virtual bool get_AllowMultipleStatement();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaximumParameter();
    public sealed virtual string EscapeTableName(string tableName);
    public sealed virtual string EscapeColumnName(string columnName);
}
public abstract class Z.EntityFramework.Plus.BaseQueryHookAction : object {
    public abstract virtual string GetKey();
    public abstract virtual Type GetTypeOf();
}
public abstract class Z.EntityFramework.Plus.InterceptorCommandExecutingBuilder : BaseQueryHookAction {
    [CompilerGeneratedAttribute]
private Action`1<DbCommand> ;
    public Action`1<DbCommand> Action { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<DbCommand> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Action`1<DbCommand> value);
}
public class Z.EntityFramework.Plus.InterceptorCommandExecutingBuilder`1 : InterceptorCommandExecutingBuilder {
    public virtual string GetKey();
    public virtual Type GetTypeOf();
}
public static class Z.EntityFramework.Plus.PublicMethodForEFPlus : object {
    public static IQueryable`1<T> InterceptorCommandExecuting(IQueryable`1<T> this, Action`1<DbCommand> action);
    public static IQueryable`1<T> ReplaceAllLeftJoinByInnerJoin(IQueryable`1<T> this);
    public static IQueryable`1<T> WithHint(IQueryable`1<T> this, string hint, Type[] types);
    public static IQueryable`1<T> WithHint(IQueryable`1<T> this, SqlServerTableHintFlags hint, Type[] types);
    public static IQueryable`1<T> TemporalTableAsOf(IQueryable`1<T> this, DateTime dateTime, Type[] types);
    public static IQueryable`1<T> TemporalTableFromTo(IQueryable`1<T> this, DateTime startDateTime, DateTime endDateTime, Type[] types);
    public static IQueryable`1<T> TemporalTableBetween(IQueryable`1<T> this, DateTime startDateTime, DateTime endDateTime, Type[] types);
    public static IQueryable`1<T> TemporalTableContainedIn(IQueryable`1<T> this, DateTime startDateTime, DateTime endDateTime, Type[] types);
    public static IQueryable`1<T> TemporalTableAll(IQueryable`1<T> this, Type[] types);
}
public class Z.EntityFramework.Plus.QueryHookCommandInterceptor : DbCommandInterceptor {
    public virtual void ReaderExecuting(DbCommand command, DbCommandInterceptionContext`1<DbDataReader> interceptionContext);
    public static void Interceptor(DbCommand command, DbContext context, bool isNotCTE);
    public static string ParseParameter(DbCommand command);
    public static void ApplyHook(DbCommand command, DbContext context, string hook, bool isNotCTE);
}
public class Z.EntityFramework.Plus.QueryHookCommandTableBuilder : object {
    public string SchemaName;
    public string TableName;
    public TemporalTableBuilder TemporalTableBuilder;
    public TableHintBuilder TableHintBuilder;
    public WhereBulkContainsBuilder WhereBulkContainsBuilder;
    public InterceptorCommandExecutingBuilder InterceptorCommandExecutingBuilder;
    public SchemaEntityType SchemaEntityType;
    public string GetReplaceBy(string schemaTableSectionName, string asAliasSectionName, DbCommand command);
}
public static class Z.EntityFramework.Plus.QueryHookManager : object {
    private static DbCommandInterceptor ;
    public static string HookPrefix;
    [CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<DbContext, ConcurrentDictionary`2<string, BaseQueryHookAction>> ;
    public static ConditionalWeakTable`2<DbContext, ConcurrentDictionary`2<string, BaseQueryHookAction>> CacheWeakHookActionDictionary { get; public set; }
    private static QueryHookManager();
    [CompilerGeneratedAttribute]
public static ConditionalWeakTable`2<DbContext, ConcurrentDictionary`2<string, BaseQueryHookAction>> get_CacheWeakHookActionDictionary();
    [CompilerGeneratedAttribute]
public static void set_CacheWeakHookActionDictionary(ConditionalWeakTable`2<DbContext, ConcurrentDictionary`2<string, BaseQueryHookAction>> value);
    public static ConcurrentDictionary`2<string, BaseQueryHookAction> AddOrGetHookActionDictionary(DbContext context);
    public static IQueryable`1<T> Hook(IQueryable`1<T> query, BaseQueryHookAction hookAction);
}
public class Z.EntityFramework.Plus.QueryHookVisitor : ExpressionVisitor {
    public string CurrentHook;
    protected virtual Expression VisitBinary(BinaryExpression node);
}
[FlagsAttribute]
public enum Z.EntityFramework.Plus.SqlServerTableHintFlags : Enum {
    public int value__;
    public static SqlServerTableHintFlags NONE;
    public static SqlServerTableHintFlags FORCESCAN;
    public static SqlServerTableHintFlags FORCESEEK;
    public static SqlServerTableHintFlags HOLDLOCK;
    public static SqlServerTableHintFlags NOLOCK;
    public static SqlServerTableHintFlags NOWAIT;
    public static SqlServerTableHintFlags PAGLOCK;
    public static SqlServerTableHintFlags READCOMMITTED;
    public static SqlServerTableHintFlags READCOMMITTEDLOCK;
    public static SqlServerTableHintFlags READPAST;
    public static SqlServerTableHintFlags READUNCOMMITTED;
    public static SqlServerTableHintFlags REPEATABLEREAD;
    public static SqlServerTableHintFlags ROWLOCK;
    public static SqlServerTableHintFlags SERIALIZABLE;
    public static SqlServerTableHintFlags SNAPSHOT;
    public static SqlServerTableHintFlags TABLOCK;
    public static SqlServerTableHintFlags TABLOCKX;
    public static SqlServerTableHintFlags UPDLOCK;
    public static SqlServerTableHintFlags XLOCK;
}
public abstract class Z.EntityFramework.Plus.TableHintBuilder : BaseQueryHookAction {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private SqlServerTableHintFlags ;
    public string Hint { get; public set; }
    public SqlServerTableHintFlags SqlServerTableHint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(string value);
    [CompilerGeneratedAttribute]
public SqlServerTableHintFlags get_SqlServerTableHint();
    [CompilerGeneratedAttribute]
public void set_SqlServerTableHint(SqlServerTableHintFlags value);
}
public class Z.EntityFramework.Plus.TableHintBuilder`1 : TableHintBuilder {
    public virtual string GetKey();
    public virtual Type GetTypeOf();
}
public abstract class Z.EntityFramework.Plus.TemporalTableBuilder : BaseQueryHookAction {
    [CompilerGeneratedAttribute]
private TemporalTableFilterKind ;
    [CompilerGeneratedAttribute]
private DateTime ;
    [CompilerGeneratedAttribute]
private DateTime ;
    public TemporalTableFilterKind FilterKind { get; public set; }
    public DateTime StartDateTime { get; public set; }
    public DateTime EndDateTime { get; public set; }
    [CompilerGeneratedAttribute]
public TemporalTableFilterKind get_FilterKind();
    [CompilerGeneratedAttribute]
public void set_FilterKind(TemporalTableFilterKind value);
    [CompilerGeneratedAttribute]
public DateTime get_StartDateTime();
    [CompilerGeneratedAttribute]
public void set_StartDateTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDateTime();
    [CompilerGeneratedAttribute]
public void set_EndDateTime(DateTime value);
}
public class Z.EntityFramework.Plus.TemporalTableBuilder`1 : TemporalTableBuilder {
    public virtual string GetKey();
    public virtual Type GetTypeOf();
}
public enum Z.EntityFramework.Plus.TemporalTableFilterKind : Enum {
    public int value__;
    public static TemporalTableFilterKind AsOf;
    public static TemporalTableFilterKind FromTo;
    public static TemporalTableFilterKind Between;
    public static TemporalTableFilterKind ContainedIn;
    public static TemporalTableFilterKind All;
}
public static class Z.EntityFramework.Plus.TemporalTableManager : object {
    [CompilerGeneratedAttribute]
private static bool ;
    public static bool DisableDateTimeParameter { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_DisableDateTimeParameter();
    [CompilerGeneratedAttribute]
public static void set_DisableDateTimeParameter(bool value);
}
public abstract class Z.EntityFramework.Plus.WhereBulkContainsBuilder : BaseQueryHookAction {
    internal bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private Guid ;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> ;
    [CompilerGeneratedAttribute]
private LambdaExpression ;
    [CompilerGeneratedAttribute]
private List`1<string> ;
    public static bool CheckForNullableKeyValue { get; public set; }
    public bool IsNotContains { get; public set; }
    public bool KillMeAfterUse { get; public set; }
    public Guid internalKey { get; public set; }
    public IEnumerable`1<object> Entities { get; public set; }
    public LambdaExpression KeyExpression { get; public set; }
    public List`1<string> KeyNames { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_CheckForNullableKeyValue();
    [CompilerGeneratedAttribute]
public static void set_CheckForNullableKeyValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNotContains();
    [CompilerGeneratedAttribute]
public void set_IsNotContains(bool value);
    [CompilerGeneratedAttribute]
public bool get_KillMeAfterUse();
    [CompilerGeneratedAttribute]
public void set_KillMeAfterUse(bool value);
    [CompilerGeneratedAttribute]
public Guid get_internalKey();
    [CompilerGeneratedAttribute]
public void set_internalKey(Guid value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_Entities();
    [CompilerGeneratedAttribute]
public void set_Entities(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public LambdaExpression get_KeyExpression();
    [CompilerGeneratedAttribute]
public void set_KeyExpression(LambdaExpression value);
    [CompilerGeneratedAttribute]
public List`1<string> get_KeyNames();
    [CompilerGeneratedAttribute]
public void set_KeyNames(List`1<string> value);
    public abstract virtual string CommandTextNothingBuilder(string schema, string tableName, string commandText, bool isLast, bool isNotCTE, Tuple`2<string, string> temporalName);
    public abstract virtual string CommandTextBuilder(string schema, string tableName, string nameTempTable, List`1<string> KeyNamesBD, string commandText, bool isLast, bool isNotCTE, Tuple`2<string, string> temporalName);
    public abstract virtual string WhereBulkContains(DbContext context, string commandText, List`1<QueryHookCommandTableBuilder> commandTableBuilders, bool isNotCTE, bool isNotSelectOnly);
}
public class Z.EntityFramework.Plus.WhereBulkContainsBuilder`1 : WhereBulkContainsBuilder {
    internal static string ;
    public static string TemplateCommandTextBuilderIsNotContains;
    public static string TemplateCommandTextBuilder;
    public static string TemplateCommandTextNothingBuilder;
    public static string TemplateCommandTextBuilderIsNotContainsTemporal;
    public static string TemplateCommandTextBuilderTemporal;
    public static string TemplateCommandTextNothingBuilderTemporal;
    public virtual string GetKey();
    public virtual Type GetTypeOf();
    public static string CommandTextBuilderPostgreSQL(string schema, string tableName, string nameTempTable, List`1<string> KeyNamesBD, string commandText, bool isLast, bool isNotContains, bool addZZZIndex);
    public string CommandTextNothingBuilderPostgreSQL(string schema, string tableName, string commandText, bool isLast);
    public static string CommandTextBuilderSQL(string schema, string tableName, string nameTempTable, List`1<string> KeyNamesBD, string commandText, bool isLast, bool isNotContains, bool isNotCTE, bool addZZZIndex, Tuple`2<string, string> temporalName);
    public string CommandTextNothingBuilderSQL(string schema, string tableName, string commandText, bool isLast, bool isNotCTE, Tuple`2<string, string> temporalName);
    public virtual string CommandTextBuilder(string schema, string tableName, string nameTempTable, List`1<string> KeyNamesBD, string commandText, bool isLast, bool isNotCTE, Tuple`2<string, string> temporalName);
    public virtual string CommandTextNothingBuilder(string schema, string tableName, string commandText, bool isLast, bool isNotCTE, Tuple`2<string, string> temporalName);
    public static bool IsPrimitiveForMe(Type type);
    public static StringBuilder BulkCopy(DbContext context, List`1<string> keyNames, IEnumerable`1<object> entities, Type type2);
    public void SetProvider(DbContext context);
    public virtual string WhereBulkContains(DbContext context, string commandText, List`1<QueryHookCommandTableBuilder> commandTableBuilders, bool isNotCTE, bool isNotSelectOnly);
    internal static void (List`1<string> , LambdaExpression , List`1<string> , List`1<string> , SchemaEntityType );
}
public class Z.Internal.CodeAnalysis.CSharp.TokenInfo : object {
    internal int ;
    public SyntaxKind Kind;
    public StringBuilder ParserText;
    internal string ;
    internal int ;
    internal SyntaxKind ;
    public string Value;
    internal TokenInfo(SyntaxKind , string , StringBuilder , int , int );
    public virtual string ToString();
}
public enum Z.Internal.CodeAnalysis.SyntaxKind : Enum {
    public int value__;
    public static SyntaxKind TildeToken;
    public static SyntaxKind ExclamationToken;
    public static SyntaxKind DollarToken;
    public static SyntaxKind PercentToken;
    public static SyntaxKind CaretToken;
    public static SyntaxKind AmpersandToken;
    public static SyntaxKind AsteriskToken;
    public static SyntaxKind OpenParenToken;
    public static SyntaxKind CloseParenToken;
    public static SyntaxKind MinusToken;
    public static SyntaxKind PlusToken;
    public static SyntaxKind EqualsToken;
    public static SyntaxKind OpenBraceToken;
    public static SyntaxKind CloseBraceToken;
    public static SyntaxKind OpenBracketToken;
    public static SyntaxKind CloseBracketToken;
    public static SyntaxKind BarToken;
    public static SyntaxKind BackslashToken;
    public static SyntaxKind ColonToken;
    public static SyntaxKind SemicolonToken;
    public static SyntaxKind DoubleQuoteToken;
    public static SyntaxKind SingleQuoteToken;
    public static SyntaxKind LessThanToken;
    public static SyntaxKind CommaToken;
    public static SyntaxKind GreaterThanToken;
    public static SyntaxKind DotToken;
    public static SyntaxKind QuestionToken;
    public static SyntaxKind HashToken;
    public static SyntaxKind SlashToken;
    public static SyntaxKind BoolKeyword;
    public static SyntaxKind ByteKeyword;
    public static SyntaxKind SByteKeyword;
    public static SyntaxKind ShortKeyword;
    public static SyntaxKind UShortKeyword;
    public static SyntaxKind IntKeyword;
    public static SyntaxKind UIntKeyword;
    public static SyntaxKind LongKeyword;
    public static SyntaxKind ULongKeyword;
    public static SyntaxKind DoubleKeyword;
    public static SyntaxKind FloatKeyword;
    public static SyntaxKind DecimalKeyword;
    public static SyntaxKind StringKeyword;
    public static SyntaxKind CharKeyword;
    public static SyntaxKind VoidKeyword;
    public static SyntaxKind ObjectKeyword;
    public static SyntaxKind TypeOfKeyword;
    public static SyntaxKind SizeOfKeyword;
    public static SyntaxKind NullKeyword;
    public static SyntaxKind TrueKeyword;
    public static SyntaxKind FalseKeyword;
    public static SyntaxKind IfKeyword;
    public static SyntaxKind ElseKeyword;
    public static SyntaxKind WhileKeyword;
    public static SyntaxKind ForKeyword;
    public static SyntaxKind ForEachKeyword;
    public static SyntaxKind DoKeyword;
    public static SyntaxKind SwitchKeyword;
    public static SyntaxKind CaseKeyword;
    public static SyntaxKind DefaultKeyword;
    public static SyntaxKind TryKeyword;
    public static SyntaxKind CatchKeyword;
    public static SyntaxKind FinallyKeyword;
    public static SyntaxKind LockKeyword;
    public static SyntaxKind GotoKeyword;
    public static SyntaxKind BreakKeyword;
    public static SyntaxKind ContinueKeyword;
    public static SyntaxKind ReturnKeyword;
    public static SyntaxKind ThrowKeyword;
    public static SyntaxKind PublicKeyword;
    public static SyntaxKind PrivateKeyword;
    public static SyntaxKind InternalKeyword;
    public static SyntaxKind ProtectedKeyword;
    public static SyntaxKind StaticKeyword;
    public static SyntaxKind ReadOnlyKeyword;
    public static SyntaxKind SealedKeyword;
    public static SyntaxKind ConstKeyword;
    public static SyntaxKind FixedKeyword;
    public static SyntaxKind StackAllocKeyword;
    public static SyntaxKind VolatileKeyword;
    public static SyntaxKind NewKeyword;
    public static SyntaxKind OverrideKeyword;
    public static SyntaxKind AbstractKeyword;
    public static SyntaxKind VirtualKeyword;
    public static SyntaxKind EventKeyword;
    public static SyntaxKind ExternKeyword;
    public static SyntaxKind RefKeyword;
    public static SyntaxKind OutKeyword;
    public static SyntaxKind InKeyword;
    public static SyntaxKind IsKeyword;
    public static SyntaxKind AsKeyword;
    public static SyntaxKind ParamsKeyword;
    public static SyntaxKind ArgListKeyword;
    public static SyntaxKind MakeRefKeyword;
    public static SyntaxKind RefTypeKeyword;
    public static SyntaxKind RefValueKeyword;
    public static SyntaxKind ThisKeyword;
    public static SyntaxKind BaseKeyword;
    public static SyntaxKind NamespaceKeyword;
    public static SyntaxKind UsingKeyword;
    public static SyntaxKind ClassKeyword;
    public static SyntaxKind StructKeyword;
    public static SyntaxKind InterfaceKeyword;
    public static SyntaxKind EnumKeyword;
    public static SyntaxKind DelegateKeyword;
    public static SyntaxKind CheckedKeyword;
    public static SyntaxKind UncheckedKeyword;
    public static SyntaxKind UnsafeKeyword;
    public static SyntaxKind OperatorKeyword;
    public static SyntaxKind ExplicitKeyword;
    public static SyntaxKind ImplicitKeyword;
    public static SyntaxKind NameofKeyword;
    public static SyntaxKind AsyncKeyword;
    public static SyntaxKind AwaitKeyword;
    public static SyntaxKind OrKeyword;
    public static SyntaxKind AndKeyword;
    public static SyntaxKind NotKeyword;
    public static SyntaxKind DefinedKeyword;
    public static SyntaxKind EndOfLineTrivia;
    public static SyntaxKind WhitespaceTrivia;
    public static SyntaxKind SingleLineCommentTrivia;
    public static SyntaxKind MultiLineCommentTrivia;
    public static SyntaxKind DocumentationCommentExteriorTrivia;
    public static SyntaxKind SingleLineDocumentationCommentTrivia;
    public static SyntaxKind MultiLineDocumentationCommentTrivia;
    public static SyntaxKind DisabledTextTrivia;
    public static SyntaxKind PreprocessingMessageTrivia;
    public static SyntaxKind IfDirectiveTrivia;
    public static SyntaxKind ElifDirectiveTrivia;
    public static SyntaxKind ElseDirectiveTrivia;
    public static SyntaxKind EndIfDirectiveTrivia;
    public static SyntaxKind RegionDirectiveTrivia;
    public static SyntaxKind EndRegionDirectiveTrivia;
    public static SyntaxKind DefineDirectiveTrivia;
    public static SyntaxKind UndefDirectiveTrivia;
    public static SyntaxKind ErrorDirectiveTrivia;
    public static SyntaxKind WarningDirectiveTrivia;
    public static SyntaxKind LineDirectiveTrivia;
    public static SyntaxKind PragmaWarningDirectiveTrivia;
    public static SyntaxKind PragmaChecksumDirectiveTrivia;
    public static SyntaxKind ReferenceDirectiveTrivia;
    public static SyntaxKind BadDirectiveTrivia;
    public static SyntaxKind SkippedTokensTrivia;
    public static SyntaxKind AddExpression;
    public static SyntaxKind SubtractExpression;
    public static SyntaxKind MultiplyExpression;
    public static SyntaxKind DivideExpression;
    public static SyntaxKind ModuloExpression;
    public static SyntaxKind LeftShiftExpression;
    public static SyntaxKind RightShiftExpression;
    public static SyntaxKind LogicalOrExpression;
    public static SyntaxKind LogicalAndExpression;
    public static SyntaxKind BitwiseOrExpression;
    public static SyntaxKind BitwiseAndExpression;
    public static SyntaxKind ExclusiveOrExpression;
    public static SyntaxKind EqualsExpression;
    public static SyntaxKind NotEqualsExpression;
    public static SyntaxKind LessThanExpression;
    public static SyntaxKind LessThanOrEqualExpression;
    public static SyntaxKind GreaterThanExpression;
    public static SyntaxKind GreaterThanOrEqualExpression;
    public static SyntaxKind IsExpression;
    public static SyntaxKind AsExpression;
    public static SyntaxKind CoalesceExpression;
    public static SyntaxKind SimpleMemberAccessExpression;
    public static SyntaxKind PointerMemberAccessExpression;
    public static SyntaxKind ConditionalAccessExpression;
    public static SyntaxKind ParenthesizedExpression;
    public static SyntaxKind ConditionalExpression;
    public static SyntaxKind InvocationExpression;
    public static SyntaxKind ElementAccessExpression;
    public static SyntaxKind ArgumentList;
    public static SyntaxKind BracketedArgumentList;
    public static SyntaxKind Argument;
    public static SyntaxKind NameColon;
    public static SyntaxKind CastExpression;
    public static SyntaxKind AnonymousMethodExpression;
    public static SyntaxKind SimpleLambdaExpression;
    public static SyntaxKind ParenthesizedLambdaExpression;
    public static SyntaxKind ObjectInitializerExpression;
    public static SyntaxKind CollectionInitializerExpression;
    public static SyntaxKind ArrayInitializerExpression;
    public static SyntaxKind AnonymousObjectMemberDeclarator;
    public static SyntaxKind ComplexElementInitializerExpression;
    public static SyntaxKind ObjectCreationExpression;
    public static SyntaxKind AnonymousObjectCreationExpression;
    public static SyntaxKind ArrayCreationExpression;
    public static SyntaxKind ImplicitArrayCreationExpression;
    public static SyntaxKind StackAllocArrayCreationExpression;
    public static SyntaxKind OmittedArraySizeExpression;
    public static SyntaxKind InterpolatedStringExpression;
    public static SyntaxKind ImplicitElementAccess;
    public static SyntaxKind SimpleAssignmentExpression;
    public static SyntaxKind AddAssignmentExpression;
    public static SyntaxKind SubtractAssignmentExpression;
    public static SyntaxKind MultiplyAssignmentExpression;
    public static SyntaxKind DivideAssignmentExpression;
    public static SyntaxKind ModuloAssignmentExpression;
    public static SyntaxKind AndAssignmentExpression;
    public static SyntaxKind ExclusiveOrAssignmentExpression;
    public static SyntaxKind OrAssignmentExpression;
    public static SyntaxKind LeftShiftAssignmentExpression;
    public static SyntaxKind RightShiftAssignmentExpression;
    public static SyntaxKind UnaryPlusExpression;
    public static SyntaxKind UnaryMinusExpression;
    public static SyntaxKind BitwiseNotExpression;
    public static SyntaxKind LogicalNotExpression;
    public static SyntaxKind PreIncrementExpression;
    public static SyntaxKind PreDecrementExpression;
    public static SyntaxKind PointerIndirectionExpression;
    public static SyntaxKind AddressOfExpression;
    public static SyntaxKind PostIncrementExpression;
    public static SyntaxKind PostDecrementExpression;
    public static SyntaxKind AwaitExpression;
    public static SyntaxKind TypeOfExpression;
    public static SyntaxKind SizeOfExpression;
    public static SyntaxKind CheckedExpression;
    public static SyntaxKind UncheckedExpression;
    public static SyntaxKind DefaultExpression;
    public static SyntaxKind MakeRefExpression;
    public static SyntaxKind RefValueExpression;
    public static SyntaxKind RefTypeExpression;
    public static SyntaxKind CheckedFactory;
    public static SyntaxKind TryFactory;
    public static SyntaxKind UncheckedFactory;
    public static SyntaxKind DateTimeExpression;
    public static SyntaxKind TimeExpression;
    public static SyntaxKind Break_All;
    public static SyntaxKind Break_Outer;
    public static SyntaxKind Checked_Null;
    public static SyntaxKind AddMethodKeyword;
    public static SyntaxKind ExclusiveOrAssignmentAlternativeExpression;
    public static SyntaxKind ExclusiveOrAlternativeExpression;
    public static SyntaxKind ExponentExpression;
    public static SyntaxKind ExponentAssignmentExpression;
    public static SyntaxKind NotEqualsAlternativeExpression;
    public static SyntaxKind Hexadecimal;
    public static SyntaxKind Literal;
    public static SyntaxKind Number;
    public static SyntaxKind Operator;
    public static SyntaxKind String;
    public static SyntaxKind Trivia;
    public static SyntaxKind Unicode;
    public static SyntaxKind Real;
    public static SyntaxKind Char;
    public static SyntaxKind Root;
    public static SyntaxKind AnonymousBodyContainer;
    public static SyntaxKind BinaryContainer;
    public static SyntaxKind BodyContainer;
    public static SyntaxKind ExpressionContainer;
    public static SyntaxKind GroupArrayContainer;
    public static SyntaxKind GroupContainer;
    public static SyntaxKind RootContainer;
    public static SyntaxKind UnaryContainer;
    public static SyntaxKind NumberU;
    public static SyntaxKind NumberL;
    public static SyntaxKind NumberUL;
    public static SyntaxKind NumberF;
    public static SyntaxKind NumberD;
    public static SyntaxKind NumberM;
    public static SyntaxKind MethodAccessExpression;
    public static SyntaxKind RegularStringSingleQuote;
    public static SyntaxKind RegularStringDoubleQuote;
    public static SyntaxKind VerbatimStringSingleQuote;
    public static SyntaxKind VerbatimStringDoubleQuote;
    public static SyntaxKind InterpolatedStringSingleQuote;
    public static SyntaxKind InterpolatedStringDoubleQuote;
    public static SyntaxKind MultiInterpolatedStringSingleQuote;
    public static SyntaxKind MultiInterpolatedStringDoubleQuote;
    public static SyntaxKind InvalidVerbatimInterpolated;
    public static SyntaxKind CheckedGroupExpression;
    public static SyntaxKind CheckedBodyExpression;
    public static SyntaxKind CheckedNullExpression;
    public static SyntaxKind UncheckedGroupExpression;
    public static SyntaxKind UncheckedBodyExpression;
    public static SyntaxKind GenericTypeExpression;
    public static SyntaxKind PlusPlusToken;
    public static SyntaxKind MinusMinusToken;
    public static SyntaxKind NullableTypeExpression;
    public static SyntaxKind ConditionalExpressionOrNullableTypeExpression;
    public static SyntaxKind ColonColonToken;
    public static SyntaxKind MinusGreaterThanToken;
    public static SyntaxKind TryExpression;
    public static SyntaxKind TryCompileExpression;
    public static SyntaxKind FactorialExpression;
    public static SyntaxKind DisposeTypeOrBitwiseNotExpression;
    public static SyntaxKind BreakAllKeyword;
    public static SyntaxKind BreakOuterKeyword;
    public static SyntaxKind IIFKeyword;
    public static SyntaxKind RangeArrayExpression;
    public static SyntaxKind MemberAccessAlternativeExpression;
    public static SyntaxKind ConditionalMemberAccessExpression;
    public static SyntaxKind ConditionalMethodAccessExpression;
    public static SyntaxKind ConditionalMethodGenericAccessExpression;
    public static SyntaxKind ConditionalIndexAccessExpression;
    public static SyntaxKind IndexAccessExpression;
    public static SyntaxKind MethodExpression;
    public static SyntaxKind CommaContainer;
    public static SyntaxKind GroupParameterContainer;
    public static SyntaxKind ParameterExpression;
    public static SyntaxKind BodyExpression;
    public static SyntaxKind MethodVariableOrStaticMemberAccessExpression;
    public static SyntaxKind AnonymousBodyOrParameterExpression;
    public static SyntaxKind HashHashToken;
    public static SyntaxKind None;
    public static SyntaxKind MethodGenericAccessExpression;
    public static SyntaxKind ResolvedExpression;
    public static SyntaxKind PendingExpression;
    public static SyntaxKind IsNotKeyword;
}
public class Z.Internal.Compiler.Shared.EvalException : Exception {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private string ;
    public string OriginalCode { get; public set; }
    public string ParsedCode { get; public set; }
    public string Token { get; public set; }
    public int StartPosition { get; public set; }
    public string NearText { get; public set; }
    public EvalException(string message);
    public EvalException(string message, Exception innerException);
    public EvalException(EvalException exception, Exception innerException);
    internal static EvalException (string , EvalException );
    [CompilerGeneratedAttribute]
public string get_OriginalCode();
    [CompilerGeneratedAttribute]
public void set_OriginalCode(string value);
    [CompilerGeneratedAttribute]
public string get_ParsedCode();
    [CompilerGeneratedAttribute]
public void set_ParsedCode(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public string get_NearText();
    [CompilerGeneratedAttribute]
public void set_NearText(string value);
}
[ExtensionAttribute]
internal static class  : object {
    public static Lazy`1<Dictionary`2<string, Type>> ;
    public static Lazy`1<Dictionary`2<Type, DbType>> ;
    private static ();
    [ExtensionAttribute]
public static  (Dictionary`2<, > this,  );
    [ExtensionAttribute]
public static string (string , BulkOperation );
    [ExtensionAttribute]
public static string (string this, string );
    [ExtensionAttribute]
public static Type (string , PrimitiveType );
    [ExtensionAttribute]
public static DbType (Type );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static Action`1<BulkOperation> (Action`1<BulkOperation> this, CancellationToken );
    [ExtensionAttribute]
public static Action`1<EntityBulkOperation`1<>> (Action`1<EntityBulkOperation`1<>> this, CancellationToken );
    [ExtensionAttribute]
internal static Action`1<BulkOperation`1<>> (Action`1<BulkOperation`1<>> this);
    [ExtensionAttribute]
internal static Action`1<BulkOperation> (Action`1<BulkOperation> this);
    [ExtensionAttribute]
internal static Action`1<BulkOperation`1<>> (Action`1<BulkOperation`1<>> this);
    [ExtensionAttribute]
internal static Action`1<BulkOperation> (Action`1<BulkOperation> this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static Tuple`2<string, DbParameterCollection> (ObjectQuery , bool );
    [ExtensionAttribute]
internal static IEnumerator`1<> (ObjectQuery , DbDataReader );
}
[ExtensionAttribute]
internal static class  : object {
    internal static Func`2<ObjectStateEntry, bool> ;
    [ExtensionAttribute]
internal static bool (ObjectStateEntry this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr, bool recursif);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static IEnumerable`1<> (IDataReader this);
    [AsyncStateMachineAttribute("/`1")]
[ExtensionAttribute]
internal static Task`1<IEnumerable`1<>> (DbDataReader this, CancellationToken );
    [ExtensionAttribute]
internal static IEnumerable`1<> (IDataReader this, IEnumerable`1<Tuple`2<string, string>> );
    [AsyncStateMachineAttribute("/`1")]
[ExtensionAttribute]
internal static Task`1<IEnumerable`1<>> (DbDataReader this, SchemaEntityType , CancellationToken );
    [ExtensionAttribute]
internal static IEnumerable`1<> (IDataReader this, SchemaEntityType );
    internal static void ( , IDataReader , SchemaEntityType );
    [ExtensionAttribute]
internal static  (IDataReader this);
    [ExtensionAttribute]
internal static  (IDataReader this, IEnumerable`1<Tuple`2<string, string>> );
    [ExtensionAttribute]
internal static  (IDataReader this, SchemaEntityType );
    [ExtensionAttribute]
internal static object (IDataReader this);
    [ExtensionAttribute]
internal static IEnumerable`1<object> (IDataReader this);
    [AsyncStateMachineAttribute("/")]
[ExtensionAttribute]
internal static Task`1<IEnumerable`1<object>> (DbDataReader this, CancellationToken );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static Dictionary`2<, > (IEnumerable`1<> , Func`2<, > , string );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static  (object this);
    [ExtensionAttribute]
internal static  (object this);
    [ExtensionAttribute]
internal static object (object this, Type );
    [ExtensionAttribute]
public static List`1<> (IEnumerable`1<> this, int );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static  (string this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static XElement (XElement );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static MemberInfo[] (LambdaExpression this);
    [ExtensionAttribute]
internal static MemberInfo (LambdaExpression this);
    [ExtensionAttribute]
internal static  (LambdaExpression this);
    [ExtensionAttribute]
internal static [] (LambdaExpression this);
    [ExtensionAttribute]
internal static  (LambdaExpression this);
    [ExtensionAttribute]
internal static IEnumerable`1<> (LambdaExpression this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static Expression (Expression this);
    [ExtensionAttribute]
internal static MemberInfo (Expression this, ParameterExpression );
    [ExtensionAttribute]
internal static  (Expression this, ParameterExpression );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static SchemaEntityType (DbContext this, string );
    [ExtensionAttribute]
internal static DbModel (DbContext this);
    [ExtensionAttribute]
internal static string (DbContext this);
    [ExtensionAttribute]
internal static Stream (DbContext this);
    [ExtensionAttribute]
internal static string (DbContext this, List`1<string> , string );
    [ExtensionAttribute]
internal static string (DbContext this, string );
    public static void (DbModel , XDocument );
    internal static void (DbContext , DbModel , XDocument );
    public static void (DbModel , XDocument );
    internal static void (DbContext , DbModel , XDocument );
    public static void (DbModel , XDocument );
    internal static void (DbContext , DbModel , XDocument );
    [ExtensionAttribute]
internal static DbModel (DbContext this);
    [ExtensionAttribute]
internal static string (DbContext this);
    [ExtensionAttribute]
internal static Stream (DbContext this);
    [ExtensionAttribute]
internal static string (DbContext this, List`1<string> , string );
    [ExtensionAttribute]
internal static string (DbContext this, string );
    [ExtensionAttribute]
internal static string (DbContext this);
    [ExtensionAttribute]
internal static List`1<string> (DbContext this);
    [ExtensionAttribute]
internal static List`1<string> (DbContext this);
    [ExtensionAttribute]
internal static string (DbContext this);
    [ExtensionAttribute]
internal static Stream (DbContext this);
    [ExtensionAttribute]
internal static string (DbContext this, List`1<string> , string );
    [ExtensionAttribute]
internal static string (DbContext this, string );
    [ExtensionAttribute]
internal static bool (DbContext this, string );
}
[ExtensionAttribute]
internal static class  : object {
    internal static ConcurrentDictionary`2<string, List`1<SqlBulkCopyColumnMapping>> ;
    private static ();
    [ExtensionAttribute]
internal static XDocument (DbContext );
    [ExtensionAttribute]
internal static IEnumerable`1<SqlBulkCopyColumnMapping> (DbContext , string );
}
[ExtensionAttribute]
internal static class  : object {
    [AsyncStateMachineAttribute("/")]
[ExtensionAttribute]
internal static Task`1<int> (DbContext , DbCommand , CancellationToken );
    [ExtensionAttribute]
internal static int (DbContext , DbCommand );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static DataSet (SqlCommand this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static Expression (Expression , Func`2<, Expression> );
    [ExtensionAttribute]
public static  ( , Func`2<, Expression> );
    [ExtensionAttribute]
public static Expression`1<> (Expression`1<> , Func`2<, Expression> );
}
internal class `1 : ExpressionVisitor {
    private Func`2<, Expression> ;
    public `1(Func`2<, Expression> );
    public virtual Expression Visit(Expression );
    public static Expression (Expression , Func`2<, Expression> );
    public static Expression`1<> (Expression`1<> , Func`2<, Expression> );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static IEnumerable`1<DataRow> (DataTable this, DataRowState );
    [ExtensionAttribute]
public static SqlDbType (int this);
    [ExtensionAttribute]
public static SqlDbType (string this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static object (object this, string );
    [ExtensionAttribute]
internal static object (object this, string );
    [ExtensionAttribute]
internal static  (object this, string );
    [ExtensionAttribute]
internal static object (object this, string );
    [ExtensionAttribute]
internal static  (object this, string );
    [ExtensionAttribute]
internal static bool (Type this);
    [ExtensionAttribute]
internal static bool (object this);
    [ExtensionAttribute]
internal static object (object this, string , Object[] );
    [ExtensionAttribute]
internal static object (object this, int );
    [ExtensionAttribute]
internal static bool (object this, string );
    [ExtensionAttribute]
internal static bool (object this, string );
    [ExtensionAttribute]
internal static PropertyInfo (object this, string );
    [ExtensionAttribute]
internal static FieldInfo (object this, string );
}
internal static class  : object {
    public static List`1<Type> (IEnumerable`1<Assembly> );
}
internal class  : object {
    public static List`1<TokenInfo> (List`1<TokenInfo> , string );
    public static string (List`1<TokenInfo> , string );
    public static int (List`1<TokenInfo> , string );
}
internal static class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static EvalException (string , string , TokenInfo );
    internal static EvalException (string , TokenInfo );
    internal static EvalException (string , TokenInfo , string );
    internal static EvalException (string , Exception , TokenInfo );
    internal static EvalException (string , StringBuilder , int );
    internal static EvalException (string , StringBuilder , string , int , Exception );
}
[ExtensionAttribute]
internal static class  : object {
    internal static Dictionary`2<string, string> ;
    private static ();
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int , int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , bool , bool );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , bool );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (TokenInfo , int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
}
internal class  : object {
    internal static Dictionary`2<string, SyntaxKind> ;
    private static ();
    internal static List`1<TokenInfo> (string );
    internal static IEnumerable`1<TokenInfo> (StringBuilder , bool );
    internal static IEnumerable`1<TokenInfo> (StringBuilder , TokenInfo& );
}
internal static class  : object {
    [CompilerGeneratedAttribute]
private static RegexOptions ;
    public static RegexOptions  { get; }
    private static ();
    [CompilerGeneratedAttribute]
public static RegexOptions get_();
}
internal static class  : object {
    private static Lazy`1<> ;
    public static   { get; }
    private static ();
    public static  get_();
    private static  ();
}
internal class  : object {
    private List`1<> ;
    private List`1<> ;
    private List`1<string> ;
    private Regex ;
    public void (string , string , bool );
    public void (string );
    public void (string , string );
    public void (string , string );
    public string (string , bool );
    public string (string , bool , bool );
    private string (IList`1<> , string , bool );
    private bool (string );
    private string (string , string );
    private string (string );
    internal static int (int );
}
internal interface  {
    public object InternalAdvanced { get; }
    public abstract virtual object get_InternalAdvanced();
}
internal class `1 : object {
    [CompilerGeneratedAttribute]
private BulkValueConverter`1<> ;
    public BulkValueConverter`1<>  { get; public set; }
    [CompilerGeneratedAttribute]
public BulkValueConverter`1<> get_();
    [CompilerGeneratedAttribute]
public void set_(BulkValueConverter`1<> value);
    public sealed virtual object ConvertFromProvider(Type destinationType, object value);
    public sealed virtual object ConvertToProvider(object value);
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  : object {
    internal static bool ;
    private static ();
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void (DataTable );
    public virtual void ( );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public List`1<Tuple`3<DbCommand, Action`1<DataTable>, int>> (DbConnection , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction ,  , Tuple`3<DbCommand, Action`1<DataTable>, int> );
    public void (DbConnection , DbTransaction ,  , List`1<Tuple`3<DbCommand, Action`1<DataTable>, int>> , bool );
    public void (DbConnection , DbTransaction ,  , List`1<DbCommand> );
    public void (BulkOperation );
    public List`1<Tuple`3<string, Type, object>> (IQueryable );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( );
    public void ( , BulkOperation );
    public bool (List`1<> );
    public bool (List`1<> );
    public Dictionary`2<string, object> (BulkOperation );
    public void (Dictionary`2<string, object> , Type , MemberInitExpression , string );
    public void Execute(List`1<> actions);
    public virtual  ( );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public List`1<Tuple`2<DbCommand, Action`1<DataTable>>> (DbConnection , List`1<> );
    public List`1<Tuple`2<DbCommand, Action`1<DataTable>>> (DbConnection , List`1<> );
    public void (DbConnection , DbTransaction , List`1<> );
    public List`1<DbCommand> (List`1<> , DbConnection );
    [CompilerGeneratedAttribute]
private void ( );
    [CompilerGeneratedAttribute]
private void ( );
}
internal class  :  {
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
    public virtual void ( );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
}
internal class  :  {
}
internal class  :  {
    public virtual void ( );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
}
internal class  :  {
    internal  ;
    public virtual void ( );
    public void (BulkOperation , DataSet );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
    internal void ( , DataSet );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  :  {
    public virtual void ( );
    public void ( , DbConnection , DbTransaction );
    public virtual void ( );
    public bool ( , DbConnection , DbTransaction , int );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation , int );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
}
internal class  :  {
    internal  ;
    internal void ( , DataTable , DataTable );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    public virtual void ( );
    public void ( , DbConnection , DbTransaction );
    public virtual DataSet (DbCommand , BulkOperation , int );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    [AsyncStateMachineAttribute("/")]
public Task`1<int> (DbCommand , BulkOperation , int );
    public virtual void ( );
    public bool ( , DbConnection , DbTransaction , int );
    internal void ( , DataTable );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public string ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public virtual string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , bool , bool );
    public string ( );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
    internal static string (Column , string );
    public string ( );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ( );
    public void ( , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
}
internal class  :  {
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
}
internal class  :  {
}
internal class  :  {
    internal  ;
    public virtual void ( );
    public virtual void ( );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataSet , string );
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    internal void ( , DataSet , string , bool );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public List`1<> ( );
    public List`1<> ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
}
internal class  :  {
    private  ;
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void (DataTable );
    public virtual void ( );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    public virtual void ( );
    public void ( , DbConnection , DbTransaction );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public DataTable (DbCommand , BulkOperation , int );
    public DataTable (DataSet , DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public int (DbCommand , BulkOperation , int );
    public virtual void ( );
    public bool ( , DbConnection , DbTransaction , int );
    internal void ( , DataTable );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , string , bool , bool , bool );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , bool , bool );
    public string ( );
    public string ( );
    public string ( ,  );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    internal static bool (BulkOperation , List`1<> );
    public DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    public static  (BulkOperation , int , DbException , Func`2<int, > );
    internal virtual string (string );
    internal static string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal void (Table , DbDataReader );
    internal string (DbCommand , String[] );
    internal string (DbCommand , String[] );
    internal void (string , Dictionary`2<string, Table> , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal string (string );
    internal virtual string (string , string );
}
internal class  : object {
    public static bool ( );
}
internal class  :  {
    public virtual void ( );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
}
internal class  :  {
}
internal class  :  {
}
internal class  : object {
    internal static string (string , string , string );
}
internal class  : object {
    protected bool ;
    [CompilerGeneratedAttribute]
private DbConnection ;
    public DbConnection Connection { get; public set; }
    [CompilerGeneratedAttribute]
public DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(DbConnection value);
    public virtual void Dispose();
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
    internal static int (int );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public DbConnection  { get; }
    public (BulkOperation );
    public DbConnection get_();
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  :  {
    public (BulkOperation );
}
internal class  : object {
    public static int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal BulkOperation ;
    internal TemporaryTableNameGenerationType ;
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public List`1<> Execute();
    public List`1<> (List`1<> );
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public bool ();
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<List`1<>> (List`1<List`1<>> );
    public List`1<List`1<>> (List`1<List`1<>> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<List`1<>> (List`1<List`1<>> );
    public string (BulkOperation );
    public List`1<List`1<>> (List`1<List`1<>> );
    public List`1<> (List`1<> );
    public bool ();
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
    public List`1<> (List`1<> );
}
internal abstract class  : object {
    internal static string ;
    internal BulkOperation ;
    internal   { get; }
    private static ();
    internal abstract virtual  get_();
    internal abstract virtual Table ();
    internal abstract virtual string ();
    internal abstract virtual List`1<> ();
    internal abstract virtual void (List`1<> );
    internal abstract virtual string (string );
    internal abstract virtual string (string );
    internal abstract virtual void ();
    internal abstract virtual string (string , string );
}
internal class  :  {
    public static MethodInfo ;
    private static ();
    public static object ConvertValueReverse( action, object value, Type type);
    public static object ( , object , Type );
    public static List`1<object> GetAllByPrimaryKeys( action, object effortTable, Type genericType, object transaction);
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal  ( );
    internal void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , DbCommand , string );
    public string ( , DbCommand , string );
    public void ( , DbCommand , List`1<> );
    public string ( , DbCommand , List`1<> , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    internal static int (int );
}
internal class  :  {
    public virtual void ( );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
}
internal class  :  {
    internal static int (int );
}
internal class  :  {
}
internal static class  : object {
    public static DbConnection (DbConnection );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation );
    public virtual int (DbCommand , BulkOperation );
    internal static int (int );
}
internal class  :  {
    internal static int (int );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    internal static int (int );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual void ( );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
}
internal class  :  {
}
internal class  :  {
}
internal static class  : object {
    public static DbConnection (DbConnection );
}
internal class  :  {
    private  ;
    public void (BulkOperation , DbCommand );
    public void (BulkOperation , DbCommand , DataTable );
    public void (BulkOperation , DataTable );
    public void (BulkOperation , DataSet );
    public virtual  ( );
    public DataSet (DbCommand , BulkOperation );
    public DataTable (DbCommand , BulkOperation );
    public int (DbCommand , BulkOperation );
    internal void ( , DbCommand );
    internal void ( , DataSet );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
    internal static int (int );
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual string (string );
    internal virtual string (string );
    internal virtual Table ();
    internal virtual string ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string (string , string );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal static int (int );
}
internal class  :  {
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    public static Dictionary`2<string, int> ;
    internal  ;
    internal  ;
    internal   { get; }
    private static ();
    internal virtual string (string );
    internal virtual string (string );
    public static int (string );
    internal virtual Table ();
    internal void ( , Table , bool );
    internal virtual string ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string (string , string );
}
internal class  :  {
    internal  ;
    public virtual  ( );
    public DbCommand (DbCommand );
    public virtual int (DbCommand , BulkOperation , int );
    internal void ( , DataTable );
    internal void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal virtual string (string );
    internal static string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    internal string (string );
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual void ();
    internal virtual string ();
    internal virtual string (string );
    internal virtual string (string , string );
    public void (Table );
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public int ;
    public string ;
    public string ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand , List`1<> );
    public void ( , DbCommand , bool );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand , List`1<> );
    public void ( , DbCommand , bool );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , bool );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , string );
    public string ( );
    [CompilerGeneratedAttribute]
private string ( , int );
    [CompilerGeneratedAttribute]
private string ( , int );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    public virtual int (DbCommand , BulkOperation , int );
    public virtual  ( );
}
internal class  :  {
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual void ( );
    public virtual void ( , DbConnection , DbTransaction );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
    public virtual bool ( , DbConnection , DbTransaction , int );
    public virtual  ( );
}
internal class  :  {
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    public virtual int (DbCommand , BulkOperation , int );
    public virtual  ( );
}
internal class  :  {
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  :  {
}
internal class  :  {
}
internal class  :  {
    internal  ;
    public DataTable ( , DbCommand );
    public void ( , DbCommand , string );
    public void ( , DbCommand , string );
    public void ( , DbCommand );
    public DataTable ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public DataTable ( , DbCommand );
    public void ( , DbCommand );
    public DataTable ( , DbCommand );
    public DataTable ( , DbCommand );
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public void (BulkOperation , DataSet );
    public virtual  ( );
    public DbCommand (DbCommand );
    public virtual void ( );
    public virtual void ( , DbConnection , DbTransaction );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
    public virtual void ( );
    public virtual bool ( , DbConnection , DbTransaction , int );
    internal void ( , DataTable );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DataTable , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual DbCommand ( , DbCommand );
    public virtual DbCommand ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public void ( , DataTable , DataTable );
    public virtual void ( , DbCommand );
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public virtual DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    public static  (BulkOperation , int , DbException , Func`2<int, > );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal virtual Table ();
    internal virtual void ();
    internal string (string );
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal virtual string (string );
    internal virtual string (string , string );
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    public string ;
    public int ;
    public Action`2<DbParameter, object> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand , string );
    public void ( , DbCommand , string );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( , string , bool , bool );
    public string ( , DbCommand , string , bool );
    public string ( , DbCommand , string , bool );
    public string ( , DbCommand , string , bool );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public void ( , DbCommand );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( , bool , bool );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
    public string ( );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal List`1<Table> ( , Exception , String[] );
    internal virtual Table ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    [CompilerGeneratedAttribute]
private bool (string );
    internal static int (int );
}
internal class  :  {
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    public static  (BulkOperation , int , DbException , Func`2<int, > );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal List`1<Table> ( , String[] );
    internal static void (Table );
    internal int (string );
    internal void (string , Column );
    internal List`1<Table> ( , Exception , List`1<string> , Table , String[] );
    internal virtual Table ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal string (string );
    internal virtual string (string , string );
    [CompilerGeneratedAttribute]
private bool (string );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    public virtual  ( );
    public virtual DataSet (DbCommand , BulkOperation );
    public virtual DataTable (DbCommand , BulkOperation , int );
    public virtual int (DbCommand , BulkOperation , int );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    internal static Dictionary`2<string, DbType> ;
    private  ;
    private  ;
    internal   { get; }
    private static ();
    public static DbType (string );
    internal virtual Table ();
    internal static Table (bool , BulkOperation );
    internal static  (bool , BulkOperation );
    private static bool ( , string );
    internal virtual string ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
}
internal class  :  {
}
internal class  :  {
    internal  ;
    internal  ;
    internal   { get; }
    public DbDataReader (DbCommand , CommandBehavior , BulkOperation , int );
    internal virtual string (string );
    internal virtual string (string );
    internal Table (bool , String[] );
    internal string (String[] );
    internal virtual Table ();
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal string (string );
    internal virtual string (string , string );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string (string );
    internal virtual string (string );
    internal static string (string );
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal virtual string (string , string );
}
internal class  :  {
    public void (BulkOperation );
    public void ( , BulkOperation );
    public void (BulkOperation , DataTable );
    public virtual  ( );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal void ( , DbCommand );
    protected internal  ( );
    internal void ( , DataTable );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
    public virtual void ( , DbCommand );
}
internal class  : object {
    public List`1<> Execute(BulkOperation bulkOperation);
}
internal class  :  {
    private  ;
    private  ;
    internal   { get; }
    internal virtual Table ();
    internal virtual string (string );
    internal virtual string (string );
    internal static string (string );
    internal virtual void ();
    internal virtual  get_();
    internal virtual List`1<> ();
    internal virtual void (List`1<> );
    internal virtual string ();
    internal virtual string (string , string );
}
internal class  : object {
    public virtual List`1<> Execute(BulkOperation bulkOperation);
}
internal class  : object {
    public  ;
    public  ;
    public List`1<> ;
    public int BatchSize;
    public BulkOperation ;
    public  ;
    public  ;
    public int ;
    public int ;
    public Lazy`1<List`1<string>> ;
    public bool ;
    public bool IsCompleted;
    public DataTable ;
    public object ;
    public object ;
    public string ;
    public DbTransaction ;
    public object ;
    public object ;
    public object ;
    public Nullable`1<bool> ;
    public bool ;
    public string  { get; }
    public string get_();
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static bool (Type this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static string (DbConnection );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static DbTransaction (DbConnection , Nullable`1<IsolationLevel> );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static List`1<object> (IEnumerable this);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingAttr, bool removeHidden);
    [ExtensionAttribute]
internal static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr, bool removeHidden);
}
internal enum  : Enum {
    public int value__;
    public static  ;
}
internal class  : object {
    internal DateTime ;
    internal bool ;
    internal DateTime ;
    internal  ;
    public bool  { get; public set; }
    public   { get; public set; }
    public DateTime  { get; public set; }
    public DateTime  { get; public set; }
    public bool get_();
    public void set_(bool value);
    public  get_();
    public void set_( value);
    public DateTime get_();
    public void set_(DateTime value);
    public DateTime get_();
    public void set_(DateTime value);
}
internal class `1 :  {
    internal  ;
    internal  ;
    public   { get; public set; }
    public   { get; public set; }
    public  get_();
    public void set_( value);
    public  get_();
    public void set_( value);
}
internal class  : object {
    public static bool (ProviderType );
}
internal class  : object {
    internal static Dictionary`2<string, string> ;
    internal static Dictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> ;
    internal static bool  { get; internal set; }
    internal static bool  { get; internal set; }
    internal static Dictionary`2<string, string>  { get; internal set; }
    internal static ConcurrentDictionary`2<string, string>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    internal static Nullable`1<bool>  { get; internal set; }
    private static ();
    [CompilerGeneratedAttribute]
internal static bool get_();
    [CompilerGeneratedAttribute]
internal static void set_(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_();
    [CompilerGeneratedAttribute]
internal static void set_(bool value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal static ConcurrentDictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal static void set_(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Nullable`1<bool> value);
    internal static Nullable`1<bool> (ProviderType , bool , bool , bool , bool );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static bool (string , string , Int32& , bool );
    internal static void (int , bool );
    internal static DateTime ();
    internal static bool ();
    internal static void (bool );
    internal static bool (ProviderType , bool , bool , bool , bool );
    internal static string (bool );
    internal static string (ProviderType , bool , bool , bool );
    internal static void ();
    internal static string (string );
    internal static bool (String& , ProviderType , Nullable`1<bool> , Nullable`1<bool> , Nullable`1<bool> , bool );
    internal static bool (String& , ProviderType , bool , bool , bool , bool );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static bool (DbException );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static void (BulkOperation`1<> this, IEnumerable`1<object> );
    [ExtensionAttribute]
internal static List`1<string> (BulkOperation`1<> this, IEnumerable`1<object> );
    [ExtensionAttribute]
internal static List`1<string> (BulkOperation`1<> this, object );
}
internal class  : object {
    internal ColumnMapping ;
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal Column ;
    internal string ;
    internal string ;
    internal ColumnMappingDirectionType ;
    public int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
}
internal class  : object {
    internal bool ;
    internal List`1<Column> ;
    internal int ;
    internal List`1<> ;
    internal List`1<> ;
    internal  ;
    internal int ;
    internal int ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<ColumnMapping> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<DataColumn> ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal  ;
    internal bool ;
    internal Table ;
    internal string ;
    internal bool ;
    internal int ;
    internal ConcurrentDictionary`2<string, string> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string  { get; internal set; }
    internal string get_();
    internal void set_(string value);
    internal bool (BulkOperation );
    internal static void (BulkOperation`1<> );
}
internal static class  : object {
    internal static object ;
    internal static object ;
    private static ();
    internal static void (List`1<> , List`1<MemberInfo> , List`1<Expression> );
    internal static Expression`1<Func`2<, object>> (Expression`1<Func`2<, object>> );
    internal static Expression`1<Func`2<, object>> (Expression`1<Func`2<, object>> );
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    public Int32[] ;
    public DataTable ;
    public  ;
    public int ;
    public List`1<object> ;
    public List`1<object> ;
    public bool ;
    public [] ;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ( , List`1<> );
    public sealed virtual object GetValue(int i);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int );
    public sealed virtual byte GetByte(int );
    public sealed virtual long GetBytes(int , long , Byte[] , int , int );
    public sealed virtual char GetChar(int );
    public sealed virtual long GetChars(int , long , Char[] , int , int );
    public sealed virtual IDataReader GetData(int );
    public sealed virtual string GetDataTypeName(int );
    public sealed virtual DateTime GetDateTime(int );
    public sealed virtual decimal GetDecimal(int );
    public sealed virtual double GetDouble(int );
    public sealed virtual Type GetFieldType(int );
    public sealed virtual float GetFloat(int );
    public sealed virtual Guid GetGuid(int );
    public sealed virtual short GetInt16(int );
    public sealed virtual int GetInt32(int );
    public sealed virtual long GetInt64(int );
    public sealed virtual string GetName(int );
    public sealed virtual int GetOrdinal(string );
    public sealed virtual string GetString(int );
    public sealed virtual int GetValues(Object[] );
    public sealed virtual bool IsDBNull(int );
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
}
internal class  : object {
    internal List`1<> ;
    internal List`1<> ;
    public List`1<>  { get; public set; }
    public List`1<>  { get; public set; }
    public (Type , string );
    public List`1<> get_();
    public void set_(List`1<> value);
    public List`1<> get_();
    public void set_(List`1<> value);
}
internal class  : object {
    internal List`1<string> ;
    internal List`1<> ;
    internal List`1<> ;
    internal string ;
    internal List`1<> ;
    internal  ;
    public List`1<string>  { get; public set; }
    public List`1<>  { get; public set; }
    public List`1<>  { get; public set; }
    public string Name { get; public set; }
    public List`1<> Parameters { get; public set; }
    public   { get; public set; }
    public List`1<string> get_();
    public void set_(List`1<string> value);
    public List`1<> get_();
    public void set_(List`1<> value);
    public List`1<> get_();
    public void set_(List`1<> value);
    public string get_Name();
    public void set_Name(string value);
    public List`1<> get_Parameters();
    public void set_Parameters(List`1<> value);
    public  get_();
    public void set_( value);
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
}
internal class  : object {
    internal bool ;
    internal  ;
    public bool  { get; public set; }
    public   { get; public set; }
    public bool get_();
    public void set_(bool value);
    public  get_();
    public void set_( value);
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
}
internal class  : object {
    internal string ;
    internal string ;
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
}
internal static class  : object {
    public static Func`2<object, object> (Type ,  );
    public static Func`2<object, object> (Type , MemberInfo[] );
    public static Func`2<object, > (Type ,  );
    public static Func`2<object, > (Type , MemberInfo[] );
    public static Action`2<object, object> (Type ,  );
    public static Action`2<object, object> (Type , MemberInfo[] );
    public static Action`2<object, > (Type ,  );
    public static Action`2<object, > (Type , MemberInfo[] );
    public static Func`3<object, Object[], > (Type , string , Type[] );
    public static Action`2<object, object> (Type , string );
    public static Expression (Expression ,  );
    public static Expression (Expression , String[] );
}
internal class  :  {
    public ( );
    public ( , IEnumerable`1<> );
    public virtual object GetValue(int i);
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    public [] ;
    public  ;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ( );
    public ( , IEnumerable`1<> );
    public virtual object GetValue(int i);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int );
    public sealed virtual byte GetByte(int );
    public sealed virtual long GetBytes(int , long , Byte[] , int , int );
    public sealed virtual char GetChar(int );
    public sealed virtual long GetChars(int , long , Char[] , int , int );
    public sealed virtual IDataReader GetData(int );
    public sealed virtual string GetDataTypeName(int );
    public sealed virtual DateTime GetDateTime(int );
    public sealed virtual decimal GetDecimal(int );
    public sealed virtual double GetDouble(int );
    public sealed virtual Type GetFieldType(int );
    public sealed virtual float GetFloat(int );
    public sealed virtual Guid GetGuid(int );
    public sealed virtual short GetInt16(int );
    public sealed virtual int GetInt32(int );
    public sealed virtual long GetInt64(int );
    public sealed virtual string GetName(int );
    public sealed virtual int GetOrdinal(string );
    public sealed virtual string GetString(int );
    public sealed virtual int GetValues(Object[] );
    public sealed virtual bool IsDBNull(int );
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    public Int32[] ;
    public IDataReader ;
    public  ;
    public int ;
    public bool ;
    public List`1<object> ;
    public List`1<object> ;
    public [] ;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ( , List`1<> );
    public sealed virtual object GetValue(int i);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int );
    public sealed virtual byte GetByte(int );
    public sealed virtual long GetBytes(int , long , Byte[] , int , int );
    public sealed virtual char GetChar(int );
    public sealed virtual long GetChars(int , long , Char[] , int , int );
    public sealed virtual IDataReader GetData(int );
    public sealed virtual string GetDataTypeName(int );
    public sealed virtual DateTime GetDateTime(int );
    public sealed virtual decimal GetDecimal(int );
    public sealed virtual double GetDouble(int );
    public sealed virtual Type GetFieldType(int );
    public sealed virtual float GetFloat(int );
    public sealed virtual Guid GetGuid(int );
    public sealed virtual short GetInt16(int );
    public sealed virtual int GetInt32(int );
    public sealed virtual long GetInt64(int );
    public sealed virtual string GetName(int );
    public sealed virtual int GetOrdinal(string );
    public sealed virtual string GetString(int );
    public sealed virtual int GetValues(Object[] );
    public sealed virtual bool IsDBNull(int );
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
    internal static int (int );
}
internal class  : object {
    internal int ;
    internal object ;
    internal IEnumerator ;
    internal bool ;
    internal bool ;
    internal int ;
    internal object ;
    internal IList ;
    internal bool ;
    public object  { get; }
    public bool  { get; }
    public bool  { get; }
    public int Count { get; }
    public int  { get; public set; }
    public (IList );
    public static  Create(object source);
    public static  Create(List`1<DataRow> list);
    public static  Create(IList`1<T> list);
    public static  Create(IEnumerable`1<T> list);
    public static  Create(DataTable dt);
    public virtual  (string );
    public virtual  (MemberInfo[] );
    public virtual  ( );
    public virtual  (int );
    public virtual  (string );
    public virtual object GetValue( accessor);
    public virtual Type ( );
    public virtual void SetValue( accessor, object value);
    public virtual void SetValue(int position,  accessor, object value);
    public virtual IDataReader ();
    public virtual IDataReader (IEnumerable`1<> );
    public virtual IDataReader (IEnumerable`1<> , bool );
    public virtual object get_();
    public virtual bool ();
    public virtual bool ();
    public virtual bool (int );
    public virtual void Dispose();
    public virtual bool get_();
    public virtual bool get_();
    public virtual int get_Count();
    public virtual int get_();
    public virtual void set_(int value);
    public virtual  (int );
    public virtual object (int );
}
internal class `1 :  {
    internal IEnumerator`1<> ;
    internal IEnumerable`1<> ;
    internal IList`1<> ;
    public `1(IList`1<> );
    public `1(IEnumerable`1<> );
    public `1(IEnumerator`1<> );
    public virtual void SetValue(int position,  accessor, object value);
    public virtual bool ();
    public virtual bool ();
    public virtual bool (int );
    public virtual void Dispose();
}
internal class  :  {
    public bool ;
    public int ;
    public int ;
    public bool ;
    public IDataReader ;
    public  ;
    public (IDataReader );
    public virtual object GetValue( accessor);
    public object GetValue(int i);
    public virtual  (string );
    public virtual  (int );
    public virtual  ( );
    public virtual  (string );
    public virtual bool ();
    public virtual  (int );
    public  (int );
    public virtual IDataReader (IEnumerable`1<> );
    public virtual void SetValue( accessor, object value);
    public virtual void SetValue(int position,  accessor, object value);
    public virtual object (int );
}
internal interface  {
    public abstract virtual void SetValue(int position,  accessor, object value);
    public abstract virtual object GetValue( accessor);
    public abstract virtual void (List`1<> );
    public abstract virtual object (int );
}
internal class  : `1<DataRow> {
    public IEnumerable`1<DataRow> ;
    public (IList`1<DataRow> );
    public (IEnumerable`1<DataRow> );
    public virtual object GetValue( accessor);
    public virtual  (string );
    public virtual  (int );
    public virtual  ( );
    public virtual  (string );
}
internal class  : `1<DataRow> {
    internal DataTable ;
    public (DataTable );
    public virtual  (string );
    public virtual  (int );
    public virtual  (string );
    public virtual  ( );
    public virtual IDataReader (IEnumerable`1<> );
    public virtual object (int );
    public virtual object GetValue( accessor);
}
internal interface  {
    public bool  { get; }
    public bool  { get; }
    public int Count { get; }
    public int  { get; public set; }
    public object  { get; }
    public abstract virtual bool get_();
    public abstract virtual bool get_();
    public abstract virtual int get_Count();
    public abstract virtual int get_();
    public abstract virtual void set_(int value);
    public abstract virtual object get_();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool (int );
    public abstract virtual  (int );
    public abstract virtual object (int );
    public abstract virtual IDataReader ();
    public abstract virtual IDataReader (IEnumerable`1<> );
    public abstract virtual IDataReader (IEnumerable`1<> , bool );
    public abstract virtual  (string );
    public abstract virtual  (MemberInfo[] );
    public abstract virtual  ( );
    public abstract virtual  (int );
    public abstract virtual  (string );
    public abstract virtual object GetValue( accessor);
    public abstract virtual Type ( );
    public abstract virtual void SetValue( accessor, object value);
    public abstract virtual void SetValue(int position,  accessor, object value);
}
internal interface `1 {
}
internal class  : object {
    public static ConcurrentDictionary`2<string, Func`2<object, object>> ;
    public static ConcurrentDictionary`2<string, Func`3<object, IEnumerable`1<object>, object>> ;
    public static ConcurrentDictionary`2<string, Func`1<object>> ;
    public static ConcurrentDictionary`2<string, Func`2<IEnumerable`1<object>, object>> ;
    public static ConcurrentDictionary`2<string, Action`2<object, object>> ;
    public static ConcurrentDictionary`2<string, Action`3<object, object, IEnumerable`1<object>>> ;
    public static ConcurrentDictionary`2<string, Action`1<object>> ;
    public static ConcurrentDictionary`2<string, Action`2<object, IEnumerable`1<object>>> ;
    private static ();
    public static void ();
}
internal class  : object {
    internal  ;
    internal string ;
    internal Type[] ;
    internal bool ;
    internal Dictionary`2<Type, string> ;
    internal LambdaExpression ;
    internal MemberInfo[] ;
    internal string ;
    internal Func`2<object, object> ;
    internal Func`3<object, IEnumerable`1<object>, object> ;
    internal Type ;
    internal Action`2<object, object> ;
    internal Action`3<object, object, IEnumerable`1<object>> ;
    internal Type ;
    internal Func`1<object> ;
    internal Func`2<IEnumerable`1<object>, object> ;
    internal Action`1<object> ;
    internal Action`2<object, IEnumerable`1<object>> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private bool ;
    public bool  { get; public set; }
    public int  { get; public set; }
    public bool IsGeography { get; public set; }
    public bool  { get; }
    public (string );
    public (string , IEnumerable`1<Type> );
    public (string , Type[] );
    public (LambdaExpression );
    public (MemberInfo[] );
    public (IEnumerable`1<MemberInfo> );
    public virtual void (object );
    public virtual object GetValue();
    public virtual object GetValue(IEnumerable`1<object> parameterValues);
    public virtual object GetValue(Object[] parameterValues);
    public virtual object GetValue(object obj);
    public virtual object GetValue(object obj, IEnumerable`1<object> parameterValues);
    public virtual object GetValue(object obj, Object[] parameterValues);
    public virtual Type (object );
    public virtual void SetValue(object value);
    public virtual void SetValue(object value, IEnumerable`1<object> parameterValues);
    public virtual void SetValue(object value, Object[] parameterValues);
    public virtual void SetValue(object obj, object value);
    public virtual void SetValue(object obj, object value, IEnumerable`1<object> parameterValues);
    public virtual void SetValue(object obj, object value, Object[] parameterValues);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_();
    [CompilerGeneratedAttribute]
public sealed virtual void set_(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_();
    [CompilerGeneratedAttribute]
public sealed virtual void set_(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsGeography();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsGeography(bool value);
    public sealed virtual bool get_();
    public string (Type );
    public string ();
    public Func`2<object, object> (Type , string );
    internal Action`2<object, object> (Type );
    public virtual string ToString();
}
internal class `1 :  {
    public `1(string );
    public `1(string , IEnumerable`1<Type> );
    public `1(string , Type[] );
    public `1(LambdaExpression );
    public `1(MemberInfo );
    public `1(MemberInfo[] );
    public `1(IEnumerable`1<MemberInfo> );
    public sealed virtual  GetValue();
    public sealed virtual  GetValue(Object[] parameterValues);
    public sealed virtual  GetValue(IEnumerable`1<object> parameterValues);
    public sealed virtual  GetValue(object obj);
    public sealed virtual  GetValue(object obj, Object[] parameterValues);
    public sealed virtual  GetValue(object obj, IEnumerable`1<object> parameterValues);
    public void SetValue( value);
    public void SetValue( value, Object[] parameterValues);
    public void SetValue( value, IEnumerable`1<object> parameterValues);
    public void SetValue(object obj,  value);
    public void SetValue(object obj,  value, Object[] parameterValues);
    public void SetValue(object obj,  value, IEnumerable`1<object> parameterValues);
}
internal class  :  {
    internal object ;
    public (object );
    public virtual object GetValue(object sender);
    public virtual void SetValue(object obj, object value);
}
internal class  :  {
    internal IDataReader ;
    internal string ;
    internal int ;
    internal bool ;
    public (string );
    public (int );
    public object GetValue(IDataReader reader);
    public int (IDataReader );
    public virtual string ToString();
}
internal class  :  {
    internal IDataReader ;
    internal DataTable ;
    internal string ;
    internal int ;
    internal bool ;
    public (int );
    public (string );
    public virtual object GetValue(object sender);
    public virtual void SetValue(object obj, object value);
    public object GetValue(DataRow dr);
    public int (IDataReader );
    public int (DataTable );
    public object GetValue(IDataReader dr);
    public void SetValue(DataRow dr, object value);
    public virtual string ToString();
}
internal class  :  {
    private Func`2<object, object> ;
    private Func`3<string, object, object> ;
    public string ;
    public  ;
    public (Func`2<object, object> );
    public (string , Func`3<string, object, object> ,  );
    public virtual object GetValue(object sender);
    public virtual void SetValue(object obj, object value);
}
internal interface  {
    public bool  { get; public set; }
    public int  { get; public set; }
    public bool  { get; }
    public bool IsGeography { get; public set; }
    public abstract virtual bool get_();
    public abstract virtual void set_(bool value);
    public abstract virtual int get_();
    public abstract virtual void set_(int value);
    public abstract virtual bool get_();
    public abstract virtual bool get_IsGeography();
    public abstract virtual void set_IsGeography(bool value);
    public abstract virtual Type (object );
    public abstract virtual object GetValue();
    public abstract virtual object GetValue(IEnumerable`1<object> parameterValues);
    public abstract virtual object GetValue(Object[] parameterValues);
    public abstract virtual object GetValue(object obj);
    public abstract virtual object GetValue(object obj, IEnumerable`1<object> parameterValues);
    public abstract virtual object GetValue(object obj, Object[] parameterValues);
    public abstract virtual void SetValue(object value);
    public abstract virtual void SetValue(object value, IEnumerable`1<object> parameterValues);
    public abstract virtual void SetValue(object value, Object[] parameterValues);
    public abstract virtual void SetValue(object obj, object value);
    public abstract virtual void SetValue(object obj, object value, IEnumerable`1<object> parameterValues);
    public abstract virtual void SetValue(object obj, object value, Object[] parameterValues);
}
internal interface `1 {
    public abstract virtual  GetValue();
    public abstract virtual  GetValue(IEnumerable`1<object> parameterValues);
    public abstract virtual  GetValue(Object[] parameterValues);
    public abstract virtual  GetValue(object obj);
    public abstract virtual  GetValue(object obj, IEnumerable`1<object> parameterValues);
    public abstract virtual  GetValue(object obj, Object[] parameterValues);
}
internal class  :  {
}
internal class  : object {
    public List`1<string> ;
    public bool ;
    public bool ;
    public string ;
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static Expression (Expression this);
    [ExtensionAttribute]
internal static MemberInfo (Expression this, ParameterExpression );
    [ExtensionAttribute]
internal static IEnumerable`1<MemberInfo> (Expression this, ParameterExpression );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static IQueryable Select(IQueryable source, string selector, Object[] values);
    [ExtensionAttribute]
public static IQueryable Take(IQueryable source, int count);
}
internal class  : object {
    private string ;
    private Type ;
    public string Name { get; }
    public Type  { get; }
    public (string , Type );
    public string get_Name();
    public Type get_();
}
internal static class  : object {
    public static Expression Parse(Type resultType, string expression, Object[] values);
    public static LambdaExpression (Type , Type , string , Object[] );
    public static LambdaExpression (ParameterExpression[] , Type , string , Object[] );
    public static Expression`1<Func`2<, >> (string , Object[] );
    public static Type ([] );
    public static Type (IEnumerable`1<> );
}
internal class  : object {
    public bool ;
    public Expression ;
}
internal class  : object {
    public int ;
    public [] ;
    public (IEnumerable`1<> );
    public sealed virtual bool Equals( other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class  : object {
    public static  ;
    private ConcurrentDictionary`2<, Type> ;
    private ModuleBuilder ;
    private ReaderWriterLock ;
    private int ;
    private static ();
    public Type (IEnumerable`1<> );
    private Type ([] );
    private FieldInfo[] (TypeBuilder , [] );
    private void (TypeBuilder , FieldInfo[] );
    private void (TypeBuilder , FieldInfo[] );
}
internal class  : Exception {
    private int ;
    public int  { get; }
    public (string , int );
    public int get_();
    public virtual string ToString();
}
internal class  : object {
    private static Type[] ;
    private static Expression ;
    private static Expression ;
    private static Expression ;
    private static string ;
    private static string ;
    private static string ;
    private static Dictionary`2<string, object> ;
    private Dictionary`2<string, object> ;
    private IDictionary`2<string, object> ;
    private Dictionary`2<Expression, string> ;
    private ParameterExpression ;
    private string ;
    private int ;
    private int ;
    private char ;
    private  ;
    public (ParameterExpression[] , string , Object[] );
    private static ();
    private void (ParameterExpression[] );
    private void (Object[] );
    private void (string , object );
    public Expression Parse(Type resultType);
    public IEnumerable`1<> ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression (object , string );
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression ();
    private Expression (Expression , Expression , Expression , int );
    private Expression ();
    private Expression (LambdaExpression );
    private Expression (Type );
    private Expression (Expression , Type , int );
    private Expression (Type , Expression );
    private static Type (Type , Type );
    private Expression (Expression , Type , string , int );
    private Expression[] ();
    private Expression[] ();
    private Expression (Expression );
    private static bool (Type );
    private static bool (Type );
    private static Type (Type );
    private static string (Type );
    private static bool (Type );
    private static bool (Type );
    private static bool (Type );
    private static int (Type );
    private static bool (Type );
    private void (Type , string , Expression& , int );
    private void (Type , string , Expression& , Expression& , int );
    private Exception (string , Expression , Expression , int );
    private MemberInfo (Type , string , bool );
    private int (Type , string , bool , Expression[] , MethodBase& );
    private int (Type , Expression[] , MethodBase& );
    private static IEnumerable`1<Type> (Type );
    [IteratorStateMachineAttribute("/")]
private static IEnumerable`1<Type> (Type );
    private static void (List`1<Type> , Type );
    private int (IEnumerable`1<MethodBase> , Expression[] , MethodBase& );
    private bool ( , Expression[] );
    private Expression (Expression , Type , bool );
    private static object (string , Type );
    private static object (string , Type );
    private static bool (Type , Type );
    private static bool (Expression[] ,  ,  );
    private static int (Type , Type , Type );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private Expression (Expression , Expression );
    private MethodInfo (string , Expression , Expression );
    private Expression (string , Expression , Expression );
    private void (int );
    private void ();
    private void ();
    private bool (string );
    private string ();
    private void ();
    private void ( , string );
    private void ( );
    private Exception (string , Object[] );
    private Exception (int , string , Object[] );
    private static Dictionary`2<string, object> ();
}
internal static class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
}
[FlagsAttribute]
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
}
internal class  : object {
    public static Assembly ;
    public static Assembly ();
    public static Byte[] (object , bool );
}
internal class  : object {
    public static void (DbDataReader , DataSet );
    public static void (DbDataReader , DataTable );
}
internal class  : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`4<DbConnection, int, DbTransaction, object> ;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`4<DbConnection, int, DbTransaction, object> ;
    private static Action`4<DbConnection, string, [], IDataReader> ;
    private static Func`5<DbConnection, string, [], IDataReader, object> ;
    private static Action`3<object, string, object> ;
    private static Action`1<object> ;
    private static Func`5<DbConnection, string, [], IDataReader, object> ;
    private static Action`3<object, string, object> ;
    private static Action`1<object> ;
    public static object (BulkOperation , DbConnection , int , DbTransaction );
    public static void (DbConnection , string , [] ,  );
    public static void (DbConnection , string , [] , IDataReader );
    public static void (DbConnection , string , [] , IDataReader , bool );
}
internal class  : object {
    private static Action`2<DbCommand, string> ;
    private static Func`3<DbCommand, int, DbDataReader> ;
    private static Func`2<DbCommand, DbCommand> ;
    public static DbCommand (DbCommand );
    public static void (DbCommand , string );
    public static DbDataReader (DbCommand , int );
}
internal class  : object {
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`2<DbConnection, DbConnection> ;
    private static Func`2<DbConnection, DbConnection> ;
    private static Func`2<DbConnection, DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    private static Func`1<DbConnection> ;
    public static DbConnection (BulkOperation );
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection ();
    public static DbConnection (DbConnection );
    public static DbConnection (DbConnection );
    public static DbConnection (DbConnection );
    public static DbConnection (DbConnection );
}
internal class  : object {
    private static Func`2<DbCommand, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`2<DbCommand, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`2<DbCommand, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`2<DbDataAdapter, DbDataAdapter> ;
    private static Func`3<DbDataAdapter, object, DbDataAdapter> ;
    private static Func`2<DbDataAdapter, DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    private static Func`1<DbDataAdapter> ;
    public static DbDataAdapter (BulkOperation , DbCommand );
    public static DbDataAdapter (BulkOperation );
    public static DbDataAdapter ();
    public static DbDataAdapter (DbCommand );
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter (DbDataAdapter , object );
    public static DbDataAdapter (DbDataAdapter );
    public static DbDataAdapter (DbDataAdapter );
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
    public static DbDataAdapter ();
}
internal class  : object {
    private static Func`4<DbDataReader, int, Object[], bool> ;
    private static Action`1<DbDataReader> ;
    private static Action`1<DbDataReader> ;
    private static Func`2<DbDataReader, IDataRecord> ;
    private static Action`3<DbDataReader, IDataRecord, int> ;
    private static Action`3<DbDataReader, int, object> ;
    public static bool (DbDataReader , int , Object[] );
    public static void (DbDataReader );
    public static void (DbDataReader );
    public static IDataRecord (DbDataReader );
    public static void (DbDataReader , IDataRecord , int );
    public static void (DbDataReader , int , object );
}
internal class  : object {
    private static Action`3<IDataRecord, int, object> ;
    public static void (IDataRecord , int , object );
}
internal class  : object {
    private static Action`3<DbParameter, byte, byte> ;
    private static Action`3<DbParameter, byte, byte> ;
    private static Action`2<DbParameter, string> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, string> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, string> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    private static Action`2<DbParameter, object> ;
    public static void (BulkOperation , DbParameter , byte , byte );
    public static void (BulkOperation , DbParameter , string );
    public static void (BulkOperation , DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , string );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
    public static void (DbParameter , object );
}
internal class  : object {
    private static Func`1<bool> ;
    private static Action`1<DbCommand> ;
    private static Action`1<DbCommand> ;
    public static bool ();
    public static void ();
    public static void (DbCommand );
    public static void (DbCommand );
    public static void (DbCommand );
}
internal class  : object {
    private static Assembly ;
    private static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static Assembly ;
    public static void (BulkOperation , Assembly );
    public static Assembly (BulkOperation );
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
    public static Assembly ();
}
internal class  : object {
    private static Func`2<DbTransaction, DbTransaction> ;
    private static Func`2<DbTransaction, DbTransaction> ;
    public static DbTransaction (DbTransaction );
    public static DbTransaction (DbTransaction );
    public static DbTransaction (DbTransaction );
}
internal class  : object {
    internal static IEnumerable`1<string> (LambdaExpression );
}
internal class  : object {
    [CompilerGeneratedAttribute]
private BatchSaveChangesOptions ;
    private static string ;
    private Action`1<BulkOperation> ;
    private DbContext ;
    private ObjectContext ;
    private Action`1<BulkOperation> ;
    private ObjectStateManager ;
    private object ;
    private object _internalContext;
    private BulkOperation ;
    private SaveOptions ;
    private static object ;
    private static bool ;
    private static object ;
    private static bool ;
    private static Func`2<IObjectContextAdapter, ObjectStateManager> ;
    private static Func`2<IObjectContextAdapter, object> ;
    private static Func`2<object, object> ;
    private static Func`2<StructuralType, object> ;
    private static Func`2<object, StructuralType> ;
    private static Action`2<object, EntityConnection> ;
    private static Action`1<ObjectStateManager> ;
    private static Func`2<object, object> ;
    private static Func`2<object, EntitySet> ;
    private static Func`2<object, byte> ;
    private static Func`2<object, object> ;
    private static Func`2<object, object> ;
    private static Func`2<object, DbModificationCommandTree> ;
    private static Func`2<EdmProperty, bool> ;
    private static Func`3<object, object, object> ;
    private static Func`3<object, int, object> ;
    private static Func`1<object> ;
    private static Func`2<object, int> ;
    private static Action`2<object, object> ;
    private static Action`1<object> ;
    private static Func`2<object, List`1<KeyValuePair`2<int, DbSetClause>>> ;
    private static Func`3<DbModificationCommandTree, Dictionary`2<DbSetClause, DbSetClause>, DbModificationCommandTree> ;
    private static Func`3<DbExpression, DbExpression, DbSetClause> ;
    private static Action`2<object, bool> ;
    private static Type ;
    private static Action`3<object, Dictionary`2<int, object>, object> ;
    private static Action`1<object> ;
    private static Action`1<object> ;
    private static Action`1<object> ;
    private static Action`1<object> ;
    private static Func`2<object, IEnumerable`1<object>> ;
    private static Func`2<object, IEnumerable`1<object>> ;
    private static Func`4<object, IEnumerable, IEnumerable, object> ;
    private static Func`2<object, object> ;
    private static Func`2<object, object> ;
    private static Func`2<object, object> ;
    private static MethodInfo ;
    private static Func`3<object, IEnumerable, Exception> ;
    private static MethodInfo ;
    internal static Func`4<DbCommand, DbInterceptionContext, DbDispatchers, DbCommand> ;
    private static Action`3<object, long, object> ;
    private static Func`4<object, Dictionary`2<int, object>, object, long> ;
    private static Func`3<object, Dictionary`2<int, object>, DbCommand> ;
    private static Func`2<object, object> ;
    private static Func`2<object, EntityConnection> ;
    private static Func`2<object, Nullable`1<int>> ;
    private static Func`2<object, DbModificationCommandTree> ;
    private static Func`2<object, object> ;
    private static Func`2<EntityConnection, EntityTransaction> ;
    private static Func`2<EntityTransaction, DbTransaction> ;
    private static Func`2<DbModificationCommandTree, bool> ;
    private static Func`2<object, DbCommand> ;
    private static Func`2<object, MetadataWorkspace> ;
    private static Func`2<EdmType, object> ;
    private static Func`2<TypeUsage, bool> ;
    private static Func`5<MetadataWorkspace, DbDataReader, TypeUsage, int, object> ;
    private static Func`6<MetadataWorkspace, DbDataReader, TypeUsage, int, CancellationToken, Task`1<object>> ;
    private static Func`2<object, StructuralType> ;
    private static Func`3<object, int, object> ;
    private static Action`3<object, object, object> ;
    private static Func`2<object, int> ;
    private static Func`1<int> ;
    internal static Func`2<object, DbInterceptionContext> ;
    internal static Func`2<object, DbDispatchers> ;
    internal static Action`2<object, object> ;
    internal static Func`2<object, int> ;
    internal static Func`3<object, object, object> ;
    private static Func`5<object, Dictionary`2<int, object>, object, CancellationToken, Task`1<long>> ;
    private static Action`1<ObjectContext> ;
    private BatchSaveChangesOptions  { get; private set; }
    public (DbContext , SaveOptions );
    public (DbContext );
    public (DbContext , Action`1<BulkOperation> );
    private static ();
    [CompilerGeneratedAttribute]
private BatchSaveChangesOptions get_();
    [CompilerGeneratedAttribute]
private void set_(BatchSaveChangesOptions value);
    public void (Action`1<BatchSaveChangesOptions> );
    public int (Action`1<BatchSaveChangesOptions> );
    [AsyncStateMachineAttribute("/")]
public Task`1<int> (Action`1<BatchSaveChangesOptions> , CancellationToken );
    public static bool (Exception );
    public static bool (Exception );
    public List`1<List`1<object>> ();
    public static Tuple`3<bool, List`1<List`1<object>>, IEnumerable> TryBatchTopologicalSort(object orderer);
    public void (List`1<> , bool );
    public void (List`1<> , object , Dictionary`2<int, object> );
    public void (List`1<> , object , Dictionary`2<int, object> , bool );
    public List`1<> (List`1<> , int , bool );
    public Tuple`2<List`1<>, Action> (List`1<> , int , object , Dictionary`2<int, object> );
    public Tuple`2<List`1<>, Action> (List`1<> , int , object , Dictionary`2<int, object> , bool );
    public static List`1<string> (DbExpression , bool );
    public static void (DbExpression , List`1<string> );
    public void (List`1<> , Dictionary`2<int, object> );
    public void ();
    public static List`1<> (IEnumerable );
    public static List`1<KeyValuePair`2<string, object>> (DbExpression );
    public List`1<List`1<List`1<>>> ();
    public static Tuple`3<bool, List`1<List`1<List`1<>>>, IEnumerable> TryTopologicalSort(object orderer);
    public void ();
    public void ();
    public void Execute();
    public void (List`1<> , object , Dictionary`2<int, object> );
}
internal class  : object {
    internal static MethodInfo ;
    internal static void (BulkOperation`1<> this, DbContext , List`1<object> , Type );
    internal static void (BulkOperation`1<> this, DbContext , List`1<object> , Type );
    public static void (DbCommand );
    internal static void (BulkOperation`1<> this, DbContext , List`1<object> , Type );
}
internal class  : object {
    internal static bool (BulkOperation`1<> , DbContext , SchemaEntityType , string , bool , bool );
}
internal class  : object {
    internal static void BulkDelete(DbContext this, BulkOperation`1<T> bulkOperation, IEnumerable`1<object> entities2);
    internal static void BulkDelete(BulkOperation`1<T> this, DbContext context, IEnumerable`1<object> entities);
    internal static void BulkDelete(BulkOperation`1<T> this, DbContext context, List`1<object> list, bool isManager, Type type, string typeName);
    internal static void BulkInsert(DbContext this, BulkOperation`1<T> bulkOperation, IEnumerable`1<object> entities2, List`1<object> entitiesToUpdate);
    public static void BulkInsert(BulkOperation`1<T> this, DbContext context, IEnumerable`1<object> entities, List`1<object> entitiesToUpdate);
    internal static void BulkInsert(BulkOperation`1<T> this, DbContext context, List`1<object> list, bool isManager, List`1<object> entitiesToUpdate, Type type, string typeName);
    internal static void BulkMerge(DbContext this, BulkOperation`1<T> bulkOperation, IEnumerable`1<object> entities2);
    public static void BulkMerge(BulkOperation`1<T> this, DbContext context, IEnumerable`1<object> entities);
    internal static void BulkMerge(BulkOperation`1<T> this, DbContext context, List`1<object> list, bool isManager, Type type, string typeName);
    internal static void BulkSynchronize(DbContext this, BulkOperation`1<T> bulkOperation, IEnumerable`1<object> entities2);
    public static void BulkSynchronize(BulkOperation`1<T> this, DbContext context, IEnumerable`1<object> entities);
    internal static void BulkSynchronize(BulkOperation`1<T> this, DbContext context, List`1<object> list, bool isManager, Type type, string typeName);
    internal static void BulkUpdate(DbContext this, BulkOperation`1<T> bulkOperation, IEnumerable`1<object> entities2);
    public static void BulkUpdate(BulkOperation`1<T> this, DbContext context, IEnumerable`1<object> entities);
    internal static void BulkUpdate(BulkOperation`1<T> this, DbContext context, List`1<object> list, bool isManager, Type type, string typeName);
    internal static List`1<Tuple`2<Type, SchemaEntityType>> (DbContext this, List`1<> );
}
internal class  : object {
    internal static void (DbContext , Dictionary`2<string, IGrouping`2<string, ObjectStateEntry>> , List`1<ObjectStateEntry> , Action`1<BulkOperation> , bool );
    internal static void (DbContext , List`1<ObjectStateEntry> , List`1<ObjectStateEntry> , Action`1<BulkOperation> , bool );
    internal static void (DbContext , List`1<ObjectStateEntry> , Action`1<BulkOperation> );
    internal static void (DbContext , List`1<ObjectStateEntry> , Action`1<BulkOperation> );
    internal static void (DbContext , List`1<ObjectStateEntry> , Action`1<BulkOperation> , bool );
    internal static void (DbContext , List`1<ObjectStateEntry> , Action`1<BulkOperation> , bool );
    internal static void (DbContext , List`1<ObjectStateEntry> , Action`1<BulkOperation> , bool );
    internal static void (DbContext , List`1<ObjectStateEntry> , Action`1<BulkOperation> , bool );
    internal static void (DbContext , List`1<ObjectStateEntry> , Action`1<BulkOperation> , bool );
}
internal class  : object {
    public object Command;
    public List`1<KeyValuePair`2<int, DbSetClause>> ;
    public List`1<EdmProperty> ;
    public Dictionary`2<string, EdmProperty> ;
    public byte ;
    public List`1<KeyValuePair`2<string, object>> ;
    public string ;
    public DbModificationCommandTree ;
    public string ;
    public object ;
}
internal class  : ExpressionVisitor {
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    public bool  { get; public set; }
    public bool  { get; public set; }
    public bool  { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    protected virtual Expression VisitMethodCall(MethodCallExpression );
}
internal class  : ExpressionVisitor {
    [CompilerGeneratedAttribute]
private bool ;
    public bool  { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    protected virtual Expression VisitMethodCall(MethodCallExpression );
    internal static int (int );
}
internal static class  : object {
    private static AssemblyName ;
    private static ModuleBuilder ;
    private static Dictionary`2<string, Tuple`2<string, Type>> ;
    private static ();
    public static object Create(List`1<Tuple`2<string, object>> values);
    public static Expression (List`1<Tuple`2<string, Expression>> );
    private static string (List`1<Tuple`2<string, Type>> );
    public static Type (List`1<Tuple`2<string, Type>> );
}
internal class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    internal static string ;
    public static string ;
    public static string ;
    private static ();
}
internal class  : ExpressionVisitor {
    public string ;
    protected virtual Expression VisitBinary(BinaryExpression );
}
internal static class  : object {
    [CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<DbContext, List`1<Action`1<DbContext>>> ;
    public static ConditionalWeakTable`2<DbContext, List`1<Action`1<DbContext>>>  { get; public set; }
    private static ();
    [CompilerGeneratedAttribute]
public static ConditionalWeakTable`2<DbContext, List`1<Action`1<DbContext>>> get_();
    [CompilerGeneratedAttribute]
public static void set_(ConditionalWeakTable`2<DbContext, List`1<Action`1<DbContext>>> value);
    public static List`1<Action`1<DbContext>> (DbContext );
}
[DefaultMemberAttribute("Item")]
internal class  : DbDataReader {
    public List`1<int> ;
    public int ;
    public DbDataReader ;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public bool HasRows { get; }
    public (DbDataReader );
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool get_HasRows();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual bool GetBoolean(int );
    public virtual byte GetByte(int );
    public virtual long GetBytes(int , long , Byte[] , int , int );
    public virtual char GetChar(int );
    public virtual long GetChars(int , long , Char[] , int , int );
    public virtual Guid GetGuid(int );
    public virtual short GetInt16(int );
    public virtual int GetInt32(int );
    public virtual long GetInt64(int );
    public virtual DateTime GetDateTime(int );
    public virtual string GetString(int );
    public virtual decimal GetDecimal(int );
    public virtual double GetDouble(int );
    public virtual float GetFloat(int );
    public virtual string GetName(int );
    public virtual int GetValues(Object[] );
    public virtual bool IsDBNull(int );
    public virtual int GetOrdinal(string );
    public virtual string GetDataTypeName(int );
    public virtual Type GetFieldType(int );
    public virtual object GetValue(int ordinal);
    public virtual IEnumerator GetEnumerator();
}
internal class `1 : object {
    public static string ;
    public Expression`1<Func`2<, object>> ;
    public Action`1<SelfHierarchyListOptions`1<>> ;
    public IQueryable`1<> ;
    public bool ;
    public static List`1<string> ;
    public `1(IQueryable`1<> , Expression`1<Func`2<, object>> , Action`1<SelfHierarchyListOptions`1<>> );
    private static `1();
    public List`1<> Execute();
    public DbCommand CreateCommand(DbContext context, SelfHierarchyListOptions`1<> options);
    public List`1<> (DbContext , DbCommand , SelfHierarchyListOptions`1<> );
    internal static string (DbContext , SelfHierarchyListOptions`1<> );
}
internal static class  : object {
    public static object ;
    public static object ;
    public static Type ;
    public static void (object , object );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static  (Dictionary`2<string, > this, string );
}
internal class  : object {
    public Dictionary`2<string, > ;
    public List`1<> ;
    public  ;
    public int ;
    public  ;
    internal HashSet`1<> ;
    internal Dictionary`2<string, > ;
    public List`1<> ;
    public Func`2<, > ;
    public Func`2<int, object> ;
    public  ;
    public Action`3<int, string, object> ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private int ;
    public int FieldCount { get; private set; }
    private object System.Data.IDataRecord.Item { get; }
    private object System.Data.IDataRecord.Item { get; }
    public int Depth { get; private set; }
    public bool IsClosed { get; private set; }
    public int RecordsAffected { get; private set; }
    public (int );
    public sealed virtual void Dispose();
    public sealed virtual string GetName(int );
    public sealed virtual string GetDataTypeName(int );
    public sealed virtual Type GetFieldType(int );
    public sealed virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] );
    public sealed virtual int GetOrdinal(string );
    public sealed virtual bool GetBoolean(int );
    public sealed virtual byte GetByte(int );
    public sealed virtual long GetBytes(int , long , Byte[] , int , int );
    public sealed virtual char GetChar(int );
    public sealed virtual long GetChars(int , long , Char[] , int , int );
    public sealed virtual Guid GetGuid(int );
    public sealed virtual short GetInt16(int );
    public sealed virtual int GetInt32(int );
    public sealed virtual long GetInt64(int );
    public sealed virtual float GetFloat(int );
    public sealed virtual double GetDouble(int );
    public sealed virtual string GetString(int );
    public sealed virtual decimal GetDecimal(int );
    public sealed virtual DateTime GetDateTime(int );
    public sealed virtual IDataReader GetData(int );
    public sealed virtual bool IsDBNull(int );
    [CompilerGeneratedAttribute]
public sealed virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
private void set_FieldCount(int value);
    private sealed virtual override object System.Data.IDataRecord.get_Item(int i);
    private sealed virtual override object System.Data.IDataRecord.get_Item(string name);
    public sealed virtual void Close();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Depth();
    [CompilerGeneratedAttribute]
private void set_Depth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
private void set_RecordsAffected(int value);
    public sealed virtual void SetValue(int position,  accessor, object value);
    public sealed virtual object GetValue( accessor);
    public sealed virtual void (List`1<> );
    public sealed virtual object (int );
    public  ();
    public  (string );
}
internal class  : object {
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private int ;
    public Type  { get; public set; }
    public string  { get; public set; }
    public int  { get; internal set; }
    public (string );
    public (string , Type );
    [CompilerGeneratedAttribute]
public Type get_();
    [CompilerGeneratedAttribute]
public void set_(Type value);
    [CompilerGeneratedAttribute]
public string get_();
    [CompilerGeneratedAttribute]
public void set_(string value);
    [CompilerGeneratedAttribute]
public int get_();
    [CompilerGeneratedAttribute]
internal void set_(int value);
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    private  ;
    [CompilerGeneratedAttribute]
private List`1<> ;
    public List`1<>  { get; public set; }
    public int Count { get; }
    public  Item { get; }
    public ( );
    [CompilerGeneratedAttribute]
public List`1<> get_();
    [CompilerGeneratedAttribute]
public void set_(List`1<> value);
    public int get_Count();
    public  get_Item(int columnIndex);
    public sealed virtual IEnumerator`1<> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add( dataColumn);
    public void Add(string columnName);
    public void Add(string columnName, Type dataType);
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    public  ;
    public List`1<object> ;
    public object Item { get; public set; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public ( );
    public ( , Object[] );
    public object get_Item(int columnIndex);
    public void set_Item(int columnIndex, object value);
    public object get_Item(string columnName);
    public void set_Item(string columnName, object value);
    public object get_Item( dataColumn);
    public void set_Item( dataColumn, object value);
}
internal class  : object {
    public  ;
    public List`1<> ;
    public int Count { get; }
    public ( );
    public int get_Count();
    public sealed virtual IEnumerator`1<> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class  : object {
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; }
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static MethodInfo get_();
    internal static void (DbContext this, Type , IEnumerable`1<object> , Action`1<BulkOperation> , BulkOperationActionType );
    internal static Task (DbContext this, Type , IEnumerable`1<object> , Action`1<BulkOperation> , CancellationToken , BulkOperationActionType );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
internal static void (DbCommand , DbParameterCollection );
    [ExtensionAttribute]
internal static int (ObjectContext , DbCommand , DbContext , bool );
    [AsyncStateMachineAttribute("/")]
[ExtensionAttribute]
internal static Task`1<int> (ObjectContext , DbCommand , CancellationToken , DbContext , bool );
    internal static List`1<> (ObjectQuery );
    internal static void (List`1<> , Array , string );
}
internal class  : object {
    public static void ( , SchemaEntityType , bool , List`1<string> , bool );
    public static void ( , EntityContainerAssociationSet );
    public static  (DbContext this, List`1<> ,  , SchemaEntityType , int , List`1<object> , bool , List`1<string> , bool );
    public static void ( ,  );
    public static void ( ,  );
}
internal class  : object {
    public static void (DataTable , SchemaEntityType , bool );
    public static void (DataTable , EntityContainerAssociationSet );
    public static void (DbContext this, List`1<> , DataTable , SchemaEntityType , List`1<object> , bool );
    public static void (DataTable , EntityContainerAssociationSet , List`1<ObjectStateEntry> );
}
internal class  : object {
    internal static Func`2<object, object> (Type , string );
    internal static Func`2<object, object> (List`1<Tuple`2<Type, PropertyInfo>> );
    internal static Func`2<object, bool> (List`1<Tuple`2<Type, PropertyInfo>> );
    internal static Action`2<object, object> (List`1<Tuple`2<Type, PropertyInfo>> );
}
internal static class  : object {
    internal static int (int , int );
    internal static int (int , int , int );
    internal static int (int , int , int , int );
    internal static int (int , int , int , int , int );
    internal static int (int , int , int , int , int , int );
    internal static int (int , int , int , int , int , int , int );
    internal static int (int , int , int , int , int , int , int , int );
    internal static int (List`1<int> );
    internal static int (object );
    internal static int (object , object );
    internal static int (object , object , object );
    internal static int (object , object , object , object );
    internal static int (object , object , object , object , object );
    internal static int (object , object , object , object , object , object );
    internal static int (object , object , object , object , object , object , object );
    internal static int (object , object , object , object , object , object , object , object );
    internal static int (List`1<object> );
}
internal class  : object {
    internal List`1<EntityContainerAssociationSet> ;
    internal List`1<EntityContainerEntitySet> ;
    internal List`1<EntityContainerAssociationSet> ;
    internal List`1<EntityContainerEntitySet> ;
    internal List`1<EntityContainerAssociationSet> ;
    internal List`1<EntityContainerEntitySet> ;
    internal List`1<EntityContainerAssociationSet> ;
    internal List`1<EntityContainerEntitySet> ;
    internal List`1<EntityContainerEntitySet> ;
}
internal class `1 : object {
    internal static string ;
    public string ;
    public string ;
    public DbCommand ;
    public DbContext ;
    public DbModel ;
    public bool ;
    public bool ;
    public SchemaEntityType ;
    public ObjectContext ;
    public IQueryable`1<> ;
    public string ;
    private Expression`1<Func`2<, object>> ;
    public IQueryable`1<object> ;
    public string ;
    public bool ;
    public bool ;
    public bool ;
    public bool ;
    public bool ;
    public bool ;
    public bool ;
    public bool ;
    public bool ;
    public bool ;
    private List`1<string> ;
    public Type ;
    public int Execute(IQueryable`1<> query, Action`1<BatchInsert`1<>> batchInsertBuilder);
    public Task`1<int> ExecuteAsync(IQueryable`1<> query, Action`1<BatchInsert`1<>> batchInsertBuilder, CancellationToken cancellationToken);
    public BatchInsert`1<> (IQueryable`1<> , Action`1<BatchInsert`1<>> );
    public void ();
    public void ();
    public Expression`1<Func`2<, object>> (Expression`1<Func`2<, object>> );
    public void ();
    internal string (string );
    [CompilerGeneratedAttribute]
private string ( );
    [CompilerGeneratedAttribute]
private string (string );
    [CompilerGeneratedAttribute]
private string (MemberInfo );
}
internal class  : object {
    internal BulkOperation ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private Action`1<DbCommand> ;
    [CompilerGeneratedAttribute]
private string ;
    public int BatchSize { get; public set; }
    public int  { get; public set; }
    public bool  { get; public set; }
    public Action`1<DbCommand>  { get; public set; }
    public string  { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BatchSize();
    [CompilerGeneratedAttribute]
public void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
public int get_();
    [CompilerGeneratedAttribute]
public void set_(int value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    [CompilerGeneratedAttribute]
public Action`1<DbCommand> get_();
    [CompilerGeneratedAttribute]
public void set_(Action`1<DbCommand> value);
    [CompilerGeneratedAttribute]
public string get_();
    [CompilerGeneratedAttribute]
public void set_(string value);
    public int (IQueryable`1<> , SchemaEntityType , Type );
    public int (IQueryable`1<> );
    internal DbCommand (ObjectQuery , SchemaEntityType );
    internal DbCommand CreateCommand(ObjectQuery query, SchemaEntityType entity);
    public string (string , bool , bool );
}
internal static class  : object {
    public static void (List`1<SchemaEntityType> , DbModel , SchemaEntityType );
    public static List`1<SchemaEntityType> (Assembly , DbModel , SchemaEntityType , bool );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static IQueryable (IQueryable`1<> this,  );
    [ExtensionAttribute]
public static ObjectQuery (IQueryable`1<> this,  );
}
internal class  : object {
    internal BulkOperation ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    [CompilerGeneratedAttribute]
private Action`1<DbCommand> ;
    [CompilerGeneratedAttribute]
private bool ;
    public Action`1<DbCommand>  { get; public set; }
    public bool  { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<DbCommand> get_();
    [CompilerGeneratedAttribute]
public void set_(Action`1<DbCommand> value);
    [CompilerGeneratedAttribute]
public bool get_();
    [CompilerGeneratedAttribute]
public void set_(bool value);
    public int (IQueryable`1<> , Expression`1<Func`2<, >> , SchemaEntityType , Type );
    public int (IQueryable`1<> , Expression`1<Func`2<, >> );
    internal DbCommand CreateCommand(ObjectQuery query, SchemaEntityType entity, List`1<Tuple`2<string, object>> values);
    internal List`1<Tuple`3<SchemaEntityType, string, object>> (IQueryable`1<> , Expression`1<Func`2<, >> , SchemaEntityType`1<> );
    internal List`1<Tuple`2<string, object>> (IQueryable`1<> , Expression`1<Func`2<, >> , SchemaEntityType`1<> );
    public string (string , bool , bool , bool );
    public Dictionary`2<string, object> (Expression`1<Func`2<, >> );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static DbCommand (ObjectContext );
    [ExtensionAttribute]
public static void (DbParameter this, DbParameter );
    [ExtensionAttribute]
public static void (DbParameter this, DbParameter , string );
    [ExtensionAttribute]
public static Tuple`2<string, DbParameterCollection> (ObjectQuery , bool );
    [ExtensionAttribute]
public static EntityTransaction (EntityConnection );
    [ExtensionAttribute]
public static DbInterceptionContext (ObjectContext );
    [ExtensionAttribute]
public static DbTransaction (EntityConnection );
    [ExtensionAttribute]
internal static ObjectQuery (IQueryable );
    [ExtensionAttribute]
internal static IQueryable (IQueryable`1<> , List`1<string> );
    [ExtensionAttribute]
internal static IQueryable (IQueryable , Type , List`1<string> );
    [ExtensionAttribute]
internal static DbContext (IQueryable`1<> );
    [ExtensionAttribute]
internal static ObjectQuery`1<> (IQueryable`1<> );
    [ExtensionAttribute]
public static bool (ObjectContext this);
    [ExtensionAttribute]
public static bool (DbContext this);
}
internal class  : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<MemberInfo> ;
    [CompilerGeneratedAttribute]
private MemberInfo ;
    public ReadOnlyCollection`1<MemberInfo>  { get; internal set; }
    public MemberInfo  { get; public set; }
    public (ReadOnlyCollection`1<MemberInfo> );
    public (MemberInfo );
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<MemberInfo> get_();
    [CompilerGeneratedAttribute]
internal void set_(ReadOnlyCollection`1<MemberInfo> value);
    [CompilerGeneratedAttribute]
public MemberInfo get_();
    [CompilerGeneratedAttribute]
public void set_(MemberInfo value);
    public object GetValue(object obj);
    public T GetValue(object obj);
    public void SetValue(object obj, object value);
    public virtual string ToString();
}
internal class  : object {
    internal static void (SchemaMapping , Schema , Schema );
    internal static void (SchemaMapping , Schema , Schema );
    internal static void (SchemaMapping , Schema , Schema );
    internal static void (SchemaMapping , Schema , Schema );
    internal static void (SchemaMapping , Schema , Schema );
    internal static void (SchemaMapping , Schema , Schema );
    internal static void (SchemaMapping , Schema , Schema );
    internal static void (Schema , ComplexPropertyMapping );
    internal static void (MappingFragment , ComplexPropertyMapping , string );
    internal static void (SchemaMapping , Schema , Schema );
    internal static Type (SchemaEntityType , string );
    internal static Property (SchemaEntityType , string );
    internal static void (DbModel , SchemaMapping , Schema , Schema );
    public static void (DbModel , SchemaMapping , Schema , Schema );
    public static void (DbModel , SchemaMapping , Schema , Schema );
    internal static void (Schema , bool );
    internal static void (Schema , bool );
    internal static void (Schema , bool );
    internal static void (Schema , bool );
    internal static void (Schema , bool );
    internal static void (Schema , bool );
    internal static void (Schema , bool );
    internal static DbModel (DbContext );
    public static DbModel (XDocument );
    internal static DbModel (DbContext );
    public static DbModel (string , string , string , string );
    internal static void (Schema );
    public static DbModel (DbContext );
}
