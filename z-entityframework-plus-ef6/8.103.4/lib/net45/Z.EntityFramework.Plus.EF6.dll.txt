public class Z.EntityFramework.Plus.Audit : object {
    private Lazy`1<AuditConfiguration> _configuration;
    private static Func`2<ObjectStateEntry, object> RelationshipEntryKey0;
    private static Func`2<ObjectStateEntry, object> RelationshipEntryKey1;
    [CompilerGeneratedAttribute]
private List`1<AuditEntry> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    public List`1<AuditEntry> Entries { get; public set; }
    public string CreatedBy { get; public set; }
    public AuditConfiguration Configuration { get; }
    internal AuditConfiguration CurrentOrDefaultConfiguration { get; }
    public static object GetRelationshipEntryKey0(ObjectStateEntry entry);
    public static object GetRelationshipEntryKey1(ObjectStateEntry entry);
    [CompilerGeneratedAttribute]
public List`1<AuditEntry> get_Entries();
    [CompilerGeneratedAttribute]
public void set_Entries(List`1<AuditEntry> value);
    [CompilerGeneratedAttribute]
public string get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(string value);
    public AuditConfiguration get_Configuration();
    internal AuditConfiguration get_CurrentOrDefaultConfiguration();
    public void PostSaveChanges();
    public void PreSaveChanges(DbContext context);
    public static void AuditEntityAdded(Audit audit, ObjectStateEntry objectStateEntry);
    public static void AuditEntityAdded(AuditEntry auditEntry, ObjectStateEntry objectStateEntry, DbUpdatableDataRecord record, string prefix);
    internal static object DefaultValue(Type type);
    public static void AuditEntityDeleted(Audit audit, ObjectStateEntry objectStateEntry);
    public static void AuditEntityDeleted(AuditEntry entry, ObjectStateEntry objectStateEntry, DbDataRecord record, string prefix);
    public static void AuditEntityModified(Audit audit, ObjectStateEntry objectStateEntry, AuditEntryState state);
    public static void AuditEntityModified(Audit audit, AuditEntry entry, ObjectStateEntry objectStateEntry, DbDataRecord orginalRecord, DbUpdatableDataRecord currentRecord, string prefix);
    public static void AuditRelationAdded(Audit audit, ObjectStateEntry objectStateEntry);
    public static void AuditRelationAdded(Audit audit, AuditEntry entry, ObjectStateEntry objectStateEntry);
    public static void AuditRelationDeleted(Audit audit, ObjectStateEntry objectStateEntry);
    public static void AuditRelationDeleted(Audit audit, AuditEntry entry, ObjectStateEntry objectStateEntry);
    public static void PostSaveChanges(Audit audit);
    public static void PreSaveChanges(Audit audit, DbContext context);
}
public class Z.EntityFramework.Plus.AuditConfiguration : object {
    [CompilerGeneratedAttribute]
private Func`2<Type, string> <EntityNameFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Type, string, string> <PropertyNameFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuditEntryFactoryArgs, AuditEntry> <AuditEntryFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuditEntryPropertyArgs, AuditEntryProperty> <AuditEntryPropertyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbContext, Audit> <AutoSavePreAction>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`4<object, string, object, Func`2<object, object>>> <EntityValueFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<object, Nullable`1<bool>>> <ExcludeIncludeEntityPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<ObjectStateEntry, Nullable`1<bool>>> <ExcludeIncludeByInstanceEntityPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`3<object, string, Nullable`1<bool>>> <ExcludeIncludePropertyPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<AuditEntry>> <MetaProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEntityAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEntityDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEntityModified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEntitySoftAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEntitySoftDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEntityAddedDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreRelationshipAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreRelationshipDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePropertyUnchanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePropertyAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEntityUnchanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, bool> <IsAuditedDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<object, bool>> <SoftAddedPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<object, bool>> <SoftDeletedPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Func`2<object, object>> <ValueFormatterDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeRelationshipIfOneExcluded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUtcDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNullForDBNullValue>k__BackingField;
    internal Func`2<Type, string> EntityNameFactory { get; internal set; }
    internal Func`3<Type, string, string> PropertyNameFactory { get; internal set; }
    public Func`2<AuditEntryFactoryArgs, AuditEntry> AuditEntryFactory { get; public set; }
    public Func`2<AuditEntryPropertyArgs, AuditEntryProperty> AuditEntryPropertyFactory { get; public set; }
    public Action`2<DbContext, Audit> AutoSavePreAction { get; public set; }
    public List`1<Func`4<object, string, object, Func`2<object, object>>> EntityValueFormatters { get; public set; }
    public List`1<Func`2<object, Nullable`1<bool>>> ExcludeIncludeEntityPredicates { get; public set; }
    public List`1<Func`2<ObjectStateEntry, Nullable`1<bool>>> ExcludeIncludeByInstanceEntityPredicates { get; public set; }
    public List`1<Func`3<object, string, Nullable`1<bool>>> ExcludeIncludePropertyPredicates { get; public set; }
    public List`1<Action`1<AuditEntry>> MetaProperties { get; public set; }
    public bool IgnoreEntityAdded { get; public set; }
    public bool IgnoreEntityDeleted { get; public set; }
    public bool IgnoreEntityModified { get; public set; }
    public bool IgnoreEntitySoftAdded { get; public set; }
    public bool IgnoreEntitySoftDeleted { get; public set; }
    public bool IgnoreEntityAddedDefaultValue { get; public set; }
    public bool IgnoreRelationshipAdded { get; public set; }
    public bool IgnoreRelationshipDeleted { get; public set; }
    public bool IgnorePropertyUnchanged { get; public set; }
    public bool IgnorePropertyAdded { get; public set; }
    public bool IgnoreEntityUnchanged { get; public set; }
    public ConcurrentDictionary`2<string, bool> IsAuditedDictionary { get; public set; }
    public List`1<Func`2<object, bool>> SoftAddedPredicates { get; public set; }
    public List`1<Func`2<object, bool>> SoftDeletedPredicates { get; public set; }
    public ConcurrentDictionary`2<string, Func`2<object, object>> ValueFormatterDictionary { get; public set; }
    public bool ExcludeRelationshipIfOneExcluded { get; public set; }
    public bool UseUtcDateTime { get; public set; }
    public bool UseNullForDBNullValue { get; public set; }
    [CompilerGeneratedAttribute]
internal Func`2<Type, string> get_EntityNameFactory();
    [CompilerGeneratedAttribute]
internal void set_EntityNameFactory(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
internal Func`3<Type, string, string> get_PropertyNameFactory();
    [CompilerGeneratedAttribute]
internal void set_PropertyNameFactory(Func`3<Type, string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<AuditEntryFactoryArgs, AuditEntry> get_AuditEntryFactory();
    [CompilerGeneratedAttribute]
public void set_AuditEntryFactory(Func`2<AuditEntryFactoryArgs, AuditEntry> value);
    [CompilerGeneratedAttribute]
public Func`2<AuditEntryPropertyArgs, AuditEntryProperty> get_AuditEntryPropertyFactory();
    [CompilerGeneratedAttribute]
public void set_AuditEntryPropertyFactory(Func`2<AuditEntryPropertyArgs, AuditEntryProperty> value);
    [CompilerGeneratedAttribute]
public Action`2<DbContext, Audit> get_AutoSavePreAction();
    [CompilerGeneratedAttribute]
public void set_AutoSavePreAction(Action`2<DbContext, Audit> value);
    [CompilerGeneratedAttribute]
public List`1<Func`4<object, string, object, Func`2<object, object>>> get_EntityValueFormatters();
    [CompilerGeneratedAttribute]
public void set_EntityValueFormatters(List`1<Func`4<object, string, object, Func`2<object, object>>> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<object, Nullable`1<bool>>> get_ExcludeIncludeEntityPredicates();
    [CompilerGeneratedAttribute]
public void set_ExcludeIncludeEntityPredicates(List`1<Func`2<object, Nullable`1<bool>>> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<ObjectStateEntry, Nullable`1<bool>>> get_ExcludeIncludeByInstanceEntityPredicates();
    [CompilerGeneratedAttribute]
public void set_ExcludeIncludeByInstanceEntityPredicates(List`1<Func`2<ObjectStateEntry, Nullable`1<bool>>> value);
    [CompilerGeneratedAttribute]
public List`1<Func`3<object, string, Nullable`1<bool>>> get_ExcludeIncludePropertyPredicates();
    [CompilerGeneratedAttribute]
public void set_ExcludeIncludePropertyPredicates(List`1<Func`3<object, string, Nullable`1<bool>>> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<AuditEntry>> get_MetaProperties();
    [CompilerGeneratedAttribute]
public void set_MetaProperties(List`1<Action`1<AuditEntry>> value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEntityAdded();
    [CompilerGeneratedAttribute]
public void set_IgnoreEntityAdded(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEntityDeleted();
    [CompilerGeneratedAttribute]
public void set_IgnoreEntityDeleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEntityModified();
    [CompilerGeneratedAttribute]
public void set_IgnoreEntityModified(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEntitySoftAdded();
    [CompilerGeneratedAttribute]
public void set_IgnoreEntitySoftAdded(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEntitySoftDeleted();
    [CompilerGeneratedAttribute]
public void set_IgnoreEntitySoftDeleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEntityAddedDefaultValue();
    [CompilerGeneratedAttribute]
public void set_IgnoreEntityAddedDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreRelationshipAdded();
    [CompilerGeneratedAttribute]
public void set_IgnoreRelationshipAdded(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreRelationshipDeleted();
    [CompilerGeneratedAttribute]
public void set_IgnoreRelationshipDeleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnorePropertyUnchanged();
    [CompilerGeneratedAttribute]
public void set_IgnorePropertyUnchanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnorePropertyAdded();
    [CompilerGeneratedAttribute]
public void set_IgnorePropertyAdded(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEntityUnchanged();
    [CompilerGeneratedAttribute]
public void set_IgnoreEntityUnchanged(bool value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, bool> get_IsAuditedDictionary();
    [CompilerGeneratedAttribute]
public void set_IsAuditedDictionary(ConcurrentDictionary`2<string, bool> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<object, bool>> get_SoftAddedPredicates();
    [CompilerGeneratedAttribute]
public void set_SoftAddedPredicates(List`1<Func`2<object, bool>> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<object, bool>> get_SoftDeletedPredicates();
    [CompilerGeneratedAttribute]
public void set_SoftDeletedPredicates(List`1<Func`2<object, bool>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Func`2<object, object>> get_ValueFormatterDictionary();
    [CompilerGeneratedAttribute]
public void set_ValueFormatterDictionary(ConcurrentDictionary`2<string, Func`2<object, object>> value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeRelationshipIfOneExcluded();
    [CompilerGeneratedAttribute]
public void set_ExcludeRelationshipIfOneExcluded(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseUtcDateTime();
    [CompilerGeneratedAttribute]
public void set_UseUtcDateTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNullForDBNullValue();
    [CompilerGeneratedAttribute]
public void set_UseNullForDBNullValue(bool value);
    public AuditConfiguration Clone();
    public void DataAnnotationDisplayName();
    internal string DataAnnotationEntityDisplayName(Type o);
    internal string DataAnnotationPropertyDisplayName(Type o, string memberName);
    public AuditConfiguration ExcludeByEntry(Func`2<ObjectStateEntry, bool> excludeEntityPredicate);
    public void ExcludeDataAnnotation();
    public AuditConfiguration ExcludeByInstance(Func`2<object, bool> excludeEntityPredicate);
    public AuditConfiguration Exclude(Func`2<object, bool> excludeEntityPredicate);
    public AuditConfiguration Exclude();
    public AuditConfiguration IncludeByEntry(Func`2<ObjectStateEntry, bool> includeEntityPredicate);
    public AuditConfiguration IncludeByInstance(Func`2<object, bool> includeEntityPredicate);
    public AuditConfiguration MetaProperty(string propertyName, Func`2<T, object> oldValueFactory, Func`2<T, object> newValueFactory);
    public AuditConfiguration ExcludeProperty();
    public AuditConfiguration ExcludeProperty();
    public AuditConfiguration ExcludeProperty(Expression`1<Func`2<T, object>> propertySelector);
    public AuditConfiguration Format(Expression`1<Func`2<T, object>> propertySelector, Func`2<object, object> formatter);
    public AuditConfiguration FormatType(Func`2<T, object> formatter);
    public string FormatValue(object entity, string propertyName, object currentValue);
    public AuditEntryState GetEntityModifiedState(ObjectStateEntry entry);
    public void IncludeDataAnnotation();
    public AuditConfiguration Include(Func`2<object, bool> includeEntityPredicate);
    public AuditConfiguration Include();
    public AuditConfiguration IncludeProperty();
    public AuditConfiguration IncludeProperty();
    public AuditConfiguration IncludeProperty(Expression`1<Func`2<T, object>> propertySelector);
    public bool IsAuditedEntity(ObjectStateEntry entry);
    public bool IsAuditedProperty(ObjectStateEntry entry, string propertyName);
    public AuditConfiguration SoftAdded(Func`2<object, bool> softAddPredicate);
    public AuditConfiguration SoftAdded(Func`2<T, bool> softAddPredicate);
    public AuditConfiguration SoftDeleted(Func`2<object, bool> softDeletePredicate);
    public AuditConfiguration SoftDeleted(Func`2<T, bool> softDeletePredicate);
}
[AttributeUsageAttribute("32767")]
public class Z.EntityFramework.Plus.AuditDisplayAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public AuditDisplayAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Z.EntityFramework.Plus.AuditEntry : object {
    [CompilerGeneratedAttribute]
private int <AuditEntryID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DelayedKey>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectStateEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntitySetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Audit <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AuditEntryProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditEntryState <State>k__BackingField;
    [ColumnAttribute]
public int AuditEntryID { get; public set; }
    [ColumnAttribute]
[MaxLengthAttribute("255")]
public string CreatedBy { get; public set; }
    [ColumnAttribute]
public DateTime CreatedDate { get; public set; }
    [NotMappedAttribute]
internal object DelayedKey { get; internal set; }
    [NotMappedAttribute]
public object Entity { get; public set; }
    [NotMappedAttribute]
public ObjectStateEntry Entry { get; public set; }
    [ColumnAttribute]
[MaxLengthAttribute("255")]
public string EntitySetName { get; public set; }
    [ColumnAttribute]
[MaxLengthAttribute("255")]
public string EntityTypeName { get; public set; }
    [NotMappedAttribute]
public Audit Parent { get; public set; }
    public List`1<AuditEntryProperty> Properties { get; public set; }
    [ColumnAttribute]
public AuditEntryState State { get; public set; }
    [ColumnAttribute]
[MaxLengthAttribute("255")]
public string StateName { get; public set; }
    public void Build(Audit parent, ObjectStateEntry entry);
    [CompilerGeneratedAttribute]
public int get_AuditEntryID();
    [CompilerGeneratedAttribute]
public void set_AuditEntryID(int value);
    [CompilerGeneratedAttribute]
public string get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
internal object get_DelayedKey();
    [CompilerGeneratedAttribute]
internal void set_DelayedKey(object value);
    [CompilerGeneratedAttribute]
public object get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(object value);
    [CompilerGeneratedAttribute]
public ObjectStateEntry get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(ObjectStateEntry value);
    [CompilerGeneratedAttribute]
public string get_EntitySetName();
    [CompilerGeneratedAttribute]
public void set_EntitySetName(string value);
    [CompilerGeneratedAttribute]
public string get_EntityTypeName();
    [CompilerGeneratedAttribute]
public void set_EntityTypeName(string value);
    [CompilerGeneratedAttribute]
public Audit get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(Audit value);
    [CompilerGeneratedAttribute]
public List`1<AuditEntryProperty> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<AuditEntryProperty> value);
    [CompilerGeneratedAttribute]
public AuditEntryState get_State();
    [CompilerGeneratedAttribute]
public void set_State(AuditEntryState value);
    public string get_StateName();
    public void set_StateName(string value);
}
public class Z.EntityFramework.Plus.AuditEntryFactoryArgs : object {
    [CompilerGeneratedAttribute]
private Audit <Audit>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditEntryState <AuditEntryState>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectStateEntry <ObjectStateEntry>k__BackingField;
    public Audit Audit { get; public set; }
    public AuditEntryState AuditEntryState { get; public set; }
    public ObjectStateEntry ObjectStateEntry { get; public set; }
    public AuditEntryFactoryArgs(Audit audit, ObjectStateEntry objectStateEntry, AuditEntryState auditEntryState);
    [CompilerGeneratedAttribute]
public Audit get_Audit();
    [CompilerGeneratedAttribute]
public void set_Audit(Audit value);
    [CompilerGeneratedAttribute]
public AuditEntryState get_AuditEntryState();
    [CompilerGeneratedAttribute]
public void set_AuditEntryState(AuditEntryState value);
    [CompilerGeneratedAttribute]
public ObjectStateEntry get_ObjectStateEntry();
    [CompilerGeneratedAttribute]
public void set_ObjectStateEntry(ObjectStateEntry value);
}
public class Z.EntityFramework.Plus.AuditEntryProperty : object {
    [CompilerGeneratedAttribute]
private int <AuditEntryPropertyID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AuditEntryID>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditEntry <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValueSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DbUpdatableDataRecord <DbUpdatableDataRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DbUpdatableDataRecordPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKey>k__BackingField;
    [ColumnAttribute]
public int AuditEntryPropertyID { get; public set; }
    [ColumnAttribute]
public int AuditEntryID { get; public set; }
    public AuditEntry Parent { get; public set; }
    [ColumnAttribute]
[MaxLengthAttribute("255")]
public string PropertyName { get; public set; }
    [ColumnAttribute]
[MaxLengthAttribute("255")]
public string RelationName { get; public set; }
    [NotMappedAttribute]
public object NewValue { get; public set; }
    [NotMappedAttribute]
public bool IsValueSet { get; public set; }
    [NotMappedAttribute]
public string InternalPropertyName { get; public set; }
    [ColumnAttribute("NewValue")]
public string NewValueFormatted { get; public set; }
    [NotMappedAttribute]
public object OldValue { get; public set; }
    [NotMappedAttribute]
internal DbUpdatableDataRecord DbUpdatableDataRecord { get; internal set; }
    [NotMappedAttribute]
internal int DbUpdatableDataRecordPosition { get; internal set; }
    [NotMappedAttribute]
public bool IsKey { get; public set; }
    [ColumnAttribute("OldValue")]
public string OldValueFormatted { get; public set; }
    public void Build(AuditEntry parent, string propertyName, object oldValue, DbUpdatableDataRecord dbUpdatableDataRecord, int dbUpdatableDataRecordPosition);
    public void Build(AuditEntry parent, string relationName, string propertyName, object oldValue, DbUpdatableDataRecord dbUpdatableDataRecord, int dbUpdatableDataRecordPosition);
    public void Build(AuditEntry parent, string propertyName, object oldValue, object newValue);
    public void Build(AuditEntry parent, string relationName, string propertyName, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public int get_AuditEntryPropertyID();
    [CompilerGeneratedAttribute]
public void set_AuditEntryPropertyID(int value);
    [CompilerGeneratedAttribute]
public int get_AuditEntryID();
    [CompilerGeneratedAttribute]
public void set_AuditEntryID(int value);
    [CompilerGeneratedAttribute]
public AuditEntry get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(AuditEntry value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_RelationName();
    [CompilerGeneratedAttribute]
public void set_RelationName(string value);
    [CompilerGeneratedAttribute]
public object get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(object value);
    [CompilerGeneratedAttribute]
public bool get_IsValueSet();
    [CompilerGeneratedAttribute]
public void set_IsValueSet(bool value);
    [CompilerGeneratedAttribute]
public string get_InternalPropertyName();
    [CompilerGeneratedAttribute]
public void set_InternalPropertyName(string value);
    public string get_NewValueFormatted();
    public void set_NewValueFormatted(string value);
    [CompilerGeneratedAttribute]
public object get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(object value);
    [CompilerGeneratedAttribute]
internal DbUpdatableDataRecord get_DbUpdatableDataRecord();
    [CompilerGeneratedAttribute]
internal void set_DbUpdatableDataRecord(DbUpdatableDataRecord value);
    [CompilerGeneratedAttribute]
internal int get_DbUpdatableDataRecordPosition();
    [CompilerGeneratedAttribute]
internal void set_DbUpdatableDataRecordPosition(int value);
    [CompilerGeneratedAttribute]
public bool get_IsKey();
    [CompilerGeneratedAttribute]
public void set_IsKey(bool value);
    public string get_OldValueFormatted();
    public void set_OldValueFormatted(string value);
}
public class Z.EntityFramework.Plus.AuditEntryPropertyArgs : object {
    [CompilerGeneratedAttribute]
private ObjectStateEntry <ObjectStateEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditEntry <AuditEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    public ObjectStateEntry ObjectStateEntry { get; public set; }
    public AuditEntry AuditEntry { get; public set; }
    public string RelationName { get; public set; }
    public string PropertyName { get; public set; }
    public object OldValue { get; public set; }
    public object NewValue { get; public set; }
    public AuditEntryPropertyArgs(AuditEntry parent, ObjectStateEntry objectStateEntry, string propertyName, object oldValue, object newValue);
    public AuditEntryPropertyArgs(AuditEntry parent, ObjectStateEntry objectStateEntry, string relationName, string propertyName, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public ObjectStateEntry get_ObjectStateEntry();
    [CompilerGeneratedAttribute]
public void set_ObjectStateEntry(ObjectStateEntry value);
    [CompilerGeneratedAttribute]
public AuditEntry get_AuditEntry();
    [CompilerGeneratedAttribute]
public void set_AuditEntry(AuditEntry value);
    [CompilerGeneratedAttribute]
public string get_RelationName();
    [CompilerGeneratedAttribute]
public void set_RelationName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public object get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(object value);
    [CompilerGeneratedAttribute]
public object get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(object value);
}
public enum Z.EntityFramework.Plus.AuditEntryState : Enum {
    public int value__;
    public static AuditEntryState EntityAdded;
    public static AuditEntryState EntityDeleted;
    public static AuditEntryState EntityModified;
    public static AuditEntryState EntitySoftAdded;
    public static AuditEntryState EntitySoftDeleted;
    public static AuditEntryState RelationshipAdded;
    public static AuditEntryState RelationshipDeleted;
    public static AuditEntryState EntityCurrent;
}
[AttributeUsageAttribute("32767")]
public class Z.EntityFramework.Plus.AuditExcludeAttribute : Attribute {
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.AuditExtensions : object {
    [ExtensionAttribute]
public static int SaveChanges(DbContext context, Audit audit);
    [ExtensionAttribute]
public static Task`1<int> SaveChangesAsync(DbContext context, Audit audit);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.AuditExtensions/<SaveChangesAsync>d__2")]
[ExtensionAttribute]
public static Task`1<int> SaveChangesAsync(DbContext context, Audit audit, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IQueryable`1<AuditEntry> Where(DbSet`1<AuditEntry> set, T entry);
    [ExtensionAttribute]
public static IQueryable`1<TAuditEntry> Where(DbSet`1<TAuditEntry> set, T entry);
    [ExtensionAttribute]
public static IQueryable`1<AuditEntry> Where(DbSet`1<AuditEntry> set, Object[] keyValues);
    [ExtensionAttribute]
public static IQueryable`1<TAuditEntry> Where(DbSet`1<TAuditEntry> set, Object[] keyValues);
    [ExtensionAttribute]
public static IQueryable`1<AuditEntry> Where(DbSet`1<AuditEntry> set, AuditConfiguration auditConfiguration, T entry);
    [ExtensionAttribute]
public static IQueryable`1<TAuditEntry> Where(DbSet`1<TAuditEntry> set, AuditConfiguration auditConfiguration, T entry);
    [ExtensionAttribute]
public static IQueryable`1<AuditEntry> Where(DbSet`1<AuditEntry> set, AuditConfiguration auditConfiguration, Object[] keyValues);
    [ExtensionAttribute]
public static IQueryable`1<TAuditEntry> Where(DbSet`1<TAuditEntry> set, AuditConfiguration auditConfiguration, Object[] keyValues);
    [ExtensionAttribute]
public static string GetAuditDisplayName(Type this);
    [ExtensionAttribute]
public static string GetAuditDisplayName(Type this, AuditConfiguration auditConfiguration);
}
[AttributeUsageAttribute("32767")]
public class Z.EntityFramework.Plus.AuditIncludeAttribute : Attribute {
}
public static class Z.EntityFramework.Plus.AuditManager : object {
    [CompilerGeneratedAttribute]
private static AuditConfiguration <DefaultConfiguration>k__BackingField;
    public static AuditConfiguration DefaultConfiguration { get; public set; }
    private static AuditManager();
    [CompilerGeneratedAttribute]
public static AuditConfiguration get_DefaultConfiguration();
    [CompilerGeneratedAttribute]
public static void set_DefaultConfiguration(AuditConfiguration value);
}
public abstract class Z.EntityFramework.Plus.BaseQueryDbSetFilter : object {
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryDbSetFilterContext <OwnerFilterContext>k__BackingField;
    public Type ElementType { get; public set; }
    public bool IsDefaultEnabled { get; public set; }
    public QueryDbSetFilterContext OwnerFilterContext { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDefaultEnabled(bool value);
    [CompilerGeneratedAttribute]
public QueryDbSetFilterContext get_OwnerFilterContext();
    [CompilerGeneratedAttribute]
public void set_OwnerFilterContext(QueryDbSetFilterContext value);
    public virtual object ApplyFilter(object query);
    public void Disable();
    public void Disable();
    public void Disable(Type[] types);
    public void Enable();
    public void Enable();
    public void Enable(Type[] types);
    public virtual object GetFilter();
    public virtual BaseQueryDbSetFilter Clone(QueryDbSetFilterContext filterContext);
}
public abstract class Z.EntityFramework.Plus.BaseQueryDbSetFilterQueryable : object {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseQueryDbSetFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryDbSetFilterSet <FilterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalQuery>k__BackingField;
    public DbContext Context { get; public set; }
    public List`1<BaseQueryDbSetFilter> Filters { get; public set; }
    public QueryDbSetFilterSet FilterSet { get; public set; }
    public object OriginalQuery { get; public set; }
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(DbContext value);
    [CompilerGeneratedAttribute]
public List`1<BaseQueryDbSetFilter> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(List`1<BaseQueryDbSetFilter> value);
    [CompilerGeneratedAttribute]
public QueryDbSetFilterSet get_FilterSet();
    [CompilerGeneratedAttribute]
public void set_FilterSet(QueryDbSetFilterSet value);
    [CompilerGeneratedAttribute]
public object get_OriginalQuery();
    [CompilerGeneratedAttribute]
public void set_OriginalQuery(object value);
    public void DisableFilter(BaseQueryDbSetFilter filter);
    public void EnableFilter(BaseQueryDbSetFilter filter);
    public virtual void UpdateInternalQuery();
}
public abstract class Z.EntityFramework.Plus.BaseQueryFilterInterceptor : object {
    public string UniqueKey;
    public List`1<Func`2<Type, Nullable`1<bool>>> IsFilterEnabledList;
    [CompilerGeneratedAttribute]
private QueryFilterContextInterceptor <OwnerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public QueryFilterContextInterceptor OwnerContext { get; public set; }
    public bool IsDefaultEnabled { get; public set; }
    public Type ElementType { get; public set; }
    [CompilerGeneratedAttribute]
public QueryFilterContextInterceptor get_OwnerContext();
    [CompilerGeneratedAttribute]
public void set_OwnerContext(QueryFilterContextInterceptor value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDefaultEnabled(bool value);
    [CompilerGeneratedAttribute]
public Type get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(Type value);
    public abstract virtual DbExpression GetDbExpression(DbContext context, Type type);
    public void Disable();
    public void Disable();
    public void Disable(Type[] types);
    public void Enable();
    public void Enable();
    public void Enable(Type[] types);
    public bool IsTypeEnabled(Type type);
}
public abstract class Z.EntityFramework.Plus.BaseQueryFuture : object {
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryFutureBatch <OwnerBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectQuery <Query>k__BackingField;
    public bool HasValue { get; protected set; }
    public QueryFutureBatch OwnerBatch { get; public set; }
    public ObjectQuery Query { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    [CompilerGeneratedAttribute]
protected void set_HasValue(bool value);
    [CompilerGeneratedAttribute]
public QueryFutureBatch get_OwnerBatch();
    [CompilerGeneratedAttribute]
public void set_OwnerBatch(QueryFutureBatch value);
    [CompilerGeneratedAttribute]
public ObjectQuery get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(ObjectQuery value);
    public virtual void SetResult(DbDataReader reader);
    public IEnumerator`1<T> GetQueryEnumerator(DbDataReader reader);
    public virtual void GetResultDirectly();
    public virtual Task GetResultDirectlyAsync(CancellationToken cancellationToken);
}
public abstract class Z.EntityFramework.Plus.BaseQueryIncludeFilterChild : object {
    public virtual IQueryable CreateIncludeQuery(IQueryable rootQuery);
    public abstract virtual Expression GetFilter();
}
public abstract class Z.EntityFramework.Plus.BaseQueryIncludeOptimizedChild : object {
    [CompilerGeneratedAttribute]
private bool <IsLazy>k__BackingField;
    public bool IsLazy { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsLazy();
    [CompilerGeneratedAttribute]
public void set_IsLazy(bool value);
    public virtual void CreateIncludeQuery(IQueryable rootQuery);
    public abstract virtual Expression GetFilter();
    public abstract virtual IQueryable GetFilteredQuery(IQueryable query);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.BatchDeleteExtensions : object {
    [ExtensionAttribute]
public static int Delete(IQueryable`1<T> query);
    [ExtensionAttribute]
public static int Delete(IQueryable`1<T> query, Action`1<BatchDelete> batchDeleteBuilder);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IQueryable`1<T> query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IQueryable`1<T> query, Action`1<BatchDelete> batchDeleteBuilder, CancellationToken cancellationToken);
}
public class Z.EntityFramework.Plus.BatchDeleteManager : object {
    public static Action`1<BatchDelete> BatchDeleteBuilder { get; public set; }
    public static bool UseMySqlSchema { get; public set; }
    public static bool IsInMemoryQuery { get; public set; }
    private static BatchDeleteManager();
    public static Action`1<BatchDelete> get_BatchDeleteBuilder();
    public static void set_BatchDeleteBuilder(Action`1<BatchDelete> value);
    public static bool get_UseMySqlSchema();
    public static void set_UseMySqlSchema(bool value);
    public static bool get_IsInMemoryQuery();
    public static void set_IsInMemoryQuery(bool value);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.BatchUpdateExtensions : object {
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, Expression`1<Func`2<T, T>> updateFactory);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, Expression`1<Func`2<T, T>> updateFactory, Action`1<BatchUpdate> batchUpdateBuilder);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, ExpandoObject expandoObject);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, ExpandoObject expandoObject, Action`1<BatchUpdate> batchUpdateBuilder);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, IDictionary`2<string, object> dictionary);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, IDictionary`2<string, object> dictionary, Action`1<BatchUpdate> batchUpdateBuilder);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateExpression);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateExpression, Action`1<BatchUpdate> batchUpdateBuilder);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, Expression`1<Func`2<T, T>> updateFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, Expression`1<Func`2<T, T>> updateFactory, Action`1<BatchUpdate> batchUpdateBuilder, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__10`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, ExpandoObject expandoObject);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, ExpandoObject expandoObject, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__12`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, ExpandoObject expandoObject, Action`1<BatchUpdate> batchUpdateBuilder);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__13`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, ExpandoObject expandoObject, Action`1<BatchUpdate> batchUpdateBuilder, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__14`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, IDictionary`2<string, object> dictionary);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__15`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, IDictionary`2<string, object> dictionary, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__16`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, IDictionary`2<string, object> dictionary, Action`1<BatchUpdate> batchUpdateBuilder);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__17`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, IDictionary`2<string, object> dictionary, Action`1<BatchUpdate> batchUpdateBuilder, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__18`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateExpression);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__19`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__20`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateExpression, Action`1<BatchUpdate> batchUpdateBuilder);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.BatchUpdateExtensions/<UpdateAsync>d__21`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> query, Expression`1<Func`2<T, object>> updateExpression, Action`1<BatchUpdate> batchUpdateBuilder, CancellationToken cancellationToken);
}
public class Z.EntityFramework.Plus.BatchUpdateManager : object {
    public static Action`1<BatchUpdate> BatchUpdateBuilder { get; public set; }
    public static bool UseMySqlSchema { get; public set; }
    public static bool IsInMemoryQuery { get; public set; }
    private static BatchUpdateManager();
    public static Action`1<BatchUpdate> get_BatchUpdateBuilder();
    public static void set_BatchUpdateBuilder(Action`1<BatchUpdate> value);
    public static bool get_UseMySqlSchema();
    public static void set_UseMySqlSchema(bool value);
    public static bool get_IsInMemoryQuery();
    public static void set_IsInMemoryQuery(bool value);
    public static void Hook(Expression`1<Func`2<T, T>> hook);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.DbContextExtensions : object {
    [ExtensionAttribute]
public static String[] GetKeyNames(DbContext context);
    [ExtensionAttribute]
public static ObjectContext GetObjectContext(DbContext this);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.DbSetExtensions : object {
    [ExtensionAttribute]
public static void ExpireCache(DbSet`1<T> dbSet);
}
internal static class Z.EntityFramework.Plus.DynamicAnonymousType : object {
    private static AssemblyName AssemblyName;
    private static ModuleBuilder ModuleBuilder;
    private static Dictionary`2<string, Tuple`2<string, Type>> BuiltTypes;
    private static DynamicAnonymousType();
    public static object Create(List`1<Tuple`2<string, object>> values);
    public static Expression CreateExpression(List`1<Tuple`2<string, Expression>> values);
    private static string GetTypeKey(List`1<Tuple`2<string, Type>> fields);
    public static Type GetDynamicType(List`1<Tuple`2<string, Type>> fields);
}
public static class Z.EntityFramework.Plus.EntityFrameworkPlusManager : object {
    unknown static bool IsCommunity {public set; }
    public static void set_IsCommunity(bool value);
}
internal class Z.EntityFramework.Plus.ExceptionMessage : object {
    public static string GeneralException;
    public static string Unsupported_Provider;
    public static string BatchOperations_MaxKeyColumns;
    public static string Audit_DbSet_NotFound;
    public static string Audit_Key_Null;
    public static string Audit_Key_OutOfBound;
    public static string BatchOperations_PropertyNotFound;
    public static string BatchOperations_AssemblyNotFound;
    public static string Unexpected_ClientSideEvaluation;
    public static string QueryCache_FirstTagNullOrEmpty;
    public static string QueryCache_UseTagsNullOrEmpty;
    public static string QueryCache_IsCommandInfoOptionalForCacheKey_Invalid;
    public static string QueryFilter_SetFilteredNotFound;
    public static string QueryFilter_SetFilteredManyFound;
    public static string QueryIncludeFilter_ArgumentExpression;
    public static string QueryIncludeFilter_CreateQueryElement;
    public static string QueryIncludeFilter_Include;
    public static string QueryIncludeOptimized_NodeReduce;
    public static string QueryIncludeOptimized_ByPath_MissingPath;
    public static string QueryIncludeOptimized_ArgumentExpression;
    public static string QueryIncludeOptimized_CreateQueryElement;
    public static string QueryIncludeOptimized_Include;
    private static ExceptionMessage();
}
internal class Z.EntityFramework.Plus.ExpressionVisitor`1 : ExpressionVisitor {
    private Func`2<TExpression, Expression> _visitor;
    public ExpressionVisitor`1(Func`2<TExpression, Expression> visitor);
    public virtual Expression Visit(Expression expression);
    public static Expression Visit(Expression expression, Func`2<TExpression, Expression> visitor);
    public static Expression`1<TDelegate> Visit(Expression`1<TDelegate> expression, Func`2<TExpression, Expression> visitor);
}
[ExtensionAttribute]
internal static class Z.EntityFramework.Plus.ExpressionVisitorExtensions : object {
    [ExtensionAttribute]
public static Expression Visit(Expression expression, Func`2<TExpression, Expression> visitor);
    [ExtensionAttribute]
public static TReturn Visit(TReturn expression, Func`2<TExpression, Expression> visitor);
    [ExtensionAttribute]
public static Expression`1<TDelegate> Visit(Expression`1<TDelegate> expression, Func`2<TExpression, Expression> visitor);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.InterceptorCommandExecutingExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> InterceptorCommandExecuting(IQueryable`1<T> this, Action`1<DbCommand> action);
    [ExtensionAttribute]
public static IQueryable`1<T> ReplaceAllLeftJoinByInnerJoin(IQueryable`1<T> this);
}
[ExtensionAttribute]
internal static class Z.EntityFramework.Plus.InternalExtensions : object {
    [ExtensionAttribute]
internal static void AddOrAppend(Dictionary`2<TKey, List`1<TElement>> dictionary, TKey key, TElement element);
    [ExtensionAttribute]
public static EntityConnection GetEntityConnection(Database this);
    [ExtensionAttribute]
public static DbTransaction GetDbTransaction(EntityConnection entityConnection);
    [ExtensionAttribute]
public static EntityTransaction GetEntityTransaction(EntityConnection entityConnection);
    [ExtensionAttribute]
public static DbConnection GetStoreConnection(EntityConnection entityConnection);
    [ExtensionAttribute]
public static DbTransaction GetStoreTransaction(EntityConnection entityConnection);
    [ExtensionAttribute]
public static DbContext GetDbContext(IDbSet`1<TEntity> dbSet);
    [ExtensionAttribute]
internal static ObjectQuery GetObjectQuerySafe(IQueryable query);
    [ExtensionAttribute]
internal static IQueryable SelectByName(IQueryable`1<T> query, List`1<string> names);
    [ExtensionAttribute]
internal static DbContext GetDbContext(IQueryable`1<T> query);
    [ExtensionAttribute]
public static DbCommand CreateStoreCommand(ObjectContext context);
    [ExtensionAttribute]
public static EntitySet GetEntitySet(ObjectContext context);
    [ExtensionAttribute]
public static object GetObjectQuery(object set, Type elementType);
    [ExtensionAttribute]
public static Nullable`1<int> GetModelCacheKey(DbContext this);
    [ExtensionAttribute]
public static bool IsInMemoryEffortQueryContext(DbContext this);
    [ExtensionAttribute]
public static bool IsInMemoryEffortQueryContext(IQueryable`1<T> q);
    [ExtensionAttribute]
public static DbContext GetDbContext(ObjectContext context);
    [ExtensionAttribute]
public static DbInterceptionContext GetInterceptionContext(ObjectContext context);
    [ExtensionAttribute]
public static bool IsInMemoryEffortQueryContext(ObjectContext this);
    [ExtensionAttribute]
public static Tuple`2<string, DbParameterCollection> GetCommandTextAndParameters(ObjectQuery objectQuery, bool isAsync);
    [ExtensionAttribute]
internal static List`1<PropertyInfo> GetDbSetProperties(DbContext context);
    [ExtensionAttribute]
public static void CopyFrom(DbParameter this, DbParameter from);
    [ExtensionAttribute]
public static void CopyFrom(DbParameter this, DbParameter from, string newParameterName);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> Order(IQueryable`1<TSource> source, string propertyName, bool useOrderBy, bool ascending, object comparer);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, string propertyName);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, string propertyName, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, string propertyName);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, string propertyName, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> ThenBy(IQueryable`1<TSource> source, string propertyName);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> ThenBy(IQueryable`1<TSource> source, string propertyName, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> ThenByDescending(IQueryable`1<TSource> source, string propertyName);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<TSource> ThenByDescending(IQueryable`1<TSource> source, string propertyName, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static object IfDbNullThenNull(object item);
    [ExtensionAttribute]
public static Type GetDbSetElementType(Type type);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr, bool recursif);
    [ExtensionAttribute]
internal static int GetVersion(List`1<TSource> source);
    [ExtensionAttribute]
internal static PropertyOrFieldAccessor GetPropertyOrFieldAccessor(LambdaExpression this);
    [ExtensionAttribute]
internal static PropertyOrFieldAccessor[] GetPropertyOrFieldAccessors(LambdaExpression this);
    [ExtensionAttribute]
internal static Expression RemoveConvert(Expression this);
    [ExtensionAttribute]
internal static MemberInfo GetPropertyOrField(Expression this, ParameterExpression parameterExpression);
    [ExtensionAttribute]
internal static PropertyOrFieldAccessor GetPropertyOrFieldAccess(Expression this, ParameterExpression parameterExpression);
}
internal class Z.EntityFramework.Plus.LazyAsyncEnumerator`1 : object {
    private Func`2<CancellationToken, Task`1<IEnumerable`1<T>>> _getObjectResultAsync;
    private IEnumerator`1<T> _objectResultAsyncEnumerator;
    public T Current { get; }
    private object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current { get; }
    public LazyAsyncEnumerator`1(Func`2<CancellationToken, Task`1<IEnumerable`1<T>>> getObjectResultAsync);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.LazyAsyncEnumerator`1/<FirstMoveNextAsync>d__9")]
private Task`1<bool> FirstMoveNextAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.ProjectExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Project(IQueryable`1<T> query, Expression`1<Func`2<T, object>> expression);
}
internal class Z.EntityFramework.Plus.PropertyOrFieldAccessor : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<MemberInfo> <PropertyOrFieldPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <PropertyOrField>k__BackingField;
    public ReadOnlyCollection`1<MemberInfo> PropertyOrFieldPaths { get; internal set; }
    public MemberInfo PropertyOrField { get; public set; }
    public PropertyOrFieldAccessor(ReadOnlyCollection`1<MemberInfo> propertyOrFieldPaths);
    public PropertyOrFieldAccessor(MemberInfo property);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<MemberInfo> get_PropertyOrFieldPaths();
    [CompilerGeneratedAttribute]
internal void set_PropertyOrFieldPaths(ReadOnlyCollection`1<MemberInfo> value);
    [CompilerGeneratedAttribute]
public MemberInfo get_PropertyOrField();
    [CompilerGeneratedAttribute]
public void set_PropertyOrField(MemberInfo value);
    public object GetValue(object obj);
    public T GetValue(object obj);
    public void SetValue(object obj, object value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.PublicInternalExtensions : object {
    [ExtensionAttribute]
public static ObjectQuery GetObjectQuery(IQueryable query);
    [ExtensionAttribute]
public static ObjectQuery`1<T> GetObjectQuery(IQueryable`1<T> query);
}
internal class Z.EntityFramework.Plus.QueryAddOrAppendOrderExpressionVisitor`1 : ExpressionVisitor {
    private List`1<string> ExistingKeyNames;
    private bool Ascending;
    private object Comparer;
    private bool IsOrderByMethodFound;
    private String[] KeyNames;
    private bool VisitAddToRoot;
    [CompilerGeneratedAttribute]
private bool <AddToRoot>k__BackingField;
    public bool AddToRoot { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AddToRoot();
    [CompilerGeneratedAttribute]
public void set_AddToRoot(bool value);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    public IQueryable`1<TSource> OrderBy(IQueryable`1<TSource> query, String[] keyNames);
    public IQueryable`1<TSource> OrderBy(IQueryable`1<TSource> query, String[] keyNames, object comparer);
    public IQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> query, String[] keyNames);
    public IQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> query, String[] keyNames, object comparer);
    public IQueryable`1<TSource> AddOrAppendOrderBy(IQueryable`1<TSource> query, String[] keyNames, bool ascending, object comparer);
    public MethodCallExpression AddOrAppendOrderBy(Expression expression, string propertyName, bool useOrderBy);
}
public class Z.EntityFramework.Plus.QueryAddOrAppendOrderExpressionVisitor`2 : ExpressionVisitor {
    private bool Ascending;
    private IComparer`1<TKey> Comparer;
    private Expression`1<Func`2<TSource, TKey>> KeySelector;
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    public IQueryable`1<TSource> OrderBy(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector);
    public IQueryable`1<TSource> OrderBy(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    public IQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector);
    public IQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    private IQueryable`1<TSource> AddOrAppendOrderBy(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector, bool ascending, IComparer`1<TKey> comparer);
    public Expression AppendThenByExpression(Expression expression);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryAddOrAppendOrderExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> AddOrAppendOrderBy(IQueryable`1<T> query, String[] columns);
    [ExtensionAttribute]
public static IQueryable`1<T> AddOrAppendOrderBy(IQueryable`1<T> query, IComparer`1<TKey> comparer, String[] columns);
    [ExtensionAttribute]
public static IQueryable`1<TSource> AddOrAppendOrderBy(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQueryable`1<TSource> AddOrAppendOrderBy(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<T> AddOrAppendOrderByDescending(IQueryable`1<T> query, String[] columns);
    [ExtensionAttribute]
public static IQueryable`1<T> AddOrAppendOrderByDescending(IQueryable`1<T> query, IComparer`1<TKey> comparer, String[] columns);
    [ExtensionAttribute]
public static IQueryable`1<TSource> AddOrAppendOrderByDescending(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQueryable`1<TSource> AddOrAppendOrderByDescending(IQueryable`1<TSource> query, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<T> AddToRootOrAppendOrderBy(IQueryable`1<T> query, String[] columns);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryCacheExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(DbRawSqlQuery`1<T> query, CacheItemPolicy policy, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(DbRawSqlQuery`1<T> query, DateTimeOffset absoluteExpiration, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(DbRawSqlQuery`1<T> query, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(DbSqlQuery`1<T> query, CacheItemPolicy policy, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(DbSqlQuery`1<T> query, DateTimeOffset absoluteExpiration, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(DbSqlQuery`1<T> query, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(IQueryable`1<T> query, CacheItemPolicy policy, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(IQueryable`1<T> query, DateTimeOffset absoluteExpiration, String[] tags);
    [ExtensionAttribute]
public static IEnumerable`1<T> FromCache(IQueryable`1<T> query, String[] tags);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryCacheExtensions/<FromCacheAsync>d__9`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> FromCacheAsync(IQueryable`1<T> query, CacheItemPolicy policy, CancellationToken cancellationToken, String[] tags);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> FromCacheAsync(IQueryable`1<T> query, CacheItemPolicy policy, String[] tags);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryCacheExtensions/<FromCacheAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> FromCacheAsync(IQueryable`1<T> query, DateTimeOffset absoluteExpiration, CancellationToken cancellationToken, String[] tags);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> FromCacheAsync(IQueryable`1<T> query, DateTimeOffset absoluteExpiration, String[] tags);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> FromCacheAsync(IQueryable`1<T> query, String[] tags);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> FromCacheAsync(IQueryable`1<T> query, CancellationToken cancellationToken, String[] tags);
    [ExtensionAttribute]
public static T FromCache(QueryDeferred`1<T> query, CacheItemPolicy policy, String[] tags);
    [ExtensionAttribute]
public static T FromCache(QueryDeferred`1<T> query, DateTimeOffset absoluteExpiration, String[] tags);
    [ExtensionAttribute]
public static T FromCache(QueryDeferred`1<T> query, String[] tags);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryCacheExtensions/<FromCacheAsync>d__18`1")]
[ExtensionAttribute]
public static Task`1<T> FromCacheAsync(QueryDeferred`1<T> query, CacheItemPolicy policy, CancellationToken cancellationToken, String[] tags);
    [ExtensionAttribute]
public static Task`1<T> FromCacheAsync(QueryDeferred`1<T> query, CacheItemPolicy policy, String[] tags);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryCacheExtensions/<FromCacheAsync>d__20`1")]
[ExtensionAttribute]
public static Task`1<T> FromCacheAsync(QueryDeferred`1<T> query, DateTimeOffset absoluteExpiration, CancellationToken cancellationToken, String[] tags);
    [ExtensionAttribute]
public static Task`1<T> FromCacheAsync(QueryDeferred`1<T> query, DateTimeOffset absoluteExpiration, String[] tags);
    [ExtensionAttribute]
public static Task`1<T> FromCacheAsync(QueryDeferred`1<T> query, String[] tags);
    [ExtensionAttribute]
public static Task`1<T> FromCacheAsync(QueryDeferred`1<T> query, CancellationToken cancellationToken, String[] tags);
}
public class Z.EntityFramework.Plus.QueryCacheInterceptor : object {
    public sealed virtual void ConnectionGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public sealed virtual void ConnectionGot(DbTransaction transaction, DbTransactionInterceptionContext`1<DbConnection> interceptionContext);
    public sealed virtual void IsolationLevelGetting(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public sealed virtual void IsolationLevelGot(DbTransaction transaction, DbTransactionInterceptionContext`1<IsolationLevel> interceptionContext);
    public sealed virtual void Committing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public sealed virtual void Committed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public sealed virtual void Disposing(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public sealed virtual void Disposed(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public sealed virtual void RollingBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
    public sealed virtual void RolledBack(DbTransaction transaction, DbTransactionInterceptionContext interceptionContext);
}
public class Z.EntityFramework.Plus.QueryCacheItemTracker : object {
    [CompilerGeneratedAttribute]
private bool <HookAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <MaterializedEntities>k__BackingField;
    public bool HookAdded { get; public set; }
    public ObjectContext Context { get; public set; }
    public List`1<object> MaterializedEntities { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HookAdded();
    [CompilerGeneratedAttribute]
public void set_HookAdded(bool value);
    [CompilerGeneratedAttribute]
public ObjectContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ObjectContext value);
    [CompilerGeneratedAttribute]
public List`1<object> get_MaterializedEntities();
    [CompilerGeneratedAttribute]
public void set_MaterializedEntities(List`1<object> value);
    public sealed virtual void Dispose();
    public QueryCacheItemTracker Initialize(DbRawSqlQuery`1<T> query);
    public QueryCacheItemTracker Initialize(IQueryable`1<T> query);
    public QueryCacheItemTracker Initialize(QueryDeferred`1<T> query);
    public void AddHook();
    public void OnMaterialized(object sender, ObjectMaterializedEventArgs args);
}
public static class Z.EntityFramework.Plus.QueryCacheManager : object {
    [CompilerGeneratedAttribute]
private static ObjectCache <Cache>k__BackingField;
    private static CacheItemPolicy _defaultCacheItemPolicy;
    private static Func`1<CacheItemPolicy> _cacheItemPolicyFactory;
    [CompilerGeneratedAttribute]
private static bool <AutoAddModelCacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CachePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CacheTypeSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<IQueryable, String[], string> <CacheKeyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IncludeConnectionInCacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, List`1<string>> <CacheTags>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseFirstTagAsCacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseTagsAsCacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsCommandInfoOptionalForCacheKey>k__BackingField;
    internal static bool _isAutoExpireCacheEnabled;
    [CompilerGeneratedAttribute]
private static QueryCacheInterceptor <AutoResetCacheInterceptor>k__BackingField;
    internal static object AutoExpireCacheEnabledLock;
    [CompilerGeneratedAttribute]
private static string <PrefixTagSet>k__BackingField;
    public static ObjectCache Cache { get; public set; }
    public static CacheItemPolicy DefaultCacheItemPolicy { get; public set; }
    public static Func`1<CacheItemPolicy> CacheItemPolicyFactory { get; public set; }
    public static bool AutoAddModelCacheKey { get; public set; }
    public static string CachePrefix { get; public set; }
    public static string CacheTypeSuffix { get; public set; }
    public static Func`3<IQueryable, String[], string> CacheKeyFactory { get; public set; }
    public static bool IsEnabled { get; public set; }
    public static bool IncludeConnectionInCacheKey { get; public set; }
    public static ConcurrentDictionary`2<string, List`1<string>> CacheTags { get; }
    public static bool UseFirstTagAsCacheKey { get; public set; }
    public static bool UseTagsAsCacheKey { get; public set; }
    public static bool IsCommandInfoOptionalForCacheKey { get; public set; }
    internal static QueryCacheInterceptor AutoResetCacheInterceptor { get; internal set; }
    public static bool IsAutoExpireCacheEnabled { get; public set; }
    public static string PrefixTagSet { get; public set; }
    private static QueryCacheManager();
    [CompilerGeneratedAttribute]
public static ObjectCache get_Cache();
    [CompilerGeneratedAttribute]
public static void set_Cache(ObjectCache value);
    internal static T AddOrGetExisting(string key, T item, CacheItemPolicy policy);
    internal static T AddOrGetExisting(string key, T item, DateTimeOffset absoluteExpiration);
    internal static object AddOrGetExistingDeferred(string key, object item, CacheItemPolicy policy);
    internal static object AddOrGetExistingDeferred(string key, object item, DateTimeOffset absoluteExpiration);
    internal static object Get(string key);
    internal static object GetDeferred(string key);
    public static CacheItemPolicy get_DefaultCacheItemPolicy();
    public static void set_DefaultCacheItemPolicy(CacheItemPolicy value);
    public static Func`1<CacheItemPolicy> get_CacheItemPolicyFactory();
    public static void set_CacheItemPolicyFactory(Func`1<CacheItemPolicy> value);
    [CompilerGeneratedAttribute]
public static bool get_AutoAddModelCacheKey();
    [CompilerGeneratedAttribute]
public static void set_AutoAddModelCacheKey(bool value);
    [CompilerGeneratedAttribute]
public static string get_CachePrefix();
    [CompilerGeneratedAttribute]
public static void set_CachePrefix(string value);
    [CompilerGeneratedAttribute]
public static string get_CacheTypeSuffix();
    [CompilerGeneratedAttribute]
public static void set_CacheTypeSuffix(string value);
    [CompilerGeneratedAttribute]
public static Func`3<IQueryable, String[], string> get_CacheKeyFactory();
    [CompilerGeneratedAttribute]
public static void set_CacheKeyFactory(Func`3<IQueryable, String[], string> value);
    [CompilerGeneratedAttribute]
public static bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IncludeConnectionInCacheKey();
    [CompilerGeneratedAttribute]
public static void set_IncludeConnectionInCacheKey(bool value);
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<string, List`1<string>> get_CacheTags();
    [CompilerGeneratedAttribute]
public static bool get_UseFirstTagAsCacheKey();
    [CompilerGeneratedAttribute]
public static void set_UseFirstTagAsCacheKey(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseTagsAsCacheKey();
    [CompilerGeneratedAttribute]
public static void set_UseTagsAsCacheKey(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsCommandInfoOptionalForCacheKey();
    [CompilerGeneratedAttribute]
public static void set_IsCommandInfoOptionalForCacheKey(bool value);
    [CompilerGeneratedAttribute]
internal static QueryCacheInterceptor get_AutoResetCacheInterceptor();
    [CompilerGeneratedAttribute]
internal static void set_AutoResetCacheInterceptor(QueryCacheInterceptor value);
    public static bool get_IsAutoExpireCacheEnabled();
    public static void set_IsAutoExpireCacheEnabled(bool value);
    [CompilerGeneratedAttribute]
public static string get_PrefixTagSet();
    [CompilerGeneratedAttribute]
public static void set_PrefixTagSet(string value);
    internal static void AddCacheTag(QueryCacheItemTracker handler, string cacheKey, String[] tags);
    internal static void AddCacheTag(string cacheKey, String[] tags);
    public static void ExpireAll();
    public static void ExpireType(Type type);
    public static void ExpireType();
    public static void ExpireModelCacheKey(DbContext context);
    public static void ExpireTag(String[] tags);
    public static string GetCacheKey(IQueryable query, String[] tags, bool isAsync);
    public static string GetCacheKey(DbSqlQuery`1<T> query, String[] tags);
    public static string GetCacheKey(DbRawSqlQuery`1<T> query, String[] tags);
    public static string GetConnectionStringForCacheKey(IQueryable query);
    public static string GetCacheKey(QueryDeferred`1<T> query, String[] tags, bool isAsync);
}
public class Z.EntityFramework.Plus.QueryDbSetFilter`1 : BaseQueryDbSetFilter {
    [CompilerGeneratedAttribute]
private Func`2<IQueryable`1<T>, IQueryable`1<T>> <Filter>k__BackingField;
    public Func`2<IQueryable`1<T>, IQueryable`1<T>> Filter { get; public set; }
    public QueryDbSetFilter`1(QueryDbSetFilterContext ownerFilterContext, Func`2<IQueryable`1<T>, IQueryable`1<T>> filter);
    [CompilerGeneratedAttribute]
public Func`2<IQueryable`1<T>, IQueryable`1<T>> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<IQueryable`1<T>, IQueryable`1<T>> value);
    public virtual object ApplyFilter(object query);
    public virtual object GetFilter();
    public virtual BaseQueryDbSetFilter Clone(QueryDbSetFilterContext filterContext);
}
public class Z.EntityFramework.Plus.QueryDbSetFilterContext : object {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, BaseQueryDbSetFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<QueryDbSetFilterSet>> <FilterSetByType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<QueryDbSetFilterSet> <FilterSets>k__BackingField;
    public DbContext Context { get; public set; }
    public Dictionary`2<object, BaseQueryDbSetFilter> Filters { get; public set; }
    public Dictionary`2<Type, List`1<QueryDbSetFilterSet>> FilterSetByType { get; public set; }
    public List`1<QueryDbSetFilterSet> FilterSets { get; public set; }
    public QueryDbSetFilterContext(DbContext context);
    public QueryDbSetFilterContext(DbContext context, bool isGenericContext);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(DbContext value);
    [CompilerGeneratedAttribute]
public Dictionary`2<object, BaseQueryDbSetFilter> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(Dictionary`2<object, BaseQueryDbSetFilter> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, List`1<QueryDbSetFilterSet>> get_FilterSetByType();
    [CompilerGeneratedAttribute]
public void set_FilterSetByType(Dictionary`2<Type, List`1<QueryDbSetFilterSet>> value);
    [CompilerGeneratedAttribute]
public List`1<QueryDbSetFilterSet> get_FilterSets();
    [CompilerGeneratedAttribute]
public void set_FilterSets(List`1<QueryDbSetFilterSet> value);
    public BaseQueryDbSetFilter AddFilter(object key, Func`2<IQueryable`1<T>, IQueryable`1<T>> filter);
    public IQueryable`1<T> ApplyFilter(IQueryable`1<T> query);
    public IQueryable`1<T> ApplyFilter(IQueryable`1<T> query, Object[] keys);
    public void DisableFilter(BaseQueryDbSetFilter filter, Type[] types);
    public void EnableFilter(BaseQueryDbSetFilter filter, Type[] types);
    public BaseQueryDbSetFilter GetFilter(object key);
    public void LoadGenericContextInfo(DbContext context);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryDbSetFilterExtensions : object {
    [ExtensionAttribute]
public static BaseQueryDbSetFilter DbSetFilter(DbContext context, object key);
    [ExtensionAttribute]
public static BaseQueryDbSetFilter DbSetFilter(DbContext context, Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    [ExtensionAttribute]
public static BaseQueryDbSetFilter DbSetFilter(DbContext context, object key, Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    [ExtensionAttribute]
public static IQueryable`1<T> AsNoDbSetFilter(IQueryable`1<T> query);
    [ExtensionAttribute]
public static IQueryable`1<T> DbSetFilter(IDbSet`1<T> query, Object[] keys);
}
public static class Z.EntityFramework.Plus.QueryDbSetFilterManager : object {
    private static object GenericFilterContextLock;
    [CompilerGeneratedAttribute]
private static Dictionary`2<object, BaseQueryDbSetFilter> <GlobalFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Tuple`2<BaseQueryDbSetFilter, Action`1<BaseQueryDbSetFilter>>> <GlobalInitializeFilterActions>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, QueryDbSetFilterContext> <CacheGenericFilterContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<DbContext, QueryDbSetFilterContext> <CacheWeakFilterContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<IQueryable, BaseQueryDbSetFilterQueryable> <CacheWeakFilterQueryable>k__BackingField;
    public static Dictionary`2<object, BaseQueryDbSetFilter> GlobalFilters { get; }
    public static List`1<Tuple`2<BaseQueryDbSetFilter, Action`1<BaseQueryDbSetFilter>>> GlobalInitializeFilterActions { get; public set; }
    public static Dictionary`2<string, QueryDbSetFilterContext> CacheGenericFilterContext { get; public set; }
    public static ConditionalWeakTable`2<DbContext, QueryDbSetFilterContext> CacheWeakFilterContext { get; public set; }
    public static ConditionalWeakTable`2<IQueryable, BaseQueryDbSetFilterQueryable> CacheWeakFilterQueryable { get; public set; }
    private static QueryDbSetFilterManager();
    [CompilerGeneratedAttribute]
public static Dictionary`2<object, BaseQueryDbSetFilter> get_GlobalFilters();
    [CompilerGeneratedAttribute]
public static List`1<Tuple`2<BaseQueryDbSetFilter, Action`1<BaseQueryDbSetFilter>>> get_GlobalInitializeFilterActions();
    [CompilerGeneratedAttribute]
public static void set_GlobalInitializeFilterActions(List`1<Tuple`2<BaseQueryDbSetFilter, Action`1<BaseQueryDbSetFilter>>> value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, QueryDbSetFilterContext> get_CacheGenericFilterContext();
    [CompilerGeneratedAttribute]
public static void set_CacheGenericFilterContext(Dictionary`2<string, QueryDbSetFilterContext> value);
    [CompilerGeneratedAttribute]
public static ConditionalWeakTable`2<DbContext, QueryDbSetFilterContext> get_CacheWeakFilterContext();
    [CompilerGeneratedAttribute]
public static void set_CacheWeakFilterContext(ConditionalWeakTable`2<DbContext, QueryDbSetFilterContext> value);
    [CompilerGeneratedAttribute]
public static ConditionalWeakTable`2<IQueryable, BaseQueryDbSetFilterQueryable> get_CacheWeakFilterQueryable();
    [CompilerGeneratedAttribute]
public static void set_CacheWeakFilterQueryable(ConditionalWeakTable`2<IQueryable, BaseQueryDbSetFilterQueryable> value);
    public static QueryDbSetFilterContext AddOrGetGenericFilterContext(DbContext context);
    public static QueryDbSetFilterContext AddOrGetFilterContext(DbContext context);
    public static BaseQueryDbSetFilterQueryable GetFilterQueryable(IQueryable query);
    public static BaseQueryDbSetFilter Filter(object key);
    public static BaseQueryDbSetFilter Filter(Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    public static BaseQueryDbSetFilter Filter(object key, Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    public static void InitilizeGlobalFilter(DbContext context);
}
public class Z.EntityFramework.Plus.QueryDbSetFilterQueryable`1 : BaseQueryDbSetFilterQueryable {
    public QueryDbSetFilterQueryable`1(DbContext context, QueryDbSetFilterSet filterSet, IQueryable`1<T> originalQuery);
    public virtual void UpdateInternalQuery();
}
public class Z.EntityFramework.Plus.QueryDbSetFilterSet : object {
    [CompilerGeneratedAttribute]
private Lazy`1<Func`4<DbContext, QueryDbSetFilterSet, object, BaseQueryDbSetFilterQueryable>> <CreateFilterQueryableCompiled>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <DbSetProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<Func`2<DbContext, IQueryable>> <GetDbSetCompiled>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<Action`2<DbContext, ObjectQuery>> <UpdateInternalQueryCompiled>k__BackingField;
    public Lazy`1<Func`4<DbContext, QueryDbSetFilterSet, object, BaseQueryDbSetFilterQueryable>> CreateFilterQueryableCompiled { get; public set; }
    public PropertyInfo DbSetProperty { get; public set; }
    public Type ElementType { get; public set; }
    public Lazy`1<Func`2<DbContext, IQueryable>> GetDbSetCompiled { get; public set; }
    public Lazy`1<Action`2<DbContext, ObjectQuery>> UpdateInternalQueryCompiled { get; public set; }
    public QueryDbSetFilterSet(PropertyInfo dbSetProperty);
    [CompilerGeneratedAttribute]
public Lazy`1<Func`4<DbContext, QueryDbSetFilterSet, object, BaseQueryDbSetFilterQueryable>> get_CreateFilterQueryableCompiled();
    [CompilerGeneratedAttribute]
public void set_CreateFilterQueryableCompiled(Lazy`1<Func`4<DbContext, QueryDbSetFilterSet, object, BaseQueryDbSetFilterQueryable>> value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_DbSetProperty();
    [CompilerGeneratedAttribute]
public void set_DbSetProperty(PropertyInfo value);
    [CompilerGeneratedAttribute]
public Type get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(Type value);
    [CompilerGeneratedAttribute]
public Lazy`1<Func`2<DbContext, IQueryable>> get_GetDbSetCompiled();
    [CompilerGeneratedAttribute]
public void set_GetDbSetCompiled(Lazy`1<Func`2<DbContext, IQueryable>> value);
    [CompilerGeneratedAttribute]
public Lazy`1<Action`2<DbContext, ObjectQuery>> get_UpdateInternalQueryCompiled();
    [CompilerGeneratedAttribute]
public void set_UpdateInternalQueryCompiled(Lazy`1<Action`2<DbContext, ObjectQuery>> value);
    public BaseQueryDbSetFilterQueryable AddOrGetFilterQueryable(DbContext context);
    public Func`4<DbContext, QueryDbSetFilterSet, object, BaseQueryDbSetFilterQueryable> CompileCreateFilterQueryable();
    public Func`2<DbContext, IQueryable> CompileGetDbSet(PropertyInfo dbSetProperty);
    public Action`2<DbContext, ObjectQuery> CompileUpdateInternalQuery(PropertyInfo dbSetProperty);
}
public class Z.EntityFramework.Plus.QueryDeferred`1 : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryable`1<TResult> <Query>k__BackingField;
    public Expression Expression { get; protected internal set; }
    public IQueryable`1<TResult> Query { get; protected internal set; }
    public QueryDeferred`1(ObjectQuery query, Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
protected internal void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public IQueryable`1<TResult> get_Query();
    [CompilerGeneratedAttribute]
protected internal void set_Query(IQueryable`1<TResult> value);
    public TResult Execute();
    public Task`1<TResult> ExecuteAsync();
    public Task`1<TResult> ExecuteAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private TResult <ExecuteAsync>b__11_0();
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryDeferredExtensions : object {
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredAggregate(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func);
    [ExtensionAttribute]
public static QueryDeferred`1<TAccumulate> DeferredAggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func);
    [ExtensionAttribute]
public static QueryDeferred`1<TResult> DeferredAggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func, Expression`1<Func`2<TAccumulate, TResult>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<bool> DeferredAll(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<bool> DeferredAny(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<bool> DeferredAny(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredAverage(IQueryable`1<int> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredAverage(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredAverage(IQueryable`1<long> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredAverage(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<float> DeferredAverage(IQueryable`1<float> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<float>> DeferredAverage(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredAverage(IQueryable`1<double> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredAverage(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<decimal> DeferredAverage(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<decimal>> DeferredAverage(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<float> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<float>> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<decimal> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<decimal>> DeferredAverage(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<bool> DeferredContains(IQueryable`1<TSource> source, TSource item);
    [ExtensionAttribute]
public static QueryDeferred`1<bool> DeferredContains(IQueryable`1<TSource> source, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static QueryDeferred`1<int> DeferredCount(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<int> DeferredCount(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredElementAt(IQueryable`1<TSource> source, int index);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredElementAtOrDefault(IQueryable`1<TSource> source, int index);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredFirst(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredFirst(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredFirstOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredFirstOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredLast(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredLast(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredLastOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredLastOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<long> DeferredLongCount(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<long> DeferredLongCount(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredMax(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TResult> DeferredMax(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredMin(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TResult> DeferredMin(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<bool> DeferredSequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static QueryDeferred`1<bool> DeferredSequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredSingle(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredSingle(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredSingleOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static QueryDeferred`1<TSource> DeferredSingleOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static QueryDeferred`1<int> DeferredSum(IQueryable`1<int> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<int>> DeferredSum(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<long> DeferredSum(IQueryable`1<long> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<long>> DeferredSum(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<float> DeferredSum(IQueryable`1<float> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<float>> DeferredSum(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredSum(IQueryable`1<double> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredSum(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<decimal> DeferredSum(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<decimal>> DeferredSum(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static QueryDeferred`1<int> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<int>> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<long> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<long>> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<float> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<float>> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<double> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<double>> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<decimal> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static QueryDeferred`1<Nullable`1<decimal>> DeferredSum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    private static MethodInfo GetMethodInfo(Func`2<T1, T2> f, T1 unused1);
    private static MethodInfo GetMethodInfo(Func`3<T1, T2, T3> f, T1 unused1, T2 unused2);
    private static MethodInfo GetMethodInfo(Func`4<T1, T2, T3, T4> f, T1 unused1, T2 unused2, T3 unused3);
    private static MethodInfo GetMethodInfo(Func`5<T1, T2, T3, T4, T5> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4);
    private static Expression GetSourceExpression(IEnumerable`1<TSource> source);
}
public class Z.EntityFramework.Plus.QueryFilterAlwaysEmptyDictionary`2 : Dictionary`2<TKey, TValue> {
    public QueryFilterAlwaysEmptyDictionary`2(QueryFilterAlwaysEmptyDictionaryComparer`2<TKey, TValue> comparer);
}
public class Z.EntityFramework.Plus.QueryFilterAlwaysEmptyDictionaryComparer`2 : object {
    public Dictionary`2<TKey, TValue> Dictionary;
    public sealed virtual bool Equals(TKey x, TKey y);
    public sealed virtual int GetHashCode(TKey obj);
}
public class Z.EntityFramework.Plus.QueryFilterContextInterceptor : object {
    public bool ClearCacheRequired;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<QueryFilterSet>> <FilterSetByType>k__BackingField;
    public Dictionary`2<string, List`1<BaseQueryFilterInterceptor>> FilterByEntitySetBase;
    public ConcurrentDictionary`2<object, BaseQueryFilterInterceptor> FilterByKey;
    public ConcurrentDictionary`2<Type, List`1<BaseQueryFilterInterceptor>> FilterByType;
    public ConcurrentDictionary`2<object, BaseQueryFilterInterceptor> GlobalFilterByKey;
    public ConcurrentDictionary`2<Type, List`1<BaseQueryFilterInterceptor>> GlobalFilterByType;
    public ConcurrentDictionary`2<string, DbExpression> DbExpressionByHook;
    public ConcurrentDictionary`2<DbExpression, DbParameterCollection> DbExpressionParameterByHook;
    public Dictionary`2<string, List`1<Type>> TypeByDbSet;
    public Dictionary`2<string, Type> TypeByEntitySetBase;
    [CompilerGeneratedAttribute]
private List`1<QueryFilterSet> <FilterSets>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public Dictionary`2<Type, List`1<QueryFilterSet>> FilterSetByType { get; public set; }
    public List`1<QueryFilterSet> FilterSets { get; public set; }
    public DbContext Context { get; public set; }
    public QueryFilterContextInterceptor(DbContext context);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, List`1<QueryFilterSet>> get_FilterSetByType();
    [CompilerGeneratedAttribute]
public void set_FilterSetByType(Dictionary`2<Type, List`1<QueryFilterSet>> value);
    [CompilerGeneratedAttribute]
public List`1<QueryFilterSet> get_FilterSets();
    [CompilerGeneratedAttribute]
public void set_FilterSets(List`1<QueryFilterSet> value);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(DbContext value);
    public List`1<BaseQueryFilterInterceptor> GetApplicableFilter(string dbSetName);
    public List`1<BaseQueryFilterInterceptor> GetGlobalApplicableFilter(string dbSetName);
    public string GetFilterUniqueID();
    public BaseQueryFilterInterceptor AddFilter(object key, Func`2<IQueryable`1<T>, IQueryable`1<T>> filter);
    public void ClearCache();
    public BaseQueryFilterInterceptor GetFilter(object key);
    public void UpdateHook(DbContext context);
    private void Initialize(DbContext context);
    private void TryRegisterType(DbContext context, Type type);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryFilterExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> SetFiltered(DbContext context);
}
public class Z.EntityFramework.Plus.QueryFilterInterceptor`1 : BaseQueryFilterInterceptor {
    [CompilerGeneratedAttribute]
private Func`2<IQueryable`1<T>, IQueryable`1<T>> <Filter>k__BackingField;
    public Func`2<IQueryable`1<T>, IQueryable`1<T>> Filter { get; public set; }
    public QueryFilterInterceptor`1(Func`2<IQueryable`1<T>, IQueryable`1<T>> filter);
    [CompilerGeneratedAttribute]
public Func`2<IQueryable`1<T>, IQueryable`1<T>> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<IQueryable`1<T>, IQueryable`1<T>> value);
    public virtual DbExpression GetDbExpression(DbContext context, Type type);
}
public class Z.EntityFramework.Plus.QueryFilterInterceptorApply : object {
    public List`1<Func`2<BaseQueryFilterInterceptor, Nullable`1<bool>>> ApplyFilterList;
    public QueryFilterContextInterceptor GlobalFilters;
    public QueryFilterContextInterceptor InstanceFilters;
    public Nullable`1<bool> IsEnabled(BaseQueryFilterInterceptor filter);
}
public class Z.EntityFramework.Plus.QueryFilterInterceptorDbCommandTree : object {
    public static ConstructorInfo DbQueryCommandTreeConstructor;
    private static QueryFilterInterceptorDbCommandTree();
    public sealed virtual void TreeCreated(DbCommandTreeInterceptionContext interceptionContext);
}
public class Z.EntityFramework.Plus.QueryFilterInterceptorDbFilterExpression : DefaultExpressionVisitor {
    public List`1<string> FilterID;
    public string HookID;
    public virtual DbExpression Visit(DbFilterExpression expression);
}
public class Z.EntityFramework.Plus.QueryFilterInterceptorDbScanExpression : DefaultExpressionVisitor {
    public DbContext Context;
    public DbExpression FilteredExpression;
    public QueryFilterInterceptorApply FilterQuery;
    public QueryFilterContextInterceptor InstanceFilterContext;
    public virtual DbExpression Visit(DbScanExpression expression);
    public virtual DbExpression Visit(DbPropertyExpression expression);
    public DbExpression ApplyFilter(DbExpression baseExpression, string fullName);
}
public static class Z.EntityFramework.Plus.QueryFilterManager : object {
    internal static string PrefixFilter;
    internal static string PrefixHook;
    internal static string DisableAllFilter;
    internal static string EnableFilterById;
    internal static string PrefixFilterID;
    internal static List`1<Type> Types;
    [CompilerGeneratedAttribute]
private static bool <AllowPropertyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<object, BaseQueryFilterInterceptor> <GlobalFiltersByKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<Type, List`1<BaseQueryFilterInterceptor>> <GlobalFilterByType>k__BackingField;
    [CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<DbContext, QueryFilterContextInterceptor> <CacheWeakFilterContext>k__BackingField;
    public static bool AllowPropertyFilter { get; public set; }
    public static ConcurrentDictionary`2<object, BaseQueryFilterInterceptor> GlobalFiltersByKey { get; }
    public static ConcurrentDictionary`2<Type, List`1<BaseQueryFilterInterceptor>> GlobalFilterByType { get; public set; }
    public static ConditionalWeakTable`2<DbContext, QueryFilterContextInterceptor> CacheWeakFilterContext { get; public set; }
    private static QueryFilterManager();
    public static void RegisterType(Type[] types);
    public static void RegisterType(Assembly assembly);
    [CompilerGeneratedAttribute]
public static bool get_AllowPropertyFilter();
    [CompilerGeneratedAttribute]
public static void set_AllowPropertyFilter(bool value);
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<object, BaseQueryFilterInterceptor> get_GlobalFiltersByKey();
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<Type, List`1<BaseQueryFilterInterceptor>> get_GlobalFilterByType();
    [CompilerGeneratedAttribute]
public static void set_GlobalFilterByType(ConcurrentDictionary`2<Type, List`1<BaseQueryFilterInterceptor>> value);
    [CompilerGeneratedAttribute]
public static ConditionalWeakTable`2<DbContext, QueryFilterContextInterceptor> get_CacheWeakFilterContext();
    [CompilerGeneratedAttribute]
public static void set_CacheWeakFilterContext(ConditionalWeakTable`2<DbContext, QueryFilterContextInterceptor> value);
    public static BaseQueryFilterInterceptor Filter(object key);
    public static BaseQueryFilterInterceptor Filter(Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    public static BaseQueryFilterInterceptor Filter(object key, Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    public static QueryFilterContextInterceptor AddOrGetFilterContext(DbContext context);
    public static IQueryable`1<T> HookFilter(IQueryable`1<T> query, string value);
    public static IQueryable HookFilter2(IQueryable query, Type type, string value);
    public static void InitilizeGlobalFilter(DbContext context);
    public static void ClearQueryCache(DbContext context);
    public static void ForceAlwaysEmptyQueryCacheManager(DbContext context);
    public static void ClearAllCache();
    public static void ClearGlobalFilter();
}
public class Z.EntityFramework.Plus.QueryFilterSet : object {
    public static ConcurrentDictionary`2<PropertyInfo, Action`2<DbContext, ObjectQuery>> CachedActions;
    [CompilerGeneratedAttribute]
private IQueryable <OriginalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<Func`4<DbContext, QueryFilterSet, object, IQueryable>> <CreateFilterQueryableCompiled>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <DbSetProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<Func`2<DbContext, IQueryable>> <GetDbSetCompiled>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbContext, ObjectQuery> <UpdateInternalQueryCompiled>k__BackingField;
    public IQueryable OriginalQuery { get; public set; }
    public Lazy`1<Func`4<DbContext, QueryFilterSet, object, IQueryable>> CreateFilterQueryableCompiled { get; public set; }
    public PropertyInfo DbSetProperty { get; public set; }
    public Type ElementType { get; public set; }
    public Lazy`1<Func`2<DbContext, IQueryable>> GetDbSetCompiled { get; public set; }
    public Action`2<DbContext, ObjectQuery> UpdateInternalQueryCompiled { get; public set; }
    public QueryFilterSet(DbContext context, PropertyInfo dbSetProperty);
    private static QueryFilterSet();
    [CompilerGeneratedAttribute]
public IQueryable get_OriginalQuery();
    [CompilerGeneratedAttribute]
public void set_OriginalQuery(IQueryable value);
    [CompilerGeneratedAttribute]
public Lazy`1<Func`4<DbContext, QueryFilterSet, object, IQueryable>> get_CreateFilterQueryableCompiled();
    [CompilerGeneratedAttribute]
public void set_CreateFilterQueryableCompiled(Lazy`1<Func`4<DbContext, QueryFilterSet, object, IQueryable>> value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_DbSetProperty();
    [CompilerGeneratedAttribute]
public void set_DbSetProperty(PropertyInfo value);
    [CompilerGeneratedAttribute]
public Type get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(Type value);
    [CompilerGeneratedAttribute]
public Lazy`1<Func`2<DbContext, IQueryable>> get_GetDbSetCompiled();
    [CompilerGeneratedAttribute]
public void set_GetDbSetCompiled(Lazy`1<Func`2<DbContext, IQueryable>> value);
    [CompilerGeneratedAttribute]
public Action`2<DbContext, ObjectQuery> get_UpdateInternalQueryCompiled();
    [CompilerGeneratedAttribute]
public void set_UpdateInternalQueryCompiled(Action`2<DbContext, ObjectQuery> value);
    public Func`4<DbContext, QueryFilterSet, object, IQueryable> CompileCreateFilterQueryable();
    public Func`2<DbContext, IQueryable> CompileGetDbSet(PropertyInfo dbSetProperty);
    public Action`2<DbContext, ObjectQuery> CompileUpdateInternalQuery(PropertyInfo dbSetProperty);
}
public class Z.EntityFramework.Plus.QueryFutureBatch : object {
    [CompilerGeneratedAttribute]
private ObjectContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseQueryFuture> <Queries>k__BackingField;
    private static Action`2<DbParameter, object> _SetOracleDbType;
    private static Action`2<DbParameter, object> _SetOracleManagedDbType;
    private static Action`2<DbParameter, object> _SetOracleDevArtDbType;
    public ObjectContext Context { get; public set; }
    public List`1<BaseQueryFuture> Queries { get; public set; }
    public QueryFutureBatch(ObjectContext context);
    [CompilerGeneratedAttribute]
public ObjectContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ObjectContext value);
    [CompilerGeneratedAttribute]
public List`1<BaseQueryFuture> get_Queries();
    [CompilerGeneratedAttribute]
public void set_Queries(List`1<BaseQueryFuture> value);
    public void ExecuteQueries();
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryFutureBatch/<ExecuteQueriesAsync>d__10")]
public Task ExecuteQueriesAsync(CancellationToken cancellationToken);
    protected DbCommand CreateCommandCombined(bool isAsync);
    public static void SetOracleManagedDbType(Assembly assembly, DbParameter dbParameter, object type);
    public static void SetOracleDbType(Assembly assembly, DbParameter dbParameter, object type);
    public static void SetOracleDevArtDbType(Assembly assembly, DbParameter dbParameter, object type);
}
public class Z.EntityFramework.Plus.QueryFutureEnumerable`1 : BaseQueryFuture {
    private IEnumerable`1<T> _result;
    public QueryFutureEnumerable`1(QueryFutureBatch ownerBatch, ObjectQuery`1<T> query);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryFutureEnumerable`1/<ToListAsync>d__4")]
public Task`1<List`1<T>> ToListAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryFutureEnumerable`1/<ToArrayAsync>d__5")]
public Task`1<T[]> ToArrayAsync(CancellationToken cancellationToken);
    public virtual void SetResult(DbDataReader reader);
    public void SetResult(IEnumerator`1<T> enumerator);
    public virtual void GetResultDirectly();
    public virtual Task GetResultDirectlyAsync(CancellationToken cancellationToken);
    internal void GetResultDirectly(IQueryable`1<T> query);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryFutureExtensions : object {
    [ExtensionAttribute]
public static QueryFutureEnumerable`1<T> Future(IQueryable`1<T> query);
    [ExtensionAttribute]
public static QueryFutureValue`1<TResult> FutureValue(IQueryable`1<TResult> query);
    [ExtensionAttribute]
public static QueryFutureValue`1<TResult> FutureValue(QueryDeferred`1<TResult> query);
}
public static class Z.EntityFramework.Plus.QueryFutureManager : object {
    [CompilerGeneratedAttribute]
private static bool <AllowQueryBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<DbCommand> <OnBatchExecuting>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<DbCommand> <OnBatchExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private static ConditionalWeakTable`2<ObjectContext, QueryFutureBatch> <CacheWeakFutureBatch>k__BackingField;
    public static bool AllowQueryBatch { get; public set; }
    public static Action`1<DbCommand> OnBatchExecuting { get; public set; }
    public static Action`1<DbCommand> OnBatchExecuted { get; public set; }
    public static ConditionalWeakTable`2<ObjectContext, QueryFutureBatch> CacheWeakFutureBatch { get; public set; }
    private static QueryFutureManager();
    [CompilerGeneratedAttribute]
public static bool get_AllowQueryBatch();
    [CompilerGeneratedAttribute]
public static void set_AllowQueryBatch(bool value);
    [CompilerGeneratedAttribute]
public static Action`1<DbCommand> get_OnBatchExecuting();
    [CompilerGeneratedAttribute]
public static void set_OnBatchExecuting(Action`1<DbCommand> value);
    [CompilerGeneratedAttribute]
public static Action`1<DbCommand> get_OnBatchExecuted();
    [CompilerGeneratedAttribute]
public static void set_OnBatchExecuted(Action`1<DbCommand> value);
    [CompilerGeneratedAttribute]
public static ConditionalWeakTable`2<ObjectContext, QueryFutureBatch> get_CacheWeakFutureBatch();
    [CompilerGeneratedAttribute]
public static void set_CacheWeakFutureBatch(ConditionalWeakTable`2<ObjectContext, QueryFutureBatch> value);
    public static QueryFutureBatch AddOrGetBatch(ObjectContext context);
    public static void ExecuteBatch(DbContext context);
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryFutureManager/<ExecuteBatchAsync>d__19")]
public static Task ExecuteBatchAsync(DbContext context, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class Z.EntityFramework.Plus.QueryFutureOracleDbReader : DbDataReader {
    public DbDataReader Reader;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public bool HasRows { get; }
    public QueryFutureOracleDbReader(DbDataReader reader);
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool get_HasRows();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual IEnumerator GetEnumerator();
}
public class Z.EntityFramework.Plus.QueryFutureValue`1 : BaseQueryFuture {
    private TResult _result;
    public TResult Value { get; }
    public QueryFutureValue`1(QueryFutureBatch ownerBatch, ObjectQuery query);
    public TResult get_Value();
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryFutureValue`1/<ValueAsync>d__4")]
public Task`1<TResult> ValueAsync(CancellationToken cancellationToken);
    public virtual void SetResult(DbDataReader reader);
    public virtual void GetResultDirectly();
    [AsyncStateMachineAttribute("Z.EntityFramework.Plus.QueryFutureValue`1/<GetResultDirectlyAsync>d__7")]
public virtual Task GetResultDirectlyAsync(CancellationToken cancellationToken);
    internal void GetResultDirectly(IQueryable`1<TResult> query);
    public static TResult op_Implicit(QueryFutureValue`1<TResult> futureValue);
}
public class Z.EntityFramework.Plus.QueryIncludeFilterChild`2 : BaseQueryIncludeFilterChild {
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<T, IEnumerable`1<TChild>>> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<T, TChild>> <FilterSingle>k__BackingField;
    public Expression`1<Func`2<T, IEnumerable`1<TChild>>> Filter { get; public set; }
    public Expression`1<Func`2<T, TChild>> FilterSingle { get; public set; }
    private static QueryIncludeFilterChild`2();
    public QueryIncludeFilterChild`2(Expression`1<Func`2<T, IEnumerable`1<TChild>>> filter);
    public QueryIncludeFilterChild`2(Expression`1<Func`2<T, TChild>> filter);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, IEnumerable`1<TChild>>> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Expression`1<Func`2<T, IEnumerable`1<TChild>>> value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, TChild>> get_FilterSingle();
    [CompilerGeneratedAttribute]
public void set_FilterSingle(Expression`1<Func`2<T, TChild>> value);
    public virtual Expression GetFilter();
    public virtual IQueryable CreateIncludeQuery(IQueryable rootQuery);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryIncludeFilterExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeFilter(IQueryable`1<T> query, Expression`1<Func`2<T, IEnumerable`1<TChild>>> queryIncludeFilter);
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeFilter(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> queryIncludeFilter);
}
public class Z.EntityFramework.Plus.QueryIncludeFilterLazyLoading : object {
    public static void SetLazyLoaded(object item, List`1<BaseQueryIncludeFilterChild> childs);
    public static void SetLazyLoaded(object currentItem, List`1<string> paths, int index);
}
public class Z.EntityFramework.Plus.QueryIncludeFilterNullCollection : object {
    public static void NullCollectionToEmpty(object item, List`1<BaseQueryIncludeFilterChild> childs);
    public static void CheckNullRecursive(object currentItem, List`1<string> paths, int index);
}
public class Z.EntityFramework.Plus.QueryIncludeFilterParentQueryable`1 : object {
    [CompilerGeneratedAttribute]
private List`1<BaseQueryIncludeFilterChild> <Childs>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryIncludeFilterProvider`1<T> <InternalProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryable`1<T> <OriginalQueryable>k__BackingField;
    public List`1<BaseQueryIncludeFilterChild> Childs { get; public set; }
    public QueryIncludeFilterProvider`1<T> InternalProvider { get; public set; }
    public IQueryable`1<T> OriginalQueryable { get; public set; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public QueryIncludeFilterParentQueryable`1(IQueryable`1<T> query);
    public QueryIncludeFilterParentQueryable`1(IQueryable`1<T> query, List`1<BaseQueryIncludeFilterChild> childs);
    [CompilerGeneratedAttribute]
public List`1<BaseQueryIncludeFilterChild> get_Childs();
    [CompilerGeneratedAttribute]
public void set_Childs(List`1<BaseQueryIncludeFilterChild> value);
    [CompilerGeneratedAttribute]
public QueryIncludeFilterProvider`1<T> get_InternalProvider();
    [CompilerGeneratedAttribute]
public void set_InternalProvider(QueryIncludeFilterProvider`1<T> value);
    [CompilerGeneratedAttribute]
public IQueryable`1<T> get_OriginalQueryable();
    [CompilerGeneratedAttribute]
public void set_OriginalQueryable(IQueryable`1<T> value);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerable`1<T> CreateEnumerable();
    public IQueryable CreateQueryable();
    public string GetQueryCacheUniqueKey(String[] tags);
    public IQueryable CreateAnonymousFromQuery(IQueryable`1<TElement> parent, IQueryable`1<TChild> child);
    public IQueryable Include(string path);
    private sealed virtual override IDbAsyncEnumerator`1<T> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator();
    public sealed virtual IDbAsyncEnumerator GetAsyncEnumerator();
    [CompilerGeneratedAttribute]
private Task`1<IEnumerable`1<T>> <System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator>b__27_0(CancellationToken token);
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator>b__27_1();
    [CompilerGeneratedAttribute]
private Task`1<IEnumerable`1<T>> <GetAsyncEnumerator>b__28_0(CancellationToken token);
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <GetAsyncEnumerator>b__28_1();
}
public class Z.EntityFramework.Plus.QueryIncludeFilterPathVisitor : ExpressionVisitor {
    public List`1<Expression> LambdaToChecks;
    public List`1<string> Paths;
    public Expression RootExpression;
    public void AddMemberExpression(MemberExpression memberExpression);
    protected virtual Expression VisitLambda(Expression`1<T> node);
}
public class Z.EntityFramework.Plus.QueryIncludeFilterProvider`1 : object {
    [CompilerGeneratedAttribute]
private QueryIncludeFilterParentQueryable`1<T> <CurrentQueryable>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryProvider <OriginalProvider>k__BackingField;
    public QueryIncludeFilterParentQueryable`1<T> CurrentQueryable { get; public set; }
    public IQueryProvider OriginalProvider { get; public set; }
    public QueryIncludeFilterProvider`1(IQueryProvider originalProvider);
    [CompilerGeneratedAttribute]
public QueryIncludeFilterParentQueryable`1<T> get_CurrentQueryable();
    [CompilerGeneratedAttribute]
public void set_CurrentQueryable(QueryIncludeFilterParentQueryable`1<T> value);
    [CompilerGeneratedAttribute]
public IQueryProvider get_OriginalProvider();
    [CompilerGeneratedAttribute]
public void set_OriginalProvider(IQueryProvider value);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public static class Z.EntityFramework.Plus.QueryIncludeOptimizedByPath : object {
    public static IQueryable`1<T> IncludeOptimizedByPath(IQueryable`1<T> query, string navigationPath);
    public static Expression CreateLambdaExpression(Type parameterType, String[] paths, int currentIndex);
    public static Expression AppendPath(Expression expression, String[] paths, int currentIndex);
    public static Expression AppendPropertyPath(Expression expression, String[] paths, int currentIndex);
    public static Expression AppendSelectPath(Expression expression, String[] paths, int currentIndex);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedChild`2 : BaseQueryIncludeOptimizedChild {
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<T, TChild>> <Filter>k__BackingField;
    public Expression`1<Func`2<T, TChild>> Filter { get; public set; }
    public QueryIncludeOptimizedChild`2(Expression`1<Func`2<T, TChild>> filter);
    public QueryIncludeOptimizedChild`2(Expression`1<Func`2<T, TChild>> filter, bool isLazy);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, TChild>> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Expression`1<Func`2<T, TChild>> value);
    public virtual void CreateIncludeQuery(IQueryable rootQuery);
    public virtual Expression GetFilter();
    public virtual IQueryable GetFilteredQuery(IQueryable rootQuery);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedExpressionReduceVisitor : ExpressionVisitor {
    public List`1<Expression> Expressions;
    public List`1<Expression> LambdaToChecks;
    public Expression NodeToReduce;
    public Expression RootExpression;
    public bool AddMemberExpression(LambdaExpression node, MemberExpression memberExpression, Expression& outExpression);
    protected virtual Expression VisitLambda(Expression`1<T> node);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedExpressionToReduceVisitor : ExpressionVisitor {
    public List`1<Expression> Expressions;
    public List`1<Expression> LambdaToChecks;
    public Expression RootExpression;
    public void AddMemberExpression(MemberExpression memberExpression);
    protected virtual Expression VisitLambda(Expression`1<T> node);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryIncludeOptimizedExtensions : object {
    [ExtensionAttribute]
private static IQueryable`1<T> IncludeOptimizedSingleLazy(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> queryIncludeFilter);
    [ExtensionAttribute]
private static IQueryable`1<T> IncludeOptimizedSingle(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> queryIncludeFilter);
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeOptimized(IQueryable`1<T> query, Expression`1<Func`2<T, IEnumerable`1<TChild>>> queryIncludeFilter);
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeOptimized(IQueryable`1<T> query, Expression`1<Func`2<T, TChild>> queryIncludeFilter);
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeOptimizedByPath(IQueryable`1<T> query, string navigationProperties);
}
public static class Z.EntityFramework.Plus.QueryIncludeOptimizedIncludeSubPath : object {
    public static IQueryable`1<T> IncludeSubPath(IQueryable`1<T> query, Expression expression);
    public static void RemoveLazyChild(QueryIncludeOptimizedParentQueryable`1<T> parent);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedLazyLoading : object {
    public static void SetLazyLoaded(object item, List`1<BaseQueryIncludeOptimizedChild> childs);
    public static void SetLazyLoaded(object currentItem, List`1<string> paths, int index);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedManager : object {
    [CompilerGeneratedAttribute]
private static bool <AllowQueryBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <AllowIncludeSubPath>k__BackingField;
    public static bool AllowQueryBatch { get; public set; }
    public static bool AllowIncludeSubPath { get; public set; }
    private static QueryIncludeOptimizedManager();
    [CompilerGeneratedAttribute]
public static bool get_AllowQueryBatch();
    [CompilerGeneratedAttribute]
public static void set_AllowQueryBatch(bool value);
    [CompilerGeneratedAttribute]
public static bool get_AllowIncludeSubPath();
    [CompilerGeneratedAttribute]
public static void set_AllowIncludeSubPath(bool value);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedNullCollection : object {
    public static void NullCollectionToEmpty(object item, List`1<BaseQueryIncludeOptimizedChild> childs);
    public static void CheckNullRecursive(object currentItem, List`1<string> paths, int index);
    private static void CheckAndSetCollection(PropertyOrFieldAccessor accessor, object currentItem, Type propertyType, Type originalType);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedParentQueryable`1 : object {
    [CompilerGeneratedAttribute]
private List`1<BaseQueryIncludeOptimizedChild> <Childs>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryIncludeOptimizedProvider`1<T> <InternalProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryable`1<T> <OriginalQueryable>k__BackingField;
    public List`1<BaseQueryIncludeOptimizedChild> Childs { get; public set; }
    public QueryIncludeOptimizedProvider`1<T> InternalProvider { get; public set; }
    public IQueryable`1<T> OriginalQueryable { get; public set; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public QueryIncludeOptimizedParentQueryable`1(IQueryable`1<T> query);
    public QueryIncludeOptimizedParentQueryable`1(IQueryable`1<T> query, List`1<BaseQueryIncludeOptimizedChild> childs);
    [CompilerGeneratedAttribute]
public List`1<BaseQueryIncludeOptimizedChild> get_Childs();
    [CompilerGeneratedAttribute]
public void set_Childs(List`1<BaseQueryIncludeOptimizedChild> value);
    [CompilerGeneratedAttribute]
public QueryIncludeOptimizedProvider`1<T> get_InternalProvider();
    [CompilerGeneratedAttribute]
public void set_InternalProvider(QueryIncludeOptimizedProvider`1<T> value);
    [CompilerGeneratedAttribute]
public IQueryable`1<T> get_OriginalQueryable();
    [CompilerGeneratedAttribute]
public void set_OriginalQueryable(IQueryable`1<T> value);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerable`1<T> CreateEnumerable();
    public void CreateQueryable(IQueryable`1<T> query);
    public IQueryable Include(string path);
    public string GetQueryCacheUniqueKey(String[] tags);
    private sealed virtual override IDbAsyncEnumerator`1<T> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator();
    public sealed virtual IDbAsyncEnumerator GetAsyncEnumerator();
    [CompilerGeneratedAttribute]
private Task`1<IEnumerable`1<T>> <System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator>b__26_0(CancellationToken token);
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator>b__26_1();
    [CompilerGeneratedAttribute]
private Task`1<IEnumerable`1<T>> <GetAsyncEnumerator>b__27_0(CancellationToken token);
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <GetAsyncEnumerator>b__27_1();
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedPathVisitor : ExpressionVisitor {
    public List`1<Expression> LambdaToChecks;
    public List`1<string> Paths;
    public Expression RootExpression;
    public void AddMemberExpression(MemberExpression memberExpression);
    protected virtual Expression VisitLambda(Expression`1<T> node);
}
public class Z.EntityFramework.Plus.QueryIncludeOptimizedProvider`1 : object {
    [CompilerGeneratedAttribute]
private QueryIncludeOptimizedParentQueryable`1<T> <CurrentQueryable>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryProvider <OriginalProvider>k__BackingField;
    public QueryIncludeOptimizedParentQueryable`1<T> CurrentQueryable { get; public set; }
    public IQueryProvider OriginalProvider { get; public set; }
    public QueryIncludeOptimizedProvider`1(IQueryProvider originalProvider);
    [CompilerGeneratedAttribute]
public QueryIncludeOptimizedParentQueryable`1<T> get_CurrentQueryable();
    [CompilerGeneratedAttribute]
public void set_CurrentQueryable(QueryIncludeOptimizedParentQueryable`1<T> value);
    [CompilerGeneratedAttribute]
public IQueryProvider get_OriginalProvider();
    [CompilerGeneratedAttribute]
public void set_OriginalProvider(IQueryProvider value);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public class Z.EntityFramework.Plus.QueryInterceptorFilter.QueryFilterInterceptorDbProjectExpression : DefaultExpressionVisitor {
    public DbExpression DbScanExpression;
    public DbParameterCollection ParameterCollection;
    public virtual DbExpression Visit(DbProjectExpression expression);
    public virtual DbExpression Visit(DbScanExpression expression);
    public virtual DbExpression Visit(DbParameterReferenceExpression expression);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryInterceptorFilterExtensions : object {
    [ExtensionAttribute]
public static BaseQueryFilterInterceptor Filter(DbContext context, object key);
    [ExtensionAttribute]
public static BaseQueryFilterInterceptor Filter(DbContext context, Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    [ExtensionAttribute]
public static BaseQueryFilterInterceptor Filter(DbContext context, object key, Func`2<IQueryable`1<T>, IQueryable`1<T>> queryFilter, bool isEnabled);
    [ExtensionAttribute]
public static IQueryable`1<T> AsNoFilter(IQueryable`1<T> query);
    [ExtensionAttribute]
public static IQueryable`1<T> Filter(IDbSet`1<T> query, Object[] keys);
}
public class Z.EntityFramework.Plus.QueryInterceptorProvider : object {
    [CompilerGeneratedAttribute]
private QueryInterceptorQueryable <CurrentQueryable>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbAsyncQueryProvider <OriginalProvider>k__BackingField;
    public QueryInterceptorQueryable CurrentQueryable { get; public set; }
    public IDbAsyncQueryProvider OriginalProvider { get; public set; }
    public QueryInterceptorProvider(IDbAsyncQueryProvider originalProvider);
    [CompilerGeneratedAttribute]
public QueryInterceptorQueryable get_CurrentQueryable();
    [CompilerGeneratedAttribute]
public void set_CurrentQueryable(QueryInterceptorQueryable value);
    [CompilerGeneratedAttribute]
public IDbAsyncQueryProvider get_OriginalProvider();
    [CompilerGeneratedAttribute]
public void set_OriginalProvider(IDbAsyncQueryProvider value);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public class Z.EntityFramework.Plus.QueryInterceptorProvider`1 : object {
    [CompilerGeneratedAttribute]
private QueryInterceptorQueryable`1<T> <CurrentQueryable>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbAsyncQueryProvider <OriginalProvider>k__BackingField;
    public QueryInterceptorQueryable`1<T> CurrentQueryable { get; public set; }
    public IDbAsyncQueryProvider OriginalProvider { get; public set; }
    public QueryInterceptorProvider`1(IDbAsyncQueryProvider originalProvider);
    [CompilerGeneratedAttribute]
public QueryInterceptorQueryable`1<T> get_CurrentQueryable();
    [CompilerGeneratedAttribute]
public void set_CurrentQueryable(QueryInterceptorQueryable`1<T> value);
    [CompilerGeneratedAttribute]
public IDbAsyncQueryProvider get_OriginalProvider();
    [CompilerGeneratedAttribute]
public void set_OriginalProvider(IDbAsyncQueryProvider value);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public class Z.EntityFramework.Plus.QueryInterceptorQueryable : object {
    [CompilerGeneratedAttribute]
private ExpressionVisitor[] <Visitors>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryInterceptorProvider <InternalProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryable <OriginalQueryable>k__BackingField;
    public ExpressionVisitor[] Visitors { get; public set; }
    public QueryInterceptorProvider InternalProvider { get; public set; }
    public IQueryable OriginalQueryable { get; public set; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public QueryInterceptorQueryable(IQueryable query, ExpressionVisitor[] visitors);
    [CompilerGeneratedAttribute]
public ExpressionVisitor[] get_Visitors();
    [CompilerGeneratedAttribute]
public void set_Visitors(ExpressionVisitor[] value);
    [CompilerGeneratedAttribute]
public QueryInterceptorProvider get_InternalProvider();
    [CompilerGeneratedAttribute]
public void set_InternalProvider(QueryInterceptorProvider value);
    [CompilerGeneratedAttribute]
public IQueryable get_OriginalQueryable();
    [CompilerGeneratedAttribute]
public void set_OriginalQueryable(IQueryable value);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IQueryable Visit();
    public Expression Visit(Expression expression);
    public IQueryable Include(string path);
    public sealed virtual IDbAsyncEnumerator GetAsyncEnumerator();
}
public class Z.EntityFramework.Plus.QueryInterceptorQueryable`1 : object {
    [CompilerGeneratedAttribute]
private ExpressionVisitor[] <Visitors>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryInterceptorProvider`1<T> <InternalProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryable`1<T> <OriginalQueryable>k__BackingField;
    public ExpressionVisitor[] Visitors { get; public set; }
    public QueryInterceptorProvider`1<T> InternalProvider { get; public set; }
    public IQueryable`1<T> OriginalQueryable { get; public set; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public QueryInterceptorQueryable`1(IQueryable`1<T> query, ExpressionVisitor[] visitors);
    [CompilerGeneratedAttribute]
public ExpressionVisitor[] get_Visitors();
    [CompilerGeneratedAttribute]
public void set_Visitors(ExpressionVisitor[] value);
    [CompilerGeneratedAttribute]
public QueryInterceptorProvider`1<T> get_InternalProvider();
    [CompilerGeneratedAttribute]
public void set_InternalProvider(QueryInterceptorProvider`1<T> value);
    [CompilerGeneratedAttribute]
public IQueryable`1<T> get_OriginalQueryable();
    [CompilerGeneratedAttribute]
public void set_OriginalQueryable(IQueryable`1<T> value);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IQueryable`1<T> Visit();
    public Expression Visit(Expression expression);
    public IQueryable`1<T> Include(string path);
    private sealed virtual override IDbAsyncEnumerator`1<T> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>.GetAsyncEnumerator();
    public sealed virtual IDbAsyncEnumerator GetAsyncEnumerator();
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.QueryInterceptorQueryableExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> InterceptWith(IQueryable`1<T> query, ExpressionVisitor[] visitors);
}
[DefaultMemberAttribute("Item")]
public class Z.EntityFramework.Plus.RedisObjectCache : ObjectCache {
    private Func`3<Type, string, object> _deserializeCachedObject;
    private object _redisDatabase;
    private Func`2<object, string> _serializeCachedObject;
    [CompilerGeneratedAttribute]
private DefaultCacheCapabilities <DefaultCacheCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public DefaultCacheCapabilities DefaultCacheCapabilities { get; }
    public string Name { get; }
    public object Item { get; public set; }
    public RedisObjectCache(object redisDatabase, Func`2<object, string> serializeCachedObject, Func`3<Type, string, object> deserializeCachedObject);
    [CompilerGeneratedAttribute]
public virtual DefaultCacheCapabilities get_DefaultCacheCapabilities();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual object AddOrGetExisting(string key, object value, DateTimeOffset absoluteExpiration, string regionName);
    public virtual object AddOrGetExisting(string key, object value, CacheItemPolicy policy, string regionName);
    public object Get(string key, Type entityType, string regionName);
    private object InternalRedisDatabaseAdd(string key, object value, TimeSpan timeSpan);
    private void ValidatePolicy(CacheItemPolicy policy);
    public virtual CacheItem AddOrGetExisting(CacheItem value, CacheItemPolicy policy);
    public virtual object Get(string key, string regionName);
    public virtual CacheItem GetCacheItem(string key, string regionName);
    public virtual void Set(string key, object value, DateTimeOffset absoluteExpiration, string regionName);
    public virtual void Set(CacheItem item, CacheItemPolicy policy);
    public virtual void Set(string key, object value, CacheItemPolicy policy, string regionName);
    public virtual object Remove(string key, string regionName);
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    public virtual CacheEntryChangeMonitor CreateCacheEntryChangeMonitor(IEnumerable`1<string> keys, string regionName);
    public virtual long GetCount(string regionName);
    protected virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public virtual IDictionary`2<string, object> GetValues(IEnumerable`1<string> keys, string regionName);
    public virtual bool Contains(string key, string regionName);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.SetDynamicExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<object> SetDynamic(DbContext this, string typeName);
    [ExtensionAttribute]
public static IQueryable`1<object> SetDynamic(DbContext this, string typeName, StringComparison stringComparison);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.SetIdentityExtensions : object {
    [ExtensionAttribute]
public static void SqlServerSetIdentityInsertOn(DbSet`1<T> this);
    [ExtensionAttribute]
public static void SqlServerSetIdentityInsertOn(DbContext this);
    [ExtensionAttribute]
public static void SqlServerSetIdentityInsertOn(DbContext this, Type type);
    [ExtensionAttribute]
public static void SqlServerSetIdentityInsertOff(DbSet`1<T> this);
    [ExtensionAttribute]
public static void SqlServerSetIdentityInsertOff(DbContext this);
    [ExtensionAttribute]
public static void SqlServerSetIdentityInsertOff(DbContext this, Type type);
    internal static void SqlServerSetIdentity(DbContext context, Type type, bool OnOff);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.TableHintExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> WithHint(IQueryable`1<T> this, string hint, Type[] types);
    [ExtensionAttribute]
public static IQueryable`1<T> WithHint(IQueryable`1<T> this, SqlServerTableHintFlags hint, Type[] types);
}
[ExtensionAttribute]
public static class Z.EntityFramework.Plus.TemporalTableExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> TemporalTableAsOf(IQueryable`1<T> this, DateTime dateTime, Type[] types);
    [ExtensionAttribute]
public static IQueryable`1<T> TemporalTableFromTo(IQueryable`1<T> this, DateTime startDateTime, DateTime endDateTime, Type[] types);
    [ExtensionAttribute]
public static IQueryable`1<T> TemporalTableBetween(IQueryable`1<T> this, DateTime startDateTime, DateTime endDateTime, Type[] types);
    [ExtensionAttribute]
public static IQueryable`1<T> TemporalTableContainedIn(IQueryable`1<T> this, DateTime startDateTime, DateTime endDateTime, Type[] types);
    [ExtensionAttribute]
public static IQueryable`1<T> TemporalTableAll(IQueryable`1<T> this, Type[] types);
}
