public class System.Action`17 : MulticastDelegate {
    public Action`17(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`18 : MulticastDelegate {
    public Action`18(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`19 : MulticastDelegate {
    public Action`19(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`20 : MulticastDelegate {
    public Action`20(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`21 : MulticastDelegate {
    public Action`21(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`22 : MulticastDelegate {
    public Action`22(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`23 : MulticastDelegate {
    public Action`23(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`24 : MulticastDelegate {
    public Action`24(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`25 : MulticastDelegate {
    public Action`25(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`26 : MulticastDelegate {
    public Action`26(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`27 : MulticastDelegate {
    public Action`27(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`28 : MulticastDelegate {
    public Action`28(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`29 : MulticastDelegate {
    public Action`29(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`30 : MulticastDelegate {
    public Action`30(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`31 : MulticastDelegate {
    public Action`31(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`32 : MulticastDelegate {
    public Action`32(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31, T32 arg32);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31, T32 arg32, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Func`18 : MulticastDelegate {
    public Func`18(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`19 : MulticastDelegate {
    public Func`19(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`20 : MulticastDelegate {
    public Func`20(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`21 : MulticastDelegate {
    public Func`21(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`22 : MulticastDelegate {
    public Func`22(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`23 : MulticastDelegate {
    public Func`23(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`24 : MulticastDelegate {
    public Func`24(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`25 : MulticastDelegate {
    public Func`25(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`26 : MulticastDelegate {
    public Func`26(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`27 : MulticastDelegate {
    public Func`27(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`28 : MulticastDelegate {
    public Func`28(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`29 : MulticastDelegate {
    public Func`29(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`30 : MulticastDelegate {
    public Func`30(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`31 : MulticastDelegate {
    public Func`31(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`32 : MulticastDelegate {
    public Func`32(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`33 : MulticastDelegate {
    public Func`33(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31, T32 arg32);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20, T21 arg21, T22 arg22, T23 arg23, T24 arg24, T25 arg25, T26 arg26, T27 arg27, T28 arg28, T29 arg29, T30 arg30, T31 arg31, T32 arg32, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class System.Linq.EnumerableDynamic : object {
    [ExtensionAttribute]
public static void ReverseDynamic(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable GroupByDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable GroupByDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable GroupByDynamic(IEnumerable source, string expressionKeySelector, string expressionElementSelector);
    [ExtensionAttribute]
public static IEnumerable GroupByDynamic(IEnumerable source, string expressionKeySelector, string expressionElementSelector, object parameter);
    [ExtensionAttribute]
public static IEnumerable GroupByDynamic(IEnumerable source, string expression, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable GroupByDynamic(IEnumerable source, string expression, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IEnumerable OrderByDescendingDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable OrderByDescendingDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable OrderByDescendingDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable OrderByDescendingDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IEnumerable OrderByDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable OrderByDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable OrderByDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable OrderByDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IEnumerable SelectDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable SelectDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable SelectManyDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable SelectManyDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable SkipWhileDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable SkipWhileDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable TakeWhileDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable TakeWhileDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable DistinctDynamic(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable WhereDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable WhereDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AllDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static bool AllDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AnyDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static bool AnyDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable source);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable source);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable source);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable source);
    [ExtensionAttribute]
public static object ElementAtDynamic(IEnumerable source, int index);
    [ExtensionAttribute]
public static Object[] ToArrayDynamic(IEnumerable source);
    [ExtensionAttribute]
public static List`1<object> ToListDynamic(IEnumerable source);
    [ExtensionAttribute]
public static object FirstDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static object FirstDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static object FirstDynamic(IEnumerable source);
    [ExtensionAttribute]
public static object FirstOrDefaultDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static object FirstOrDefaultDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static object FirstOrDefaultDynamic(IEnumerable source);
    [ExtensionAttribute]
public static object LastDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static object LastDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static object LastDynamic(IEnumerable source);
    [ExtensionAttribute]
public static object LastOrDefaultDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static object LastOrDefaultDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static object LastOrDefaultDynamic(IEnumerable source);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable source);
    [ExtensionAttribute]
public static object SingleDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static object SingleDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static object SingleDynamic(IEnumerable source);
    [ExtensionAttribute]
public static object SingleOrDefaultDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static object SingleOrDefaultDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static object SingleOrDefaultDynamic(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IEnumerable`1<TSource> source, string expressionKeySelector, string expressionElementSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IEnumerable`1<TSource> source, string expressionKeySelector, string expressionElementSelector, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, string expression, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, string expression, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IEnumerable`1<TSource> source, string expressionKeySelector, string expressionElementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IEnumerable`1<TSource> source, string expressionKeySelector, string expressionElementSelector, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescendingDynamic(IEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDynamic(IEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static void ReverseDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectManyDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectManyDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectManyDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectManyDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectManyDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<object> SelectManyDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhileDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhileDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhileDynamic(IEnumerable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhileDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhileDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> WhereDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> WhereDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> WhereDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> WhereDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static object Execute(IEnumerable source, string expression);
    [ExtensionAttribute]
public static object Execute(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static TValue Execute(IEnumerable source, string expression);
    [ExtensionAttribute]
public static TValue Execute(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AllDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static bool AllDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static bool AllDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static bool AllDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AnyDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static bool AnyDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static bool AnyDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static bool AnyDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static int CountDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource ElementAtDynamic(IEnumerable`1<TSource> source, int index);
    [ExtensionAttribute]
public static TSource FirstDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource FirstDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource FirstDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource FirstDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource FirstDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource LastDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource LastDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource LastDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource LastDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource LastDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static long LongCountDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource SingleDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource SingleDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource SingleDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource SingleDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource SingleDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T MinDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T SumDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource[] ToArrayDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static List`1<TSource> ToListDynamic(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable ThenByDescendingDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable ThenByDescendingDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable ThenByDescendingDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable ThenByDescendingDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IEnumerable ThenByDynamic(IEnumerable source, string expression);
    [ExtensionAttribute]
public static IEnumerable ThenByDynamic(IEnumerable source, string expression, object parameter);
    [ExtensionAttribute]
public static IEnumerable ThenByDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable ThenByDynamic(IEnumerable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescendingDynamic(IOrderedEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDynamic(IOrderedEnumerable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
}
[ExtensionAttribute]
public static class System.Linq.QueryableDynamic : object {
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDescendingDynamic(IOrderedQueryable source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDescendingDynamic(IOrderedQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDescendingDynamic(IOrderedQueryable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDescendingDynamic(IOrderedQueryable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDynamic(IOrderedQueryable source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDynamic(IOrderedQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDynamic(IOrderedQueryable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable ThenByDynamic(IOrderedQueryable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescendingDynamic(IOrderedQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDynamic(IOrderedQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IQueryable DistinctDynamic(IQueryable source);
    [ExtensionAttribute]
public static IQueryable GroupByDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable GroupByDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable GroupByDynamic(IQueryable source, string expressionKeySelector, string expressionElementSelector);
    [ExtensionAttribute]
public static IQueryable GroupByDynamic(IQueryable source, string expressionKeySelector, string expressionElementSelector, object parameter);
    [ExtensionAttribute]
public static IQueryable GroupByDynamic(IQueryable source, string expression, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable GroupByDynamic(IQueryable source, string expression, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDescendingDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDescendingDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDescendingDynamic(IQueryable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDescendingDynamic(IQueryable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDynamic(IQueryable source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable OrderByDynamic(IQueryable source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IQueryable ReverseDynamic(IQueryable source);
    [ExtensionAttribute]
public static IQueryable SelectDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable SelectDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<T> SelectDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<T> SelectDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable SelectManyDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable SelectManyDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<T> SelectManyDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<T> SelectManyDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable SkipWhileDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable SkipWhileDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable TakeWhileDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable TakeWhileDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable WhereDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static IQueryable WhereDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AllDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static bool AllDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AnyDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static bool AnyDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable source);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable source);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable source);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable source);
    [ExtensionAttribute]
public static object FirstDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static object FirstDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static object FirstDynamic(IQueryable source);
    [ExtensionAttribute]
public static object FirstOrDefaultDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static object FirstOrDefaultDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static object FirstOrDefaultDynamic(IQueryable source);
    [ExtensionAttribute]
public static object LastDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static object LastDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static object LastDynamic(IQueryable source);
    [ExtensionAttribute]
public static object LastOrDefaultDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static object LastOrDefaultDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static object LastOrDefaultDynamic(IQueryable source);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable source);
    [ExtensionAttribute]
public static object SingleDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static object SingleDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static object SingleDynamic(IQueryable source);
    [ExtensionAttribute]
public static object SingleOrDefaultDynamic(IQueryable source, string expression);
    [ExtensionAttribute]
public static object SingleOrDefaultDynamic(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static object SingleOrDefaultDynamic(IQueryable source);
    [ExtensionAttribute]
public static Object[] ToArrayDynamic(IQueryable source);
    [ExtensionAttribute]
public static List`1<object> ToListDynamic(IQueryable source);
    [ExtensionAttribute]
public static IQueryable`1<TSource> DistinctDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IQueryable`1<TSource> source, string expressionKeySelector, string expressionElementSelector);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IQueryable`1<TSource> source, string expressionKeySelector, string expressionElementSelector, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, string expression, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupByDynamic(IQueryable`1<TSource> source, string expression, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IQueryable`1<TSource> source, string expressionKeySelector, string expressionElementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupByDynamic(IQueryable`1<TSource> source, string expressionKeySelector, string expressionElementSelector, IEqualityComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescendingDynamic(IQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> keySelector, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDynamic(IQueryable`1<TSource> source, string expression, IComparer`1<TKey> comparer, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> ReverseDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectManyDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectManyDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectManyDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectManyDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectManyDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<object> SelectManyDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhileDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhileDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhileDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhileDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhileDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> WhereDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> WhereDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static IQueryable`1<TSource> WhereDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static IQueryable`1<TSource> WhereDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static object Execute(IQueryable source, string expression);
    [ExtensionAttribute]
public static object Execute(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static TValue Execute(IQueryable source, string expression);
    [ExtensionAttribute]
public static TValue Execute(IQueryable source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AllDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static bool AllDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static bool AllDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static bool AllDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static bool AnyDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static bool AnyDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static bool AnyDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static bool AnyDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T MaxDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T MinDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static List`1<object> SelectToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static List`1<object> SelectToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static List`1<object> SelectToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector);
    [ExtensionAttribute]
public static List`1<object> SelectToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector, object parameter);
    [ExtensionAttribute]
public static List`1<object> SelectToListDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static List`1<object> SelectToListDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static List`1<object> SelectManyToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector);
    [ExtensionAttribute]
public static List`1<object> SelectManyToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> selector, object parameter);
    [ExtensionAttribute]
public static List`1<object> SelectManyToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector);
    [ExtensionAttribute]
public static List`1<object> SelectManyToListDynamic(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, string>> selector, object parameter);
    [ExtensionAttribute]
public static List`1<object> SelectManyToListDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static List`1<object> SelectManyToListDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static T SumDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static int CountDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource FirstDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource FirstDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource FirstDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource FirstDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource FirstDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource FirstOrDefaultDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource LastDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource LastDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource LastDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource LastDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource LastDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource LastOrDefaultDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static long LongCountDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource SingleDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource SingleDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource SingleDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource SingleDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource SingleDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, string>> predicate, object parameter);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IQueryable`1<TSource> source, string expression);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IQueryable`1<TSource> source, string expression, object parameter);
    [ExtensionAttribute]
public static TSource SingleOrDefaultDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource[] ToArrayDynamic(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static List`1<TSource> ToListDynamic(IQueryable`1<TSource> source);
}
public class Z.Expressions.CodeAnalysis.CSharp.SyntaxParser : object {
    [CompilerGeneratedAttribute]
private SyntaxParserOptions ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private TokenInfo ;
    [CompilerGeneratedAttribute]
private StringBuilder ;
    [CompilerGeneratedAttribute]
private TokenInfo[] ;
    internal SyntaxParserOptions  { get; internal set; }
    internal int  { get; internal set; }
    internal TokenInfo  { get; internal set; }
    internal bool  { get; }
    internal StringBuilder  { get; internal set; }
    internal TokenInfo[]  { get; internal set; }
    internal SyntaxParser(SyntaxParserOptions , string );
    internal SyntaxParser ();
    [CompilerGeneratedAttribute]
internal SyntaxParserOptions get_();
    [CompilerGeneratedAttribute]
internal void set_(SyntaxParserOptions value);
    [CompilerGeneratedAttribute]
internal int get_();
    [CompilerGeneratedAttribute]
internal void set_(int value);
    [CompilerGeneratedAttribute]
internal TokenInfo get_();
    [CompilerGeneratedAttribute]
internal void set_(TokenInfo value);
    internal bool get_();
    [CompilerGeneratedAttribute]
internal StringBuilder get_();
    [CompilerGeneratedAttribute]
internal void set_(StringBuilder value);
    [CompilerGeneratedAttribute]
internal TokenInfo[] get_();
    [CompilerGeneratedAttribute]
internal void set_(TokenInfo[] value);
    internal void ();
    internal void (SyntaxKind , bool );
    internal void (SyntaxKind , Func`1<Exception> );
    internal bool (SyntaxKind );
    internal bool (SyntaxKind );
    internal bool (SyntaxKind , Func`1<Exception> );
    internal void ();
    internal void ();
    internal void (int );
    public static SyntaxNode ParseText(SyntaxParserOptions options, string text);
    internal SyntaxNode ();
    internal TokenInfo ();
    internal TokenInfo (int );
    internal bool (SyntaxKind );
    public static List`1<TokenInfo> Tokenize(SyntaxParserOptions options, string code, bool noLicenceCheck);
}
public class Z.Expressions.CodeAnalysis.CSharp.SyntaxParserOptions : object {
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Type> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> ;
    public bool ForceCharAsString { get; public set; }
    public bool UseEqualsAssignmentAsEqualsOperator { get; public set; }
    public bool UseCaretForExponent { get; public set; }
    public ConcurrentDictionary`2<string, Type> AliasTypes { get; public set; }
    public ConcurrentDictionary`2<string, string> AliasKeywords { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceCharAsString();
    [CompilerGeneratedAttribute]
public void set_ForceCharAsString(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseEqualsAssignmentAsEqualsOperator();
    [CompilerGeneratedAttribute]
public void set_UseEqualsAssignmentAsEqualsOperator(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCaretForExponent();
    [CompilerGeneratedAttribute]
public void set_UseCaretForExponent(bool value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Type> get_AliasTypes();
    [CompilerGeneratedAttribute]
public void set_AliasTypes(ConcurrentDictionary`2<string, Type> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, string> get_AliasKeywords();
    [CompilerGeneratedAttribute]
public void set_AliasKeywords(ConcurrentDictionary`2<string, string> value);
}
public class Z.Expressions.CodeAnalysis.CSharp.TokenInfo : object {
    internal int ;
    public SyntaxKind Kind;
    public StringBuilder ParserText;
    internal string ;
    internal int ;
    internal SyntaxKind ;
    public string Value;
    internal TokenInfo(SyntaxKind , string , StringBuilder , int , int );
    public virtual string ToString();
}
public enum Z.Expressions.CodeAnalysis.SyntaxKind : Enum {
    public int value__;
    public static SyntaxKind TildeToken;
    public static SyntaxKind ExclamationToken;
    public static SyntaxKind DollarToken;
    public static SyntaxKind PercentToken;
    public static SyntaxKind CaretToken;
    public static SyntaxKind AmpersandToken;
    public static SyntaxKind AsteriskToken;
    public static SyntaxKind OpenParenToken;
    public static SyntaxKind CloseParenToken;
    public static SyntaxKind MinusToken;
    public static SyntaxKind PlusToken;
    public static SyntaxKind EqualsToken;
    public static SyntaxKind OpenBraceToken;
    public static SyntaxKind CloseBraceToken;
    public static SyntaxKind OpenBracketToken;
    public static SyntaxKind CloseBracketToken;
    public static SyntaxKind BarToken;
    public static SyntaxKind BackslashToken;
    public static SyntaxKind ColonToken;
    public static SyntaxKind SemicolonToken;
    public static SyntaxKind DoubleQuoteToken;
    public static SyntaxKind SingleQuoteToken;
    public static SyntaxKind LessThanToken;
    public static SyntaxKind CommaToken;
    public static SyntaxKind GreaterThanToken;
    public static SyntaxKind DotToken;
    public static SyntaxKind QuestionToken;
    public static SyntaxKind HashToken;
    public static SyntaxKind SlashToken;
    public static SyntaxKind BoolKeyword;
    public static SyntaxKind ByteKeyword;
    public static SyntaxKind SByteKeyword;
    public static SyntaxKind ShortKeyword;
    public static SyntaxKind UShortKeyword;
    public static SyntaxKind IntKeyword;
    public static SyntaxKind UIntKeyword;
    public static SyntaxKind LongKeyword;
    public static SyntaxKind ULongKeyword;
    public static SyntaxKind DoubleKeyword;
    public static SyntaxKind FloatKeyword;
    public static SyntaxKind DecimalKeyword;
    public static SyntaxKind StringKeyword;
    public static SyntaxKind CharKeyword;
    public static SyntaxKind VoidKeyword;
    public static SyntaxKind ObjectKeyword;
    public static SyntaxKind TypeOfKeyword;
    public static SyntaxKind SizeOfKeyword;
    public static SyntaxKind NullKeyword;
    public static SyntaxKind TrueKeyword;
    public static SyntaxKind FalseKeyword;
    public static SyntaxKind IfKeyword;
    public static SyntaxKind ElseKeyword;
    public static SyntaxKind WhileKeyword;
    public static SyntaxKind ForKeyword;
    public static SyntaxKind ForEachKeyword;
    public static SyntaxKind DoKeyword;
    public static SyntaxKind SwitchKeyword;
    public static SyntaxKind CaseKeyword;
    public static SyntaxKind DefaultKeyword;
    public static SyntaxKind TryKeyword;
    public static SyntaxKind CatchKeyword;
    public static SyntaxKind FinallyKeyword;
    public static SyntaxKind LockKeyword;
    public static SyntaxKind GotoKeyword;
    public static SyntaxKind BreakKeyword;
    public static SyntaxKind ContinueKeyword;
    public static SyntaxKind ReturnKeyword;
    public static SyntaxKind ThrowKeyword;
    public static SyntaxKind PublicKeyword;
    public static SyntaxKind PrivateKeyword;
    public static SyntaxKind InternalKeyword;
    public static SyntaxKind ProtectedKeyword;
    public static SyntaxKind StaticKeyword;
    public static SyntaxKind ReadOnlyKeyword;
    public static SyntaxKind SealedKeyword;
    public static SyntaxKind ConstKeyword;
    public static SyntaxKind FixedKeyword;
    public static SyntaxKind StackAllocKeyword;
    public static SyntaxKind VolatileKeyword;
    public static SyntaxKind NewKeyword;
    public static SyntaxKind OverrideKeyword;
    public static SyntaxKind AbstractKeyword;
    public static SyntaxKind VirtualKeyword;
    public static SyntaxKind EventKeyword;
    public static SyntaxKind ExternKeyword;
    public static SyntaxKind RefKeyword;
    public static SyntaxKind OutKeyword;
    public static SyntaxKind InKeyword;
    public static SyntaxKind IsKeyword;
    public static SyntaxKind AsKeyword;
    public static SyntaxKind ParamsKeyword;
    public static SyntaxKind ArgListKeyword;
    public static SyntaxKind MakeRefKeyword;
    public static SyntaxKind RefTypeKeyword;
    public static SyntaxKind RefValueKeyword;
    public static SyntaxKind ThisKeyword;
    public static SyntaxKind BaseKeyword;
    public static SyntaxKind NamespaceKeyword;
    public static SyntaxKind UsingKeyword;
    public static SyntaxKind ClassKeyword;
    public static SyntaxKind StructKeyword;
    public static SyntaxKind InterfaceKeyword;
    public static SyntaxKind EnumKeyword;
    public static SyntaxKind DelegateKeyword;
    public static SyntaxKind CheckedKeyword;
    public static SyntaxKind UncheckedKeyword;
    public static SyntaxKind UnsafeKeyword;
    public static SyntaxKind OperatorKeyword;
    public static SyntaxKind ExplicitKeyword;
    public static SyntaxKind ImplicitKeyword;
    public static SyntaxKind NameofKeyword;
    public static SyntaxKind AsyncKeyword;
    public static SyntaxKind AwaitKeyword;
    public static SyntaxKind OrKeyword;
    public static SyntaxKind AndKeyword;
    public static SyntaxKind NotKeyword;
    public static SyntaxKind DefinedKeyword;
    public static SyntaxKind EndOfLineTrivia;
    public static SyntaxKind WhitespaceTrivia;
    public static SyntaxKind SingleLineCommentTrivia;
    public static SyntaxKind MultiLineCommentTrivia;
    public static SyntaxKind DocumentationCommentExteriorTrivia;
    public static SyntaxKind SingleLineDocumentationCommentTrivia;
    public static SyntaxKind MultiLineDocumentationCommentTrivia;
    public static SyntaxKind DisabledTextTrivia;
    public static SyntaxKind PreprocessingMessageTrivia;
    public static SyntaxKind IfDirectiveTrivia;
    public static SyntaxKind ElifDirectiveTrivia;
    public static SyntaxKind ElseDirectiveTrivia;
    public static SyntaxKind EndIfDirectiveTrivia;
    public static SyntaxKind RegionDirectiveTrivia;
    public static SyntaxKind EndRegionDirectiveTrivia;
    public static SyntaxKind DefineDirectiveTrivia;
    public static SyntaxKind UndefDirectiveTrivia;
    public static SyntaxKind ErrorDirectiveTrivia;
    public static SyntaxKind WarningDirectiveTrivia;
    public static SyntaxKind LineDirectiveTrivia;
    public static SyntaxKind PragmaWarningDirectiveTrivia;
    public static SyntaxKind PragmaChecksumDirectiveTrivia;
    public static SyntaxKind ReferenceDirectiveTrivia;
    public static SyntaxKind BadDirectiveTrivia;
    public static SyntaxKind SkippedTokensTrivia;
    public static SyntaxKind AddExpression;
    public static SyntaxKind SubtractExpression;
    public static SyntaxKind MultiplyExpression;
    public static SyntaxKind DivideExpression;
    public static SyntaxKind ModuloExpression;
    public static SyntaxKind LeftShiftExpression;
    public static SyntaxKind RightShiftExpression;
    public static SyntaxKind LogicalOrExpression;
    public static SyntaxKind LogicalAndExpression;
    public static SyntaxKind BitwiseOrExpression;
    public static SyntaxKind BitwiseAndExpression;
    public static SyntaxKind ExclusiveOrExpression;
    public static SyntaxKind EqualsExpression;
    public static SyntaxKind NotEqualsExpression;
    public static SyntaxKind LessThanExpression;
    public static SyntaxKind LessThanOrEqualExpression;
    public static SyntaxKind GreaterThanExpression;
    public static SyntaxKind GreaterThanOrEqualExpression;
    public static SyntaxKind IsExpression;
    public static SyntaxKind AsExpression;
    public static SyntaxKind CoalesceExpression;
    public static SyntaxKind SimpleMemberAccessExpression;
    public static SyntaxKind PointerMemberAccessExpression;
    public static SyntaxKind ConditionalAccessExpression;
    public static SyntaxKind ParenthesizedExpression;
    public static SyntaxKind ConditionalExpression;
    public static SyntaxKind InvocationExpression;
    public static SyntaxKind ElementAccessExpression;
    public static SyntaxKind ArgumentList;
    public static SyntaxKind BracketedArgumentList;
    public static SyntaxKind Argument;
    public static SyntaxKind NameColon;
    public static SyntaxKind CastExpression;
    public static SyntaxKind AnonymousMethodExpression;
    public static SyntaxKind SimpleLambdaExpression;
    public static SyntaxKind ParenthesizedLambdaExpression;
    public static SyntaxKind ObjectInitializerExpression;
    public static SyntaxKind CollectionInitializerExpression;
    public static SyntaxKind ArrayInitializerExpression;
    public static SyntaxKind AnonymousObjectMemberDeclarator;
    public static SyntaxKind ComplexElementInitializerExpression;
    public static SyntaxKind ObjectCreationExpression;
    public static SyntaxKind AnonymousObjectCreationExpression;
    public static SyntaxKind ArrayCreationExpression;
    public static SyntaxKind ImplicitArrayCreationExpression;
    public static SyntaxKind StackAllocArrayCreationExpression;
    public static SyntaxKind OmittedArraySizeExpression;
    public static SyntaxKind InterpolatedStringExpression;
    public static SyntaxKind ImplicitElementAccess;
    public static SyntaxKind SimpleAssignmentExpression;
    public static SyntaxKind AddAssignmentExpression;
    public static SyntaxKind SubtractAssignmentExpression;
    public static SyntaxKind MultiplyAssignmentExpression;
    public static SyntaxKind DivideAssignmentExpression;
    public static SyntaxKind ModuloAssignmentExpression;
    public static SyntaxKind AndAssignmentExpression;
    public static SyntaxKind ExclusiveOrAssignmentExpression;
    public static SyntaxKind OrAssignmentExpression;
    public static SyntaxKind LeftShiftAssignmentExpression;
    public static SyntaxKind RightShiftAssignmentExpression;
    public static SyntaxKind UnaryPlusExpression;
    public static SyntaxKind UnaryMinusExpression;
    public static SyntaxKind BitwiseNotExpression;
    public static SyntaxKind LogicalNotExpression;
    public static SyntaxKind PreIncrementExpression;
    public static SyntaxKind PreDecrementExpression;
    public static SyntaxKind PointerIndirectionExpression;
    public static SyntaxKind AddressOfExpression;
    public static SyntaxKind PostIncrementExpression;
    public static SyntaxKind PostDecrementExpression;
    public static SyntaxKind AwaitExpression;
    public static SyntaxKind TypeOfExpression;
    public static SyntaxKind SizeOfExpression;
    public static SyntaxKind CheckedExpression;
    public static SyntaxKind UncheckedExpression;
    public static SyntaxKind DefaultExpression;
    public static SyntaxKind MakeRefExpression;
    public static SyntaxKind RefValueExpression;
    public static SyntaxKind RefTypeExpression;
    public static SyntaxKind CheckedFactory;
    public static SyntaxKind TryFactory;
    public static SyntaxKind UncheckedFactory;
    public static SyntaxKind DateTimeExpression;
    public static SyntaxKind TimeExpression;
    public static SyntaxKind Break_All;
    public static SyntaxKind Break_Outer;
    public static SyntaxKind Checked_Null;
    public static SyntaxKind AddMethodKeyword;
    public static SyntaxKind ExclusiveOrAssignmentAlternativeExpression;
    public static SyntaxKind ExclusiveOrAlternativeExpression;
    public static SyntaxKind ExponentExpression;
    public static SyntaxKind ExponentAssignmentExpression;
    public static SyntaxKind NotEqualsAlternativeExpression;
    public static SyntaxKind Hexadecimal;
    public static SyntaxKind Literal;
    public static SyntaxKind Number;
    public static SyntaxKind Operator;
    public static SyntaxKind String;
    public static SyntaxKind Trivia;
    public static SyntaxKind Unicode;
    public static SyntaxKind Real;
    public static SyntaxKind Char;
    public static SyntaxKind Root;
    public static SyntaxKind AnonymousBodyContainer;
    public static SyntaxKind BinaryContainer;
    public static SyntaxKind BodyContainer;
    public static SyntaxKind ExpressionContainer;
    public static SyntaxKind GroupArrayContainer;
    public static SyntaxKind GroupContainer;
    public static SyntaxKind RootContainer;
    public static SyntaxKind UnaryContainer;
    public static SyntaxKind NumberU;
    public static SyntaxKind NumberL;
    public static SyntaxKind NumberUL;
    public static SyntaxKind NumberF;
    public static SyntaxKind NumberD;
    public static SyntaxKind NumberM;
    public static SyntaxKind MethodAccessExpression;
    public static SyntaxKind RegularStringSingleQuote;
    public static SyntaxKind RegularStringDoubleQuote;
    public static SyntaxKind VerbatimStringSingleQuote;
    public static SyntaxKind VerbatimStringDoubleQuote;
    public static SyntaxKind InterpolatedStringSingleQuote;
    public static SyntaxKind InterpolatedStringDoubleQuote;
    public static SyntaxKind MultiInterpolatedStringSingleQuote;
    public static SyntaxKind MultiInterpolatedStringDoubleQuote;
    public static SyntaxKind InvalidVerbatimInterpolated;
    public static SyntaxKind CheckedGroupExpression;
    public static SyntaxKind CheckedBodyExpression;
    public static SyntaxKind CheckedNullExpression;
    public static SyntaxKind UncheckedGroupExpression;
    public static SyntaxKind UncheckedBodyExpression;
    public static SyntaxKind GenericTypeExpression;
    public static SyntaxKind PlusPlusToken;
    public static SyntaxKind MinusMinusToken;
    public static SyntaxKind NullableTypeExpression;
    public static SyntaxKind ConditionalExpressionOrNullableTypeExpression;
    public static SyntaxKind ColonColonToken;
    public static SyntaxKind MinusGreaterThanToken;
    public static SyntaxKind TryExpression;
    public static SyntaxKind TryCompileExpression;
    public static SyntaxKind FactorialExpression;
    public static SyntaxKind DisposeTypeOrBitwiseNotExpression;
    public static SyntaxKind BreakAllKeyword;
    public static SyntaxKind BreakOuterKeyword;
    public static SyntaxKind IIFKeyword;
    public static SyntaxKind RangeArrayExpression;
    public static SyntaxKind MemberAccessAlternativeExpression;
    public static SyntaxKind ConditionalMemberAccessExpression;
    public static SyntaxKind ConditionalMethodAccessExpression;
    public static SyntaxKind ConditionalMethodGenericAccessExpression;
    public static SyntaxKind ConditionalIndexAccessExpression;
    public static SyntaxKind IndexAccessExpression;
    public static SyntaxKind MethodExpression;
    public static SyntaxKind CommaContainer;
    public static SyntaxKind GroupParameterContainer;
    public static SyntaxKind ParameterExpression;
    public static SyntaxKind BodyExpression;
    public static SyntaxKind MethodVariableOrStaticMemberAccessExpression;
    public static SyntaxKind AnonymousBodyOrParameterExpression;
    public static SyntaxKind HashHashToken;
    public static SyntaxKind None;
    public static SyntaxKind MethodGenericAccessExpression;
    public static SyntaxKind ResolvedExpression;
    public static SyntaxKind PendingExpression;
    public static SyntaxKind IsNotKeyword;
}
public class Z.Expressions.CodeAnalysis.SyntaxNode : object {
    internal List`1<SyntaxNode> ;
    internal SyntaxNode ;
    internal SyntaxNode ;
    internal SyntaxNode ;
    internal SyntaxNode ;
    internal bool ;
    internal bool ;
    internal SyntaxKind ;
    internal SyntaxNode ;
    internal SyntaxNode ;
    internal int ;
    internal SyntaxNode ;
    internal SyntaxNode ;
    internal TokenInfo ;
    internal SyntaxNode ;
    internal Expression ;
    internal Func`2<SyntaxNode, SyntaxNode> ;
    internal bool ;
    internal bool ;
    internal TokenInfo ;
    internal SyntaxNode(SyntaxKind );
    internal SyntaxNode(SyntaxKind , List`1<SyntaxNode> );
    internal SyntaxNode(TokenInfo );
    public virtual string ToString();
    public SyntaxNode Clone();
    public SyntaxNode CloneWithArguments();
    internal static int (int );
    internal static int (int );
}
public enum Z.Expressions.CodeCompiler.CSharp.DefaultNumberType : Enum {
    public int value__;
    public static DefaultNumberType None;
    public static DefaultNumberType Int;
    public static DefaultNumberType UInt;
    public static DefaultNumberType Long;
    public static DefaultNumberType ULong;
    public static DefaultNumberType Float;
    public static DefaultNumberType Double;
    public static DefaultNumberType Decimal;
}
public static class Z.Expressions.CodeCompiler.CSharp.DynamicAnonymousType : object {
    private static AssemblyName ;
    private static ModuleBuilder ;
    private static Dictionary`2<string, Tuple`2<string, Type>> ;
    private static DynamicAnonymousType();
    public static Expression CreateExpression(List`1<Tuple`2<string, Expression>> values, SyntaxNode node, bool hasNoValue, ExpressionScope scope);
    private static string (List`1<Tuple`2<string, Type>> );
    public static Type GetDynamicType(List`1<Tuple`2<string, Type>> fields, SyntaxNode node, bool hasNoValue);
    public static void GenerateEquals(TypeBuilder tb, List`1<FieldBuilder> fields);
    public static void GenerateHashCode(TypeBuilder tb, List`1<FieldBuilder> fields);
}
public class Z.Expressions.CodeCompiler.CSharp.ExpressionParser : object {
    public static Expression ParseSyntax(ExpressionScope scope, SyntaxNode node, Type resultType);
}
public class Z.Expressions.CodeCompiler.CSharp.ExpressionScope : object {
    internal Dictionary`2<string, LabelTarget> ;
    internal LabelTarget ;
    internal bool ;
    internal bool ;
    internal ParameterExpression ;
    public bool IsLinq;
    internal  ;
    public Dictionary`2<string, ConstantExpression> Constants;
    internal Type ;
    internal bool ;
    internal bool ;
    public List`1<Expression> Expressions;
    internal Dictionary`2<string, LabelTarget> ;
    internal ExpressionScope ;
    internal ExpressionScope ;
    internal ExpressionScope ;
    public bool SafeMode;
    internal Type ;
    internal bool ;
    internal bool ;
    internal Dictionary`2<string, ParameterExpression> ;
    internal Dictionary`2<string, ParameterExpression> ;
    internal Dictionary`2<string, ParameterExpression> ;
    internal Dictionary`2<string, Expression> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> ;
    public Dictionary`2<MethodInfo, string> InstanceMethods;
    internal Dictionary`2<string, Type> ;
    [CompilerGeneratedAttribute]
private Action`1<VariableFactoryArgument> ;
    [CompilerGeneratedAttribute]
private HashSet`1<Guid> ;
    public string OriginalCode;
    public BindingFlags BindingFlags;
    public bool UseCaretForExponent;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private static string ;
    internal Lazy`1<LabelTarget> ;
    private Lazy`1<LabelTarget> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Expression> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Type> ;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> ;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> ;
    internal Dictionary`2<string, Lazy`1<Expression>> ;
    internal Dictionary`2<string, Type> ;
    [CompilerGeneratedAttribute]
private int ;
    public Dictionary`2<string, Type> DynamicPreferedType;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private List`1<string> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private Func`3<object, string, object> ;
    [CompilerGeneratedAttribute]
private DefaultNumberType ;
    [CompilerGeneratedAttribute]
private Nullable`1<int> ;
    [CompilerGeneratedAttribute]
private bool ;
    internal bool  { get; }
    internal bool  { get; }
    public ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> TemporaryMethodTest { get; public set; }
    public Action`1<VariableFactoryArgument> VariableFactory { get; public set; }
    public HashSet`1<Guid> GlobalVariableGuids { get; public set; }
    public bool DisableDynamicResolution { get; public set; }
    public bool AllowAddSubtractOperatorToCollection { get; public set; }
    public static string PreferedTypePrefixForFind { get; public set; }
    public ConcurrentDictionary`2<string, Expression> AliasGlobalExpressionVariables { get; public set; }
    public ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> AliasGlobalMethodVariables { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> AliasExtensionMethods { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> AliasExtensionMethodsScope { get; public set; }
    public ConcurrentDictionary`2<string, string> AliasNames { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> AliasStaticMembers { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> AliasStaticMembersScope { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> AliasMembers { get; public set; }
    public ConcurrentDictionary`2<string, Type> AliasTypes { get; public set; }
    internal HashSet`1<Type>  { get; internal set; }
    public HashSet`1<Type> UsedTypes { get; public set; }
    internal int  { get; internal set; }
    public bool IncludeMemberFromAllParameters { get; public set; }
    public List`1<string> DynamicMemberNames { get; public set; }
    public bool UseTypeBeforeDynamic { get; public set; }
    public bool ForceObjectAsDynamic { get; public set; }
    public bool ForceIncludeInstanceMethodFromParameter { get; public set; }
    public bool UseSmartTypeResolution { get; public set; }
    public Func`3<object, string, object> DynamicGetMemberMissingValueFactory { get; public set; }
    public DefaultNumberType DefaultNumberType { get; public set; }
    public Nullable`1<int> MaxLoopIteration { get; public set; }
    public bool DisableConstantFolding { get; public set; }
    private static ExpressionScope();
    public void ResolveParameterDynamicCount(string Key, Type memberType);
    internal bool get_();
    internal bool get_();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> get_TemporaryMethodTest();
    [CompilerGeneratedAttribute]
public void set_TemporaryMethodTest(ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> value);
    [CompilerGeneratedAttribute]
public Action`1<VariableFactoryArgument> get_VariableFactory();
    [CompilerGeneratedAttribute]
public void set_VariableFactory(Action`1<VariableFactoryArgument> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Guid> get_GlobalVariableGuids();
    [CompilerGeneratedAttribute]
public void set_GlobalVariableGuids(HashSet`1<Guid> value);
    [CompilerGeneratedAttribute]
public bool get_DisableDynamicResolution();
    [CompilerGeneratedAttribute]
public void set_DisableDynamicResolution(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAddSubtractOperatorToCollection();
    [CompilerGeneratedAttribute]
public void set_AllowAddSubtractOperatorToCollection(bool value);
    [CompilerGeneratedAttribute]
public static string get_PreferedTypePrefixForFind();
    [CompilerGeneratedAttribute]
public static void set_PreferedTypePrefixForFind(string value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Expression> get_AliasGlobalExpressionVariables();
    [CompilerGeneratedAttribute]
public void set_AliasGlobalExpressionVariables(ConcurrentDictionary`2<string, Expression> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> get_AliasGlobalMethodVariables();
    [CompilerGeneratedAttribute]
public void set_AliasGlobalMethodVariables(ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> get_AliasExtensionMethods();
    [CompilerGeneratedAttribute]
public void set_AliasExtensionMethods(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> get_AliasExtensionMethodsScope();
    [CompilerGeneratedAttribute]
public void set_AliasExtensionMethodsScope(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, string> get_AliasNames();
    [CompilerGeneratedAttribute]
public void set_AliasNames(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> get_AliasStaticMembers();
    [CompilerGeneratedAttribute]
public void set_AliasStaticMembers(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> get_AliasStaticMembersScope();
    [CompilerGeneratedAttribute]
public void set_AliasStaticMembersScope(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> get_AliasMembers();
    [CompilerGeneratedAttribute]
public void set_AliasMembers(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Type> get_AliasTypes();
    [CompilerGeneratedAttribute]
public void set_AliasTypes(ConcurrentDictionary`2<string, Type> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<Type> get_();
    [CompilerGeneratedAttribute]
internal void set_(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_UsedTypes();
    [CompilerGeneratedAttribute]
public void set_UsedTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal int get_();
    [CompilerGeneratedAttribute]
internal void set_(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeMemberFromAllParameters();
    [CompilerGeneratedAttribute]
public void set_IncludeMemberFromAllParameters(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DynamicMemberNames();
    [CompilerGeneratedAttribute]
public void set_DynamicMemberNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_UseTypeBeforeDynamic();
    [CompilerGeneratedAttribute]
public void set_UseTypeBeforeDynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceObjectAsDynamic();
    [CompilerGeneratedAttribute]
public void set_ForceObjectAsDynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceIncludeInstanceMethodFromParameter();
    [CompilerGeneratedAttribute]
public void set_ForceIncludeInstanceMethodFromParameter(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSmartTypeResolution();
    [CompilerGeneratedAttribute]
public void set_UseSmartTypeResolution(bool value);
    [CompilerGeneratedAttribute]
public Func`3<object, string, object> get_DynamicGetMemberMissingValueFactory();
    [CompilerGeneratedAttribute]
public void set_DynamicGetMemberMissingValueFactory(Func`3<object, string, object> value);
    [CompilerGeneratedAttribute]
public DefaultNumberType get_DefaultNumberType();
    [CompilerGeneratedAttribute]
public void set_DefaultNumberType(DefaultNumberType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLoopIteration();
    [CompilerGeneratedAttribute]
public void set_MaxLoopIteration(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_DisableConstantFolding();
    [CompilerGeneratedAttribute]
public void set_DisableConstantFolding(bool value);
    public Expression CreateBody(bool isMain, Type tResult);
    internal LabelTarget (string );
    internal LabelTarget (string , SyntaxNode );
    internal LabelTarget (Type );
    internal LabelTarget ();
    internal void (LabelTarget , Type );
    internal LabelTarget (SyntaxNode );
    internal LabelTarget (SyntaxNode );
    internal bool ();
    internal bool ();
    internal ExpressionScope (bool , bool );
    internal ExpressionScope ( );
    internal ExpressionScope ();
    internal bool (string , Type& );
    public Expression GetValueExpressionOrNull(ExpressionScope scope, string name, bool disableAlias);
    public void CreateLazyVariable(string name, Lazy`1<Expression> lazy);
    public void RegisterCompileType(Type type);
    public ParameterExpression CreateVariable(Type type, string name);
    public ParameterExpression CreateVariable(Type type);
    public ParameterExpression CreateParameter(Type type, string name);
    public ParameterExpression CreateParameter(Type type);
    public ParameterExpression CreateInnerParameter(Type type, string name);
    public ParameterExpression CreateInnerParameter(Type type);
    public static void ResolzeLazyMember(ExpressionScope scope, string parameterName, Type memberType, HashSet`1<string> memberNames, List`1<Tuple`3<Type, HashSet`1<string>, HashSet`1<string>>> typeMemberMethodFilterList);
    private static void (ExpressionScope , string , Type , HashSet`1<string> , List`1<Tuple`3<Type, HashSet`1<string>, HashSet`1<string>>> );
}
public class Z.Expressions.CodeCompiler.CSharp.Helper.InternalPublicMethod : object {
    [CompilerGeneratedAttribute]
private static MethodInfo ;
    [CompilerGeneratedAttribute]
private static MethodInfo ;
    [CompilerGeneratedAttribute]
private static MethodInfo ;
    [CompilerGeneratedAttribute]
private static MethodInfo ;
    [CompilerGeneratedAttribute]
private static MethodInfo ;
    internal static MethodInfo  { get; internal set; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; internal set; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; internal set; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; internal set; }
    internal static MethodInfo  { get; }
    internal static MethodInfo  { get; internal set; }
    internal static MethodInfo  { get; }
    [CompilerGeneratedAttribute]
internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static void set_(MethodInfo value);
    internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static void set_(MethodInfo value);
    internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static void set_(MethodInfo value);
    internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static void set_(MethodInfo value);
    internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static MethodInfo get_();
    [CompilerGeneratedAttribute]
internal static void set_(MethodInfo value);
    internal static MethodInfo get_();
    public static string ToStringSafe(object stringToResolve);
    public static List`1<TSource> ToListOptimized(IEnumerable`1<TSource> this);
    public static void AddRange(ICollection`1<T1> list, ICollection`1<T1> listToAdd);
    public static void RemoveRange(ICollection`1<T1> list, ICollection`1<T1> listToRemove);
}
public class Z.Expressions.CodeCompiler.CSharp.OverloadResolution.ApplicableMember : object {
    internal bool ;
    internal bool ;
    internal ApplicableMemberKind ;
    internal MemberInfo ;
    internal MethodBase ;
    internal PropertyInfo ;
    internal List`1<ApplicableMemberParameter> ;
    internal List`1<ApplicableMemberParameter> ;
    internal List`1<ApplicableMemberParameter> ;
    internal ExpressionScope ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Expression ;
    internal Expression ;
    internal Expression ;
    internal bool  { get; }
    internal bool get_();
    public void CreateOutAssignmentVariable();
    public List`1<Expression> GetApplicableParameters(SyntaxNode node);
}
public class Z.Expressions.CodeCompiler.CSharp.OverloadResolution.ApplicableMemberGenericArgument : object {
    public string Name;
    public Type Type;
    public ApplicableMemberGenericArgument(string name);
}
public enum Z.Expressions.CodeCompiler.CSharp.OverloadResolution.ApplicableMemberKind : Enum {
    public int value__;
    public static ApplicableMemberKind Normal;
    public static ApplicableMemberKind Extension;
    public static ApplicableMemberKind Generic;
    public static ApplicableMemberKind ExtensionGeneric;
}
public class Z.Expressions.CodeCompiler.CSharp.OverloadResolution.ApplicableMemberParameter : object {
    public ParameterExpressionInfo[] FormExpandableParameterExpressions;
    public Expression[] FormExpandableValueExpressions;
    public ParameterExpressionInfo FormNormalParameterExpression;
    public Expression FormNormalValueExpression;
    public ParameterInfo MethodParameter;
    public int Power;
    public Type ValueType;
    public bool IsNullableParameter;
}
public class Z.Expressions.CodeCompiler.CSharp.ParameterExpressionInfo : object {
    public bool IsByRef;
    public bool IsOutAssignment;
    public string Name;
    public string ParameterName;
    public Type[] Types;
    public Expression Value;
    public List`1<Expression> Values;
    public ParameterExpressionInfo(List`1<Expression> expressions, Type[] types);
}
public class Z.Expressions.CodeCompiler.FakeAnonymousType : object {
    public Dictionary`2<string, object> Properties;
    public T GetValue(string name);
    public void Add(string name, T value);
    internal static int (int );
}
public static class Z.Expressions.Compiler.PublicInternalHelper : object {
    public static Tuple`2<string, string> GetJsonLicenseValueOfSection(string jsonText, string sectionNameInput);
    [CompilerGeneratedAttribute]
internal static void (string , & );
}
public class Z.Expressions.Compiler.Shared.EvalException : Exception {
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private int ;
    [CompilerGeneratedAttribute]
private string ;
    public string OriginalCode { get; public set; }
    public string ParsedCode { get; public set; }
    public string Token { get; public set; }
    public int StartPosition { get; public set; }
    public string NearText { get; public set; }
    public EvalException(string message);
    public EvalException(string message, Exception innerException);
    public EvalException(EvalException exception, Exception innerException);
    internal static EvalException (string , EvalException );
    [CompilerGeneratedAttribute]
public string get_OriginalCode();
    [CompilerGeneratedAttribute]
public void set_OriginalCode(string value);
    [CompilerGeneratedAttribute]
public string get_ParsedCode();
    [CompilerGeneratedAttribute]
public void set_ParsedCode(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public string get_NearText();
    [CompilerGeneratedAttribute]
public void set_NearText(string value);
    internal static int (int );
}
public class Z.Expressions.Compiler.Shared.ZedMethodInfo : MethodInfo {
    public ParameterInfo[] _Parameters;
    public string _Name;
    public MethodAttributes _Attributes;
    public Type _ReturnType;
    public Type _DeclareType;
    public Delegate InvokeExpression;
    public MethodInfo MethodInfo;
    public LambdaExpression ExpressionToCall;
    public bool IsExtensionAttribute;
    [CompilerGeneratedAttribute]
private ICustomAttributeProvider ;
    [CompilerGeneratedAttribute]
private Type ;
    [CompilerGeneratedAttribute]
private RuntimeMethodHandle ;
    public string Name { get; }
    public Type ReturnType { get; }
    public Type DeclaringType { get; }
    public MethodAttributes Attributes { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public Type ReflectedType { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public ZedMethodInfo(Delegate invokeExpression, Type returnType, string name, bool isExtensionAttribute, ParameterInfo[] parameters);
    public ZedMethodInfo(MethodInfo methodInfo, bool isExtensionAttribute, LambdaExpression expression);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual ParameterInfo[] GetParameters();
    public virtual string get_Name();
    public virtual Type get_ReturnType();
    public virtual Type get_DeclaringType();
    public virtual MethodAttributes get_Attributes();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual MethodInfo GetBaseDefinition();
    [CompilerGeneratedAttribute]
public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    [CompilerGeneratedAttribute]
public virtual Type get_ReflectedType();
    [CompilerGeneratedAttribute]
public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    internal static int (int );
}
[AttributeUsageAttribute("4")]
public class Z.Expressions.Compiler.Shared.ZedMethodInfoAttribute : Attribute {
}
public class Z.Expressions.Compiler.Shared.ZedParameterInfo : ParameterInfo {
    public Type _ParameterType;
    public string _Name;
    public Type ParameterType { get; }
    public string Name { get; }
    public ZedParameterInfo(Type parameterType, string name);
    public virtual Type get_ParameterType();
    public virtual string get_Name();
}
public class Z.Expressions.CompilerManager : object {
    public static string ZzzExpandoPrefix;
    public static string ZzzLinqDictionaryPrefix;
    public static string ZzzLinqDictionaryKeyPrefix;
    public static string InternalZInfo;
    internal static ConcurrentBag`1<Tuple`2<string, string>> ;
    [CompilerGeneratedAttribute]
private static bool ;
    public static bool IsCommunity { get; public set; }
    private static CompilerManager();
    [CompilerGeneratedAttribute]
public static bool get_IsCommunity();
    [CompilerGeneratedAttribute]
public static void set_IsCommunity(bool value);
    public static void LoadEntityFrameworkClassicConfiguration();
    public static bool ValidateLicense();
    public static bool ValidateLicense(String& errorMessage);
    public static bool IsTrialMode();
    public static bool IsTrialExpired();
    public static bool IsLicenseAdded();
    public static void AddLicense(string licenseName, string licenseKey);
    [CompilerGeneratedAttribute]
internal static void (string , & , & );
}
public enum Z.Expressions.DefaultNumberType : Enum {
    public int value__;
    public static DefaultNumberType None;
    public static DefaultNumberType Int;
    public static DefaultNumberType UInt;
    public static DefaultNumberType Long;
    public static DefaultNumberType ULong;
    public static DefaultNumberType Float;
    public static DefaultNumberType Double;
    public static DefaultNumberType Decimal;
}
public static class Z.Expressions.Eval : object {
    public static Func`1<object> Compile(string code);
    public static Func`2<IEnumerable, object> Compile(string code, IEnumerable`1<Type> parameterTypes);
    public static Func`2<IEnumerable, object> Compile(string code, Type[] parameterTypes);
    public static Func`2<IDictionary, object> Compile(string code, IDictionary`2<string, Type> parameterTypes, bool allowWritableVariable);
    public static Func`2<object, object> Compile(string code, Type type1);
    public static Func`3<object, object, object> Compile(string code, Type type1, Type type2);
    public static Func`4<object, object, object, object> Compile(string code, Type type1, Type type2, Type type3);
    public static Func`5<object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4);
    public static Func`6<object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5);
    public static Func`7<object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6);
    public static Func`8<object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7);
    public static Func`9<object, object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7, Type type8);
    public static Func`10<object, object, object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7, Type type8, Type type9);
    public static TDelegate Compile(string code);
    public static TDelegate Compile(string code, IEnumerable`1<string> parameterNames);
    public static TDelegate Compile(string code, String[] parameterNames);
    public static object Execute(string code);
    public static object Execute(string code, object parameters);
    public static object Execute(string code, Object[] parameters);
    public static TResult Execute(string code);
    public static TResult Execute(string code, object parameters);
    public static TResult Execute(string code, Object[] parameters);
    public static List`1<TokenInfo> Tokenize(string code);
}
public enum Z.Expressions.EvalCompilerParameterKind : Enum {
    public int value__;
    public static EvalCompilerParameterKind None;
    public static EvalCompilerParameterKind Dictionary;
    public static EvalCompilerParameterKind DictionarySmart;
    public static EvalCompilerParameterKind Enumerable;
    public static EvalCompilerParameterKind SingleDictionary;
    public static EvalCompilerParameterKind Typed;
    public static EvalCompilerParameterKind Untyped;
    public static EvalCompilerParameterKind Linq;
}
public class Z.Expressions.EvalContext : object {
    internal static EvalContext ;
    internal ConcurrentDictionary`2<string, object> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private List`1<string> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConstantExpression> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, object> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Guid, Dictionary`2<string, object>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, object> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Expression> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Type> ;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Assembly, Assembly> ;
    [CompilerGeneratedAttribute]
private List`1<Type> ;
    [CompilerGeneratedAttribute]
private List`1<Type> ;
    [CompilerGeneratedAttribute]
private Expression ;
    [CompilerGeneratedAttribute]
private List`1<ParameterExpression> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private BindingFlags ;
    [CompilerGeneratedAttribute]
private Nullable`1<int> ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private Func`3<object, string, object> ;
    [CompilerGeneratedAttribute]
private Action`1<VariableFactoryArgument> ;
    [CompilerGeneratedAttribute]
private DefaultNumberType ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private bool ;
    public bool UseLocalCache { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> AliasExtensionMethods { get; public set; }
    public bool IncludeMemberFromAllParameters { get; public set; }
    public bool UseSmartExecuteParameterResolution { get; public set; }
    public bool UseShortCacheKey { get; public set; }
    public List`1<string> DynamicMemberNames { get; public set; }
    public ConcurrentDictionary`2<string, ConstantExpression> AliasGlobalConstants { get; public set; }
    public ConcurrentDictionary`2<string, object> AliasGlobalVariables { get; public set; }
    public ConcurrentDictionary`2<string, string> AliasKeywords { get; public set; }
    public ConcurrentDictionary`2<Guid, Dictionary`2<string, object>> AliasDictionaryGlobalVariables { get; public set; }
    public ConcurrentDictionary`2<string, object> AliasLocalVariables { get; public set; }
    public ConcurrentDictionary`2<string, Expression> AliasGlobalExpressionVariables { get; public set; }
    public ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> AliasGlobalMethodVariables { get; public set; }
    public ConcurrentDictionary`2<string, string> AliasNames { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> AliasStaticMembers { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> AliasMembers { get; public set; }
    public ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> InternalAddMethods { get; public set; }
    public ConcurrentDictionary`2<string, Type> AliasTypes { get; public set; }
    public ConcurrentDictionary`2<Assembly, Assembly> AutoAddMissingTypeAssemblies { get; public set; }
    public List`1<Type> UsedTypes { get; public set; }
    public List`1<Type> MissingTypes { get; public set; }
    public Expression LastCompiledExpression { get; public set; }
    public List`1<ParameterExpression> LastCompiledParameterExpressions { get; public set; }
    public bool DisableConstantFolding { get; public set; }
    public BindingFlags BindingFlags { get; public set; }
    public Nullable`1<int> MaxLoopIteration { get; public set; }
    public bool IsCaseSensitive { get; public set; }
    public bool ForceIncludeInstanceMethodFromParameter { get; public set; }
    public string CacheKeyPrefix { get; public set; }
    public bool UseCache { get; public set; }
    public bool UseCaretForExponent { get; public set; }
    public bool RetryAndThrowMissingTypes { get; public set; }
    public bool UseSmartTypeResolution { get; public set; }
    public bool AutoAddMissingTypes { get; public set; }
    public bool SafeMode { get; public set; }
    public bool DisableAutoReplaceDictionaryKey { get; public set; }
    public bool UseTypeBeforeDynamic { get; public set; }
    public bool DisableDynamicResolution { get; public set; }
    public bool ForceObjectAsDynamic { get; public set; }
    public bool AllowAddSubtractOperatorToCollection { get; public set; }
    public bool ForceCharAsString { get; public set; }
    public bool UseEqualsAssignmentAsEqualsOperator { get; public set; }
    public Func`3<object, string, object> DynamicGetMemberMissingValueFactory { get; public set; }
    public Action`1<VariableFactoryArgument> VariableFactory { get; public set; }
    public DefaultNumberType DefaultNumberType { get; public set; }
    internal string  { get; internal set; }
    public bool DisableAutoRegisterEntityFramework { get; public set; }
    private static EvalContext();
    public EvalContext AddMethod(string code);
    public Func`1<object> Compile(string code);
    public Func`2<IEnumerable, object> Compile(string code, IEnumerable`1<Type> parameterTypes);
    public Func`2<IEnumerable, object> Compile(string code, Type[] parameterTypes);
    public Func`2<IDictionary, object> Compile(string code, IDictionary`2<string, Type> parameterTypes, bool allowWritableVariable);
    public Func`2<object, object> Compile(string code, Type type1);
    public Func`3<object, object, object> Compile(string code, Type type1, Type type2);
    public Func`4<object, object, object, object> Compile(string code, Type type1, Type type2, Type type3);
    public Func`5<object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4);
    public Func`6<object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5);
    public Func`7<object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6);
    public Func`8<object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7);
    public Func`9<object, object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7, Type type8);
    public Func`10<object, object, object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7, Type type8, Type type9);
    public TDelegate Compile(string code);
    public TDelegate Compile(string code, IEnumerable`1<string> parameterNames);
    public TDelegate Compile(string code, String[] parameterNames);
    public EvalContext Clone();
    public void RegisterDefaultAliasSafe();
    public void RegisterDefaultAliasUnsafe();
    public object Execute(string code);
    public object Execute(string code, object parameters);
    public object Execute(string code, Object[] parameters);
    public TResult Execute(string code);
    public TResult Execute(string code, object parameters);
    internal static void (string , IDictionary`2<string, object> , Dictionary`2<string, Type> );
    public TResult Execute(string code, Object[] parameters);
    public bool IsRegisteredUsingDirective(string name);
    public bool IsRegisteredKeyword(string keyword);
    public bool IsRegisteredAutoAddMissingTypeAssembly(Assembly assembly);
    public bool IsRegisteredAlias(string alias);
    public bool IsRegisteredAlias(string alias, string name);
    public bool IsRegisteredAssembly(Assembly assembly);
    public bool IsRegisteredExtensionMethod(Type type);
    public bool IsRegisteredExtensionMethod(MethodInfo extensionMethod);
    public bool IsRegisteredGlobalConstant(string name);
    public bool IsRegisteredGlobalConstant(string name, object value);
    public bool IsRegisteredGlobalVariable(string name);
    public bool IsRegisteredGlobalVariable(string name, object value);
    public bool IsRegisteredLocalVariable(string name);
    public bool IsRegisteredLocalVariable(string name, object value);
    public bool IsRegisteredMember(Type type);
    public bool IsRegisteredMember(MemberInfo member);
    public bool IsRegisteredNamespace(Assembly assembly, string name);
    public bool IsRegisteredStaticField(Type type);
    public bool IsRegisteredStaticField(FieldInfo field);
    public bool IsRegisteredStaticMember(Type type);
    public bool IsRegisteredStaticMember(MemberInfo member);
    public bool IsRegisteredStaticMethod(Type type);
    public bool IsRegisteredStaticMethod(MethodInfo method);
    public bool IsRegisteredStaticProperty(Type type);
    public bool IsRegisteredStaticProperty(PropertyInfo property);
    public bool IsRegisteredType(string name);
    public bool IsRegisteredType(Type type);
    public EvalContext RegisterUsingDirective(string name);
    public EvalContext RegisterKeyword(string keyword, string extensionMethodName);
    public EvalContext RegisterAutoAddMissingTypeAssembly(Assembly[] assemblies);
    internal EvalContext (IQueryable );
    internal EvalContext (IQueryable );
    public EvalContext RegisterStaticMethod(Type[] types);
    public EvalContext RegisterStaticMethod(MethodInfo[] methods);
    public EvalContext RegisterStaticProperty(Type[] types);
    public EvalContext RegisterStaticProperty(PropertyInfo[] properties);
    public EvalContext RegisterStaticField(Type[] types);
    public EvalContext RegisterStaticField(FieldInfo[] fields);
    public EvalContext RegisterNamespace(Assembly assembly, string name);
    public EvalContext RegisterLocalVariable(string name, object value);
    public EvalContext RegisterAlias(string alias, string name);
    public EvalContext RegisterAssembly(Assembly[] assemblies);
    public EvalContext RegisterDomainAssemblies();
    public EvalContext RegisterExtensionMethod(Type[] types);
    public EvalContext RegisterExtensionMethod(MethodInfo[] extensionMethods);
    public EvalContext RegisterGlobalConstant(string name, object value);
    public EvalContext RegisterGlobalVariable(string name, object value, bool includeMembers);
    public EvalContext RegisterGlobalVariable(Dictionary`2<string, object> dictionary);
    public EvalContext RegisterMember(Type[] types);
    public EvalContext RegisterMember(MemberInfo[] members);
    public EvalContext RegisterStaticMember(Type[] types);
    public EvalContext RegisterStaticMember(MemberInfo[] members);
    public EvalContext RegisterType(Type[] types);
    public List`1<TokenInfo> Tokenize(string code);
    public EvalContext UnregisterUsingDirective(string name);
    public EvalContext UnregisterKeyword(string keyword);
    public EvalContext UnregisterAutoAddMissingTypeAssembly(Assembly[] assemblies);
    public EvalContext UnregisterStaticMethod(Type[] types);
    public EvalContext UnregisterStaticMethod(MemberInfo[] methods);
    public EvalContext UnregisterStaticMethod(String[] extensionMethods);
    public EvalContext UnregisterStaticProperty(Type[] types);
    public EvalContext UnregisterStaticProperty(MemberInfo[] properties);
    public EvalContext UnregisterStaticField(Type[] types);
    public EvalContext UnregisterStaticField(MemberInfo[] fields);
    public EvalContext UnregisterNamespace(Assembly assembly, string name);
    public EvalContext UnregisterLocalVariable(String[] aliases);
    public EvalContext UnregisterAlias(String[] aliases);
    public EvalContext UnregisterAll();
    public EvalContext UnregisterAssembly(Assembly[] assemblies);
    public EvalContext UnregisterExtensionMethod(Type[] types);
    public EvalContext UnregisterExtensionMethod(MethodInfo[] extensionMethods);
    public EvalContext UnregisterExtensionMethod(String[] extensionMethods);
    public EvalContext UnregisterGlobalConstant(String[] aliases);
    public EvalContext UnregisterGlobalVariable(String[] aliases);
    public EvalContext UnregisterGlobalVariable(Dictionary`2<string, object> dictionary);
    public EvalContext UnregisterMember(Type[] types);
    public EvalContext UnregisterMember(MemberInfo[] members);
    public EvalContext UnregisterStaticMember(Type[] types);
    public EvalContext UnregisterStaticMember(MemberInfo[] members);
    public EvalContext UnregisterType(Type[] types);
    internal void ();
    internal static ConcurrentDictionary`2<Guid, Dictionary`2<string, object>> ();
    internal static ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> ();
    internal static ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> ();
    internal static ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> ();
    internal static ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> ();
    internal static ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> ();
    [CompilerGeneratedAttribute]
public bool get_UseLocalCache();
    [CompilerGeneratedAttribute]
public void set_UseLocalCache(bool value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> get_AliasExtensionMethods();
    [CompilerGeneratedAttribute]
public void set_AliasExtensionMethods(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MethodInfo, byte>> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeMemberFromAllParameters();
    [CompilerGeneratedAttribute]
public void set_IncludeMemberFromAllParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSmartExecuteParameterResolution();
    [CompilerGeneratedAttribute]
public void set_UseSmartExecuteParameterResolution(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseShortCacheKey();
    [CompilerGeneratedAttribute]
public void set_UseShortCacheKey(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DynamicMemberNames();
    [CompilerGeneratedAttribute]
public void set_DynamicMemberNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConstantExpression> get_AliasGlobalConstants();
    [CompilerGeneratedAttribute]
public void set_AliasGlobalConstants(ConcurrentDictionary`2<string, ConstantExpression> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, object> get_AliasGlobalVariables();
    [CompilerGeneratedAttribute]
public void set_AliasGlobalVariables(ConcurrentDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, string> get_AliasKeywords();
    [CompilerGeneratedAttribute]
public void set_AliasKeywords(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<Guid, Dictionary`2<string, object>> get_AliasDictionaryGlobalVariables();
    [CompilerGeneratedAttribute]
public void set_AliasDictionaryGlobalVariables(ConcurrentDictionary`2<Guid, Dictionary`2<string, object>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, object> get_AliasLocalVariables();
    [CompilerGeneratedAttribute]
public void set_AliasLocalVariables(ConcurrentDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Expression> get_AliasGlobalExpressionVariables();
    [CompilerGeneratedAttribute]
public void set_AliasGlobalExpressionVariables(ConcurrentDictionary`2<string, Expression> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> get_AliasGlobalMethodVariables();
    [CompilerGeneratedAttribute]
public void set_AliasGlobalMethodVariables(ConcurrentDictionary`2<string, Tuple`2<List`1<MethodInfo>, Expression>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, string> get_AliasNames();
    [CompilerGeneratedAttribute]
public void set_AliasNames(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> get_AliasStaticMembers();
    [CompilerGeneratedAttribute]
public void set_AliasStaticMembers(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> get_AliasMembers();
    [CompilerGeneratedAttribute]
public void set_AliasMembers(ConcurrentDictionary`2<string, ConcurrentDictionary`2<MemberInfo, byte>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> get_InternalAddMethods();
    [CompilerGeneratedAttribute]
public void set_InternalAddMethods(ConcurrentDictionary`2<string, Tuple`4<Type, string, bool, List`1<ZedParameterInfo>>> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, Type> get_AliasTypes();
    [CompilerGeneratedAttribute]
public void set_AliasTypes(ConcurrentDictionary`2<string, Type> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<Assembly, Assembly> get_AutoAddMissingTypeAssemblies();
    [CompilerGeneratedAttribute]
public void set_AutoAddMissingTypeAssemblies(ConcurrentDictionary`2<Assembly, Assembly> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_UsedTypes();
    [CompilerGeneratedAttribute]
public void set_UsedTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_MissingTypes();
    [CompilerGeneratedAttribute]
public void set_MissingTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public Expression get_LastCompiledExpression();
    [CompilerGeneratedAttribute]
public void set_LastCompiledExpression(Expression value);
    [CompilerGeneratedAttribute]
public List`1<ParameterExpression> get_LastCompiledParameterExpressions();
    [CompilerGeneratedAttribute]
public void set_LastCompiledParameterExpressions(List`1<ParameterExpression> value);
    [CompilerGeneratedAttribute]
public bool get_DisableConstantFolding();
    [CompilerGeneratedAttribute]
public void set_DisableConstantFolding(bool value);
    [CompilerGeneratedAttribute]
public BindingFlags get_BindingFlags();
    [CompilerGeneratedAttribute]
public void set_BindingFlags(BindingFlags value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLoopIteration();
    [CompilerGeneratedAttribute]
public void set_MaxLoopIteration(Nullable`1<int> value);
    public bool get_IsCaseSensitive();
    public void set_IsCaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceIncludeInstanceMethodFromParameter();
    [CompilerGeneratedAttribute]
public void set_ForceIncludeInstanceMethodFromParameter(bool value);
    [CompilerGeneratedAttribute]
public string get_CacheKeyPrefix();
    [CompilerGeneratedAttribute]
public void set_CacheKeyPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCache();
    [CompilerGeneratedAttribute]
public void set_UseCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCaretForExponent();
    [CompilerGeneratedAttribute]
public void set_UseCaretForExponent(bool value);
    [CompilerGeneratedAttribute]
public bool get_RetryAndThrowMissingTypes();
    [CompilerGeneratedAttribute]
public void set_RetryAndThrowMissingTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSmartTypeResolution();
    [CompilerGeneratedAttribute]
public void set_UseSmartTypeResolution(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoAddMissingTypes();
    [CompilerGeneratedAttribute]
public void set_AutoAddMissingTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_SafeMode();
    [CompilerGeneratedAttribute]
public void set_SafeMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutoReplaceDictionaryKey();
    [CompilerGeneratedAttribute]
public void set_DisableAutoReplaceDictionaryKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseTypeBeforeDynamic();
    [CompilerGeneratedAttribute]
public void set_UseTypeBeforeDynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableDynamicResolution();
    [CompilerGeneratedAttribute]
public void set_DisableDynamicResolution(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceObjectAsDynamic();
    [CompilerGeneratedAttribute]
public void set_ForceObjectAsDynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAddSubtractOperatorToCollection();
    [CompilerGeneratedAttribute]
public void set_AllowAddSubtractOperatorToCollection(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceCharAsString();
    [CompilerGeneratedAttribute]
public void set_ForceCharAsString(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseEqualsAssignmentAsEqualsOperator();
    [CompilerGeneratedAttribute]
public void set_UseEqualsAssignmentAsEqualsOperator(bool value);
    [CompilerGeneratedAttribute]
public Func`3<object, string, object> get_DynamicGetMemberMissingValueFactory();
    [CompilerGeneratedAttribute]
public void set_DynamicGetMemberMissingValueFactory(Func`3<object, string, object> value);
    [CompilerGeneratedAttribute]
public Action`1<VariableFactoryArgument> get_VariableFactory();
    [CompilerGeneratedAttribute]
public void set_VariableFactory(Action`1<VariableFactoryArgument> value);
    [CompilerGeneratedAttribute]
public DefaultNumberType get_DefaultNumberType();
    [CompilerGeneratedAttribute]
public void set_DefaultNumberType(DefaultNumberType value);
    [CompilerGeneratedAttribute]
internal string get_();
    [CompilerGeneratedAttribute]
internal void set_(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutoRegisterEntityFramework();
    [CompilerGeneratedAttribute]
public void set_DisableAutoRegisterEntityFramework(bool value);
    public sealed virtual void Dispose();
    internal object (string );
    internal void (string , object );
}
public class Z.Expressions.EvalLinq : object {
    public static object Execute(string code, bool isQueryable, Expression exp, Object[] parameters);
}
public class Z.Expressions.EvalManager : object {
    [CompilerGeneratedAttribute]
private static ObjectCache ;
    [CompilerGeneratedAttribute]
private static EvalContext ;
    public static ObjectCache Cache { get; public set; }
    public static EvalContext DefaultContext { get; public set; }
    public static bool IsCommunity { get; public set; }
    private static EvalManager();
    [CompilerGeneratedAttribute]
public static ObjectCache get_Cache();
    [CompilerGeneratedAttribute]
public static void set_Cache(ObjectCache value);
    [CompilerGeneratedAttribute]
public static EvalContext get_DefaultContext();
    [CompilerGeneratedAttribute]
public static void set_DefaultContext(EvalContext value);
    public static void AddLicense(string licenseName, string licenseKey);
    public static bool IsTrialMode();
    public static bool IsTrialExpired();
    public static bool IsLicenseAdded();
    public static bool ValidateLicense();
    public static bool ValidateLicense(String& errorMessage);
    public static bool get_IsCommunity();
    public static void set_IsCommunity(bool value);
}
public class Z.Expressions.ExceptionMessage : object {
    public static string UnexpectedAliasRegistered;
    public static void ThrowLicenseException();
}
[ExtensionAttribute]
public static class Z.Expressions.Extensions1 : object {
    [ExtensionAttribute]
public static Func`1<object> Compile(string code);
    [ExtensionAttribute]
public static Func`2<IEnumerable, object> Compile(string code, IEnumerable`1<Type> parameterTypes);
    [ExtensionAttribute]
public static Func`2<IEnumerable, object> Compile(string code, Type[] parameterTypes);
    [ExtensionAttribute]
public static Func`2<IDictionary, object> Compile(string code, IDictionary`2<string, Type> parameterTypes, bool allowWritableVariable);
    [ExtensionAttribute]
public static Func`2<object, object> Compile(string code, Type type1);
    [ExtensionAttribute]
public static Func`3<object, object, object> Compile(string code, Type type1, Type type2);
    [ExtensionAttribute]
public static Func`4<object, object, object, object> Compile(string code, Type type1, Type type2, Type type3);
    [ExtensionAttribute]
public static Func`5<object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4);
    [ExtensionAttribute]
public static Func`6<object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5);
    [ExtensionAttribute]
public static Func`7<object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6);
    [ExtensionAttribute]
public static Func`8<object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7);
    [ExtensionAttribute]
public static Func`9<object, object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7, Type type8);
    [ExtensionAttribute]
public static Func`10<object, object, object, object, object, object, object, object, object, object> Compile(string code, Type type1, Type type2, Type type3, Type type4, Type type5, Type type6, Type type7, Type type8, Type type9);
    [ExtensionAttribute]
public static TDelegate Compile(string code);
    [ExtensionAttribute]
public static TDelegate Compile(string code, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
public static TDelegate Compile(string code, String[] parameterNames);
    [ExtensionAttribute]
public static object Execute(string code);
    [ExtensionAttribute]
public static object Execute(string code, object parameters);
    [ExtensionAttribute]
public static object Execute(string code, Object[] parameters);
    [ExtensionAttribute]
public static TResult Execute(string code);
    [ExtensionAttribute]
public static TResult Execute(string code, object parameters);
    [ExtensionAttribute]
public static TResult Execute(string code, Object[] parameters);
}
public class Z.Expressions.LazySingleThread`1 : object {
    private Func`1<T> ;
    public T _value;
    [CompilerGeneratedAttribute]
private bool ;
    public bool IsValueCreated { get; public set; }
    public T Value { get; }
    public LazySingleThread`1(Func`1<T> valueFactory);
    [CompilerGeneratedAttribute]
public bool get_IsValueCreated();
    [CompilerGeneratedAttribute]
public void set_IsValueCreated(bool value);
    public T get_Value();
}
public class Z.Expressions.VariableFactoryArgument : object {
    [CompilerGeneratedAttribute]
private bool ;
    [CompilerGeneratedAttribute]
private string ;
    [CompilerGeneratedAttribute]
private object ;
    [CompilerGeneratedAttribute]
private bool ;
    public bool IsHandled { get; public set; }
    public string Name { get; public set; }
    public object Value { get; public set; }
    public bool IsExpressionValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsHandled();
    [CompilerGeneratedAttribute]
public void set_IsHandled(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_IsExpressionValue();
    [CompilerGeneratedAttribute]
public void set_IsExpressionValue(bool value);
}
public class Z.Expressions.VariableNameHelper : object {
    internal static bool (string );
    internal static string ();
    public static void ResolveInvalidVariableName(IDictionary`2<string, Type> parameterTypes, String& code, Dictionary`2& aliasVariableNamesDict, SyntaxParserOptions syntaxParserOptions);
}
internal static class  : object {
    internal static string ;
    private static PropertyInfo ;
    private static ();
    internal static  (EvalContext , string , IDictionary`2<string, Type> , Type , EvalCompilerParameterKind , bool , bool , bool );
    internal static  (EvalContext , string , IDictionary`2<string, Type> , Type , EvalCompilerParameterKind , ExpressionScope , string , bool , bool );
    private static void (ExpressionScope , Type , IDictionary`2<string, Type> );
    private static void (ExpressionScope , Type , int );
    internal static string (EvalContext , Type , string , IDictionary`2<string, Type> , EvalCompilerParameterKind , bool );
    private static List`1<Tuple`3<Type, HashSet`1<string>, HashSet`1<string>>> (List`1<Type> );
    private static void (ExpressionScope , IDictionary`2<string, Type> , string , Type , HashSet`1<string> , List`1<Tuple`3<Type, HashSet`1<string>, HashSet`1<string>>> );
    internal static void (ExpressionScope , string , Type );
    private static List`1<ParameterExpression> (ExpressionScope , EvalCompilerParameterKind , IDictionary`2<string, Type> , Dictionary`2<string, string> , bool );
    private static List`1<ParameterExpression> (ExpressionScope , IDictionary`2<string, Type> , Dictionary`2<string, string> , EvalCompilerParameterKind );
    private static List`1<ParameterExpression> (ExpressionScope , IDictionary`2<string, Type> , Dictionary`2<string, string> );
    private static List`1<ParameterExpression> (ExpressionScope , IDictionary`2<string, Type> , Dictionary`2<string, string> , bool );
    private static List`1<ParameterExpression> (ExpressionScope , IDictionary`2<string, Type> );
    private static List`1<ParameterExpression> (ExpressionScope , IDictionary`2<string, Type> , Dictionary`2<string, string> );
    private static List`1<ParameterExpression> (ExpressionScope , IDictionary`2<string, Type> , Dictionary`2<string, string> );
    private static List`1<ParameterExpression> (ExpressionScope , IDictionary`2<string, Type> , Dictionary`2<string, string> , bool );
    private static Dictionary`2<string, object> ResolveToParameterDictionary(IEnumerable enumerable);
}
internal class  : object {
    internal static bool (IQueryable , EvalContext );
    internal static void (IQueryable , EvalContext );
    internal static bool (IQueryable , Assembly );
    internal static object (IQueryable , Assembly );
    internal static Assembly (object , Assembly );
    internal static void (EvalContext , Assembly );
    internal static void (EvalContext , Assembly );
    internal static void (EvalContext , Assembly );
    internal static void (EvalContext , Assembly );
    internal static bool (IQueryable , EvalContext );
    internal static void (IQueryable , EvalContext );
    public static DbCommand (object );
    internal static object (IQueryable , Assembly );
    internal static object (IQueryable , Assembly );
    internal static Assembly (object );
    internal static void (EvalContext , Assembly );
    internal static void (EvalContext , Assembly );
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static Type[] (Type this);
    [ExtensionAttribute]
public static TypeCode (Type this);
}
internal static class  : object {
    public static List`1<Type> (IEnumerable`1<Assembly> );
}
[CompilerGeneratedAttribute]
internal class `2 : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public   { get; }
    public   { get; }
    [DebuggerHiddenAttribute]
public `2( ,  );
    public  get_();
    public  get_();
    [DebuggerHiddenAttribute]
public virtual bool Equals(object );
    [DebuggerHiddenAttribute]
public virtual int GetHashCode();
    [DebuggerHiddenAttribute]
public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class `18 : MulticastDelegate {
    public `18(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17);
}
[CompilerGeneratedAttribute]
internal class `19 : MulticastDelegate {
    public `19(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18);
}
[CompilerGeneratedAttribute]
internal class `20 : MulticastDelegate {
    public `20(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19);
}
[CompilerGeneratedAttribute]
internal class `21 : MulticastDelegate {
    public `21(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20);
}
[CompilerGeneratedAttribute]
internal class `22 : MulticastDelegate {
    public `22(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21);
}
[CompilerGeneratedAttribute]
internal class `23 : MulticastDelegate {
    public `23(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22);
}
[CompilerGeneratedAttribute]
internal class `24 : MulticastDelegate {
    public `24(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23);
}
[CompilerGeneratedAttribute]
internal class `25 : MulticastDelegate {
    public `25(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24);
}
[CompilerGeneratedAttribute]
internal class `26 : MulticastDelegate {
    public `26(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25);
}
[CompilerGeneratedAttribute]
internal class `27 : MulticastDelegate {
    public `27(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26);
}
[CompilerGeneratedAttribute]
internal class `28 : MulticastDelegate {
    public `28(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26,  arg27);
}
[CompilerGeneratedAttribute]
internal class `29 : MulticastDelegate {
    public `29(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26,  arg27,  arg28);
}
[CompilerGeneratedAttribute]
internal class `30 : MulticastDelegate {
    public `30(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26,  arg27,  arg28,  arg29);
}
[CompilerGeneratedAttribute]
internal class `31 : MulticastDelegate {
    public `31(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26,  arg27,  arg28,  arg29,  arg30);
}
[CompilerGeneratedAttribute]
internal class `32 : MulticastDelegate {
    public `32(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26,  arg27,  arg28,  arg29,  arg30,  arg31);
}
[CompilerGeneratedAttribute]
internal class `33 : MulticastDelegate {
    public `33(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26,  arg27,  arg28,  arg29,  arg30,  arg31,  arg32);
}
[CompilerGeneratedAttribute]
internal class `34 : MulticastDelegate {
    public `34(object , IntPtr );
    public virtual  Invoke( arg1,  arg2,  arg3,  arg4,  arg5,  arg6,  arg7,  arg8,  arg9,  arg10,  arg11,  arg12,  arg13,  arg14,  arg15,  arg16,  arg17,  arg18,  arg19,  arg20,  arg21,  arg22,  arg23,  arg24,  arg25,  arg26,  arg27,  arg28,  arg29,  arg30,  arg31,  arg32,  arg33);
}
[ExtensionAttribute]
internal static class  : object {
    [ExtensionAttribute]
public static bool (Type , BindingFlags );
    [ExtensionAttribute]
internal static Type (MemberInfo this);
    [ExtensionAttribute]
internal static string (Type this);
}
internal class  : object {
    public static List`1<TokenInfo> (List`1<TokenInfo> , string );
    public static string (List`1<TokenInfo> , string );
    public static int (List`1<TokenInfo> , string );
}
[ExtensionAttribute]
internal static class  : object {
    public static Expression (CallSiteBinder , Type , Expression );
    public static Expression (CallSiteBinder , Type , Expression , Expression );
    [ExtensionAttribute]
public static bool (ParameterInfo this, Type , bool );
    [ExtensionAttribute]
public static HashSet`1<Type> (Type this);
    [ExtensionAttribute]
public static Type[] (Type this);
    [ExtensionAttribute]
public static Type[] (Type this);
    [ExtensionAttribute]
public static TypeCode (Type this);
    [ExtensionAttribute]
public static bool (Type this, Type );
    [ExtensionAttribute]
public static bool (Type this);
    [ExtensionAttribute]
public static bool (Type this);
    [ExtensionAttribute]
public static bool (Type this);
    [ExtensionAttribute]
public static Type (TypeBuilder this);
}
internal class `2 : object {
    internal  ;
    internal bool ;
    internal  ;
}
internal class `2 : object {
    internal  ;
    internal  ;
    internal bool ;
    internal  ;
    internal   { get; }
    internal `2( );
    internal  get_();
}
[ExtensionAttribute]
internal static class  : object {
    private static ConcurrentDictionary`2<Type, object> ;
    private static ();
    [ExtensionAttribute]
public static bool (Type this);
    [ExtensionAttribute]
public static object (Type this);
}
internal static class  : object {
    public static List`1<Type> (IEnumerable`1<Assembly> );
}
internal class  : object {
    public static bool ();
}
internal class  : object {
    public static string ;
    public static string ;
    internal static Dictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> ;
    [CompilerGeneratedAttribute]
private static bool ;
    [CompilerGeneratedAttribute]
private static DateTime ;
    [CompilerGeneratedAttribute]
private static string ;
    [CompilerGeneratedAttribute]
private static string ;
    [CompilerGeneratedAttribute]
private static int ;
    internal static  ;
    [CompilerGeneratedAttribute]
private static bool ;
    internal static Func`1<> ;
    internal static Dictionary`2<string, string>  { get; internal set; }
    internal static bool  { get; internal set; }
    internal static DateTime  { get; internal set; }
    internal static string  { get; internal set; }
    internal static string  { get; internal set; }
    internal static int  { get; internal set; }
    internal static bool  { get; internal set; }
    private static ();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> get_();
    [CompilerGeneratedAttribute]
internal static void set_(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal static bool get_();
    [CompilerGeneratedAttribute]
internal static void set_(bool value);
    [CompilerGeneratedAttribute]
internal static DateTime get_();
    [CompilerGeneratedAttribute]
internal static void set_(DateTime value);
    [CompilerGeneratedAttribute]
internal static string get_();
    [CompilerGeneratedAttribute]
internal static void set_(string value);
    [CompilerGeneratedAttribute]
internal static string get_();
    [CompilerGeneratedAttribute]
internal static void set_(string value);
    [CompilerGeneratedAttribute]
internal static int get_();
    [CompilerGeneratedAttribute]
internal static void set_(int value);
    [CompilerGeneratedAttribute]
internal static bool get_();
    [CompilerGeneratedAttribute]
internal static void set_(bool value);
    internal static Nullable`1<bool> ();
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static bool (string , string , Int32& );
    internal static void (int , bool );
    internal static DateTime ();
    internal static void ();
    internal static bool ();
    internal static void ();
    internal static bool ();
    internal static bool (String& );
    internal static bool ();
}
internal class  : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> ;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> ;
    internal Nullable`1<bool>  { get; internal set; }
    internal Nullable`1<bool>  { get; internal set; }
    internal Nullable`1<bool>  { get; internal set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal void set_(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_();
    [CompilerGeneratedAttribute]
internal void set_(Nullable`1<bool> value);
}
internal static class  : object {
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static EvalException (string , SyntaxNode );
    internal static EvalException (string , SyntaxNode );
    internal static EvalException (string , string , Type , SyntaxNode );
    internal static EvalException (string , string , Type , Type , SyntaxNode );
    internal static bool (Expression , SyntaxNode );
    internal static int (int );
    internal static int (int );
}
[ExtensionAttribute]
internal static class  : object {
    internal static MethodInfo ;
    internal static MethodInfo ;
    internal static ConcurrentDictionary`2<string, CallSite> ;
    internal static ConcurrentDictionary`2<string, CallSite> ;
    internal static ConcurrentDictionary`2<string, CallSite> ;
    internal static ConcurrentDictionary`2<string, CallSite> ;
    internal static ConcurrentDictionary`2<string, CallSite> ;
    internal static ConcurrentDictionary`2<string, Delegate> ;
    internal static ConcurrentDictionary`2<string, CallSite> ;
    internal static ConcurrentDictionary`2<string, CallSite`1<Func`3<CallSite, object, object>>> ;
    private static ();
    internal static Expression (ExpressionScope , SyntaxNode , ConstantExpression , ConstantExpression );
    internal static Expression (ExpressionScope , SyntaxNode , ConstantExpression , ConstantExpression );
    internal static Expression (Expression , Expression , SyntaxNode , bool );
    internal static Expression (ExpressionScope , SyntaxNode , Func`3<Expression, Expression, Expression> );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , Expression , Func`3<Expression, Expression, Expression> );
    internal static object CompileBinaryDynamic(T1 leftValueTyped, T2 rightValueTyped, Func`3<Expression, Expression, Expression> factory);
    internal static Expression (ExpressionScope , SyntaxNode , Func`3<Expression, Expression, Expression> );
    internal static Expression (ExpressionScope , SyntaxNode , Type , Func`3<Expression, Type, Expression> );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , bool );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , bool );
    internal static Type (ExpressionScope , SyntaxNode , Int32& );
    internal static Type (ExpressionScope , SyntaxNode , bool );
    internal static Type (ExpressionScope , SyntaxNode , StringBuilder , Int32& , bool );
    internal static Expression (ExpressionScope , SyntaxNode );
    internal static Expression (ExpressionScope , SyntaxNode );
    internal static Expression (ExpressionScope , SyntaxNode , bool , bool );
    internal static Expression (ExpressionScope , SyntaxNode , bool , int );
    internal static Expression (ExpressionScope , SyntaxNode , bool );
    internal static Expression (ExpressionScope , SyntaxNode , char , char );
    internal static Expression (ExpressionScope , SyntaxNode , char , int );
    internal static Expression (ExpressionScope , SyntaxNode , char );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<int> , Nullable`1<int> );
    internal static Expression (ExpressionScope , SyntaxNode , int , int );
    internal static Expression (ExpressionScope , SyntaxNode , int );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<UInt32> , Nullable`1<UInt32> );
    internal static Expression (ExpressionScope , SyntaxNode , UInt32 , UInt32 );
    internal static Expression (ExpressionScope , SyntaxNode , UInt32 , int );
    internal static Expression (ExpressionScope , SyntaxNode , UInt32 );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<long> , Nullable`1<long> );
    internal static Expression (ExpressionScope , SyntaxNode , long , long );
    internal static Expression (ExpressionScope , SyntaxNode , long , int );
    internal static Expression (ExpressionScope , SyntaxNode , long );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<ulong> , Nullable`1<ulong> );
    internal static Expression (ExpressionScope , SyntaxNode , ulong , ulong );
    internal static Expression (ExpressionScope , SyntaxNode , ulong , int );
    internal static Expression (ExpressionScope , SyntaxNode , ulong );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<float> , Nullable`1<float> );
    internal static Expression (ExpressionScope , SyntaxNode , float , float );
    internal static Expression (ExpressionScope , SyntaxNode , bool , int );
    internal static Expression (ExpressionScope , SyntaxNode , float );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<double> , Nullable`1<double> );
    internal static Expression (ExpressionScope , SyntaxNode , double , double );
    internal static Expression (ExpressionScope , SyntaxNode , bool , int );
    internal static Expression (ExpressionScope , SyntaxNode , double );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<decimal> , Nullable`1<decimal> );
    internal static Expression (ExpressionScope , SyntaxNode , decimal , decimal );
    internal static Expression (ExpressionScope , SyntaxNode , bool , int );
    internal static Expression (ExpressionScope , SyntaxNode , decimal );
    internal static Expression (ExpressionScope , SyntaxNode , Nullable`1<DateTime> , Nullable`1<DateTime> );
    internal static Expression (ExpressionScope , SyntaxNode , DateTime , DateTime );
    internal static Expression (ExpressionScope , SyntaxNode , string , string );
    internal static Expression (ExpressionScope , SyntaxNode , string , int );
    internal static Expression (ExpressionScope , SyntaxNode , string );
    internal static T DynamicCast(object obj);
    internal static object DynamicConstructor(Object[] parameters);
    internal static object DynamicGetMember(object obj, string name,  option);
    internal static object DynamicMethod(object obj, bool isExtensionMethod, object betterMember, string name, Object[] parameters, List`1<ParameterExpressionInfo> parameterExpressionInfos, List`1<MethodInfo> extensionMethodRegister);
    internal static object DynamicStaticMethod(MethodInfo method, Object[] parameters);
    internal static void DynamicIndexSet(object obj, Object[] parameters, object parameterAssignValue);
    internal static object DynamicIndex(object obj, Object[] parameters);
    internal static object DynamicUnary(object obj, ExpressionType expressionType);
    public static void (ExpressionScope , MemberInfo , SyntaxNode );
    internal static bool (ExpressionScope , Type );
    internal static Expression (ExpressionScope , SyntaxNode , Expression );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , Expression );
    internal static Expression (ExpressionScope , SyntaxNode , Expression );
    internal static void (List`1<> , SyntaxNode );
    internal static bool (List`1<> , SyntaxNode , & );
    internal static bool (TypeCode , object );
    internal static Expression (Type , object );
    internal static bool (ConstantExpression , Type );
    internal static Type (Type , Type );
    public static Expression (Expression , Type );
    internal static bool (Type );
    internal static List`1<ParameterExpressionInfo> (ExpressionScope , SyntaxNode );
    internal static ParameterExpressionInfo (ExpressionScope , SyntaxNode );
    internal static Type (Type , Type );
    internal static Tuple`2<TypeCode, bool> (ConstantExpression , ConstantExpression );
    internal static List`1<MethodInfo> (ExpressionScope , Type , string );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , Expression );
    internal static Expression (ExpressionScope , SyntaxNode , Expression );
    internal static Expression (ExpressionScope , Type , SyntaxNode ,  , bool );
    internal static Expression (ExpressionScope , ApplicableMemberParameter , SyntaxNode , List`1<Type> );
    internal static Expression (ExpressionScope , SyntaxNode , MethodInfo , ParameterInfo );
    internal static Expression (ExpressionScope , SyntaxNode , Expression );
    internal static Expression (ExpressionScope , SyntaxNode , Expression );
    internal static Expression (ExpressionScope , SyntaxNode , Type , Expression , List`1<Type> );
    internal static Expression (ApplicableMember , List`1<ParameterExpressionInfo> , Expression );
    internal static List`1<Expression> (MethodInfo , List`1<ParameterExpressionInfo> , bool , Expression );
    internal static Expression (ExpressionScope , SyntaxNode , Type , Expression , bool );
    internal static void (ExpressionScope , ExpressionScope );
    internal static Expression (ExpressionScope , SyntaxNode , ConstantExpression );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , Func`2<Expression, Expression> );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , UnaryExpression );
    internal static Expression (ExpressionScope , SyntaxNode , Expression , Func`2<Expression, Expression> );
    [ExtensionAttribute]
public static bool (Expression );
}
internal class  : object {
    internal static void (ExpressionScope , Expression , bool , string , Type , List`1<ZedParameterInfo> );
    internal static int (int );
}
internal enum  : Enum {
    public int value__;
    public static  ;
    public static  ;
    public static  ;
}
internal class  : object {
    internal ParameterInfo[] ;
    internal int ;
    internal List`1<Expression> ;
    internal bool ;
    internal bool ;
    internal int ;
    internal int ;
    internal MethodInfo ;
    internal MethodInfo ;
    internal PropertyInfo ;
    internal Dictionary`2<int, int> ;
    internal Type[] ;
    internal PropertyInfo ;
    internal PropertyInfo ;
    internal ExpressionScope ;
    internal Type ;
    internal Expression ;
    public List`1<Expression> ();
}
internal static class  : object {
    internal static List`1<MethodInfo> (ExpressionScope , object , Type , string , bool );
    internal static PropertyInfo[] (Type , string );
    internal static List`1<> (Type , Expression , MethodInfo[] , Type[] , List`1<Expression> , ExpressionScope );
    internal static List`1<MethodInfo> (PropertyInfo[] , bool );
    internal static ParameterInfo[] ( );
    internal static  (Type , Type[] , List`1<Expression> );
    internal static  (List`1<> , Type[] , SyntaxNode );
    internal static  ( ,  );
    internal static List`1<Expression> ( );
    internal static int (Type , Type );
    internal static MethodInfo ( , Type[] );
    internal static void (MethodInfo ,  );
    internal static void (Type ,  );
    internal static void (List`1<> );
    internal static MethodInfo ( );
    internal static bool ( );
}
internal class  : object {
    internal static ApplicableMember (List`1<MethodInfo> , List`1<MethodInfo> , object , string , List`1<ParameterExpressionInfo> );
    public static ApplicableMember (bool , ApplicableMember , List`1<ParameterExpressionInfo> , object );
}
internal class  : object {
    internal static List`1<ApplicableMember> (ExpressionScope , Type , bool );
    internal static List`1<ApplicableMember> (ExpressionScope , Type , string , bool , List`1<Type> );
    internal static ApplicableMember (ExpressionScope , Expression , Type , List`1<ParameterExpressionInfo> , bool , SyntaxNode );
    internal static ApplicableMember (ExpressionScope , Expression , Type , string , List`1<ParameterExpressionInfo> , bool , List`1<Type> , SyntaxNode , Expression& );
    internal static ApplicableMember (ExpressionScope , Expression , Type , string , List`1<ParameterExpressionInfo> , SyntaxNode , List`1<ApplicableMember> , bool );
    internal static ApplicableMember (List`1<ApplicableMember> , bool );
    internal static ApplicableMember (List`1<ApplicableMember> , ApplicableMember );
    internal static ApplicableMember (ApplicableMember , ApplicableMember );
    internal static ApplicableMember (ApplicableMember , ApplicableMemberParameter , ApplicableMember , ApplicableMemberParameter );
    internal static int (Type , Type );
    public static ApplicableMember (ExpressionScope , Expression , ApplicableMember , List`1<ParameterExpressionInfo> );
    public static bool (ApplicableMember , bool );
    internal static void (ApplicableMember , Type[] , Type[] , List`1<ApplicableMemberGenericArgument> );
    internal static void (ApplicableMember , Type[] , List`1<ApplicableMemberParameter> , List`1<ApplicableMemberGenericArgument> , bool );
    public static bool (ApplicableMember , List`1<ParameterExpressionInfo> );
    public static void (ApplicableMember , List`1<ApplicableMemberParameter> , ParameterInfo[] , int );
    public static int (ApplicableMember , List`1<ApplicableMemberParameter> , ParameterInfo[] , List`1<ParameterExpressionInfo> , int );
    public static int (ApplicableMember , List`1<ApplicableMemberParameter> , ParameterInfo[] , List`1<ParameterExpressionInfo> , int );
    internal static void (ApplicableMemberParameter );
    public static bool (ApplicableMember , bool );
    internal static int (int );
}
internal static class  : object {
    internal static SyntaxNode (SyntaxNode );
    internal static bool (SyntaxParser , int );
    internal static bool (SyntaxParser , int );
    internal static Nullable`1<bool> (SyntaxParser ,  , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  , SyntaxNode , bool );
    internal static SyntaxNode (SyntaxParser ,  , SyntaxNode , int );
    internal static SyntaxNode (SyntaxNode , SyntaxNode , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  , SyntaxNode , int );
    internal static SyntaxNode (SyntaxNode , SyntaxNode , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  );
    internal static SyntaxNode (SyntaxParser ,  );
    internal static void (SyntaxParser ,  , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  );
    internal static SyntaxNode (SyntaxParser ,  );
    internal static SyntaxNode (SyntaxParser ,  );
    internal static void (SyntaxParser ,  , SyntaxNode );
    internal static void (SyntaxParser ,  , SyntaxNode );
    internal static void (SyntaxParser ,  , SyntaxNode );
    internal static void (SyntaxParser ,  , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  );
    internal static SyntaxNode (SyntaxParser ,  );
    internal static SyntaxNode (SyntaxParser );
    internal static SyntaxNode (SyntaxParser , SyntaxNode );
    internal static SyntaxNode (SyntaxParser , SyntaxNode );
    internal static SyntaxNode (SyntaxParser , SyntaxNode );
    internal static SyntaxNode (SyntaxParser );
    internal static List`1<SyntaxNode> (SyntaxParser ,  );
    internal static SyntaxNode (SyntaxParser ,  , bool , SyntaxNode );
    internal static SyntaxNode (SyntaxParser );
    internal static SyntaxNode (SyntaxParser , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  , SyntaxNode );
    internal static SyntaxNode (SyntaxNode , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  , SyntaxNode );
    internal static SyntaxNode (SyntaxParser ,  , SyntaxNode , SyntaxNode );
    internal static SyntaxNode (SyntaxNode , SyntaxNode , SyntaxNode );
    internal static SyntaxNode (SyntaxParser );
    internal static SyntaxNode (SyntaxParser );
}
internal class  : object {
    internal Action`1<`2<SyntaxParser, SyntaxNode>> ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal static  (SyntaxKind[] );
    internal static  (Func`2<SyntaxParser, bool> );
}
internal static class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static EvalException (string , string , TokenInfo );
    internal static EvalException (string , TokenInfo );
    internal static EvalException (string , TokenInfo , string );
    internal static EvalException (string , Exception , TokenInfo );
    internal static EvalException (string , StringBuilder , int );
    internal static EvalException (string , StringBuilder , string , int , Exception );
}
internal static class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static EvalException (string , string , TokenInfo );
    internal static EvalException (string , TokenInfo );
    internal static EvalException (string , TokenInfo , string );
    internal static EvalException (string , Exception , TokenInfo );
    internal static EvalException (string , StringBuilder , int );
    internal static EvalException (string , StringBuilder , string , int , Exception );
}
[ExtensionAttribute]
internal static class  : object {
    internal static Dictionary`2<string, string> ;
    private static ();
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int , int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , bool , bool );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int , bool );
    [ExtensionAttribute]
internal static List`1<TokenInfo> (TokenInfo , int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
    [ExtensionAttribute]
internal static TokenInfo (StringBuilder this, int );
}
internal class  : object {
    internal static Dictionary`2<string, SyntaxKind> ;
    private static ();
    internal static List`1<TokenInfo> (string );
    internal static IEnumerable`1<TokenInfo> (StringBuilder , bool );
    internal static IEnumerable`1<TokenInfo> (StringBuilder , TokenInfo& );
}
