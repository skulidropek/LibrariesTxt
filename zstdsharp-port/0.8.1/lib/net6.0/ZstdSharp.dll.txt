[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
internal class ZstdSharp_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string InlineIL;
    internal static string InlineMethod;
}
public class ZstdSharp.CompressionStream : Stream {
    private Stream innerStream;
    private Byte[] outputBuffer;
    private bool preserveCompressor;
    private bool leaveOpen;
    private Compressor compressor;
    private ZSTD_outBuffer_s output;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CompressionStream(Stream stream, int level, int bufferSize, bool leaveOpen);
    public CompressionStream(Stream stream, Compressor compressor, int bufferSize, bool preserveCompressor, bool leaveOpen);
    public void SetParameter(ZSTD_cParameter parameter, int value);
    public int GetParameter(ZSTD_cParameter parameter);
    public void LoadDictionary(Byte[] dict);
    protected virtual override void Finalize();
    [AsyncStateMachineAttribute("ZstdSharp.CompressionStream/<DisposeAsync>d__12")]
public virtual ValueTask DisposeAsync();
    protected virtual void Dispose(bool disposing);
    private void ReleaseUnmanagedResources();
    public virtual void Flush();
    [AsyncStateMachineAttribute("ZstdSharp.CompressionStream/<FlushAsync>d__16")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    private void FlushInternal(ZSTD_EndDirective directive);
    [AsyncStateMachineAttribute("ZstdSharp.CompressionStream/<FlushInternalAsync>d__18")]
private Task FlushInternalAsync(ZSTD_EndDirective directive, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    private void WriteInternal(ReadOnlySpan`1<byte> buffer, ZSTD_EndDirective directive);
    [AsyncStateMachineAttribute("ZstdSharp.CompressionStream/<WriteInternalAsync>d__22")]
private ValueTask WriteInternalAsync(Nullable`1<ReadOnlyMemory`1<byte>> buffer, ZSTD_EndDirective directive, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("ZstdSharp.CompressionStream/<WriteAsync>d__24")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    internal UIntPtr CompressStream(ZSTD_inBuffer_s& input, ReadOnlySpan`1<byte> inputBuffer, ZSTD_EndDirective directive);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void EnsureNotDisposed();
}
public class ZstdSharp.Compressor : object {
    public static int DefaultCompressionLevel;
    private int level;
    private ZSTD_CCtx_s* cctx;
    public static int MinCompressionLevel { get; }
    public static int MaxCompressionLevel { get; }
    public int Level { get; public set; }
    public Compressor(int level);
    public static int get_MinCompressionLevel();
    public static int get_MaxCompressionLevel();
    public int get_Level();
    public void set_Level(int value);
    public void SetParameter(ZSTD_cParameter parameter, int value);
    public int GetParameter(ZSTD_cParameter parameter);
    public void LoadDictionary(Byte[] dict);
    public void LoadDictionary(ReadOnlySpan`1<byte> dict);
    protected virtual override void Finalize();
    public static int GetCompressBound(int length);
    public static ulong GetCompressBoundLong(ulong length);
    public Span`1<byte> Wrap(ReadOnlySpan`1<byte> src);
    public int Wrap(Byte[] src, Byte[] dest, int offset);
    public int Wrap(ReadOnlySpan`1<byte> src, Span`1<byte> dest);
    public int Wrap(ArraySegment`1<byte> src, ArraySegment`1<byte> dest);
    public int Wrap(Byte[] src, int srcOffset, int srcLength, Byte[] dst, int dstOffset, int dstLength);
    public bool TryWrap(Byte[] src, Byte[] dest, int offset, Int32& written);
    public bool TryWrap(ReadOnlySpan`1<byte> src, Span`1<byte> dest, Int32& written);
    public bool TryWrap(ArraySegment`1<byte> src, ArraySegment`1<byte> dest, Int32& written);
    public bool TryWrap(Byte[] src, int srcOffset, int srcLength, Byte[] dst, int dstOffset, int dstLength, Int32& written);
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
    private void EnsureNotDisposed();
    internal UIntPtr CompressStream(ZSTD_inBuffer_s& input, ZSTD_outBuffer_s& output, ZSTD_EndDirective directive);
}
internal class ZstdSharp.Constants : object {
    public static ulong MaxByteArrayLength;
}
public class ZstdSharp.DecompressionStream : Stream {
    private Stream innerStream;
    private Byte[] inputBuffer;
    private int inputBufferSize;
    private bool preserveDecompressor;
    private bool leaveOpen;
    private bool checkEndOfStream;
    private Decompressor decompressor;
    private ZSTD_inBuffer_s input;
    [NativeIntegerAttribute]
private UIntPtr lastDecompressResult;
    private bool contextDrained;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DecompressionStream(Stream stream, int bufferSize, bool checkEndOfStream, bool leaveOpen);
    public DecompressionStream(Stream stream, Decompressor decompressor, int bufferSize, bool checkEndOfStream, bool preserveDecompressor, bool leaveOpen);
    public void SetParameter(ZSTD_dParameter parameter, int value);
    public int GetParameter(ZSTD_dParameter parameter);
    public void LoadDictionary(Byte[] dict);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("ZstdSharp.DecompressionStream/<ReadAsync>d__20")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    private UIntPtr DecompressStream(ZSTD_outBuffer_s& output, Span`1<byte> outputBuffer);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void EnsureNotDisposed();
}
public class ZstdSharp.Decompressor : object {
    private ZSTD_DCtx_s* dctx;
    protected virtual override void Finalize();
    public void SetParameter(ZSTD_dParameter parameter, int value);
    public int GetParameter(ZSTD_dParameter parameter);
    public void LoadDictionary(Byte[] dict);
    public void LoadDictionary(ReadOnlySpan`1<byte> dict);
    public static ulong GetDecompressedSize(ReadOnlySpan`1<byte> src);
    public static ulong GetDecompressedSize(ArraySegment`1<byte> src);
    public static ulong GetDecompressedSize(Byte[] src, int srcOffset, int srcLength);
    public Span`1<byte> Unwrap(ReadOnlySpan`1<byte> src, int maxDecompressedSize);
    public int Unwrap(Byte[] src, Byte[] dest, int offset);
    public int Unwrap(ReadOnlySpan`1<byte> src, Span`1<byte> dest);
    public int Unwrap(Byte[] src, int srcOffset, int srcLength, Byte[] dst, int dstOffset, int dstLength);
    public bool TryUnwrap(Byte[] src, Byte[] dest, int offset, Int32& written);
    public bool TryUnwrap(ReadOnlySpan`1<byte> src, Span`1<byte> dest, Int32& written);
    public bool TryUnwrap(Byte[] src, int srcOffset, int srcLength, Byte[] dst, int dstOffset, int dstLength, Int32& written);
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
    private void EnsureNotDisposed();
    internal UIntPtr DecompressStream(ZSTD_inBuffer_s& input, ZSTD_outBuffer_s& output);
}
public static class ZstdSharp.DictBuilder : object {
    public static int DefaultDictCapacity;
    public static Byte[] TrainFromBuffer(IEnumerable`1<Byte[]> samples, int dictCapacity);
    public static Span`1<byte> TrainFromBufferFastCover(IEnumerable`1<Byte[]> samples, int level, int dictCapacity);
    public static Span`1<byte> TrainFromBufferFastCover(IEnumerable`1<Byte[]> samples, ZDICT_fastCover_params_t params, int dictCapacity);
}
internal class ZstdSharp.JobThreadPool : object {
    private int numThreads;
    private List`1<JobThread> threads;
    private BlockingCollection`1<Job> queue;
    public JobThreadPool(int num, int queueSize);
    private void Worker(object obj);
    private void CreateThread();
    public void Resize(int num);
    public void Add(Void* function, Void* opaque);
    public bool TryAdd(Void* function, Void* opaque);
    public void Join(bool cancel);
    public sealed virtual void Dispose();
    public int Size();
}
internal static class ZstdSharp.SynchronizationWrapper : object {
    private static object UnwrapObject(Void** obj);
    public static void Init(Void** obj);
    public static void Free(Void** obj);
    public static void Enter(Void** obj);
    public static void Exit(Void** obj);
    public static void Pulse(Void** obj);
    public static void PulseAll(Void** obj);
    public static void Wait(Void** mutex);
}
[ExtensionAttribute]
public static class ZstdSharp.ThrowHelper : object {
    private static ulong ZSTD_CONTENTSIZE_UNKNOWN;
    private static ulong ZSTD_CONTENTSIZE_ERROR;
    [ExtensionAttribute]
public static UIntPtr EnsureZstdSuccess(UIntPtr returnValue);
    [ExtensionAttribute]
public static UIntPtr EnsureZdictSuccess(UIntPtr returnValue);
    [ExtensionAttribute]
public static ulong EnsureContentSizeOk(ulong returnValue);
    private static void ThrowException(UIntPtr returnValue, string message);
}
internal static class ZstdSharp.UnmanagedObject : object {
    public static Void* Wrap(object obj);
    private static GCHandle UnwrapGcHandle(Void* value);
    public static T Unwrap(Void* value);
    public static void Free(Void* value);
}
public class ZstdSharp.Unsafe._wksps_e__Union : ValueType {
    public HUF_buildCTable_wksp_tables buildCTable_wksp;
    public HUF_WriteCTableWksp writeCTable_wksp;
    [FixedBufferAttribute("System.UInt32", "1024")]
public <hist_wksp>e__FixedBuffer hist_wksp;
}
public class ZstdSharp.Unsafe.algo_time_t : ValueType {
    public UInt32 tableTime;
    public UInt32 decode256Time;
    public algo_time_t(UInt32 tableTime, UInt32 decode256Time);
}
public enum ZstdSharp.Unsafe.base_directive_e : Enum {
    public int value__;
    public static base_directive_e base_0possible;
    public static base_directive_e base_1guaranteed;
}
public class ZstdSharp.Unsafe.BIT_CStream_t : ValueType {
    [NativeIntegerAttribute]
public UIntPtr bitContainer;
    public UInt32 bitPos;
    public SByte* startPtr;
    public SByte* ptr;
    public SByte* endPtr;
}
public enum ZstdSharp.Unsafe.BIT_DStream_status : Enum {
    public int value__;
    public static BIT_DStream_status BIT_DStream_unfinished;
    public static BIT_DStream_status BIT_DStream_endOfBuffer;
    public static BIT_DStream_status BIT_DStream_completed;
    public static BIT_DStream_status BIT_DStream_overflow;
}
public class ZstdSharp.Unsafe.BIT_DStream_t : ValueType {
    [NativeIntegerAttribute]
public UIntPtr bitContainer;
    public UInt32 bitsConsumed;
    public SByte* ptr;
    public SByte* start;
    public SByte* limitPtr;
}
public class ZstdSharp.Unsafe.blockProperties_t : ValueType {
    public blockType_e blockType;
    public UInt32 lastBlock;
    public UInt32 origSize;
}
public enum ZstdSharp.Unsafe.blockType_e : Enum {
    public int value__;
    public static blockType_e bt_raw;
    public static blockType_e bt_rle;
    public static blockType_e bt_compressed;
    public static blockType_e bt_reserved;
}
public class ZstdSharp.Unsafe.buffer_s : ValueType {
    public Void* start;
    [NativeIntegerAttribute]
public UIntPtr capacity;
    public buffer_s(Void* start, UIntPtr capacity);
}
public class ZstdSharp.Unsafe.COVER_best_s : ValueType {
    public Void* mutex;
    public Void* cond;
    [NativeIntegerAttribute]
public UIntPtr liveJobs;
    public Void* dict;
    [NativeIntegerAttribute]
public UIntPtr dictSize;
    public ZDICT_cover_params_t parameters;
    [NativeIntegerAttribute]
public UIntPtr compressedSize;
}
public class ZstdSharp.Unsafe.COVER_ctx_t : ValueType {
    public Byte* samples;
    [NativeIntegerAttribute]
public UIntPtr* offsets;
    [NativeIntegerAttribute]
public UIntPtr* samplesSizes;
    [NativeIntegerAttribute]
public UIntPtr nbSamples;
    [NativeIntegerAttribute]
public UIntPtr nbTrainSamples;
    [NativeIntegerAttribute]
public UIntPtr nbTestSamples;
    public UInt32* suffix;
    [NativeIntegerAttribute]
public UIntPtr suffixSize;
    public UInt32* freqs;
    public UInt32* dmerAt;
    public UInt32 d;
}
public class ZstdSharp.Unsafe.COVER_dictSelection : ValueType {
    public Byte* dictContent;
    [NativeIntegerAttribute]
public UIntPtr dictSize;
    [NativeIntegerAttribute]
public UIntPtr totalCompressedSize;
}
public class ZstdSharp.Unsafe.COVER_epoch_info_t : ValueType {
    public UInt32 num;
    public UInt32 size;
}
public class ZstdSharp.Unsafe.COVER_map_pair_t_s : ValueType {
    public UInt32 key;
    public UInt32 value;
}
public class ZstdSharp.Unsafe.COVER_map_s : ValueType {
    public COVER_map_pair_t_s* data;
    public UInt32 sizeLog;
    public UInt32 size;
    public UInt32 sizeMask;
}
public class ZstdSharp.Unsafe.COVER_segment_t : ValueType {
    public UInt32 begin;
    public UInt32 end;
    public UInt32 score;
}
public class ZstdSharp.Unsafe.COVER_tryParameters_data_s : ValueType {
    public COVER_ctx_t* ctx;
    public COVER_best_s* best;
    [NativeIntegerAttribute]
public UIntPtr dictBufferCapacity;
    public ZDICT_cover_params_t parameters;
}
public class ZstdSharp.Unsafe.dictItem : ValueType {
    public UInt32 pos;
    public UInt32 length;
    public UInt32 savings;
}
public class ZstdSharp.Unsafe.DTableDesc : ValueType {
    public byte maxTableLog;
    public byte tableType;
    public byte tableLog;
    public byte reserved;
}
public class ZstdSharp.Unsafe.EStats_ress_t : ValueType {
    public ZSTD_CDict_s* dict;
    public ZSTD_CCtx_s* zc;
    public Void* workPlace;
}
public class ZstdSharp.Unsafe.EstimatedBlockSize : ValueType {
    [NativeIntegerAttribute]
public UIntPtr estLitSize;
    [NativeIntegerAttribute]
public UIntPtr estBlockSize;
}
public class ZstdSharp.Unsafe.FASTCOVER_accel_t : ValueType {
    public UInt32 finalize;
    public UInt32 skip;
    public FASTCOVER_accel_t(UInt32 finalize, UInt32 skip);
}
public class ZstdSharp.Unsafe.FASTCOVER_ctx_t : ValueType {
    public Byte* samples;
    [NativeIntegerAttribute]
public UIntPtr* offsets;
    [NativeIntegerAttribute]
public UIntPtr* samplesSizes;
    [NativeIntegerAttribute]
public UIntPtr nbSamples;
    [NativeIntegerAttribute]
public UIntPtr nbTrainSamples;
    [NativeIntegerAttribute]
public UIntPtr nbTestSamples;
    [NativeIntegerAttribute]
public UIntPtr nbDmers;
    public UInt32* freqs;
    public UInt32 d;
    public UInt32 f;
    public FASTCOVER_accel_t accelParams;
}
public class ZstdSharp.Unsafe.FASTCOVER_tryParameters_data_s : ValueType {
    public FASTCOVER_ctx_t* ctx;
    public COVER_best_s* best;
    [NativeIntegerAttribute]
public UIntPtr dictBufferCapacity;
    public ZDICT_cover_params_t parameters;
}
public class ZstdSharp.Unsafe.FSE_CState_t : ValueType {
    [NativeIntegerAttribute]
public IntPtr value;
    public Void* stateTable;
    public Void* symbolTT;
    public UInt32 stateLog;
}
public class ZstdSharp.Unsafe.FSE_decode_t : ValueType {
    public ushort newState;
    public byte symbol;
    public byte nbBits;
}
public class ZstdSharp.Unsafe.FSE_DecompressWksp : ValueType {
    [FixedBufferAttribute("System.Int16", "256")]
public <ncount>e__FixedBuffer ncount;
}
public class ZstdSharp.Unsafe.FSE_DState_t : ValueType {
    [NativeIntegerAttribute]
public UIntPtr state;
    public Void* table;
}
public class ZstdSharp.Unsafe.FSE_DTableHeader : ValueType {
    public ushort tableLog;
    public ushort fastMode;
}
public enum ZstdSharp.Unsafe.FSE_repeat : Enum {
    public int value__;
    public static FSE_repeat FSE_repeat_none;
    public static FSE_repeat FSE_repeat_check;
    public static FSE_repeat FSE_repeat_valid;
}
public class ZstdSharp.Unsafe.FSE_symbolCompressionTransform : ValueType {
    public int deltaFindState;
    public UInt32 deltaNbBits;
}
public enum ZstdSharp.Unsafe.HIST_checkInput_e : Enum {
    public int value__;
    public static HIST_checkInput_e trustInput;
    public static HIST_checkInput_e checkMaxSymbolValue;
}
public class ZstdSharp.Unsafe.HUF_buildCTable_wksp_tables : ValueType {
    public _huffNodeTbl_e__FixedBuffer huffNodeTbl;
    public _rankPosition_e__FixedBuffer rankPosition;
}
public class ZstdSharp.Unsafe.HUF_compress_tables_t : ValueType {
    [FixedBufferAttribute("System.UInt32", "256")]
public <count>e__FixedBuffer count;
    public _CTable_e__FixedBuffer CTable;
    public _wksps_e__Union wksps;
}
public class ZstdSharp.Unsafe.HUF_CompressWeightsWksp : ValueType {
    [FixedBufferAttribute("System.UInt32", "59")]
public <CTable>e__FixedBuffer CTable;
    [FixedBufferAttribute("System.UInt32", "41")]
public <scratchBuffer>e__FixedBuffer scratchBuffer;
    [FixedBufferAttribute("System.UInt32", "13")]
public <count>e__FixedBuffer count;
    [FixedBufferAttribute("System.Int16", "13")]
public <norm>e__FixedBuffer norm;
}
public class ZstdSharp.Unsafe.HUF_CStream_t : ValueType {
    public _bitContainer_e__FixedBuffer bitContainer;
    public _bitPos_e__FixedBuffer bitPos;
    public Byte* startPtr;
    public Byte* ptr;
    public Byte* endPtr;
}
public class ZstdSharp.Unsafe.HUF_CTableHeader : ValueType {
    public byte tableLog;
    public byte maxSymbolValue;
    [FixedBufferAttribute("System.Byte", "6")]
public <unused>e__FixedBuffer unused;
}
public class ZstdSharp.Unsafe.HUF_DecompressFastArgs : ValueType {
    public _ip_e__FixedBuffer ip;
    public _op_e__FixedBuffer op;
    [FixedBufferAttribute("System.UInt64", "4")]
public <bits>e__FixedBuffer bits;
    public Void* dt;
    public Byte* ilowest;
    public Byte* oend;
    public _iend_e__FixedBuffer iend;
}
public class ZstdSharp.Unsafe.HUF_DEltX1 : ValueType {
    public byte nbBits;
    public byte byte;
}
public class ZstdSharp.Unsafe.HUF_DEltX2 : ValueType {
    public ushort sequence;
    public byte nbBits;
    public byte length;
}
public enum ZstdSharp.Unsafe.HUF_flags_e : Enum {
    public int value__;
    public static HUF_flags_e HUF_flags_bmi2;
    public static HUF_flags_e HUF_flags_optimalDepth;
    public static HUF_flags_e HUF_flags_preferRepeat;
    public static HUF_flags_e HUF_flags_suspectUncompressible;
    public static HUF_flags_e HUF_flags_disableAsm;
    public static HUF_flags_e HUF_flags_disableFast;
}
public enum ZstdSharp.Unsafe.HUF_nbStreams_e : Enum {
    public int value__;
    public static HUF_nbStreams_e HUF_singleStream;
    public static HUF_nbStreams_e HUF_fourStreams;
}
public class ZstdSharp.Unsafe.HUF_ReadDTableX1_Workspace : ValueType {
    [FixedBufferAttribute("System.UInt32", "13")]
public <rankVal>e__FixedBuffer rankVal;
    [FixedBufferAttribute("System.UInt32", "13")]
public <rankStart>e__FixedBuffer rankStart;
    [FixedBufferAttribute("System.UInt32", "219")]
public <statsWksp>e__FixedBuffer statsWksp;
    [FixedBufferAttribute("System.Byte", "256")]
public <symbols>e__FixedBuffer symbols;
    [FixedBufferAttribute("System.Byte", "256")]
public <huffWeight>e__FixedBuffer huffWeight;
}
public class ZstdSharp.Unsafe.HUF_ReadDTableX2_Workspace : ValueType {
    public _rankVal_e__FixedBuffer rankVal;
    [FixedBufferAttribute("System.UInt32", "13")]
public <rankStats>e__FixedBuffer rankStats;
    [FixedBufferAttribute("System.UInt32", "15")]
public <rankStart0>e__FixedBuffer rankStart0;
    public _sortedSymbol_e__FixedBuffer sortedSymbol;
    [FixedBufferAttribute("System.Byte", "256")]
public <weightList>e__FixedBuffer weightList;
    [FixedBufferAttribute("System.UInt32", "219")]
public <calleeWksp>e__FixedBuffer calleeWksp;
}
public enum ZstdSharp.Unsafe.HUF_repeat : Enum {
    public int value__;
    public static HUF_repeat HUF_repeat_none;
    public static HUF_repeat HUF_repeat_check;
    public static HUF_repeat HUF_repeat_valid;
}
public class ZstdSharp.Unsafe.HUF_WriteCTableWksp : ValueType {
    public HUF_CompressWeightsWksp wksp;
    [FixedBufferAttribute("System.Byte", "13")]
public <bitsToWeight>e__FixedBuffer bitsToWeight;
    [FixedBufferAttribute("System.Byte", "255")]
public <huffWeight>e__FixedBuffer huffWeight;
}
public class ZstdSharp.Unsafe.inBuff_t : ValueType {
    public range_t prefix;
    public buffer_s buffer;
    [NativeIntegerAttribute]
public UIntPtr filled;
}
public class ZstdSharp.Unsafe.ldmEntry_t : ValueType {
    public UInt32 offset;
    public UInt32 checksum;
}
public class ZstdSharp.Unsafe.ldmMatchCandidate_t : ValueType {
    public Byte* split;
    public UInt32 hash;
    public UInt32 checksum;
    public ldmEntry_t* bucket;
}
public class ZstdSharp.Unsafe.ldmParams_t : ValueType {
    public ZSTD_paramSwitch_e enableLdm;
    public UInt32 hashLog;
    public UInt32 bucketSizeLog;
    public UInt32 minMatchLength;
    public UInt32 hashRateLog;
    public UInt32 windowLog;
}
public class ZstdSharp.Unsafe.ldmRollingHashState_t : ValueType {
    public ulong rolling;
    public ulong stopMask;
}
public class ZstdSharp.Unsafe.ldmState_t : ValueType {
    public ZSTD_window_t window;
    public ldmEntry_t* hashTable;
    public UInt32 loadedDictEnd;
    public Byte* bucketOffsets;
    public _splitIndices_e__FixedBuffer splitIndices;
    public _matchCandidates_e__FixedBuffer matchCandidates;
}
public static class ZstdSharp.Unsafe.Methods : object {
    private static UInt32* BIT_mask;
    [NativeIntegerAttribute]
private static UIntPtr* static_zeroFilled;
    private static ZSTD_compressionParameters[][] ZSTD_defaultCParameters;
    private static int g_displayLevel;
    private static FASTCOVER_accel_t* FASTCOVER_defaultAccelParameters;
    private static UInt32* rtbTable;
    private static algo_time_t[][] algoTime;
    private static ZSTD_customMem ZSTD_defaultCMem;
    private static UInt64* srcSizeTiers;
    [NativeIntegerAttribute]
private static UIntPtr* attachDictSizeCutoffs;
    private static ZSTD_blockCompressor[][] blockCompressor;
    private static ZSTD_blockCompressor[][] rowBasedBlockCompressors;
    private static rawSeqStore_t kNullRawSeqStore;
    private static Byte* LL_Code;
    private static Byte* ML_Code;
    private static UInt32 prime3bytes;
    private static UInt32 prime4bytes;
    private static ulong prime5bytes;
    private static ulong prime6bytes;
    private static ulong prime7bytes;
    private static ulong prime8bytes;
    private static Byte* stringToByte_20_00;
    private static UInt32* kInverseProbabilityLog256;
    private static ZSTD_seqSymbol* LL_defaultDTable;
    private static ZSTD_seqSymbol* OF_defaultDTable;
    private static ZSTD_seqSymbol* ML_defaultDTable;
    private static UInt32* dec32table;
    private static Int32* dec64table;
    private static UInt32* LL_base;
    private static UInt32* OF_base;
    private static Byte* OF_bits;
    private static UInt32* ML_base;
    private static UInt32* repStartValue;
    [NativeIntegerAttribute]
private static UIntPtr* ZSTD_fcs_fieldSize;
    [NativeIntegerAttribute]
private static UIntPtr* ZSTD_did_fieldSize;
    private static UInt32 ZSTD_blockHeaderSize;
    private static Byte* LL_bits;
    private static Int16* LL_defaultNorm;
    private static UInt32 LL_defaultNormLog;
    private static Byte* ML_bits;
    private static Int16* ML_defaultNorm;
    private static UInt32 ML_defaultNormLog;
    private static Int16* OF_defaultNorm;
    private static UInt32 OF_defaultNormLog;
    private static UInt64* ZSTD_ldm_gearTab;
    private static buffer_s g_nullBuffer;
    private static range_t kNullRange;
    private static roundBuff_t kNullRoundBuff;
    private static UInt32* baseLLfreqs;
    private static UInt32* baseOFCfreqs;
    private static ZSTD_getAllMatchesFn[][] getAllMatchesFns;
    public static bool MEM_32bits { get; }
    public static bool MEM_64bits { get; }
    private static Methods();
    private static Void* ZSTD_customMalloc(UIntPtr size, ZSTD_customMem customMem);
    private static Void* ZSTD_customCalloc(UIntPtr size, ZSTD_customMem customMem);
    private static void ZSTD_customFree(Void* ptr, ZSTD_customMem customMem);
    private static UInt32 ZSTD_countTrailingZeros32(UInt32 val);
    private static UInt32 ZSTD_countLeadingZeros32(UInt32 val);
    private static UInt32 ZSTD_countTrailingZeros64(ulong val);
    private static UInt32 ZSTD_countLeadingZeros64(ulong val);
    private static UIntPtr BIT_initCStream(BIT_CStream_t* bitC, Void* startPtr, UIntPtr dstCapacity);
    private static UIntPtr BIT_getLowerBits(UIntPtr bitContainer, UInt32 nbBits);
    private static void BIT_addBits(BIT_CStream_t* bitC, UIntPtr value, UInt32 nbBits);
    private static void BIT_addBitsFast(BIT_CStream_t* bitC, UIntPtr value, UInt32 nbBits);
    private static void BIT_flushBitsFast(BIT_CStream_t* bitC);
    private static void BIT_flushBits(BIT_CStream_t* bitC);
    private static UIntPtr BIT_closeCStream(BIT_CStream_t* bitC);
    private static UIntPtr BIT_initDStream(BIT_DStream_t* bitD, Void* srcBuffer, UIntPtr srcSize);
    private static UIntPtr BIT_getUpperBits(UIntPtr bitContainer, UInt32 start);
    private static UIntPtr BIT_getMiddleBits(UIntPtr bitContainer, UInt32 start, UInt32 nbBits);
    private static UIntPtr BIT_lookBits(BIT_DStream_t* bitD, UInt32 nbBits);
    private static UIntPtr BIT_readBits(BIT_DStream_t* bitD, UInt32 nbBits);
    private static UIntPtr BIT_readBitsFast(BIT_DStream_t* bitD, UInt32 nbBits);
    private static BIT_DStream_status BIT_reloadDStream_internal(BIT_DStream_t* bitD);
    private static BIT_DStream_status BIT_reloadDStream(BIT_DStream_t* bitD);
    private static UInt32 BIT_endOfDStream(BIT_DStream_t* DStream);
    private static UIntPtr BIT_initDStream(BIT_DStream_t& bitD, Void* srcBuffer, UIntPtr srcSize);
    private static UIntPtr BIT_lookBits(BIT_DStream_t& bitD, UInt32 nbBits);
    private static UIntPtr BIT_readBits(BIT_DStream_t& bitD, UInt32 nbBits);
    private static UIntPtr BIT_readBitsFast(BIT_DStream_t& bitD, UInt32 nbBits);
    private static BIT_DStream_status BIT_reloadDStream(BIT_DStream_t& bitD);
    private static BIT_DStream_status BIT_reloadDStream_internal(BIT_DStream_t& bitD);
    private static UInt32 BIT_endOfDStream(BIT_DStream_t& DStream);
    private static IntPtr ZSTD_wrappedPtrDiff(Byte* lhs, Byte* rhs);
    private static Byte* ZSTD_wrappedPtrAdd(Byte* ptr, IntPtr add);
    private static Byte* ZSTD_wrappedPtrSub(Byte* ptr, IntPtr sub);
    private static Byte* ZSTD_maybeNullPtrAdd(Byte* ptr, IntPtr add);
    private static UIntPtr COVER_sum(UIntPtr* samplesSizes, UInt32 nbSamples);
    private static void COVER_warnOnSmallCorpus(UIntPtr maxDictSize, UIntPtr nbDmers, int displayLevel);
    private static COVER_epoch_info_t COVER_computeEpochs(UInt32 maxDictSize, UInt32 nbDmers, UInt32 k, UInt32 passes);
    private static UIntPtr COVER_checkTotalCompressedSize(ZDICT_cover_params_t parameters, UIntPtr* samplesSizes, Byte* samples, UIntPtr* offsets, UIntPtr nbTrainSamples, UIntPtr nbSamples, Byte* dict, UIntPtr dictBufferCapacity);
    private static void COVER_best_init(COVER_best_s* best);
    private static void COVER_best_wait(COVER_best_s* best);
    private static void COVER_best_destroy(COVER_best_s* best);
    private static void COVER_best_start(COVER_best_s* best);
    private static void COVER_best_finish(COVER_best_s* best, ZDICT_cover_params_t parameters, COVER_dictSelection selection);
    private static COVER_dictSelection setDictSelection(Byte* buf, UIntPtr s, UIntPtr csz);
    private static COVER_dictSelection COVER_dictSelectionError(UIntPtr error);
    private static UInt32 COVER_dictSelectionIsError(COVER_dictSelection selection);
    private static void COVER_dictSelectionFree(COVER_dictSelection selection);
    private static COVER_dictSelection COVER_selectDict(Byte* customDictContent, UIntPtr dictBufferCapacity, UIntPtr dictContentSize, Byte* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbFinalizeSamples, UIntPtr nbCheckSamples, UIntPtr nbSamples, ZDICT_cover_params_t params, UIntPtr* offsets, UIntPtr totalCompressedSize);
    private static UInt32 FSE_versionNumber();
    private static bool FSE_isError(UIntPtr code);
    private static string FSE_getErrorName(UIntPtr code);
    private static bool HUF_isError(UIntPtr code);
    private static string HUF_getErrorName(UIntPtr code);
    private static UIntPtr FSE_readNCount_body(Int16* normalizedCounter, UInt32* maxSVPtr, UInt32* tableLogPtr, Void* headerBuffer, UIntPtr hbSize);
    private static UIntPtr FSE_readNCount_body_default(Int16* normalizedCounter, UInt32* maxSVPtr, UInt32* tableLogPtr, Void* headerBuffer, UIntPtr hbSize);
    private static UIntPtr FSE_readNCount_bmi2(Int16* normalizedCounter, UInt32* maxSVPtr, UInt32* tableLogPtr, Void* headerBuffer, UIntPtr hbSize, int bmi2);
    private static UIntPtr FSE_readNCount(Int16* normalizedCounter, UInt32* maxSVPtr, UInt32* tableLogPtr, Void* headerBuffer, UIntPtr hbSize);
    private static UIntPtr HUF_readStats(Byte* huffWeight, UIntPtr hwSize, UInt32* rankStats, UInt32* nbSymbolsPtr, UInt32* tableLogPtr, Void* src, UIntPtr srcSize);
    private static UIntPtr HUF_readStats_body(Byte* huffWeight, UIntPtr hwSize, UInt32* rankStats, UInt32* nbSymbolsPtr, UInt32* tableLogPtr, Void* src, UIntPtr srcSize, Void* workSpace, UIntPtr wkspSize, int bmi2);
    private static UIntPtr HUF_readStats_body_default(Byte* huffWeight, UIntPtr hwSize, UInt32* rankStats, UInt32* nbSymbolsPtr, UInt32* tableLogPtr, Void* src, UIntPtr srcSize, Void* workSpace, UIntPtr wkspSize);
    private static UIntPtr HUF_readStats_wksp(Byte* huffWeight, UIntPtr hwSize, UInt32* rankStats, UInt32* nbSymbolsPtr, UInt32* tableLogPtr, Void* src, UIntPtr srcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static bool ERR_isError(UIntPtr code);
    private static ZSTD_ErrorCode ERR_getErrorCode(UIntPtr code);
    private static string ERR_getErrorName(UIntPtr code);
    private static string ERR_getErrorString(ZSTD_ErrorCode code);
    private static UIntPtr FASTCOVER_hashPtrToIndex(Void* p, UInt32 f, UInt32 d);
    private static COVER_segment_t FASTCOVER_selectSegment(FASTCOVER_ctx_t* ctx, UInt32* freqs, UInt32 begin, UInt32 end, ZDICT_cover_params_t parameters, UInt16* segmentFreqs);
    private static int FASTCOVER_checkParameters(ZDICT_cover_params_t parameters, UIntPtr maxDictSize, UInt32 f, UInt32 accel);
    private static void FASTCOVER_ctx_destroy(FASTCOVER_ctx_t* ctx);
    private static void FASTCOVER_computeFrequency(UInt32* freqs, FASTCOVER_ctx_t* ctx);
    private static UIntPtr FASTCOVER_ctx_init(FASTCOVER_ctx_t* ctx, Void* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbSamples, UInt32 d, double splitPoint, UInt32 f, FASTCOVER_accel_t accelParams);
    private static UIntPtr FASTCOVER_buildDictionary(FASTCOVER_ctx_t* ctx, UInt32* freqs, Void* dictBuffer, UIntPtr dictBufferCapacity, ZDICT_cover_params_t parameters, UInt16* segmentFreqs);
    private static void FASTCOVER_tryParameters(Void* opaque);
    private static void FASTCOVER_convertToCoverParams(ZDICT_fastCover_params_t fastCoverParams, ZDICT_cover_params_t* coverParams);
    private static void FASTCOVER_convertToFastCoverParams(ZDICT_cover_params_t coverParams, ZDICT_fastCover_params_t* fastCoverParams, UInt32 f, UInt32 accel);
    public static UIntPtr ZDICT_trainFromBuffer_fastCover(Void* dictBuffer, UIntPtr dictBufferCapacity, Void* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbSamples, ZDICT_fastCover_params_t parameters);
    public static UIntPtr ZDICT_optimizeTrainFromBuffer_fastCover(Void* dictBuffer, UIntPtr dictBufferCapacity, Void* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbSamples, ZDICT_fastCover_params_t* parameters);
    private static void FSE_initCState(FSE_CState_t* statePtr, UInt32* ct);
    private static void FSE_initCState2(FSE_CState_t* statePtr, UInt32* ct, UInt32 symbol);
    private static void FSE_encodeSymbol(BIT_CStream_t* bitC, FSE_CState_t* statePtr, UInt32 symbol);
    private static void FSE_flushCState(BIT_CStream_t* bitC, FSE_CState_t* statePtr);
    private static UInt32 FSE_getMaxNbBits(Void* symbolTTPtr, UInt32 symbolValue);
    private static UInt32 FSE_bitCost(Void* symbolTTPtr, UInt32 tableLog, UInt32 symbolValue, UInt32 accuracyLog);
    private static void FSE_initDState(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD, UInt32* dt);
    private static byte FSE_peekSymbol(FSE_DState_t* DStatePtr);
    private static void FSE_updateState(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD);
    private static byte FSE_decodeSymbolFast(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD);
    private static UInt32 FSE_endOfDState(FSE_DState_t* DStatePtr);
    private static UIntPtr FSE_buildCTable_wksp(UInt32* ct, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32 tableLog, Void* workSpace, UIntPtr wkspSize);
    private static UIntPtr FSE_NCountWriteBound(UInt32 maxSymbolValue, UInt32 tableLog);
    private static UIntPtr FSE_writeNCount_generic(Void* header, UIntPtr headerBufferSize, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32 tableLog, UInt32 writeIsSafe);
    private static UIntPtr FSE_writeNCount(Void* buffer, UIntPtr bufferSize, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32 tableLog);
    private static UInt32 FSE_minTableLog(UIntPtr srcSize, UInt32 maxSymbolValue);
    private static UInt32 FSE_optimalTableLog_internal(UInt32 maxTableLog, UIntPtr srcSize, UInt32 maxSymbolValue, UInt32 minus);
    private static UInt32 FSE_optimalTableLog(UInt32 maxTableLog, UIntPtr srcSize, UInt32 maxSymbolValue);
    private static UIntPtr FSE_normalizeM2(Int16* norm, UInt32 tableLog, UInt32* count, UIntPtr total, UInt32 maxSymbolValue, short lowProbCount);
    private static UIntPtr FSE_normalizeCount(Int16* normalizedCounter, UInt32 tableLog, UInt32* count, UIntPtr total, UInt32 maxSymbolValue, UInt32 useLowProbCount);
    private static UIntPtr FSE_buildCTable_rle(UInt32* ct, byte symbolValue);
    private static UIntPtr FSE_compress_usingCTable_generic(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UInt32* ct, UInt32 fast);
    private static UIntPtr FSE_compress_usingCTable(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UInt32* ct);
    private static UIntPtr FSE_compressBound(UIntPtr size);
    private static UIntPtr FSE_buildDTable_internal(UInt32* dt, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32 tableLog, Void* workSpace, UIntPtr wkspSize);
    private static UIntPtr FSE_buildDTable_wksp(UInt32* dt, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32 tableLog, Void* workSpace, UIntPtr wkspSize);
    private static UIntPtr FSE_decompress_usingDTable_generic(Void* dst, UIntPtr maxDstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* dt, UInt32 fast);
    private static UIntPtr FSE_decompress_wksp_body(Void* dst, UIntPtr dstCapacity, Void* cSrc, UIntPtr cSrcSize, UInt32 maxLog, Void* workSpace, UIntPtr wkspSize, int bmi2);
    private static UIntPtr FSE_decompress_wksp_body_default(Void* dst, UIntPtr dstCapacity, Void* cSrc, UIntPtr cSrcSize, UInt32 maxLog, Void* workSpace, UIntPtr wkspSize);
    private static UIntPtr FSE_decompress_wksp_bmi2(Void* dst, UIntPtr dstCapacity, Void* cSrc, UIntPtr cSrcSize, UInt32 maxLog, Void* workSpace, UIntPtr wkspSize, int bmi2);
    private static bool HIST_isError(UIntPtr code);
    private static UInt32 HIST_count_simple(UInt32* count, UInt32* maxSymbolValuePtr, Void* src, UIntPtr srcSize);
    private static UIntPtr HIST_count_parallel_wksp(UInt32* count, UInt32* maxSymbolValuePtr, Void* source, UIntPtr sourceSize, HIST_checkInput_e check, UInt32* workSpace);
    private static UIntPtr HIST_countFast_wksp(UInt32* count, UInt32* maxSymbolValuePtr, Void* source, UIntPtr sourceSize, Void* workSpace, UIntPtr workSpaceSize);
    private static UIntPtr HIST_count_wksp(UInt32* count, UInt32* maxSymbolValuePtr, Void* source, UIntPtr sourceSize, Void* workSpace, UIntPtr workSpaceSize);
    private static UIntPtr HIST_countFast(UInt32* count, UInt32* maxSymbolValuePtr, Void* source, UIntPtr sourceSize);
    private static UIntPtr HIST_count(UInt32* count, UInt32* maxSymbolValuePtr, Void* src, UIntPtr srcSize);
    private static Void* HUF_alignUpWorkspace(Void* workspace, UIntPtr* workspaceSizePtr, UIntPtr align);
    private static UIntPtr HUF_compressWeights(Void* dst, UIntPtr dstSize, Void* weightTable, UIntPtr wtSize, Void* workspace, UIntPtr workspaceSize);
    private static HUF_CTableHeader HUF_readCTableHeader(UIntPtr* ctable);
    private static void HUF_writeCTableHeader(UIntPtr* ctable, UInt32 tableLog, UInt32 maxSymbolValue);
    private static UIntPtr HUF_writeCTable_wksp(Void* dst, UIntPtr maxDstSize, UIntPtr* CTable, UInt32 maxSymbolValue, UInt32 huffLog, Void* workspace, UIntPtr workspaceSize);
    private static UIntPtr HUF_readCTable(UIntPtr* CTable, UInt32* maxSymbolValuePtr, Void* src, UIntPtr srcSize, UInt32* hasZeroWeights);
    private static UInt32 HUF_getNbBitsFromCTable(UIntPtr* CTable, UInt32 symbolValue);
    private static UInt32 HUF_setMaxHeight(nodeElt_s* huffNode, UInt32 lastNonNull, UInt32 targetNbBits);
    private static void HUF_swapNodes(nodeElt_s* a, nodeElt_s* b);
    private static int HUF_isSorted(nodeElt_s* huffNode, UInt32 maxSymbolValue1);
    private static void HUF_insertionSort(nodeElt_s* huffNode, int low, int high);
    private static int HUF_quickSortPartition(nodeElt_s* arr, int low, int high);
    private static void HUF_simpleQuickSort(nodeElt_s* arr, int low, int high);
    private static void HUF_sort(nodeElt_s* huffNode, UInt32* count, UInt32 maxSymbolValue, rankPos* rankPosition);
    private static int HUF_buildTree(nodeElt_s* huffNode, UInt32 maxSymbolValue);
    private static void HUF_buildCTableFromTree(UIntPtr* CTable, nodeElt_s* huffNode, int nonNullRank, UInt32 maxSymbolValue, UInt32 maxNbBits);
    private static UIntPtr HUF_buildCTable_wksp(UIntPtr* CTable, UInt32* count, UInt32 maxSymbolValue, UInt32 maxNbBits, Void* workSpace, UIntPtr wkspSize);
    private static UIntPtr HUF_estimateCompressedSize(UIntPtr* CTable, UInt32* count, UInt32 maxSymbolValue);
    private static int HUF_validateCTable(UIntPtr* CTable, UInt32* count, UInt32 maxSymbolValue);
    private static UIntPtr HUF_compressBound(UIntPtr size);
    private static UIntPtr HUF_initCStream(HUF_CStream_t* bitC, Void* startPtr, UIntPtr dstCapacity);
    private static UIntPtr HUF_endMark();
    private static UIntPtr HUF_closeCStream(HUF_CStream_t* bitC);
    private static void HUF_compress1X_usingCTable_internal_body_loop(HUF_CStream_t* bitC, Byte* ip, UIntPtr srcSize, UIntPtr* ct, int kUnroll, int kFastFlush, int kLastFast);
    private static UIntPtr HUF_tightCompressBound(UIntPtr srcSize, UIntPtr tableLog);
    private static UIntPtr HUF_compress1X_usingCTable_internal_body(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UIntPtr* CTable);
    private static UIntPtr HUF_compress1X_usingCTable_internal(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UIntPtr* CTable, int flags);
    private static UIntPtr HUF_compress1X_usingCTable(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UIntPtr* CTable, int flags);
    private static UIntPtr HUF_compress4X_usingCTable_internal(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UIntPtr* CTable, int flags);
    private static UIntPtr HUF_compress4X_usingCTable(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UIntPtr* CTable, int flags);
    private static UIntPtr HUF_compressCTable_internal(Byte* ostart, Byte* op, Byte* oend, Void* src, UIntPtr srcSize, HUF_nbStreams_e nbStreams, UIntPtr* CTable, int flags);
    private static UInt32 HUF_cardinality(UInt32* count, UInt32 maxSymbolValue);
    private static UInt32 HUF_minTableLog(UInt32 symbolCardinality);
    private static UInt32 HUF_optimalTableLog(UInt32 maxTableLog, UIntPtr srcSize, UInt32 maxSymbolValue, Void* workSpace, UIntPtr wkspSize, UIntPtr* table, UInt32* count, int flags);
    private static UIntPtr HUF_compress_internal(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UInt32 maxSymbolValue, UInt32 huffLog, HUF_nbStreams_e nbStreams, Void* workSpace, UIntPtr wkspSize, UIntPtr* oldHufTable, HUF_repeat* repeat, int flags);
    private static UIntPtr HUF_compress1X_repeat(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UInt32 maxSymbolValue, UInt32 huffLog, Void* workSpace, UIntPtr wkspSize, UIntPtr* hufTable, HUF_repeat* repeat, int flags);
    private static UIntPtr HUF_compress4X_repeat(Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UInt32 maxSymbolValue, UInt32 huffLog, Void* workSpace, UIntPtr wkspSize, UIntPtr* hufTable, HUF_repeat* repeat, int flags);
    private static DTableDesc HUF_getDTableDesc(UInt32* table);
    private static UIntPtr HUF_initFastDStream(Byte* ip);
    private static UIntPtr HUF_DecompressFastArgs_init(HUF_DecompressFastArgs* args, Void* dst, UIntPtr dstSize, Void* src, UIntPtr srcSize, UInt32* DTable);
    private static UIntPtr HUF_initRemainingDStream(BIT_DStream_t* bit, HUF_DecompressFastArgs* args, int stream, Byte* segmentEnd);
    private static UInt32 HUF_rescaleStats(Byte* huffWeight, UInt32* rankVal, UInt32 nbSymbols, UInt32 tableLog, UInt32 targetTableLog);
    private static UIntPtr HUF_readDTableX1_wksp(UInt32* DTable, Void* src, UIntPtr srcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static UIntPtr HUF_decodeStreamX1(Byte* p, BIT_DStream_t* bitDPtr, Byte* pEnd, HUF_DEltX1* dt, UInt32 dtLog);
    private static UIntPtr HUF_decompress1X1_usingDTable_internal_body(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable);
    private static UIntPtr HUF_decompress4X1_usingDTable_internal_body(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable);
    private static UIntPtr HUF_decompress4X1_usingDTable_internal_default(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable);
    private static void HUF_decompress4X1_usingDTable_internal_fast_c_loop(HUF_DecompressFastArgs* args);
    private static UIntPtr HUF_decompress4X1_usingDTable_internal_fast(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, Void* loopFn);
    private static UIntPtr HUF_decompress1X1_usingDTable_internal(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, int flags);
    private static UIntPtr HUF_decompress4X1_usingDTable_internal(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, int flags);
    private static UIntPtr HUF_decompress4X1_DCtx_wksp(UInt32* dctx, Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static void HUF_fillDTableX2(HUF_DEltX2* DTable, UInt32 targetLog, sortedSymbol_t* sortedList, UInt32* rankStart, rankValCol_t* rankValOrigin, UInt32 maxWeight, UInt32 nbBitsBaseline);
    private static UIntPtr HUF_readDTableX2_wksp(UInt32* DTable, Void* src, UIntPtr srcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static UInt32 HUF_decodeLastSymbolX2(Void* op, BIT_DStream_t* DStream, HUF_DEltX2* dt, UInt32 dtLog);
    private static UIntPtr HUF_decodeStreamX2(Byte* p, BIT_DStream_t* bitDPtr, Byte* pEnd, HUF_DEltX2* dt, UInt32 dtLog);
    private static UIntPtr HUF_decompress1X2_usingDTable_internal_body(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable);
    private static UIntPtr HUF_decompress4X2_usingDTable_internal_body(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable);
    private static UIntPtr HUF_decompress4X2_usingDTable_internal_default(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable);
    private static void HUF_decompress4X2_usingDTable_internal_fast_c_loop(HUF_DecompressFastArgs* args);
    private static UIntPtr HUF_decompress4X2_usingDTable_internal_fast(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, Void* loopFn);
    private static UIntPtr HUF_decompress4X2_usingDTable_internal(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, int flags);
    private static UIntPtr HUF_decompress1X2_usingDTable_internal(Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, int flags);
    private static UIntPtr HUF_decompress1X2_DCtx_wksp(UInt32* DCtx, Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static UIntPtr HUF_decompress4X2_DCtx_wksp(UInt32* dctx, Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static UInt32 HUF_selectDecoder(UIntPtr dstSize, UIntPtr cSrcSize);
    private static UIntPtr HUF_decompress1X_DCtx_wksp(UInt32* dctx, Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static UIntPtr HUF_decompress1X_usingDTable(Void* dst, UIntPtr maxDstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, int flags);
    private static UIntPtr HUF_decompress1X1_DCtx_wksp(UInt32* dctx, Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    private static UIntPtr HUF_decompress4X_usingDTable(Void* dst, UIntPtr maxDstSize, Void* cSrc, UIntPtr cSrcSize, UInt32* DTable, int flags);
    private static UIntPtr HUF_decompress4X_hufOnly_wksp(UInt32* dctx, Void* dst, UIntPtr dstSize, Void* cSrc, UIntPtr cSrcSize, Void* workSpace, UIntPtr wkspSize, int flags);
    public static bool get_MEM_32bits();
    public static bool get_MEM_64bits();
    private static ushort MEM_read16(Void* memPtr);
    private static UInt32 MEM_read32(Void* memPtr);
    private static ulong MEM_read64(Void* memPtr);
    private static UIntPtr MEM_readST(Void* memPtr);
    private static void MEM_write16(Void* memPtr, ushort value);
    private static void MEM_write64(Void* memPtr, ulong value);
    private static ushort MEM_readLE16(Void* memPtr);
    private static void MEM_writeLE16(Void* memPtr, ushort val);
    private static UInt32 MEM_readLE24(Void* memPtr);
    private static void MEM_writeLE24(Void* memPtr, UInt32 val);
    private static UInt32 MEM_readLE32(Void* memPtr);
    private static void MEM_writeLE32(Void* memPtr, UInt32 val32);
    private static ulong MEM_readLE64(Void* memPtr);
    private static void MEM_writeLE64(Void* memPtr, ulong val64);
    private static UIntPtr MEM_readLEST(Void* memPtr);
    private static void MEM_writeLEST(Void* memPtr, UIntPtr val);
    private static JobThreadPool GetThreadPool(Void* ctx);
    public static Void* ZSTD_createThreadPool(UIntPtr numThreads);
    private static Void* POOL_create(UIntPtr numThreads, UIntPtr queueSize);
    private static Void* POOL_create_advanced(UIntPtr numThreads, UIntPtr queueSize, ZSTD_customMem customMem);
    private static void POOL_join(Void* ctx);
    private static void POOL_free(Void* ctx);
    private static void POOL_joinJobs(Void* ctx);
    public static void ZSTD_freeThreadPool(Void* pool);
    private static UIntPtr POOL_sizeof(Void* ctx);
    private static int POOL_resize(Void* ctx, UIntPtr numThreads);
    private static void POOL_add(Void* ctx, Void* function, Void* opaque);
    private static int POOL_tryAdd(Void* ctx, Void* function, Void* opaque);
    private static Void* XXH_malloc(UIntPtr s);
    private static void XXH_free(Void* p);
    private static UInt32 XXH_readLE32_align(Void* ptr, XXH_alignment align);
    private static UInt32 ZSTD_XXH_versionNumber();
    private static UInt32 XXH32_round(UInt32 acc, UInt32 input);
    private static UInt32 XXH32_avalanche(UInt32 hash);
    private static UInt32 XXH32_finalize(UInt32 hash, Byte* ptr, UIntPtr len, XXH_alignment align);
    private static UInt32 XXH32_endian_align(Byte* input, UIntPtr len, UInt32 seed, XXH_alignment align);
    private static UInt32 ZSTD_XXH32(Void* input, UIntPtr len, UInt32 seed);
    private static XXH32_state_s* ZSTD_XXH32_createState();
    private static XXH_errorcode ZSTD_XXH32_freeState(XXH32_state_s* statePtr);
    private static void ZSTD_XXH32_copyState(XXH32_state_s* dstState, XXH32_state_s* srcState);
    private static XXH_errorcode ZSTD_XXH32_reset(XXH32_state_s* statePtr, UInt32 seed);
    private static XXH_errorcode ZSTD_XXH32_update(XXH32_state_s* state, Void* input, UIntPtr len);
    private static UInt32 ZSTD_XXH32_digest(XXH32_state_s* state);
    private static void ZSTD_XXH32_canonicalFromHash(XXH32_canonical_t* dst, UInt32 hash);
    private static UInt32 ZSTD_XXH32_hashFromCanonical(XXH32_canonical_t* src);
    private static ulong XXH_readLE64_align(Void* ptr, XXH_alignment align);
    private static ulong XXH64_avalanche(ulong hash);
    private static ulong XXH64_finalize(ulong hash, Byte* ptr, UIntPtr len, XXH_alignment align);
    private static ulong XXH64_endian_align(Byte* input, UIntPtr len, ulong seed, XXH_alignment align);
    private static ulong ZSTD_XXH64(Void* input, UIntPtr len, ulong seed);
    private static XXH64_state_s* ZSTD_XXH64_createState();
    private static XXH_errorcode ZSTD_XXH64_freeState(XXH64_state_s* statePtr);
    private static void ZSTD_XXH64_copyState(XXH64_state_s* dstState, XXH64_state_s* srcState);
    private static XXH_errorcode ZSTD_XXH64_reset(XXH64_state_s* statePtr, ulong seed);
    private static XXH_errorcode ZSTD_XXH64_update(XXH64_state_s* state, Void* input, UIntPtr len);
    private static ulong ZSTD_XXH64_digest(XXH64_state_s* state);
    private static void ZSTD_XXH64_canonicalFromHash(XXH64_canonical_t* dst, ulong hash);
    private static ulong ZSTD_XXH64_hashFromCanonical(XXH64_canonical_t* src);
    public static bool ZDICT_isError(UIntPtr errorCode);
    public static string ZDICT_getErrorName(UIntPtr errorCode);
    private static void ZDICT_countEStats(EStats_ress_t esr, ZSTD_parameters* params, UInt32* countLit, UInt32* offsetcodeCount, UInt32* matchlengthCount, UInt32* litlengthCount, UInt32* repOffsets, Void* src, UIntPtr srcSize, UInt32 notificationLevel);
    private static UIntPtr ZDICT_totalSampleSize(UIntPtr* fileSizes, UInt32 nbFiles);
    private static void ZDICT_insertSortCount(offsetCount_t* table, UInt32 val, UInt32 count);
    private static void ZDICT_flatLit(UInt32* countLit);
    private static UIntPtr ZDICT_analyzeEntropy(Void* dstBuffer, UIntPtr maxDstSize, int compressionLevel, Void* srcBuffer, UIntPtr* fileSizes, UInt32 nbFiles, Void* dictBuffer, UIntPtr dictBufferSize, UInt32 notificationLevel);
    private static UInt32 ZDICT_maxRep(UInt32* reps);
    public static UIntPtr ZDICT_finalizeDictionary(Void* dictBuffer, UIntPtr dictBufferCapacity, Void* customDictContent, UIntPtr dictContentSize, Void* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbSamples, ZDICT_params_t params);
    private static UIntPtr ZDICT_addEntropyTablesFromBuffer_advanced(Void* dictBuffer, UIntPtr dictContentSize, UIntPtr dictBufferCapacity, Void* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbSamples, ZDICT_params_t params);
    public static UIntPtr ZDICT_trainFromBuffer(Void* dictBuffer, UIntPtr dictBufferCapacity, Void* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbSamples);
    public static UIntPtr ZDICT_addEntropyTablesFromBuffer(Void* dictBuffer, UIntPtr dictContentSize, UIntPtr dictBufferCapacity, Void* samplesBuffer, UIntPtr* samplesSizes, UInt32 nbSamples);
    public static UInt32 ZSTD_versionNumber();
    public static string ZSTD_versionString();
    public static bool ZSTD_isError(UIntPtr code);
    public static string ZSTD_getErrorName(UIntPtr code);
    public static ZSTD_ErrorCode ZSTD_getErrorCode(UIntPtr code);
    public static string ZSTD_getErrorString(ZSTD_ErrorCode code);
    public static UIntPtr ZSTD_compressBound(UIntPtr srcSize);
    public static ZSTD_CCtx_s* ZSTD_createCCtx();
    private static void ZSTD_initCCtx(ZSTD_CCtx_s* cctx, ZSTD_customMem memManager);
    public static ZSTD_CCtx_s* ZSTD_createCCtx_advanced(ZSTD_customMem customMem);
    public static ZSTD_CCtx_s* ZSTD_initStaticCCtx(Void* workspace, UIntPtr workspaceSize);
    private static void ZSTD_clearAllDicts(ZSTD_CCtx_s* cctx);
    private static UIntPtr ZSTD_sizeof_localDict(ZSTD_localDict dict);
    private static void ZSTD_freeCCtxContent(ZSTD_CCtx_s* cctx);
    public static UIntPtr ZSTD_freeCCtx(ZSTD_CCtx_s* cctx);
    private static UIntPtr ZSTD_sizeof_mtctx(ZSTD_CCtx_s* cctx);
    public static UIntPtr ZSTD_sizeof_CCtx(ZSTD_CCtx_s* cctx);
    public static UIntPtr ZSTD_sizeof_CStream(ZSTD_CCtx_s* zcs);
    private static seqStore_t* ZSTD_getSeqStore(ZSTD_CCtx_s* ctx);
    private static int ZSTD_rowMatchFinderSupported(ZSTD_strategy strategy);
    private static int ZSTD_rowMatchFinderUsed(ZSTD_strategy strategy, ZSTD_paramSwitch_e mode);
    private static ZSTD_paramSwitch_e ZSTD_resolveRowMatchFinderMode(ZSTD_paramSwitch_e mode, ZSTD_compressionParameters* cParams);
    private static ZSTD_paramSwitch_e ZSTD_resolveBlockSplitterMode(ZSTD_paramSwitch_e mode, ZSTD_compressionParameters* cParams);
    private static int ZSTD_allocateChainTable(ZSTD_strategy strategy, ZSTD_paramSwitch_e useRowMatchFinder, UInt32 forDDSDict);
    private static ZSTD_paramSwitch_e ZSTD_resolveEnableLdm(ZSTD_paramSwitch_e mode, ZSTD_compressionParameters* cParams);
    private static int ZSTD_resolveExternalSequenceValidation(int mode);
    private static UIntPtr ZSTD_resolveMaxBlockSize(UIntPtr maxBlockSize);
    private static ZSTD_paramSwitch_e ZSTD_resolveExternalRepcodeSearch(ZSTD_paramSwitch_e value, int cLevel);
    private static int ZSTD_CDictIndicesAreTagged(ZSTD_compressionParameters* cParams);
    private static ZSTD_CCtx_params_s ZSTD_makeCCtxParamsFromCParams(ZSTD_compressionParameters cParams);
    private static ZSTD_CCtx_params_s* ZSTD_createCCtxParams_advanced(ZSTD_customMem customMem);
    public static ZSTD_CCtx_params_s* ZSTD_createCCtxParams();
    public static UIntPtr ZSTD_freeCCtxParams(ZSTD_CCtx_params_s* params);
    public static UIntPtr ZSTD_CCtxParams_reset(ZSTD_CCtx_params_s* params);
    public static UIntPtr ZSTD_CCtxParams_init(ZSTD_CCtx_params_s* cctxParams, int compressionLevel);
    private static void ZSTD_CCtxParams_init_internal(ZSTD_CCtx_params_s* cctxParams, ZSTD_parameters* params, int compressionLevel);
    public static UIntPtr ZSTD_CCtxParams_init_advanced(ZSTD_CCtx_params_s* cctxParams, ZSTD_parameters params);
    private static void ZSTD_CCtxParams_setZstdParams(ZSTD_CCtx_params_s* cctxParams, ZSTD_parameters* params);
    public static ZSTD_bounds ZSTD_cParam_getBounds(ZSTD_cParameter param);
    private static UIntPtr ZSTD_cParam_clampBounds(ZSTD_cParameter cParam, Int32* value);
    private static int ZSTD_isUpdateAuthorized(ZSTD_cParameter param);
    public static UIntPtr ZSTD_CCtx_setParameter(ZSTD_CCtx_s* cctx, ZSTD_cParameter param, int value);
    public static UIntPtr ZSTD_CCtxParams_setParameter(ZSTD_CCtx_params_s* CCtxParams, ZSTD_cParameter param, int value);
    public static UIntPtr ZSTD_CCtx_getParameter(ZSTD_CCtx_s* cctx, ZSTD_cParameter param, Int32* value);
    public static UIntPtr ZSTD_CCtxParams_getParameter(ZSTD_CCtx_params_s* CCtxParams, ZSTD_cParameter param, Int32* value);
    public static UIntPtr ZSTD_CCtx_setParametersUsingCCtxParams(ZSTD_CCtx_s* cctx, ZSTD_CCtx_params_s* params);
    public static UIntPtr ZSTD_CCtx_setCParams(ZSTD_CCtx_s* cctx, ZSTD_compressionParameters cparams);
    public static UIntPtr ZSTD_CCtx_setFParams(ZSTD_CCtx_s* cctx, ZSTD_frameParameters fparams);
    public static UIntPtr ZSTD_CCtx_setParams(ZSTD_CCtx_s* cctx, ZSTD_parameters params);
    public static UIntPtr ZSTD_CCtx_setPledgedSrcSize(ZSTD_CCtx_s* cctx, ulong pledgedSrcSize);
    private static UIntPtr ZSTD_initLocalDict(ZSTD_CCtx_s* cctx);
    public static UIntPtr ZSTD_CCtx_loadDictionary_advanced(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType);
    public static UIntPtr ZSTD_CCtx_loadDictionary_byReference(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize);
    public static UIntPtr ZSTD_CCtx_loadDictionary(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize);
    public static UIntPtr ZSTD_CCtx_refCDict(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict);
    public static UIntPtr ZSTD_CCtx_refThreadPool(ZSTD_CCtx_s* cctx, Void* pool);
    public static UIntPtr ZSTD_CCtx_refPrefix(ZSTD_CCtx_s* cctx, Void* prefix, UIntPtr prefixSize);
    public static UIntPtr ZSTD_CCtx_refPrefix_advanced(ZSTD_CCtx_s* cctx, Void* prefix, UIntPtr prefixSize, ZSTD_dictContentType_e dictContentType);
    public static UIntPtr ZSTD_CCtx_reset(ZSTD_CCtx_s* cctx, ZSTD_ResetDirective reset);
    public static UIntPtr ZSTD_checkCParams(ZSTD_compressionParameters cParams);
    private static ZSTD_compressionParameters ZSTD_clampCParams(ZSTD_compressionParameters cParams);
    private static UInt32 ZSTD_cycleLog(UInt32 hashLog, ZSTD_strategy strat);
    private static UInt32 ZSTD_dictAndWindowLog(UInt32 windowLog, ulong srcSize, ulong dictSize);
    private static ZSTD_compressionParameters ZSTD_adjustCParams_internal(ZSTD_compressionParameters cPar, ulong srcSize, UIntPtr dictSize, ZSTD_cParamMode_e mode, ZSTD_paramSwitch_e useRowMatchFinder);
    public static ZSTD_compressionParameters ZSTD_adjustCParams(ZSTD_compressionParameters cPar, ulong srcSize, UIntPtr dictSize);
    private static void ZSTD_overrideCParams(ZSTD_compressionParameters* cParams, ZSTD_compressionParameters* overrides);
    private static ZSTD_compressionParameters ZSTD_getCParamsFromCCtxParams(ZSTD_CCtx_params_s* CCtxParams, ulong srcSizeHint, UIntPtr dictSize, ZSTD_cParamMode_e mode);
    private static UIntPtr ZSTD_sizeof_matchState(ZSTD_compressionParameters* cParams, ZSTD_paramSwitch_e useRowMatchFinder, UInt32 enableDedicatedDictSearch, UInt32 forCCtx);
    private static UIntPtr ZSTD_maxNbSeq(UIntPtr blockSize, UInt32 minMatch, int useSequenceProducer);
    private static UIntPtr ZSTD_estimateCCtxSize_usingCCtxParams_internal(ZSTD_compressionParameters* cParams, ldmParams_t* ldmParams, int isStatic, ZSTD_paramSwitch_e useRowMatchFinder, UIntPtr buffInSize, UIntPtr buffOutSize, ulong pledgedSrcSize, int useSequenceProducer, UIntPtr maxBlockSize);
    public static UIntPtr ZSTD_estimateCCtxSize_usingCCtxParams(ZSTD_CCtx_params_s* params);
    public static UIntPtr ZSTD_estimateCCtxSize_usingCParams(ZSTD_compressionParameters cParams);
    private static UIntPtr ZSTD_estimateCCtxSize_internal(int compressionLevel);
    public static UIntPtr ZSTD_estimateCCtxSize(int compressionLevel);
    public static UIntPtr ZSTD_estimateCStreamSize_usingCCtxParams(ZSTD_CCtx_params_s* params);
    public static UIntPtr ZSTD_estimateCStreamSize_usingCParams(ZSTD_compressionParameters cParams);
    private static UIntPtr ZSTD_estimateCStreamSize_internal(int compressionLevel);
    public static UIntPtr ZSTD_estimateCStreamSize(int compressionLevel);
    public static ZSTD_frameProgression ZSTD_getFrameProgression(ZSTD_CCtx_s* cctx);
    public static UIntPtr ZSTD_toFlushNow(ZSTD_CCtx_s* cctx);
    [ConditionalAttribute("DEBUG")]
private static void ZSTD_assertEqualCParams(ZSTD_compressionParameters cParams1, ZSTD_compressionParameters cParams2);
    private static void ZSTD_reset_compressedBlockState(ZSTD_compressedBlockState_t* bs);
    private static void ZSTD_invalidateMatchState(ZSTD_matchState_t* ms);
    private static ulong ZSTD_bitmix(ulong val, ulong len);
    private static void ZSTD_advanceHashSalt(ZSTD_matchState_t* ms);
    private static UIntPtr ZSTD_reset_matchState(ZSTD_matchState_t* ms, ZSTD_cwksp* ws, ZSTD_compressionParameters* cParams, ZSTD_paramSwitch_e useRowMatchFinder, ZSTD_compResetPolicy_e crp, ZSTD_indexResetPolicy_e forceResetIndex, ZSTD_resetTarget_e forWho);
    private static int ZSTD_indexTooCloseToMax(ZSTD_window_t w);
    private static int ZSTD_dictTooBig(UIntPtr loadedDictSize);
    private static UIntPtr ZSTD_resetCCtx_internal(ZSTD_CCtx_s* zc, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize, UIntPtr loadedDictSize, ZSTD_compResetPolicy_e crp, ZSTD_buffered_policy_e zbuff);
    private static void ZSTD_invalidateRepCodes(ZSTD_CCtx_s* cctx);
    private static int ZSTD_shouldAttachDict(ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize);
    private static UIntPtr ZSTD_resetCCtx_byAttachingCDict(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s params, ulong pledgedSrcSize, ZSTD_buffered_policy_e zbuff);
    private static void ZSTD_copyCDictTableIntoCCtx(UInt32* dst, UInt32* src, UIntPtr tableSize, ZSTD_compressionParameters* cParams);
    private static UIntPtr ZSTD_resetCCtx_byCopyingCDict(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s params, ulong pledgedSrcSize, ZSTD_buffered_policy_e zbuff);
    private static UIntPtr ZSTD_resetCCtx_usingCDict(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize, ZSTD_buffered_policy_e zbuff);
    private static UIntPtr ZSTD_copyCCtx_internal(ZSTD_CCtx_s* dstCCtx, ZSTD_CCtx_s* srcCCtx, ZSTD_frameParameters fParams, ulong pledgedSrcSize, ZSTD_buffered_policy_e zbuff);
    public static UIntPtr ZSTD_copyCCtx(ZSTD_CCtx_s* dstCCtx, ZSTD_CCtx_s* srcCCtx, ulong pledgedSrcSize);
    private static void ZSTD_reduceTable_internal(UInt32* table, UInt32 size, UInt32 reducerValue, int preserveMark);
    private static void ZSTD_reduceTable(UInt32* table, UInt32 size, UInt32 reducerValue);
    private static void ZSTD_reduceTable_btlazy2(UInt32* table, UInt32 size, UInt32 reducerValue);
    private static void ZSTD_reduceIndex(ZSTD_matchState_t* ms, ZSTD_CCtx_params_s* params, UInt32 reducerValue);
    private static int ZSTD_seqToCodes(seqStore_t* seqStorePtr);
    private static int ZSTD_useTargetCBlockSize(ZSTD_CCtx_params_s* cctxParams);
    private static int ZSTD_blockSplitterEnabled(ZSTD_CCtx_params_s* cctxParams);
    private static ZSTD_symbolEncodingTypeStats_t ZSTD_buildSequencesStatistics(seqStore_t* seqStorePtr, UIntPtr nbSeq, ZSTD_fseCTables_t* prevEntropy, ZSTD_fseCTables_t* nextEntropy, Byte* dst, Byte* dstEnd, ZSTD_strategy strategy, UInt32* countWorkspace, Void* entropyWorkspace, UIntPtr entropyWkspSize);
    private static UIntPtr ZSTD_entropyCompressSeqStore_internal(seqStore_t* seqStorePtr, ZSTD_entropyCTables_t* prevEntropy, ZSTD_entropyCTables_t* nextEntropy, ZSTD_CCtx_params_s* cctxParams, Void* dst, UIntPtr dstCapacity, Void* entropyWorkspace, UIntPtr entropyWkspSize, int bmi2);
    private static UIntPtr ZSTD_entropyCompressSeqStore(seqStore_t* seqStorePtr, ZSTD_entropyCTables_t* prevEntropy, ZSTD_entropyCTables_t* nextEntropy, ZSTD_CCtx_params_s* cctxParams, Void* dst, UIntPtr dstCapacity, UIntPtr srcSize, Void* entropyWorkspace, UIntPtr entropyWkspSize, int bmi2);
    private static ZSTD_blockCompressor ZSTD_selectBlockCompressor(ZSTD_strategy strat, ZSTD_paramSwitch_e useRowMatchFinder, ZSTD_dictMode_e dictMode);
    private static void ZSTD_storeLastLiterals(seqStore_t* seqStorePtr, Byte* anchor, UIntPtr lastLLSize);
    private static void ZSTD_resetSeqStore(seqStore_t* ssPtr);
    private static UIntPtr ZSTD_postProcessSequenceProducerResult(ZSTD_Sequence* outSeqs, UIntPtr nbExternalSeqs, UIntPtr outSeqsCapacity, UIntPtr srcSize);
    private static UIntPtr ZSTD_fastSequenceLengthSum(ZSTD_Sequence* seqBuf, UIntPtr seqBufSize);
    private static UIntPtr ZSTD_buildSeqStore(ZSTD_CCtx_s* zc, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_copyBlockSequences(SeqCollector* seqCollector, seqStore_t* seqStore, UInt32* prevRepcodes);
    public static UIntPtr ZSTD_sequenceBound(UIntPtr srcSize);
    public static UIntPtr ZSTD_generateSequences(ZSTD_CCtx_s* zc, ZSTD_Sequence* outSeqs, UIntPtr outSeqsSize, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_mergeBlockDelimiters(ZSTD_Sequence* sequences, UIntPtr seqsSize);
    private static int ZSTD_isRLE(Byte* src, UIntPtr length);
    private static int ZSTD_maybeRLE(seqStore_t* seqStore);
    private static void ZSTD_blockState_confirmRepcodesAndEntropyTables(ZSTD_blockState_t* bs);
    private static void writeBlockHeader(Void* op, UIntPtr cSize, UIntPtr blockSize, UInt32 lastBlock);
    private static UIntPtr ZSTD_buildBlockEntropyStats_literals(Void* src, UIntPtr srcSize, ZSTD_hufCTables_t* prevHuf, ZSTD_hufCTables_t* nextHuf, ZSTD_hufCTablesMetadata_t* hufMetadata, int literalsCompressionIsDisabled, Void* workspace, UIntPtr wkspSize, int hufFlags);
    private static ZSTD_symbolEncodingTypeStats_t ZSTD_buildDummySequencesStatistics(ZSTD_fseCTables_t* nextEntropy);
    private static UIntPtr ZSTD_buildBlockEntropyStats_sequences(seqStore_t* seqStorePtr, ZSTD_fseCTables_t* prevEntropy, ZSTD_fseCTables_t* nextEntropy, ZSTD_CCtx_params_s* cctxParams, ZSTD_fseCTablesMetadata_t* fseMetadata, Void* workspace, UIntPtr wkspSize);
    private static UIntPtr ZSTD_buildBlockEntropyStats(seqStore_t* seqStorePtr, ZSTD_entropyCTables_t* prevEntropy, ZSTD_entropyCTables_t* nextEntropy, ZSTD_CCtx_params_s* cctxParams, ZSTD_entropyCTablesMetadata_t* entropyMetadata, Void* workspace, UIntPtr wkspSize);
    private static UIntPtr ZSTD_estimateBlockSize_literal(Byte* literals, UIntPtr litSize, ZSTD_hufCTables_t* huf, ZSTD_hufCTablesMetadata_t* hufMetadata, Void* workspace, UIntPtr wkspSize, int writeEntropy);
    private static UIntPtr ZSTD_estimateBlockSize_symbolType(symbolEncodingType_e type, Byte* codeTable, UIntPtr nbSeq, UInt32 maxCode, UInt32* fseCTable, Byte* additionalBits, Int16* defaultNorm, UInt32 defaultNormLog, UInt32 defaultMax, Void* workspace, UIntPtr wkspSize);
    private static UIntPtr ZSTD_estimateBlockSize_sequences(Byte* ofCodeTable, Byte* llCodeTable, Byte* mlCodeTable, UIntPtr nbSeq, ZSTD_fseCTables_t* fseTables, ZSTD_fseCTablesMetadata_t* fseMetadata, Void* workspace, UIntPtr wkspSize, int writeEntropy);
    private static UIntPtr ZSTD_estimateBlockSize(Byte* literals, UIntPtr litSize, Byte* ofCodeTable, Byte* llCodeTable, Byte* mlCodeTable, UIntPtr nbSeq, ZSTD_entropyCTables_t* entropy, ZSTD_entropyCTablesMetadata_t* entropyMetadata, Void* workspace, UIntPtr wkspSize, int writeLitEntropy, int writeSeqEntropy);
    private static UIntPtr ZSTD_buildEntropyStatisticsAndEstimateSubBlockSize(seqStore_t* seqStore, ZSTD_CCtx_s* zc);
    private static UIntPtr ZSTD_countSeqStoreLiteralsBytes(seqStore_t* seqStore);
    private static UIntPtr ZSTD_countSeqStoreMatchBytes(seqStore_t* seqStore);
    private static void ZSTD_deriveSeqStoreChunk(seqStore_t* resultSeqStore, seqStore_t* originalSeqStore, UIntPtr startIdx, UIntPtr endIdx);
    private static UInt32 ZSTD_resolveRepcodeToRawOffset(UInt32* rep, UInt32 offBase, UInt32 ll0);
    private static void ZSTD_seqStore_resolveOffCodes(repcodes_s* dRepcodes, repcodes_s* cRepcodes, seqStore_t* seqStore, UInt32 nbSeq);
    private static UIntPtr ZSTD_compressSeqStore_singleBlock(ZSTD_CCtx_s* zc, seqStore_t* seqStore, repcodes_s* dRep, repcodes_s* cRep, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 lastBlock, UInt32 isPartition);
    private static void ZSTD_deriveBlockSplitsHelper(seqStoreSplits* splits, UIntPtr startIdx, UIntPtr endIdx, ZSTD_CCtx_s* zc, seqStore_t* origSeqStore);
    private static UIntPtr ZSTD_deriveBlockSplits(ZSTD_CCtx_s* zc, UInt32* partitions, UInt32 nbSeq);
    private static UIntPtr ZSTD_compressBlock_splitBlock_internal(ZSTD_CCtx_s* zc, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr blockSize, UInt32 lastBlock, UInt32 nbSeq);
    private static UIntPtr ZSTD_compressBlock_splitBlock(ZSTD_CCtx_s* zc, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 lastBlock);
    private static UIntPtr ZSTD_compressBlock_internal(ZSTD_CCtx_s* zc, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 frame);
    private static UIntPtr ZSTD_compressBlock_targetCBlockSize_body(ZSTD_CCtx_s* zc, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UIntPtr bss, UInt32 lastBlock);
    private static UIntPtr ZSTD_compressBlock_targetCBlockSize(ZSTD_CCtx_s* zc, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 lastBlock);
    private static void ZSTD_overflowCorrectIfNeeded(ZSTD_matchState_t* ms, ZSTD_cwksp* ws, ZSTD_CCtx_params_s* params, Void* ip, Void* iend);
    private static UIntPtr ZSTD_compress_frameChunk(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 lastFrameChunk);
    private static UIntPtr ZSTD_writeFrameHeader(Void* dst, UIntPtr dstCapacity, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize, UInt32 dictID);
    public static UIntPtr ZSTD_writeSkippableFrame(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 magicVariant);
    private static UIntPtr ZSTD_writeLastEmptyBlock(Void* dst, UIntPtr dstCapacity);
    private static void ZSTD_referenceExternalSequences(ZSTD_CCtx_s* cctx, rawSeq* seq, UIntPtr nbSeq);
    private static UIntPtr ZSTD_compressContinue_internal(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 frame, UInt32 lastFrameChunk);
    private static UIntPtr ZSTD_compressContinue_public(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_compressContinue(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_getBlockSize_deprecated(ZSTD_CCtx_s* cctx);
    public static UIntPtr ZSTD_getBlockSize(ZSTD_CCtx_s* cctx);
    private static UIntPtr ZSTD_compressBlock_deprecated(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_compressBlock(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_loadDictionaryContent(ZSTD_matchState_t* ms, ldmState_t* ls, ZSTD_cwksp* ws, ZSTD_CCtx_params_s* params, Void* src, UIntPtr srcSize, ZSTD_dictTableLoadMethod_e dtlm, ZSTD_tableFillPurpose_e tfp);
    private static FSE_repeat ZSTD_dictNCountRepeat(Int16* normalizedCounter, UInt32 dictMaxSymbolValue, UInt32 maxSymbolValue);
    private static UIntPtr ZSTD_loadCEntropy(ZSTD_compressedBlockState_t* bs, Void* workspace, Void* dict, UIntPtr dictSize);
    private static UIntPtr ZSTD_loadZstdDictionary(ZSTD_compressedBlockState_t* bs, ZSTD_matchState_t* ms, ZSTD_cwksp* ws, ZSTD_CCtx_params_s* params, Void* dict, UIntPtr dictSize, ZSTD_dictTableLoadMethod_e dtlm, ZSTD_tableFillPurpose_e tfp, Void* workspace);
    private static UIntPtr ZSTD_compress_insertDictionary(ZSTD_compressedBlockState_t* bs, ZSTD_matchState_t* ms, ldmState_t* ls, ZSTD_cwksp* ws, ZSTD_CCtx_params_s* params, Void* dict, UIntPtr dictSize, ZSTD_dictContentType_e dictContentType, ZSTD_dictTableLoadMethod_e dtlm, ZSTD_tableFillPurpose_e tfp, Void* workspace);
    private static UIntPtr ZSTD_compressBegin_internal(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize, ZSTD_dictContentType_e dictContentType, ZSTD_dictTableLoadMethod_e dtlm, ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize, ZSTD_buffered_policy_e zbuff);
    private static UIntPtr ZSTD_compressBegin_advanced_internal(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize, ZSTD_dictContentType_e dictContentType, ZSTD_dictTableLoadMethod_e dtlm, ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize);
    public static UIntPtr ZSTD_compressBegin_advanced(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize, ZSTD_parameters params, ulong pledgedSrcSize);
    private static UIntPtr ZSTD_compressBegin_usingDict_deprecated(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize, int compressionLevel);
    public static UIntPtr ZSTD_compressBegin_usingDict(ZSTD_CCtx_s* cctx, Void* dict, UIntPtr dictSize, int compressionLevel);
    public static UIntPtr ZSTD_compressBegin(ZSTD_CCtx_s* cctx, int compressionLevel);
    private static UIntPtr ZSTD_writeEpilogue(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity);
    private static void ZSTD_CCtx_trace(ZSTD_CCtx_s* cctx, UIntPtr extraCSize);
    private static UIntPtr ZSTD_compressEnd_public(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_compressEnd(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_compress_advanced(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, Void* dict, UIntPtr dictSize, ZSTD_parameters params);
    private static UIntPtr ZSTD_compress_advanced_internal(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, Void* dict, UIntPtr dictSize, ZSTD_CCtx_params_s* params);
    public static UIntPtr ZSTD_compress_usingDict(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, Void* dict, UIntPtr dictSize, int compressionLevel);
    public static UIntPtr ZSTD_compressCCtx(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, int compressionLevel);
    public static UIntPtr ZSTD_compress(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, int compressionLevel);
    public static UIntPtr ZSTD_estimateCDictSize_advanced(UIntPtr dictSize, ZSTD_compressionParameters cParams, ZSTD_dictLoadMethod_e dictLoadMethod);
    public static UIntPtr ZSTD_estimateCDictSize(UIntPtr dictSize, int compressionLevel);
    public static UIntPtr ZSTD_sizeof_CDict(ZSTD_CDict_s* cdict);
    private static UIntPtr ZSTD_initCDict_internal(ZSTD_CDict_s* cdict, Void* dictBuffer, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_CCtx_params_s params);
    private static ZSTD_CDict_s* ZSTD_createCDict_advanced_internal(UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_compressionParameters cParams, ZSTD_paramSwitch_e useRowMatchFinder, UInt32 enableDedicatedDictSearch, ZSTD_customMem customMem);
    public static ZSTD_CDict_s* ZSTD_createCDict_advanced(Void* dictBuffer, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_compressionParameters cParams, ZSTD_customMem customMem);
    public static ZSTD_CDict_s* ZSTD_createCDict_advanced2(Void* dict, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_CCtx_params_s* originalCctxParams, ZSTD_customMem customMem);
    public static ZSTD_CDict_s* ZSTD_createCDict(Void* dict, UIntPtr dictSize, int compressionLevel);
    public static ZSTD_CDict_s* ZSTD_createCDict_byReference(Void* dict, UIntPtr dictSize, int compressionLevel);
    public static UIntPtr ZSTD_freeCDict(ZSTD_CDict_s* cdict);
    public static ZSTD_CDict_s* ZSTD_initStaticCDict(Void* workspace, UIntPtr workspaceSize, Void* dict, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_compressionParameters cParams);
    private static ZSTD_compressionParameters ZSTD_getCParamsFromCDict(ZSTD_CDict_s* cdict);
    public static UInt32 ZSTD_getDictID_fromCDict(ZSTD_CDict_s* cdict);
    private static UIntPtr ZSTD_compressBegin_usingCDict_internal(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict, ZSTD_frameParameters fParams, ulong pledgedSrcSize);
    public static UIntPtr ZSTD_compressBegin_usingCDict_advanced(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict, ZSTD_frameParameters fParams, ulong pledgedSrcSize);
    private static UIntPtr ZSTD_compressBegin_usingCDict_deprecated(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict);
    public static UIntPtr ZSTD_compressBegin_usingCDict(ZSTD_CCtx_s* cctx, ZSTD_CDict_s* cdict);
    private static UIntPtr ZSTD_compress_usingCDict_internal(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, ZSTD_CDict_s* cdict, ZSTD_frameParameters fParams);
    public static UIntPtr ZSTD_compress_usingCDict_advanced(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, ZSTD_CDict_s* cdict, ZSTD_frameParameters fParams);
    public static UIntPtr ZSTD_compress_usingCDict(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, ZSTD_CDict_s* cdict);
    public static ZSTD_CCtx_s* ZSTD_createCStream();
    public static ZSTD_CCtx_s* ZSTD_initStaticCStream(Void* workspace, UIntPtr workspaceSize);
    public static ZSTD_CCtx_s* ZSTD_createCStream_advanced(ZSTD_customMem customMem);
    public static UIntPtr ZSTD_freeCStream(ZSTD_CCtx_s* zcs);
    public static UIntPtr ZSTD_CStreamInSize();
    public static UIntPtr ZSTD_CStreamOutSize();
    private static ZSTD_cParamMode_e ZSTD_getCParamMode(ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize);
    public static UIntPtr ZSTD_resetCStream(ZSTD_CCtx_s* zcs, ulong pss);
    private static UIntPtr ZSTD_initCStream_internal(ZSTD_CCtx_s* zcs, Void* dict, UIntPtr dictSize, ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s* params, ulong pledgedSrcSize);
    public static UIntPtr ZSTD_initCStream_usingCDict_advanced(ZSTD_CCtx_s* zcs, ZSTD_CDict_s* cdict, ZSTD_frameParameters fParams, ulong pledgedSrcSize);
    public static UIntPtr ZSTD_initCStream_usingCDict(ZSTD_CCtx_s* zcs, ZSTD_CDict_s* cdict);
    public static UIntPtr ZSTD_initCStream_advanced(ZSTD_CCtx_s* zcs, Void* dict, UIntPtr dictSize, ZSTD_parameters params, ulong pss);
    public static UIntPtr ZSTD_initCStream_usingDict(ZSTD_CCtx_s* zcs, Void* dict, UIntPtr dictSize, int compressionLevel);
    public static UIntPtr ZSTD_initCStream_srcSize(ZSTD_CCtx_s* zcs, int compressionLevel, ulong pss);
    public static UIntPtr ZSTD_initCStream(ZSTD_CCtx_s* zcs, int compressionLevel);
    private static UIntPtr ZSTD_nextInputSizeHint(ZSTD_CCtx_s* cctx);
    private static UIntPtr ZSTD_compressStream_generic(ZSTD_CCtx_s* zcs, ZSTD_outBuffer_s* output, ZSTD_inBuffer_s* input, ZSTD_EndDirective flushMode);
    private static UIntPtr ZSTD_nextInputSizeHint_MTorST(ZSTD_CCtx_s* cctx);
    public static UIntPtr ZSTD_compressStream(ZSTD_CCtx_s* zcs, ZSTD_outBuffer_s* output, ZSTD_inBuffer_s* input);
    private static void ZSTD_setBufferExpectations(ZSTD_CCtx_s* cctx, ZSTD_outBuffer_s* output, ZSTD_inBuffer_s* input);
    private static UIntPtr ZSTD_checkBufferStability(ZSTD_CCtx_s* cctx, ZSTD_outBuffer_s* output, ZSTD_inBuffer_s* input, ZSTD_EndDirective endOp);
    private static UIntPtr ZSTD_CCtx_init_compressStream2(ZSTD_CCtx_s* cctx, ZSTD_EndDirective endOp, UIntPtr inSize);
    public static UIntPtr ZSTD_compressStream2(ZSTD_CCtx_s* cctx, ZSTD_outBuffer_s* output, ZSTD_inBuffer_s* input, ZSTD_EndDirective endOp);
    public static UIntPtr ZSTD_compressStream2_simpleArgs(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, UIntPtr* dstPos, Void* src, UIntPtr srcSize, UIntPtr* srcPos, ZSTD_EndDirective endOp);
    public static UIntPtr ZSTD_compress2(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_validateSequence(UInt32 offCode, UInt32 matchLength, UInt32 minMatch, UIntPtr posInSrc, UInt32 windowLog, UIntPtr dictSize, int useSequenceProducer);
    private static UInt32 ZSTD_finalizeOffBase(UInt32 rawOffset, UInt32* rep, UInt32 ll0);
    private static UIntPtr ZSTD_copySequencesToSeqStoreExplicitBlockDelim(ZSTD_CCtx_s* cctx, ZSTD_sequencePosition* seqPos, ZSTD_Sequence* inSeqs, UIntPtr inSeqsSize, Void* src, UIntPtr blockSize, ZSTD_paramSwitch_e externalRepSearch);
    private static UIntPtr ZSTD_copySequencesToSeqStoreNoBlockDelim(ZSTD_CCtx_s* cctx, ZSTD_sequencePosition* seqPos, ZSTD_Sequence* inSeqs, UIntPtr inSeqsSize, Void* src, UIntPtr blockSize, ZSTD_paramSwitch_e externalRepSearch);
    private static Void* ZSTD_selectSequenceCopier(ZSTD_sequenceFormat_e mode);
    private static UIntPtr blockSize_explicitDelimiter(ZSTD_Sequence* inSeqs, UIntPtr inSeqsSize, ZSTD_sequencePosition seqPos);
    private static UIntPtr blockSize_noDelimiter(UIntPtr blockSize, UIntPtr remaining);
    private static UIntPtr determine_blockSize(ZSTD_sequenceFormat_e mode, UIntPtr blockSize, UIntPtr remaining, ZSTD_Sequence* inSeqs, UIntPtr inSeqsSize, ZSTD_sequencePosition seqPos);
    private static UIntPtr ZSTD_compressSequences_internal(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, ZSTD_Sequence* inSeqs, UIntPtr inSeqsSize, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_compressSequences(ZSTD_CCtx_s* cctx, Void* dst, UIntPtr dstCapacity, ZSTD_Sequence* inSeqs, UIntPtr inSeqsSize, Void* src, UIntPtr srcSize);
    private static ZSTD_inBuffer_s inBuffer_forEndFlush(ZSTD_CCtx_s* zcs);
    public static UIntPtr ZSTD_flushStream(ZSTD_CCtx_s* zcs, ZSTD_outBuffer_s* output);
    public static UIntPtr ZSTD_endStream(ZSTD_CCtx_s* zcs, ZSTD_outBuffer_s* output);
    public static int ZSTD_maxCLevel();
    public static int ZSTD_minCLevel();
    public static int ZSTD_defaultCLevel();
    private static ZSTD_compressionParameters ZSTD_dedicatedDictSearch_getCParams(int compressionLevel, UIntPtr dictSize);
    private static int ZSTD_dedicatedDictSearch_isSupported(ZSTD_compressionParameters* cParams);
    private static void ZSTD_dedicatedDictSearch_revertCParams(ZSTD_compressionParameters* cParams);
    private static ulong ZSTD_getCParamRowSize(ulong srcSizeHint, UIntPtr dictSize, ZSTD_cParamMode_e mode);
    private static ZSTD_compressionParameters ZSTD_getCParams_internal(int compressionLevel, ulong srcSizeHint, UIntPtr dictSize, ZSTD_cParamMode_e mode);
    public static ZSTD_compressionParameters ZSTD_getCParams(int compressionLevel, ulong srcSizeHint, UIntPtr dictSize);
    private static ZSTD_parameters ZSTD_getParams_internal(int compressionLevel, ulong srcSizeHint, UIntPtr dictSize, ZSTD_cParamMode_e mode);
    public static ZSTD_parameters ZSTD_getParams(int compressionLevel, ulong srcSizeHint, UIntPtr dictSize);
    public static void ZSTD_registerSequenceProducer(ZSTD_CCtx_s* zc, Void* extSeqProdState, Void* extSeqProdFunc);
    public static void ZSTD_CCtxParams_registerSequenceProducer(ZSTD_CCtx_params_s* params, Void* extSeqProdState, Void* extSeqProdFunc);
    private static UInt32 ZSTD_LLcode(UInt32 litLength);
    private static UInt32 ZSTD_MLcode(UInt32 mlBase);
    private static int ZSTD_cParam_withinBounds(ZSTD_cParameter cParam, int value);
    private static UIntPtr ZSTD_noCompressBlock(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 lastBlock);
    private static UIntPtr ZSTD_rleCompressBlock(Void* dst, UIntPtr dstCapacity, byte src, UIntPtr srcSize, UInt32 lastBlock);
    private static UIntPtr ZSTD_minGain(UIntPtr srcSize, ZSTD_strategy strat);
    private static int ZSTD_literalsCompressionIsDisabled(ZSTD_CCtx_params_s* cctxParams);
    private static void ZSTD_safecopyLiterals(Byte* op, Byte* ip, Byte* iend, Byte* ilimit_w);
    private static void ZSTD_updateRep(UInt32* rep, UInt32 offBase, UInt32 ll0);
    private static repcodes_s ZSTD_newRep(UInt32* rep, UInt32 offBase, UInt32 ll0);
    private static UIntPtr ZSTD_count(Byte* pIn, Byte* pMatch, Byte* pInLimit);
    private static UIntPtr ZSTD_count_2segments(Byte* ip, Byte* match, Byte* iEnd, Byte* mEnd, Byte* iStart);
    private static UIntPtr ZSTD_hash3PtrS(Void* ptr, UInt32 h, UInt32 s);
    private static UIntPtr ZSTD_hashPtr(Void* p, UInt32 hBits, UInt32 mls);
    private static UIntPtr ZSTD_hashPtrSalted(Void* p, UInt32 hBits, UInt32 mls, ulong hashSalt);
    private static ulong ZSTD_ipow(ulong base, ulong exponent);
    private static ulong ZSTD_rollingHash_append(ulong hash, Void* buf, UIntPtr size);
    private static ulong ZSTD_rollingHash_compute(Void* buf, UIntPtr size);
    private static ulong ZSTD_rollingHash_primePower(UInt32 length);
    private static ulong ZSTD_rollingHash_rotate(ulong hash, byte toRemove, byte toAdd, ulong primePower);
    private static void ZSTD_window_clear(ZSTD_window_t* window);
    private static UInt32 ZSTD_window_isEmpty(ZSTD_window_t window);
    private static UInt32 ZSTD_window_hasExtDict(ZSTD_window_t window);
    private static ZSTD_dictMode_e ZSTD_matchState_dictMode(ZSTD_matchState_t* ms);
    private static UInt32 ZSTD_window_canOverflowCorrect(ZSTD_window_t window, UInt32 cycleLog, UInt32 maxDist, UInt32 loadedDictEnd, Void* src);
    private static UInt32 ZSTD_window_needOverflowCorrection(ZSTD_window_t window, UInt32 cycleLog, UInt32 maxDist, UInt32 loadedDictEnd, Void* src, Void* srcEnd);
    private static UInt32 ZSTD_window_correctOverflow(ZSTD_window_t* window, UInt32 cycleLog, UInt32 maxDist, Void* src);
    private static void ZSTD_window_enforceMaxDist(ZSTD_window_t* window, Void* blockEnd, UInt32 maxDist, UInt32* loadedDictEndPtr, ZSTD_matchState_t** dictMatchStatePtr);
    private static void ZSTD_checkDictValidity(ZSTD_window_t* window, Void* blockEnd, UInt32 maxDist, UInt32* loadedDictEndPtr, ZSTD_matchState_t** dictMatchStatePtr);
    private static void ZSTD_window_init(ZSTD_window_t* window);
    private static UInt32 ZSTD_window_update(ZSTD_window_t* window, Void* src, UIntPtr srcSize, int forceNonContiguous);
    private static UInt32 ZSTD_getLowestMatchIndex(ZSTD_matchState_t* ms, UInt32 curr, UInt32 windowLog);
    private static UInt32 ZSTD_getLowestPrefixIndex(ZSTD_matchState_t* ms, UInt32 curr, UInt32 windowLog);
    private static void ZSTD_writeTaggedIndex(UInt32* hashTable, UIntPtr hashAndTag, UInt32 index);
    private static int ZSTD_comparePackedTags(UIntPtr packedTag1, UIntPtr packedTag2);
    private static int ZSTD_hasExtSeqProd(ZSTD_CCtx_params_s* params);
    private static UIntPtr ZSTD_noCompressLiterals(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static int allBytesIdentical(Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressRleLiteralsBlock(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_minLiteralsToCompress(ZSTD_strategy strategy, HUF_repeat huf_repeat);
    private static UIntPtr ZSTD_compressLiterals(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, Void* entropyWorkspace, UIntPtr entropyWorkspaceSize, ZSTD_hufCTables_t* prevHuf, ZSTD_hufCTables_t* nextHuf, ZSTD_strategy strategy, int disableLiteralCompression, int suspectUncompressible, int bmi2);
    private static UInt32 ZSTD_getFSEMaxSymbolValue(UInt32* ctable);
    private static UInt32 ZSTD_useLowProbCount(UIntPtr nbSeq);
    private static UIntPtr ZSTD_NCountCost(UInt32* count, UInt32 max, UIntPtr nbSeq, UInt32 FSELog);
    private static UIntPtr ZSTD_entropyCost(UInt32* count, UInt32 max, UIntPtr total);
    private static UIntPtr ZSTD_fseBitCost(UInt32* ctable, UInt32* count, UInt32 max);
    private static UIntPtr ZSTD_crossEntropyCost(Int16* norm, UInt32 accuracyLog, UInt32* count, UInt32 max);
    private static symbolEncodingType_e ZSTD_selectEncodingType(FSE_repeat* repeatMode, UInt32* count, UInt32 max, UIntPtr mostFrequent, UIntPtr nbSeq, UInt32 FSELog, UInt32* prevCTable, Int16* defaultNorm, UInt32 defaultNormLog, ZSTD_defaultPolicy_e isDefaultAllowed, ZSTD_strategy strategy);
    private static UIntPtr ZSTD_buildCTable(Void* dst, UIntPtr dstCapacity, UInt32* nextCTable, UInt32 FSELog, symbolEncodingType_e type, UInt32* count, UInt32 max, Byte* codeTable, UIntPtr nbSeq, Int16* defaultNorm, UInt32 defaultNormLog, UInt32 defaultMax, UInt32* prevCTable, UIntPtr prevCTableSize, Void* entropyWorkspace, UIntPtr entropyWorkspaceSize);
    private static UIntPtr ZSTD_encodeSequences_body(Void* dst, UIntPtr dstCapacity, UInt32* CTable_MatchLength, Byte* mlCodeTable, UInt32* CTable_OffsetBits, Byte* ofCodeTable, UInt32* CTable_LitLength, Byte* llCodeTable, seqDef_s* sequences, UIntPtr nbSeq, int longOffsets);
    private static UIntPtr ZSTD_encodeSequences_default(Void* dst, UIntPtr dstCapacity, UInt32* CTable_MatchLength, Byte* mlCodeTable, UInt32* CTable_OffsetBits, Byte* ofCodeTable, UInt32* CTable_LitLength, Byte* llCodeTable, seqDef_s* sequences, UIntPtr nbSeq, int longOffsets);
    private static UIntPtr ZSTD_encodeSequences(Void* dst, UIntPtr dstCapacity, UInt32* CTable_MatchLength, Byte* mlCodeTable, UInt32* CTable_OffsetBits, Byte* ofCodeTable, UInt32* CTable_LitLength, Byte* llCodeTable, seqDef_s* sequences, UIntPtr nbSeq, int longOffsets, int bmi2);
    private static UIntPtr ZSTD_compressSubBlock_literal(UIntPtr* hufTable, ZSTD_hufCTablesMetadata_t* hufMetadata, Byte* literals, UIntPtr litSize, Void* dst, UIntPtr dstSize, int bmi2, int writeEntropy, Int32* entropyWritten);
    private static UIntPtr ZSTD_seqDecompressedSize(seqStore_t* seqStore, seqDef_s* sequences, UIntPtr nbSeqs, UIntPtr litSize, int lastSubBlock);
    private static UIntPtr ZSTD_compressSubBlock_sequences(ZSTD_fseCTables_t* fseTables, ZSTD_fseCTablesMetadata_t* fseMetadata, seqDef_s* sequences, UIntPtr nbSeq, Byte* llCode, Byte* mlCode, Byte* ofCode, ZSTD_CCtx_params_s* cctxParams, Void* dst, UIntPtr dstCapacity, int bmi2, int writeEntropy, Int32* entropyWritten);
    private static UIntPtr ZSTD_compressSubBlock(ZSTD_entropyCTables_t* entropy, ZSTD_entropyCTablesMetadata_t* entropyMetadata, seqDef_s* sequences, UIntPtr nbSeq, Byte* literals, UIntPtr litSize, Byte* llCode, Byte* mlCode, Byte* ofCode, ZSTD_CCtx_params_s* cctxParams, Void* dst, UIntPtr dstCapacity, int bmi2, int writeLitEntropy, int writeSeqEntropy, Int32* litEntropyWritten, Int32* seqEntropyWritten, UInt32 lastBlock);
    private static UIntPtr ZSTD_estimateSubBlockSize_literal(Byte* literals, UIntPtr litSize, ZSTD_hufCTables_t* huf, ZSTD_hufCTablesMetadata_t* hufMetadata, Void* workspace, UIntPtr wkspSize, int writeEntropy);
    private static UIntPtr ZSTD_estimateSubBlockSize_symbolType(symbolEncodingType_e type, Byte* codeTable, UInt32 maxCode, UIntPtr nbSeq, UInt32* fseCTable, Byte* additionalBits, Int16* defaultNorm, UInt32 defaultNormLog, UInt32 defaultMax, Void* workspace, UIntPtr wkspSize);
    private static UIntPtr ZSTD_estimateSubBlockSize_sequences(Byte* ofCodeTable, Byte* llCodeTable, Byte* mlCodeTable, UIntPtr nbSeq, ZSTD_fseCTables_t* fseTables, ZSTD_fseCTablesMetadata_t* fseMetadata, Void* workspace, UIntPtr wkspSize, int writeEntropy);
    private static EstimatedBlockSize ZSTD_estimateSubBlockSize(Byte* literals, UIntPtr litSize, Byte* ofCodeTable, Byte* llCodeTable, Byte* mlCodeTable, UIntPtr nbSeq, ZSTD_entropyCTables_t* entropy, ZSTD_entropyCTablesMetadata_t* entropyMetadata, Void* workspace, UIntPtr wkspSize, int writeLitEntropy, int writeSeqEntropy);
    private static int ZSTD_needSequenceEntropyTables(ZSTD_fseCTablesMetadata_t* fseMetadata);
    private static UIntPtr countLiterals(seqStore_t* seqStore, seqDef_s* sp, UIntPtr seqCount);
    private static UIntPtr sizeBlockSequences(seqDef_s* sp, UIntPtr nbSeqs, UIntPtr targetBudget, UIntPtr avgLitCost, UIntPtr avgSeqCost, int firstSubBlock);
    private static UIntPtr ZSTD_compressSubBlock_multi(seqStore_t* seqStorePtr, ZSTD_compressedBlockState_t* prevCBlock, ZSTD_compressedBlockState_t* nextCBlock, ZSTD_entropyCTablesMetadata_t* entropyMetadata, ZSTD_CCtx_params_s* cctxParams, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, int bmi2, UInt32 lastBlock, Void* workspace, UIntPtr wkspSize);
    private static UIntPtr ZSTD_compressSuperBlock(ZSTD_CCtx_s* zc, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, UInt32 lastBlock);
    [ConditionalAttribute("DEBUG")]
private static void ZSTD_cwksp_assert_internal_consistency(ZSTD_cwksp* ws);
    private static UIntPtr ZSTD_cwksp_align(UIntPtr size, UIntPtr align);
    private static UIntPtr ZSTD_cwksp_alloc_size(UIntPtr size);
    private static UIntPtr ZSTD_cwksp_aligned_alloc_size(UIntPtr size);
    private static UIntPtr ZSTD_cwksp_slack_space_required();
    private static UIntPtr ZSTD_cwksp_bytes_to_align_ptr(Void* ptr, UIntPtr alignBytes);
    private static Void* ZSTD_cwksp_initialAllocStart(ZSTD_cwksp* ws);
    private static Void* ZSTD_cwksp_reserve_internal_buffer_space(ZSTD_cwksp* ws, UIntPtr bytes);
    private static UIntPtr ZSTD_cwksp_internal_advance_phase(ZSTD_cwksp* ws, ZSTD_cwksp_alloc_phase_e phase);
    private static int ZSTD_cwksp_owns_buffer(ZSTD_cwksp* ws, Void* ptr);
    private static Void* ZSTD_cwksp_reserve_internal(ZSTD_cwksp* ws, UIntPtr bytes, ZSTD_cwksp_alloc_phase_e phase);
    private static Byte* ZSTD_cwksp_reserve_buffer(ZSTD_cwksp* ws, UIntPtr bytes);
    private static Void* ZSTD_cwksp_reserve_aligned_init_once(ZSTD_cwksp* ws, UIntPtr bytes);
    private static Void* ZSTD_cwksp_reserve_aligned(ZSTD_cwksp* ws, UIntPtr bytes);
    private static Void* ZSTD_cwksp_reserve_table(ZSTD_cwksp* ws, UIntPtr bytes);
    private static Void* ZSTD_cwksp_reserve_object(ZSTD_cwksp* ws, UIntPtr bytes);
    private static void ZSTD_cwksp_mark_tables_dirty(ZSTD_cwksp* ws);
    private static void ZSTD_cwksp_mark_tables_clean(ZSTD_cwksp* ws);
    private static void ZSTD_cwksp_clean_tables(ZSTD_cwksp* ws);
    private static void ZSTD_cwksp_clear_tables(ZSTD_cwksp* ws);
    private static void ZSTD_cwksp_clear(ZSTD_cwksp* ws);
    private static UIntPtr ZSTD_cwksp_sizeof(ZSTD_cwksp* ws);
    private static UIntPtr ZSTD_cwksp_used(ZSTD_cwksp* ws);
    private static void ZSTD_cwksp_init(ZSTD_cwksp* ws, Void* start, UIntPtr size, ZSTD_cwksp_static_alloc_e isStatic);
    private static UIntPtr ZSTD_cwksp_create(ZSTD_cwksp* ws, UIntPtr size, ZSTD_customMem customMem);
    private static void ZSTD_cwksp_free(ZSTD_cwksp* ws, ZSTD_customMem customMem);
    private static void ZSTD_cwksp_move(ZSTD_cwksp* dst, ZSTD_cwksp* src);
    private static int ZSTD_cwksp_reserve_failed(ZSTD_cwksp* ws);
    private static int ZSTD_cwksp_estimated_space_within_bounds(ZSTD_cwksp* ws, UIntPtr estimatedSpace);
    private static UIntPtr ZSTD_cwksp_available_space(ZSTD_cwksp* ws);
    private static int ZSTD_cwksp_check_available(ZSTD_cwksp* ws, UIntPtr additionalNeededSpace);
    private static int ZSTD_cwksp_check_too_large(ZSTD_cwksp* ws, UIntPtr additionalNeededSpace);
    private static int ZSTD_cwksp_check_wasteful(ZSTD_cwksp* ws, UIntPtr additionalNeededSpace);
    private static void ZSTD_cwksp_bump_oversized_duration(ZSTD_cwksp* ws, UIntPtr additionalNeededSpace);
    private static Void* ZSTD_DDict_dictContent(ZSTD_DDict_s* ddict);
    private static UIntPtr ZSTD_DDict_dictSize(ZSTD_DDict_s* ddict);
    private static void ZSTD_copyDDictParameters(ZSTD_DCtx_s* dctx, ZSTD_DDict_s* ddict);
    private static UIntPtr ZSTD_loadEntropy_intoDDict(ZSTD_DDict_s* ddict, ZSTD_dictContentType_e dictContentType);
    private static UIntPtr ZSTD_initDDict_internal(ZSTD_DDict_s* ddict, Void* dict, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType);
    public static ZSTD_DDict_s* ZSTD_createDDict_advanced(Void* dict, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_customMem customMem);
    public static ZSTD_DDict_s* ZSTD_createDDict(Void* dict, UIntPtr dictSize);
    public static ZSTD_DDict_s* ZSTD_createDDict_byReference(Void* dictBuffer, UIntPtr dictSize);
    public static ZSTD_DDict_s* ZSTD_initStaticDDict(Void* sBuffer, UIntPtr sBufferSize, Void* dict, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType);
    public static UIntPtr ZSTD_freeDDict(ZSTD_DDict_s* ddict);
    public static UIntPtr ZSTD_estimateDDictSize(UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod);
    public static UIntPtr ZSTD_sizeof_DDict(ZSTD_DDict_s* ddict);
    public static UInt32 ZSTD_getDictID_fromDDict(ZSTD_DDict_s* ddict);
    private static UIntPtr ZSTD_DDictHashSet_getIndex(ZSTD_DDictHashSet* hashSet, UInt32 dictID);
    private static UIntPtr ZSTD_DDictHashSet_emplaceDDict(ZSTD_DDictHashSet* hashSet, ZSTD_DDict_s* ddict);
    private static UIntPtr ZSTD_DDictHashSet_expand(ZSTD_DDictHashSet* hashSet, ZSTD_customMem customMem);
    private static ZSTD_DDict_s* ZSTD_DDictHashSet_getDDict(ZSTD_DDictHashSet* hashSet, UInt32 dictID);
    private static ZSTD_DDictHashSet* ZSTD_createDDictHashSet(ZSTD_customMem customMem);
    private static void ZSTD_freeDDictHashSet(ZSTD_DDictHashSet* hashSet, ZSTD_customMem customMem);
    private static UIntPtr ZSTD_DDictHashSet_addDDict(ZSTD_DDictHashSet* hashSet, ZSTD_DDict_s* ddict, ZSTD_customMem customMem);
    public static UIntPtr ZSTD_sizeof_DCtx(ZSTD_DCtx_s* dctx);
    public static UIntPtr ZSTD_estimateDCtxSize();
    private static UIntPtr ZSTD_startingInputLength(ZSTD_format_e format);
    private static void ZSTD_DCtx_resetParameters(ZSTD_DCtx_s* dctx);
    private static void ZSTD_initDCtx_internal(ZSTD_DCtx_s* dctx);
    public static ZSTD_DCtx_s* ZSTD_initStaticDCtx(Void* workspace, UIntPtr workspaceSize);
    private static ZSTD_DCtx_s* ZSTD_createDCtx_internal(ZSTD_customMem customMem);
    public static ZSTD_DCtx_s* ZSTD_createDCtx_advanced(ZSTD_customMem customMem);
    public static ZSTD_DCtx_s* ZSTD_createDCtx();
    private static void ZSTD_clearDict(ZSTD_DCtx_s* dctx);
    public static UIntPtr ZSTD_freeDCtx(ZSTD_DCtx_s* dctx);
    public static void ZSTD_copyDCtx(ZSTD_DCtx_s* dstDCtx, ZSTD_DCtx_s* srcDCtx);
    private static void ZSTD_DCtx_selectFrameDDict(ZSTD_DCtx_s* dctx);
    public static UInt32 ZSTD_isFrame(Void* buffer, UIntPtr size);
    public static UInt32 ZSTD_isSkippableFrame(Void* buffer, UIntPtr size);
    private static UIntPtr ZSTD_frameHeaderSize_internal(Void* src, UIntPtr srcSize, ZSTD_format_e format);
    public static UIntPtr ZSTD_frameHeaderSize(Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_getFrameHeader_advanced(ZSTD_frameHeader* zfhPtr, Void* src, UIntPtr srcSize, ZSTD_format_e format);
    public static UIntPtr ZSTD_getFrameHeader(ZSTD_frameHeader* zfhPtr, Void* src, UIntPtr srcSize);
    public static ulong ZSTD_getFrameContentSize(Void* src, UIntPtr srcSize);
    private static UIntPtr readSkippableFrameSize(Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_readSkippableFrame(Void* dst, UIntPtr dstCapacity, UInt32* magicVariant, Void* src, UIntPtr srcSize);
    public static ulong ZSTD_findDecompressedSize(Void* src, UIntPtr srcSize);
    public static ulong ZSTD_getDecompressedSize(Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_decodeFrameHeader(ZSTD_DCtx_s* dctx, Void* src, UIntPtr headerSize);
    private static ZSTD_frameSizeInfo ZSTD_errorFrameSizeInfo(UIntPtr ret);
    private static ZSTD_frameSizeInfo ZSTD_findFrameSizeInfo(Void* src, UIntPtr srcSize, ZSTD_format_e format);
    private static UIntPtr ZSTD_findFrameCompressedSize_advanced(Void* src, UIntPtr srcSize, ZSTD_format_e format);
    public static UIntPtr ZSTD_findFrameCompressedSize(Void* src, UIntPtr srcSize);
    public static ulong ZSTD_decompressBound(Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_decompressionMargin(Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_insertBlock(ZSTD_DCtx_s* dctx, Void* blockStart, UIntPtr blockSize);
    private static UIntPtr ZSTD_copyRawBlock(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_setRleBlock(Void* dst, UIntPtr dstCapacity, byte b, UIntPtr regenSize);
    private static void ZSTD_DCtx_trace_end(ZSTD_DCtx_s* dctx, ulong uncompressedSize, ulong compressedSize, UInt32 streaming);
    private static UIntPtr ZSTD_decompressFrame(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void** srcPtr, UIntPtr* srcSizePtr);
    private static UIntPtr ZSTD_decompressMultiFrame(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, Void* dict, UIntPtr dictSize, ZSTD_DDict_s* ddict);
    public static UIntPtr ZSTD_decompress_usingDict(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, Void* dict, UIntPtr dictSize);
    private static ZSTD_DDict_s* ZSTD_getDDict(ZSTD_DCtx_s* dctx);
    public static UIntPtr ZSTD_decompressDCtx(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_decompress(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx_s* dctx);
    private static UIntPtr ZSTD_nextSrcSizeToDecompressWithInputSize(ZSTD_DCtx_s* dctx, UIntPtr inputSize);
    public static ZSTD_nextInputType_e ZSTD_nextInputType(ZSTD_DCtx_s* dctx);
    private static int ZSTD_isSkipFrame(ZSTD_DCtx_s* dctx);
    public static UIntPtr ZSTD_decompressContinue(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_refDictContent(ZSTD_DCtx_s* dctx, Void* dict, UIntPtr dictSize);
    private static UIntPtr ZSTD_loadDEntropy(ZSTD_entropyDTables_t* entropy, Void* dict, UIntPtr dictSize);
    private static UIntPtr ZSTD_decompress_insertDictionary(ZSTD_DCtx_s* dctx, Void* dict, UIntPtr dictSize);
    public static UIntPtr ZSTD_decompressBegin(ZSTD_DCtx_s* dctx);
    public static UIntPtr ZSTD_decompressBegin_usingDict(ZSTD_DCtx_s* dctx, Void* dict, UIntPtr dictSize);
    public static UIntPtr ZSTD_decompressBegin_usingDDict(ZSTD_DCtx_s* dctx, ZSTD_DDict_s* ddict);
    public static UInt32 ZSTD_getDictID_fromDict(Void* dict, UIntPtr dictSize);
    public static UInt32 ZSTD_getDictID_fromFrame(Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_decompress_usingDDict(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, ZSTD_DDict_s* ddict);
    public static ZSTD_DCtx_s* ZSTD_createDStream();
    public static ZSTD_DCtx_s* ZSTD_initStaticDStream(Void* workspace, UIntPtr workspaceSize);
    public static ZSTD_DCtx_s* ZSTD_createDStream_advanced(ZSTD_customMem customMem);
    public static UIntPtr ZSTD_freeDStream(ZSTD_DCtx_s* zds);
    public static UIntPtr ZSTD_DStreamInSize();
    public static UIntPtr ZSTD_DStreamOutSize();
    public static UIntPtr ZSTD_DCtx_loadDictionary_advanced(ZSTD_DCtx_s* dctx, Void* dict, UIntPtr dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType);
    public static UIntPtr ZSTD_DCtx_loadDictionary_byReference(ZSTD_DCtx_s* dctx, Void* dict, UIntPtr dictSize);
    public static UIntPtr ZSTD_DCtx_loadDictionary(ZSTD_DCtx_s* dctx, Void* dict, UIntPtr dictSize);
    public static UIntPtr ZSTD_DCtx_refPrefix_advanced(ZSTD_DCtx_s* dctx, Void* prefix, UIntPtr prefixSize, ZSTD_dictContentType_e dictContentType);
    public static UIntPtr ZSTD_DCtx_refPrefix(ZSTD_DCtx_s* dctx, Void* prefix, UIntPtr prefixSize);
    public static UIntPtr ZSTD_initDStream_usingDict(ZSTD_DCtx_s* zds, Void* dict, UIntPtr dictSize);
    public static UIntPtr ZSTD_initDStream(ZSTD_DCtx_s* zds);
    public static UIntPtr ZSTD_initDStream_usingDDict(ZSTD_DCtx_s* dctx, ZSTD_DDict_s* ddict);
    public static UIntPtr ZSTD_resetDStream(ZSTD_DCtx_s* dctx);
    public static UIntPtr ZSTD_DCtx_refDDict(ZSTD_DCtx_s* dctx, ZSTD_DDict_s* ddict);
    public static UIntPtr ZSTD_DCtx_setMaxWindowSize(ZSTD_DCtx_s* dctx, UIntPtr maxWindowSize);
    public static UIntPtr ZSTD_DCtx_setFormat(ZSTD_DCtx_s* dctx, ZSTD_format_e format);
    public static ZSTD_bounds ZSTD_dParam_getBounds(ZSTD_dParameter dParam);
    private static int ZSTD_dParam_withinBounds(ZSTD_dParameter dParam, int value);
    public static UIntPtr ZSTD_DCtx_getParameter(ZSTD_DCtx_s* dctx, ZSTD_dParameter param, Int32* value);
    public static UIntPtr ZSTD_DCtx_setParameter(ZSTD_DCtx_s* dctx, ZSTD_dParameter dParam, int value);
    public static UIntPtr ZSTD_DCtx_reset(ZSTD_DCtx_s* dctx, ZSTD_ResetDirective reset);
    public static UIntPtr ZSTD_sizeof_DStream(ZSTD_DCtx_s* dctx);
    private static UIntPtr ZSTD_decodingBufferSize_internal(ulong windowSize, ulong frameContentSize, UIntPtr blockSizeMax);
    public static UIntPtr ZSTD_decodingBufferSize_min(ulong windowSize, ulong frameContentSize);
    public static UIntPtr ZSTD_estimateDStreamSize(UIntPtr windowSize);
    public static UIntPtr ZSTD_estimateDStreamSize_fromFrame(Void* src, UIntPtr srcSize);
    private static int ZSTD_DCtx_isOverflow(ZSTD_DCtx_s* zds, UIntPtr neededInBuffSize, UIntPtr neededOutBuffSize);
    private static void ZSTD_DCtx_updateOversizedDuration(ZSTD_DCtx_s* zds, UIntPtr neededInBuffSize, UIntPtr neededOutBuffSize);
    private static int ZSTD_DCtx_isOversizedTooLong(ZSTD_DCtx_s* zds);
    private static UIntPtr ZSTD_checkOutBuffer(ZSTD_DCtx_s* zds, ZSTD_outBuffer_s* output);
    private static UIntPtr ZSTD_decompressContinueStream(ZSTD_DCtx_s* zds, SByte** op, SByte* oend, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_decompressStream(ZSTD_DCtx_s* zds, ZSTD_outBuffer_s* output, ZSTD_inBuffer_s* input);
    public static UIntPtr ZSTD_decompressStream_simpleArgs(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, UIntPtr* dstPos, Void* src, UIntPtr srcSize, UIntPtr* srcPos);
    private static void ZSTD_copy4(Void* dst, Void* src);
    private static UIntPtr ZSTD_blockSizeMax(ZSTD_DCtx_s* dctx);
    private static UIntPtr ZSTD_getcBlockSize(Void* src, UIntPtr srcSize, blockProperties_t* bpPtr);
    private static void ZSTD_allocateLiteralsBuffer(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, UIntPtr litSize, streaming_operation streaming, UIntPtr expectedWriteSize, UInt32 splitImmediately);
    private static UIntPtr ZSTD_decodeLiteralsBlock(ZSTD_DCtx_s* dctx, Void* src, UIntPtr srcSize, Void* dst, UIntPtr dstCapacity, streaming_operation streaming);
    private static UIntPtr ZSTD_decodeLiteralsBlock_wrapper(ZSTD_DCtx_s* dctx, Void* src, UIntPtr srcSize, Void* dst, UIntPtr dstCapacity);
    private static void ZSTD_buildSeqTable_rle(ZSTD_seqSymbol* dt, UInt32 baseValue, byte nbAddBits);
    private static void ZSTD_buildFSETable_body(ZSTD_seqSymbol* dt, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32* baseValue, Byte* nbAdditionalBits, UInt32 tableLog, Void* wksp, UIntPtr wkspSize);
    private static void ZSTD_buildFSETable_body_default(ZSTD_seqSymbol* dt, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32* baseValue, Byte* nbAdditionalBits, UInt32 tableLog, Void* wksp, UIntPtr wkspSize);
    private static void ZSTD_buildFSETable(ZSTD_seqSymbol* dt, Int16* normalizedCounter, UInt32 maxSymbolValue, UInt32* baseValue, Byte* nbAdditionalBits, UInt32 tableLog, Void* wksp, UIntPtr wkspSize, int bmi2);
    private static UIntPtr ZSTD_buildSeqTable(ZSTD_seqSymbol* DTableSpace, ZSTD_seqSymbol** DTablePtr, symbolEncodingType_e type, UInt32 max, UInt32 maxLog, Void* src, UIntPtr srcSize, UInt32* baseValue, Byte* nbAdditionalBits, ZSTD_seqSymbol* defaultTable, UInt32 flagRepeatTable, int ddictIsCold, int nbSeq, UInt32* wksp, UIntPtr wkspSize, int bmi2);
    private static UIntPtr ZSTD_decodeSeqHeaders(ZSTD_DCtx_s* dctx, Int32* nbSeqPtr, Void* src, UIntPtr srcSize);
    private static void ZSTD_overlapCopy8(Byte** op, Byte** ip, UIntPtr offset);
    private static void ZSTD_safecopy(Byte* op, Byte* oend_w, Byte* ip, IntPtr length, ZSTD_overlap_e ovtype);
    private static void ZSTD_safecopyDstBeforeSrc(Byte* op, Byte* ip, IntPtr length);
    private static UIntPtr ZSTD_execSequenceEnd(Byte* op, Byte* oend, seq_t sequence, Byte** litPtr, Byte* litLimit, Byte* prefixStart, Byte* virtualStart, Byte* dictEnd);
    private static UIntPtr ZSTD_execSequenceEndSplitLitBuffer(Byte* op, Byte* oend, Byte* oend_w, seq_t sequence, Byte** litPtr, Byte* litLimit, Byte* prefixStart, Byte* virtualStart, Byte* dictEnd);
    private static UIntPtr ZSTD_execSequence(Byte* op, Byte* oend, seq_t sequence, Byte** litPtr, Byte* litLimit, Byte* prefixStart, Byte* virtualStart, Byte* dictEnd);
    private static UIntPtr ZSTD_execSequenceSplitLitBuffer(Byte* op, Byte* oend, Byte* oend_w, seq_t sequence, Byte** litPtr, Byte* litLimit, Byte* prefixStart, Byte* virtualStart, Byte* dictEnd);
    private static void ZSTD_initFseState(ZSTD_fseState* DStatePtr, BIT_DStream_t* bitD, ZSTD_seqSymbol* dt);
    private static void ZSTD_updateFseStateWithDInfo(ZSTD_fseState* DStatePtr, BIT_DStream_t* bitD, ushort nextState, UInt32 nbBits);
    private static UIntPtr ZSTD_decompressSequences_bodySplitLitBuffer(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_decompressSequences_default(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_decompressSequencesSplitLitBuffer_default(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_prefetchMatch(UIntPtr prefetchPos, seq_t sequence, Byte* prefixStart, Byte* dictEnd);
    private static UIntPtr ZSTD_decompressSequencesLong_body(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_decompressSequencesLong_default(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_decompressSequences(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_decompressSequencesSplitLitBuffer(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_decompressSequencesLong(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static UIntPtr ZSTD_totalHistorySize(Byte* op, Byte* virtualStart);
    private static ZSTD_OffsetInfo ZSTD_getOffsetInfo(ZSTD_seqSymbol* offTable, int nbSeq);
    private static UIntPtr ZSTD_maxShortOffset();
    private static UIntPtr ZSTD_decompressBlock_internal(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize, streaming_operation streaming);
    private static void ZSTD_checkContinuity(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstSize);
    private static UIntPtr ZSTD_decompressBlock_deprecated(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    public static UIntPtr ZSTD_decompressBlock(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static void ZSTD_initFseState(ZSTD_fseState& DStatePtr, BIT_DStream_t& bitD, ZSTD_seqSymbol* dt);
    private static void ZSTD_updateFseStateWithDInfo(ZSTD_fseState& DStatePtr, BIT_DStream_t& bitD, ushort nextState, UInt32 nbBits);
    private static void ZSTD_overlapCopy8(Byte*& op, Byte*& ip, UIntPtr offset);
    private static UIntPtr ZSTD_decompressSequences_body(ZSTD_DCtx_s* dctx, Void* dst, UIntPtr maxDstSize, Void* seqStart, UIntPtr seqSize, int nbSeq, ZSTD_longOffset_e isLongOffset);
    private static int ZSTD_DCtx_get_bmi2(ZSTD_DCtx_s* dctx);
    private static void ZSTD_fillDoubleHashTableForCDict(ZSTD_matchState_t* ms, Void* end, ZSTD_dictTableLoadMethod_e dtlm);
    private static void ZSTD_fillDoubleHashTableForCCtx(ZSTD_matchState_t* ms, Void* end, ZSTD_dictTableLoadMethod_e dtlm);
    private static void ZSTD_fillDoubleHashTable(ZSTD_matchState_t* ms, Void* end, ZSTD_dictTableLoadMethod_e dtlm, ZSTD_tableFillPurpose_e tfp);
    private static UIntPtr ZSTD_compressBlock_doubleFast_noDict_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, UInt32 mls);
    private static UIntPtr ZSTD_compressBlock_doubleFast_dictMatchState_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, UInt32 mls);
    private static UIntPtr ZSTD_compressBlock_doubleFast_noDict_4(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_noDict_5(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_noDict_6(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_noDict_7(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_dictMatchState_4(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_dictMatchState_5(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_dictMatchState_6(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_dictMatchState_7(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_extDict_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, UInt32 mls);
    private static UIntPtr ZSTD_compressBlock_doubleFast_extDict_4(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_extDict_5(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_extDict_6(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_extDict_7(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_doubleFast_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static void ZSTD_fillHashTableForCDict(ZSTD_matchState_t* ms, Void* end, ZSTD_dictTableLoadMethod_e dtlm);
    private static void ZSTD_fillHashTableForCCtx(ZSTD_matchState_t* ms, Void* end, ZSTD_dictTableLoadMethod_e dtlm);
    private static void ZSTD_fillHashTable(ZSTD_matchState_t* ms, Void* end, ZSTD_dictTableLoadMethod_e dtlm, ZSTD_tableFillPurpose_e tfp);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_4_1(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_5_1(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_6_1(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_7_1(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_4_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_5_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_6_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_noDict_7_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_dictMatchState_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, UInt32 mls, UInt32 hasStep);
    private static UIntPtr ZSTD_compressBlock_fast_dictMatchState_4_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_dictMatchState_5_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_dictMatchState_6_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_dictMatchState_7_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_extDict_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, UInt32 mls, UInt32 hasStep);
    private static UIntPtr ZSTD_compressBlock_fast_extDict_4_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_extDict_5_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_extDict_6_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_extDict_7_0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_fast_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static void ZSTD_copy8(Void* dst, Void* src);
    private static void ZSTD_wildcopy(Void* dst, Void* src, IntPtr length, ZSTD_overlap_e ovtype);
    private static UIntPtr ZSTD_limitCopy(Void* dst, UIntPtr dstCapacity, Void* src, UIntPtr srcSize);
    private static ZSTD_sequenceLength ZSTD_getSequenceLength(seqStore_t* seqStore, seqDef_s* seq);
    private static void ZSTD_updateDUBT(ZSTD_matchState_t* ms, Byte* ip, Byte* iend, UInt32 mls);
    private static void ZSTD_insertDUBT1(ZSTD_matchState_t* ms, UInt32 curr, Byte* inputEnd, UInt32 nbCompares, UInt32 btLow, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_DUBT_findBetterDictMatch(ZSTD_matchState_t* ms, Byte* ip, Byte* iend, UIntPtr* offsetPtr, UIntPtr bestLength, UInt32 nbCompares, UInt32 mls, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_DUBT_findBestMatch(ZSTD_matchState_t* ms, Byte* ip, Byte* iend, UIntPtr* offBasePtr, UInt32 mls, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_BtFindBestMatch(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr, UInt32 mls, ZSTD_dictMode_e dictMode);
    private static void ZSTD_dedicatedDictSearch_lazy_loadDictionary(ZSTD_matchState_t* ms, Byte* ip);
    private static UIntPtr ZSTD_dedicatedDictSearch_lazy_search(UIntPtr* offsetPtr, UIntPtr ml, UInt32 nbAttempts, ZSTD_matchState_t* dms, Byte* ip, Byte* iLimit, Byte* prefixStart, UInt32 curr, UInt32 dictLimit, UIntPtr ddsIdx);
    private static UInt32 ZSTD_insertAndFindFirstIndex_internal(ZSTD_matchState_t* ms, ZSTD_compressionParameters* cParams, Byte* ip, UInt32 mls, UInt32 lazySkipping);
    private static UInt32 ZSTD_insertAndFindFirstIndex(ZSTD_matchState_t* ms, Byte* ip);
    private static UIntPtr ZSTD_HcFindBestMatch(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr, UInt32 mls, ZSTD_dictMode_e dictMode);
    private static UInt32 ZSTD_row_nextIndex(Byte* tagRow, UInt32 rowMask);
    private static int ZSTD_isAligned(Void* ptr, UIntPtr align);
    private static void ZSTD_row_prefetch(UInt32* hashTable, Byte* tagTable, UInt32 relRow, UInt32 rowLog);
    private static void ZSTD_row_fillHashCache(ZSTD_matchState_t* ms, Byte* base, UInt32 rowLog, UInt32 mls, UInt32 idx, Byte* iLimit);
    private static UInt32 ZSTD_row_nextCachedHash(UInt32* cache, UInt32* hashTable, Byte* tagTable, Byte* base, UInt32 idx, UInt32 hashLog, UInt32 rowLog, UInt32 mls, ulong hashSalt);
    private static void ZSTD_row_update_internalImpl(ZSTD_matchState_t* ms, UInt32 updateStartIdx, UInt32 updateEndIdx, UInt32 mls, UInt32 rowLog, UInt32 rowMask, UInt32 useCache);
    private static void ZSTD_row_update_internal(ZSTD_matchState_t* ms, Byte* ip, UInt32 mls, UInt32 rowLog, UInt32 rowMask, UInt32 useCache);
    private static void ZSTD_row_update(ZSTD_matchState_t* ms, Byte* ip);
    private static UInt32 ZSTD_row_matchMaskGroupWidth(UInt32 rowEntries);
    private static ulong ZSTD_row_getSSEMask(int nbChunks, Byte* src, byte tag, UInt32 head);
    private static ulong ZSTD_row_getMatchMask(Byte* tagRow, byte tag, UInt32 headGrouped, UInt32 rowEntries);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_4_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_4_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_4_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_5_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_5_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_5_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_6_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_6_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_noDict_6_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_4_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_4_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_4_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_5_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_5_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_5_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_6_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_6_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_extDict_6_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_4_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_4_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_4_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_5_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_5_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_5_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_6_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_6_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dictMatchState_6_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_4_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_4_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_4_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_5_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_5_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_5_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_6_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_6_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_RowFindBestMatch_dedicatedDictSearch_6_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_BtFindBestMatch_noDict_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_noDict_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_noDict_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_extDict_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_extDict_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_extDict_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_dictMatchState_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_dictMatchState_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_dictMatchState_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_dedicatedDictSearch_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_dedicatedDictSearch_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_BtFindBestMatch_dedicatedDictSearch_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offBasePtr);
    private static UIntPtr ZSTD_HcFindBestMatch_noDict_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_noDict_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_noDict_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_extDict_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_extDict_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_extDict_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_dictMatchState_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_dictMatchState_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_dictMatchState_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_dedicatedDictSearch_4(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_dedicatedDictSearch_5(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_HcFindBestMatch_dedicatedDictSearch_6(ZSTD_matchState_t* ms, Byte* ip, Byte* iLimit, UIntPtr* offsetPtr);
    private static UIntPtr ZSTD_searchMax(ZSTD_matchState_t* ms, Byte* ip, Byte* iend, UIntPtr* offsetPtr, UInt32 mls, UInt32 rowLog, searchMethod_e searchMethod, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_compressBlock_lazy_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, searchMethod_e searchMethod, UInt32 depth, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_compressBlock_greedy(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_greedy_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_greedy_dedicatedDictSearch(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_greedy_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_greedy_dictMatchState_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_greedy_dedicatedDictSearch_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_dedicatedDictSearch(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_dictMatchState_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_dedicatedDictSearch_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2_dedicatedDictSearch(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2_dictMatchState_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2_dedicatedDictSearch_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btlazy2(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btlazy2_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_extDict_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, searchMethod_e searchMethod, UInt32 depth);
    private static UIntPtr ZSTD_compressBlock_greedy_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_greedy_extDict_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy_extDict_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_lazy2_extDict_row(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btlazy2_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static void ZSTD_ldm_gear_init(ldmRollingHashState_t* state, ldmParams_t* params);
    private static void ZSTD_ldm_gear_reset(ldmRollingHashState_t* state, Byte* data, UIntPtr minMatchLength);
    private static UIntPtr ZSTD_ldm_gear_feed(ldmRollingHashState_t* state, Byte* data, UIntPtr size, UIntPtr* splits, UInt32* numSplits);
    private static void ZSTD_ldm_adjustParameters(ldmParams_t* params, ZSTD_compressionParameters* cParams);
    private static UIntPtr ZSTD_ldm_getTableSize(ldmParams_t params);
    private static UIntPtr ZSTD_ldm_getMaxNbSeq(ldmParams_t params, UIntPtr maxChunkSize);
    private static ldmEntry_t* ZSTD_ldm_getBucket(ldmState_t* ldmState, UIntPtr hash, ldmParams_t ldmParams);
    private static void ZSTD_ldm_insertEntry(ldmState_t* ldmState, UIntPtr hash, ldmEntry_t entry, ldmParams_t ldmParams);
    private static UIntPtr ZSTD_ldm_countBackwardsMatch(Byte* pIn, Byte* pAnchor, Byte* pMatch, Byte* pMatchBase);
    private static UIntPtr ZSTD_ldm_countBackwardsMatch_2segments(Byte* pIn, Byte* pAnchor, Byte* pMatch, Byte* pMatchBase, Byte* pExtDictStart, Byte* pExtDictEnd);
    private static UIntPtr ZSTD_ldm_fillFastTables(ZSTD_matchState_t* ms, Void* end);
    private static void ZSTD_ldm_fillHashTable(ldmState_t* ldmState, Byte* ip, Byte* iend, ldmParams_t* params);
    private static void ZSTD_ldm_limitTableUpdate(ZSTD_matchState_t* ms, Byte* anchor);
    private static UIntPtr ZSTD_ldm_generateSequences_internal(ldmState_t* ldmState, rawSeqStore_t* rawSeqStore, ldmParams_t* params, Void* src, UIntPtr srcSize);
    private static void ZSTD_ldm_reduceTable(ldmEntry_t* table, UInt32 size, UInt32 reducerValue);
    private static UIntPtr ZSTD_ldm_generateSequences(ldmState_t* ldmState, rawSeqStore_t* sequences, ldmParams_t* params, Void* src, UIntPtr srcSize);
    private static void ZSTD_ldm_skipSequences(rawSeqStore_t* rawSeqStore, UIntPtr srcSize, UInt32 minMatch);
    private static rawSeq maybeSplitSequence(rawSeqStore_t* rawSeqStore, UInt32 remaining, UInt32 minMatch);
    private static void ZSTD_ldm_skipRawSeqStoreBytes(rawSeqStore_t* rawSeqStore, UIntPtr nbBytes);
    private static UIntPtr ZSTD_ldm_blockCompress(rawSeqStore_t* rawSeqStore, ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, ZSTD_paramSwitch_e useRowMatchFinder, Void* src, UIntPtr srcSize);
    private static void ZSTDMT_freeBufferPool(ZSTDMT_bufferPool_s* bufPool);
    private static ZSTDMT_bufferPool_s* ZSTDMT_createBufferPool(UInt32 maxNbBuffers, ZSTD_customMem cMem);
    private static UIntPtr ZSTDMT_sizeof_bufferPool(ZSTDMT_bufferPool_s* bufPool);
    private static void ZSTDMT_setBufferSize(ZSTDMT_bufferPool_s* bufPool, UIntPtr bSize);
    private static ZSTDMT_bufferPool_s* ZSTDMT_expandBufferPool(ZSTDMT_bufferPool_s* srcBufPool, UInt32 maxNbBuffers);
    private static buffer_s ZSTDMT_getBuffer(ZSTDMT_bufferPool_s* bufPool);
    private static void ZSTDMT_releaseBuffer(ZSTDMT_bufferPool_s* bufPool, buffer_s buf);
    private static UIntPtr ZSTDMT_sizeof_seqPool(ZSTDMT_bufferPool_s* seqPool);
    private static rawSeqStore_t bufferToSeq(buffer_s buffer);
    private static buffer_s seqToBuffer(rawSeqStore_t seq);
    private static rawSeqStore_t ZSTDMT_getSeq(ZSTDMT_bufferPool_s* seqPool);
    private static void ZSTDMT_releaseSeq(ZSTDMT_bufferPool_s* seqPool, rawSeqStore_t seq);
    private static void ZSTDMT_setNbSeq(ZSTDMT_bufferPool_s* seqPool, UIntPtr nbSeq);
    private static ZSTDMT_bufferPool_s* ZSTDMT_createSeqPool(UInt32 nbWorkers, ZSTD_customMem cMem);
    private static void ZSTDMT_freeSeqPool(ZSTDMT_bufferPool_s* seqPool);
    private static ZSTDMT_bufferPool_s* ZSTDMT_expandSeqPool(ZSTDMT_bufferPool_s* pool, UInt32 nbWorkers);
    private static void ZSTDMT_freeCCtxPool(ZSTDMT_CCtxPool* pool);
    private static ZSTDMT_CCtxPool* ZSTDMT_createCCtxPool(int nbWorkers, ZSTD_customMem cMem);
    private static ZSTDMT_CCtxPool* ZSTDMT_expandCCtxPool(ZSTDMT_CCtxPool* srcPool, int nbWorkers);
    private static UIntPtr ZSTDMT_sizeof_CCtxPool(ZSTDMT_CCtxPool* cctxPool);
    private static ZSTD_CCtx_s* ZSTDMT_getCCtx(ZSTDMT_CCtxPool* cctxPool);
    private static void ZSTDMT_releaseCCtx(ZSTDMT_CCtxPool* pool, ZSTD_CCtx_s* cctx);
    private static int ZSTDMT_serialState_reset(serialState_t* serialState, ZSTDMT_bufferPool_s* seqPool, ZSTD_CCtx_params_s params, UIntPtr jobSize, Void* dict, UIntPtr dictSize, ZSTD_dictContentType_e dictContentType);
    private static int ZSTDMT_serialState_init(serialState_t* serialState);
    private static void ZSTDMT_serialState_free(serialState_t* serialState);
    private static void ZSTDMT_serialState_update(serialState_t* serialState, ZSTD_CCtx_s* jobCCtx, rawSeqStore_t seqStore, range_t src, UInt32 jobID);
    private static void ZSTDMT_serialState_ensureFinished(serialState_t* serialState, UInt32 jobID, UIntPtr cSize);
    private static void ZSTDMT_compressionJob(Void* jobDescription);
    private static void ZSTDMT_freeJobsTable(ZSTDMT_jobDescription* jobTable, UInt32 nbJobs, ZSTD_customMem cMem);
    private static ZSTDMT_jobDescription* ZSTDMT_createJobsTable(UInt32* nbJobsPtr, ZSTD_customMem cMem);
    private static UIntPtr ZSTDMT_expandJobsTable(ZSTDMT_CCtx_s* mtctx, UInt32 nbWorkers);
    private static UIntPtr ZSTDMT_CCtxParam_setNbWorkers(ZSTD_CCtx_params_s* params, UInt32 nbWorkers);
    private static ZSTDMT_CCtx_s* ZSTDMT_createCCtx_advanced_internal(UInt32 nbWorkers, ZSTD_customMem cMem, Void* pool);
    private static ZSTDMT_CCtx_s* ZSTDMT_createCCtx_advanced(UInt32 nbWorkers, ZSTD_customMem cMem, Void* pool);
    private static void ZSTDMT_releaseAllJobResources(ZSTDMT_CCtx_s* mtctx);
    private static void ZSTDMT_waitForAllJobsCompleted(ZSTDMT_CCtx_s* mtctx);
    private static UIntPtr ZSTDMT_freeCCtx(ZSTDMT_CCtx_s* mtctx);
    private static UIntPtr ZSTDMT_sizeof_CCtx(ZSTDMT_CCtx_s* mtctx);
    private static UIntPtr ZSTDMT_resize(ZSTDMT_CCtx_s* mtctx, UInt32 nbWorkers);
    private static void ZSTDMT_updateCParams_whileCompressing(ZSTDMT_CCtx_s* mtctx, ZSTD_CCtx_params_s* cctxParams);
    private static ZSTD_frameProgression ZSTDMT_getFrameProgression(ZSTDMT_CCtx_s* mtctx);
    private static UIntPtr ZSTDMT_toFlushNow(ZSTDMT_CCtx_s* mtctx);
    private static UInt32 ZSTDMT_computeTargetJobLog(ZSTD_CCtx_params_s* params);
    private static int ZSTDMT_overlapLog_default(ZSTD_strategy strat);
    private static int ZSTDMT_overlapLog(int ovlog, ZSTD_strategy strat);
    private static UIntPtr ZSTDMT_computeOverlapSize(ZSTD_CCtx_params_s* params);
    private static UIntPtr ZSTDMT_initCStream_internal(ZSTDMT_CCtx_s* mtctx, Void* dict, UIntPtr dictSize, ZSTD_dictContentType_e dictContentType, ZSTD_CDict_s* cdict, ZSTD_CCtx_params_s params, ulong pledgedSrcSize);
    private static void ZSTDMT_writeLastEmptyBlock(ZSTDMT_jobDescription* job);
    private static UIntPtr ZSTDMT_createCompressionJob(ZSTDMT_CCtx_s* mtctx, UIntPtr srcSize, ZSTD_EndDirective endOp);
    private static UIntPtr ZSTDMT_flushProduced(ZSTDMT_CCtx_s* mtctx, ZSTD_outBuffer_s* output, UInt32 blockToFlush, ZSTD_EndDirective end);
    private static range_t ZSTDMT_getInputDataInUse(ZSTDMT_CCtx_s* mtctx);
    private static int ZSTDMT_isOverlapped(buffer_s buffer, range_t range);
    private static int ZSTDMT_doesOverlapWindow(buffer_s buffer, ZSTD_window_t window);
    private static void ZSTDMT_waitForLdmComplete(ZSTDMT_CCtx_s* mtctx, buffer_s buffer);
    private static int ZSTDMT_tryGetInputRange(ZSTDMT_CCtx_s* mtctx);
    private static syncPoint_t findSynchronizationPoint(ZSTDMT_CCtx_s* mtctx, ZSTD_inBuffer_s input);
    private static UIntPtr ZSTDMT_nextInputSizeHint(ZSTDMT_CCtx_s* mtctx);
    private static UIntPtr ZSTDMT_compressStream_generic(ZSTDMT_CCtx_s* mtctx, ZSTD_outBuffer_s* output, ZSTD_inBuffer_s* input, ZSTD_EndDirective endOp);
    private static UInt32 ZSTD_bitWeight(UInt32 stat);
    private static UInt32 ZSTD_fracWeight(UInt32 rawStat);
    private static int ZSTD_compressedLiterals(optState_t* optPtr);
    private static void ZSTD_setBasePrices(optState_t* optPtr, int optLevel);
    private static UInt32 sum_u32(UInt32* table, UIntPtr nbElts);
    private static UInt32 ZSTD_downscaleStats(UInt32* table, UInt32 lastEltIndex, UInt32 shift, base_directive_e base1);
    private static UInt32 ZSTD_scaleStats(UInt32* table, UInt32 lastEltIndex, UInt32 logTarget);
    private static void ZSTD_rescaleFreqs(optState_t* optPtr, Byte* src, UIntPtr srcSize, int optLevel);
    private static UInt32 ZSTD_rawLiteralsCost(Byte* literals, UInt32 litLength, optState_t* optPtr, int optLevel);
    private static UInt32 ZSTD_litLengthPrice(UInt32 litLength, optState_t* optPtr, int optLevel);
    private static UInt32 ZSTD_getMatchPrice(UInt32 offBase, UInt32 matchLength, optState_t* optPtr, int optLevel);
    private static void ZSTD_updateStats(optState_t* optPtr, UInt32 litLength, Byte* literals, UInt32 offBase, UInt32 matchLength);
    private static UInt32 ZSTD_readMINMATCH(Void* memPtr, UInt32 length);
    private static UInt32 ZSTD_insertAndFindFirstIndexHash3(ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip);
    private static UInt32 ZSTD_insertBt1(ZSTD_matchState_t* ms, Byte* ip, Byte* iend, UInt32 target, UInt32 mls, int extDict);
    private static void ZSTD_updateTree_internal(ZSTD_matchState_t* ms, Byte* ip, Byte* iend, UInt32 mls, ZSTD_dictMode_e dictMode);
    private static void ZSTD_updateTree(ZSTD_matchState_t* ms, Byte* ip, Byte* iend);
    private static UInt32 ZSTD_insertBtAndGetAllMatches(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iLimit, ZSTD_dictMode_e dictMode, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat, UInt32 mls);
    private static UInt32 ZSTD_btGetAllMatches_internal(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat, ZSTD_dictMode_e dictMode, UInt32 mls);
    private static UInt32 ZSTD_btGetAllMatches_noDict_3(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_noDict_4(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_noDict_5(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_noDict_6(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_extDict_3(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_extDict_4(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_extDict_5(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_extDict_6(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_dictMatchState_3(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_dictMatchState_4(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_dictMatchState_5(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static UInt32 ZSTD_btGetAllMatches_dictMatchState_6(ZSTD_match_t* matches, ZSTD_matchState_t* ms, UInt32* nextToUpdate3, Byte* ip, Byte* iHighLimit, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    private static ZSTD_getAllMatchesFn ZSTD_selectBtGetAllMatches(ZSTD_matchState_t* ms, ZSTD_dictMode_e dictMode);
    private static void ZSTD_optLdm_skipRawSeqStoreBytes(rawSeqStore_t* rawSeqStore, UIntPtr nbBytes);
    private static void ZSTD_opt_getNextMatchAndUpdateSeqStore(ZSTD_optLdm_t* optLdm, UInt32 currPosInBlock, UInt32 blockBytesRemaining);
    private static void ZSTD_optLdm_maybeAddMatch(ZSTD_match_t* matches, UInt32* nbMatches, ZSTD_optLdm_t* optLdm, UInt32 currPosInBlock);
    private static void ZSTD_optLdm_processMatchCandidate(ZSTD_optLdm_t* optLdm, ZSTD_match_t* matches, UInt32* nbMatches, UInt32 currPosInBlock, UInt32 remainingBytes);
    private static UIntPtr ZSTD_compressBlock_opt_generic(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, int optLevel, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_compressBlock_opt0(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_compressBlock_opt2(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, ZSTD_dictMode_e dictMode);
    private static UIntPtr ZSTD_compressBlock_btopt(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static void ZSTD_initStats_ultra(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btultra(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btultra2(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btopt_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btopt_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btultra_dictMatchState(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    private static UIntPtr ZSTD_compressBlock_btultra_extDict(ZSTD_matchState_t* ms, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
}
public class ZstdSharp.Unsafe.nodeElt_s : ValueType {
    public UInt32 count;
    public ushort parent;
    public byte byte;
    public byte nbBits;
}
public class ZstdSharp.Unsafe.offsetCount_t : ValueType {
    public UInt32 offset;
    public UInt32 count;
}
public class ZstdSharp.Unsafe.optState_t : ValueType {
    public UInt32* litFreq;
    public UInt32* litLengthFreq;
    public UInt32* matchLengthFreq;
    public UInt32* offCodeFreq;
    public ZSTD_match_t* matchTable;
    public ZSTD_optimal_t* priceTable;
    public UInt32 litSum;
    public UInt32 litLengthSum;
    public UInt32 matchLengthSum;
    public UInt32 offCodeSum;
    public UInt32 litSumBasePrice;
    public UInt32 litLengthSumBasePrice;
    public UInt32 matchLengthSumBasePrice;
    public UInt32 offCodeSumBasePrice;
    public ZSTD_OptPrice_e priceType;
    public ZSTD_entropyCTables_t* symbolCosts;
    public ZSTD_paramSwitch_e literalCompressionMode;
}
public class ZstdSharp.Unsafe.range_t : ValueType {
    public Void* start;
    [NativeIntegerAttribute]
public UIntPtr size;
    public range_t(Void* start, UIntPtr size);
}
public class ZstdSharp.Unsafe.rankPos : ValueType {
    public ushort base;
    public ushort curr;
}
public class ZstdSharp.Unsafe.rankValCol_t : ValueType {
    [FixedBufferAttribute("System.UInt32", "13")]
public <Body>e__FixedBuffer Body;
}
public class ZstdSharp.Unsafe.rawSeq : ValueType {
    public UInt32 offset;
    public UInt32 litLength;
    public UInt32 matchLength;
}
public class ZstdSharp.Unsafe.rawSeqStore_t : ValueType {
    public rawSeq* seq;
    [NativeIntegerAttribute]
public UIntPtr pos;
    [NativeIntegerAttribute]
public UIntPtr posInSequence;
    [NativeIntegerAttribute]
public UIntPtr size;
    [NativeIntegerAttribute]
public UIntPtr capacity;
    public rawSeqStore_t(rawSeq* seq, UIntPtr pos, UIntPtr posInSequence, UIntPtr size, UIntPtr capacity);
}
public class ZstdSharp.Unsafe.repcodes_s : ValueType {
    [FixedBufferAttribute("System.UInt32", "3")]
public <rep>e__FixedBuffer rep;
}
public class ZstdSharp.Unsafe.roundBuff_t : ValueType {
    public Byte* buffer;
    [NativeIntegerAttribute]
public UIntPtr capacity;
    [NativeIntegerAttribute]
public UIntPtr pos;
    public roundBuff_t(Byte* buffer, UIntPtr capacity, UIntPtr pos);
}
public class ZstdSharp.Unsafe.rsyncState_t : ValueType {
    public ulong hash;
    public ulong hitMask;
    public ulong primePower;
}
public enum ZstdSharp.Unsafe.searchMethod_e : Enum {
    public int value__;
    public static searchMethod_e search_hashChain;
    public static searchMethod_e search_binaryTree;
    public static searchMethod_e search_rowHash;
}
public class ZstdSharp.Unsafe.seq_t : ValueType {
    [NativeIntegerAttribute]
public UIntPtr litLength;
    [NativeIntegerAttribute]
public UIntPtr matchLength;
    [NativeIntegerAttribute]
public UIntPtr offset;
}
public class ZstdSharp.Unsafe.SeqCollector : ValueType {
    public int collectSequences;
    public ZSTD_Sequence* seqStart;
    [NativeIntegerAttribute]
public UIntPtr seqIndex;
    [NativeIntegerAttribute]
public UIntPtr maxSequences;
}
public class ZstdSharp.Unsafe.seqDef_s : ValueType {
    public UInt32 offBase;
    public ushort litLength;
    public ushort mlBase;
}
public class ZstdSharp.Unsafe.seqState_t : ValueType {
    public BIT_DStream_t DStream;
    public ZSTD_fseState stateLL;
    public ZSTD_fseState stateOffb;
    public ZSTD_fseState stateML;
    public _prevOffset_e__FixedBuffer prevOffset;
}
public class ZstdSharp.Unsafe.seqStore_t : ValueType {
    public seqDef_s* sequencesStart;
    public seqDef_s* sequences;
    public Byte* litStart;
    public Byte* lit;
    public Byte* llCode;
    public Byte* mlCode;
    public Byte* ofCode;
    [NativeIntegerAttribute]
public UIntPtr maxNbSeq;
    [NativeIntegerAttribute]
public UIntPtr maxNbLit;
    public ZSTD_longLengthType_e longLengthType;
    public UInt32 longLengthPos;
}
public class ZstdSharp.Unsafe.seqStoreSplits : ValueType {
    public UInt32* splitLocations;
    [NativeIntegerAttribute]
public UIntPtr idx;
}
public class ZstdSharp.Unsafe.serialState_t : ValueType {
    public Void* mutex;
    public Void* cond;
    public ZSTD_CCtx_params_s params;
    public ldmState_t ldmState;
    public XXH64_state_s xxhState;
    public UInt32 nextJobID;
    public Void* ldmWindowMutex;
    public Void* ldmWindowCond;
    public ZSTD_window_t ldmWindow;
}
public class ZstdSharp.Unsafe.sortedSymbol_t : ValueType {
    public byte symbol;
}
public enum ZstdSharp.Unsafe.streaming_operation : Enum {
    public int value__;
    public static streaming_operation not_streaming;
    public static streaming_operation is_streaming;
}
public enum ZstdSharp.Unsafe.symbolEncodingType_e : Enum {
    public int value__;
    public static symbolEncodingType_e set_basic;
    public static symbolEncodingType_e set_rle;
    public static symbolEncodingType_e set_compressed;
    public static symbolEncodingType_e set_repeat;
}
public class ZstdSharp.Unsafe.syncPoint_t : ValueType {
    [NativeIntegerAttribute]
public UIntPtr toLoad;
    public int flush;
}
public enum ZstdSharp.Unsafe.XXH_alignment : Enum {
    public int value__;
    public static XXH_alignment XXH_aligned;
    public static XXH_alignment XXH_unaligned;
}
public enum ZstdSharp.Unsafe.XXH_errorcode : Enum {
    public int value__;
    public static XXH_errorcode XXH_OK;
    public static XXH_errorcode XXH_ERROR;
}
public class ZstdSharp.Unsafe.XXH32_canonical_t : ValueType {
    [FixedBufferAttribute("System.Byte", "4")]
public <digest>e__FixedBuffer digest;
}
public class ZstdSharp.Unsafe.XXH32_state_s : ValueType {
    public UInt32 total_len_32;
    public UInt32 large_len;
    [FixedBufferAttribute("System.UInt32", "4")]
public <v>e__FixedBuffer v;
    [FixedBufferAttribute("System.UInt32", "4")]
public <mem32>e__FixedBuffer mem32;
    public UInt32 memsize;
    public UInt32 reserved;
}
public class ZstdSharp.Unsafe.XXH64_canonical_t : ValueType {
    [FixedBufferAttribute("System.Byte", "8")]
public <digest>e__FixedBuffer digest;
}
public class ZstdSharp.Unsafe.XXH64_state_s : ValueType {
    public ulong total_len;
    [FixedBufferAttribute("System.UInt64", "4")]
public <v>e__FixedBuffer v;
    [FixedBufferAttribute("System.UInt64", "4")]
public <mem64>e__FixedBuffer mem64;
    public UInt32 memsize;
    public UInt32 reserved32;
    public ulong reserved64;
}
public class ZstdSharp.Unsafe.ZDICT_cover_params_t : ValueType {
    public UInt32 k;
    public UInt32 d;
    public UInt32 steps;
    public UInt32 nbThreads;
    public double splitPoint;
    public UInt32 shrinkDict;
    public UInt32 shrinkDictMaxRegression;
    public ZDICT_params_t zParams;
}
public class ZstdSharp.Unsafe.ZDICT_fastCover_params_t : ValueType {
    public UInt32 k;
    public UInt32 d;
    public UInt32 f;
    public UInt32 steps;
    public UInt32 nbThreads;
    public double splitPoint;
    public UInt32 accel;
    public UInt32 shrinkDict;
    public UInt32 shrinkDictMaxRegression;
    public ZDICT_params_t zParams;
}
public class ZstdSharp.Unsafe.ZDICT_legacy_params_t : ValueType {
    public UInt32 selectivityLevel;
    public ZDICT_params_t zParams;
}
public class ZstdSharp.Unsafe.ZDICT_params_t : ValueType {
    public int compressionLevel;
    public UInt32 notificationLevel;
    public UInt32 dictID;
}
[UnmanagedFunctionPointerAttribute("2")]
public class ZstdSharp.Unsafe.ZSTD_blockCompressor : MulticastDelegate {
    public ZSTD_blockCompressor(object object, IntPtr method);
    public virtual UIntPtr Invoke(ZSTD_matchState_t* bs, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize);
    public virtual IAsyncResult BeginInvoke(ZSTD_matchState_t* bs, seqStore_t* seqStore, UInt32* rep, Void* src, UIntPtr srcSize, AsyncCallback callback, object object);
    public virtual UIntPtr EndInvoke(IAsyncResult result);
}
public class ZstdSharp.Unsafe.ZSTD_blockSplitCtx : ValueType {
    public seqStore_t fullSeqStoreChunk;
    public seqStore_t firstHalfSeqStore;
    public seqStore_t secondHalfSeqStore;
    public seqStore_t currSeqStore;
    public seqStore_t nextSeqStore;
    [FixedBufferAttribute("System.UInt32", "196")]
public <partitions>e__FixedBuffer partitions;
    public ZSTD_entropyCTablesMetadata_t entropyMetadata;
}
public class ZstdSharp.Unsafe.ZSTD_blockState_t : ValueType {
    public ZSTD_compressedBlockState_t* prevCBlock;
    public ZSTD_compressedBlockState_t* nextCBlock;
    public ZSTD_matchState_t matchState;
}
public class ZstdSharp.Unsafe.ZSTD_bounds : ValueType {
    [NativeIntegerAttribute]
public UIntPtr error;
    public int lowerBound;
    public int upperBound;
}
public enum ZstdSharp.Unsafe.ZSTD_buffered_policy_e : Enum {
    public int value__;
    public static ZSTD_buffered_policy_e ZSTDb_not_buffered;
    public static ZSTD_buffered_policy_e ZSTDb_buffered;
}
public enum ZstdSharp.Unsafe.ZSTD_bufferMode_e : Enum {
    public int value__;
    public static ZSTD_bufferMode_e ZSTD_bm_buffered;
    public static ZSTD_bufferMode_e ZSTD_bm_stable;
}
public class ZstdSharp.Unsafe.ZSTD_BuildCTableWksp : ValueType {
    [FixedBufferAttribute("System.Int16", "53")]
public <norm>e__FixedBuffer norm;
    [FixedBufferAttribute("System.UInt32", "285")]
public <wksp>e__FixedBuffer wksp;
}
public enum ZstdSharp.Unsafe.ZSTD_buildSeqStore_e : Enum {
    public int value__;
    public static ZSTD_buildSeqStore_e ZSTDbss_compress;
    public static ZSTD_buildSeqStore_e ZSTDbss_noCompress;
}
public class ZstdSharp.Unsafe.ZSTD_CCtx_params_s : ValueType {
    public ZSTD_format_e format;
    public ZSTD_compressionParameters cParams;
    public ZSTD_frameParameters fParams;
    public int compressionLevel;
    public int forceWindow;
    [NativeIntegerAttribute]
public UIntPtr targetCBlockSize;
    public int srcSizeHint;
    public ZSTD_dictAttachPref_e attachDictPref;
    public ZSTD_paramSwitch_e literalCompressionMode;
    public int nbWorkers;
    [NativeIntegerAttribute]
public UIntPtr jobSize;
    public int overlapLog;
    public int rsyncable;
    public ldmParams_t ldmParams;
    public int enableDedicatedDictSearch;
    public ZSTD_bufferMode_e inBufferMode;
    public ZSTD_bufferMode_e outBufferMode;
    public ZSTD_sequenceFormat_e blockDelimiters;
    public int validateSequences;
    public ZSTD_paramSwitch_e useBlockSplitter;
    public ZSTD_paramSwitch_e useRowMatchFinder;
    public int deterministicRefPrefix;
    public ZSTD_customMem customMem;
    public ZSTD_paramSwitch_e prefetchCDictTables;
    public int enableMatchFinderFallback;
    public Void* extSeqProdState;
    public Void* extSeqProdFunc;
    [NativeIntegerAttribute]
public UIntPtr maxBlockSize;
    public ZSTD_paramSwitch_e searchForExternalRepcodes;
}
public class ZstdSharp.Unsafe.ZSTD_CCtx_s : ValueType {
    public ZSTD_compressionStage_e stage;
    public int cParamsChanged;
    public int bmi2;
    public ZSTD_CCtx_params_s requestedParams;
    public ZSTD_CCtx_params_s appliedParams;
    public ZSTD_CCtx_params_s simpleApiParams;
    public UInt32 dictID;
    [NativeIntegerAttribute]
public UIntPtr dictContentSize;
    public ZSTD_cwksp workspace;
    [NativeIntegerAttribute]
public UIntPtr blockSize;
    public ulong pledgedSrcSizePlusOne;
    public ulong consumedSrcSize;
    public ulong producedCSize;
    public XXH64_state_s xxhState;
    public ZSTD_customMem customMem;
    public Void* pool;
    [NativeIntegerAttribute]
public UIntPtr staticSize;
    public SeqCollector seqCollector;
    public int isFirstBlock;
    public int initialized;
    public seqStore_t seqStore;
    public ldmState_t ldmState;
    public rawSeq* ldmSequences;
    [NativeIntegerAttribute]
public UIntPtr maxNbLdmSequences;
    public rawSeqStore_t externSeqStore;
    public ZSTD_blockState_t blockState;
    public UInt32* entropyWorkspace;
    public ZSTD_buffered_policy_e bufferedPolicy;
    public SByte* inBuff;
    [NativeIntegerAttribute]
public UIntPtr inBuffSize;
    [NativeIntegerAttribute]
public UIntPtr inToCompress;
    [NativeIntegerAttribute]
public UIntPtr inBuffPos;
    [NativeIntegerAttribute]
public UIntPtr inBuffTarget;
    public SByte* outBuff;
    [NativeIntegerAttribute]
public UIntPtr outBuffSize;
    [NativeIntegerAttribute]
public UIntPtr outBuffContentSize;
    [NativeIntegerAttribute]
public UIntPtr outBuffFlushedSize;
    public ZSTD_cStreamStage streamStage;
    public UInt32 frameEnded;
    public ZSTD_inBuffer_s expectedInBuffer;
    [NativeIntegerAttribute]
public UIntPtr stableIn_notConsumed;
    [NativeIntegerAttribute]
public UIntPtr expectedOutBufferSize;
    public ZSTD_localDict localDict;
    public ZSTD_CDict_s* cdict;
    public ZSTD_prefixDict_s prefixDict;
    public ZSTDMT_CCtx_s* mtctx;
    public ZSTD_blockSplitCtx blockSplitCtx;
    public ZSTD_Sequence* extSeqBuf;
    [NativeIntegerAttribute]
public UIntPtr extSeqBufCapacity;
}
public class ZstdSharp.Unsafe.ZSTD_CDict_s : ValueType {
    public Void* dictContent;
    [NativeIntegerAttribute]
public UIntPtr dictContentSize;
    public ZSTD_dictContentType_e dictContentType;
    public UInt32* entropyWorkspace;
    public ZSTD_cwksp workspace;
    public ZSTD_matchState_t matchState;
    public ZSTD_compressedBlockState_t cBlockState;
    public ZSTD_customMem customMem;
    public UInt32 dictID;
    public int compressionLevel;
    public ZSTD_paramSwitch_e useRowMatchFinder;
}
public enum ZstdSharp.Unsafe.ZSTD_compResetPolicy_e : Enum {
    public int value__;
    public static ZSTD_compResetPolicy_e ZSTDcrp_makeClean;
    public static ZSTD_compResetPolicy_e ZSTDcrp_leaveDirty;
}
public class ZstdSharp.Unsafe.ZSTD_compressedBlockState_t : ValueType {
    public ZSTD_entropyCTables_t entropy;
    [FixedBufferAttribute("System.UInt32", "3")]
public <rep>e__FixedBuffer rep;
}
public class ZstdSharp.Unsafe.ZSTD_compressionParameters : ValueType {
    public UInt32 windowLog;
    public UInt32 chainLog;
    public UInt32 hashLog;
    public UInt32 searchLog;
    public UInt32 minMatch;
    public UInt32 targetLength;
    public ZSTD_strategy strategy;
    public ZSTD_compressionParameters(UInt32 windowLog, UInt32 chainLog, UInt32 hashLog, UInt32 searchLog, UInt32 minMatch, UInt32 targetLength, ZSTD_strategy strategy);
}
public enum ZstdSharp.Unsafe.ZSTD_compressionStage_e : Enum {
    public int value__;
    public static ZSTD_compressionStage_e ZSTDcs_created;
    public static ZSTD_compressionStage_e ZSTDcs_init;
    public static ZSTD_compressionStage_e ZSTDcs_ongoing;
    public static ZSTD_compressionStage_e ZSTDcs_ending;
}
public enum ZstdSharp.Unsafe.ZSTD_cParameter : Enum {
    public int value__;
    public static ZSTD_cParameter ZSTD_c_compressionLevel;
    public static ZSTD_cParameter ZSTD_c_windowLog;
    public static ZSTD_cParameter ZSTD_c_hashLog;
    public static ZSTD_cParameter ZSTD_c_chainLog;
    public static ZSTD_cParameter ZSTD_c_searchLog;
    public static ZSTD_cParameter ZSTD_c_minMatch;
    public static ZSTD_cParameter ZSTD_c_targetLength;
    public static ZSTD_cParameter ZSTD_c_strategy;
    public static ZSTD_cParameter ZSTD_c_targetCBlockSize;
    public static ZSTD_cParameter ZSTD_c_enableLongDistanceMatching;
    public static ZSTD_cParameter ZSTD_c_ldmHashLog;
    public static ZSTD_cParameter ZSTD_c_ldmMinMatch;
    public static ZSTD_cParameter ZSTD_c_ldmBucketSizeLog;
    public static ZSTD_cParameter ZSTD_c_ldmHashRateLog;
    public static ZSTD_cParameter ZSTD_c_contentSizeFlag;
    public static ZSTD_cParameter ZSTD_c_checksumFlag;
    public static ZSTD_cParameter ZSTD_c_dictIDFlag;
    public static ZSTD_cParameter ZSTD_c_nbWorkers;
    public static ZSTD_cParameter ZSTD_c_jobSize;
    public static ZSTD_cParameter ZSTD_c_overlapLog;
    public static ZSTD_cParameter ZSTD_c_experimentalParam1;
    public static ZSTD_cParameter ZSTD_c_experimentalParam2;
    public static ZSTD_cParameter ZSTD_c_experimentalParam3;
    public static ZSTD_cParameter ZSTD_c_experimentalParam4;
    public static ZSTD_cParameter ZSTD_c_experimentalParam5;
    public static ZSTD_cParameter ZSTD_c_experimentalParam7;
    public static ZSTD_cParameter ZSTD_c_experimentalParam8;
    public static ZSTD_cParameter ZSTD_c_experimentalParam9;
    public static ZSTD_cParameter ZSTD_c_experimentalParam10;
    public static ZSTD_cParameter ZSTD_c_experimentalParam11;
    public static ZSTD_cParameter ZSTD_c_experimentalParam12;
    public static ZSTD_cParameter ZSTD_c_experimentalParam13;
    public static ZSTD_cParameter ZSTD_c_experimentalParam14;
    public static ZSTD_cParameter ZSTD_c_experimentalParam15;
    public static ZSTD_cParameter ZSTD_c_experimentalParam16;
    public static ZSTD_cParameter ZSTD_c_experimentalParam17;
    public static ZSTD_cParameter ZSTD_c_experimentalParam18;
    public static ZSTD_cParameter ZSTD_c_experimentalParam19;
}
public enum ZstdSharp.Unsafe.ZSTD_cParamMode_e : Enum {
    public int value__;
    public static ZSTD_cParamMode_e ZSTD_cpm_noAttachDict;
    public static ZSTD_cParamMode_e ZSTD_cpm_attachDict;
    public static ZSTD_cParamMode_e ZSTD_cpm_createCDict;
    public static ZSTD_cParamMode_e ZSTD_cpm_unknown;
}
public enum ZstdSharp.Unsafe.ZSTD_cStreamStage : Enum {
    public int value__;
    public static ZSTD_cStreamStage zcss_init;
    public static ZSTD_cStreamStage zcss_load;
    public static ZSTD_cStreamStage zcss_flush;
}
public class ZstdSharp.Unsafe.ZSTD_customMem : ValueType {
    public Void* customAlloc;
    public Void* customFree;
    public Void* opaque;
    public ZSTD_customMem(Void* customAlloc, Void* customFree, Void* opaque);
}
public class ZstdSharp.Unsafe.ZSTD_cwksp : ValueType {
    public Void* workspace;
    public Void* workspaceEnd;
    public Void* objectEnd;
    public Void* tableEnd;
    public Void* tableValidEnd;
    public Void* allocStart;
    public Void* initOnceStart;
    public byte allocFailed;
    public int workspaceOversizedDuration;
    public ZSTD_cwksp_alloc_phase_e phase;
    public ZSTD_cwksp_static_alloc_e isStatic;
}
public enum ZstdSharp.Unsafe.ZSTD_cwksp_alloc_phase_e : Enum {
    public int value__;
    public static ZSTD_cwksp_alloc_phase_e ZSTD_cwksp_alloc_objects;
    public static ZSTD_cwksp_alloc_phase_e ZSTD_cwksp_alloc_aligned_init_once;
    public static ZSTD_cwksp_alloc_phase_e ZSTD_cwksp_alloc_aligned;
    public static ZSTD_cwksp_alloc_phase_e ZSTD_cwksp_alloc_buffers;
}
public enum ZstdSharp.Unsafe.ZSTD_cwksp_static_alloc_e : Enum {
    public int value__;
    public static ZSTD_cwksp_static_alloc_e ZSTD_cwksp_dynamic_alloc;
    public static ZSTD_cwksp_static_alloc_e ZSTD_cwksp_static_alloc;
}
public class ZstdSharp.Unsafe.ZSTD_DCtx_s : ValueType {
    public ZSTD_seqSymbol* LLTptr;
    public ZSTD_seqSymbol* MLTptr;
    public ZSTD_seqSymbol* OFTptr;
    public UInt32* HUFptr;
    public ZSTD_entropyDTables_t entropy;
    [FixedBufferAttribute("System.UInt32", "640")]
public <workspace>e__FixedBuffer workspace;
    public Void* previousDstEnd;
    public Void* prefixStart;
    public Void* virtualStart;
    public Void* dictEnd;
    [NativeIntegerAttribute]
public UIntPtr expected;
    public ZSTD_frameHeader fParams;
    public ulong processedCSize;
    public ulong decodedSize;
    public blockType_e bType;
    public ZSTD_dStage stage;
    public UInt32 litEntropy;
    public UInt32 fseEntropy;
    public XXH64_state_s xxhState;
    [NativeIntegerAttribute]
public UIntPtr headerSize;
    public ZSTD_format_e format;
    public ZSTD_forceIgnoreChecksum_e forceIgnoreChecksum;
    public UInt32 validateChecksum;
    public Byte* litPtr;
    public ZSTD_customMem customMem;
    [NativeIntegerAttribute]
public UIntPtr litSize;
    [NativeIntegerAttribute]
public UIntPtr rleSize;
    [NativeIntegerAttribute]
public UIntPtr staticSize;
    public int isFrameDecompression;
    public ZSTD_DDict_s* ddictLocal;
    public ZSTD_DDict_s* ddict;
    public UInt32 dictID;
    public int ddictIsCold;
    public ZSTD_dictUses_e dictUses;
    public ZSTD_DDictHashSet* ddictSet;
    public ZSTD_refMultipleDDicts_e refMultipleDDicts;
    public int disableHufAsm;
    public int maxBlockSizeParam;
    public ZSTD_dStreamStage streamStage;
    public SByte* inBuff;
    [NativeIntegerAttribute]
public UIntPtr inBuffSize;
    [NativeIntegerAttribute]
public UIntPtr inPos;
    [NativeIntegerAttribute]
public UIntPtr maxWindowSize;
    public SByte* outBuff;
    [NativeIntegerAttribute]
public UIntPtr outBuffSize;
    [NativeIntegerAttribute]
public UIntPtr outStart;
    [NativeIntegerAttribute]
public UIntPtr outEnd;
    [NativeIntegerAttribute]
public UIntPtr lhSize;
    public UInt32 hostageByte;
    public int noForwardProgress;
    public ZSTD_bufferMode_e outBufferMode;
    public ZSTD_outBuffer_s expectedOutBuffer;
    public Byte* litBuffer;
    public Byte* litBufferEnd;
    public ZSTD_litLocation_e litBufferLocation;
    [FixedBufferAttribute("System.Byte", "65568")]
public <litExtraBuffer>e__FixedBuffer litExtraBuffer;
    [FixedBufferAttribute("System.Byte", "18")]
public <headerBuffer>e__FixedBuffer headerBuffer;
    [NativeIntegerAttribute]
public UIntPtr oversizedDuration;
}
public class ZstdSharp.Unsafe.ZSTD_DDict_s : ValueType {
    public Void* dictBuffer;
    public Void* dictContent;
    [NativeIntegerAttribute]
public UIntPtr dictSize;
    public ZSTD_entropyDTables_t entropy;
    public UInt32 dictID;
    public UInt32 entropyPresent;
    public ZSTD_customMem cMem;
}
public class ZstdSharp.Unsafe.ZSTD_DDictHashSet : ValueType {
    public ZSTD_DDict_s** ddictPtrTable;
    [NativeIntegerAttribute]
public UIntPtr ddictPtrTableSize;
    [NativeIntegerAttribute]
public UIntPtr ddictPtrCount;
}
public enum ZstdSharp.Unsafe.ZSTD_defaultPolicy_e : Enum {
    public int value__;
    public static ZSTD_defaultPolicy_e ZSTD_defaultDisallowed;
    public static ZSTD_defaultPolicy_e ZSTD_defaultAllowed;
}
public enum ZstdSharp.Unsafe.ZSTD_dictAttachPref_e : Enum {
    public int value__;
    public static ZSTD_dictAttachPref_e ZSTD_dictDefaultAttach;
    public static ZSTD_dictAttachPref_e ZSTD_dictForceAttach;
    public static ZSTD_dictAttachPref_e ZSTD_dictForceCopy;
    public static ZSTD_dictAttachPref_e ZSTD_dictForceLoad;
}
public enum ZstdSharp.Unsafe.ZSTD_dictContentType_e : Enum {
    public int value__;
    public static ZSTD_dictContentType_e ZSTD_dct_auto;
    public static ZSTD_dictContentType_e ZSTD_dct_rawContent;
    public static ZSTD_dictContentType_e ZSTD_dct_fullDict;
}
public enum ZstdSharp.Unsafe.ZSTD_dictLoadMethod_e : Enum {
    public int value__;
    public static ZSTD_dictLoadMethod_e ZSTD_dlm_byCopy;
    public static ZSTD_dictLoadMethod_e ZSTD_dlm_byRef;
}
public enum ZstdSharp.Unsafe.ZSTD_dictMode_e : Enum {
    public int value__;
    public static ZSTD_dictMode_e ZSTD_noDict;
    public static ZSTD_dictMode_e ZSTD_extDict;
    public static ZSTD_dictMode_e ZSTD_dictMatchState;
    public static ZSTD_dictMode_e ZSTD_dedicatedDictSearch;
}
public enum ZstdSharp.Unsafe.ZSTD_dictTableLoadMethod_e : Enum {
    public int value__;
    public static ZSTD_dictTableLoadMethod_e ZSTD_dtlm_fast;
    public static ZSTD_dictTableLoadMethod_e ZSTD_dtlm_full;
}
public enum ZstdSharp.Unsafe.ZSTD_dictUses_e : Enum {
    public int value__;
    public static ZSTD_dictUses_e ZSTD_use_indefinitely;
    public static ZSTD_dictUses_e ZSTD_dont_use;
    public static ZSTD_dictUses_e ZSTD_use_once;
}
public enum ZstdSharp.Unsafe.ZSTD_dParameter : Enum {
    public int value__;
    public static ZSTD_dParameter ZSTD_d_windowLogMax;
    public static ZSTD_dParameter ZSTD_d_experimentalParam1;
    public static ZSTD_dParameter ZSTD_d_experimentalParam2;
    public static ZSTD_dParameter ZSTD_d_experimentalParam3;
    public static ZSTD_dParameter ZSTD_d_experimentalParam4;
    public static ZSTD_dParameter ZSTD_d_experimentalParam5;
    public static ZSTD_dParameter ZSTD_d_experimentalParam6;
}
public enum ZstdSharp.Unsafe.ZSTD_dStage : Enum {
    public int value__;
    public static ZSTD_dStage ZSTDds_getFrameHeaderSize;
    public static ZSTD_dStage ZSTDds_decodeFrameHeader;
    public static ZSTD_dStage ZSTDds_decodeBlockHeader;
    public static ZSTD_dStage ZSTDds_decompressBlock;
    public static ZSTD_dStage ZSTDds_decompressLastBlock;
    public static ZSTD_dStage ZSTDds_checkChecksum;
    public static ZSTD_dStage ZSTDds_decodeSkippableHeader;
    public static ZSTD_dStage ZSTDds_skipFrame;
}
public enum ZstdSharp.Unsafe.ZSTD_dStreamStage : Enum {
    public int value__;
    public static ZSTD_dStreamStage zdss_init;
    public static ZSTD_dStreamStage zdss_loadHeader;
    public static ZSTD_dStreamStage zdss_read;
    public static ZSTD_dStreamStage zdss_load;
    public static ZSTD_dStreamStage zdss_flush;
}
public enum ZstdSharp.Unsafe.ZSTD_EndDirective : Enum {
    public int value__;
    public static ZSTD_EndDirective ZSTD_e_continue;
    public static ZSTD_EndDirective ZSTD_e_flush;
    public static ZSTD_EndDirective ZSTD_e_end;
}
public class ZstdSharp.Unsafe.ZSTD_entropyCTables_t : ValueType {
    public ZSTD_hufCTables_t huf;
    public ZSTD_fseCTables_t fse;
}
public class ZstdSharp.Unsafe.ZSTD_entropyCTablesMetadata_t : ValueType {
    public ZSTD_hufCTablesMetadata_t hufMetadata;
    public ZSTD_fseCTablesMetadata_t fseMetadata;
}
public class ZstdSharp.Unsafe.ZSTD_entropyDTables_t : ValueType {
    public _LLTable_e__FixedBuffer LLTable;
    public _OFTable_e__FixedBuffer OFTable;
    public _MLTable_e__FixedBuffer MLTable;
    [FixedBufferAttribute("System.UInt32", "4097")]
public <hufTable>e__FixedBuffer hufTable;
    [FixedBufferAttribute("System.UInt32", "3")]
public <rep>e__FixedBuffer rep;
    [FixedBufferAttribute("System.UInt32", "157")]
public <workspace>e__FixedBuffer workspace;
}
public enum ZstdSharp.Unsafe.ZSTD_ErrorCode : Enum {
    public int value__;
    public static ZSTD_ErrorCode ZSTD_error_no_error;
    public static ZSTD_ErrorCode ZSTD_error_GENERIC;
    public static ZSTD_ErrorCode ZSTD_error_prefix_unknown;
    public static ZSTD_ErrorCode ZSTD_error_version_unsupported;
    public static ZSTD_ErrorCode ZSTD_error_frameParameter_unsupported;
    public static ZSTD_ErrorCode ZSTD_error_frameParameter_windowTooLarge;
    public static ZSTD_ErrorCode ZSTD_error_corruption_detected;
    public static ZSTD_ErrorCode ZSTD_error_checksum_wrong;
    public static ZSTD_ErrorCode ZSTD_error_literals_headerWrong;
    public static ZSTD_ErrorCode ZSTD_error_dictionary_corrupted;
    public static ZSTD_ErrorCode ZSTD_error_dictionary_wrong;
    public static ZSTD_ErrorCode ZSTD_error_dictionaryCreation_failed;
    public static ZSTD_ErrorCode ZSTD_error_parameter_unsupported;
    public static ZSTD_ErrorCode ZSTD_error_parameter_combination_unsupported;
    public static ZSTD_ErrorCode ZSTD_error_parameter_outOfBound;
    public static ZSTD_ErrorCode ZSTD_error_tableLog_tooLarge;
    public static ZSTD_ErrorCode ZSTD_error_maxSymbolValue_tooLarge;
    public static ZSTD_ErrorCode ZSTD_error_maxSymbolValue_tooSmall;
    public static ZSTD_ErrorCode ZSTD_error_stabilityCondition_notRespected;
    public static ZSTD_ErrorCode ZSTD_error_stage_wrong;
    public static ZSTD_ErrorCode ZSTD_error_init_missing;
    public static ZSTD_ErrorCode ZSTD_error_memory_allocation;
    public static ZSTD_ErrorCode ZSTD_error_workSpace_tooSmall;
    public static ZSTD_ErrorCode ZSTD_error_dstSize_tooSmall;
    public static ZSTD_ErrorCode ZSTD_error_srcSize_wrong;
    public static ZSTD_ErrorCode ZSTD_error_dstBuffer_null;
    public static ZSTD_ErrorCode ZSTD_error_noForwardProgress_destFull;
    public static ZSTD_ErrorCode ZSTD_error_noForwardProgress_inputEmpty;
    public static ZSTD_ErrorCode ZSTD_error_frameIndex_tooLarge;
    public static ZSTD_ErrorCode ZSTD_error_seekableIO;
    public static ZSTD_ErrorCode ZSTD_error_dstBuffer_wrong;
    public static ZSTD_ErrorCode ZSTD_error_srcBuffer_wrong;
    public static ZSTD_ErrorCode ZSTD_error_sequenceProducer_failed;
    public static ZSTD_ErrorCode ZSTD_error_externalSequences_invalid;
    public static ZSTD_ErrorCode ZSTD_error_maxCode;
}
public enum ZstdSharp.Unsafe.ZSTD_forceIgnoreChecksum_e : Enum {
    public int value__;
    public static ZSTD_forceIgnoreChecksum_e ZSTD_d_validateChecksum;
    public static ZSTD_forceIgnoreChecksum_e ZSTD_d_ignoreChecksum;
}
public enum ZstdSharp.Unsafe.ZSTD_format_e : Enum {
    public int value__;
    public static ZSTD_format_e ZSTD_f_zstd1;
    public static ZSTD_format_e ZSTD_f_zstd1_magicless;
}
public class ZstdSharp.Unsafe.ZSTD_frameHeader : ValueType {
    public ulong frameContentSize;
    public ulong windowSize;
    public UInt32 blockSizeMax;
    public ZSTD_frameType_e frameType;
    public UInt32 headerSize;
    public UInt32 dictID;
    public UInt32 checksumFlag;
    public UInt32 _reserved1;
    public UInt32 _reserved2;
}
public class ZstdSharp.Unsafe.ZSTD_frameParameters : ValueType {
    public int contentSizeFlag;
    public int checksumFlag;
    public int noDictIDFlag;
}
public class ZstdSharp.Unsafe.ZSTD_frameProgression : ValueType {
    public ulong ingested;
    public ulong consumed;
    public ulong produced;
    public ulong flushed;
    public UInt32 currentJobID;
    public UInt32 nbActiveWorkers;
}
public class ZstdSharp.Unsafe.ZSTD_frameSizeInfo : ValueType {
    [NativeIntegerAttribute]
public UIntPtr nbBlocks;
    [NativeIntegerAttribute]
public UIntPtr compressedSize;
    public ulong decompressedBound;
}
public enum ZstdSharp.Unsafe.ZSTD_frameType_e : Enum {
    public int value__;
    public static ZSTD_frameType_e ZSTD_frame;
    public static ZSTD_frameType_e ZSTD_skippableFrame;
}
public class ZstdSharp.Unsafe.ZSTD_fseCTables_t : ValueType {
    [FixedBufferAttribute("System.UInt32", "193")]
public <offcodeCTable>e__FixedBuffer offcodeCTable;
    [FixedBufferAttribute("System.UInt32", "363")]
public <matchlengthCTable>e__FixedBuffer matchlengthCTable;
    [FixedBufferAttribute("System.UInt32", "329")]
public <litlengthCTable>e__FixedBuffer litlengthCTable;
    public FSE_repeat offcode_repeatMode;
    public FSE_repeat matchlength_repeatMode;
    public FSE_repeat litlength_repeatMode;
}
public class ZstdSharp.Unsafe.ZSTD_fseCTablesMetadata_t : ValueType {
    public symbolEncodingType_e llType;
    public symbolEncodingType_e ofType;
    public symbolEncodingType_e mlType;
    [FixedBufferAttribute("System.Byte", "133")]
public <fseTablesBuffer>e__FixedBuffer fseTablesBuffer;
    [NativeIntegerAttribute]
public UIntPtr fseTablesSize;
    [NativeIntegerAttribute]
public UIntPtr lastCountSize;
}
public class ZstdSharp.Unsafe.ZSTD_fseState : ValueType {
    [NativeIntegerAttribute]
public UIntPtr state;
    public ZSTD_seqSymbol* table;
}
[UnmanagedFunctionPointerAttribute("2")]
public class ZstdSharp.Unsafe.ZSTD_getAllMatchesFn : MulticastDelegate {
    public ZSTD_getAllMatchesFn(object object, IntPtr method);
    public virtual UInt32 Invoke(ZSTD_match_t* param0, ZSTD_matchState_t* param1, UInt32* param2, Byte* param3, Byte* param4, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat);
    public virtual IAsyncResult BeginInvoke(ZSTD_match_t* param0, ZSTD_matchState_t* param1, UInt32* param2, Byte* param3, Byte* param4, UInt32* rep, UInt32 ll0, UInt32 lengthToBeat, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
public class ZstdSharp.Unsafe.ZSTD_hufCTables_t : ValueType {
    public _CTable_e__FixedBuffer CTable;
    public HUF_repeat repeatMode;
}
public class ZstdSharp.Unsafe.ZSTD_hufCTablesMetadata_t : ValueType {
    public symbolEncodingType_e hType;
    [FixedBufferAttribute("System.Byte", "128")]
public <hufDesBuffer>e__FixedBuffer hufDesBuffer;
    [NativeIntegerAttribute]
public UIntPtr hufDesSize;
}
public class ZstdSharp.Unsafe.ZSTD_inBuffer_s : ValueType {
    public Void* src;
    [NativeIntegerAttribute]
public UIntPtr size;
    [NativeIntegerAttribute]
public UIntPtr pos;
}
public enum ZstdSharp.Unsafe.ZSTD_indexResetPolicy_e : Enum {
    public int value__;
    public static ZSTD_indexResetPolicy_e ZSTDirp_continue;
    public static ZSTD_indexResetPolicy_e ZSTDirp_reset;
}
public enum ZstdSharp.Unsafe.ZSTD_literalCompressionMode_e : Enum {
    public int value__;
    public static ZSTD_literalCompressionMode_e ZSTD_lcm_auto;
    public static ZSTD_literalCompressionMode_e ZSTD_lcm_huffman;
    public static ZSTD_literalCompressionMode_e ZSTD_lcm_uncompressed;
}
public enum ZstdSharp.Unsafe.ZSTD_litLocation_e : Enum {
    public int value__;
    public static ZSTD_litLocation_e ZSTD_not_in_dst;
    public static ZSTD_litLocation_e ZSTD_in_dst;
    public static ZSTD_litLocation_e ZSTD_split;
}
public class ZstdSharp.Unsafe.ZSTD_localDict : ValueType {
    public Void* dictBuffer;
    public Void* dict;
    [NativeIntegerAttribute]
public UIntPtr dictSize;
    public ZSTD_dictContentType_e dictContentType;
    public ZSTD_CDict_s* cdict;
}
public enum ZstdSharp.Unsafe.ZSTD_longLengthType_e : Enum {
    public int value__;
    public static ZSTD_longLengthType_e ZSTD_llt_none;
    public static ZSTD_longLengthType_e ZSTD_llt_literalLength;
    public static ZSTD_longLengthType_e ZSTD_llt_matchLength;
}
public enum ZstdSharp.Unsafe.ZSTD_longOffset_e : Enum {
    public int value__;
    public static ZSTD_longOffset_e ZSTD_lo_isRegularOffset;
    public static ZSTD_longOffset_e ZSTD_lo_isLongOffset;
}
public class ZstdSharp.Unsafe.ZSTD_match_t : ValueType {
    public UInt32 off;
    public UInt32 len;
}
public class ZstdSharp.Unsafe.ZSTD_matchState_t : ValueType {
    public ZSTD_window_t window;
    public UInt32 loadedDictEnd;
    public UInt32 nextToUpdate;
    public UInt32 hashLog3;
    public UInt32 rowHashLog;
    public Byte* tagTable;
    [FixedBufferAttribute("System.UInt32", "8")]
public <hashCache>e__FixedBuffer hashCache;
    public ulong hashSalt;
    public UInt32 hashSaltEntropy;
    public UInt32* hashTable;
    public UInt32* hashTable3;
    public UInt32* chainTable;
    public UInt32 forceNonContiguous;
    public int dedicatedDictSearch;
    public optState_t opt;
    public ZSTD_matchState_t* dictMatchState;
    public ZSTD_compressionParameters cParams;
    public rawSeqStore_t* ldmSeqStore;
    public int prefetchCDictTables;
    public int lazySkipping;
}
public enum ZstdSharp.Unsafe.ZSTD_nextInputType_e : Enum {
    public int value__;
    public static ZSTD_nextInputType_e ZSTDnit_frameHeader;
    public static ZSTD_nextInputType_e ZSTDnit_blockHeader;
    public static ZSTD_nextInputType_e ZSTDnit_block;
    public static ZSTD_nextInputType_e ZSTDnit_lastBlock;
    public static ZSTD_nextInputType_e ZSTDnit_checksum;
    public static ZSTD_nextInputType_e ZSTDnit_skippableFrame;
}
public class ZstdSharp.Unsafe.ZSTD_OffsetInfo : ValueType {
    public UInt32 longOffsetShare;
    public UInt32 maxNbAdditionalBits;
}
public class ZstdSharp.Unsafe.ZSTD_optimal_t : ValueType {
    public int price;
    public UInt32 off;
    public UInt32 mlen;
    public UInt32 litlen;
    [FixedBufferAttribute("System.UInt32", "3")]
public <rep>e__FixedBuffer rep;
}
public class ZstdSharp.Unsafe.ZSTD_optLdm_t : ValueType {
    public rawSeqStore_t seqStore;
    public UInt32 startPosInBlock;
    public UInt32 endPosInBlock;
    public UInt32 offset;
}
public enum ZstdSharp.Unsafe.ZSTD_OptPrice_e : Enum {
    public int value__;
    public static ZSTD_OptPrice_e zop_dynamic;
    public static ZSTD_OptPrice_e zop_predef;
}
public class ZstdSharp.Unsafe.ZSTD_outBuffer_s : ValueType {
    public Void* dst;
    [NativeIntegerAttribute]
public UIntPtr size;
    [NativeIntegerAttribute]
public UIntPtr pos;
}
public enum ZstdSharp.Unsafe.ZSTD_overlap_e : Enum {
    public int value__;
    public static ZSTD_overlap_e ZSTD_no_overlap;
    public static ZSTD_overlap_e ZSTD_overlap_src_before_dst;
}
public class ZstdSharp.Unsafe.ZSTD_parameters : ValueType {
    public ZSTD_compressionParameters cParams;
    public ZSTD_frameParameters fParams;
}
public enum ZstdSharp.Unsafe.ZSTD_paramSwitch_e : Enum {
    public int value__;
    public static ZSTD_paramSwitch_e ZSTD_ps_auto;
    public static ZSTD_paramSwitch_e ZSTD_ps_enable;
    public static ZSTD_paramSwitch_e ZSTD_ps_disable;
}
public class ZstdSharp.Unsafe.ZSTD_prefixDict_s : ValueType {
    public Void* dict;
    [NativeIntegerAttribute]
public UIntPtr dictSize;
    public ZSTD_dictContentType_e dictContentType;
}
public enum ZstdSharp.Unsafe.ZSTD_refMultipleDDicts_e : Enum {
    public int value__;
    public static ZSTD_refMultipleDDicts_e ZSTD_rmd_refSingleDDict;
    public static ZSTD_refMultipleDDicts_e ZSTD_rmd_refMultipleDDicts;
}
public enum ZstdSharp.Unsafe.ZSTD_ResetDirective : Enum {
    public int value__;
    public static ZSTD_ResetDirective ZSTD_reset_session_only;
    public static ZSTD_ResetDirective ZSTD_reset_parameters;
    public static ZSTD_ResetDirective ZSTD_reset_session_and_parameters;
}
public enum ZstdSharp.Unsafe.ZSTD_resetTarget_e : Enum {
    public int value__;
    public static ZSTD_resetTarget_e ZSTD_resetTarget_CDict;
    public static ZSTD_resetTarget_e ZSTD_resetTarget_CCtx;
}
public class ZstdSharp.Unsafe.ZSTD_seqSymbol : ValueType {
    public ushort nextState;
    public byte nbAdditionalBits;
    public byte nbBits;
    public UInt32 baseValue;
    public ZSTD_seqSymbol(ushort nextState, byte nbAdditionalBits, byte nbBits, UInt32 baseValue);
}
public class ZstdSharp.Unsafe.ZSTD_seqSymbol_header : ValueType {
    public UInt32 fastMode;
    public UInt32 tableLog;
}
public class ZstdSharp.Unsafe.ZSTD_Sequence : ValueType {
    public UInt32 offset;
    public UInt32 litLength;
    public UInt32 matchLength;
    public UInt32 rep;
}
public enum ZstdSharp.Unsafe.ZSTD_sequenceFormat_e : Enum {
    public int value__;
    public static ZSTD_sequenceFormat_e ZSTD_sf_noBlockDelimiters;
    public static ZSTD_sequenceFormat_e ZSTD_sf_explicitBlockDelimiters;
}
public class ZstdSharp.Unsafe.ZSTD_sequenceLength : ValueType {
    public UInt32 litLength;
    public UInt32 matchLength;
}
public class ZstdSharp.Unsafe.ZSTD_sequencePosition : ValueType {
    public UInt32 idx;
    public UInt32 posInSequence;
    [NativeIntegerAttribute]
public UIntPtr posInSrc;
}
public enum ZstdSharp.Unsafe.ZSTD_strategy : Enum {
    public int value__;
    public static ZSTD_strategy ZSTD_fast;
    public static ZSTD_strategy ZSTD_dfast;
    public static ZSTD_strategy ZSTD_greedy;
    public static ZSTD_strategy ZSTD_lazy;
    public static ZSTD_strategy ZSTD_lazy2;
    public static ZSTD_strategy ZSTD_btlazy2;
    public static ZSTD_strategy ZSTD_btopt;
    public static ZSTD_strategy ZSTD_btultra;
    public static ZSTD_strategy ZSTD_btultra2;
}
public class ZstdSharp.Unsafe.ZSTD_symbolEncodingTypeStats_t : ValueType {
    public UInt32 LLtype;
    public UInt32 Offtype;
    public UInt32 MLtype;
    [NativeIntegerAttribute]
public UIntPtr size;
    [NativeIntegerAttribute]
public UIntPtr lastCountSize;
    public int longOffsets;
}
public enum ZstdSharp.Unsafe.ZSTD_tableFillPurpose_e : Enum {
    public int value__;
    public static ZSTD_tableFillPurpose_e ZSTD_tfp_forCCtx;
    public static ZSTD_tableFillPurpose_e ZSTD_tfp_forCDict;
}
public class ZstdSharp.Unsafe.ZSTD_window_t : ValueType {
    public Byte* nextSrc;
    public Byte* base;
    public Byte* dictBase;
    public UInt32 dictLimit;
    public UInt32 lowLimit;
    public UInt32 nbOverflowCorrections;
}
public class ZstdSharp.Unsafe.ZSTDMT_bufferPool_s : ValueType {
    public Void* poolMutex;
    [NativeIntegerAttribute]
public UIntPtr bufferSize;
    public UInt32 totalBuffers;
    public UInt32 nbBuffers;
    public ZSTD_customMem cMem;
    public buffer_s* buffers;
}
public class ZstdSharp.Unsafe.ZSTDMT_CCtx_s : ValueType {
    public Void* factory;
    public ZSTDMT_jobDescription* jobs;
    public ZSTDMT_bufferPool_s* bufPool;
    public ZSTDMT_CCtxPool* cctxPool;
    public ZSTDMT_bufferPool_s* seqPool;
    public ZSTD_CCtx_params_s params;
    [NativeIntegerAttribute]
public UIntPtr targetSectionSize;
    [NativeIntegerAttribute]
public UIntPtr targetPrefixSize;
    public int jobReady;
    public inBuff_t inBuff;
    public roundBuff_t roundBuff;
    public serialState_t serial;
    public rsyncState_t rsync;
    public UInt32 jobIDMask;
    public UInt32 doneJobID;
    public UInt32 nextJobID;
    public UInt32 frameEnded;
    public UInt32 allJobsCompleted;
    public ulong frameContentSize;
    public ulong consumed;
    public ulong produced;
    public ZSTD_customMem cMem;
    public ZSTD_CDict_s* cdictLocal;
    public ZSTD_CDict_s* cdict;
    public UInt32 providedFactory;
}
public class ZstdSharp.Unsafe.ZSTDMT_CCtxPool : ValueType {
    public Void* poolMutex;
    public int totalCCtx;
    public int availCCtx;
    public ZSTD_customMem cMem;
    public ZSTD_CCtx_s** cctxs;
}
public class ZstdSharp.Unsafe.ZSTDMT_jobDescription : ValueType {
    [NativeIntegerAttribute]
public UIntPtr consumed;
    [NativeIntegerAttribute]
public UIntPtr cSize;
    public Void* job_mutex;
    public Void* job_cond;
    public ZSTDMT_CCtxPool* cctxPool;
    public ZSTDMT_bufferPool_s* bufPool;
    public ZSTDMT_bufferPool_s* seqPool;
    public serialState_t* serial;
    public buffer_s dstBuff;
    public range_t prefix;
    public range_t src;
    public UInt32 jobID;
    public UInt32 firstJob;
    public UInt32 lastJob;
    public ZSTD_CCtx_params_s params;
    public ZSTD_CDict_s* cdict;
    public ulong fullFrameSize;
    [NativeIntegerAttribute]
public UIntPtr dstFlushed;
    public UInt32 frameChecksumNeeded;
}
public static class ZstdSharp.UnsafeHelper : object {
    public static Void* PoisonMemory(Void* destination, ulong size);
    public static Void* malloc(UInt32 size);
    public static Void* malloc(ulong size);
    public static Void* calloc(ulong num, ulong size);
    public static void memcpy(Void* destination, Void* source, UInt32 size);
    public static void memset(Void* memPtr, byte val, UInt32 size);
    public static void memset(T& memPtr, byte val, UInt32 size);
    public static void free(Void* ptr);
    public static T* GetArrayPointer(T[] array);
    [ConditionalAttribute("DEBUG")]
public static void assert(bool condition, string message);
    public static void memmove(Void* destination, Void* source, ulong size);
    public static int memcmp(Void* buf1, Void* buf2, ulong size);
    public static void SkipInit(T& value);
}
public class ZstdSharp.ZstdException : Exception {
    [CompilerGeneratedAttribute]
private ZSTD_ErrorCode <Code>k__BackingField;
    public ZSTD_ErrorCode Code { get; }
    public ZstdException(ZSTD_ErrorCode code, string message);
    [CompilerGeneratedAttribute]
public ZSTD_ErrorCode get_Code();
}
