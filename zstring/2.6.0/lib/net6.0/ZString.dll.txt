internal static class Cysharp.Text.EnumUtil`1 : object {
    [NullableAttribute("1")]
private static string InvalidName;
    [NullableAttribute("1")]
private static Dictionary`2<T, string> names;
    [NullableAttribute("1")]
private static Dictionary`2<T, Byte[]> utf8names;
    private static EnumUtil`1();
    public static bool TryFormatUtf16(T value, Span`1<char> dest, Int32& written, ReadOnlySpan`1<char> _);
    public static bool TryFormatUtf8(T value, Span`1<byte> dest, Int32& written, StandardFormat _);
}
internal static class Cysharp.Text.ExceptionUtil : object {
    [NullableContextAttribute("1")]
internal static void ThrowArgumentException(string paramName);
    internal static void ThrowFormatException();
    internal static void ThrowFormatError();
}
internal static class Cysharp.Text.FastNumberWriter : object {
    public static bool TryWriteInt64(Span`1<char> buffer, Int32& charsWritten, long value);
    public static bool TryWriteUInt64(Span`1<char> buffer, Int32& charsWritten, ulong value);
}
internal static class Cysharp.Text.FormatParser : object {
    internal static int ArgLengthLimit;
    internal static int WidthLimit;
    [NullableContextAttribute("1")]
public static ParserScanResult ScanFormatString(string format, Int32& i);
    public static ParserScanResult ScanFormatString(ReadOnlySpan`1<char> format, Int32& i);
    private static bool IsDigit(char c);
    public static ParseResult Parse(ReadOnlySpan`1<char> format, int i);
    [NullableContextAttribute("1")]
public static ParseResult Parse(string format, int i);
}
[NullableContextAttribute("2")]
public interface Cysharp.Text.IResettableBufferWriter`1 {
    public abstract virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Cysharp.Text.NestedStringBuilderCreationException : InvalidOperationException {
    protected internal NestedStringBuilderCreationException(string typeName, string extraMessage);
    protected internal NestedStringBuilderCreationException(string message, Exception innerException);
}
internal enum Cysharp.Text.ParserScanResult : Enum {
    public int value__;
    public static ParserScanResult BraceOpen;
    public static ParserScanResult EscapedChar;
    public static ParserScanResult NormalChar;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Cysharp.Text.PreparedFormatHelper : object {
    internal static Utf16FormatSegment[] Utf16Parse(string format);
    internal static Utf8FormatSegment[] Utf8Parse(string format, Byte[]& utf8buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Cysharp.Text.ReadOnlyListAdaptor`1 : ValueType {
    private IList`1<T> _list;
    public T Item { get; }
    public int Count { get; }
    public ReadOnlyListAdaptor`1(IList`1<T> list);
    public sealed virtual T get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Cysharp.Text.Utf16FormatHelper : object {
    private static char sp;
    public static void FormatTo(TBufferWriter& sb, T arg, int width, ReadOnlySpan`1<char> format, string argName);
    private static void FormatToRightJustify(TBufferWriter& sb, T arg, int width, ReadOnlySpan`1<char> format, string argName);
}
[IsReadOnlyAttribute]
internal class Cysharp.Text.Utf16FormatSegment : ValueType {
    public static int NotFormatIndex;
    public int Offset;
    public int Count;
    public int FormatIndex;
    public int Alignment;
    public bool IsFormatArgument { get; }
    public Utf16FormatSegment(int offset, int count, int formatIndex, int alignment);
    public bool get_IsFormatArgument();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`1 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf16FormatSegment[] segments;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf16PreparedFormat`1(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1);
    public void FormatTo(TBufferWriter& sb, T1 arg1);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`10 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`10(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`11 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`11(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`12 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`12(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`13 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`13(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`14 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`14(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`15 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`15(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`16 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`16(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`2 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf16FormatSegment[] segments;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf16PreparedFormat`2(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`3 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf16FormatSegment[] segments;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf16PreparedFormat`3(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`4 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf16FormatSegment[] segments;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf16PreparedFormat`4(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`5 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf16FormatSegment[] segments;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf16PreparedFormat`5(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`6 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf16FormatSegment[] segments;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf16PreparedFormat`6(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`7 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf16FormatSegment[] segments;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf16PreparedFormat`7(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`8 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`8(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16PreparedFormat`9 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf16FormatSegment[] segments;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf16PreparedFormat`9(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf16ValueStringBuilder : ValueType {
    private static int ThreadStaticBufferSize;
    private static int DefaultBufferSize;
    private static char newLine1;
    private static char newLine2;
    private static bool crlf;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Char[] scratchBuffer;
    [ThreadStaticAttribute]
internal static bool scratchBufferUsed;
    [NullableAttribute("2")]
private Char[] buffer;
    private int index;
    private bool disposeImmediately;
    public int Length { get; }
    private static Utf16ValueStringBuilder();
    public Utf16ValueStringBuilder(bool disposeImmediately);
    public void AppendJoin(char separator, T[] values);
    public void AppendJoin(char separator, List`1<T> values);
    [NullableContextAttribute("2")]
public void AppendJoin(char separator, ReadOnlySpan`1<T> values);
    public void AppendJoin(char separator, IEnumerable`1<T> values);
    public void AppendJoin(char separator, ICollection`1<T> values);
    public void AppendJoin(char separator, IList`1<T> values);
    public void AppendJoin(char separator, IReadOnlyList`1<T> values);
    public void AppendJoin(char separator, IReadOnlyCollection`1<T> values);
    public void AppendJoin(string separator, T[] values);
    public void AppendJoin(string separator, List`1<T> values);
    public void AppendJoin(string separator, ReadOnlySpan`1<T> values);
    public void AppendJoin(string separator, IEnumerable`1<T> values);
    public void AppendJoin(string separator, ICollection`1<T> values);
    public void AppendJoin(string separator, IList`1<T> values);
    public void AppendJoin(string separator, IReadOnlyList`1<T> values);
    public void AppendJoin(string separator, IReadOnlyCollection`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IList`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IReadOnlyList`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IEnumerable`1<T> values);
    public void AppendFormat(string format, T1 arg1);
    [NullableContextAttribute("0")]
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1);
    public void AppendFormat(string format, T1 arg1, T2 arg2);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    private static object CreateFormatter(Type type);
    public void Append(byte value);
    public void Append(byte value, string format);
    public void AppendLine(byte value);
    public void AppendLine(byte value, string format);
    public void Append(DateTime value);
    public void Append(DateTime value, string format);
    public void AppendLine(DateTime value);
    public void AppendLine(DateTime value, string format);
    public void Append(DateTimeOffset value);
    public void Append(DateTimeOffset value, string format);
    public void AppendLine(DateTimeOffset value);
    public void AppendLine(DateTimeOffset value, string format);
    public void Append(decimal value);
    public void Append(decimal value, string format);
    public void AppendLine(decimal value);
    public void AppendLine(decimal value, string format);
    public void Append(double value);
    public void Append(double value, string format);
    public void AppendLine(double value);
    public void AppendLine(double value, string format);
    public void Append(short value);
    public void Append(short value, string format);
    public void AppendLine(short value);
    public void AppendLine(short value, string format);
    public void Append(int value);
    public void Append(int value, string format);
    public void AppendLine(int value);
    public void AppendLine(int value, string format);
    public void Append(long value);
    public void Append(long value, string format);
    public void AppendLine(long value);
    public void AppendLine(long value, string format);
    public void Append(sbyte value);
    public void Append(sbyte value, string format);
    public void AppendLine(sbyte value);
    public void AppendLine(sbyte value, string format);
    public void Append(float value);
    public void Append(float value, string format);
    public void AppendLine(float value);
    public void AppendLine(float value, string format);
    public void Append(TimeSpan value);
    public void Append(TimeSpan value, string format);
    public void AppendLine(TimeSpan value);
    public void AppendLine(TimeSpan value, string format);
    public void Append(ushort value);
    public void Append(ushort value, string format);
    public void AppendLine(ushort value);
    public void AppendLine(ushort value, string format);
    public void Append(UInt32 value);
    public void Append(UInt32 value, string format);
    public void AppendLine(UInt32 value);
    public void AppendLine(UInt32 value, string format);
    public void Append(ulong value);
    public void Append(ulong value, string format);
    public void AppendLine(ulong value);
    public void AppendLine(ulong value, string format);
    public void Append(Guid value);
    public void Append(Guid value, string format);
    public void AppendLine(Guid value);
    public void AppendLine(Guid value, string format);
    public int get_Length();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> AsSpan();
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<char> AsMemory();
    [NullableContextAttribute("0")]
public ArraySegment`1<char> AsArraySegment();
    public sealed virtual void Dispose();
    public void Clear();
    public void TryGrow(int sizeHint);
    public void Grow(int sizeHint);
    public void AppendLine();
    public void Append(char value);
    public void Append(char value, int repeatCount);
    public void AppendLine(char value);
    public void Append(string value);
    public void AppendLine(string value);
    public void Append(string value, int startIndex, int count);
    public void Append(Char[] value, int startIndex, int charCount);
    [NullableContextAttribute("0")]
public void Append(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
public void AppendLine(ReadOnlySpan`1<char> value);
    public void Append(T value);
    public void AppendLine(T value);
    public void Insert(int index, string value, int count);
    public void Insert(int index, string value);
    [NullableContextAttribute("0")]
public void Insert(int index, ReadOnlySpan`1<char> value, int count);
    public void Replace(char oldChar, char newChar);
    public void Replace(char oldChar, char newChar, int startIndex, int count);
    public void Replace(string oldValue, string newValue);
    [NullableContextAttribute("0")]
public void Replace(ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue);
    public void Replace(string oldValue, string newValue, int startIndex, int count);
    [NullableContextAttribute("0")]
public void Replace(ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue, int startIndex, int count);
    public void ReplaceAt(char newChar, int replaceIndex);
    public void Remove(int startIndex, int length);
    [NullableContextAttribute("0")]
public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public virtual string ToString();
    [NullableContextAttribute("0")]
public sealed virtual Memory`1<char> GetMemory(int sizeHint);
    [NullableContextAttribute("0")]
public sealed virtual Span`1<char> GetSpan(int sizeHint);
    public sealed virtual void Advance(int count);
    private sealed virtual override void Cysharp.Text.IResettableBufferWriter<System.Char>.Reset();
    private void ThrowArgumentException(string paramName);
    private static void ThrowFormatException();
    private void AppendFormatInternal(T arg, int width, ReadOnlySpan`1<char> format, string argName);
    private static void ThrowNestedException();
    public static void RegisterTryFormat(TryFormat`1<T> formatMethod);
    [NullableContextAttribute("0")]
private static TryFormat`1<Nullable`1<T>> CreateNullableFormatter();
    [NullableContextAttribute("0")]
public static void EnableNullableFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Cysharp.Text.Utf8FormatHelper : object {
    private static byte sp;
    public static void FormatTo(TBufferWriter& sb, T arg, int width, StandardFormat format, string argName);
    private static void FormatToRightJustify(TBufferWriter& sb, T arg, int width, StandardFormat format, string argName);
}
[IsReadOnlyAttribute]
internal class Cysharp.Text.Utf8FormatSegment : ValueType {
    public static int NotFormatIndex;
    public int Offset;
    public int Count;
    public int FormatIndex;
    public StandardFormat StandardFormat;
    public int Alignment;
    public bool IsFormatArgument { get; }
    public Utf8FormatSegment(int offset, int count, int formatIndex, StandardFormat format, int alignment);
    public bool get_IsFormatArgument();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`1 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`1(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1);
    public void FormatTo(TBufferWriter& sb, T1 arg1);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`10 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`10(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`11 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`11(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`12 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`12(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`13 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`13(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`14 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`14(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`15 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`15(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`16 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`16(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`2 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`2(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`3 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`3(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`4 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`4(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`5 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`5(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`6 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`6(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`7 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`7(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`8 : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    private Utf8FormatSegment[] segments;
    private Byte[] utf8PreEncodedbuffer;
    public string FormatString { get; }
    public int MinSize { get; }
    public Utf8PreparedFormat`8(string format);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8PreparedFormat`9 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSize>k__BackingField;
    [NullableAttribute("1")]
private Utf8FormatSegment[] segments;
    [NullableAttribute("1")]
private Byte[] utf8PreEncodedbuffer;
    [NullableAttribute("1")]
public string FormatString { get; }
    public int MinSize { get; }
    [NullableContextAttribute("1")]
public Utf8PreparedFormat`9(string format);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public int get_MinSize();
    [NullableContextAttribute("1")]
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    [NullableContextAttribute("1")]
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.Utf8ValueStringBuilder : ValueType {
    private static int ThreadStaticBufferSize;
    private static int DefaultBufferSize;
    private static Encoding UTF8NoBom;
    private static byte newLine1;
    private static byte newLine2;
    private static bool crlf;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Byte[] scratchBuffer;
    [ThreadStaticAttribute]
internal static bool scratchBufferUsed;
    [NullableAttribute("2")]
private Byte[] buffer;
    private int index;
    private bool disposeImmediately;
    public int Length { get; }
    private static Utf8ValueStringBuilder();
    public Utf8ValueStringBuilder(bool disposeImmediately);
    public void AppendJoin(char separator, T[] values);
    public void AppendJoin(char separator, List`1<T> values);
    [NullableContextAttribute("2")]
public void AppendJoin(char separator, ReadOnlySpan`1<T> values);
    public void AppendJoin(char separator, IEnumerable`1<T> values);
    public void AppendJoin(char separator, ICollection`1<T> values);
    public void AppendJoin(char separator, IList`1<T> values);
    public void AppendJoin(char separator, IReadOnlyList`1<T> values);
    public void AppendJoin(char separator, IReadOnlyCollection`1<T> values);
    public void AppendJoin(string separator, T[] values);
    public void AppendJoin(string separator, List`1<T> values);
    public void AppendJoin(string separator, ReadOnlySpan`1<T> values);
    public void AppendJoin(string separator, IEnumerable`1<T> values);
    public void AppendJoin(string separator, ICollection`1<T> values);
    public void AppendJoin(string separator, IList`1<T> values);
    public void AppendJoin(string separator, IReadOnlyList`1<T> values);
    public void AppendJoin(string separator, IReadOnlyCollection`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IList`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IReadOnlyList`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IEnumerable`1<T> values);
    public void AppendFormat(string format, T1 arg1);
    public void AppendFormat(string format, T1 arg1, T2 arg2);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    private static object CreateFormatter(Type type);
    public void Append(byte value);
    public void Append(byte value, StandardFormat format);
    public void AppendLine(byte value);
    public void AppendLine(byte value, StandardFormat format);
    public void Append(DateTime value);
    public void Append(DateTime value, StandardFormat format);
    public void AppendLine(DateTime value);
    public void AppendLine(DateTime value, StandardFormat format);
    public void Append(DateTimeOffset value);
    public void Append(DateTimeOffset value, StandardFormat format);
    public void AppendLine(DateTimeOffset value);
    public void AppendLine(DateTimeOffset value, StandardFormat format);
    public void Append(decimal value);
    public void Append(decimal value, StandardFormat format);
    public void AppendLine(decimal value);
    public void AppendLine(decimal value, StandardFormat format);
    public void Append(double value);
    public void Append(double value, StandardFormat format);
    public void AppendLine(double value);
    public void AppendLine(double value, StandardFormat format);
    public void Append(short value);
    public void Append(short value, StandardFormat format);
    public void AppendLine(short value);
    public void AppendLine(short value, StandardFormat format);
    public void Append(int value);
    public void Append(int value, StandardFormat format);
    public void AppendLine(int value);
    public void AppendLine(int value, StandardFormat format);
    public void Append(long value);
    public void Append(long value, StandardFormat format);
    public void AppendLine(long value);
    public void AppendLine(long value, StandardFormat format);
    public void Append(sbyte value);
    public void Append(sbyte value, StandardFormat format);
    public void AppendLine(sbyte value);
    public void AppendLine(sbyte value, StandardFormat format);
    public void Append(float value);
    public void Append(float value, StandardFormat format);
    public void AppendLine(float value);
    public void AppendLine(float value, StandardFormat format);
    public void Append(TimeSpan value);
    public void Append(TimeSpan value, StandardFormat format);
    public void AppendLine(TimeSpan value);
    public void AppendLine(TimeSpan value, StandardFormat format);
    public void Append(ushort value);
    public void Append(ushort value, StandardFormat format);
    public void AppendLine(ushort value);
    public void AppendLine(ushort value, StandardFormat format);
    public void Append(UInt32 value);
    public void Append(UInt32 value, StandardFormat format);
    public void AppendLine(UInt32 value);
    public void AppendLine(UInt32 value, StandardFormat format);
    public void Append(ulong value);
    public void Append(ulong value, StandardFormat format);
    public void AppendLine(ulong value);
    public void AppendLine(ulong value, StandardFormat format);
    public void Append(Guid value);
    public void Append(Guid value, StandardFormat format);
    public void AppendLine(Guid value);
    public void AppendLine(Guid value, StandardFormat format);
    public void Append(bool value);
    public void Append(bool value, StandardFormat format);
    public void AppendLine(bool value);
    public void AppendLine(bool value, StandardFormat format);
    public int get_Length();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<byte> AsSpan();
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<byte> AsMemory();
    [NullableContextAttribute("0")]
public ArraySegment`1<byte> AsArraySegment();
    public sealed virtual void Dispose();
    public void Clear();
    public void TryGrow(int sizeHint);
    public void Grow(int sizeHint);
    public void AppendLine();
    public void Append(char value);
    public void Append(char value, int repeatCount);
    public void AppendLine(char value);
    public void Append(string value, int startIndex, int count);
    public void Append(string value);
    public void AppendLine(string value);
    [NullableContextAttribute("0")]
public void Append(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
public void AppendLine(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
public void AppendLiteral(ReadOnlySpan`1<byte> value);
    public void Append(T value);
    public void AppendLine(T value);
    public void CopyTo(IBufferWriter`1<byte> bufferWriter);
    [NullableContextAttribute("0")]
public bool TryCopyTo(Span`1<byte> destination, Int32& bytesWritten);
    public Task WriteToAsync(Stream stream);
    public Task WriteToAsync(Stream stream, CancellationToken cancellationToken);
    public virtual string ToString();
    [NullableContextAttribute("0")]
public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    [NullableContextAttribute("0")]
public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public sealed virtual void Advance(int count);
    private sealed virtual override void Cysharp.Text.IResettableBufferWriter<System.Byte>.Reset();
    private void ThrowArgumentException(string paramName);
    private void ThrowFormatException();
    private static void ThrowNestedException();
    private void AppendFormatInternal(T arg, int width, StandardFormat format, string argName);
    public static void RegisterTryFormat(TryFormat`1<T> formatMethod);
    [NullableContextAttribute("0")]
private static TryFormat`1<Nullable`1<T>> CreateNullableFormatter();
    [NullableContextAttribute("0")]
public static void EnableNullableFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Cysharp.Text.ZString : object {
    private static Encoding UTF8NoBom;
    private static ZString();
    public static string Concat(T1 arg1);
    public static string Concat(T1 arg1, T2 arg2);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public static string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    [NullableContextAttribute("0")]
internal static void AppendChars(TBufferWriter& sb, ReadOnlySpan`1<char> chars);
    public static Utf16ValueStringBuilder CreateStringBuilder();
    public static Utf8ValueStringBuilder CreateUtf8StringBuilder();
    public static Utf16ValueStringBuilder CreateStringBuilder(bool notNested);
    public static Utf8ValueStringBuilder CreateUtf8StringBuilder(bool notNested);
    public static string Join(char separator, T[] values);
    public static string Join(char separator, List`1<T> values);
    public static string Join(char separator, ReadOnlySpan`1<T> values);
    public static string Join(char separator, IEnumerable`1<T> values);
    public static string Join(char separator, ICollection`1<T> values);
    public static string Join(char separator, IList`1<T> values);
    public static string Join(char separator, IReadOnlyList`1<T> values);
    public static string Join(char separator, IReadOnlyCollection`1<T> values);
    public static string Join(string separator, T[] values);
    public static string Join(string separator, List`1<T> values);
    public static string Join(string separator, ReadOnlySpan`1<T> values);
    public static string Join(string separator, ICollection`1<T> values);
    public static string Join(string separator, IList`1<T> values);
    public static string Join(string separator, IReadOnlyList`1<T> values);
    public static string Join(string separator, IReadOnlyCollection`1<T> values);
    public static string Join(string separator, IEnumerable`1<T> values);
    public static string Concat(T[] values);
    public static string Concat(List`1<T> values);
    public static string Concat(ReadOnlySpan`1<T> values);
    public static string Concat(ICollection`1<T> values);
    public static string Concat(IList`1<T> values);
    public static string Concat(IReadOnlyList`1<T> values);
    public static string Concat(IReadOnlyCollection`1<T> values);
    public static string Concat(IEnumerable`1<T> values);
    private static string JoinInternal(ReadOnlySpan`1<char> separator, IList`1<T> values);
    private static string JoinInternal(ReadOnlySpan`1<char> separator, IReadOnlyList`1<T> values);
    [NullableContextAttribute("0")]
private static string JoinInternal(ReadOnlySpan`1<char> separator, ReadOnlySpan`1<T> values);
    private static string JoinInternal(ReadOnlySpan`1<char> separator, IEnumerable`1<T> values);
    public static string Format(string format, T1 arg1);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1);
    public static string Format(string format, T1 arg1, T2 arg2);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public static string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public static string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public static Utf16PreparedFormat`1<T1> PrepareUtf16(string format);
    public static Utf8PreparedFormat`1<T1> PrepareUtf8(string format);
    public static Utf16PreparedFormat`2<T1, T2> PrepareUtf16(string format);
    public static Utf8PreparedFormat`2<T1, T2> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`3<T1, T2, T3> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`3<T1, T2, T3> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`4<T1, T2, T3, T4> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`4<T1, T2, T3, T4> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`5<T1, T2, T3, T4, T5> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`5<T1, T2, T3, T4, T5> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`6<T1, T2, T3, T4, T5, T6> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`6<T1, T2, T3, T4, T5, T6> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`7<T1, T2, T3, T4, T5, T6, T7> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`7<T1, T2, T3, T4, T5, T6, T7> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`8<T1, T2, T3, T4, T5, T6, T7, T8> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`8<T1, T2, T3, T4, T5, T6, T7, T8> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> PrepareUtf8(string format);
    [NullableContextAttribute("2")]
public static Utf16PreparedFormat`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> PrepareUtf16(string format);
    [NullableContextAttribute("2")]
public static Utf8PreparedFormat`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> PrepareUtf8(string format);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public static void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Cysharp.Text.ZStringWriter : TextWriter {
    private Utf16ValueStringBuilder sb;
    private bool isOpen;
    [NullableAttribute("2")]
private UnicodeEncoding encoding;
    public Encoding Encoding { get; }
    public ZStringWriter(IFormatProvider formatProvider);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(string value);
    public virtual Task WriteAsync(char value);
    public virtual Task WriteAsync(string value);
    public virtual Task WriteAsync(Char[] buffer, int index, int count);
    public virtual Task WriteLineAsync(char value);
    public virtual Task WriteLineAsync(string value);
    public virtual Task WriteLineAsync(Char[] buffer, int index, int count);
    public virtual void Write(bool value);
    public virtual void Write(decimal value);
    public virtual Task FlushAsync();
    public virtual string ToString();
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<char> buffer);
    [NullableContextAttribute("0")]
public virtual void WriteLine(ReadOnlySpan`1<char> buffer);
    [NullableContextAttribute("0")]
public virtual Task WriteAsync(ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task WriteLineAsync(ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    private void AssertNotDisposed();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
