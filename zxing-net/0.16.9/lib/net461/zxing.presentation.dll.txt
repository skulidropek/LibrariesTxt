[ExtensionAttribute]
public static class ZXing.BarcodeReaderExtensions : object {
    [ExtensionAttribute]
public static Result Decode(IBarcodeReaderGeneric reader, BitmapSource image);
    [ExtensionAttribute]
public static Result[] DecodeMultiple(IBarcodeReaderGeneric reader, BitmapSource image);
}
[ExtensionAttribute]
public static class ZXing.BarcodeWriterExtensions : object {
    [ExtensionAttribute]
public static WriteableBitmap WriteAsWriteableBitmap(IBarcodeWriterGeneric writer, string content);
}
[ExtensionAttribute]
public static class ZXing.BarcodeWriterGeometryExtensions : object {
    [ExtensionAttribute]
public static Geometry WriteAsGeometry(IBarcodeWriterGeneric writer, string content);
}
public class ZXing.BitmapSourceLuminanceSource : BaseLuminanceSource {
    protected BitmapSourceLuminanceSource(int width, int height);
    public BitmapSourceLuminanceSource(BitmapSource bitmap);
    private void CalculateLuminanceRGB(BitmapSource bitmap);
    private void CalculateLuminanceBGR(BitmapSource bitmap);
    private void CalculateLuminanceBGRA(BitmapSource bitmap);
    private void CalculateLuminanceBGR565(BitmapSource bitmap);
    protected virtual LuminanceSource CreateLuminanceSource(Byte[] newLuminances, int width, int height);
}
public class ZXing.Presentation.BarcodeReader : BarcodeReader`1<BitmapSource> {
    private static Func`2<BitmapSource, LuminanceSource> defaultCreateLuminanceSource;
    public BarcodeReader(Reader reader, Func`2<BitmapSource, LuminanceSource> createLuminanceSource, Func`2<LuminanceSource, Binarizer> createBinarizer);
    public BarcodeReader(Reader reader, Func`2<BitmapSource, LuminanceSource> createLuminanceSource, Func`2<LuminanceSource, Binarizer> createBinarizer, Func`5<Byte[], int, int, BitmapFormat, LuminanceSource> createRGBLuminanceSource);
    private static BarcodeReader();
}
public class ZXing.Presentation.BarcodeWriter : BarcodeWriter`1<WriteableBitmap> {
}
public class ZXing.Presentation.BarcodeWriterGeometry : BarcodeWriter`1<Geometry> {
}
public class ZXing.Rendering.GeometryRenderer : object {
    public sealed virtual Geometry Render(BitMatrix matrix, BarcodeFormat format, string content);
    public sealed virtual Geometry Render(BitMatrix matrix, BarcodeFormat format, string content, EncodingOptions options);
    private static bool IsEdgeLeftHand(BitMatrix b, Edge edge);
    private static IEnumerable`1<Edge> EdgesFrom(Coordinate c, Dictionary`2<Coordinate, List`1<Edge>> edgeMap);
    private static IEnumerable`1<Coordinate> Turns(Coordinate currentDirection);
    private static bool GetCell(int c, int r, BitMatrix matrix);
    private static void RemoveEdge(Edge e, HashSet`1<Edge> edges, Dictionary`2<Coordinate, List`1<Edge>> edgeMap);
    private static void AddEdge(Edge e, HashSet`1<Edge> edges, Dictionary`2<Coordinate, List`1<Edge>> edgeMap);
    private static void AddCoordinate(Coordinate c, Edge e, Dictionary`2<Coordinate, List`1<Edge>> edgeMap);
}
public class ZXing.Rendering.WriteableBitmapRenderer : object {
    [CompilerGeneratedAttribute]
private Color <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStretch <FontStretch>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyle <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <FontWeight>k__BackingField;
    private static FontFamily DefaultFontFamily;
    public Color Foreground { get; public set; }
    public Color Background { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public double FontSize { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    private static WriteableBitmapRenderer();
    [CompilerGeneratedAttribute]
public Color get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Color value);
    [CompilerGeneratedAttribute]
public Color get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(Color value);
    [CompilerGeneratedAttribute]
public FontFamily get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(FontFamily value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public FontStretch get_FontStretch();
    [CompilerGeneratedAttribute]
public void set_FontStretch(FontStretch value);
    [CompilerGeneratedAttribute]
public FontStyle get_FontStyle();
    [CompilerGeneratedAttribute]
public void set_FontStyle(FontStyle value);
    [CompilerGeneratedAttribute]
public FontWeight get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(FontWeight value);
    public sealed virtual WriteableBitmap Render(BitMatrix matrix, BarcodeFormat format, string content);
    public virtual WriteableBitmap Render(BitMatrix matrix, BarcodeFormat format, string content, EncodingOptions options);
}
