public class ZXing.Mobile.BarcodeWriter : BarcodeWriter`1<Bitmap> {
}
public class ZXing.Mobile.BitmapRenderer : object {
    [CompilerGeneratedAttribute]
private Color <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Background>k__BackingField;
    public Color Foreground { get; public set; }
    public Color Background { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Color value);
    [CompilerGeneratedAttribute]
public Color get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(Color value);
    public sealed virtual Bitmap Render(BitMatrix matrix, BarcodeFormat format, string content);
    public sealed virtual Bitmap Render(BitMatrix matrix, BarcodeFormat format, string content, EncodingOptions options);
}
public class ZXing.Mobile.CameraAccess.CameraAnalyzer : object {
    private CameraController cameraController;
    private CameraEventsListener cameraEventListener;
    private Task processingTask;
    private DateTime lastPreviewAnalysis;
    private bool wasScanned;
    private IScannerSessionHost scannerHost;
    private BarcodeReaderGeneric barcodeReader;
    public Action`1<Result> BarcodeFound;
    [CompilerGeneratedAttribute]
private Torch <Torch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnalyzing>k__BackingField;
    public Torch Torch { get; }
    public bool IsAnalyzing { get; private set; }
    private bool CanAnalyzeFrame { get; }
    public CameraAnalyzer(SurfaceView surfaceView, IScannerSessionHost scannerHost);
    [CompilerGeneratedAttribute]
public Torch get_Torch();
    [CompilerGeneratedAttribute]
public bool get_IsAnalyzing();
    [CompilerGeneratedAttribute]
private void set_IsAnalyzing(bool value);
    public void PauseAnalysis();
    public void ResumeAnalysis();
    public void ShutdownCamera();
    public void SetupCamera();
    public void AutoFocus();
    public void AutoFocus(int x, int y);
    public void RefreshCamera();
    private bool get_CanAnalyzeFrame();
    private void HandleOnPreviewFrameReady(object sender, FastJavaByteArray fastArray);
    private void DecodeFrame(FastJavaByteArray fastArray);
}
public class ZXing.Mobile.CameraAccess.CameraController : object {
    private Context context;
    private ISurfaceHolder holder;
    private SurfaceView surfaceView;
    private CameraEventsListener cameraEventListener;
    private int cameraId;
    private IScannerSessionHost scannerHost;
    [CompilerGeneratedAttribute]
private Camera <Camera>k__BackingField;
    [CompilerGeneratedAttribute]
private CameraResolution <CameraResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastCameraDisplayOrientationDegree>k__BackingField;
    public Camera Camera { get; private set; }
    public CameraResolution CameraResolution { get; private set; }
    public int LastCameraDisplayOrientationDegree { get; private set; }
    public CameraController(SurfaceView surfaceView, CameraEventsListener cameraEventListener, IScannerSessionHost scannerHost);
    [CompilerGeneratedAttribute]
public Camera get_Camera();
    [CompilerGeneratedAttribute]
private void set_Camera(Camera value);
    [CompilerGeneratedAttribute]
public CameraResolution get_CameraResolution();
    [CompilerGeneratedAttribute]
private void set_CameraResolution(CameraResolution value);
    [CompilerGeneratedAttribute]
public int get_LastCameraDisplayOrientationDegree();
    [CompilerGeneratedAttribute]
private void set_LastCameraDisplayOrientationDegree(int value);
    public void RefreshCamera();
    public void SetupCamera();
    public void AutoFocus();
    public void AutoFocus(int x, int y);
    public void ShutdownCamera();
    private void OpenCamera();
    private void ApplyCameraSettings();
    private void AutoFocus(int x, int y, bool useCoordinates);
    private void SetCameraDisplayOrientation();
    private int GetCameraDisplayOrientation();
}
public class ZXing.Mobile.CameraAccess.CameraEventsListener : Object {
    [CompilerGeneratedAttribute]
private EventHandler`1<FastJavaByteArray> OnPreviewFrameReady;
    [CompilerGeneratedAttribute]
public void add_OnPreviewFrameReady(EventHandler`1<FastJavaByteArray> value);
    [CompilerGeneratedAttribute]
public void remove_OnPreviewFrameReady(EventHandler`1<FastJavaByteArray> value);
    public sealed virtual void OnPreviewFrame(IntPtr data, Camera camera);
    public sealed virtual void OnAutoFocus(bool success, Camera camera);
}
public class ZXing.Mobile.CameraAccess.Torch : object {
    private CameraController cameraController;
    private Context context;
    private Nullable`1<bool> hasTorch;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public bool IsSupported { get; }
    public bool IsEnabled { get; private set; }
    public Torch(CameraController cameraController, Context context);
    public bool get_IsSupported();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(bool value);
    public void TurnOn();
    public void TurnOff();
    public void Toggle();
    private void Enable(bool state);
}
public class ZXing.Mobile.CameraResolution : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
public class ZXing.Mobile.CancelScanRequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
[ExtensionAttribute]
public static class ZXing.Mobile.FastJavaArrayEx : object {
    [ExtensionAttribute]
public static void BlockCopyTo(FastJavaByteArray self, int sourceIndex, Byte[] array, int arrayIndex, int length);
}
public class ZXing.Mobile.FastJavaByteArrayYUVLuminanceSource : BaseLuminanceSource {
    private FastJavaByteArray _yuv;
    private int _dataWidth;
    private int _dataHeight;
    private int _left;
    private int _top;
    public Byte[] Matrix { get; }
    public bool CropSupported { get; }
    public FastJavaByteArrayYUVLuminanceSource(FastJavaByteArray yuv, int dataWidth, int dataHeight, int left, int top, int width, int height);
    public virtual Byte[] getRow(int y, Byte[] row);
    public virtual Byte[] get_Matrix();
    public virtual bool get_CropSupported();
    public virtual LuminanceSource crop(int left, int top, int width, int height);
    protected virtual LuminanceSource CreateLuminanceSource(Byte[] newLuminances, int width, int height);
}
public interface ZXing.Mobile.IMobileBarcodeScanner {
    public bool UseCustomOverlay { get; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string CameraUnsupportedMessage { get; public set; }
    public bool IsTorchOn { get; }
    public abstract virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public abstract virtual Task`1<Result> Scan();
    public abstract virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public abstract virtual void ScanContinuously(Action`1<Result> scanHandler);
    public abstract virtual void Cancel();
    public abstract virtual void Torch(bool on);
    public abstract virtual void AutoFocus();
    public abstract virtual void ToggleTorch();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
    public abstract virtual bool get_UseCustomOverlay();
    public abstract virtual string get_TopText();
    public abstract virtual void set_TopText(string value);
    public abstract virtual string get_BottomText();
    public abstract virtual void set_BottomText(string value);
    public abstract virtual string get_CancelButtonText();
    public abstract virtual void set_CancelButtonText(string value);
    public abstract virtual string get_FlashButtonText();
    public abstract virtual void set_FlashButtonText(string value);
    public abstract virtual string get_CameraUnsupportedMessage();
    public abstract virtual void set_CameraUnsupportedMessage(string value);
    public abstract virtual bool get_IsTorchOn();
}
public interface ZXing.Mobile.IScannerSessionHost {
    public MobileBarcodeScanningOptions ScanningOptions { get; }
    public abstract virtual MobileBarcodeScanningOptions get_ScanningOptions();
}
public interface ZXing.Mobile.IScannerView {
    public bool IsTorchOn { get; }
    public bool IsAnalyzing { get; }
    public bool HasTorch { get; }
    public abstract virtual void StartScanning(Action`1<Result> scanResultHandler, MobileBarcodeScanningOptions options);
    public abstract virtual void StopScanning();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
    public abstract virtual void Torch(bool on);
    public abstract virtual void AutoFocus();
    public abstract virtual void AutoFocus(int x, int y);
    public abstract virtual void ToggleTorch();
    public abstract virtual bool get_IsTorchOn();
    public abstract virtual bool get_IsAnalyzing();
    public abstract virtual bool get_HasTorch();
}
public interface ZXing.Mobile.IZXingScanner`1 {
    public TOverlayViewType CustomOverlayView { get; public set; }
    public bool UseCustomOverlayView { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public abstract virtual TOverlayViewType get_CustomOverlayView();
    public abstract virtual void set_CustomOverlayView(TOverlayViewType value);
    public abstract virtual bool get_UseCustomOverlayView();
    public abstract virtual void set_UseCustomOverlayView(bool value);
    public abstract virtual string get_TopText();
    public abstract virtual void set_TopText(string value);
    public abstract virtual string get_BottomText();
    public abstract virtual void set_BottomText(string value);
}
public class ZXing.Mobile.MobileBarcodeScanner : MobileBarcodeScannerBase {
    public static string TAG;
    [CompilerGeneratedAttribute]
private View <CustomOverlay>k__BackingField;
    private bool torch;
    public bool IsTorchOn { get; }
    public View CustomOverlay { get; public set; }
    internal bool PlatformIsTorchOn { get; }
    public virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public virtual void Cancel();
    public virtual void AutoFocus();
    public virtual void Torch(bool on);
    public virtual void ToggleTorch();
    public virtual void PauseAnalysis();
    public virtual void ResumeAnalysis();
    public virtual bool get_IsTorchOn();
    [ObsoleteAttribute("Use Xamarin.Essentials.Platform.Init instead")]
public static void Initialize(Application app);
    [ObsoleteAttribute("No longer necessary.")]
public static void Uninitialize(Application app);
    [CompilerGeneratedAttribute]
public View get_CustomOverlay();
    [CompilerGeneratedAttribute]
public void set_CustomOverlay(View value);
    private Context GetContext(Context context);
    internal void PlatformScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public void ScanContinuously(Context context, MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    internal Task`1<Result> PlatformScan(MobileBarcodeScanningOptions options);
    public Task`1<Result> Scan(Context context, MobileBarcodeScanningOptions options);
    internal void PlatformCancel();
    internal void PlatformAutoFocus();
    internal void PlatformTorch(bool on);
    internal void PlatformToggleTorch();
    internal void PlatformPauseAnalysis();
    internal void PlatformResumeAnalysis();
    internal bool get_PlatformIsTorchOn();
    internal static void LogDebug(string format, Object[] args);
    internal static void LogError(string format, Object[] args);
    internal static void LogInfo(string format, Object[] args);
    internal static void LogWarn(string format, Object[] args);
}
public abstract class ZXing.Mobile.MobileBarcodeScannerBase : object {
    [CompilerGeneratedAttribute]
private bool <UseCustomOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlashButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CameraUnsupportedMessage>k__BackingField;
    public bool UseCustomOverlay { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string CameraUnsupportedMessage { get; public set; }
    public bool IsTorchOn { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomOverlay();
    [CompilerGeneratedAttribute]
public void set_UseCustomOverlay(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TopText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BottomText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BottomText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CancelButtonText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancelButtonText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FlashButtonText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FlashButtonText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CameraUnsupportedMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CameraUnsupportedMessage(string value);
    public abstract virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public sealed virtual Task`1<Result> Scan();
    public sealed virtual void ScanContinuously(Action`1<Result> scanHandler);
    public abstract virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public abstract virtual void Cancel();
    public abstract virtual void Torch(bool on);
    public abstract virtual void ToggleTorch();
    public abstract virtual bool get_IsTorchOn();
    public abstract virtual void AutoFocus();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
}
public class ZXing.Mobile.MobileBarcodeScanningOptions : object {
    [CompilerGeneratedAttribute]
private CameraResolutionSelectorDelegate <CameraResolutionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<BarcodeFormat> <PossibleFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TryHarder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PureBarcode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoRotate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseCode39ExtendedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TryInverted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseFrontCameraIfAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AssumeGS1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutofocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNativeScanning>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenContinuousScans>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenAnalyzingFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialDelayBeforeAnalyzingFrames>k__BackingField;
    public CameraResolutionSelectorDelegate CameraResolutionSelector { get; public set; }
    public IEnumerable`1<BarcodeFormat> PossibleFormats { get; public set; }
    public Nullable`1<bool> TryHarder { get; public set; }
    public Nullable`1<bool> PureBarcode { get; public set; }
    public Nullable`1<bool> AutoRotate { get; public set; }
    public Nullable`1<bool> UseCode39ExtendedMode { get; public set; }
    public string CharacterSet { get; public set; }
    public Nullable`1<bool> TryInverted { get; public set; }
    public Nullable`1<bool> UseFrontCameraIfAvailable { get; public set; }
    public Nullable`1<bool> AssumeGS1 { get; public set; }
    public bool DisableAutofocus { get; public set; }
    public bool UseNativeScanning { get; public set; }
    public int DelayBetweenContinuousScans { get; public set; }
    public int DelayBetweenAnalyzingFrames { get; public set; }
    public int InitialDelayBeforeAnalyzingFrames { get; public set; }
    public static MobileBarcodeScanningOptions Default { get; }
    [CompilerGeneratedAttribute]
public CameraResolutionSelectorDelegate get_CameraResolutionSelector();
    [CompilerGeneratedAttribute]
public void set_CameraResolutionSelector(CameraResolutionSelectorDelegate value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<BarcodeFormat> get_PossibleFormats();
    [CompilerGeneratedAttribute]
public void set_PossibleFormats(IEnumerable`1<BarcodeFormat> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TryHarder();
    [CompilerGeneratedAttribute]
public void set_TryHarder(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PureBarcode();
    [CompilerGeneratedAttribute]
public void set_PureBarcode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoRotate();
    [CompilerGeneratedAttribute]
public void set_AutoRotate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseCode39ExtendedMode();
    [CompilerGeneratedAttribute]
public void set_UseCode39ExtendedMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_CharacterSet();
    [CompilerGeneratedAttribute]
public void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TryInverted();
    [CompilerGeneratedAttribute]
public void set_TryInverted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseFrontCameraIfAvailable();
    [CompilerGeneratedAttribute]
public void set_UseFrontCameraIfAvailable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AssumeGS1();
    [CompilerGeneratedAttribute]
public void set_AssumeGS1(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutofocus();
    [CompilerGeneratedAttribute]
public void set_DisableAutofocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNativeScanning();
    [CompilerGeneratedAttribute]
public void set_UseNativeScanning(bool value);
    [CompilerGeneratedAttribute]
public int get_DelayBetweenContinuousScans();
    [CompilerGeneratedAttribute]
public void set_DelayBetweenContinuousScans(int value);
    [CompilerGeneratedAttribute]
public int get_DelayBetweenAnalyzingFrames();
    [CompilerGeneratedAttribute]
public void set_DelayBetweenAnalyzingFrames(int value);
    [CompilerGeneratedAttribute]
public int get_InitialDelayBeforeAnalyzingFrames();
    [CompilerGeneratedAttribute]
public void set_InitialDelayBeforeAnalyzingFrames(int value);
    public static MobileBarcodeScanningOptions get_Default();
    public BarcodeReaderGeneric BuildBarcodeReader();
    public MultiFormatReader BuildMultiFormatReader();
    public CameraResolution GetResolution(List`1<CameraResolution> availableResolutions);
}
public class ZXing.Mobile.PerformanceCounter : object {
    private static Dictionary`2<string, Stopwatch> counters;
    private static PerformanceCounter();
    public static string Start();
    public static TimeSpan Stop(string guid);
    public static void Stop(string guid, string msg);
}
[ActivityAttribute]
public class ZXing.Mobile.ZxingActivity : FragmentActivity {
    public static String[] RequiredPermissions;
    public static Action`1<Result> ScanCompletedHandler;
    public static Action CanceledHandler;
    public static Action CancelRequestedHandler;
    public static Action`1<bool> TorchRequestedHandler;
    public static Action AutoFocusRequestedHandler;
    public static Action PauseAnalysisHandler;
    public static Action ResumeAnalysisHandler;
    [CompilerGeneratedAttribute]
private static View <CustomOverlayView>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseCustomOverlayView>k__BackingField;
    [CompilerGeneratedAttribute]
private static MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <BottomText>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ScanContinuously>k__BackingField;
    private ZXingScannerFragment scannerFragment;
    public static View CustomOverlayView { get; public set; }
    public static bool UseCustomOverlayView { get; public set; }
    public static MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public static string TopText { get; public set; }
    public static string BottomText { get; public set; }
    public static bool ScanContinuously { get; public set; }
    private static ZxingActivity();
    public static void RequestCancel();
    public static void RequestTorch(bool torchOn);
    public static void RequestAutoFocus();
    public static void RequestPauseAnalysis();
    public static void RequestResumeAnalysis();
    [CompilerGeneratedAttribute]
public static View get_CustomOverlayView();
    [CompilerGeneratedAttribute]
public static void set_CustomOverlayView(View value);
    [CompilerGeneratedAttribute]
public static bool get_UseCustomOverlayView();
    [CompilerGeneratedAttribute]
public static void set_UseCustomOverlayView(bool value);
    [CompilerGeneratedAttribute]
public static MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public static void set_ScanningOptions(MobileBarcodeScanningOptions value);
    [CompilerGeneratedAttribute]
public static string get_TopText();
    [CompilerGeneratedAttribute]
public static void set_TopText(string value);
    [CompilerGeneratedAttribute]
public static string get_BottomText();
    [CompilerGeneratedAttribute]
public static void set_BottomText(string value);
    [CompilerGeneratedAttribute]
public static bool get_ScanContinuously();
    [CompilerGeneratedAttribute]
public static void set_ScanContinuously(bool value);
    protected virtual void OnCreate(Bundle bundle);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZxingActivity/<OnResume>d__39")]
protected virtual void OnResume();
    public virtual void OnRequestPermissionsResult(int requestCode, String[] permissions, Permission[] grantResults);
    private void StartScanning();
    public virtual void OnConfigurationChanged(Configuration newConfig);
    public void SetTorch(bool on);
    public void AutoFocus();
    public void CancelScan();
    public virtual bool OnKeyDown(Keycode keyCode, KeyEvent e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
    [CompilerGeneratedAttribute]
private void <StartScanning>b__41_0(Result result);
}
public class ZXing.Mobile.ZxingOverlayView : View {
    private Int32[] SCANNER_ALPHA;
    private static long ANIMATION_DELAY;
    private static int CURRENT_POINT_OPACITY;
    private static int MAX_RESULT_POINTS;
    private static int POINT_SIZE;
    private Paint paint;
    private Bitmap resultBitmap;
    private Color maskColor;
    private Color resultColor;
    private Color frameColor;
    private Color laserColor;
    private int scannerAlpha;
    private List`1<ResultPoint> possibleResultPoints;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public ZxingOverlayView(Context context);
    private Rect GetFramingRect(Canvas canvas);
    [CompilerGeneratedAttribute]
public string get_TopText();
    [CompilerGeneratedAttribute]
public void set_TopText(string value);
    [CompilerGeneratedAttribute]
public string get_BottomText();
    [CompilerGeneratedAttribute]
public void set_BottomText(string value);
    protected virtual void OnDraw(Canvas canvas);
    public void DrawResultBitmap(Bitmap barcode);
    public void AddPossibleResultPoint(ResultPoint point);
}
public class ZXing.Mobile.ZXingScannerFragment : Fragment {
    private FrameLayout frame;
    [CompilerGeneratedAttribute]
private View <CustomOverlayView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCustomOverlayView>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    private ZXingSurfaceView scanner;
    private ZxingOverlayView zxingOverlay;
    private Action`1<Result> scanCallback;
    public View CustomOverlayView { get; public set; }
    public bool UseCustomOverlayView { get; public set; }
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public bool IsTorchOn { get; }
    public bool IsAnalyzing { get; }
    public bool HasTorch { get; }
    public virtual View OnCreateView(LayoutInflater layoutInflater, ViewGroup viewGroup, Bundle bundle);
    public virtual void OnStart();
    public virtual void OnStop();
    private LayoutParams GetChildLayoutParams();
    [CompilerGeneratedAttribute]
public sealed virtual View get_CustomOverlayView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomOverlayView(View value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomOverlayView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCustomOverlayView(bool value);
    [CompilerGeneratedAttribute]
public MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public void set_ScanningOptions(MobileBarcodeScanningOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TopText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BottomText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BottomText(string value);
    public sealed virtual void Torch(bool on);
    public sealed virtual void AutoFocus();
    public sealed virtual void AutoFocus(int x, int y);
    public sealed virtual void StartScanning(Action`1<Result> scanResultHandler, MobileBarcodeScanningOptions options);
    private void Scan();
    public sealed virtual void StopScanning();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    public sealed virtual void ToggleTorch();
    public sealed virtual bool get_IsTorchOn();
    public sealed virtual bool get_IsAnalyzing();
    public sealed virtual bool get_HasTorch();
}
public class ZXing.Mobile.ZXingSurfaceView : SurfaceView {
    private bool addedHolderCallback;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    private CameraAnalyzer cameraAnalyzer;
    private bool surfaceCreated;
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public bool IsTorchOn { get; }
    public bool IsAnalyzing { get; }
    public bool HasTorch { get; }
    public ZXingSurfaceView(Context context, MobileBarcodeScanningOptions options);
    protected ZXingSurfaceView(IntPtr javaReference, JniHandleOwnership transfer);
    private void Init();
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingSurfaceView/<SurfaceCreated>d__4")]
public sealed virtual void SurfaceCreated(ISurfaceHolder holder);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingSurfaceView/<SurfaceChanged>d__5")]
public sealed virtual void SurfaceChanged(ISurfaceHolder holder, Format format, int wx, int hx);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingSurfaceView/<SurfaceDestroyed>d__6")]
public sealed virtual void SurfaceDestroyed(ISurfaceHolder holder);
    public virtual bool OnTouchEvent(MotionEvent e);
    public sealed virtual void AutoFocus();
    public sealed virtual void AutoFocus(int x, int y);
    public sealed virtual void StartScanning(Action`1<Result> scanResultCallback, MobileBarcodeScanningOptions options);
    public sealed virtual void StopScanning();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    public sealed virtual void Torch(bool on);
    public sealed virtual void ToggleTorch();
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public void set_ScanningOptions(MobileBarcodeScanningOptions value);
    public sealed virtual bool get_IsTorchOn();
    public sealed virtual bool get_IsAnalyzing();
    public sealed virtual bool get_HasTorch();
    protected virtual void OnAttachedToWindow();
    protected virtual void OnWindowVisibilityChanged(ViewStates visibility);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingSurfaceView/<OnWindowFocusChanged>d__30")]
public virtual void OnWindowFocusChanged(bool hasWindowFocus);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool hasWindowFocus);
}
public static class ZXing.Net.Mobile.Android.PermissionsHandler : object {
    [ObsoleteAttribute("Use Xamarin.Essentials.Platform.OnRequestPermissionsResult instead.")]
public static void OnRequestPermissionsResult(int requestCode, String[] permissions, Permission[] grantResults);
    [AsyncStateMachineAttribute("ZXing.Net.Mobile.Android.PermissionsHandler/<RequestPermissionsAsync>d__1")]
public static Task`1<bool> RequestPermissionsAsync();
    internal static bool IsTorchPermissionDeclared();
    [ObsoleteAttribute("Use Xamarin.Essentials.Permissions instead.")]
public static bool NeedsPermissionRequest(Activity activity);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class ZXing.Net.Mobile.Resource : object {
    private static Resource();
}
