public class ZXing.Mobile.BarcodeWriter : BarcodeWriter`1<WriteableBitmap> {
}
public class ZXing.Mobile.CameraResolution : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
public class ZXing.Mobile.CancelScanRequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
[GuidAttribute("5b0d3235-4dba-4d44-865e-8f1d0e4fd04d")]
[InterfaceTypeAttribute("1")]
internal interface ZXing.Mobile.IMemoryBufferByteAccess {
    public abstract virtual void GetBuffer(Byte*& buffer, UInt32& capacity);
}
public interface ZXing.Mobile.IMobileBarcodeScanner {
    public bool UseCustomOverlay { get; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string CameraUnsupportedMessage { get; public set; }
    public bool IsTorchOn { get; }
    public abstract virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public abstract virtual Task`1<Result> Scan();
    public abstract virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public abstract virtual void ScanContinuously(Action`1<Result> scanHandler);
    public abstract virtual void Cancel();
    public abstract virtual void Torch(bool on);
    public abstract virtual void AutoFocus();
    public abstract virtual void ToggleTorch();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
    public abstract virtual bool get_UseCustomOverlay();
    public abstract virtual string get_TopText();
    public abstract virtual void set_TopText(string value);
    public abstract virtual string get_BottomText();
    public abstract virtual void set_BottomText(string value);
    public abstract virtual string get_CancelButtonText();
    public abstract virtual void set_CancelButtonText(string value);
    public abstract virtual string get_FlashButtonText();
    public abstract virtual void set_FlashButtonText(string value);
    public abstract virtual string get_CameraUnsupportedMessage();
    public abstract virtual void set_CameraUnsupportedMessage(string value);
    public abstract virtual bool get_IsTorchOn();
}
public interface ZXing.Mobile.IScannerSessionHost {
    public MobileBarcodeScanningOptions ScanningOptions { get; }
    public abstract virtual MobileBarcodeScanningOptions get_ScanningOptions();
}
public interface ZXing.Mobile.IScannerView {
    public bool IsTorchOn { get; }
    public bool IsAnalyzing { get; }
    public bool HasTorch { get; }
    public abstract virtual void StartScanning(Action`1<Result> scanResultHandler, MobileBarcodeScanningOptions options);
    public abstract virtual void StopScanning();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
    public abstract virtual void Torch(bool on);
    public abstract virtual void AutoFocus();
    public abstract virtual void AutoFocus(int x, int y);
    public abstract virtual void ToggleTorch();
    public abstract virtual bool get_IsTorchOn();
    public abstract virtual bool get_IsAnalyzing();
    public abstract virtual bool get_HasTorch();
}
public interface ZXing.Mobile.IZXingScanner`1 {
    public TOverlayViewType CustomOverlayView { get; public set; }
    public bool UseCustomOverlayView { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public abstract virtual TOverlayViewType get_CustomOverlayView();
    public abstract virtual void set_CustomOverlayView(TOverlayViewType value);
    public abstract virtual bool get_UseCustomOverlayView();
    public abstract virtual void set_UseCustomOverlayView(bool value);
    public abstract virtual string get_TopText();
    public abstract virtual void set_TopText(string value);
    public abstract virtual string get_BottomText();
    public abstract virtual void set_BottomText(string value);
}
public class ZXing.Mobile.MobileBarcodeScanner : MobileBarcodeScannerBase {
    [CompilerGeneratedAttribute]
private ScanPage <ScanPage>k__BackingField;
    [CompilerGeneratedAttribute]
private CoreDispatcher <Dispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <RootFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private ScannerOpened OnCameraInitialized;
    [CompilerGeneratedAttribute]
private ScannerError OnCameraError;
    [CompilerGeneratedAttribute]
private UIElement <CustomOverlay>k__BackingField;
    public bool IsTorchOn { get; }
    internal ScanPage ScanPage { get; internal set; }
    public CoreDispatcher Dispatcher { get; public set; }
    public Frame RootFrame { get; public set; }
    private bool PlatformIsTorchOn { get; }
    public UIElement CustomOverlay { get; public set; }
    public MobileBarcodeScanner(CoreDispatcher dispatcher);
    public virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public virtual void Cancel();
    public virtual void AutoFocus();
    public virtual void Torch(bool on);
    public virtual void ToggleTorch();
    public virtual void PauseAnalysis();
    public virtual void ResumeAnalysis();
    public virtual bool get_IsTorchOn();
    [CompilerGeneratedAttribute]
internal ScanPage get_ScanPage();
    [CompilerGeneratedAttribute]
internal void set_ScanPage(ScanPage value);
    [CompilerGeneratedAttribute]
public CoreDispatcher get_Dispatcher();
    [CompilerGeneratedAttribute]
public void set_Dispatcher(CoreDispatcher value);
    [CompilerGeneratedAttribute]
public Frame get_RootFrame();
    [CompilerGeneratedAttribute]
public void set_RootFrame(Frame value);
    [AsyncStateMachineAttribute("ZXing.Mobile.MobileBarcodeScanner/<PlatformScanContinuously>d__24")]
private void PlatformScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    [AsyncStateMachineAttribute("ZXing.Mobile.MobileBarcodeScanner/<PlatformScan>d__25")]
private Task`1<Result> PlatformScan(MobileBarcodeScanningOptions options);
    [CompilerGeneratedAttribute]
public void add_OnCameraInitialized(ScannerOpened value);
    [CompilerGeneratedAttribute]
public void remove_OnCameraInitialized(ScannerOpened value);
    [CompilerGeneratedAttribute]
public void add_OnCameraError(ScannerError value);
    [CompilerGeneratedAttribute]
public void remove_OnCameraError(ScannerError value);
    [AsyncStateMachineAttribute("ZXing.Mobile.MobileBarcodeScanner/<PlatformCancel>d__34")]
private void PlatformCancel();
    private void PlatformTorch(bool on);
    private void PlatformToggleTorch();
    private bool get_PlatformIsTorchOn();
    private void PlatformAutoFocus();
    private void PlatformPauseAnalysis();
    private void PlatformResumeAnalysis();
    [CompilerGeneratedAttribute]
public UIElement get_CustomOverlay();
    [CompilerGeneratedAttribute]
public void set_CustomOverlay(UIElement value);
    internal static void Log(string message, Object[] args);
}
public abstract class ZXing.Mobile.MobileBarcodeScannerBase : object {
    [CompilerGeneratedAttribute]
private bool <UseCustomOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlashButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CameraUnsupportedMessage>k__BackingField;
    public bool UseCustomOverlay { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string CameraUnsupportedMessage { get; public set; }
    public bool IsTorchOn { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomOverlay();
    [CompilerGeneratedAttribute]
public void set_UseCustomOverlay(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TopText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BottomText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BottomText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CancelButtonText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancelButtonText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FlashButtonText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FlashButtonText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CameraUnsupportedMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CameraUnsupportedMessage(string value);
    public abstract virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public sealed virtual Task`1<Result> Scan();
    public sealed virtual void ScanContinuously(Action`1<Result> scanHandler);
    public abstract virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public abstract virtual void Cancel();
    public abstract virtual void Torch(bool on);
    public abstract virtual void ToggleTorch();
    public abstract virtual bool get_IsTorchOn();
    public abstract virtual void AutoFocus();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
}
public class ZXing.Mobile.MobileBarcodeScanningOptions : object {
    [CompilerGeneratedAttribute]
private CameraResolutionSelectorDelegate <CameraResolutionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<BarcodeFormat> <PossibleFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TryHarder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PureBarcode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoRotate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseCode39ExtendedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TryInverted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseFrontCameraIfAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AssumeGS1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutofocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNativeScanning>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenContinuousScans>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenAnalyzingFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialDelayBeforeAnalyzingFrames>k__BackingField;
    public CameraResolutionSelectorDelegate CameraResolutionSelector { get; public set; }
    public IEnumerable`1<BarcodeFormat> PossibleFormats { get; public set; }
    public Nullable`1<bool> TryHarder { get; public set; }
    public Nullable`1<bool> PureBarcode { get; public set; }
    public Nullable`1<bool> AutoRotate { get; public set; }
    public Nullable`1<bool> UseCode39ExtendedMode { get; public set; }
    public string CharacterSet { get; public set; }
    public Nullable`1<bool> TryInverted { get; public set; }
    public Nullable`1<bool> UseFrontCameraIfAvailable { get; public set; }
    public Nullable`1<bool> AssumeGS1 { get; public set; }
    public bool DisableAutofocus { get; public set; }
    public bool UseNativeScanning { get; public set; }
    public int DelayBetweenContinuousScans { get; public set; }
    public int DelayBetweenAnalyzingFrames { get; public set; }
    public int InitialDelayBeforeAnalyzingFrames { get; public set; }
    public static MobileBarcodeScanningOptions Default { get; }
    [CompilerGeneratedAttribute]
public CameraResolutionSelectorDelegate get_CameraResolutionSelector();
    [CompilerGeneratedAttribute]
public void set_CameraResolutionSelector(CameraResolutionSelectorDelegate value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<BarcodeFormat> get_PossibleFormats();
    [CompilerGeneratedAttribute]
public void set_PossibleFormats(IEnumerable`1<BarcodeFormat> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TryHarder();
    [CompilerGeneratedAttribute]
public void set_TryHarder(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PureBarcode();
    [CompilerGeneratedAttribute]
public void set_PureBarcode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoRotate();
    [CompilerGeneratedAttribute]
public void set_AutoRotate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseCode39ExtendedMode();
    [CompilerGeneratedAttribute]
public void set_UseCode39ExtendedMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_CharacterSet();
    [CompilerGeneratedAttribute]
public void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TryInverted();
    [CompilerGeneratedAttribute]
public void set_TryInverted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseFrontCameraIfAvailable();
    [CompilerGeneratedAttribute]
public void set_UseFrontCameraIfAvailable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AssumeGS1();
    [CompilerGeneratedAttribute]
public void set_AssumeGS1(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutofocus();
    [CompilerGeneratedAttribute]
public void set_DisableAutofocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNativeScanning();
    [CompilerGeneratedAttribute]
public void set_UseNativeScanning(bool value);
    [CompilerGeneratedAttribute]
public int get_DelayBetweenContinuousScans();
    [CompilerGeneratedAttribute]
public void set_DelayBetweenContinuousScans(int value);
    [CompilerGeneratedAttribute]
public int get_DelayBetweenAnalyzingFrames();
    [CompilerGeneratedAttribute]
public void set_DelayBetweenAnalyzingFrames(int value);
    [CompilerGeneratedAttribute]
public int get_InitialDelayBeforeAnalyzingFrames();
    [CompilerGeneratedAttribute]
public void set_InitialDelayBeforeAnalyzingFrames(int value);
    public static MobileBarcodeScanningOptions get_Default();
    public BarcodeReaderGeneric BuildBarcodeReader();
    public MultiFormatReader BuildMultiFormatReader();
    public CameraResolution GetResolution(List`1<CameraResolution> availableResolutions);
}
public class ZXing.Mobile.PerformanceCounter : object {
    private static Dictionary`2<string, Stopwatch> counters;
    private static PerformanceCounter();
    public static string Start();
    public static TimeSpan Stop(string guid);
    public static void Stop(string guid, string msg);
}
public class ZXing.Mobile.ScanPage : Page {
    [CompilerGeneratedAttribute]
private ScanPageNavigationParameters <Parameters>k__BackingField;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private ZXingScannerControl scannerControl;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private bool _contentLoaded;
    private ScanPageNavigationParameters Parameters { get; private set; }
    public bool UseCustomOverlay { get; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string CameraUnsupportedMessage { get; public set; }
    public bool IsTorchOn { get; }
    [CompilerGeneratedAttribute]
private ScanPageNavigationParameters get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(ScanPageNavigationParameters value);
    protected virtual void OnNavigatedTo(NavigationEventArgs e);
    private void ScannerControl_OnCameraInitialized();
    private void ScannerControl_OnScannerError(IEnumerable`1<string> errors);
    [AsyncStateMachineAttribute("ZXing.Mobile.ScanPage/<OnNavigatingFrom>d__8")]
protected virtual void OnNavigatingFrom(NavigatingCancelEventArgs e);
    public sealed virtual bool get_UseCustomOverlay();
    public sealed virtual string get_TopText();
    public sealed virtual void set_TopText(string value);
    public sealed virtual string get_BottomText();
    public sealed virtual void set_BottomText(string value);
    public sealed virtual string get_CancelButtonText();
    public sealed virtual void set_CancelButtonText(string value);
    public sealed virtual string get_FlashButtonText();
    public sealed virtual void set_FlashButtonText(string value);
    public sealed virtual string get_CameraUnsupportedMessage();
    public sealed virtual void set_CameraUnsupportedMessage(string value);
    public sealed virtual bool get_IsTorchOn();
    public sealed virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public sealed virtual Task`1<Result> Scan();
    public sealed virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public sealed virtual void ScanContinuously(Action`1<Result> scanHandler);
    public sealed virtual void Cancel();
    public sealed virtual void Torch(bool on);
    public sealed virtual void AutoFocus();
    public sealed virtual void ToggleTorch();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(NavigatingCancelEventArgs e);
}
public class ZXing.Mobile.ScanPageNavigationParameters : object {
    [CompilerGeneratedAttribute]
private MobileBarcodeScanner <Scanner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinuousScanning>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Result> <ResultHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <CameraInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<string>> <CameraError>k__BackingField;
    public MobileBarcodeScanner Scanner { get; public set; }
    public bool ContinuousScanning { get; public set; }
    public MobileBarcodeScanningOptions Options { get; public set; }
    public Action`1<Result> ResultHandler { get; public set; }
    public Action CameraInitialized { get; public set; }
    public Action`1<IEnumerable`1<string>> CameraError { get; public set; }
    [CompilerGeneratedAttribute]
public MobileBarcodeScanner get_Scanner();
    [CompilerGeneratedAttribute]
public void set_Scanner(MobileBarcodeScanner value);
    [CompilerGeneratedAttribute]
public bool get_ContinuousScanning();
    [CompilerGeneratedAttribute]
public void set_ContinuousScanning(bool value);
    [CompilerGeneratedAttribute]
public MobileBarcodeScanningOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(MobileBarcodeScanningOptions value);
    [CompilerGeneratedAttribute]
public Action`1<Result> get_ResultHandler();
    [CompilerGeneratedAttribute]
public void set_ResultHandler(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public Action get_CameraInitialized();
    [CompilerGeneratedAttribute]
public void set_CameraInitialized(Action value);
    [CompilerGeneratedAttribute]
public Action`1<IEnumerable`1<string>> get_CameraError();
    [CompilerGeneratedAttribute]
public void set_CameraError(Action`1<IEnumerable`1<string>> value);
}
public class ZXing.Mobile.SoftwareBitmapLuminanceSource : BaseLuminanceSource {
    public SoftwareBitmapLuminanceSource(SoftwareBitmap softwareBitmap);
    protected SoftwareBitmapLuminanceSource(int width, int height);
    protected SoftwareBitmapLuminanceSource(Byte[] luminanceArray, int width, int height);
    protected virtual LuminanceSource CreateLuminanceSource(Byte[] newLuminances, int width, int height);
    private void CalculateLuminance(SoftwareBitmap bitmap);
}
[ExtensionAttribute]
public static class ZXing.Mobile.VisualTreeHelperExt : object {
    [ExtensionAttribute]
public static T GetFirstChildOfType(DependencyObject start);
}
public class ZXing.Mobile.WriteableBitmapRenderer : object {
    [CompilerGeneratedAttribute]
private Color <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private FontFamily <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    private static FontFamily DefaultFontFamily;
    public Color Foreground { get; public set; }
    public Color Background { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public double FontSize { get; public set; }
    private static WriteableBitmapRenderer();
    [CompilerGeneratedAttribute]
public Color get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(Color value);
    [CompilerGeneratedAttribute]
public Color get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(Color value);
    [CompilerGeneratedAttribute]
public FontFamily get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(FontFamily value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    public sealed virtual WriteableBitmap Render(BitMatrix matrix, BarcodeFormat format, string content);
    public virtual WriteableBitmap Render(BitMatrix matrix, BarcodeFormat format, string content, EncodingOptions options);
}
public class ZXing.Mobile.ZXingScannerControl : UserControl {
    [CompilerGeneratedAttribute]
private ScannerOpened OnCameraInitialized;
    [CompilerGeneratedAttribute]
private ScannerError OnScannerError;
    private DisplayInformation displayInformation;
    private DisplayOrientations displayOrientation;
    private VideoFrame videoFrame;
    private bool mirroringPreview;
    private bool externalCamera;
    private static Guid rotationKey;
    private DisplayRequest displayRequest;
    private SystemMediaTransportControls systemMediaControls;
    private Timer timerPreview;
    private MediaCapture mediaCapture;
    private bool stopping;
    private bool isMediaCaptureInitialized;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) processing;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isAnalyzing;
    [CompilerGeneratedAttribute]
private Action`1<Result> <ScanCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileBarcodeScannerBase <Scanner>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <CustomOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCustomOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinuousScanning>k__BackingField;
    [CompilerGeneratedAttribute]
private Result <LastScanResult>k__BackingField;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private CaptureElement captureElement;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private Grid gridCustomOverlay;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private Grid gridDefaultOverlay;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private TextBlock bottomText;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private TextBlock topText;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private Button buttonToggleFlash;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
private bool _contentLoaded;
    public bool IsAnalyzing { get; }
    public Action`1<Result> ScanCallback { get; public set; }
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public MobileBarcodeScannerBase Scanner { get; public set; }
    public UIElement CustomOverlay { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public bool UseCustomOverlay { get; public set; }
    public bool ContinuousScanning { get; public set; }
    public Result LastScanResult { get; public set; }
    public bool IsTorchOn { get; }
    public bool IsFocusSupported { get; }
    public bool HasTorch { get; }
    private static ZXingScannerControl();
    [CompilerGeneratedAttribute]
public void add_OnCameraInitialized(ScannerOpened value);
    [CompilerGeneratedAttribute]
public void remove_OnCameraInitialized(ScannerOpened value);
    [CompilerGeneratedAttribute]
public void add_OnScannerError(ScannerError value);
    [CompilerGeneratedAttribute]
public void remove_OnScannerError(ScannerError value);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<DisplayInformation_OrientationChanged>d__9")]
private void DisplayInformation_OrientationChanged(DisplayInformation sender, object args);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<StartScanning>d__18")]
public sealed virtual void StartScanning(Action`1<Result> scanCallback, MobileBarcodeScanningOptions options);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<StopScanning>d__19")]
public sealed virtual void StopScanning();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    public sealed virtual bool get_IsAnalyzing();
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<StartScanningAsync>d__24")]
public Task StartScanningAsync(Action`1<Result> scanCallback, MobileBarcodeScanningOptions options);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<GetFilteredCameraOrDefaultAsync>d__25")]
private Task`1<DeviceInformation> GetFilteredCameraOrDefaultAsync(MobileBarcodeScanningOptions options);
    protected virtual void OnPointerPressed(PointerRoutedEventArgs e);
    [CompilerGeneratedAttribute]
public Action`1<Result> get_ScanCallback();
    [CompilerGeneratedAttribute]
public void set_ScanCallback(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public void set_ScanningOptions(MobileBarcodeScanningOptions value);
    [CompilerGeneratedAttribute]
public MobileBarcodeScannerBase get_Scanner();
    [CompilerGeneratedAttribute]
public void set_Scanner(MobileBarcodeScannerBase value);
    [CompilerGeneratedAttribute]
public UIElement get_CustomOverlay();
    [CompilerGeneratedAttribute]
public void set_CustomOverlay(UIElement value);
    [CompilerGeneratedAttribute]
public string get_TopText();
    [CompilerGeneratedAttribute]
public void set_TopText(string value);
    [CompilerGeneratedAttribute]
public string get_BottomText();
    [CompilerGeneratedAttribute]
public void set_BottomText(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCustomOverlay();
    [CompilerGeneratedAttribute]
public void set_UseCustomOverlay(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContinuousScanning();
    [CompilerGeneratedAttribute]
public void set_ContinuousScanning(bool value);
    [CompilerGeneratedAttribute]
public Result get_LastScanResult();
    [CompilerGeneratedAttribute]
public void set_LastScanResult(Result value);
    public sealed virtual bool get_IsTorchOn();
    public bool get_IsFocusSupported();
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<SetupAutoFocus>d__73")]
private Task SetupAutoFocus();
    public sealed virtual void Torch(bool on);
    public sealed virtual void ToggleTorch();
    public sealed virtual bool get_HasTorch();
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<AutoFocus>d__78")]
public sealed virtual void AutoFocus();
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<AutoFocus>d__79")]
public sealed virtual void AutoFocus(int x, int y);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<AutoFocusAsync>d__80")]
public Task AutoFocusAsync(int x, int y, bool useCoordinates);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<StopScanningAsync>d__81")]
public Task StopScanningAsync();
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<Cancel>d__82")]
public Task Cancel();
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<Dispose>d__83")]
public sealed virtual void Dispose();
    protected virtual void OnTapped(TappedRoutedEventArgs e);
    private void ButtonToggleFlash_Click(object sender, RoutedEventArgs e);
    [AsyncStateMachineAttribute("ZXing.Mobile.ZXingScannerControl/<SetPreviewRotationAsync>d__86")]
private Task SetPreviewRotationAsync(IMediaEncodingProperties props);
    private Size GetPreviewResolution(IMediaEncodingProperties props);
    private void CalculatePreviewRotation(VideoRotation& sourceRotation, Int32& rotationDegrees);
    private Rect ConvertUiTapToPreviewRect(Point tap, Size size, Rect previewRect);
    private static Rect GetPreviewStreamRectInControl(Size previewResolution, CaptureElement previewControl);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
public class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_ZXingScannerControl();
    private object Activate_7_MobileBarcodeScanningOptions();
    private object Activate_12_ScanPage();
    private IXamlType CreateXamlType(int typeIndex);
    private object get_0_ZXingScannerControl_IsAnalyzing(object instance);
    private object get_1_ZXingScannerControl_ScanCallback(object instance);
    private void set_1_ZXingScannerControl_ScanCallback(object instance, object Value);
    private object get_2_ZXingScannerControl_ScanningOptions(object instance);
    private void set_2_ZXingScannerControl_ScanningOptions(object instance, object Value);
    private object get_3_ZXingScannerControl_Scanner(object instance);
    private void set_3_ZXingScannerControl_Scanner(object instance, object Value);
    private object get_4_ZXingScannerControl_CustomOverlay(object instance);
    private void set_4_ZXingScannerControl_CustomOverlay(object instance, object Value);
    private object get_5_ZXingScannerControl_TopText(object instance);
    private void set_5_ZXingScannerControl_TopText(object instance, object Value);
    private object get_6_ZXingScannerControl_BottomText(object instance);
    private void set_6_ZXingScannerControl_BottomText(object instance, object Value);
    private object get_7_ZXingScannerControl_UseCustomOverlay(object instance);
    private void set_7_ZXingScannerControl_UseCustomOverlay(object instance, object Value);
    private object get_8_ZXingScannerControl_ContinuousScanning(object instance);
    private void set_8_ZXingScannerControl_ContinuousScanning(object instance, object Value);
    private object get_9_ZXingScannerControl_LastScanResult(object instance);
    private void set_9_ZXingScannerControl_LastScanResult(object instance, object Value);
    private object get_10_ZXingScannerControl_IsTorchOn(object instance);
    private object get_11_ZXingScannerControl_IsFocusSupported(object instance);
    private object get_12_ZXingScannerControl_HasTorch(object instance);
    private object get_13_ScanPage_UseCustomOverlay(object instance);
    private object get_14_ScanPage_TopText(object instance);
    private void set_14_ScanPage_TopText(object instance, object Value);
    private object get_15_ScanPage_BottomText(object instance);
    private void set_15_ScanPage_BottomText(object instance, object Value);
    private object get_16_ScanPage_CancelButtonText(object instance);
    private void set_16_ScanPage_CancelButtonText(object instance, object Value);
    private object get_17_ScanPage_FlashButtonText(object instance);
    private void set_17_ScanPage_FlashButtonText(object instance, object Value);
    private object get_18_ScanPage_CameraUnsupportedMessage(object instance);
    private void set_18_ScanPage_CameraUnsupportedMessage(object instance, object Value);
    private object get_19_ScanPage_IsTorchOn(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.16.0")]
[DebuggerNonUserCodeAttribute]
internal class ZXing.Net.Mobile.ZXing_Net_Mobile_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
