public class ZXing.Mobile.AVCaptureScannerView : UIView {
    private AVCaptureSession session;
    private AVCaptureVideoPreviewLayer previewLayer;
    private Action`1<Result> resultCallback;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) stopped;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) foundResult;
    private CaptureDelegate captureDelegate;
    private UIView layerView;
    private UIView overlayView;
    [CompilerGeneratedAttribute]
private Action OnCancelButtonPressed;
    [CompilerGeneratedAttribute]
private string <CancelButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlashButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    private bool torch;
    private bool analyzing;
    private DateTime lastAnalysis;
    private bool wasScanned;
    private bool working;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    [CompilerGeneratedAttribute]
private UIView <CustomOverlayView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCustomOverlayView>k__BackingField;
    private Nullable`1<bool> hasTorch;
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public UIView CustomOverlayView { get; public set; }
    public bool UseCustomOverlayView { get; public set; }
    public bool IsAnalyzing { get; }
    public bool IsTorchOn { get; }
    public bool HasTorch { get; }
    public AVCaptureScannerView(IntPtr handle);
    public AVCaptureScannerView(CGRect frame);
    [CompilerGeneratedAttribute]
public void add_OnCancelButtonPressed(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnCancelButtonPressed(Action value);
    [CompilerGeneratedAttribute]
public string get_CancelButtonText();
    [CompilerGeneratedAttribute]
public void set_CancelButtonText(string value);
    [CompilerGeneratedAttribute]
public string get_FlashButtonText();
    [CompilerGeneratedAttribute]
public void set_FlashButtonText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public void set_ScanningOptions(MobileBarcodeScanningOptions value);
    private void Setup();
    private bool SetupCaptureSession();
    public void DidRotate(UIInterfaceOrientation orientation);
    public void ResizePreview(UIInterfaceOrientation orientation);
    public void Focus(CGPoint pointOfInterest);
    public sealed virtual void StartScanning(Action`1<Result> scanResultHandler, MobileBarcodeScanningOptions options);
    public sealed virtual void StopScanning();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    public sealed virtual void Torch(bool on);
    public sealed virtual void ToggleTorch();
    public sealed virtual void AutoFocus();
    public sealed virtual void AutoFocus(int x, int y);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TopText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BottomText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BottomText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UIView get_CustomOverlayView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomOverlayView(UIView value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomOverlayView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCustomOverlayView(bool value);
    public sealed virtual bool get_IsAnalyzing();
    public sealed virtual bool get_IsTorchOn();
    public sealed virtual bool get_HasTorch();
    public static bool SupportsAllRequestedBarcodeFormats(IEnumerable`1<BarcodeFormat> formats);
    private BarcodeFormat ZXingBarcodeFormatFromAVCaptureBarcodeFormat(string avMetadataObjectType);
    private AVMetadataObjectType AVCaptureBarcodeFormatFromZXingBarcodeFormat(BarcodeFormat zxingBarcodeFormat);
    [CompilerGeneratedAttribute]
private void <Setup>b__26_0();
    [CompilerGeneratedAttribute]
private void <StartScanning>b__36_0();
}
public class ZXing.Mobile.AVCaptureScannerViewController : UIViewController {
    private AVCaptureScannerView scannerView;
    [CompilerGeneratedAttribute]
private Action`1<Result> OnScannedResult;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanner <Scanner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinuousScanning>k__BackingField;
    private UIActivityIndicatorView loadingView;
    private UIView loadingBg;
    private UIStatusBarStyle originalStatusBarStyle;
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public MobileBarcodeScanner Scanner { get; public set; }
    public bool ContinuousScanning { get; public set; }
    public bool IsTorchOn { get; }
    public AVCaptureScannerViewController(MobileBarcodeScanningOptions options, MobileBarcodeScanner scanner);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnScannedResult(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnScannedResult(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScanningOptions(MobileBarcodeScanningOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanner get_Scanner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scanner(MobileBarcodeScanner value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContinuousScanning();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContinuousScanning(bool value);
    public sealed virtual UIViewController AsViewController();
    public sealed virtual void Cancel();
    public virtual void ViewDidLoad();
    public sealed virtual void Torch(bool on);
    public sealed virtual void ToggleTorch();
    public sealed virtual bool get_IsTorchOn();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public virtual bool ShouldAutorotate();
    public virtual UIInterfaceOrientationMask GetSupportedInterfaceOrientations();
    [CompilerGeneratedAttribute]
private void <Cancel>b__20_0();
    [CompilerGeneratedAttribute]
private void <ViewDidLoad>b__22_0();
    [CompilerGeneratedAttribute]
private void <ViewDidAppear>b__29_0(Result result);
}
internal class ZXing.Mobile.AVConfigs : ValueType {
    public AVCaptureFocusMode FocusMode;
    public AVCaptureExposureMode ExposureMode;
    public AVCaptureWhiteBalanceMode WhiteBalanceMode;
    public AVCaptureAutoFocusRangeRestriction AutoFocusRangeRestriction;
    public CGPoint FocusPointOfInterest;
    public CGPoint ExposurePointOfInterest;
    public AVCaptureFlashMode FlashMode;
    public AVCaptureTorchMode TorchMode;
}
public class ZXing.Mobile.BarcodeWriter : BarcodeWriter`1<UIImage> {
}
public class ZXing.Mobile.BitmapRenderer : object {
    public sealed virtual UIImage Render(BitMatrix matrix, BarcodeFormat format, string content);
    public sealed virtual UIImage Render(BitMatrix matrix, BarcodeFormat format, string content, EncodingOptions options);
}
public class ZXing.Mobile.CameraResolution : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
public class ZXing.Mobile.CancelScanRequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
internal class ZXing.Mobile.CaptureDelegate : AVCaptureMetadataOutputObjectsDelegate {
    [CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<AVMetadataObject>> <OnCapture>k__BackingField;
    public Action`1<IEnumerable`1<AVMetadataObject>> OnCapture { get; public set; }
    public CaptureDelegate(Action`1<IEnumerable`1<AVMetadataObject>> onCapture);
    [CompilerGeneratedAttribute]
public Action`1<IEnumerable`1<AVMetadataObject>> get_OnCapture();
    [CompilerGeneratedAttribute]
public void set_OnCapture(Action`1<IEnumerable`1<AVMetadataObject>> value);
    public virtual void DidOutputMetadataObjects(AVCaptureMetadataOutput captureOutput, AVMetadataObject[] metadataObjects, AVCaptureConnection connection);
}
public class ZXing.Mobile.CVPixelBufferBGRA32LuminanceSource : BaseLuminanceSource {
    public CVPixelBufferBGRA32LuminanceSource(Byte* cvPixelByteArray, int cvPixelByteArrayLength, int width, int height);
    public CVPixelBufferBGRA32LuminanceSource(Byte[] luminances, int width, int height);
    private void CalculateLuminance(Byte* rgbRawBytes, int bytesLen);
    protected virtual LuminanceSource CreateLuminanceSource(Byte[] newLuminances, int width, int height);
}
public interface ZXing.Mobile.IMobileBarcodeScanner {
    public bool UseCustomOverlay { get; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string CameraUnsupportedMessage { get; public set; }
    public bool IsTorchOn { get; }
    public abstract virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public abstract virtual Task`1<Result> Scan();
    public abstract virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public abstract virtual void ScanContinuously(Action`1<Result> scanHandler);
    public abstract virtual void Cancel();
    public abstract virtual void Torch(bool on);
    public abstract virtual void AutoFocus();
    public abstract virtual void ToggleTorch();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
    public abstract virtual bool get_UseCustomOverlay();
    public abstract virtual string get_TopText();
    public abstract virtual void set_TopText(string value);
    public abstract virtual string get_BottomText();
    public abstract virtual void set_BottomText(string value);
    public abstract virtual string get_CancelButtonText();
    public abstract virtual void set_CancelButtonText(string value);
    public abstract virtual string get_FlashButtonText();
    public abstract virtual void set_FlashButtonText(string value);
    public abstract virtual string get_CameraUnsupportedMessage();
    public abstract virtual void set_CameraUnsupportedMessage(string value);
    public abstract virtual bool get_IsTorchOn();
}
public interface ZXing.Mobile.IScannerSessionHost {
    public MobileBarcodeScanningOptions ScanningOptions { get; }
    public abstract virtual MobileBarcodeScanningOptions get_ScanningOptions();
}
public interface ZXing.Mobile.IScannerView {
    public bool IsTorchOn { get; }
    public bool IsAnalyzing { get; }
    public bool HasTorch { get; }
    public abstract virtual void StartScanning(Action`1<Result> scanResultHandler, MobileBarcodeScanningOptions options);
    public abstract virtual void StopScanning();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
    public abstract virtual void Torch(bool on);
    public abstract virtual void AutoFocus();
    public abstract virtual void AutoFocus(int x, int y);
    public abstract virtual void ToggleTorch();
    public abstract virtual bool get_IsTorchOn();
    public abstract virtual bool get_IsAnalyzing();
    public abstract virtual bool get_HasTorch();
}
public interface ZXing.Mobile.IScannerViewController {
    public bool IsTorchOn { get; }
    public bool ContinuousScanning { get; public set; }
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public MobileBarcodeScanner Scanner { get; public set; }
    public abstract virtual void Torch(bool on);
    public abstract virtual void ToggleTorch();
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsTorchOn();
    public abstract virtual bool get_ContinuousScanning();
    public abstract virtual void set_ContinuousScanning(bool value);
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnScannedResult(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnScannedResult(Action`1<Result> value);
    public abstract virtual MobileBarcodeScanningOptions get_ScanningOptions();
    public abstract virtual void set_ScanningOptions(MobileBarcodeScanningOptions value);
    public abstract virtual MobileBarcodeScanner get_Scanner();
    public abstract virtual void set_Scanner(MobileBarcodeScanner value);
    public abstract virtual UIViewController AsViewController();
}
public interface ZXing.Mobile.IZXingScanner`1 {
    public TOverlayViewType CustomOverlayView { get; public set; }
    public bool UseCustomOverlayView { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public abstract virtual TOverlayViewType get_CustomOverlayView();
    public abstract virtual void set_CustomOverlayView(TOverlayViewType value);
    public abstract virtual bool get_UseCustomOverlayView();
    public abstract virtual void set_UseCustomOverlayView(bool value);
    public abstract virtual string get_TopText();
    public abstract virtual void set_TopText(string value);
    public abstract virtual string get_BottomText();
    public abstract virtual void set_BottomText(string value);
}
public class ZXing.Mobile.MobileBarcodeScanner : MobileBarcodeScannerBase {
    private IScannerViewController viewController;
    private WeakReference`1<UIViewController> weakAppController;
    private ManualResetEvent scanResultResetEvent;
    [CompilerGeneratedAttribute]
private UIView <CustomOverlay>k__BackingField;
    public bool IsTorchOn { get; }
    private bool PlatformIsTorchOn { get; }
    public UIView CustomOverlay { get; public set; }
    public MobileBarcodeScanner(UIViewController delegateController);
    public virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public virtual void Cancel();
    public virtual void AutoFocus();
    public virtual void Torch(bool on);
    public virtual void ToggleTorch();
    public virtual void PauseAnalysis();
    public virtual void ResumeAnalysis();
    public virtual bool get_IsTorchOn();
    public Task`1<Result> Scan(bool useAVCaptureEngine);
    private Task`1<Result> PlatformScan(MobileBarcodeScanningOptions options);
    private void PlatformScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public void ScanContinuously(MobileBarcodeScanningOptions options, bool useAVCaptureEngine, Action`1<Result> scanHandler);
    private void InternalScanContinuously(MobileBarcodeScanningOptions options, bool useAVCaptureEngine, Action`1<Result> scanHandler);
    public Task`1<Result> Scan(MobileBarcodeScanningOptions options, bool useAVCaptureEngine);
    private void PlatformCancel();
    private void PlatformTorch(bool on);
    private void PlatformToggleTorch();
    private void PlatformAutoFocus();
    private void PlatformPauseAnalysis();
    private void PlatformResumeAnalysis();
    private bool get_PlatformIsTorchOn();
    [CompilerGeneratedAttribute]
public UIView get_CustomOverlay();
    [CompilerGeneratedAttribute]
public void set_CustomOverlay(UIView value);
    [CompilerGeneratedAttribute]
private void <PlatformCancel>b__21_0();
}
public abstract class ZXing.Mobile.MobileBarcodeScannerBase : object {
    [CompilerGeneratedAttribute]
private bool <UseCustomOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlashButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CameraUnsupportedMessage>k__BackingField;
    public bool UseCustomOverlay { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string CameraUnsupportedMessage { get; public set; }
    public bool IsTorchOn { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomOverlay();
    [CompilerGeneratedAttribute]
public void set_UseCustomOverlay(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TopText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BottomText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BottomText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CancelButtonText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancelButtonText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FlashButtonText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FlashButtonText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CameraUnsupportedMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CameraUnsupportedMessage(string value);
    public abstract virtual Task`1<Result> Scan(MobileBarcodeScanningOptions options);
    public sealed virtual Task`1<Result> Scan();
    public sealed virtual void ScanContinuously(Action`1<Result> scanHandler);
    public abstract virtual void ScanContinuously(MobileBarcodeScanningOptions options, Action`1<Result> scanHandler);
    public abstract virtual void Cancel();
    public abstract virtual void Torch(bool on);
    public abstract virtual void ToggleTorch();
    public abstract virtual bool get_IsTorchOn();
    public abstract virtual void AutoFocus();
    public abstract virtual void PauseAnalysis();
    public abstract virtual void ResumeAnalysis();
}
public class ZXing.Mobile.MobileBarcodeScanningOptions : object {
    [CompilerGeneratedAttribute]
private CameraResolutionSelectorDelegate <CameraResolutionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<BarcodeFormat> <PossibleFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TryHarder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PureBarcode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoRotate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseCode39ExtendedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TryInverted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseFrontCameraIfAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AssumeGS1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutofocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNativeScanning>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenContinuousScans>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenAnalyzingFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialDelayBeforeAnalyzingFrames>k__BackingField;
    public CameraResolutionSelectorDelegate CameraResolutionSelector { get; public set; }
    public IEnumerable`1<BarcodeFormat> PossibleFormats { get; public set; }
    public Nullable`1<bool> TryHarder { get; public set; }
    public Nullable`1<bool> PureBarcode { get; public set; }
    public Nullable`1<bool> AutoRotate { get; public set; }
    public Nullable`1<bool> UseCode39ExtendedMode { get; public set; }
    public string CharacterSet { get; public set; }
    public Nullable`1<bool> TryInverted { get; public set; }
    public Nullable`1<bool> UseFrontCameraIfAvailable { get; public set; }
    public Nullable`1<bool> AssumeGS1 { get; public set; }
    public bool DisableAutofocus { get; public set; }
    public bool UseNativeScanning { get; public set; }
    public int DelayBetweenContinuousScans { get; public set; }
    public int DelayBetweenAnalyzingFrames { get; public set; }
    public int InitialDelayBeforeAnalyzingFrames { get; public set; }
    public static MobileBarcodeScanningOptions Default { get; }
    [CompilerGeneratedAttribute]
public CameraResolutionSelectorDelegate get_CameraResolutionSelector();
    [CompilerGeneratedAttribute]
public void set_CameraResolutionSelector(CameraResolutionSelectorDelegate value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<BarcodeFormat> get_PossibleFormats();
    [CompilerGeneratedAttribute]
public void set_PossibleFormats(IEnumerable`1<BarcodeFormat> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TryHarder();
    [CompilerGeneratedAttribute]
public void set_TryHarder(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PureBarcode();
    [CompilerGeneratedAttribute]
public void set_PureBarcode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoRotate();
    [CompilerGeneratedAttribute]
public void set_AutoRotate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseCode39ExtendedMode();
    [CompilerGeneratedAttribute]
public void set_UseCode39ExtendedMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_CharacterSet();
    [CompilerGeneratedAttribute]
public void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TryInverted();
    [CompilerGeneratedAttribute]
public void set_TryInverted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseFrontCameraIfAvailable();
    [CompilerGeneratedAttribute]
public void set_UseFrontCameraIfAvailable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AssumeGS1();
    [CompilerGeneratedAttribute]
public void set_AssumeGS1(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutofocus();
    [CompilerGeneratedAttribute]
public void set_DisableAutofocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNativeScanning();
    [CompilerGeneratedAttribute]
public void set_UseNativeScanning(bool value);
    [CompilerGeneratedAttribute]
public int get_DelayBetweenContinuousScans();
    [CompilerGeneratedAttribute]
public void set_DelayBetweenContinuousScans(int value);
    [CompilerGeneratedAttribute]
public int get_DelayBetweenAnalyzingFrames();
    [CompilerGeneratedAttribute]
public void set_DelayBetweenAnalyzingFrames(int value);
    [CompilerGeneratedAttribute]
public int get_InitialDelayBeforeAnalyzingFrames();
    [CompilerGeneratedAttribute]
public void set_InitialDelayBeforeAnalyzingFrames(int value);
    public static MobileBarcodeScanningOptions get_Default();
    public BarcodeReaderGeneric BuildBarcodeReader();
    public MultiFormatReader BuildMultiFormatReader();
    public CameraResolution GetResolution(List`1<CameraResolution> availableResolutions);
}
public class ZXing.Mobile.PerformanceCounter : object {
    private static Dictionary`2<string, Stopwatch> counters;
    private static PerformanceCounter();
    public static string Start();
    public static TimeSpan Stop(string guid);
    public static void Stop(string guid, string msg);
}
public class ZXing.Mobile.RGBLuminanceSourceiOS : RGBLuminanceSource {
    public RGBLuminanceSourceiOS(UIImage d);
    private void CalculateLuminance(UIImage d);
}
public class ZXing.Mobile.UIImageBarcodeReader : BarcodeReader`1<UIImage> {
    private static Func`2<UIImage, LuminanceSource> defaultCreateLuminanceSource;
    public UIImageBarcodeReader(Reader reader, Func`2<UIImage, LuminanceSource> createLuminanceSource, Func`2<LuminanceSource, Binarizer> createBinarizer);
    public UIImageBarcodeReader(Reader reader, Func`2<UIImage, LuminanceSource> createLuminanceSource, Func`2<LuminanceSource, Binarizer> createBinarizer, Func`5<Byte[], int, int, BitmapFormat, LuminanceSource> createRGBLuminanceSource);
    private static UIImageBarcodeReader();
}
public class ZXing.Mobile.ZXingDefaultOverlayView : UIView {
    private string cancelText;
    private string flashText;
    private string topText;
    private string bottomText;
    private Action onCancel;
    private Action onTorch;
    private UIView topBg;
    private UIView bottomBg;
    private UILabel textTop;
    private UILabel textBottom;
    private UIView redLine;
    public ZXingDefaultOverlayView(CGRect frame, string topText, string bottomText, string cancelText, string flashText, Action onCancel, Action onTorch);
    private void Initialize();
    public virtual void LayoutSubviews();
    public void Destroy();
    [CompilerGeneratedAttribute]
private void <Destroy>b__14_0();
}
public class ZXing.Mobile.ZXingScannerView : UIView {
    [CompilerGeneratedAttribute]
private ScannerSetupCompleteDelegate OnScannerSetupComplete;
    private AVCaptureSession session;
    private AVCaptureDevice captureDevice;
    private AVCaptureVideoPreviewLayer previewLayer;
    private AVCaptureVideoDataOutput output;
    private OutputRecorder outputRecorder;
    private DispatchQueue queue;
    private Action`1<Result> resultCallback;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) stopped;
    private UIView layerView;
    private UIView overlayView;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action OnCancelButtonPressed;
    [CompilerGeneratedAttribute]
private string <CancelButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlashButtonText>k__BackingField;
    private bool shouldRotatePreviewBuffer;
    private AVConfigs captureDeviceOriginalConfig;
    private bool torch;
    private bool analyzing;
    [CompilerGeneratedAttribute]
private string <TopText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomText>k__BackingField;
    [CompilerGeneratedAttribute]
private UIView <CustomOverlayView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCustomOverlayView>k__BackingField;
    private Nullable`1<bool> hasTorch;
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public string CancelButtonText { get; public set; }
    public string FlashButtonText { get; public set; }
    public string TopText { get; public set; }
    public string BottomText { get; public set; }
    public UIView CustomOverlayView { get; public set; }
    public bool UseCustomOverlayView { get; public set; }
    public bool IsAnalyzing { get; }
    public bool IsTorchOn { get; }
    public bool HasTorch { get; }
    public ZXingScannerView(IntPtr handle);
    public ZXingScannerView(CGRect frame);
    [CompilerGeneratedAttribute]
public void add_OnScannerSetupComplete(ScannerSetupCompleteDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnScannerSetupComplete(ScannerSetupCompleteDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public void set_ScanningOptions(MobileBarcodeScanningOptions value);
    [CompilerGeneratedAttribute]
public void add_OnCancelButtonPressed(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnCancelButtonPressed(Action value);
    [CompilerGeneratedAttribute]
public string get_CancelButtonText();
    [CompilerGeneratedAttribute]
public void set_CancelButtonText(string value);
    [CompilerGeneratedAttribute]
public string get_FlashButtonText();
    [CompilerGeneratedAttribute]
public void set_FlashButtonText(string value);
    private void Setup();
    private bool SetupCaptureSession();
    public void DidRotate(UIInterfaceOrientation orientation);
    public void ResizePreview(UIInterfaceOrientation orientation);
    public void Focus(PointF pointOfInterest);
    public sealed virtual void StartScanning(Action`1<Result> scanResultHandler, MobileBarcodeScanningOptions options);
    public sealed virtual void StopScanning();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    public sealed virtual void Torch(bool on);
    public sealed virtual void ToggleTorch();
    public sealed virtual void AutoFocus();
    public sealed virtual void AutoFocus(int x, int y);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TopText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BottomText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BottomText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UIView get_CustomOverlayView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomOverlayView(UIView value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomOverlayView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCustomOverlayView(bool value);
    public sealed virtual bool get_IsAnalyzing();
    public sealed virtual bool get_IsTorchOn();
    public sealed virtual bool get_HasTorch();
    [CompilerGeneratedAttribute]
private void <Setup>b__34_0();
    [CompilerGeneratedAttribute]
private void <StartScanning>b__42_0();
}
public class ZXing.Mobile.ZXingScannerViewController : UIViewController {
    private ZXingScannerView scannerView;
    [CompilerGeneratedAttribute]
private Action`1<Result> OnScannedResult;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanningOptions <ScanningOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private MobileBarcodeScanner <Scanner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinuousScanning>k__BackingField;
    private UIActivityIndicatorView loadingView;
    private UIView loadingBg;
    [CompilerGeneratedAttribute]
private UIView <CustomLoadingView>k__BackingField;
    private UIStatusBarStyle originalStatusBarStyle;
    public MobileBarcodeScanningOptions ScanningOptions { get; public set; }
    public MobileBarcodeScanner Scanner { get; public set; }
    public bool ContinuousScanning { get; public set; }
    public UIView CustomLoadingView { get; public set; }
    public bool IsTorchOn { get; }
    public ZXingScannerViewController(MobileBarcodeScanningOptions options, MobileBarcodeScanner scanner);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnScannedResult(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnScannedResult(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanningOptions get_ScanningOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScanningOptions(MobileBarcodeScanningOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual MobileBarcodeScanner get_Scanner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scanner(MobileBarcodeScanner value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContinuousScanning();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContinuousScanning(bool value);
    [CompilerGeneratedAttribute]
public UIView get_CustomLoadingView();
    [CompilerGeneratedAttribute]
public void set_CustomLoadingView(UIView value);
    public sealed virtual UIViewController AsViewController();
    public sealed virtual void Cancel();
    public virtual void ViewDidLoad();
    public sealed virtual void Torch(bool on);
    public sealed virtual void ToggleTorch();
    public sealed virtual void PauseAnalysis();
    public sealed virtual void ResumeAnalysis();
    public sealed virtual bool get_IsTorchOn();
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public virtual bool ShouldAutorotate();
    public virtual UIInterfaceOrientationMask GetSupportedInterfaceOrientations();
    [ObsoleteAttribute("Deprecated in iOS6. Replace it with both GetSupportedInterfaceOrientations and PreferredInterfaceOrientationForPresentation")]
public virtual bool ShouldAutorotateToInterfaceOrientation(UIInterfaceOrientation toInterfaceOrientation);
    private void HandleOnScannerSetupComplete();
    [CompilerGeneratedAttribute]
private void <ViewDidLoad>b__26_0();
    [CompilerGeneratedAttribute]
private void <ViewDidAppear>b__33_0();
    [CompilerGeneratedAttribute]
private void <ViewDidAppear>b__33_1();
    [CompilerGeneratedAttribute]
private void <ViewDidAppear>b__33_2(Result result);
    [CompilerGeneratedAttribute]
private void <HandleOnScannerSetupComplete>b__40_0();
}
